#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_MapVehicleListItem

#include "Basic.hpp"

#include "Squad_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "ESQIntelligence_structs.hpp"


namespace SDK::Params
{

// Function W_MapVehicleListItem.W_MapVehicleListItem_C.ExecuteUbergraph_W_MapVehicleListItem
// 0x00F0 (0x00F0 - 0x0000)
struct W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4369[0x1];                                     // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetNextAvailabilityTimer_OutText;         // 0x0008(0x0018)()
	bool                                          CallFunc_ShouldShowDetails_ShowDetails;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Init_Delay_Out_Should_Update_Timer;       // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_436A[0x5];                                     // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQAvailabilityState_Vehicle           K2Node_CustomEvent_State;                          // 0x0028(0x0050)(ContainsInstancedReference)
	bool                                          CallFunc_UpdateCollapsing_Out_Collapsed;           // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_436B[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x007C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_436C[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0090(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_436D[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x00A0(0x0018)()
	ESlateVisibility                              K2Node_Select_Default;                             // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_436E[0x6];                                     // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x00C0(0x0018)()
	class FText                                   K2Node_Select_Default_1;                           // 0x00D8(0x0018)()
};
static_assert(alignof(W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem) == 0x000008, "Wrong alignment on W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem");
static_assert(sizeof(W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem) == 0x0000F0, "Wrong size on W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem");
static_assert(offsetof(W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem, EntryPoint) == 0x000000, "Member 'W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem, Temp_bool_Variable) == 0x000004, "Member 'W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem, Temp_byte_Variable) == 0x000005, "Member 'W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem, Temp_byte_Variable_1) == 0x000006, "Member 'W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem, CallFunc_GetNextAvailabilityTimer_OutText) == 0x000008, "Member 'W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem::CallFunc_GetNextAvailabilityTimer_OutText' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem, CallFunc_ShouldShowDetails_ShowDetails) == 0x000020, "Member 'W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem::CallFunc_ShouldShowDetails_ShowDetails' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem, CallFunc_Init_Delay_Out_Should_Update_Timer) == 0x000021, "Member 'W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem::CallFunc_Init_Delay_Out_Should_Update_Timer' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem, Temp_bool_Variable_1) == 0x000022, "Member 'W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem, K2Node_CustomEvent_State) == 0x000028, "Member 'W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem::K2Node_CustomEvent_State' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem, CallFunc_UpdateCollapsing_Out_Collapsed) == 0x000078, "Member 'W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem::CallFunc_UpdateCollapsing_Out_Collapsed' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem, K2Node_CreateDelegate_OutputDelegate) == 0x00007C, "Member 'W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000090, "Member 'W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem, CallFunc_TextIsEmpty_ReturnValue) == 0x000098, "Member 'W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem, Temp_text_Variable) == 0x0000A0, "Member 'W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem, K2Node_Select_Default) == 0x0000B8, "Member 'W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000B9, "Member 'W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem, CallFunc_Conv_IntToText_ReturnValue) == 0x0000C0, "Member 'W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem, K2Node_Select_Default_1) == 0x0000D8, "Member 'W_MapVehicleListItem_C_ExecuteUbergraph_W_MapVehicleListItem::K2Node_Select_Default_1' has a wrong offset!");

// Function W_MapVehicleListItem.W_MapVehicleListItem_C.UpdateStatus
// 0x0050 (0x0050 - 0x0000)
struct W_MapVehicleListItem_C_UpdateStatus final
{
public:
	struct FSQAvailabilityState_Vehicle           State;                                             // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
};
static_assert(alignof(W_MapVehicleListItem_C_UpdateStatus) == 0x000008, "Wrong alignment on W_MapVehicleListItem_C_UpdateStatus");
static_assert(sizeof(W_MapVehicleListItem_C_UpdateStatus) == 0x000050, "Wrong size on W_MapVehicleListItem_C_UpdateStatus");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateStatus, State) == 0x000000, "Member 'W_MapVehicleListItem_C_UpdateStatus::State' has a wrong offset!");

// Function W_MapVehicleListItem.W_MapVehicleListItem_C.GetDefaultSpawnDelay
// 0x0018 (0x0018 - 0x0000)
struct W_MapVehicleListItem_C_GetDefaultSpawnDelay final
{
public:
	struct FTimespan                              Delay;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasDelay_ReturnValue;                     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_436F[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              CallFunc_GetDefaultDelay_OutDefaultDelay;          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_MapVehicleListItem_C_GetDefaultSpawnDelay) == 0x000008, "Wrong alignment on W_MapVehicleListItem_C_GetDefaultSpawnDelay");
static_assert(sizeof(W_MapVehicleListItem_C_GetDefaultSpawnDelay) == 0x000018, "Wrong size on W_MapVehicleListItem_C_GetDefaultSpawnDelay");
static_assert(offsetof(W_MapVehicleListItem_C_GetDefaultSpawnDelay, Delay) == 0x000000, "Member 'W_MapVehicleListItem_C_GetDefaultSpawnDelay::Delay' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_GetDefaultSpawnDelay, CallFunc_HasDelay_ReturnValue) == 0x000008, "Member 'W_MapVehicleListItem_C_GetDefaultSpawnDelay::CallFunc_HasDelay_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_GetDefaultSpawnDelay, CallFunc_GetDefaultDelay_OutDefaultDelay) == 0x000010, "Member 'W_MapVehicleListItem_C_GetDefaultSpawnDelay::CallFunc_GetDefaultDelay_OutDefaultDelay' has a wrong offset!");

// Function W_MapVehicleListItem.W_MapVehicleListItem_C.UpdateUsed
// 0x0028 (0x0028 - 0x0000)
struct W_MapVehicleListItem_C_UpdateUsed final
{
public:
	int32                                         Used;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4370[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0008(0x0018)()
	bool                                          CallFunc_ShouldShowDetails_ShowDetails;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_MapVehicleListItem_C_UpdateUsed) == 0x000008, "Wrong alignment on W_MapVehicleListItem_C_UpdateUsed");
static_assert(sizeof(W_MapVehicleListItem_C_UpdateUsed) == 0x000028, "Wrong size on W_MapVehicleListItem_C_UpdateUsed");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateUsed, Used) == 0x000000, "Member 'W_MapVehicleListItem_C_UpdateUsed::Used' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateUsed, Temp_byte_Variable) == 0x000004, "Member 'W_MapVehicleListItem_C_UpdateUsed::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateUsed, Temp_byte_Variable_1) == 0x000005, "Member 'W_MapVehicleListItem_C_UpdateUsed::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateUsed, CallFunc_Conv_IntToText_ReturnValue) == 0x000008, "Member 'W_MapVehicleListItem_C_UpdateUsed::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateUsed, CallFunc_ShouldShowDetails_ShowDetails) == 0x000020, "Member 'W_MapVehicleListItem_C_UpdateUsed::CallFunc_ShouldShowDetails_ShowDetails' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateUsed, Temp_bool_Variable) == 0x000021, "Member 'W_MapVehicleListItem_C_UpdateUsed::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateUsed, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000022, "Member 'W_MapVehicleListItem_C_UpdateUsed::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateUsed, K2Node_Select_Default) == 0x000023, "Member 'W_MapVehicleListItem_C_UpdateUsed::K2Node_Select_Default' has a wrong offset!");

// Function W_MapVehicleListItem.W_MapVehicleListItem_C.UpdateAvailable
// 0x0038 (0x0038 - 0x0000)
struct W_MapVehicleListItem_C_UpdateAvailable final
{
public:
	int32                                         Available;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4371[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQAvailability*                        Target;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4372[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0018(0x0018)()
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldShowDetails_ShowDetails;            // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0033(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_MapVehicleListItem_C_UpdateAvailable) == 0x000008, "Wrong alignment on W_MapVehicleListItem_C_UpdateAvailable");
static_assert(sizeof(W_MapVehicleListItem_C_UpdateAvailable) == 0x000038, "Wrong size on W_MapVehicleListItem_C_UpdateAvailable");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateAvailable, Available) == 0x000000, "Member 'W_MapVehicleListItem_C_UpdateAvailable::Available' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateAvailable, Target) == 0x000008, "Member 'W_MapVehicleListItem_C_UpdateAvailable::Target' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateAvailable, Temp_byte_Variable) == 0x000010, "Member 'W_MapVehicleListItem_C_UpdateAvailable::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateAvailable, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000011, "Member 'W_MapVehicleListItem_C_UpdateAvailable::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateAvailable, CallFunc_Conv_IntToText_ReturnValue) == 0x000018, "Member 'W_MapVehicleListItem_C_UpdateAvailable::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateAvailable, Temp_byte_Variable_1) == 0x000030, "Member 'W_MapVehicleListItem_C_UpdateAvailable::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateAvailable, Temp_bool_Variable) == 0x000031, "Member 'W_MapVehicleListItem_C_UpdateAvailable::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateAvailable, CallFunc_ShouldShowDetails_ShowDetails) == 0x000032, "Member 'W_MapVehicleListItem_C_UpdateAvailable::CallFunc_ShouldShowDetails_ShowDetails' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateAvailable, K2Node_Select_Default) == 0x000033, "Member 'W_MapVehicleListItem_C_UpdateAvailable::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateAvailable, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000034, "Member 'W_MapVehicleListItem_C_UpdateAvailable::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function W_MapVehicleListItem.W_MapVehicleListItem_C.UpdateDelay
// 0x0040 (0x0040 - 0x0000)
struct W_MapVehicleListItem_C_UpdateDelay final
{
public:
	struct FDateTime                              NextAvailability;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          L_Show_Default_Respawn_Delay;                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          L_Show_Next_Respawn_Delay;                         // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4373[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              CallFunc_GetDefaultSpawnDelay_Delay;               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4374[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_ToHumanReadableTime_Result;               // 0x0020(0x0018)()
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldShowDetails_ShowDetails;            // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldShowDetails_ShowDetails_1;          // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_DateTimeDateTime_ReturnValue;    // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_MapVehicleListItem_C_UpdateDelay) == 0x000008, "Wrong alignment on W_MapVehicleListItem_C_UpdateDelay");
static_assert(sizeof(W_MapVehicleListItem_C_UpdateDelay) == 0x000040, "Wrong size on W_MapVehicleListItem_C_UpdateDelay");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateDelay, NextAvailability) == 0x000000, "Member 'W_MapVehicleListItem_C_UpdateDelay::NextAvailability' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateDelay, L_Show_Default_Respawn_Delay) == 0x000008, "Member 'W_MapVehicleListItem_C_UpdateDelay::L_Show_Default_Respawn_Delay' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateDelay, L_Show_Next_Respawn_Delay) == 0x000009, "Member 'W_MapVehicleListItem_C_UpdateDelay::L_Show_Next_Respawn_Delay' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateDelay, Temp_bool_Variable) == 0x00000A, "Member 'W_MapVehicleListItem_C_UpdateDelay::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateDelay, Temp_byte_Variable) == 0x00000B, "Member 'W_MapVehicleListItem_C_UpdateDelay::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateDelay, Temp_byte_Variable_1) == 0x00000C, "Member 'W_MapVehicleListItem_C_UpdateDelay::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateDelay, CallFunc_GetDefaultSpawnDelay_Delay) == 0x000010, "Member 'W_MapVehicleListItem_C_UpdateDelay::CallFunc_GetDefaultSpawnDelay_Delay' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateDelay, CallFunc_BooleanOR_ReturnValue) == 0x000018, "Member 'W_MapVehicleListItem_C_UpdateDelay::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateDelay, CallFunc_ToHumanReadableTime_Result) == 0x000020, "Member 'W_MapVehicleListItem_C_UpdateDelay::CallFunc_ToHumanReadableTime_Result' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateDelay, K2Node_Select_Default) == 0x000038, "Member 'W_MapVehicleListItem_C_UpdateDelay::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateDelay, CallFunc_ShouldShowDetails_ShowDetails) == 0x000039, "Member 'W_MapVehicleListItem_C_UpdateDelay::CallFunc_ShouldShowDetails_ShowDetails' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateDelay, CallFunc_ShouldShowDetails_ShowDetails_1) == 0x00003A, "Member 'W_MapVehicleListItem_C_UpdateDelay::CallFunc_ShouldShowDetails_ShowDetails_1' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateDelay, CallFunc_NotEqual_DateTimeDateTime_ReturnValue) == 0x00003B, "Member 'W_MapVehicleListItem_C_UpdateDelay::CallFunc_NotEqual_DateTimeDateTime_ReturnValue' has a wrong offset!");

// Function W_MapVehicleListItem.W_MapVehicleListItem_C.UpdateUnavailabilityReason
// 0x0018 (0x0018 - 0x0000)
struct W_MapVehicleListItem_C_UpdateUnavailabilityReason final
{
public:
	struct FDataTableRowHandle                    Reason;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_MapVehicleListItem_C_UpdateUnavailabilityReason) == 0x000008, "Wrong alignment on W_MapVehicleListItem_C_UpdateUnavailabilityReason");
static_assert(sizeof(W_MapVehicleListItem_C_UpdateUnavailabilityReason) == 0x000018, "Wrong size on W_MapVehicleListItem_C_UpdateUnavailabilityReason");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateUnavailabilityReason, Reason) == 0x000000, "Member 'W_MapVehicleListItem_C_UpdateUnavailabilityReason::Reason' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateUnavailabilityReason, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000010, "Member 'W_MapVehicleListItem_C_UpdateUnavailabilityReason::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateUnavailabilityReason, CallFunc_NotEqual_NameName_ReturnValue) == 0x000011, "Member 'W_MapVehicleListItem_C_UpdateUnavailabilityReason::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateUnavailabilityReason, CallFunc_BooleanOR_ReturnValue) == 0x000012, "Member 'W_MapVehicleListItem_C_UpdateUnavailabilityReason::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function W_MapVehicleListItem.W_MapVehicleListItem_C.ShouldShowDetails
// 0x0028 (0x0028 - 0x0000)
struct W_MapVehicleListItem_C_ShouldShowDetails final
{
public:
	ESQIntelligence                               Intel;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowDetails;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4375[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USQFactionSetup*                        CallFunc_TryGetCurrentFactionSetup_OutFactionSetup; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryGetCurrentFactionSetup_ReturnValue;    // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4376[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_SQFactionSetup_C*                   K2Node_DynamicCast_AsBP_SQFaction_Setup;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasIntel_Out_Has_Intel;                   // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_MapVehicleListItem_C_ShouldShowDetails) == 0x000008, "Wrong alignment on W_MapVehicleListItem_C_ShouldShowDetails");
static_assert(sizeof(W_MapVehicleListItem_C_ShouldShowDetails) == 0x000028, "Wrong size on W_MapVehicleListItem_C_ShouldShowDetails");
static_assert(offsetof(W_MapVehicleListItem_C_ShouldShowDetails, Intel) == 0x000000, "Member 'W_MapVehicleListItem_C_ShouldShowDetails::Intel' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ShouldShowDetails, ShowDetails) == 0x000001, "Member 'W_MapVehicleListItem_C_ShouldShowDetails::ShowDetails' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ShouldShowDetails, CallFunc_TryGetCurrentFactionSetup_OutFactionSetup) == 0x000008, "Member 'W_MapVehicleListItem_C_ShouldShowDetails::CallFunc_TryGetCurrentFactionSetup_OutFactionSetup' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ShouldShowDetails, CallFunc_TryGetCurrentFactionSetup_ReturnValue) == 0x000010, "Member 'W_MapVehicleListItem_C_ShouldShowDetails::CallFunc_TryGetCurrentFactionSetup_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ShouldShowDetails, K2Node_DynamicCast_AsBP_SQFaction_Setup) == 0x000018, "Member 'W_MapVehicleListItem_C_ShouldShowDetails::K2Node_DynamicCast_AsBP_SQFaction_Setup' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ShouldShowDetails, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'W_MapVehicleListItem_C_ShouldShowDetails::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ShouldShowDetails, CallFunc_HasIntel_Out_Has_Intel) == 0x000021, "Member 'W_MapVehicleListItem_C_ShouldShowDetails::CallFunc_HasIntel_Out_Has_Intel' has a wrong offset!");

// Function W_MapVehicleListItem.W_MapVehicleListItem_C.GetNextAvailabilityTimer
// 0x0118 (0x0118 - 0x0000)
struct W_MapVehicleListItem_C_GetNextAvailabilityTimer final
{
public:
	class FText                                   OutText;                                           // 0x0000(0x0018)(Parm, OutParm)
	struct FDateTime                              CallFunc_GetServerUtcTime_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FTimespan                              CallFunc_Subtract_DateTimeDateTime_ReturnValue;    // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DateTimeDateTime_ReturnValue;     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4377[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_BreakTimespan_Days;                       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Hours;                      // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Minutes;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Seconds;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Milliseconds;               // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0040(0x0018)()
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x0058(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0070(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00B0(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00F0(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0100(0x0018)()
};
static_assert(alignof(W_MapVehicleListItem_C_GetNextAvailabilityTimer) == 0x000008, "Wrong alignment on W_MapVehicleListItem_C_GetNextAvailabilityTimer");
static_assert(sizeof(W_MapVehicleListItem_C_GetNextAvailabilityTimer) == 0x000118, "Wrong size on W_MapVehicleListItem_C_GetNextAvailabilityTimer");
static_assert(offsetof(W_MapVehicleListItem_C_GetNextAvailabilityTimer, OutText) == 0x000000, "Member 'W_MapVehicleListItem_C_GetNextAvailabilityTimer::OutText' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_GetNextAvailabilityTimer, CallFunc_GetServerUtcTime_ReturnValue) == 0x000018, "Member 'W_MapVehicleListItem_C_GetNextAvailabilityTimer::CallFunc_GetServerUtcTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_GetNextAvailabilityTimer, CallFunc_Subtract_DateTimeDateTime_ReturnValue) == 0x000020, "Member 'W_MapVehicleListItem_C_GetNextAvailabilityTimer::CallFunc_Subtract_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_GetNextAvailabilityTimer, CallFunc_Greater_DateTimeDateTime_ReturnValue) == 0x000028, "Member 'W_MapVehicleListItem_C_GetNextAvailabilityTimer::CallFunc_Greater_DateTimeDateTime_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_GetNextAvailabilityTimer, CallFunc_BreakTimespan_Days) == 0x00002C, "Member 'W_MapVehicleListItem_C_GetNextAvailabilityTimer::CallFunc_BreakTimespan_Days' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_GetNextAvailabilityTimer, CallFunc_BreakTimespan_Hours) == 0x000030, "Member 'W_MapVehicleListItem_C_GetNextAvailabilityTimer::CallFunc_BreakTimespan_Hours' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_GetNextAvailabilityTimer, CallFunc_BreakTimespan_Minutes) == 0x000034, "Member 'W_MapVehicleListItem_C_GetNextAvailabilityTimer::CallFunc_BreakTimespan_Minutes' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_GetNextAvailabilityTimer, CallFunc_BreakTimespan_Seconds) == 0x000038, "Member 'W_MapVehicleListItem_C_GetNextAvailabilityTimer::CallFunc_BreakTimespan_Seconds' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_GetNextAvailabilityTimer, CallFunc_BreakTimespan_Milliseconds) == 0x00003C, "Member 'W_MapVehicleListItem_C_GetNextAvailabilityTimer::CallFunc_BreakTimespan_Milliseconds' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_GetNextAvailabilityTimer, CallFunc_Conv_IntToText_ReturnValue) == 0x000040, "Member 'W_MapVehicleListItem_C_GetNextAvailabilityTimer::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_GetNextAvailabilityTimer, CallFunc_Conv_IntToText_ReturnValue_1) == 0x000058, "Member 'W_MapVehicleListItem_C_GetNextAvailabilityTimer::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_GetNextAvailabilityTimer, K2Node_MakeStruct_FormatArgumentData) == 0x000070, "Member 'W_MapVehicleListItem_C_GetNextAvailabilityTimer::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_GetNextAvailabilityTimer, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000B0, "Member 'W_MapVehicleListItem_C_GetNextAvailabilityTimer::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_GetNextAvailabilityTimer, K2Node_MakeArray_Array) == 0x0000F0, "Member 'W_MapVehicleListItem_C_GetNextAvailabilityTimer::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_GetNextAvailabilityTimer, CallFunc_Format_ReturnValue) == 0x000100, "Member 'W_MapVehicleListItem_C_GetNextAvailabilityTimer::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function W_MapVehicleListItem.W_MapVehicleListItem_C.HasTimer
// 0x0002 (0x0002 - 0x0000)
struct W_MapVehicleListItem_C_HasTimer final
{
public:
	bool                                          Param_HasTimer;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HasDelay_ReturnValue;                     // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_MapVehicleListItem_C_HasTimer) == 0x000001, "Wrong alignment on W_MapVehicleListItem_C_HasTimer");
static_assert(sizeof(W_MapVehicleListItem_C_HasTimer) == 0x000002, "Wrong size on W_MapVehicleListItem_C_HasTimer");
static_assert(offsetof(W_MapVehicleListItem_C_HasTimer, Param_HasTimer) == 0x000000, "Member 'W_MapVehicleListItem_C_HasTimer::Param_HasTimer' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_HasTimer, CallFunc_HasDelay_ReturnValue) == 0x000001, "Member 'W_MapVehicleListItem_C_HasTimer::CallFunc_HasDelay_ReturnValue' has a wrong offset!");

// Function W_MapVehicleListItem.W_MapVehicleListItem_C.UpdateCollapsing
// 0x000C (0x000C - 0x0000)
struct W_MapVehicleListItem_C_UpdateCollapsing final
{
public:
	int32                                         In_ModifierPct;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Out_Collapsed;                                     // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldShowDetails_ShowDetails;            // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_MapVehicleListItem_C_UpdateCollapsing) == 0x000004, "Wrong alignment on W_MapVehicleListItem_C_UpdateCollapsing");
static_assert(sizeof(W_MapVehicleListItem_C_UpdateCollapsing) == 0x00000C, "Wrong size on W_MapVehicleListItem_C_UpdateCollapsing");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateCollapsing, In_ModifierPct) == 0x000000, "Member 'W_MapVehicleListItem_C_UpdateCollapsing::In_ModifierPct' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateCollapsing, Out_Collapsed) == 0x000004, "Member 'W_MapVehicleListItem_C_UpdateCollapsing::Out_Collapsed' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateCollapsing, CallFunc_ShouldShowDetails_ShowDetails) == 0x000005, "Member 'W_MapVehicleListItem_C_UpdateCollapsing::CallFunc_ShouldShowDetails_ShowDetails' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateCollapsing, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000006, "Member 'W_MapVehicleListItem_C_UpdateCollapsing::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateCollapsing, CallFunc_Not_PreBool_ReturnValue) == 0x000007, "Member 'W_MapVehicleListItem_C_UpdateCollapsing::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateCollapsing, CallFunc_BooleanOR_ReturnValue) == 0x000008, "Member 'W_MapVehicleListItem_C_UpdateCollapsing::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function W_MapVehicleListItem.W_MapVehicleListItem_C.ToHumanReadableTime
// 0x0110 (0x0110 - 0x0000)
struct W_MapVehicleListItem_C_ToHumanReadableTime final
{
public:
	struct FTimespan                              InTimespan;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   Result;                                            // 0x0008(0x0018)(Parm, OutParm)
	int32                                         CallFunc_BreakTimespan_Days;                       // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Hours;                      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Minutes;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Seconds;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakTimespan_Milliseconds;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4378[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0038(0x0018)()
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x0050(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0068(0x0040)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00A8(0x0040)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00E8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00F8(0x0018)()
};
static_assert(alignof(W_MapVehicleListItem_C_ToHumanReadableTime) == 0x000008, "Wrong alignment on W_MapVehicleListItem_C_ToHumanReadableTime");
static_assert(sizeof(W_MapVehicleListItem_C_ToHumanReadableTime) == 0x000110, "Wrong size on W_MapVehicleListItem_C_ToHumanReadableTime");
static_assert(offsetof(W_MapVehicleListItem_C_ToHumanReadableTime, InTimespan) == 0x000000, "Member 'W_MapVehicleListItem_C_ToHumanReadableTime::InTimespan' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ToHumanReadableTime, Result) == 0x000008, "Member 'W_MapVehicleListItem_C_ToHumanReadableTime::Result' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ToHumanReadableTime, CallFunc_BreakTimespan_Days) == 0x000020, "Member 'W_MapVehicleListItem_C_ToHumanReadableTime::CallFunc_BreakTimespan_Days' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ToHumanReadableTime, CallFunc_BreakTimespan_Hours) == 0x000024, "Member 'W_MapVehicleListItem_C_ToHumanReadableTime::CallFunc_BreakTimespan_Hours' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ToHumanReadableTime, CallFunc_BreakTimespan_Minutes) == 0x000028, "Member 'W_MapVehicleListItem_C_ToHumanReadableTime::CallFunc_BreakTimespan_Minutes' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ToHumanReadableTime, CallFunc_BreakTimespan_Seconds) == 0x00002C, "Member 'W_MapVehicleListItem_C_ToHumanReadableTime::CallFunc_BreakTimespan_Seconds' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ToHumanReadableTime, CallFunc_BreakTimespan_Milliseconds) == 0x000030, "Member 'W_MapVehicleListItem_C_ToHumanReadableTime::CallFunc_BreakTimespan_Milliseconds' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ToHumanReadableTime, CallFunc_Conv_IntToText_ReturnValue) == 0x000038, "Member 'W_MapVehicleListItem_C_ToHumanReadableTime::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ToHumanReadableTime, CallFunc_Conv_IntToText_ReturnValue_1) == 0x000050, "Member 'W_MapVehicleListItem_C_ToHumanReadableTime::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ToHumanReadableTime, K2Node_MakeStruct_FormatArgumentData) == 0x000068, "Member 'W_MapVehicleListItem_C_ToHumanReadableTime::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ToHumanReadableTime, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000A8, "Member 'W_MapVehicleListItem_C_ToHumanReadableTime::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ToHumanReadableTime, K2Node_MakeArray_Array) == 0x0000E8, "Member 'W_MapVehicleListItem_C_ToHumanReadableTime::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_ToHumanReadableTime, CallFunc_Format_ReturnValue) == 0x0000F8, "Member 'W_MapVehicleListItem_C_ToHumanReadableTime::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function W_MapVehicleListItem.W_MapVehicleListItem_C.Init Delay
// 0x0002 (0x0002 - 0x0000)
struct W_MapVehicleListItem_C_Init_Delay final
{
public:
	bool                                          Out_Should_Update_Timer;                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_ShouldShowDetails_ShowDetails;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_MapVehicleListItem_C_Init_Delay) == 0x000001, "Wrong alignment on W_MapVehicleListItem_C_Init_Delay");
static_assert(sizeof(W_MapVehicleListItem_C_Init_Delay) == 0x000002, "Wrong size on W_MapVehicleListItem_C_Init_Delay");
static_assert(offsetof(W_MapVehicleListItem_C_Init_Delay, Out_Should_Update_Timer) == 0x000000, "Member 'W_MapVehicleListItem_C_Init_Delay::Out_Should_Update_Timer' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_Init_Delay, CallFunc_ShouldShowDetails_ShowDetails) == 0x000001, "Member 'W_MapVehicleListItem_C_Init_Delay::CallFunc_ShouldShowDetails_ShowDetails' has a wrong offset!");

// Function W_MapVehicleListItem.W_MapVehicleListItem_C.Finalize Layout
// 0x0008 (0x0008 - 0x0000)
struct W_MapVehicleListItem_C_Finalize_Layout final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVisible_ReturnValue;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVisible_ReturnValue_1;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_MapVehicleListItem_C_Finalize_Layout) == 0x000001, "Wrong alignment on W_MapVehicleListItem_C_Finalize_Layout");
static_assert(sizeof(W_MapVehicleListItem_C_Finalize_Layout) == 0x000008, "Wrong size on W_MapVehicleListItem_C_Finalize_Layout");
static_assert(offsetof(W_MapVehicleListItem_C_Finalize_Layout, Temp_bool_Variable) == 0x000000, "Member 'W_MapVehicleListItem_C_Finalize_Layout::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_Finalize_Layout, Temp_byte_Variable) == 0x000001, "Member 'W_MapVehicleListItem_C_Finalize_Layout::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_Finalize_Layout, Temp_byte_Variable_1) == 0x000002, "Member 'W_MapVehicleListItem_C_Finalize_Layout::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_Finalize_Layout, CallFunc_IsVisible_ReturnValue) == 0x000003, "Member 'W_MapVehicleListItem_C_Finalize_Layout::CallFunc_IsVisible_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_Finalize_Layout, CallFunc_IsVisible_ReturnValue_1) == 0x000004, "Member 'W_MapVehicleListItem_C_Finalize_Layout::CallFunc_IsVisible_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_Finalize_Layout, CallFunc_BooleanOR_ReturnValue) == 0x000005, "Member 'W_MapVehicleListItem_C_Finalize_Layout::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_Finalize_Layout, CallFunc_BooleanAND_ReturnValue) == 0x000006, "Member 'W_MapVehicleListItem_C_Finalize_Layout::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_Finalize_Layout, K2Node_Select_Default) == 0x000007, "Member 'W_MapVehicleListItem_C_Finalize_Layout::K2Node_Select_Default' has a wrong offset!");

// Function W_MapVehicleListItem.W_MapVehicleListItem_C.UpdateDepletedSingleUse
// 0x0058 (0x0058 - 0x0000)
struct W_MapVehicleListItem_C_UpdateDepletedSingleUse final
{
public:
	class USQAvailability*                        In_Availability;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSQAvailabilityState                   In_State;                                          // 0x0008(0x0048)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_MapVehicleListItem_C_UpdateDepletedSingleUse) == 0x000008, "Wrong alignment on W_MapVehicleListItem_C_UpdateDepletedSingleUse");
static_assert(sizeof(W_MapVehicleListItem_C_UpdateDepletedSingleUse) == 0x000058, "Wrong size on W_MapVehicleListItem_C_UpdateDepletedSingleUse");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateDepletedSingleUse, In_Availability) == 0x000000, "Member 'W_MapVehicleListItem_C_UpdateDepletedSingleUse::In_Availability' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateDepletedSingleUse, In_State) == 0x000008, "Member 'W_MapVehicleListItem_C_UpdateDepletedSingleUse::In_State' has a wrong offset!");
static_assert(offsetof(W_MapVehicleListItem_C_UpdateDepletedSingleUse, CallFunc_IsValid_ReturnValue) == 0x000050, "Member 'W_MapVehicleListItem_C_UpdateDepletedSingleUse::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

