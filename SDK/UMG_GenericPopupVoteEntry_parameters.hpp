#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UMG_GenericPopupVoteEntry

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Squad_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function UMG_GenericPopupVoteEntry.UMG_GenericPopupVoteEntry_C.OnTryMakeVote__DelegateSignature
// 0x0038 (0x0038 - 0x0000)
struct UMG_GenericPopupVoteEntry_C_OnTryMakeVote__DelegateSignature final
{
public:
	struct FKey                                   KeyPressed;                                        // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FSQChoice                              Choice;                                            // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	class UUMG_GenericPopupVoteEntry_C*           ThisWidgetEntry;                                   // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_GenericPopupVoteEntry_C_OnTryMakeVote__DelegateSignature) == 0x000008, "Wrong alignment on UMG_GenericPopupVoteEntry_C_OnTryMakeVote__DelegateSignature");
static_assert(sizeof(UMG_GenericPopupVoteEntry_C_OnTryMakeVote__DelegateSignature) == 0x000038, "Wrong size on UMG_GenericPopupVoteEntry_C_OnTryMakeVote__DelegateSignature");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_OnTryMakeVote__DelegateSignature, KeyPressed) == 0x000000, "Member 'UMG_GenericPopupVoteEntry_C_OnTryMakeVote__DelegateSignature::KeyPressed' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_OnTryMakeVote__DelegateSignature, Choice) == 0x000018, "Member 'UMG_GenericPopupVoteEntry_C_OnTryMakeVote__DelegateSignature::Choice' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_OnTryMakeVote__DelegateSignature, ThisWidgetEntry) == 0x000030, "Member 'UMG_GenericPopupVoteEntry_C_OnTryMakeVote__DelegateSignature::ThisWidgetEntry' has a wrong offset!");

// Function UMG_GenericPopupVoteEntry.UMG_GenericPopupVoteEntry_C.ExecuteUbergraph_UMG_GenericPopupVoteEntry
// 0x00A0 (0x00A0 - 0x0000)
struct UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C01[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQVoteSessionClient*                   K2Node_Event_VoteSession;                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C02[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetKeysMappedToActionText_ReturnValue;    // 0x0020(0x0018)()
	class FText                                   CallFunc_Conv_NameToText_ReturnValue;              // 0x0038(0x0018)()
	class USQVoteSession*                         K2Node_Event_VoteSession_2;                        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSQChoice                              K2Node_Event_Winner;                               // 0x0058(0x0018)(NoDestructor)
	class USQVoteSessionClient*                   K2Node_Event_VoteSession_1;                        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_PlayerCurrentVoteCount;               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C03[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQVoteSessionChoiceInfo               CallFunc_Array_Get_Item;                           // 0x0080(0x0018)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x009D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x009E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue_1;        // 0x009F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry) == 0x000008, "Wrong alignment on UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry");
static_assert(sizeof(UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry) == 0x0000A0, "Wrong size on UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry, EntryPoint) == 0x000000, "Member 'UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry::EntryPoint' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry, K2Node_Event_VoteSession) == 0x000008, "Member 'UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry::K2Node_Event_VoteSession' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry, Temp_int_Array_Index_Variable) == 0x000010, "Member 'UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry, Temp_bool_True_if_break_was_hit_Variable) == 0x000018, "Member 'UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry, CallFunc_Not_PreBool_ReturnValue) == 0x000019, "Member 'UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry, CallFunc_GetKeysMappedToActionText_ReturnValue) == 0x000020, "Member 'UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry::CallFunc_GetKeysMappedToActionText_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry, CallFunc_Conv_NameToText_ReturnValue) == 0x000038, "Member 'UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry::CallFunc_Conv_NameToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry, K2Node_Event_VoteSession_2) == 0x000050, "Member 'UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry::K2Node_Event_VoteSession_2' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry, K2Node_Event_Winner) == 0x000058, "Member 'UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry::K2Node_Event_Winner' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry, K2Node_Event_VoteSession_1) == 0x000070, "Member 'UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry::K2Node_Event_VoteSession_1' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry, K2Node_Event_PlayerCurrentVoteCount) == 0x000078, "Member 'UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry::K2Node_Event_PlayerCurrentVoteCount' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry, CallFunc_Array_Get_Item) == 0x000080, "Member 'UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry, CallFunc_Array_Length_ReturnValue) == 0x000098, "Member 'UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry, CallFunc_Less_IntInt_ReturnValue) == 0x00009C, "Member 'UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry, CallFunc_BooleanAND_ReturnValue) == 0x00009D, "Member 'UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry, CallFunc_EqualEqual_NameName_ReturnValue) == 0x00009E, "Member 'UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry, CallFunc_EqualEqual_NameName_ReturnValue_1) == 0x00009F, "Member 'UMG_GenericPopupVoteEntry_C_ExecuteUbergraph_UMG_GenericPopupVoteEntry::CallFunc_EqualEqual_NameName_ReturnValue_1' has a wrong offset!");

// Function UMG_GenericPopupVoteEntry.UMG_GenericPopupVoteEntry_C.On Vote Started
// 0x0008 (0x0008 - 0x0000)
struct UMG_GenericPopupVoteEntry_C_On_Vote_Started final
{
public:
	class USQVoteSessionClient*                   VoteSession;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_GenericPopupVoteEntry_C_On_Vote_Started) == 0x000008, "Wrong alignment on UMG_GenericPopupVoteEntry_C_On_Vote_Started");
static_assert(sizeof(UMG_GenericPopupVoteEntry_C_On_Vote_Started) == 0x000008, "Wrong size on UMG_GenericPopupVoteEntry_C_On_Vote_Started");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_On_Vote_Started, VoteSession) == 0x000000, "Member 'UMG_GenericPopupVoteEntry_C_On_Vote_Started::VoteSession' has a wrong offset!");

// Function UMG_GenericPopupVoteEntry.UMG_GenericPopupVoteEntry_C.On Vote Updated
// 0x0010 (0x0010 - 0x0000)
struct UMG_GenericPopupVoteEntry_C_On_Vote_Updated final
{
public:
	class USQVoteSessionClient*                   VoteSession;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayerCurrentVoteCount;                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_GenericPopupVoteEntry_C_On_Vote_Updated) == 0x000008, "Wrong alignment on UMG_GenericPopupVoteEntry_C_On_Vote_Updated");
static_assert(sizeof(UMG_GenericPopupVoteEntry_C_On_Vote_Updated) == 0x000010, "Wrong size on UMG_GenericPopupVoteEntry_C_On_Vote_Updated");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_On_Vote_Updated, VoteSession) == 0x000000, "Member 'UMG_GenericPopupVoteEntry_C_On_Vote_Updated::VoteSession' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_On_Vote_Updated, PlayerCurrentVoteCount) == 0x000008, "Member 'UMG_GenericPopupVoteEntry_C_On_Vote_Updated::PlayerCurrentVoteCount' has a wrong offset!");

// Function UMG_GenericPopupVoteEntry.UMG_GenericPopupVoteEntry_C.On Vote Ended
// 0x0020 (0x0020 - 0x0000)
struct UMG_GenericPopupVoteEntry_C_On_Vote_Ended final
{
public:
	class USQVoteSession*                         VoteSession;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSQChoice                              Winner;                                            // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(UMG_GenericPopupVoteEntry_C_On_Vote_Ended) == 0x000008, "Wrong alignment on UMG_GenericPopupVoteEntry_C_On_Vote_Ended");
static_assert(sizeof(UMG_GenericPopupVoteEntry_C_On_Vote_Ended) == 0x000020, "Wrong size on UMG_GenericPopupVoteEntry_C_On_Vote_Ended");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_On_Vote_Ended, VoteSession) == 0x000000, "Member 'UMG_GenericPopupVoteEntry_C_On_Vote_Ended::VoteSession' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_On_Vote_Ended, Winner) == 0x000008, "Member 'UMG_GenericPopupVoteEntry_C_On_Vote_Ended::Winner' has a wrong offset!");

// Function UMG_GenericPopupVoteEntry.UMG_GenericPopupVoteEntry_C.UpdateVotes
// 0x00B8 (0x00B8 - 0x0000)
struct UMG_GenericPopupVoteEntry_C_UpdateVotes final
{
public:
	struct FSQVoteSessionChoiceInfo               In_Choice_State;                                   // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FSQVoteSessionInfo                     In_Vote_State;                                     // 0x0018(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C04[0x3];                                     // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetPlayerName_ReturnValue;                // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C05[0x3];                                     // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x00A4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_GenericPopupVoteEntry_C_UpdateVotes) == 0x000008, "Wrong alignment on UMG_GenericPopupVoteEntry_C_UpdateVotes");
static_assert(sizeof(UMG_GenericPopupVoteEntry_C_UpdateVotes) == 0x0000B8, "Wrong size on UMG_GenericPopupVoteEntry_C_UpdateVotes");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_UpdateVotes, In_Choice_State) == 0x000000, "Member 'UMG_GenericPopupVoteEntry_C_UpdateVotes::In_Choice_State' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_UpdateVotes, In_Vote_State) == 0x000018, "Member 'UMG_GenericPopupVoteEntry_C_UpdateVotes::In_Vote_State' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_UpdateVotes, Temp_struct_Variable) == 0x000050, "Member 'UMG_GenericPopupVoteEntry_C_UpdateVotes::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_UpdateVotes, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000060, "Member 'UMG_GenericPopupVoteEntry_C_UpdateVotes::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_UpdateVotes, Temp_struct_Variable_1) == 0x000064, "Member 'UMG_GenericPopupVoteEntry_C_UpdateVotes::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_UpdateVotes, CallFunc_Array_Length_ReturnValue) == 0x000074, "Member 'UMG_GenericPopupVoteEntry_C_UpdateVotes::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_UpdateVotes, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000078, "Member 'UMG_GenericPopupVoteEntry_C_UpdateVotes::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_UpdateVotes, Temp_bool_Variable) == 0x00007C, "Member 'UMG_GenericPopupVoteEntry_C_UpdateVotes::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_UpdateVotes, CallFunc_GetOwningPlayer_ReturnValue) == 0x000080, "Member 'UMG_GenericPopupVoteEntry_C_UpdateVotes::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_UpdateVotes, CallFunc_GetPlayerName_ReturnValue) == 0x000088, "Member 'UMG_GenericPopupVoteEntry_C_UpdateVotes::CallFunc_GetPlayerName_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_UpdateVotes, CallFunc_Conv_StringToName_ReturnValue) == 0x000098, "Member 'UMG_GenericPopupVoteEntry_C_UpdateVotes::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_UpdateVotes, CallFunc_Array_Contains_ReturnValue) == 0x0000A0, "Member 'UMG_GenericPopupVoteEntry_C_UpdateVotes::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_UpdateVotes, K2Node_Select_Default) == 0x0000A4, "Member 'UMG_GenericPopupVoteEntry_C_UpdateVotes::K2Node_Select_Default' has a wrong offset!");

// Function UMG_GenericPopupVoteEntry.UMG_GenericPopupVoteEntry_C.UpdateResult
// 0x0034 (0x0034 - 0x0000)
struct UMG_GenericPopupVoteEntry_C_UpdateResult final
{
public:
	bool                                          Is_Winner;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C06[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_GenericPopupVoteEntry_C_UpdateResult) == 0x000004, "Wrong alignment on UMG_GenericPopupVoteEntry_C_UpdateResult");
static_assert(sizeof(UMG_GenericPopupVoteEntry_C_UpdateResult) == 0x000034, "Wrong size on UMG_GenericPopupVoteEntry_C_UpdateResult");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_UpdateResult, Is_Winner) == 0x000000, "Member 'UMG_GenericPopupVoteEntry_C_UpdateResult::Is_Winner' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_UpdateResult, Temp_bool_Variable) == 0x000001, "Member 'UMG_GenericPopupVoteEntry_C_UpdateResult::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_UpdateResult, Temp_struct_Variable) == 0x000004, "Member 'UMG_GenericPopupVoteEntry_C_UpdateResult::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_UpdateResult, Temp_struct_Variable_1) == 0x000014, "Member 'UMG_GenericPopupVoteEntry_C_UpdateResult::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_UpdateResult, K2Node_Select_Default) == 0x000024, "Member 'UMG_GenericPopupVoteEntry_C_UpdateResult::K2Node_Select_Default' has a wrong offset!");

// Function UMG_GenericPopupVoteEntry.UMG_GenericPopupVoteEntry_C.StartVotes
// 0x0010 (0x0010 - 0x0000)
struct UMG_GenericPopupVoteEntry_C_StartVotes final
{
public:
	class USQVoteSessionClient*                   In_Vote_Session;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_GenericPopupVoteEntry_C_StartVotes) == 0x000008, "Wrong alignment on UMG_GenericPopupVoteEntry_C_StartVotes");
static_assert(sizeof(UMG_GenericPopupVoteEntry_C_StartVotes) == 0x000010, "Wrong size on UMG_GenericPopupVoteEntry_C_StartVotes");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_StartVotes, In_Vote_Session) == 0x000000, "Member 'UMG_GenericPopupVoteEntry_C_StartVotes::In_Vote_Session' has a wrong offset!");
static_assert(offsetof(UMG_GenericPopupVoteEntry_C_StartVotes, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000008, "Member 'UMG_GenericPopupVoteEntry_C_StartVotes::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");

}

