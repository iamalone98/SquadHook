#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GlowingButton_12

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function GlowingButton_12.GlowingButton_12_C.OnClicked__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct GlowingButton_12_C_OnClicked__DelegateSignature final
{
public:
	bool                                          Param_bSelected;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3175[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGlowingButton_12_C*                    Param_Button;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GlowingButton_12_C_OnClicked__DelegateSignature) == 0x000008, "Wrong alignment on GlowingButton_12_C_OnClicked__DelegateSignature");
static_assert(sizeof(GlowingButton_12_C_OnClicked__DelegateSignature) == 0x000010, "Wrong size on GlowingButton_12_C_OnClicked__DelegateSignature");
static_assert(offsetof(GlowingButton_12_C_OnClicked__DelegateSignature, Param_bSelected) == 0x000000, "Member 'GlowingButton_12_C_OnClicked__DelegateSignature::Param_bSelected' has a wrong offset!");
static_assert(offsetof(GlowingButton_12_C_OnClicked__DelegateSignature, Param_Button) == 0x000008, "Member 'GlowingButton_12_C_OnClicked__DelegateSignature::Param_Button' has a wrong offset!");

// Function GlowingButton_12.GlowingButton_12_C.OnHover__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GlowingButton_12_C_OnHover__DelegateSignature final
{
public:
	bool                                          Param_bHovered;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GlowingButton_12_C_OnHover__DelegateSignature) == 0x000001, "Wrong alignment on GlowingButton_12_C_OnHover__DelegateSignature");
static_assert(sizeof(GlowingButton_12_C_OnHover__DelegateSignature) == 0x000001, "Wrong size on GlowingButton_12_C_OnHover__DelegateSignature");
static_assert(offsetof(GlowingButton_12_C_OnHover__DelegateSignature, Param_bHovered) == 0x000000, "Member 'GlowingButton_12_C_OnHover__DelegateSignature::Param_bHovered' has a wrong offset!");

// Function GlowingButton_12.GlowingButton_12_C.ExecuteUbergraph_GlowingButton_12
// 0x0044 (0x0044 - 0x0000)
struct GlowingButton_12_C_ExecuteUbergraph_GlowingButton_12 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsHovered_ReturnValue;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GlowingButton_12_C_ExecuteUbergraph_GlowingButton_12) == 0x000004, "Wrong alignment on GlowingButton_12_C_ExecuteUbergraph_GlowingButton_12");
static_assert(sizeof(GlowingButton_12_C_ExecuteUbergraph_GlowingButton_12) == 0x000044, "Wrong size on GlowingButton_12_C_ExecuteUbergraph_GlowingButton_12");
static_assert(offsetof(GlowingButton_12_C_ExecuteUbergraph_GlowingButton_12, EntryPoint) == 0x000000, "Member 'GlowingButton_12_C_ExecuteUbergraph_GlowingButton_12::EntryPoint' has a wrong offset!");
static_assert(offsetof(GlowingButton_12_C_ExecuteUbergraph_GlowingButton_12, K2Node_Event_MyGeometry) == 0x000004, "Member 'GlowingButton_12_C_ExecuteUbergraph_GlowingButton_12::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(GlowingButton_12_C_ExecuteUbergraph_GlowingButton_12, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'GlowingButton_12_C_ExecuteUbergraph_GlowingButton_12::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(GlowingButton_12_C_ExecuteUbergraph_GlowingButton_12, CallFunc_IsHovered_ReturnValue) == 0x000040, "Member 'GlowingButton_12_C_ExecuteUbergraph_GlowingButton_12::CallFunc_IsHovered_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlowingButton_12_C_ExecuteUbergraph_GlowingButton_12, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000041, "Member 'GlowingButton_12_C_ExecuteUbergraph_GlowingButton_12::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlowingButton_12_C_ExecuteUbergraph_GlowingButton_12, CallFunc_Not_PreBool_ReturnValue) == 0x000042, "Member 'GlowingButton_12_C_ExecuteUbergraph_GlowingButton_12::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlowingButton_12_C_ExecuteUbergraph_GlowingButton_12, K2Node_Event_IsDesignTime) == 0x000043, "Member 'GlowingButton_12_C_ExecuteUbergraph_GlowingButton_12::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function GlowingButton_12.GlowingButton_12_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct GlowingButton_12_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GlowingButton_12_C_PreConstruct) == 0x000001, "Wrong alignment on GlowingButton_12_C_PreConstruct");
static_assert(sizeof(GlowingButton_12_C_PreConstruct) == 0x000001, "Wrong size on GlowingButton_12_C_PreConstruct");
static_assert(offsetof(GlowingButton_12_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'GlowingButton_12_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function GlowingButton_12.GlowingButton_12_C.Tick
// 0x003C (0x003C - 0x0000)
struct GlowingButton_12_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GlowingButton_12_C_Tick) == 0x000004, "Wrong alignment on GlowingButton_12_C_Tick");
static_assert(sizeof(GlowingButton_12_C_Tick) == 0x00003C, "Wrong size on GlowingButton_12_C_Tick");
static_assert(offsetof(GlowingButton_12_C_Tick, MyGeometry) == 0x000000, "Member 'GlowingButton_12_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(GlowingButton_12_C_Tick, InDeltaTime) == 0x000038, "Member 'GlowingButton_12_C_Tick::InDeltaTime' has a wrong offset!");

// Function GlowingButton_12.GlowingButton_12_C.SetSelected
// 0x0001 (0x0001 - 0x0000)
struct GlowingButton_12_C_SetSelected final
{
public:
	bool                                          Param_bSelected;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GlowingButton_12_C_SetSelected) == 0x000001, "Wrong alignment on GlowingButton_12_C_SetSelected");
static_assert(sizeof(GlowingButton_12_C_SetSelected) == 0x000001, "Wrong size on GlowingButton_12_C_SetSelected");
static_assert(offsetof(GlowingButton_12_C_SetSelected, Param_bSelected) == 0x000000, "Member 'GlowingButton_12_C_SetSelected::Param_bSelected' has a wrong offset!");

// Function GlowingButton_12.GlowingButton_12_C.UpdateButtonColor
// 0x0034 (0x0034 - 0x0000)
struct GlowingButton_12_C_UpdateButtonColor final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3176[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_1;                           // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_2;                           // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GlowingButton_12_C_UpdateButtonColor) == 0x000004, "Wrong alignment on GlowingButton_12_C_UpdateButtonColor");
static_assert(sizeof(GlowingButton_12_C_UpdateButtonColor) == 0x000034, "Wrong size on GlowingButton_12_C_UpdateButtonColor");
static_assert(offsetof(GlowingButton_12_C_UpdateButtonColor, Temp_bool_Variable) == 0x000000, "Member 'GlowingButton_12_C_UpdateButtonColor::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GlowingButton_12_C_UpdateButtonColor, Temp_bool_Variable_1) == 0x000001, "Member 'GlowingButton_12_C_UpdateButtonColor::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(GlowingButton_12_C_UpdateButtonColor, Temp_bool_Variable_2) == 0x000002, "Member 'GlowingButton_12_C_UpdateButtonColor::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(GlowingButton_12_C_UpdateButtonColor, K2Node_Select_Default) == 0x000004, "Member 'GlowingButton_12_C_UpdateButtonColor::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(GlowingButton_12_C_UpdateButtonColor, K2Node_Select_Default_1) == 0x000014, "Member 'GlowingButton_12_C_UpdateButtonColor::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(GlowingButton_12_C_UpdateButtonColor, K2Node_Select_Default_2) == 0x000024, "Member 'GlowingButton_12_C_UpdateButtonColor::K2Node_Select_Default_2' has a wrong offset!");

// Function GlowingButton_12.GlowingButton_12_C.SetText
// 0x0018 (0x0018 - 0x0000)
struct GlowingButton_12_C_SetText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(GlowingButton_12_C_SetText) == 0x000008, "Wrong alignment on GlowingButton_12_C_SetText");
static_assert(sizeof(GlowingButton_12_C_SetText) == 0x000018, "Wrong size on GlowingButton_12_C_SetText");
static_assert(offsetof(GlowingButton_12_C_SetText, Text) == 0x000000, "Member 'GlowingButton_12_C_SetText::Text' has a wrong offset!");

}

