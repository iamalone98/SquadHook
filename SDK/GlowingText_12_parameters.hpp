#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GlowingText_12

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function GlowingText_12.GlowingText_12_C.ExecuteUbergraph_GlowingText_12
// 0x0008 (0x0008 - 0x0000)
struct GlowingText_12_C_ExecuteUbergraph_GlowingText_12 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GlowingText_12_C_ExecuteUbergraph_GlowingText_12) == 0x000004, "Wrong alignment on GlowingText_12_C_ExecuteUbergraph_GlowingText_12");
static_assert(sizeof(GlowingText_12_C_ExecuteUbergraph_GlowingText_12) == 0x000008, "Wrong size on GlowingText_12_C_ExecuteUbergraph_GlowingText_12");
static_assert(offsetof(GlowingText_12_C_ExecuteUbergraph_GlowingText_12, EntryPoint) == 0x000000, "Member 'GlowingText_12_C_ExecuteUbergraph_GlowingText_12::EntryPoint' has a wrong offset!");
static_assert(offsetof(GlowingText_12_C_ExecuteUbergraph_GlowingText_12, K2Node_Event_IsDesignTime) == 0x000004, "Member 'GlowingText_12_C_ExecuteUbergraph_GlowingText_12::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function GlowingText_12.GlowingText_12_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct GlowingText_12_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GlowingText_12_C_PreConstruct) == 0x000001, "Wrong alignment on GlowingText_12_C_PreConstruct");
static_assert(sizeof(GlowingText_12_C_PreConstruct) == 0x000001, "Wrong size on GlowingText_12_C_PreConstruct");
static_assert(offsetof(GlowingText_12_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'GlowingText_12_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function GlowingText_12.GlowingText_12_C.SetGlowing
// 0x0038 (0x0038 - 0x0000)
struct GlowingText_12_C_SetGlowing final
{
public:
	bool                                          bGlowing;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_316D[0x1];                                     // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_316E[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GlowingText_12_C_SetGlowing) == 0x000004, "Wrong alignment on GlowingText_12_C_SetGlowing");
static_assert(sizeof(GlowingText_12_C_SetGlowing) == 0x000038, "Wrong size on GlowingText_12_C_SetGlowing");
static_assert(offsetof(GlowingText_12_C_SetGlowing, bGlowing) == 0x000000, "Member 'GlowingText_12_C_SetGlowing::bGlowing' has a wrong offset!");
static_assert(offsetof(GlowingText_12_C_SetGlowing, Temp_bool_Variable) == 0x000001, "Member 'GlowingText_12_C_SetGlowing::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GlowingText_12_C_SetGlowing, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'GlowingText_12_C_SetGlowing::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlowingText_12_C_SetGlowing, Temp_struct_Variable) == 0x000004, "Member 'GlowingText_12_C_SetGlowing::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(GlowingText_12_C_SetGlowing, Temp_struct_Variable_1) == 0x000014, "Member 'GlowingText_12_C_SetGlowing::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(GlowingText_12_C_SetGlowing, CallFunc_BooleanAND_ReturnValue) == 0x000024, "Member 'GlowingText_12_C_SetGlowing::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlowingText_12_C_SetGlowing, K2Node_Select_Default) == 0x000028, "Member 'GlowingText_12_C_SetGlowing::K2Node_Select_Default' has a wrong offset!");

// Function GlowingText_12.GlowingText_12_C.Init
// 0x0020 (0x0020 - 0x0000)
struct GlowingText_12_C_Init final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          Param_bShowShadow;                                 // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(GlowingText_12_C_Init) == 0x000008, "Wrong alignment on GlowingText_12_C_Init");
static_assert(sizeof(GlowingText_12_C_Init) == 0x000020, "Wrong size on GlowingText_12_C_Init");
static_assert(offsetof(GlowingText_12_C_Init, Text) == 0x000000, "Member 'GlowingText_12_C_Init::Text' has a wrong offset!");
static_assert(offsetof(GlowingText_12_C_Init, Param_bShowShadow) == 0x000018, "Member 'GlowingText_12_C_Init::Param_bShowShadow' has a wrong offset!");

// Function GlowingText_12.GlowingText_12_C.Update
// 0x0068 (0x0068 - 0x0000)
struct GlowingText_12_C_Update final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_316F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3170[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_GetChildAt_ReturnValue;                   // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetChildrenCount_ReturnValue;             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3171[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextBlock*                             K2Node_DynamicCast_AsText;                         // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3172[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3173[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0054(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(GlowingText_12_C_Update) == 0x000008, "Wrong alignment on GlowingText_12_C_Update");
static_assert(sizeof(GlowingText_12_C_Update) == 0x000068, "Wrong size on GlowingText_12_C_Update");
static_assert(offsetof(GlowingText_12_C_Update, Temp_bool_Variable) == 0x000000, "Member 'GlowingText_12_C_Update::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(GlowingText_12_C_Update, Temp_struct_Variable) == 0x000004, "Member 'GlowingText_12_C_Update::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(GlowingText_12_C_Update, Temp_struct_Variable_1) == 0x000014, "Member 'GlowingText_12_C_Update::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(GlowingText_12_C_Update, Temp_int_Variable) == 0x000024, "Member 'GlowingText_12_C_Update::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(GlowingText_12_C_Update, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'GlowingText_12_C_Update::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlowingText_12_C_Update, CallFunc_GetChildAt_ReturnValue) == 0x000030, "Member 'GlowingText_12_C_Update::CallFunc_GetChildAt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlowingText_12_C_Update, CallFunc_GetChildrenCount_ReturnValue) == 0x000038, "Member 'GlowingText_12_C_Update::CallFunc_GetChildrenCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlowingText_12_C_Update, K2Node_DynamicCast_AsText) == 0x000040, "Member 'GlowingText_12_C_Update::K2Node_DynamicCast_AsText' has a wrong offset!");
static_assert(offsetof(GlowingText_12_C_Update, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'GlowingText_12_C_Update::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(GlowingText_12_C_Update, CallFunc_Subtract_IntInt_ReturnValue) == 0x00004C, "Member 'GlowingText_12_C_Update::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlowingText_12_C_Update, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000050, "Member 'GlowingText_12_C_Update::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(GlowingText_12_C_Update, K2Node_Select_Default) == 0x000054, "Member 'GlowingText_12_C_Update::K2Node_Select_Default' has a wrong offset!");

// Function GlowingText_12.GlowingText_12_C.SetText
// 0x0018 (0x0018 - 0x0000)
struct GlowingText_12_C_SetText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(GlowingText_12_C_SetText) == 0x000008, "Wrong alignment on GlowingText_12_C_SetText");
static_assert(sizeof(GlowingText_12_C_SetText) == 0x000018, "Wrong size on GlowingText_12_C_SetText");
static_assert(offsetof(GlowingText_12_C_SetText, Text) == 0x000000, "Member 'GlowingText_12_C_SetText::Text' has a wrong offset!");

}

