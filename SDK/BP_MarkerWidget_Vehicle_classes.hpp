#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MarkerWidget_Vehicle

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Squad_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BP_MarkerWidget_Vehicle.BP_MarkerWidget_Vehicle_C
// 0x0070 (0x0308 - 0x0298)
class UBP_MarkerWidget_Vehicle_C final : public USQMapVehicleIconWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCanvasPanel*                           Canvas_SquadNum;                                   // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                SquadID_Circle;                                    // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             SquadID_Text;                                      // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Vehicle_Image;                                     // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ViewCone;                                          // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               WidgetOverlay;                                     // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             CloseTooltip;                                      // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UTexture2D*                             VehicleImage;                                      // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StateUpdateTime;                                   // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SelfColor;                                         // 0x02EC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E48[0x4];                                     // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQPlayerController*                    Owning_PC;                                         // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CloseTooltip__DelegateSignature();
	void ExecuteUbergraph_BP_MarkerWidget_Vehicle(int32 EntryPoint);
	void UpdateVisibilityEvent();
	void UpdateStateEvent();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Construct();
	void UpdateVehicleBrush();
	void GetVehicleIcon(class UTexture** NewParam);
	void IsNeutralTeam(bool* Param_IsNeutralTeam);
	void IsSameTeam(bool* SameTeam);
	void IsSameSquad(bool* SquadVehicle);
	void GetVehicle(class ASQVehicle** Vehicle);
	void IsVehicleEmpty(bool* Empty);
	void UpdateVehicleConeVisbility();
	void IsInVehicle(bool* InVehicle);
	void UpdateAngles();
	void IsLocalInDriverSeat(bool* Driver);
	void GetLocalSeat(class USQVehicleSeatComponent** Seat);
	void Get_Claimed_By(bool* Is_Claimed, int32* Claim_ID);
	void UpdateSquadInfo();
	void Get_1st_Occupant_Info(bool* Success, bool* Leader, bool* Same_Squad, class FText* ID);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_MarkerWidget_Vehicle_C">();
	}
	static class UBP_MarkerWidget_Vehicle_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_MarkerWidget_Vehicle_C>();
	}
};
static_assert(alignof(UBP_MarkerWidget_Vehicle_C) == 0x000008, "Wrong alignment on UBP_MarkerWidget_Vehicle_C");
static_assert(sizeof(UBP_MarkerWidget_Vehicle_C) == 0x000308, "Wrong size on UBP_MarkerWidget_Vehicle_C");
static_assert(offsetof(UBP_MarkerWidget_Vehicle_C, UberGraphFrame) == 0x000298, "Member 'UBP_MarkerWidget_Vehicle_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Vehicle_C, Canvas_SquadNum) == 0x0002A0, "Member 'UBP_MarkerWidget_Vehicle_C::Canvas_SquadNum' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Vehicle_C, SquadID_Circle) == 0x0002A8, "Member 'UBP_MarkerWidget_Vehicle_C::SquadID_Circle' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Vehicle_C, SquadID_Text) == 0x0002B0, "Member 'UBP_MarkerWidget_Vehicle_C::SquadID_Text' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Vehicle_C, Vehicle_Image) == 0x0002B8, "Member 'UBP_MarkerWidget_Vehicle_C::Vehicle_Image' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Vehicle_C, ViewCone) == 0x0002C0, "Member 'UBP_MarkerWidget_Vehicle_C::ViewCone' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Vehicle_C, WidgetOverlay) == 0x0002C8, "Member 'UBP_MarkerWidget_Vehicle_C::WidgetOverlay' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Vehicle_C, CloseTooltip) == 0x0002D0, "Member 'UBP_MarkerWidget_Vehicle_C::CloseTooltip' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Vehicle_C, VehicleImage) == 0x0002E0, "Member 'UBP_MarkerWidget_Vehicle_C::VehicleImage' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Vehicle_C, StateUpdateTime) == 0x0002E8, "Member 'UBP_MarkerWidget_Vehicle_C::StateUpdateTime' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Vehicle_C, SelfColor) == 0x0002EC, "Member 'UBP_MarkerWidget_Vehicle_C::SelfColor' has a wrong offset!");
static_assert(offsetof(UBP_MarkerWidget_Vehicle_C, Owning_PC) == 0x000300, "Member 'UBP_MarkerWidget_Vehicle_C::Owning_PC' has a wrong offset!");

}

