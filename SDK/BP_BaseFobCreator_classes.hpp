#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BaseFobCreator

#include "Basic.hpp"

#include "Squad_structs.hpp"
#include "BP_ForwardBase_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BaseFobCreator.BP_BaseFobCreator_C
// 0x00A0 (0x0640 - 0x05A0)
class ABP_BaseFobCreator_C : public ABP_ForwardBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_BaseFobCreator_C;                // 0x05A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USQMapIconComponent*                    SQMapIcon;                                         // 0x05A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       NearbyEnemyDetection;                              // 0x05B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ASQForwardBase*                         Fob;                                               // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ServerDecreaseHealthHandle;                        // 0x05C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ASQPlayerController*                    UsingSquadLeader;                                  // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ServerCheckValidUse;                               // 0x05D0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         SLUseHealthLoss;                                   // 0x05D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RespawnDelayPenaltyPerEnemy;                       // 0x05DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NumEnemiesToDisable;                               // 0x05E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldOverrunOnDestroy;                           // 0x05E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23EA[0x3];                                     // 0x05E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQUsableData                          Enemy_Usable_Data;                                 // 0x05E8(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bHasBeenOverrun;                                   // 0x0628(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23EB[0x7];                                     // 0x0629(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               FobBleedOutEffect;                                 // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         EnemiesNear;                                       // 0x0638(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_BaseFobCreator(int32 EntryPoint);
	void BPOnIsBleedingChanged();
	void InvalidatePlacement();
	void BPPostTicketTick(float Difference);
	void BPOverrun(bool bFriendly);
	void BPStopUsed(class AController* User);
	void BPOnUsed(class AController* User);
	void CompletedConstruction();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveDestroyed();
	void BPOnGhostMade();
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void Remove_Nearby_FOB_Request_Markers();
	struct FSQUsableData GetUsableData();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BaseFobCreator_C">();
	}
	static class ABP_BaseFobCreator_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BaseFobCreator_C>();
	}
};
static_assert(alignof(ABP_BaseFobCreator_C) == 0x000008, "Wrong alignment on ABP_BaseFobCreator_C");
static_assert(sizeof(ABP_BaseFobCreator_C) == 0x000640, "Wrong size on ABP_BaseFobCreator_C");
static_assert(offsetof(ABP_BaseFobCreator_C, UberGraphFrame_BP_BaseFobCreator_C) == 0x0005A0, "Member 'ABP_BaseFobCreator_C::UberGraphFrame_BP_BaseFobCreator_C' has a wrong offset!");
static_assert(offsetof(ABP_BaseFobCreator_C, SQMapIcon) == 0x0005A8, "Member 'ABP_BaseFobCreator_C::SQMapIcon' has a wrong offset!");
static_assert(offsetof(ABP_BaseFobCreator_C, NearbyEnemyDetection) == 0x0005B0, "Member 'ABP_BaseFobCreator_C::NearbyEnemyDetection' has a wrong offset!");
static_assert(offsetof(ABP_BaseFobCreator_C, Fob) == 0x0005B8, "Member 'ABP_BaseFobCreator_C::Fob' has a wrong offset!");
static_assert(offsetof(ABP_BaseFobCreator_C, ServerDecreaseHealthHandle) == 0x0005C0, "Member 'ABP_BaseFobCreator_C::ServerDecreaseHealthHandle' has a wrong offset!");
static_assert(offsetof(ABP_BaseFobCreator_C, UsingSquadLeader) == 0x0005C8, "Member 'ABP_BaseFobCreator_C::UsingSquadLeader' has a wrong offset!");
static_assert(offsetof(ABP_BaseFobCreator_C, ServerCheckValidUse) == 0x0005D0, "Member 'ABP_BaseFobCreator_C::ServerCheckValidUse' has a wrong offset!");
static_assert(offsetof(ABP_BaseFobCreator_C, SLUseHealthLoss) == 0x0005D8, "Member 'ABP_BaseFobCreator_C::SLUseHealthLoss' has a wrong offset!");
static_assert(offsetof(ABP_BaseFobCreator_C, RespawnDelayPenaltyPerEnemy) == 0x0005DC, "Member 'ABP_BaseFobCreator_C::RespawnDelayPenaltyPerEnemy' has a wrong offset!");
static_assert(offsetof(ABP_BaseFobCreator_C, NumEnemiesToDisable) == 0x0005E0, "Member 'ABP_BaseFobCreator_C::NumEnemiesToDisable' has a wrong offset!");
static_assert(offsetof(ABP_BaseFobCreator_C, bShouldOverrunOnDestroy) == 0x0005E4, "Member 'ABP_BaseFobCreator_C::bShouldOverrunOnDestroy' has a wrong offset!");
static_assert(offsetof(ABP_BaseFobCreator_C, Enemy_Usable_Data) == 0x0005E8, "Member 'ABP_BaseFobCreator_C::Enemy_Usable_Data' has a wrong offset!");
static_assert(offsetof(ABP_BaseFobCreator_C, bHasBeenOverrun) == 0x000628, "Member 'ABP_BaseFobCreator_C::bHasBeenOverrun' has a wrong offset!");
static_assert(offsetof(ABP_BaseFobCreator_C, FobBleedOutEffect) == 0x000630, "Member 'ABP_BaseFobCreator_C::FobBleedOutEffect' has a wrong offset!");
static_assert(offsetof(ABP_BaseFobCreator_C, EnemiesNear) == 0x000638, "Member 'ABP_BaseFobCreator_C::EnemiesNear' has a wrong offset!");

}

