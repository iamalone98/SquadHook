#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Squad

#include "Basic.hpp"

#include "Squad_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "InputCore_structs.hpp"
#include "Engine_structs.hpp"
#include "SquadVoice_structs.hpp"
#include "ODKBazaar_structs.hpp"
#include "OnlineSubsystemUtils_structs.hpp"
#include "StreamlineBlueprint_structs.hpp"
#include "DLSSBlueprint_structs.hpp"
#include "ModdingRuntime_structs.hpp"


namespace SDK::Params
{

// Function Squad.SQProjectileSpawnerComponent.OnProjectileImpact
// 0x00A8 (0x00A8 - 0x0000)
struct SQProjectileSpawnerComponent_OnProjectileImpact final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x001C(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_D42[0x4];                                      // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQProjectileSpawnerComponent_OnProjectileImpact) == 0x000008, "Wrong alignment on SQProjectileSpawnerComponent_OnProjectileImpact");
static_assert(sizeof(SQProjectileSpawnerComponent_OnProjectileImpact) == 0x0000A8, "Wrong size on SQProjectileSpawnerComponent_OnProjectileImpact");
static_assert(offsetof(SQProjectileSpawnerComponent_OnProjectileImpact, SelfActor) == 0x000000, "Member 'SQProjectileSpawnerComponent_OnProjectileImpact::SelfActor' has a wrong offset!");
static_assert(offsetof(SQProjectileSpawnerComponent_OnProjectileImpact, OtherActor) == 0x000008, "Member 'SQProjectileSpawnerComponent_OnProjectileImpact::OtherActor' has a wrong offset!");
static_assert(offsetof(SQProjectileSpawnerComponent_OnProjectileImpact, NormalImpulse) == 0x000010, "Member 'SQProjectileSpawnerComponent_OnProjectileImpact::NormalImpulse' has a wrong offset!");
static_assert(offsetof(SQProjectileSpawnerComponent_OnProjectileImpact, Hit) == 0x00001C, "Member 'SQProjectileSpawnerComponent_OnProjectileImpact::Hit' has a wrong offset!");

// Function Squad.SQProjectileSpawnerComponent.OnProjectileOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct SQProjectileSpawnerComponent_OnProjectileOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D43[0x3];                                      // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQProjectileSpawnerComponent_OnProjectileOverlap) == 0x000008, "Wrong alignment on SQProjectileSpawnerComponent_OnProjectileOverlap");
static_assert(sizeof(SQProjectileSpawnerComponent_OnProjectileOverlap) == 0x0000A8, "Wrong size on SQProjectileSpawnerComponent_OnProjectileOverlap");
static_assert(offsetof(SQProjectileSpawnerComponent_OnProjectileOverlap, OverlappedComponent) == 0x000000, "Member 'SQProjectileSpawnerComponent_OnProjectileOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SQProjectileSpawnerComponent_OnProjectileOverlap, OtherActor) == 0x000008, "Member 'SQProjectileSpawnerComponent_OnProjectileOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SQProjectileSpawnerComponent_OnProjectileOverlap, OtherComp) == 0x000010, "Member 'SQProjectileSpawnerComponent_OnProjectileOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(SQProjectileSpawnerComponent_OnProjectileOverlap, OtherBodyIndex) == 0x000018, "Member 'SQProjectileSpawnerComponent_OnProjectileOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SQProjectileSpawnerComponent_OnProjectileOverlap, bFromSweep) == 0x00001C, "Member 'SQProjectileSpawnerComponent_OnProjectileOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(SQProjectileSpawnerComponent_OnProjectileOverlap, SweepResult) == 0x000020, "Member 'SQProjectileSpawnerComponent_OnProjectileOverlap::SweepResult' has a wrong offset!");

// Function Squad.SQProjectileSpawnerComponent.OnRep_IsFiring
// 0x0001 (0x0001 - 0x0000)
struct SQProjectileSpawnerComponent_OnRep_IsFiring final
{
public:
	bool                                          OldValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQProjectileSpawnerComponent_OnRep_IsFiring) == 0x000001, "Wrong alignment on SQProjectileSpawnerComponent_OnRep_IsFiring");
static_assert(sizeof(SQProjectileSpawnerComponent_OnRep_IsFiring) == 0x000001, "Wrong size on SQProjectileSpawnerComponent_OnRep_IsFiring");
static_assert(offsetof(SQProjectileSpawnerComponent_OnRep_IsFiring, OldValue) == 0x000000, "Member 'SQProjectileSpawnerComponent_OnRep_IsFiring::OldValue' has a wrong offset!");

// Function Squad.SQAvailability.GetAvailabilityForPlayer
// 0x0098 (0x0098 - 0x0000)
struct SQAvailability_GetAvailabilityForPlayer final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState                   InTeamStatus;                                      // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState                   OutPlayerStatus;                                   // 0x0050(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAvailability_GetAvailabilityForPlayer) == 0x000008, "Wrong alignment on SQAvailability_GetAvailabilityForPlayer");
static_assert(sizeof(SQAvailability_GetAvailabilityForPlayer) == 0x000098, "Wrong size on SQAvailability_GetAvailabilityForPlayer");
static_assert(offsetof(SQAvailability_GetAvailabilityForPlayer, InPlayer) == 0x000000, "Member 'SQAvailability_GetAvailabilityForPlayer::InPlayer' has a wrong offset!");
static_assert(offsetof(SQAvailability_GetAvailabilityForPlayer, InTeamStatus) == 0x000008, "Member 'SQAvailability_GetAvailabilityForPlayer::InTeamStatus' has a wrong offset!");
static_assert(offsetof(SQAvailability_GetAvailabilityForPlayer, OutPlayerStatus) == 0x000050, "Member 'SQAvailability_GetAvailabilityForPlayer::OutPlayerStatus' has a wrong offset!");

// Function Squad.SQAvailability.GetLimitedCount
// 0x0004 (0x0004 - 0x0000)
struct SQAvailability_GetLimitedCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAvailability_GetLimitedCount) == 0x000004, "Wrong alignment on SQAvailability_GetLimitedCount");
static_assert(sizeof(SQAvailability_GetLimitedCount) == 0x000004, "Wrong size on SQAvailability_GetLimitedCount");
static_assert(offsetof(SQAvailability_GetLimitedCount, ReturnValue) == 0x000000, "Member 'SQAvailability_GetLimitedCount::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailability.HasCost
// 0x0001 (0x0001 - 0x0000)
struct SQAvailability_HasCost final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAvailability_HasCost) == 0x000001, "Wrong alignment on SQAvailability_HasCost");
static_assert(sizeof(SQAvailability_HasCost) == 0x000001, "Wrong size on SQAvailability_HasCost");
static_assert(offsetof(SQAvailability_HasCost, ReturnValue) == 0x000000, "Member 'SQAvailability_HasCost::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailability.HasDelay
// 0x0001 (0x0001 - 0x0000)
struct SQAvailability_HasDelay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAvailability_HasDelay) == 0x000001, "Wrong alignment on SQAvailability_HasDelay");
static_assert(sizeof(SQAvailability_HasDelay) == 0x000001, "Wrong size on SQAvailability_HasDelay");
static_assert(offsetof(SQAvailability_HasDelay, ReturnValue) == 0x000000, "Member 'SQAvailability_HasDelay::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailability.HasLimitedCount
// 0x0001 (0x0001 - 0x0000)
struct SQAvailability_HasLimitedCount final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAvailability_HasLimitedCount) == 0x000001, "Wrong alignment on SQAvailability_HasLimitedCount");
static_assert(sizeof(SQAvailability_HasLimitedCount) == 0x000001, "Wrong size on SQAvailability_HasLimitedCount");
static_assert(offsetof(SQAvailability_HasLimitedCount, ReturnValue) == 0x000000, "Member 'SQAvailability_HasLimitedCount::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailability.HasPlayerBasedCost
// 0x0001 (0x0001 - 0x0000)
struct SQAvailability_HasPlayerBasedCost final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAvailability_HasPlayerBasedCost) == 0x000001, "Wrong alignment on SQAvailability_HasPlayerBasedCost");
static_assert(sizeof(SQAvailability_HasPlayerBasedCost) == 0x000001, "Wrong size on SQAvailability_HasPlayerBasedCost");
static_assert(offsetof(SQAvailability_HasPlayerBasedCost, ReturnValue) == 0x000000, "Member 'SQAvailability_HasPlayerBasedCost::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailability.HasTeamBasedCost
// 0x0001 (0x0001 - 0x0000)
struct SQAvailability_HasTeamBasedCost final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAvailability_HasTeamBasedCost) == 0x000001, "Wrong alignment on SQAvailability_HasTeamBasedCost");
static_assert(sizeof(SQAvailability_HasTeamBasedCost) == 0x000001, "Wrong size on SQAvailability_HasTeamBasedCost");
static_assert(offsetof(SQAvailability_HasTeamBasedCost, ReturnValue) == 0x000000, "Member 'SQAvailability_HasTeamBasedCost::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailability.InitializeTeamAvailability
// 0x0058 (0x0058 - 0x0000)
struct SQAvailability_InitializeTeamAvailability final
{
public:
	class ASQTeam*                                InTeam;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQLayer*                               InActiveLayer;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState                   OutTeamStatus;                                     // 0x0010(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAvailability_InitializeTeamAvailability) == 0x000008, "Wrong alignment on SQAvailability_InitializeTeamAvailability");
static_assert(sizeof(SQAvailability_InitializeTeamAvailability) == 0x000058, "Wrong size on SQAvailability_InitializeTeamAvailability");
static_assert(offsetof(SQAvailability_InitializeTeamAvailability, InTeam) == 0x000000, "Member 'SQAvailability_InitializeTeamAvailability::InTeam' has a wrong offset!");
static_assert(offsetof(SQAvailability_InitializeTeamAvailability, InActiveLayer) == 0x000008, "Member 'SQAvailability_InitializeTeamAvailability::InActiveLayer' has a wrong offset!");
static_assert(offsetof(SQAvailability_InitializeTeamAvailability, OutTeamStatus) == 0x000010, "Member 'SQAvailability_InitializeTeamAvailability::OutTeamStatus' has a wrong offset!");

// Function Squad.SQAvailability.IsRestrictedForPlayer
// 0x0020 (0x0020 - 0x0000)
struct SQAvailability_IsRestrictedForPlayer final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    OutRestrictionReason;                              // 0x0008(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D44[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAvailability_IsRestrictedForPlayer) == 0x000008, "Wrong alignment on SQAvailability_IsRestrictedForPlayer");
static_assert(sizeof(SQAvailability_IsRestrictedForPlayer) == 0x000020, "Wrong size on SQAvailability_IsRestrictedForPlayer");
static_assert(offsetof(SQAvailability_IsRestrictedForPlayer, InPlayer) == 0x000000, "Member 'SQAvailability_IsRestrictedForPlayer::InPlayer' has a wrong offset!");
static_assert(offsetof(SQAvailability_IsRestrictedForPlayer, OutRestrictionReason) == 0x000008, "Member 'SQAvailability_IsRestrictedForPlayer::OutRestrictionReason' has a wrong offset!");
static_assert(offsetof(SQAvailability_IsRestrictedForPlayer, ReturnValue) == 0x000018, "Member 'SQAvailability_IsRestrictedForPlayer::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailability.IsRestrictedForTeam
// 0x0020 (0x0020 - 0x0000)
struct SQAvailability_IsRestrictedForTeam final
{
public:
	class ASQTeam*                                InTeam;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    OutRestrictionReason;                              // 0x0008(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D45[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAvailability_IsRestrictedForTeam) == 0x000008, "Wrong alignment on SQAvailability_IsRestrictedForTeam");
static_assert(sizeof(SQAvailability_IsRestrictedForTeam) == 0x000020, "Wrong size on SQAvailability_IsRestrictedForTeam");
static_assert(offsetof(SQAvailability_IsRestrictedForTeam, InTeam) == 0x000000, "Member 'SQAvailability_IsRestrictedForTeam::InTeam' has a wrong offset!");
static_assert(offsetof(SQAvailability_IsRestrictedForTeam, OutRestrictionReason) == 0x000008, "Member 'SQAvailability_IsRestrictedForTeam::OutRestrictionReason' has a wrong offset!");
static_assert(offsetof(SQAvailability_IsRestrictedForTeam, ReturnValue) == 0x000018, "Member 'SQAvailability_IsRestrictedForTeam::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailability.OnPlayerAddUsage
// 0x0050 (0x0050 - 0x0000)
struct SQAvailability_OnPlayerAddUsage final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState                   Status;                                            // 0x0008(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAvailability_OnPlayerAddUsage) == 0x000008, "Wrong alignment on SQAvailability_OnPlayerAddUsage");
static_assert(sizeof(SQAvailability_OnPlayerAddUsage) == 0x000050, "Wrong size on SQAvailability_OnPlayerAddUsage");
static_assert(offsetof(SQAvailability_OnPlayerAddUsage, InPlayer) == 0x000000, "Member 'SQAvailability_OnPlayerAddUsage::InPlayer' has a wrong offset!");
static_assert(offsetof(SQAvailability_OnPlayerAddUsage, Status) == 0x000008, "Member 'SQAvailability_OnPlayerAddUsage::Status' has a wrong offset!");

// Function Squad.SQAvailability.OnPlayerRemoveUsage
// 0x0050 (0x0050 - 0x0000)
struct SQAvailability_OnPlayerRemoveUsage final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState                   Status;                                            // 0x0008(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAvailability_OnPlayerRemoveUsage) == 0x000008, "Wrong alignment on SQAvailability_OnPlayerRemoveUsage");
static_assert(sizeof(SQAvailability_OnPlayerRemoveUsage) == 0x000050, "Wrong size on SQAvailability_OnPlayerRemoveUsage");
static_assert(offsetof(SQAvailability_OnPlayerRemoveUsage, InPlayer) == 0x000000, "Member 'SQAvailability_OnPlayerRemoveUsage::InPlayer' has a wrong offset!");
static_assert(offsetof(SQAvailability_OnPlayerRemoveUsage, Status) == 0x000008, "Member 'SQAvailability_OnPlayerRemoveUsage::Status' has a wrong offset!");

// Function Squad.SQAvailability.OnTeamAddUsage
// 0x0050 (0x0050 - 0x0000)
struct SQAvailability_OnTeamAddUsage final
{
public:
	class ASQTeam*                                InTeam;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState                   Status;                                            // 0x0008(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAvailability_OnTeamAddUsage) == 0x000008, "Wrong alignment on SQAvailability_OnTeamAddUsage");
static_assert(sizeof(SQAvailability_OnTeamAddUsage) == 0x000050, "Wrong size on SQAvailability_OnTeamAddUsage");
static_assert(offsetof(SQAvailability_OnTeamAddUsage, InTeam) == 0x000000, "Member 'SQAvailability_OnTeamAddUsage::InTeam' has a wrong offset!");
static_assert(offsetof(SQAvailability_OnTeamAddUsage, Status) == 0x000008, "Member 'SQAvailability_OnTeamAddUsage::Status' has a wrong offset!");

// Function Squad.SQAvailability.OnTeamRemoveUsage
// 0x0050 (0x0050 - 0x0000)
struct SQAvailability_OnTeamRemoveUsage final
{
public:
	class ASQTeam*                                InTeam;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState                   Status;                                            // 0x0008(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAvailability_OnTeamRemoveUsage) == 0x000008, "Wrong alignment on SQAvailability_OnTeamRemoveUsage");
static_assert(sizeof(SQAvailability_OnTeamRemoveUsage) == 0x000050, "Wrong size on SQAvailability_OnTeamRemoveUsage");
static_assert(offsetof(SQAvailability_OnTeamRemoveUsage, InTeam) == 0x000000, "Member 'SQAvailability_OnTeamRemoveUsage::InTeam' has a wrong offset!");
static_assert(offsetof(SQAvailability_OnTeamRemoveUsage, Status) == 0x000008, "Member 'SQAvailability_OnTeamRemoveUsage::Status' has a wrong offset!");

// Function Squad.SQAvailability.UpdateTeamAvailability
// 0x0050 (0x0050 - 0x0000)
struct SQAvailability_UpdateTeamAvailability final
{
public:
	class ASQTeam*                                InTeam;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState                   OutTeamStatus;                                     // 0x0008(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAvailability_UpdateTeamAvailability) == 0x000008, "Wrong alignment on SQAvailability_UpdateTeamAvailability");
static_assert(sizeof(SQAvailability_UpdateTeamAvailability) == 0x000050, "Wrong size on SQAvailability_UpdateTeamAvailability");
static_assert(offsetof(SQAvailability_UpdateTeamAvailability, InTeam) == 0x000000, "Member 'SQAvailability_UpdateTeamAvailability::InTeam' has a wrong offset!");
static_assert(offsetof(SQAvailability_UpdateTeamAvailability, OutTeamStatus) == 0x000008, "Member 'SQAvailability_UpdateTeamAvailability::OutTeamStatus' has a wrong offset!");

// Function Squad.SQCoreStateWidget.AnnounceSelectionState
// 0x0001 (0x0001 - 0x0000)
struct SQCoreStateWidget_AnnounceSelectionState final
{
public:
	ESQSelectionState                             InSelectionState;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCoreStateWidget_AnnounceSelectionState) == 0x000001, "Wrong alignment on SQCoreStateWidget_AnnounceSelectionState");
static_assert(sizeof(SQCoreStateWidget_AnnounceSelectionState) == 0x000001, "Wrong size on SQCoreStateWidget_AnnounceSelectionState");
static_assert(offsetof(SQCoreStateWidget_AnnounceSelectionState, InSelectionState) == 0x000000, "Member 'SQCoreStateWidget_AnnounceSelectionState::InSelectionState' has a wrong offset!");

// Function Squad.SQCoreStateWidget.OnScaleChanged
// 0x0004 (0x0004 - 0x0000)
struct SQCoreStateWidget_OnScaleChanged final
{
public:
	float                                         UniformScale;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCoreStateWidget_OnScaleChanged) == 0x000004, "Wrong alignment on SQCoreStateWidget_OnScaleChanged");
static_assert(sizeof(SQCoreStateWidget_OnScaleChanged) == 0x000004, "Wrong size on SQCoreStateWidget_OnScaleChanged");
static_assert(offsetof(SQCoreStateWidget_OnScaleChanged, UniformScale) == 0x000000, "Member 'SQCoreStateWidget_OnScaleChanged::UniformScale' has a wrong offset!");

// Function Squad.SQMapWidget.GetTintColor
// 0x0010 (0x0010 - 0x0000)
struct SQMapWidget_GetTintColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapWidget_GetTintColor) == 0x000004, "Wrong alignment on SQMapWidget_GetTintColor");
static_assert(sizeof(SQMapWidget_GetTintColor) == 0x000010, "Wrong size on SQMapWidget_GetTintColor");
static_assert(offsetof(SQMapWidget_GetTintColor, ReturnValue) == 0x000000, "Member 'SQMapWidget_GetTintColor::ReturnValue' has a wrong offset!");

// Function Squad.SQMapWidget.GetTintValue
// 0x0001 (0x0001 - 0x0000)
struct SQMapWidget_GetTintValue final
{
public:
	ESQMapWidgetTint                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapWidget_GetTintValue) == 0x000001, "Wrong alignment on SQMapWidget_GetTintValue");
static_assert(sizeof(SQMapWidget_GetTintValue) == 0x000001, "Wrong size on SQMapWidget_GetTintValue");
static_assert(offsetof(SQMapWidget_GetTintValue, ReturnValue) == 0x000000, "Member 'SQMapWidget_GetTintValue::ReturnValue' has a wrong offset!");

// Function Squad.SQMapWidgetRallyPoint.OnEventSquadStateChanged
// 0x0018 (0x0018 - 0x0000)
struct SQMapWidgetRallyPoint_OnEventSquadStateChanged final
{
public:
	class ASQSquadState*                          NewSquad;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQSquadState*                          OldSquad;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerState*                         Player;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapWidgetRallyPoint_OnEventSquadStateChanged) == 0x000008, "Wrong alignment on SQMapWidgetRallyPoint_OnEventSquadStateChanged");
static_assert(sizeof(SQMapWidgetRallyPoint_OnEventSquadStateChanged) == 0x000018, "Wrong size on SQMapWidgetRallyPoint_OnEventSquadStateChanged");
static_assert(offsetof(SQMapWidgetRallyPoint_OnEventSquadStateChanged, NewSquad) == 0x000000, "Member 'SQMapWidgetRallyPoint_OnEventSquadStateChanged::NewSquad' has a wrong offset!");
static_assert(offsetof(SQMapWidgetRallyPoint_OnEventSquadStateChanged, OldSquad) == 0x000008, "Member 'SQMapWidgetRallyPoint_OnEventSquadStateChanged::OldSquad' has a wrong offset!");
static_assert(offsetof(SQMapWidgetRallyPoint_OnEventSquadStateChanged, Player) == 0x000010, "Member 'SQMapWidgetRallyPoint_OnEventSquadStateChanged::Player' has a wrong offset!");

// Function Squad.SQLocalAudioEffectHandler.BP_SoldierChanged
// 0x0008 (0x0008 - 0x0000)
struct SQLocalAudioEffectHandler_BP_SoldierChanged final
{
public:
	class ASQSoldier*                             NewSoldier;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQLocalAudioEffectHandler_BP_SoldierChanged) == 0x000008, "Wrong alignment on SQLocalAudioEffectHandler_BP_SoldierChanged");
static_assert(sizeof(SQLocalAudioEffectHandler_BP_SoldierChanged) == 0x000008, "Wrong size on SQLocalAudioEffectHandler_BP_SoldierChanged");
static_assert(offsetof(SQLocalAudioEffectHandler_BP_SoldierChanged, NewSoldier) == 0x000000, "Member 'SQLocalAudioEffectHandler_BP_SoldierChanged::NewSoldier' has a wrong offset!");

// Function Squad.SQLocalAudioMix.BP_InitAudioEffect
// 0x0008 (0x0008 - 0x0000)
struct SQLocalAudioMix_BP_InitAudioEffect final
{
public:
	class ASQPlayerCameraManager*                 CameraManager;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQLocalAudioMix_BP_InitAudioEffect) == 0x000008, "Wrong alignment on SQLocalAudioMix_BP_InitAudioEffect");
static_assert(sizeof(SQLocalAudioMix_BP_InitAudioEffect) == 0x000008, "Wrong size on SQLocalAudioMix_BP_InitAudioEffect");
static_assert(offsetof(SQLocalAudioMix_BP_InitAudioEffect, CameraManager) == 0x000000, "Member 'SQLocalAudioMix_BP_InitAudioEffect::CameraManager' has a wrong offset!");

// Function Squad.SQLocalAudioMix.BP_UpdateAudioMixing
// 0x0018 (0x0018 - 0x0000)
struct SQLocalAudioMix_BP_UpdateAudioMixing final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D53[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQSoldier*                             SoldierToApplyTo;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D54[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQLocalAudioMix_BP_UpdateAudioMixing) == 0x000008, "Wrong alignment on SQLocalAudioMix_BP_UpdateAudioMixing");
static_assert(sizeof(SQLocalAudioMix_BP_UpdateAudioMixing) == 0x000018, "Wrong size on SQLocalAudioMix_BP_UpdateAudioMixing");
static_assert(offsetof(SQLocalAudioMix_BP_UpdateAudioMixing, DeltaTime) == 0x000000, "Member 'SQLocalAudioMix_BP_UpdateAudioMixing::DeltaTime' has a wrong offset!");
static_assert(offsetof(SQLocalAudioMix_BP_UpdateAudioMixing, SoldierToApplyTo) == 0x000008, "Member 'SQLocalAudioMix_BP_UpdateAudioMixing::SoldierToApplyTo' has a wrong offset!");
static_assert(offsetof(SQLocalAudioMix_BP_UpdateAudioMixing, ReturnValue) == 0x000010, "Member 'SQLocalAudioMix_BP_UpdateAudioMixing::ReturnValue' has a wrong offset!");

// Function Squad.CoreGetAllItemsCallbackProxy.GetAllItems
// 0x0010 (0x0010 - 0x0000)
struct CoreGetAllItemsCallbackProxy_GetAllItems final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCoreGetAllItemsCallbackProxy*          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreGetAllItemsCallbackProxy_GetAllItems) == 0x000008, "Wrong alignment on CoreGetAllItemsCallbackProxy_GetAllItems");
static_assert(sizeof(CoreGetAllItemsCallbackProxy_GetAllItems) == 0x000010, "Wrong size on CoreGetAllItemsCallbackProxy_GetAllItems");
static_assert(offsetof(CoreGetAllItemsCallbackProxy_GetAllItems, WorldContextObject) == 0x000000, "Member 'CoreGetAllItemsCallbackProxy_GetAllItems::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreGetAllItemsCallbackProxy_GetAllItems, ReturnValue) == 0x000008, "Member 'CoreGetAllItemsCallbackProxy_GetAllItems::ReturnValue' has a wrong offset!");

// Function Squad.SQUserWidget.ToggleUIVisibility
// 0x0001 (0x0001 - 0x0000)
struct SQUserWidget_ToggleUIVisibility final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQUserWidget_ToggleUIVisibility) == 0x000001, "Wrong alignment on SQUserWidget_ToggleUIVisibility");
static_assert(sizeof(SQUserWidget_ToggleUIVisibility) == 0x000001, "Wrong size on SQUserWidget_ToggleUIVisibility");
static_assert(offsetof(SQUserWidget_ToggleUIVisibility, bIsVisible) == 0x000000, "Member 'SQUserWidget_ToggleUIVisibility::bIsVisible' has a wrong offset!");

// Function Squad.SQVehicleViewWidget.ChangeZoomReticleImage
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleViewWidget_ChangeZoomReticleImage final
{
public:
	int32                                         NewZoomReticleIndex;                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleViewWidget_ChangeZoomReticleImage) == 0x000004, "Wrong alignment on SQVehicleViewWidget_ChangeZoomReticleImage");
static_assert(sizeof(SQVehicleViewWidget_ChangeZoomReticleImage) == 0x000004, "Wrong size on SQVehicleViewWidget_ChangeZoomReticleImage");
static_assert(offsetof(SQVehicleViewWidget_ChangeZoomReticleImage, NewZoomReticleIndex) == 0x000000, "Member 'SQVehicleViewWidget_ChangeZoomReticleImage::NewZoomReticleIndex' has a wrong offset!");

// Function Squad.SQProjectileHitValidator.GetActorImmersionDepth
// 0x0010 (0x0010 - 0x0000)
struct SQProjectileHitValidator_GetActorImmersionDepth final
{
public:
	const class AActor*                           QueryingActor;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5B[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQProjectileHitValidator_GetActorImmersionDepth) == 0x000008, "Wrong alignment on SQProjectileHitValidator_GetActorImmersionDepth");
static_assert(sizeof(SQProjectileHitValidator_GetActorImmersionDepth) == 0x000010, "Wrong size on SQProjectileHitValidator_GetActorImmersionDepth");
static_assert(offsetof(SQProjectileHitValidator_GetActorImmersionDepth, QueryingActor) == 0x000000, "Member 'SQProjectileHitValidator_GetActorImmersionDepth::QueryingActor' has a wrong offset!");
static_assert(offsetof(SQProjectileHitValidator_GetActorImmersionDepth, ReturnValue) == 0x000008, "Member 'SQProjectileHitValidator_GetActorImmersionDepth::ReturnValue' has a wrong offset!");

// Function Squad.SQProjectileHitValidator.HasValidProjectileHit
// 0x0098 (0x0098 - 0x0000)
struct SQProjectileHitValidator_HasValidProjectileHit final
{
public:
	const class AActor*                           ProjectileOwner;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             InHit;                                             // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0090(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5C[0x7];                                      // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQProjectileHitValidator_HasValidProjectileHit) == 0x000008, "Wrong alignment on SQProjectileHitValidator_HasValidProjectileHit");
static_assert(sizeof(SQProjectileHitValidator_HasValidProjectileHit) == 0x000098, "Wrong size on SQProjectileHitValidator_HasValidProjectileHit");
static_assert(offsetof(SQProjectileHitValidator_HasValidProjectileHit, ProjectileOwner) == 0x000000, "Member 'SQProjectileHitValidator_HasValidProjectileHit::ProjectileOwner' has a wrong offset!");
static_assert(offsetof(SQProjectileHitValidator_HasValidProjectileHit, InHit) == 0x000008, "Member 'SQProjectileHitValidator_HasValidProjectileHit::InHit' has a wrong offset!");
static_assert(offsetof(SQProjectileHitValidator_HasValidProjectileHit, ReturnValue) == 0x000090, "Member 'SQProjectileHitValidator_HasValidProjectileHit::ReturnValue' has a wrong offset!");

// Function Squad.SQProjectileHitValidator.HasValidProjectileOverlap
// 0x00B0 (0x00B0 - 0x0000)
struct SQProjectileHitValidator_HasValidProjectileOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5D[0x3];                                      // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5E[0x7];                                      // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQProjectileHitValidator_HasValidProjectileOverlap) == 0x000008, "Wrong alignment on SQProjectileHitValidator_HasValidProjectileOverlap");
static_assert(sizeof(SQProjectileHitValidator_HasValidProjectileOverlap) == 0x0000B0, "Wrong size on SQProjectileHitValidator_HasValidProjectileOverlap");
static_assert(offsetof(SQProjectileHitValidator_HasValidProjectileOverlap, OverlappedComponent) == 0x000000, "Member 'SQProjectileHitValidator_HasValidProjectileOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SQProjectileHitValidator_HasValidProjectileOverlap, OtherActor) == 0x000008, "Member 'SQProjectileHitValidator_HasValidProjectileOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SQProjectileHitValidator_HasValidProjectileOverlap, OtherComp) == 0x000010, "Member 'SQProjectileHitValidator_HasValidProjectileOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(SQProjectileHitValidator_HasValidProjectileOverlap, OtherBodyIndex) == 0x000018, "Member 'SQProjectileHitValidator_HasValidProjectileOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SQProjectileHitValidator_HasValidProjectileOverlap, bFromSweep) == 0x00001C, "Member 'SQProjectileHitValidator_HasValidProjectileOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(SQProjectileHitValidator_HasValidProjectileOverlap, SweepResult) == 0x000020, "Member 'SQProjectileHitValidator_HasValidProjectileOverlap::SweepResult' has a wrong offset!");
static_assert(offsetof(SQProjectileHitValidator_HasValidProjectileOverlap, ReturnValue) == 0x0000A8, "Member 'SQProjectileHitValidator_HasValidProjectileOverlap::ReturnValue' has a wrong offset!");

// Function Squad.SQMapWidgetSoldier.OnPlayerChangedRole
// 0x0008 (0x0008 - 0x0000)
struct SQMapWidgetSoldier_OnPlayerChangedRole final
{
public:
	class USQRoleSettings*                        NewRole;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapWidgetSoldier_OnPlayerChangedRole) == 0x000008, "Wrong alignment on SQMapWidgetSoldier_OnPlayerChangedRole");
static_assert(sizeof(SQMapWidgetSoldier_OnPlayerChangedRole) == 0x000008, "Wrong size on SQMapWidgetSoldier_OnPlayerChangedRole");
static_assert(offsetof(SQMapWidgetSoldier_OnPlayerChangedRole, NewRole) == 0x000000, "Member 'SQMapWidgetSoldier_OnPlayerChangedRole::NewRole' has a wrong offset!");

// Function Squad.SQMapWidgetSoldier.GetShowBleeding
// 0x0001 (0x0001 - 0x0000)
struct SQMapWidgetSoldier_GetShowBleeding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapWidgetSoldier_GetShowBleeding) == 0x000001, "Wrong alignment on SQMapWidgetSoldier_GetShowBleeding");
static_assert(sizeof(SQMapWidgetSoldier_GetShowBleeding) == 0x000001, "Wrong size on SQMapWidgetSoldier_GetShowBleeding");
static_assert(offsetof(SQMapWidgetSoldier_GetShowBleeding, ReturnValue) == 0x000000, "Member 'SQMapWidgetSoldier_GetShowBleeding::ReturnValue' has a wrong offset!");

// Function Squad.SQMapWidgetSoldier.GetShowIncap
// 0x0001 (0x0001 - 0x0000)
struct SQMapWidgetSoldier_GetShowIncap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapWidgetSoldier_GetShowIncap) == 0x000001, "Wrong alignment on SQMapWidgetSoldier_GetShowIncap");
static_assert(sizeof(SQMapWidgetSoldier_GetShowIncap) == 0x000001, "Wrong size on SQMapWidgetSoldier_GetShowIncap");
static_assert(offsetof(SQMapWidgetSoldier_GetShowIncap, ReturnValue) == 0x000000, "Member 'SQMapWidgetSoldier_GetShowIncap::ReturnValue' has a wrong offset!");

// Function Squad.CoreInventoryBlueprintLibrary.GetItemCount
// 0x0018 (0x0018 - 0x0000)
struct CoreInventoryBlueprintLibrary_GetItemCount final
{
public:
	struct FBlueprintOnlineItem                   Result;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D65[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreInventoryBlueprintLibrary_GetItemCount) == 0x000008, "Wrong alignment on CoreInventoryBlueprintLibrary_GetItemCount");
static_assert(sizeof(CoreInventoryBlueprintLibrary_GetItemCount) == 0x000018, "Wrong size on CoreInventoryBlueprintLibrary_GetItemCount");
static_assert(offsetof(CoreInventoryBlueprintLibrary_GetItemCount, Result) == 0x000000, "Member 'CoreInventoryBlueprintLibrary_GetItemCount::Result' has a wrong offset!");
static_assert(offsetof(CoreInventoryBlueprintLibrary_GetItemCount, ReturnValue) == 0x000010, "Member 'CoreInventoryBlueprintLibrary_GetItemCount::ReturnValue' has a wrong offset!");

// Function Squad.CoreInventoryBlueprintLibrary.GetItemId
// 0x0018 (0x0018 - 0x0000)
struct CoreInventoryBlueprintLibrary_GetItemId final
{
public:
	struct FBlueprintOnlineItem                   Result;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D66[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoreInventoryBlueprintLibrary_GetItemId) == 0x000008, "Wrong alignment on CoreInventoryBlueprintLibrary_GetItemId");
static_assert(sizeof(CoreInventoryBlueprintLibrary_GetItemId) == 0x000018, "Wrong size on CoreInventoryBlueprintLibrary_GetItemId");
static_assert(offsetof(CoreInventoryBlueprintLibrary_GetItemId, Result) == 0x000000, "Member 'CoreInventoryBlueprintLibrary_GetItemId::Result' has a wrong offset!");
static_assert(offsetof(CoreInventoryBlueprintLibrary_GetItemId, ReturnValue) == 0x000010, "Member 'CoreInventoryBlueprintLibrary_GetItemId::ReturnValue' has a wrong offset!");

// Function Squad.CoreInventoryBlueprintLibrary.GetItemName
// 0x0020 (0x0020 - 0x0000)
struct CoreInventoryBlueprintLibrary_GetItemName final
{
public:
	struct FBlueprintOnlineItem                   Result;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreInventoryBlueprintLibrary_GetItemName) == 0x000008, "Wrong alignment on CoreInventoryBlueprintLibrary_GetItemName");
static_assert(sizeof(CoreInventoryBlueprintLibrary_GetItemName) == 0x000020, "Wrong size on CoreInventoryBlueprintLibrary_GetItemName");
static_assert(offsetof(CoreInventoryBlueprintLibrary_GetItemName, Result) == 0x000000, "Member 'CoreInventoryBlueprintLibrary_GetItemName::Result' has a wrong offset!");
static_assert(offsetof(CoreInventoryBlueprintLibrary_GetItemName, ReturnValue) == 0x000010, "Member 'CoreInventoryBlueprintLibrary_GetItemName::ReturnValue' has a wrong offset!");

// Function Squad.CoreSerializeItemSetCallbackProxy.SerializeItemSet
// 0x0020 (0x0020 - 0x0000)
struct CoreSerializeItemSetCallbackProxy_SerializeItemSet final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBlueprintOnlineItem>           Items;                                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UCoreSerializeItemSetCallbackProxy*     ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreSerializeItemSetCallbackProxy_SerializeItemSet) == 0x000008, "Wrong alignment on CoreSerializeItemSetCallbackProxy_SerializeItemSet");
static_assert(sizeof(CoreSerializeItemSetCallbackProxy_SerializeItemSet) == 0x000020, "Wrong size on CoreSerializeItemSetCallbackProxy_SerializeItemSet");
static_assert(offsetof(CoreSerializeItemSetCallbackProxy_SerializeItemSet, WorldContextObject) == 0x000000, "Member 'CoreSerializeItemSetCallbackProxy_SerializeItemSet::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CoreSerializeItemSetCallbackProxy_SerializeItemSet, Items) == 0x000008, "Member 'CoreSerializeItemSetCallbackProxy_SerializeItemSet::Items' has a wrong offset!");
static_assert(offsetof(CoreSerializeItemSetCallbackProxy_SerializeItemSet, ReturnValue) == 0x000018, "Member 'CoreSerializeItemSetCallbackProxy_SerializeItemSet::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailabilityHelper.AddUsage
// 0x0098 (0x0098 - 0x0000)
struct SQAvailabilityHelper_AddUsage final
{
public:
	struct FSQAvailabilityState                   InState;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState                   OutState;                                          // 0x0048(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         AddedUsage;                                        // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D69[0x4];                                      // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAvailabilityHelper_AddUsage) == 0x000008, "Wrong alignment on SQAvailabilityHelper_AddUsage");
static_assert(sizeof(SQAvailabilityHelper_AddUsage) == 0x000098, "Wrong size on SQAvailabilityHelper_AddUsage");
static_assert(offsetof(SQAvailabilityHelper_AddUsage, InState) == 0x000000, "Member 'SQAvailabilityHelper_AddUsage::InState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_AddUsage, OutState) == 0x000048, "Member 'SQAvailabilityHelper_AddUsage::OutState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_AddUsage, AddedUsage) == 0x000090, "Member 'SQAvailabilityHelper_AddUsage::AddedUsage' has a wrong offset!");

// Function Squad.SQAvailabilityHelper.ClearNextAvailabilityTime
// 0x0090 (0x0090 - 0x0000)
struct SQAvailabilityHelper_ClearNextAvailabilityTime final
{
public:
	struct FSQAvailabilityState                   InState;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState                   OutState;                                          // 0x0048(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAvailabilityHelper_ClearNextAvailabilityTime) == 0x000008, "Wrong alignment on SQAvailabilityHelper_ClearNextAvailabilityTime");
static_assert(sizeof(SQAvailabilityHelper_ClearNextAvailabilityTime) == 0x000090, "Wrong size on SQAvailabilityHelper_ClearNextAvailabilityTime");
static_assert(offsetof(SQAvailabilityHelper_ClearNextAvailabilityTime, InState) == 0x000000, "Member 'SQAvailabilityHelper_ClearNextAvailabilityTime::InState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_ClearNextAvailabilityTime, OutState) == 0x000048, "Member 'SQAvailabilityHelper_ClearNextAvailabilityTime::OutState' has a wrong offset!");

// Function Squad.SQAvailabilityHelper.EnQueueNextAvailabilityTime
// 0x00A8 (0x00A8 - 0x0000)
struct SQAvailabilityHelper_EnQueueNextAvailabilityTime final
{
public:
	struct FSQAvailabilityState                   InState;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState                   OutState;                                          // 0x0048(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FDateTime                              InNextAvailabilityTime;                            // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    InUnavailabilityReason;                            // 0x0098(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAvailabilityHelper_EnQueueNextAvailabilityTime) == 0x000008, "Wrong alignment on SQAvailabilityHelper_EnQueueNextAvailabilityTime");
static_assert(sizeof(SQAvailabilityHelper_EnQueueNextAvailabilityTime) == 0x0000A8, "Wrong size on SQAvailabilityHelper_EnQueueNextAvailabilityTime");
static_assert(offsetof(SQAvailabilityHelper_EnQueueNextAvailabilityTime, InState) == 0x000000, "Member 'SQAvailabilityHelper_EnQueueNextAvailabilityTime::InState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_EnQueueNextAvailabilityTime, OutState) == 0x000048, "Member 'SQAvailabilityHelper_EnQueueNextAvailabilityTime::OutState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_EnQueueNextAvailabilityTime, InNextAvailabilityTime) == 0x000090, "Member 'SQAvailabilityHelper_EnQueueNextAvailabilityTime::InNextAvailabilityTime' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_EnQueueNextAvailabilityTime, InUnavailabilityReason) == 0x000098, "Member 'SQAvailabilityHelper_EnQueueNextAvailabilityTime::InUnavailabilityReason' has a wrong offset!");

// Function Squad.SQAvailabilityHelper.GetAvailabilityCount
// 0x0050 (0x0050 - 0x0000)
struct SQAvailabilityHelper_GetAvailabilityCount final
{
public:
	struct FSQAvailabilityState                   InState;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D6A[0x4];                                      // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAvailabilityHelper_GetAvailabilityCount) == 0x000008, "Wrong alignment on SQAvailabilityHelper_GetAvailabilityCount");
static_assert(sizeof(SQAvailabilityHelper_GetAvailabilityCount) == 0x000050, "Wrong size on SQAvailabilityHelper_GetAvailabilityCount");
static_assert(offsetof(SQAvailabilityHelper_GetAvailabilityCount, InState) == 0x000000, "Member 'SQAvailabilityHelper_GetAvailabilityCount::InState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_GetAvailabilityCount, ReturnValue) == 0x000048, "Member 'SQAvailabilityHelper_GetAvailabilityCount::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailabilityHelper.GetAvailabilityDelay
// 0x0050 (0x0050 - 0x0000)
struct SQAvailabilityHelper_GetAvailabilityDelay final
{
public:
	struct FSQAvailabilityState                   InState;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTimespan                              ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAvailabilityHelper_GetAvailabilityDelay) == 0x000008, "Wrong alignment on SQAvailabilityHelper_GetAvailabilityDelay");
static_assert(sizeof(SQAvailabilityHelper_GetAvailabilityDelay) == 0x000050, "Wrong size on SQAvailabilityHelper_GetAvailabilityDelay");
static_assert(offsetof(SQAvailabilityHelper_GetAvailabilityDelay, InState) == 0x000000, "Member 'SQAvailabilityHelper_GetAvailabilityDelay::InState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_GetAvailabilityDelay, ReturnValue) == 0x000048, "Member 'SQAvailabilityHelper_GetAvailabilityDelay::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailabilityHelper.GetAvailabilityPercentDelay
// 0x0050 (0x0050 - 0x0000)
struct SQAvailabilityHelper_GetAvailabilityPercentDelay final
{
public:
	struct FSQAvailabilityState                   InState;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         TotalDelay;                                        // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x004C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAvailabilityHelper_GetAvailabilityPercentDelay) == 0x000008, "Wrong alignment on SQAvailabilityHelper_GetAvailabilityPercentDelay");
static_assert(sizeof(SQAvailabilityHelper_GetAvailabilityPercentDelay) == 0x000050, "Wrong size on SQAvailabilityHelper_GetAvailabilityPercentDelay");
static_assert(offsetof(SQAvailabilityHelper_GetAvailabilityPercentDelay, InState) == 0x000000, "Member 'SQAvailabilityHelper_GetAvailabilityPercentDelay::InState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_GetAvailabilityPercentDelay, TotalDelay) == 0x000048, "Member 'SQAvailabilityHelper_GetAvailabilityPercentDelay::TotalDelay' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_GetAvailabilityPercentDelay, ReturnValue) == 0x00004C, "Member 'SQAvailabilityHelper_GetAvailabilityPercentDelay::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailabilityHelper.HasActionActiveTimer
// 0x0058 (0x0058 - 0x0000)
struct SQAvailabilityHelper_HasActionActiveTimer final
{
public:
	struct FSQAvailabilityState_Action            InState;                                           // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D6B[0x7];                                      // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAvailabilityHelper_HasActionActiveTimer) == 0x000008, "Wrong alignment on SQAvailabilityHelper_HasActionActiveTimer");
static_assert(sizeof(SQAvailabilityHelper_HasActionActiveTimer) == 0x000058, "Wrong size on SQAvailabilityHelper_HasActionActiveTimer");
static_assert(offsetof(SQAvailabilityHelper_HasActionActiveTimer, InState) == 0x000000, "Member 'SQAvailabilityHelper_HasActionActiveTimer::InState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_HasActionActiveTimer, ReturnValue) == 0x000050, "Member 'SQAvailabilityHelper_HasActionActiveTimer::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailabilityHelper.HasActiveTimer
// 0x0050 (0x0050 - 0x0000)
struct SQAvailabilityHelper_HasActiveTimer final
{
public:
	struct FSQAvailabilityState                   InState;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D6C[0x7];                                      // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAvailabilityHelper_HasActiveTimer) == 0x000008, "Wrong alignment on SQAvailabilityHelper_HasActiveTimer");
static_assert(sizeof(SQAvailabilityHelper_HasActiveTimer) == 0x000050, "Wrong size on SQAvailabilityHelper_HasActiveTimer");
static_assert(offsetof(SQAvailabilityHelper_HasActiveTimer, InState) == 0x000000, "Member 'SQAvailabilityHelper_HasActiveTimer::InState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_HasActiveTimer, ReturnValue) == 0x000048, "Member 'SQAvailabilityHelper_HasActiveTimer::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailabilityHelper.HasDeployableActiveTimer
// 0x0058 (0x0058 - 0x0000)
struct SQAvailabilityHelper_HasDeployableActiveTimer final
{
public:
	struct FSQAvailabilityState_Deployable        InState;                                           // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D6D[0x7];                                      // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAvailabilityHelper_HasDeployableActiveTimer) == 0x000008, "Wrong alignment on SQAvailabilityHelper_HasDeployableActiveTimer");
static_assert(sizeof(SQAvailabilityHelper_HasDeployableActiveTimer) == 0x000058, "Wrong size on SQAvailabilityHelper_HasDeployableActiveTimer");
static_assert(offsetof(SQAvailabilityHelper_HasDeployableActiveTimer, InState) == 0x000000, "Member 'SQAvailabilityHelper_HasDeployableActiveTimer::InState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_HasDeployableActiveTimer, ReturnValue) == 0x000050, "Member 'SQAvailabilityHelper_HasDeployableActiveTimer::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailabilityHelper.HasRoleActiveTimer
// 0x0060 (0x0060 - 0x0000)
struct SQAvailabilityHelper_HasRoleActiveTimer final
{
public:
	struct FSQAvailabilityState_Role              InState;                                           // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D6E[0x7];                                      // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAvailabilityHelper_HasRoleActiveTimer) == 0x000008, "Wrong alignment on SQAvailabilityHelper_HasRoleActiveTimer");
static_assert(sizeof(SQAvailabilityHelper_HasRoleActiveTimer) == 0x000060, "Wrong size on SQAvailabilityHelper_HasRoleActiveTimer");
static_assert(offsetof(SQAvailabilityHelper_HasRoleActiveTimer, InState) == 0x000000, "Member 'SQAvailabilityHelper_HasRoleActiveTimer::InState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_HasRoleActiveTimer, ReturnValue) == 0x000058, "Member 'SQAvailabilityHelper_HasRoleActiveTimer::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailabilityHelper.HasVehicleActiveTimer
// 0x0058 (0x0058 - 0x0000)
struct SQAvailabilityHelper_HasVehicleActiveTimer final
{
public:
	struct FSQAvailabilityState_Vehicle           InState;                                           // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D6F[0x7];                                      // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAvailabilityHelper_HasVehicleActiveTimer) == 0x000008, "Wrong alignment on SQAvailabilityHelper_HasVehicleActiveTimer");
static_assert(sizeof(SQAvailabilityHelper_HasVehicleActiveTimer) == 0x000058, "Wrong size on SQAvailabilityHelper_HasVehicleActiveTimer");
static_assert(offsetof(SQAvailabilityHelper_HasVehicleActiveTimer, InState) == 0x000000, "Member 'SQAvailabilityHelper_HasVehicleActiveTimer::InState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_HasVehicleActiveTimer, ReturnValue) == 0x000050, "Member 'SQAvailabilityHelper_HasVehicleActiveTimer::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailabilityHelper.IsActionAvailableForPlayer
// 0x00A8 (0x00A8 - 0x0000)
struct SQAvailabilityHelper_IsActionAvailableForPlayer final
{
public:
	struct FSQAvailabilityState_Action            InTeamState;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class ASQPlayerController*                    InPlayer;                                          // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState                   OutPlayerState;                                    // 0x0058(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D70[0x7];                                      // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAvailabilityHelper_IsActionAvailableForPlayer) == 0x000008, "Wrong alignment on SQAvailabilityHelper_IsActionAvailableForPlayer");
static_assert(sizeof(SQAvailabilityHelper_IsActionAvailableForPlayer) == 0x0000A8, "Wrong size on SQAvailabilityHelper_IsActionAvailableForPlayer");
static_assert(offsetof(SQAvailabilityHelper_IsActionAvailableForPlayer, InTeamState) == 0x000000, "Member 'SQAvailabilityHelper_IsActionAvailableForPlayer::InTeamState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_IsActionAvailableForPlayer, InPlayer) == 0x000050, "Member 'SQAvailabilityHelper_IsActionAvailableForPlayer::InPlayer' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_IsActionAvailableForPlayer, OutPlayerState) == 0x000058, "Member 'SQAvailabilityHelper_IsActionAvailableForPlayer::OutPlayerState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_IsActionAvailableForPlayer, ReturnValue) == 0x0000A0, "Member 'SQAvailabilityHelper_IsActionAvailableForPlayer::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailabilityHelper.IsActionAvailableForTeam
// 0x0058 (0x0058 - 0x0000)
struct SQAvailabilityHelper_IsActionAvailableForTeam final
{
public:
	struct FSQAvailabilityState_Action            InTeamState;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D71[0x7];                                      // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAvailabilityHelper_IsActionAvailableForTeam) == 0x000008, "Wrong alignment on SQAvailabilityHelper_IsActionAvailableForTeam");
static_assert(sizeof(SQAvailabilityHelper_IsActionAvailableForTeam) == 0x000058, "Wrong size on SQAvailabilityHelper_IsActionAvailableForTeam");
static_assert(offsetof(SQAvailabilityHelper_IsActionAvailableForTeam, InTeamState) == 0x000000, "Member 'SQAvailabilityHelper_IsActionAvailableForTeam::InTeamState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_IsActionAvailableForTeam, ReturnValue) == 0x000050, "Member 'SQAvailabilityHelper_IsActionAvailableForTeam::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailabilityHelper.IsAvailable
// 0x0050 (0x0050 - 0x0000)
struct SQAvailabilityHelper_IsAvailable final
{
public:
	struct FSQAvailabilityState                   InState;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D72[0x7];                                      // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAvailabilityHelper_IsAvailable) == 0x000008, "Wrong alignment on SQAvailabilityHelper_IsAvailable");
static_assert(sizeof(SQAvailabilityHelper_IsAvailable) == 0x000050, "Wrong size on SQAvailabilityHelper_IsAvailable");
static_assert(offsetof(SQAvailabilityHelper_IsAvailable, InState) == 0x000000, "Member 'SQAvailabilityHelper_IsAvailable::InState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_IsAvailable, ReturnValue) == 0x000048, "Member 'SQAvailabilityHelper_IsAvailable::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailabilityHelper.IsDeployableAvailableForPlayer
// 0x00A8 (0x00A8 - 0x0000)
struct SQAvailabilityHelper_IsDeployableAvailableForPlayer final
{
public:
	struct FSQAvailabilityState_Deployable        InTeamState;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class ASQPlayerController*                    InPlayer;                                          // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState                   OutPlayerState;                                    // 0x0058(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D73[0x7];                                      // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAvailabilityHelper_IsDeployableAvailableForPlayer) == 0x000008, "Wrong alignment on SQAvailabilityHelper_IsDeployableAvailableForPlayer");
static_assert(sizeof(SQAvailabilityHelper_IsDeployableAvailableForPlayer) == 0x0000A8, "Wrong size on SQAvailabilityHelper_IsDeployableAvailableForPlayer");
static_assert(offsetof(SQAvailabilityHelper_IsDeployableAvailableForPlayer, InTeamState) == 0x000000, "Member 'SQAvailabilityHelper_IsDeployableAvailableForPlayer::InTeamState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_IsDeployableAvailableForPlayer, InPlayer) == 0x000050, "Member 'SQAvailabilityHelper_IsDeployableAvailableForPlayer::InPlayer' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_IsDeployableAvailableForPlayer, OutPlayerState) == 0x000058, "Member 'SQAvailabilityHelper_IsDeployableAvailableForPlayer::OutPlayerState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_IsDeployableAvailableForPlayer, ReturnValue) == 0x0000A0, "Member 'SQAvailabilityHelper_IsDeployableAvailableForPlayer::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailabilityHelper.IsDeployableAvailableForTeam
// 0x0058 (0x0058 - 0x0000)
struct SQAvailabilityHelper_IsDeployableAvailableForTeam final
{
public:
	struct FSQAvailabilityState_Deployable        InTeamState;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D74[0x7];                                      // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAvailabilityHelper_IsDeployableAvailableForTeam) == 0x000008, "Wrong alignment on SQAvailabilityHelper_IsDeployableAvailableForTeam");
static_assert(sizeof(SQAvailabilityHelper_IsDeployableAvailableForTeam) == 0x000058, "Wrong size on SQAvailabilityHelper_IsDeployableAvailableForTeam");
static_assert(offsetof(SQAvailabilityHelper_IsDeployableAvailableForTeam, InTeamState) == 0x000000, "Member 'SQAvailabilityHelper_IsDeployableAvailableForTeam::InTeamState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_IsDeployableAvailableForTeam, ReturnValue) == 0x000050, "Member 'SQAvailabilityHelper_IsDeployableAvailableForTeam::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailabilityHelper.IsInfiniteAvailability
// 0x0050 (0x0050 - 0x0000)
struct SQAvailabilityHelper_IsInfiniteAvailability final
{
public:
	struct FSQAvailabilityState                   InState;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D75[0x7];                                      // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAvailabilityHelper_IsInfiniteAvailability) == 0x000008, "Wrong alignment on SQAvailabilityHelper_IsInfiniteAvailability");
static_assert(sizeof(SQAvailabilityHelper_IsInfiniteAvailability) == 0x000050, "Wrong size on SQAvailabilityHelper_IsInfiniteAvailability");
static_assert(offsetof(SQAvailabilityHelper_IsInfiniteAvailability, InState) == 0x000000, "Member 'SQAvailabilityHelper_IsInfiniteAvailability::InState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_IsInfiniteAvailability, ReturnValue) == 0x000048, "Member 'SQAvailabilityHelper_IsInfiniteAvailability::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailabilityHelper.IsOverCapacity
// 0x0050 (0x0050 - 0x0000)
struct SQAvailabilityHelper_IsOverCapacity final
{
public:
	struct FSQAvailabilityState                   InState;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D76[0x7];                                      // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAvailabilityHelper_IsOverCapacity) == 0x000008, "Wrong alignment on SQAvailabilityHelper_IsOverCapacity");
static_assert(sizeof(SQAvailabilityHelper_IsOverCapacity) == 0x000050, "Wrong size on SQAvailabilityHelper_IsOverCapacity");
static_assert(offsetof(SQAvailabilityHelper_IsOverCapacity, InState) == 0x000000, "Member 'SQAvailabilityHelper_IsOverCapacity::InState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_IsOverCapacity, ReturnValue) == 0x000048, "Member 'SQAvailabilityHelper_IsOverCapacity::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailabilityHelper.IsRoleAvailableForPlayer
// 0x00B0 (0x00B0 - 0x0000)
struct SQAvailabilityHelper_IsRoleAvailableForPlayer final
{
public:
	struct FSQAvailabilityState_Role              InTeamState;                                       // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class ASQPlayerController*                    InPlayer;                                          // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState                   OutPlayerState;                                    // 0x0060(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D77[0x7];                                      // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAvailabilityHelper_IsRoleAvailableForPlayer) == 0x000008, "Wrong alignment on SQAvailabilityHelper_IsRoleAvailableForPlayer");
static_assert(sizeof(SQAvailabilityHelper_IsRoleAvailableForPlayer) == 0x0000B0, "Wrong size on SQAvailabilityHelper_IsRoleAvailableForPlayer");
static_assert(offsetof(SQAvailabilityHelper_IsRoleAvailableForPlayer, InTeamState) == 0x000000, "Member 'SQAvailabilityHelper_IsRoleAvailableForPlayer::InTeamState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_IsRoleAvailableForPlayer, InPlayer) == 0x000058, "Member 'SQAvailabilityHelper_IsRoleAvailableForPlayer::InPlayer' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_IsRoleAvailableForPlayer, OutPlayerState) == 0x000060, "Member 'SQAvailabilityHelper_IsRoleAvailableForPlayer::OutPlayerState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_IsRoleAvailableForPlayer, ReturnValue) == 0x0000A8, "Member 'SQAvailabilityHelper_IsRoleAvailableForPlayer::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailabilityHelper.IsRoleAvailableForTeam
// 0x0060 (0x0060 - 0x0000)
struct SQAvailabilityHelper_IsRoleAvailableForTeam final
{
public:
	struct FSQAvailabilityState_Role              InTeamState;                                       // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D78[0x7];                                      // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAvailabilityHelper_IsRoleAvailableForTeam) == 0x000008, "Wrong alignment on SQAvailabilityHelper_IsRoleAvailableForTeam");
static_assert(sizeof(SQAvailabilityHelper_IsRoleAvailableForTeam) == 0x000060, "Wrong size on SQAvailabilityHelper_IsRoleAvailableForTeam");
static_assert(offsetof(SQAvailabilityHelper_IsRoleAvailableForTeam, InTeamState) == 0x000000, "Member 'SQAvailabilityHelper_IsRoleAvailableForTeam::InTeamState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_IsRoleAvailableForTeam, ReturnValue) == 0x000058, "Member 'SQAvailabilityHelper_IsRoleAvailableForTeam::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailabilityHelper.IsVehicleAvailableForPlayer
// 0x00A8 (0x00A8 - 0x0000)
struct SQAvailabilityHelper_IsVehicleAvailableForPlayer final
{
public:
	struct FSQAvailabilityState_Vehicle           InTeamState;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class ASQPlayerController*                    InPlayer;                                          // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState                   OutPlayerState;                                    // 0x0058(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D79[0x7];                                      // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAvailabilityHelper_IsVehicleAvailableForPlayer) == 0x000008, "Wrong alignment on SQAvailabilityHelper_IsVehicleAvailableForPlayer");
static_assert(sizeof(SQAvailabilityHelper_IsVehicleAvailableForPlayer) == 0x0000A8, "Wrong size on SQAvailabilityHelper_IsVehicleAvailableForPlayer");
static_assert(offsetof(SQAvailabilityHelper_IsVehicleAvailableForPlayer, InTeamState) == 0x000000, "Member 'SQAvailabilityHelper_IsVehicleAvailableForPlayer::InTeamState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_IsVehicleAvailableForPlayer, InPlayer) == 0x000050, "Member 'SQAvailabilityHelper_IsVehicleAvailableForPlayer::InPlayer' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_IsVehicleAvailableForPlayer, OutPlayerState) == 0x000058, "Member 'SQAvailabilityHelper_IsVehicleAvailableForPlayer::OutPlayerState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_IsVehicleAvailableForPlayer, ReturnValue) == 0x0000A0, "Member 'SQAvailabilityHelper_IsVehicleAvailableForPlayer::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailabilityHelper.IsVehicleAvailableForTeam
// 0x0058 (0x0058 - 0x0000)
struct SQAvailabilityHelper_IsVehicleAvailableForTeam final
{
public:
	struct FSQAvailabilityState_Vehicle           InTeamState;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D7A[0x7];                                      // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAvailabilityHelper_IsVehicleAvailableForTeam) == 0x000008, "Wrong alignment on SQAvailabilityHelper_IsVehicleAvailableForTeam");
static_assert(sizeof(SQAvailabilityHelper_IsVehicleAvailableForTeam) == 0x000058, "Wrong size on SQAvailabilityHelper_IsVehicleAvailableForTeam");
static_assert(offsetof(SQAvailabilityHelper_IsVehicleAvailableForTeam, InTeamState) == 0x000000, "Member 'SQAvailabilityHelper_IsVehicleAvailableForTeam::InTeamState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_IsVehicleAvailableForTeam, ReturnValue) == 0x000050, "Member 'SQAvailabilityHelper_IsVehicleAvailableForTeam::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailabilityHelper.RemoveUsage
// 0x0098 (0x0098 - 0x0000)
struct SQAvailabilityHelper_RemoveUsage final
{
public:
	struct FSQAvailabilityState                   InState;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState                   OutState;                                          // 0x0048(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         RemovedUsage;                                      // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D7B[0x4];                                      // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAvailabilityHelper_RemoveUsage) == 0x000008, "Wrong alignment on SQAvailabilityHelper_RemoveUsage");
static_assert(sizeof(SQAvailabilityHelper_RemoveUsage) == 0x000098, "Wrong size on SQAvailabilityHelper_RemoveUsage");
static_assert(offsetof(SQAvailabilityHelper_RemoveUsage, InState) == 0x000000, "Member 'SQAvailabilityHelper_RemoveUsage::InState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_RemoveUsage, OutState) == 0x000048, "Member 'SQAvailabilityHelper_RemoveUsage::OutState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_RemoveUsage, RemovedUsage) == 0x000090, "Member 'SQAvailabilityHelper_RemoveUsage::RemovedUsage' has a wrong offset!");

// Function Squad.SQAvailabilityHelper.SetAvailable
// 0x0098 (0x0098 - 0x0000)
struct SQAvailabilityHelper_SetAvailable final
{
public:
	struct FSQAvailabilityState                   InState;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState                   OutState;                                          // 0x0048(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         InAvailable;                                       // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D7C[0x4];                                      // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAvailabilityHelper_SetAvailable) == 0x000008, "Wrong alignment on SQAvailabilityHelper_SetAvailable");
static_assert(sizeof(SQAvailabilityHelper_SetAvailable) == 0x000098, "Wrong size on SQAvailabilityHelper_SetAvailable");
static_assert(offsetof(SQAvailabilityHelper_SetAvailable, InState) == 0x000000, "Member 'SQAvailabilityHelper_SetAvailable::InState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_SetAvailable, OutState) == 0x000048, "Member 'SQAvailabilityHelper_SetAvailable::OutState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_SetAvailable, InAvailable) == 0x000090, "Member 'SQAvailabilityHelper_SetAvailable::InAvailable' has a wrong offset!");

// Function Squad.SQAvailabilityHelper.SetForceAvailable
// 0x0098 (0x0098 - 0x0000)
struct SQAvailabilityHelper_SetForceAvailable final
{
public:
	struct FSQAvailabilityState                   InState;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState                   OutState;                                          // 0x0048(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          Force;                                             // 0x0090(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D7D[0x7];                                      // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAvailabilityHelper_SetForceAvailable) == 0x000008, "Wrong alignment on SQAvailabilityHelper_SetForceAvailable");
static_assert(sizeof(SQAvailabilityHelper_SetForceAvailable) == 0x000098, "Wrong size on SQAvailabilityHelper_SetForceAvailable");
static_assert(offsetof(SQAvailabilityHelper_SetForceAvailable, InState) == 0x000000, "Member 'SQAvailabilityHelper_SetForceAvailable::InState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_SetForceAvailable, OutState) == 0x000048, "Member 'SQAvailabilityHelper_SetForceAvailable::OutState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_SetForceAvailable, Force) == 0x000090, "Member 'SQAvailabilityHelper_SetForceAvailable::Force' has a wrong offset!");

// Function Squad.SQAvailabilityHelper.SetModifierPct
// 0x0098 (0x0098 - 0x0000)
struct SQAvailabilityHelper_SetModifierPct final
{
public:
	struct FSQAvailabilityState                   InState;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState                   OutState;                                          // 0x0048(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         ModifierPercentage;                                // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D7E[0x4];                                      // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAvailabilityHelper_SetModifierPct) == 0x000008, "Wrong alignment on SQAvailabilityHelper_SetModifierPct");
static_assert(sizeof(SQAvailabilityHelper_SetModifierPct) == 0x000098, "Wrong size on SQAvailabilityHelper_SetModifierPct");
static_assert(offsetof(SQAvailabilityHelper_SetModifierPct, InState) == 0x000000, "Member 'SQAvailabilityHelper_SetModifierPct::InState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_SetModifierPct, OutState) == 0x000048, "Member 'SQAvailabilityHelper_SetModifierPct::OutState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_SetModifierPct, ModifierPercentage) == 0x000090, "Member 'SQAvailabilityHelper_SetModifierPct::ModifierPercentage' has a wrong offset!");

// Function Squad.SQAvailabilityHelper.SetUnavailable
// 0x00A0 (0x00A0 - 0x0000)
struct SQAvailabilityHelper_SetUnavailable final
{
public:
	struct FSQAvailabilityState                   InState;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState                   OutState;                                          // 0x0048(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    InUnavailabilityReason;                            // 0x0090(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAvailabilityHelper_SetUnavailable) == 0x000008, "Wrong alignment on SQAvailabilityHelper_SetUnavailable");
static_assert(sizeof(SQAvailabilityHelper_SetUnavailable) == 0x0000A0, "Wrong size on SQAvailabilityHelper_SetUnavailable");
static_assert(offsetof(SQAvailabilityHelper_SetUnavailable, InState) == 0x000000, "Member 'SQAvailabilityHelper_SetUnavailable::InState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_SetUnavailable, OutState) == 0x000048, "Member 'SQAvailabilityHelper_SetUnavailable::OutState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_SetUnavailable, InUnavailabilityReason) == 0x000090, "Member 'SQAvailabilityHelper_SetUnavailable::InUnavailabilityReason' has a wrong offset!");

// Function Squad.SQAvailabilityHelper.SetUsage
// 0x0098 (0x0098 - 0x0000)
struct SQAvailabilityHelper_SetUsage final
{
public:
	struct FSQAvailabilityState                   InState;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState                   OutState;                                          // 0x0048(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         Usage;                                             // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D7F[0x4];                                      // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAvailabilityHelper_SetUsage) == 0x000008, "Wrong alignment on SQAvailabilityHelper_SetUsage");
static_assert(sizeof(SQAvailabilityHelper_SetUsage) == 0x000098, "Wrong size on SQAvailabilityHelper_SetUsage");
static_assert(offsetof(SQAvailabilityHelper_SetUsage, InState) == 0x000000, "Member 'SQAvailabilityHelper_SetUsage::InState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_SetUsage, OutState) == 0x000048, "Member 'SQAvailabilityHelper_SetUsage::OutState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_SetUsage, Usage) == 0x000090, "Member 'SQAvailabilityHelper_SetUsage::Usage' has a wrong offset!");

// Function Squad.SQAvailabilityHelper.UpdateNextAvailabilityTime
// 0x0090 (0x0090 - 0x0000)
struct SQAvailabilityHelper_UpdateNextAvailabilityTime final
{
public:
	struct FSQAvailabilityState                   InState;                                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState                   OutState;                                          // 0x0048(0x0048)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAvailabilityHelper_UpdateNextAvailabilityTime) == 0x000008, "Wrong alignment on SQAvailabilityHelper_UpdateNextAvailabilityTime");
static_assert(sizeof(SQAvailabilityHelper_UpdateNextAvailabilityTime) == 0x000090, "Wrong size on SQAvailabilityHelper_UpdateNextAvailabilityTime");
static_assert(offsetof(SQAvailabilityHelper_UpdateNextAvailabilityTime, InState) == 0x000000, "Member 'SQAvailabilityHelper_UpdateNextAvailabilityTime::InState' has a wrong offset!");
static_assert(offsetof(SQAvailabilityHelper_UpdateNextAvailabilityTime, OutState) == 0x000048, "Member 'SQAvailabilityHelper_UpdateNextAvailabilityTime::OutState' has a wrong offset!");

// Function Squad.SQUndirectedGraph.AddLink
// 0x0010 (0x0010 - 0x0000)
struct SQUndirectedGraph_AddLink final
{
public:
	struct FSQGraphLink                           Link;                                              // 0x0000(0x0010)(Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQUndirectedGraph_AddLink) == 0x000008, "Wrong alignment on SQUndirectedGraph_AddLink");
static_assert(sizeof(SQUndirectedGraph_AddLink) == 0x000010, "Wrong size on SQUndirectedGraph_AddLink");
static_assert(offsetof(SQUndirectedGraph_AddLink, Link) == 0x000000, "Member 'SQUndirectedGraph_AddLink::Link' has a wrong offset!");

// Function Squad.SQUndirectedGraph.AddNode
// 0x0008 (0x0008 - 0x0000)
struct SQUndirectedGraph_AddNode final
{
public:
	class USQGraphNodeComponent*                  Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQUndirectedGraph_AddNode) == 0x000008, "Wrong alignment on SQUndirectedGraph_AddNode");
static_assert(sizeof(SQUndirectedGraph_AddNode) == 0x000008, "Wrong size on SQUndirectedGraph_AddNode");
static_assert(offsetof(SQUndirectedGraph_AddNode, Node) == 0x000000, "Member 'SQUndirectedGraph_AddNode::Node' has a wrong offset!");

// Function Squad.SQUndirectedGraph.GetLinks
// 0x0010 (0x0010 - 0x0000)
struct SQUndirectedGraph_GetLinks final
{
public:
	TArray<struct FSQGraphLink>                   InOutLinks;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQUndirectedGraph_GetLinks) == 0x000008, "Wrong alignment on SQUndirectedGraph_GetLinks");
static_assert(sizeof(SQUndirectedGraph_GetLinks) == 0x000010, "Wrong size on SQUndirectedGraph_GetLinks");
static_assert(offsetof(SQUndirectedGraph_GetLinks, InOutLinks) == 0x000000, "Member 'SQUndirectedGraph_GetLinks::InOutLinks' has a wrong offset!");

// Function Squad.SQUndirectedGraph.RemoveLink
// 0x0010 (0x0010 - 0x0000)
struct SQUndirectedGraph_RemoveLink final
{
public:
	struct FSQGraphLink                           Link;                                              // 0x0000(0x0010)(Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQUndirectedGraph_RemoveLink) == 0x000008, "Wrong alignment on SQUndirectedGraph_RemoveLink");
static_assert(sizeof(SQUndirectedGraph_RemoveLink) == 0x000010, "Wrong size on SQUndirectedGraph_RemoveLink");
static_assert(offsetof(SQUndirectedGraph_RemoveLink, Link) == 0x000000, "Member 'SQUndirectedGraph_RemoveLink::Link' has a wrong offset!");

// Function Squad.SQUndirectedGraph.RemoveNode
// 0x0008 (0x0008 - 0x0000)
struct SQUndirectedGraph_RemoveNode final
{
public:
	class USQGraphNodeComponent*                  Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQUndirectedGraph_RemoveNode) == 0x000008, "Wrong alignment on SQUndirectedGraph_RemoveNode");
static_assert(sizeof(SQUndirectedGraph_RemoveNode) == 0x000008, "Wrong size on SQUndirectedGraph_RemoveNode");
static_assert(offsetof(SQUndirectedGraph_RemoveNode, Node) == 0x000000, "Member 'SQUndirectedGraph_RemoveNode::Node' has a wrong offset!");

// Function Squad.SQUndirectedGraph.GetNodes
// 0x0010 (0x0010 - 0x0000)
struct SQUndirectedGraph_GetNodes final
{
public:
	TArray<class USQGraphNodeComponent*>          InOutNodes;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQUndirectedGraph_GetNodes) == 0x000008, "Wrong alignment on SQUndirectedGraph_GetNodes");
static_assert(sizeof(SQUndirectedGraph_GetNodes) == 0x000010, "Wrong size on SQUndirectedGraph_GetNodes");
static_assert(offsetof(SQUndirectedGraph_GetNodes, InOutNodes) == 0x000000, "Member 'SQUndirectedGraph_GetNodes::InOutNodes' has a wrong offset!");

// Function Squad.SQRadialButton.UpdateRadialAngle
// 0x0004 (0x0004 - 0x0000)
struct SQRadialButton_UpdateRadialAngle final
{
public:
	float                                         UpdatedAngle;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRadialButton_UpdateRadialAngle) == 0x000004, "Wrong alignment on SQRadialButton_UpdateRadialAngle");
static_assert(sizeof(SQRadialButton_UpdateRadialAngle) == 0x000004, "Wrong size on SQRadialButton_UpdateRadialAngle");
static_assert(offsetof(SQRadialButton_UpdateRadialAngle, UpdatedAngle) == 0x000000, "Member 'SQRadialButton_UpdateRadialAngle::UpdatedAngle' has a wrong offset!");

// Function Squad.SQAASGraph.AddSourceNode
// 0x0008 (0x0008 - 0x0000)
struct SQAASGraph_AddSourceNode final
{
public:
	class USQGraphNodeComponent*                  Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAASGraph_AddSourceNode) == 0x000008, "Wrong alignment on SQAASGraph_AddSourceNode");
static_assert(sizeof(SQAASGraph_AddSourceNode) == 0x000008, "Wrong size on SQAASGraph_AddSourceNode");
static_assert(offsetof(SQAASGraph_AddSourceNode, Node) == 0x000000, "Member 'SQAASGraph_AddSourceNode::Node' has a wrong offset!");

// Function Squad.SQAASGraph.PostNodeOwnerChanged
// 0x0010 (0x0010 - 0x0000)
struct SQAASGraph_PostNodeOwnerChanged final
{
public:
	class USQCaptureZoneComponent*                CaptureZone;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Team;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D88[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAASGraph_PostNodeOwnerChanged) == 0x000008, "Wrong alignment on SQAASGraph_PostNodeOwnerChanged");
static_assert(sizeof(SQAASGraph_PostNodeOwnerChanged) == 0x000010, "Wrong size on SQAASGraph_PostNodeOwnerChanged");
static_assert(offsetof(SQAASGraph_PostNodeOwnerChanged, CaptureZone) == 0x000000, "Member 'SQAASGraph_PostNodeOwnerChanged::CaptureZone' has a wrong offset!");
static_assert(offsetof(SQAASGraph_PostNodeOwnerChanged, Team) == 0x000008, "Member 'SQAASGraph_PostNodeOwnerChanged::Team' has a wrong offset!");

// Function Squad.SQAASGraph.RemoveSourceNode
// 0x0008 (0x0008 - 0x0000)
struct SQAASGraph_RemoveSourceNode final
{
public:
	class USQGraphNodeComponent*                  Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAASGraph_RemoveSourceNode) == 0x000008, "Wrong alignment on SQAASGraph_RemoveSourceNode");
static_assert(sizeof(SQAASGraph_RemoveSourceNode) == 0x000008, "Wrong size on SQAASGraph_RemoveSourceNode");
static_assert(offsetof(SQAASGraph_RemoveSourceNode, Node) == 0x000000, "Member 'SQAASGraph_RemoveSourceNode::Node' has a wrong offset!");

// Function Squad.SQAASGraph.GetSourceNodes
// 0x0010 (0x0010 - 0x0000)
struct SQAASGraph_GetSourceNodes final
{
public:
	TArray<class USQGraphNodeComponent*>          InOutNodes;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAASGraph_GetSourceNodes) == 0x000008, "Wrong alignment on SQAASGraph_GetSourceNodes");
static_assert(sizeof(SQAASGraph_GetSourceNodes) == 0x000010, "Wrong size on SQAASGraph_GetSourceNodes");
static_assert(offsetof(SQAASGraph_GetSourceNodes, InOutNodes) == 0x000000, "Member 'SQAASGraph_GetSourceNodes::InOutNodes' has a wrong offset!");

// Function Squad.SQAASGraph.GetTeamSourceNodes
// 0x0018 (0x0018 - 0x0000)
struct SQAASGraph_GetTeamSourceNodes final
{
public:
	uint8                                         Team;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D89[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USQGraphNodeComponent*>          InOutNodes;                                        // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAASGraph_GetTeamSourceNodes) == 0x000008, "Wrong alignment on SQAASGraph_GetTeamSourceNodes");
static_assert(sizeof(SQAASGraph_GetTeamSourceNodes) == 0x000018, "Wrong size on SQAASGraph_GetTeamSourceNodes");
static_assert(offsetof(SQAASGraph_GetTeamSourceNodes, Team) == 0x000000, "Member 'SQAASGraph_GetTeamSourceNodes::Team' has a wrong offset!");
static_assert(offsetof(SQAASGraph_GetTeamSourceNodes, InOutNodes) == 0x000008, "Member 'SQAASGraph_GetTeamSourceNodes::InOutNodes' has a wrong offset!");

// Function Squad.SQMapLattice.DrawWidget
// 0x0030 (0x0030 - 0x0000)
struct SQMapLattice_DrawWidget final
{
public:
	struct FPaintContext                          Context;                                           // 0x0000(0x0030)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapLattice_DrawWidget) == 0x000008, "Wrong alignment on SQMapLattice_DrawWidget");
static_assert(sizeof(SQMapLattice_DrawWidget) == 0x000030, "Wrong size on SQMapLattice_DrawWidget");
static_assert(offsetof(SQMapLattice_DrawWidget, Context) == 0x000000, "Member 'SQMapLattice_DrawWidget::Context' has a wrong offset!");

// Function Squad.SQMapLattice.WorldLocationToDrawLocation
// 0x0020 (0x0020 - 0x0000)
struct SQMapLattice_WorldLocationToDrawLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8B[0x4];                                      // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class USQMapWidgetBase*                 MapWidget;                                         // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapLattice_WorldLocationToDrawLocation) == 0x000008, "Wrong alignment on SQMapLattice_WorldLocationToDrawLocation");
static_assert(sizeof(SQMapLattice_WorldLocationToDrawLocation) == 0x000020, "Wrong size on SQMapLattice_WorldLocationToDrawLocation");
static_assert(offsetof(SQMapLattice_WorldLocationToDrawLocation, Location) == 0x000000, "Member 'SQMapLattice_WorldLocationToDrawLocation::Location' has a wrong offset!");
static_assert(offsetof(SQMapLattice_WorldLocationToDrawLocation, MapWidget) == 0x000010, "Member 'SQMapLattice_WorldLocationToDrawLocation::MapWidget' has a wrong offset!");
static_assert(offsetof(SQMapLattice_WorldLocationToDrawLocation, ReturnValue) == 0x000018, "Member 'SQMapLattice_WorldLocationToDrawLocation::ReturnValue' has a wrong offset!");

// Function Squad.SQGameRuleSet.LogisticsDropOff
// 0x0010 (0x0010 - 0x0000)
struct SQGameRuleSet_LogisticsDropOff final
{
public:
	class AActor*                                 VehicleActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmmoDroppedOff;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstructionDroppedOff;                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_LogisticsDropOff) == 0x000008, "Wrong alignment on SQGameRuleSet_LogisticsDropOff");
static_assert(sizeof(SQGameRuleSet_LogisticsDropOff) == 0x000010, "Wrong size on SQGameRuleSet_LogisticsDropOff");
static_assert(offsetof(SQGameRuleSet_LogisticsDropOff, VehicleActor) == 0x000000, "Member 'SQGameRuleSet_LogisticsDropOff::VehicleActor' has a wrong offset!");
static_assert(offsetof(SQGameRuleSet_LogisticsDropOff, AmmoDroppedOff) == 0x000008, "Member 'SQGameRuleSet_LogisticsDropOff::AmmoDroppedOff' has a wrong offset!");
static_assert(offsetof(SQGameRuleSet_LogisticsDropOff, ConstructionDroppedOff) == 0x00000C, "Member 'SQGameRuleSet_LogisticsDropOff::ConstructionDroppedOff' has a wrong offset!");

// Function Squad.SQGameRuleSet.ModifySoldierInventory
// 0x0010 (0x0010 - 0x0000)
struct SQGameRuleSet_ModifySoldierInventory final
{
public:
	class ASQSoldier*                             Soldier;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQSpawnInventoryReason                       Reason;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D90[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameRuleSet_ModifySoldierInventory) == 0x000008, "Wrong alignment on SQGameRuleSet_ModifySoldierInventory");
static_assert(sizeof(SQGameRuleSet_ModifySoldierInventory) == 0x000010, "Wrong size on SQGameRuleSet_ModifySoldierInventory");
static_assert(offsetof(SQGameRuleSet_ModifySoldierInventory, Soldier) == 0x000000, "Member 'SQGameRuleSet_ModifySoldierInventory::Soldier' has a wrong offset!");
static_assert(offsetof(SQGameRuleSet_ModifySoldierInventory, Reason) == 0x000008, "Member 'SQGameRuleSet_ModifySoldierInventory::Reason' has a wrong offset!");

// Function Squad.SQGameRuleSet.NotifyPlayer
// 0x0030 (0x0030 - 0x0000)
struct SQGameRuleSet_NotifyPlayer final
{
public:
	class ASQPlayerController*                    Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQNotificationTypes                          NotificationType;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D91[0x7];                                      // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StreamerModeVariantMessage;                        // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_NotifyPlayer) == 0x000008, "Wrong alignment on SQGameRuleSet_NotifyPlayer");
static_assert(sizeof(SQGameRuleSet_NotifyPlayer) == 0x000030, "Wrong size on SQGameRuleSet_NotifyPlayer");
static_assert(offsetof(SQGameRuleSet_NotifyPlayer, Player) == 0x000000, "Member 'SQGameRuleSet_NotifyPlayer::Player' has a wrong offset!");
static_assert(offsetof(SQGameRuleSet_NotifyPlayer, Message) == 0x000008, "Member 'SQGameRuleSet_NotifyPlayer::Message' has a wrong offset!");
static_assert(offsetof(SQGameRuleSet_NotifyPlayer, NotificationType) == 0x000018, "Member 'SQGameRuleSet_NotifyPlayer::NotificationType' has a wrong offset!");
static_assert(offsetof(SQGameRuleSet_NotifyPlayer, StreamerModeVariantMessage) == 0x000020, "Member 'SQGameRuleSet_NotifyPlayer::StreamerModeVariantMessage' has a wrong offset!");

// Function Squad.SQGameRuleSet.NotifyPlayerOnScoreEvent
// 0x0030 (0x0030 - 0x0000)
struct SQGameRuleSet_NotifyPlayerOnScoreEvent final
{
public:
	class ASQPlayerController*                    Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQScoreEvent                          ScoreEvent;                                        // 0x0008(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_NotifyPlayerOnScoreEvent) == 0x000008, "Wrong alignment on SQGameRuleSet_NotifyPlayerOnScoreEvent");
static_assert(sizeof(SQGameRuleSet_NotifyPlayerOnScoreEvent) == 0x000030, "Wrong size on SQGameRuleSet_NotifyPlayerOnScoreEvent");
static_assert(offsetof(SQGameRuleSet_NotifyPlayerOnScoreEvent, Player) == 0x000000, "Member 'SQGameRuleSet_NotifyPlayerOnScoreEvent::Player' has a wrong offset!");
static_assert(offsetof(SQGameRuleSet_NotifyPlayerOnScoreEvent, ScoreEvent) == 0x000008, "Member 'SQGameRuleSet_NotifyPlayerOnScoreEvent::ScoreEvent' has a wrong offset!");

// Function Squad.SQGameRuleSet.PlayerBandaged
// 0x0010 (0x0010 - 0x0000)
struct SQGameRuleSet_PlayerBandaged final
{
public:
	class ASQPlayerController*                    Bandager;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerController*                    BandagedPlayer;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_PlayerBandaged) == 0x000008, "Wrong alignment on SQGameRuleSet_PlayerBandaged");
static_assert(sizeof(SQGameRuleSet_PlayerBandaged) == 0x000010, "Wrong size on SQGameRuleSet_PlayerBandaged");
static_assert(offsetof(SQGameRuleSet_PlayerBandaged, Bandager) == 0x000000, "Member 'SQGameRuleSet_PlayerBandaged::Bandager' has a wrong offset!");
static_assert(offsetof(SQGameRuleSet_PlayerBandaged, BandagedPlayer) == 0x000008, "Member 'SQGameRuleSet_PlayerBandaged::BandagedPlayer' has a wrong offset!");

// Function Squad.SQGameRuleSet.PlayerDied
// 0x0008 (0x0008 - 0x0000)
struct SQGameRuleSet_PlayerDied final
{
public:
	class ASQPlayerController*                    Victim;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_PlayerDied) == 0x000008, "Wrong alignment on SQGameRuleSet_PlayerDied");
static_assert(sizeof(SQGameRuleSet_PlayerDied) == 0x000008, "Wrong size on SQGameRuleSet_PlayerDied");
static_assert(offsetof(SQGameRuleSet_PlayerDied, Victim) == 0x000000, "Member 'SQGameRuleSet_PlayerDied::Victim' has a wrong offset!");

// Function Squad.SQGameRuleSet.PlayerHealed
// 0x0010 (0x0010 - 0x0000)
struct SQGameRuleSet_PlayerHealed final
{
public:
	class ASQPlayerController*                    Healer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerController*                    HealedPlayer;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_PlayerHealed) == 0x000008, "Wrong alignment on SQGameRuleSet_PlayerHealed");
static_assert(sizeof(SQGameRuleSet_PlayerHealed) == 0x000010, "Wrong size on SQGameRuleSet_PlayerHealed");
static_assert(offsetof(SQGameRuleSet_PlayerHealed, Healer) == 0x000000, "Member 'SQGameRuleSet_PlayerHealed::Healer' has a wrong offset!");
static_assert(offsetof(SQGameRuleSet_PlayerHealed, HealedPlayer) == 0x000008, "Member 'SQGameRuleSet_PlayerHealed::HealedPlayer' has a wrong offset!");

// Function Squad.SQGameRuleSet.PlayerJoined
// 0x0008 (0x0008 - 0x0000)
struct SQGameRuleSet_PlayerJoined final
{
public:
	class ASQPlayerController*                    NewPlayer;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_PlayerJoined) == 0x000008, "Wrong alignment on SQGameRuleSet_PlayerJoined");
static_assert(sizeof(SQGameRuleSet_PlayerJoined) == 0x000008, "Wrong size on SQGameRuleSet_PlayerJoined");
static_assert(offsetof(SQGameRuleSet_PlayerJoined, NewPlayer) == 0x000000, "Member 'SQGameRuleSet_PlayerJoined::NewPlayer' has a wrong offset!");

// Function Squad.SQGameRuleSet.PlayerJoinedTeam
// 0x0010 (0x0010 - 0x0000)
struct SQGameRuleSet_PlayerJoinedTeam final
{
public:
	class ASQPlayerController*                    Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D92[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameRuleSet_PlayerJoinedTeam) == 0x000008, "Wrong alignment on SQGameRuleSet_PlayerJoinedTeam");
static_assert(sizeof(SQGameRuleSet_PlayerJoinedTeam) == 0x000010, "Wrong size on SQGameRuleSet_PlayerJoinedTeam");
static_assert(offsetof(SQGameRuleSet_PlayerJoinedTeam, Player) == 0x000000, "Member 'SQGameRuleSet_PlayerJoinedTeam::Player' has a wrong offset!");
static_assert(offsetof(SQGameRuleSet_PlayerJoinedTeam, TeamIndex) == 0x000008, "Member 'SQGameRuleSet_PlayerJoinedTeam::TeamIndex' has a wrong offset!");

// Function Squad.SQGameRuleSet.PlayerKilled
// 0x0010 (0x0010 - 0x0000)
struct SQGameRuleSet_PlayerKilled final
{
public:
	class ASQPlayerController*                    Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerController*                    Victim;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_PlayerKilled) == 0x000008, "Wrong alignment on SQGameRuleSet_PlayerKilled");
static_assert(sizeof(SQGameRuleSet_PlayerKilled) == 0x000010, "Wrong size on SQGameRuleSet_PlayerKilled");
static_assert(offsetof(SQGameRuleSet_PlayerKilled, Killer) == 0x000000, "Member 'SQGameRuleSet_PlayerKilled::Killer' has a wrong offset!");
static_assert(offsetof(SQGameRuleSet_PlayerKilled, Victim) == 0x000008, "Member 'SQGameRuleSet_PlayerKilled::Victim' has a wrong offset!");

// Function Squad.SQGameRuleSet.PlayerRevived
// 0x0010 (0x0010 - 0x0000)
struct SQGameRuleSet_PlayerRevived final
{
public:
	class ASQPlayerController*                    Reviver;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerController*                    RevivedPlayer;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_PlayerRevived) == 0x000008, "Wrong alignment on SQGameRuleSet_PlayerRevived");
static_assert(sizeof(SQGameRuleSet_PlayerRevived) == 0x000010, "Wrong size on SQGameRuleSet_PlayerRevived");
static_assert(offsetof(SQGameRuleSet_PlayerRevived, Reviver) == 0x000000, "Member 'SQGameRuleSet_PlayerRevived::Reviver' has a wrong offset!");
static_assert(offsetof(SQGameRuleSet_PlayerRevived, RevivedPlayer) == 0x000008, "Member 'SQGameRuleSet_PlayerRevived::RevivedPlayer' has a wrong offset!");

// Function Squad.SQGameRuleSet.PlayerSelfBandaged
// 0x0008 (0x0008 - 0x0000)
struct SQGameRuleSet_PlayerSelfBandaged final
{
public:
	class ASQPlayerController*                    Bandager;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_PlayerSelfBandaged) == 0x000008, "Wrong alignment on SQGameRuleSet_PlayerSelfBandaged");
static_assert(sizeof(SQGameRuleSet_PlayerSelfBandaged) == 0x000008, "Wrong size on SQGameRuleSet_PlayerSelfBandaged");
static_assert(offsetof(SQGameRuleSet_PlayerSelfBandaged, Bandager) == 0x000000, "Member 'SQGameRuleSet_PlayerSelfBandaged::Bandager' has a wrong offset!");

// Function Squad.SQGameRuleSet.PlayerSelfHealed
// 0x0008 (0x0008 - 0x0000)
struct SQGameRuleSet_PlayerSelfHealed final
{
public:
	class ASQPlayerController*                    Healer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_PlayerSelfHealed) == 0x000008, "Wrong alignment on SQGameRuleSet_PlayerSelfHealed");
static_assert(sizeof(SQGameRuleSet_PlayerSelfHealed) == 0x000008, "Wrong size on SQGameRuleSet_PlayerSelfHealed");
static_assert(offsetof(SQGameRuleSet_PlayerSelfHealed, Healer) == 0x000000, "Member 'SQGameRuleSet_PlayerSelfHealed::Healer' has a wrong offset!");

// Function Squad.SQGameRuleSet.PlayerSelfWound
// 0x0008 (0x0008 - 0x0000)
struct SQGameRuleSet_PlayerSelfWound final
{
public:
	class ASQPlayerController*                    Victim;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_PlayerSelfWound) == 0x000008, "Wrong alignment on SQGameRuleSet_PlayerSelfWound");
static_assert(sizeof(SQGameRuleSet_PlayerSelfWound) == 0x000008, "Wrong size on SQGameRuleSet_PlayerSelfWound");
static_assert(offsetof(SQGameRuleSet_PlayerSelfWound, Victim) == 0x000000, "Member 'SQGameRuleSet_PlayerSelfWound::Victim' has a wrong offset!");

// Function Squad.SQGameRuleSet.PlayerSpawned
// 0x0008 (0x0008 - 0x0000)
struct SQGameRuleSet_PlayerSpawned final
{
public:
	class ASQPlayerController*                    NewPlayer;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_PlayerSpawned) == 0x000008, "Wrong alignment on SQGameRuleSet_PlayerSpawned");
static_assert(sizeof(SQGameRuleSet_PlayerSpawned) == 0x000008, "Wrong size on SQGameRuleSet_PlayerSpawned");
static_assert(offsetof(SQGameRuleSet_PlayerSpawned, NewPlayer) == 0x000000, "Member 'SQGameRuleSet_PlayerSpawned::NewPlayer' has a wrong offset!");

// Function Squad.SQGameRuleSet.PlayerSuicide
// 0x0008 (0x0008 - 0x0000)
struct SQGameRuleSet_PlayerSuicide final
{
public:
	class ASQPlayerController*                    Victim;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_PlayerSuicide) == 0x000008, "Wrong alignment on SQGameRuleSet_PlayerSuicide");
static_assert(sizeof(SQGameRuleSet_PlayerSuicide) == 0x000008, "Wrong size on SQGameRuleSet_PlayerSuicide");
static_assert(offsetof(SQGameRuleSet_PlayerSuicide, Victim) == 0x000000, "Member 'SQGameRuleSet_PlayerSuicide::Victim' has a wrong offset!");

// Function Squad.SQGameRuleSet.PlayerTeamKilled
// 0x0010 (0x0010 - 0x0000)
struct SQGameRuleSet_PlayerTeamKilled final
{
public:
	class ASQPlayerController*                    Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerController*                    Victim;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_PlayerTeamKilled) == 0x000008, "Wrong alignment on SQGameRuleSet_PlayerTeamKilled");
static_assert(sizeof(SQGameRuleSet_PlayerTeamKilled) == 0x000010, "Wrong size on SQGameRuleSet_PlayerTeamKilled");
static_assert(offsetof(SQGameRuleSet_PlayerTeamKilled, Killer) == 0x000000, "Member 'SQGameRuleSet_PlayerTeamKilled::Killer' has a wrong offset!");
static_assert(offsetof(SQGameRuleSet_PlayerTeamKilled, Victim) == 0x000008, "Member 'SQGameRuleSet_PlayerTeamKilled::Victim' has a wrong offset!");

// Function Squad.SQGameRuleSet.PlayerTeamWounded
// 0x0010 (0x0010 - 0x0000)
struct SQGameRuleSet_PlayerTeamWounded final
{
public:
	class ASQPlayerController*                    Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerController*                    Victim;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_PlayerTeamWounded) == 0x000008, "Wrong alignment on SQGameRuleSet_PlayerTeamWounded");
static_assert(sizeof(SQGameRuleSet_PlayerTeamWounded) == 0x000010, "Wrong size on SQGameRuleSet_PlayerTeamWounded");
static_assert(offsetof(SQGameRuleSet_PlayerTeamWounded, Killer) == 0x000000, "Member 'SQGameRuleSet_PlayerTeamWounded::Killer' has a wrong offset!");
static_assert(offsetof(SQGameRuleSet_PlayerTeamWounded, Victim) == 0x000008, "Member 'SQGameRuleSet_PlayerTeamWounded::Victim' has a wrong offset!");

// Function Squad.SQGameRuleSet.PlayerWound
// 0x0008 (0x0008 - 0x0000)
struct SQGameRuleSet_PlayerWound final
{
public:
	class ASQPlayerController*                    Victim;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_PlayerWound) == 0x000008, "Wrong alignment on SQGameRuleSet_PlayerWound");
static_assert(sizeof(SQGameRuleSet_PlayerWound) == 0x000008, "Wrong size on SQGameRuleSet_PlayerWound");
static_assert(offsetof(SQGameRuleSet_PlayerWound, Victim) == 0x000000, "Member 'SQGameRuleSet_PlayerWound::Victim' has a wrong offset!");

// Function Squad.SQGameRuleSet.PlayerWounded
// 0x0010 (0x0010 - 0x0000)
struct SQGameRuleSet_PlayerWounded final
{
public:
	class ASQPlayerController*                    Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerController*                    Victim;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_PlayerWounded) == 0x000008, "Wrong alignment on SQGameRuleSet_PlayerWounded");
static_assert(sizeof(SQGameRuleSet_PlayerWounded) == 0x000010, "Wrong size on SQGameRuleSet_PlayerWounded");
static_assert(offsetof(SQGameRuleSet_PlayerWounded, Killer) == 0x000000, "Member 'SQGameRuleSet_PlayerWounded::Killer' has a wrong offset!");
static_assert(offsetof(SQGameRuleSet_PlayerWounded, Victim) == 0x000008, "Member 'SQGameRuleSet_PlayerWounded::Victim' has a wrong offset!");

// Function Squad.SQGameRuleSet.PostPlayerLogin
// 0x0008 (0x0008 - 0x0000)
struct SQGameRuleSet_PostPlayerLogin final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_PostPlayerLogin) == 0x000008, "Wrong alignment on SQGameRuleSet_PostPlayerLogin");
static_assert(sizeof(SQGameRuleSet_PostPlayerLogin) == 0x000008, "Wrong size on SQGameRuleSet_PostPlayerLogin");
static_assert(offsetof(SQGameRuleSet_PostPlayerLogin, Controller) == 0x000000, "Member 'SQGameRuleSet_PostPlayerLogin::Controller' has a wrong offset!");

// Function Squad.SQGameRuleSet.PostPlayerLogout
// 0x0008 (0x0008 - 0x0000)
struct SQGameRuleSet_PostPlayerLogout final
{
public:
	class AController*                            Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_PostPlayerLogout) == 0x000008, "Wrong alignment on SQGameRuleSet_PostPlayerLogout");
static_assert(sizeof(SQGameRuleSet_PostPlayerLogout) == 0x000008, "Wrong size on SQGameRuleSet_PostPlayerLogout");
static_assert(offsetof(SQGameRuleSet_PostPlayerLogout, Controller) == 0x000000, "Member 'SQGameRuleSet_PostPlayerLogout::Controller' has a wrong offset!");

// Function Squad.SQGameRuleSet.PostPlayerSpawn
// 0x0008 (0x0008 - 0x0000)
struct SQGameRuleSet_PostPlayerSpawn final
{
public:
	class ASQSoldier*                             SpawningSoldier;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_PostPlayerSpawn) == 0x000008, "Wrong alignment on SQGameRuleSet_PostPlayerSpawn");
static_assert(sizeof(SQGameRuleSet_PostPlayerSpawn) == 0x000008, "Wrong size on SQGameRuleSet_PostPlayerSpawn");
static_assert(offsetof(SQGameRuleSet_PostPlayerSpawn, SpawningSoldier) == 0x000000, "Member 'SQGameRuleSet_PostPlayerSpawn::SpawningSoldier' has a wrong offset!");

// Function Squad.SQGameRuleSet.RegisterActor
// 0x0008 (0x0008 - 0x0000)
struct SQGameRuleSet_RegisterActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_RegisterActor) == 0x000008, "Wrong alignment on SQGameRuleSet_RegisterActor");
static_assert(sizeof(SQGameRuleSet_RegisterActor) == 0x000008, "Wrong size on SQGameRuleSet_RegisterActor");
static_assert(offsetof(SQGameRuleSet_RegisterActor, Actor) == 0x000000, "Member 'SQGameRuleSet_RegisterActor::Actor' has a wrong offset!");

// Function Squad.SQGameRuleSet.SendChatMessage
// 0x0038 (0x0038 - 0x0000)
struct SQGameRuleSet_SendChatMessage final
{
public:
	ESQChat                                       ChatType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D93[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTeam                                       Team;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D94[0x3];                                      // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Squad;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBroadcastToAdmin;                                 // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D95[0x7];                                      // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StreamerModeVariantMessage;                        // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_SendChatMessage) == 0x000008, "Wrong alignment on SQGameRuleSet_SendChatMessage");
static_assert(sizeof(SQGameRuleSet_SendChatMessage) == 0x000038, "Wrong size on SQGameRuleSet_SendChatMessage");
static_assert(offsetof(SQGameRuleSet_SendChatMessage, ChatType) == 0x000000, "Member 'SQGameRuleSet_SendChatMessage::ChatType' has a wrong offset!");
static_assert(offsetof(SQGameRuleSet_SendChatMessage, Message) == 0x000008, "Member 'SQGameRuleSet_SendChatMessage::Message' has a wrong offset!");
static_assert(offsetof(SQGameRuleSet_SendChatMessage, Team) == 0x000018, "Member 'SQGameRuleSet_SendChatMessage::Team' has a wrong offset!");
static_assert(offsetof(SQGameRuleSet_SendChatMessage, Squad) == 0x00001C, "Member 'SQGameRuleSet_SendChatMessage::Squad' has a wrong offset!");
static_assert(offsetof(SQGameRuleSet_SendChatMessage, bBroadcastToAdmin) == 0x000020, "Member 'SQGameRuleSet_SendChatMessage::bBroadcastToAdmin' has a wrong offset!");
static_assert(offsetof(SQGameRuleSet_SendChatMessage, StreamerModeVariantMessage) == 0x000028, "Member 'SQGameRuleSet_SendChatMessage::StreamerModeVariantMessage' has a wrong offset!");

// Function Squad.SQGameRuleSet.SetRoundTimeOverride
// 0x0004 (0x0004 - 0x0000)
struct SQGameRuleSet_SetRoundTimeOverride final
{
public:
	int32                                         InRoundTimeOverride;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_SetRoundTimeOverride) == 0x000004, "Wrong alignment on SQGameRuleSet_SetRoundTimeOverride");
static_assert(sizeof(SQGameRuleSet_SetRoundTimeOverride) == 0x000004, "Wrong size on SQGameRuleSet_SetRoundTimeOverride");
static_assert(offsetof(SQGameRuleSet_SetRoundTimeOverride, InRoundTimeOverride) == 0x000000, "Member 'SQGameRuleSet_SetRoundTimeOverride::InRoundTimeOverride' has a wrong offset!");

// Function Squad.SQGameRuleSet.SetRulesetEnabled
// 0x0001 (0x0001 - 0x0000)
struct SQGameRuleSet_SetRulesetEnabled final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_SetRulesetEnabled) == 0x000001, "Wrong alignment on SQGameRuleSet_SetRulesetEnabled");
static_assert(sizeof(SQGameRuleSet_SetRulesetEnabled) == 0x000001, "Wrong size on SQGameRuleSet_SetRulesetEnabled");
static_assert(offsetof(SQGameRuleSet_SetRulesetEnabled, Value) == 0x000000, "Member 'SQGameRuleSet_SetRulesetEnabled::Value' has a wrong offset!");

// Function Squad.SQGameRuleSet.UnregisterActor
// 0x0008 (0x0008 - 0x0000)
struct SQGameRuleSet_UnregisterActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_UnregisterActor) == 0x000008, "Wrong alignment on SQGameRuleSet_UnregisterActor");
static_assert(sizeof(SQGameRuleSet_UnregisterActor) == 0x000008, "Wrong size on SQGameRuleSet_UnregisterActor");
static_assert(offsetof(SQGameRuleSet_UnregisterActor, Actor) == 0x000000, "Member 'SQGameRuleSet_UnregisterActor::Actor' has a wrong offset!");

// Function Squad.SQGameRuleSet.VehicleDestroyed
// 0x0018 (0x0018 - 0x0000)
struct SQGameRuleSet_VehicleDestroyed final
{
public:
	class ASQPlayerController*                    Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerController*                    Victim;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQVehicle*                             DestroyedVehicle;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_VehicleDestroyed) == 0x000008, "Wrong alignment on SQGameRuleSet_VehicleDestroyed");
static_assert(sizeof(SQGameRuleSet_VehicleDestroyed) == 0x000018, "Wrong size on SQGameRuleSet_VehicleDestroyed");
static_assert(offsetof(SQGameRuleSet_VehicleDestroyed, Killer) == 0x000000, "Member 'SQGameRuleSet_VehicleDestroyed::Killer' has a wrong offset!");
static_assert(offsetof(SQGameRuleSet_VehicleDestroyed, Victim) == 0x000008, "Member 'SQGameRuleSet_VehicleDestroyed::Victim' has a wrong offset!");
static_assert(offsetof(SQGameRuleSet_VehicleDestroyed, DestroyedVehicle) == 0x000010, "Member 'SQGameRuleSet_VehicleDestroyed::DestroyedVehicle' has a wrong offset!");

// Function Squad.SQGameRuleSet.GetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct SQGameRuleSet_GetDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_GetDisplayName) == 0x000008, "Wrong alignment on SQGameRuleSet_GetDisplayName");
static_assert(sizeof(SQGameRuleSet_GetDisplayName) == 0x000010, "Wrong size on SQGameRuleSet_GetDisplayName");
static_assert(offsetof(SQGameRuleSet_GetDisplayName, ReturnValue) == 0x000000, "Member 'SQGameRuleSet_GetDisplayName::ReturnValue' has a wrong offset!");

// Function Squad.SQGameRuleSet.GetGameMode
// 0x0008 (0x0008 - 0x0000)
struct SQGameRuleSet_GetGameMode final
{
public:
	class ASQGameMode*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_GetGameMode) == 0x000008, "Wrong alignment on SQGameRuleSet_GetGameMode");
static_assert(sizeof(SQGameRuleSet_GetGameMode) == 0x000008, "Wrong size on SQGameRuleSet_GetGameMode");
static_assert(offsetof(SQGameRuleSet_GetGameMode, ReturnValue) == 0x000000, "Member 'SQGameRuleSet_GetGameMode::ReturnValue' has a wrong offset!");

// Function Squad.SQGameRuleSet.GetRoundTimeOverride
// 0x0004 (0x0004 - 0x0000)
struct SQGameRuleSet_GetRoundTimeOverride final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_GetRoundTimeOverride) == 0x000004, "Wrong alignment on SQGameRuleSet_GetRoundTimeOverride");
static_assert(sizeof(SQGameRuleSet_GetRoundTimeOverride) == 0x000004, "Wrong size on SQGameRuleSet_GetRoundTimeOverride");
static_assert(offsetof(SQGameRuleSet_GetRoundTimeOverride, ReturnValue) == 0x000000, "Member 'SQGameRuleSet_GetRoundTimeOverride::ReturnValue' has a wrong offset!");

// Function Squad.SQGameRuleSet.GetRoundTimeRemaining
// 0x0004 (0x0004 - 0x0000)
struct SQGameRuleSet_GetRoundTimeRemaining final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_GetRoundTimeRemaining) == 0x000004, "Wrong alignment on SQGameRuleSet_GetRoundTimeRemaining");
static_assert(sizeof(SQGameRuleSet_GetRoundTimeRemaining) == 0x000004, "Wrong size on SQGameRuleSet_GetRoundTimeRemaining");
static_assert(offsetof(SQGameRuleSet_GetRoundTimeRemaining, ReturnValue) == 0x000000, "Member 'SQGameRuleSet_GetRoundTimeRemaining::ReturnValue' has a wrong offset!");

// Function Squad.SQGameRuleSet.GetRulesetEnabled
// 0x0001 (0x0001 - 0x0000)
struct SQGameRuleSet_GetRulesetEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_GetRulesetEnabled) == 0x000001, "Wrong alignment on SQGameRuleSet_GetRulesetEnabled");
static_assert(sizeof(SQGameRuleSet_GetRulesetEnabled) == 0x000001, "Wrong size on SQGameRuleSet_GetRulesetEnabled");
static_assert(offsetof(SQGameRuleSet_GetRulesetEnabled, ReturnValue) == 0x000000, "Member 'SQGameRuleSet_GetRulesetEnabled::ReturnValue' has a wrong offset!");

// Function Squad.SQGameRuleSet.ReadyToEndMatch
// 0x0001 (0x0001 - 0x0000)
struct SQGameRuleSet_ReadyToEndMatch final
{
public:
	ESQReadyToEndMatch                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRuleSet_ReadyToEndMatch) == 0x000001, "Wrong alignment on SQGameRuleSet_ReadyToEndMatch");
static_assert(sizeof(SQGameRuleSet_ReadyToEndMatch) == 0x000001, "Wrong size on SQGameRuleSet_ReadyToEndMatch");
static_assert(offsetof(SQGameRuleSet_ReadyToEndMatch, ReturnValue) == 0x000000, "Member 'SQGameRuleSet_ReadyToEndMatch::ReturnValue' has a wrong offset!");

// Function Squad.SQReplayObject.SetupReplayObject
// 0x0018 (0x0018 - 0x0000)
struct SQReplayObject_SetupReplayObject final
{
public:
	class FString                                 ReplayFullPath;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateAsNamedReplay;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D97[0x6];                                      // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQReplayObject_SetupReplayObject) == 0x000008, "Wrong alignment on SQReplayObject_SetupReplayObject");
static_assert(sizeof(SQReplayObject_SetupReplayObject) == 0x000018, "Wrong size on SQReplayObject_SetupReplayObject");
static_assert(offsetof(SQReplayObject_SetupReplayObject, ReplayFullPath) == 0x000000, "Member 'SQReplayObject_SetupReplayObject::ReplayFullPath' has a wrong offset!");
static_assert(offsetof(SQReplayObject_SetupReplayObject, bCreateAsNamedReplay) == 0x000010, "Member 'SQReplayObject_SetupReplayObject::bCreateAsNamedReplay' has a wrong offset!");
static_assert(offsetof(SQReplayObject_SetupReplayObject, ReturnValue) == 0x000011, "Member 'SQReplayObject_SetupReplayObject::ReturnValue' has a wrong offset!");

// Function Squad.SQReplayObject.TryRenameReplay
// 0x0018 (0x0018 - 0x0000)
struct SQReplayObject_TryRenameReplay final
{
public:
	class FString                                 NewName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQRenameReplayResponse                       ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D98[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQReplayObject_TryRenameReplay) == 0x000008, "Wrong alignment on SQReplayObject_TryRenameReplay");
static_assert(sizeof(SQReplayObject_TryRenameReplay) == 0x000018, "Wrong size on SQReplayObject_TryRenameReplay");
static_assert(offsetof(SQReplayObject_TryRenameReplay, NewName) == 0x000000, "Member 'SQReplayObject_TryRenameReplay::NewName' has a wrong offset!");
static_assert(offsetof(SQReplayObject_TryRenameReplay, ReturnValue) == 0x000010, "Member 'SQReplayObject_TryRenameReplay::ReturnValue' has a wrong offset!");

// Function Squad.SQPawnMovementComponent.GetMovementBase
// 0x0008 (0x0008 - 0x0000)
struct SQPawnMovementComponent_GetMovementBase final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPawnMovementComponent_GetMovementBase) == 0x000008, "Wrong alignment on SQPawnMovementComponent_GetMovementBase");
static_assert(sizeof(SQPawnMovementComponent_GetMovementBase) == 0x000008, "Wrong size on SQPawnMovementComponent_GetMovementBase");
static_assert(offsetof(SQPawnMovementComponent_GetMovementBase, ReturnValue) == 0x000000, "Member 'SQPawnMovementComponent_GetMovementBase::ReturnValue' has a wrong offset!");

// Function Squad.SQGameModeRuleset.SendMessageToPlayer
// 0x0030 (0x0030 - 0x0000)
struct SQGameModeRuleset_SendMessageToPlayer final
{
public:
	class ASQPlayerController*                    Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MessageLifetime;                                   // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9B[0x4];                                      // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameModeRuleset_SendMessageToPlayer) == 0x000008, "Wrong alignment on SQGameModeRuleset_SendMessageToPlayer");
static_assert(sizeof(SQGameModeRuleset_SendMessageToPlayer) == 0x000030, "Wrong size on SQGameModeRuleset_SendMessageToPlayer");
static_assert(offsetof(SQGameModeRuleset_SendMessageToPlayer, Player) == 0x000000, "Member 'SQGameModeRuleset_SendMessageToPlayer::Player' has a wrong offset!");
static_assert(offsetof(SQGameModeRuleset_SendMessageToPlayer, Message) == 0x000008, "Member 'SQGameModeRuleset_SendMessageToPlayer::Message' has a wrong offset!");
static_assert(offsetof(SQGameModeRuleset_SendMessageToPlayer, Color) == 0x000018, "Member 'SQGameModeRuleset_SendMessageToPlayer::Color' has a wrong offset!");
static_assert(offsetof(SQGameModeRuleset_SendMessageToPlayer, MessageLifetime) == 0x000028, "Member 'SQGameModeRuleset_SendMessageToPlayer::MessageLifetime' has a wrong offset!");

// Function Squad.SQGameModeRuleset.SetWinningTeam
// 0x0008 (0x0008 - 0x0000)
struct SQGameModeRuleset_SetWinningTeam final
{
public:
	class ASQTeam*                                Team;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameModeRuleset_SetWinningTeam) == 0x000008, "Wrong alignment on SQGameModeRuleset_SetWinningTeam");
static_assert(sizeof(SQGameModeRuleset_SetWinningTeam) == 0x000008, "Wrong size on SQGameModeRuleset_SetWinningTeam");
static_assert(offsetof(SQGameModeRuleset_SetWinningTeam, Team) == 0x000000, "Member 'SQGameModeRuleset_SetWinningTeam::Team' has a wrong offset!");

// Function Squad.SQGameModeRuleset.SetWinningTeamFromEnum
// 0x0001 (0x0001 - 0x0000)
struct SQGameModeRuleset_SetWinningTeamFromEnum final
{
public:
	ESQTeam                                       Team;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameModeRuleset_SetWinningTeamFromEnum) == 0x000001, "Wrong alignment on SQGameModeRuleset_SetWinningTeamFromEnum");
static_assert(sizeof(SQGameModeRuleset_SetWinningTeamFromEnum) == 0x000001, "Wrong size on SQGameModeRuleset_SetWinningTeamFromEnum");
static_assert(offsetof(SQGameModeRuleset_SetWinningTeamFromEnum, Team) == 0x000000, "Member 'SQGameModeRuleset_SetWinningTeamFromEnum::Team' has a wrong offset!");

// Function Squad.SQNetMoveComponent.SendClientCorrection
// 0x0010 (0x0010 - 0x0000)
struct SQNetMoveComponent_SendClientCorrection final
{
public:
	TArray<uint8>                                 PackedMove;                                        // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQNetMoveComponent_SendClientCorrection) == 0x000008, "Wrong alignment on SQNetMoveComponent_SendClientCorrection");
static_assert(sizeof(SQNetMoveComponent_SendClientCorrection) == 0x000010, "Wrong size on SQNetMoveComponent_SendClientCorrection");
static_assert(offsetof(SQNetMoveComponent_SendClientCorrection, PackedMove) == 0x000000, "Member 'SQNetMoveComponent_SendClientCorrection::PackedMove' has a wrong offset!");

// Function Squad.SQNetMoveComponent.SendPackedMoveRPC
// 0x0010 (0x0010 - 0x0000)
struct SQNetMoveComponent_SendPackedMoveRPC final
{
public:
	TArray<uint8>                                 PackedMove;                                        // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQNetMoveComponent_SendPackedMoveRPC) == 0x000008, "Wrong alignment on SQNetMoveComponent_SendPackedMoveRPC");
static_assert(sizeof(SQNetMoveComponent_SendPackedMoveRPC) == 0x000010, "Wrong size on SQNetMoveComponent_SendPackedMoveRPC");
static_assert(offsetof(SQNetMoveComponent_SendPackedMoveRPC, PackedMove) == 0x000000, "Member 'SQNetMoveComponent_SendPackedMoveRPC::PackedMove' has a wrong offset!");

// Function Squad.SQRearmSource.BindEventToAmmoUpdated
// 0x0014 (0x0014 - 0x0000)
struct SQRearmSource_BindEventToAmmoUpdated final
{
public:
	TDelegate<void()>                             Delegate;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA0[0x3];                                      // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRearmSource_BindEventToAmmoUpdated) == 0x000004, "Wrong alignment on SQRearmSource_BindEventToAmmoUpdated");
static_assert(sizeof(SQRearmSource_BindEventToAmmoUpdated) == 0x000014, "Wrong size on SQRearmSource_BindEventToAmmoUpdated");
static_assert(offsetof(SQRearmSource_BindEventToAmmoUpdated, Delegate) == 0x000000, "Member 'SQRearmSource_BindEventToAmmoUpdated::Delegate' has a wrong offset!");
static_assert(offsetof(SQRearmSource_BindEventToAmmoUpdated, ReturnValue) == 0x000010, "Member 'SQRearmSource_BindEventToAmmoUpdated::ReturnValue' has a wrong offset!");

// Function Squad.SQRearmSource.ConsumeAmmo
// 0x0008 (0x0008 - 0x0000)
struct SQRearmSource_ConsumeAmmo final
{
public:
	float                                         AmmoRequired;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA1[0x3];                                      // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRearmSource_ConsumeAmmo) == 0x000004, "Wrong alignment on SQRearmSource_ConsumeAmmo");
static_assert(sizeof(SQRearmSource_ConsumeAmmo) == 0x000008, "Wrong size on SQRearmSource_ConsumeAmmo");
static_assert(offsetof(SQRearmSource_ConsumeAmmo, AmmoRequired) == 0x000000, "Member 'SQRearmSource_ConsumeAmmo::AmmoRequired' has a wrong offset!");
static_assert(offsetof(SQRearmSource_ConsumeAmmo, ReturnValue) == 0x000004, "Member 'SQRearmSource_ConsumeAmmo::ReturnValue' has a wrong offset!");

// Function Squad.SQRearmSource.GetRearmNoAmmoString
// 0x0010 (0x0010 - 0x0000)
struct SQRearmSource_GetRearmNoAmmoString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRearmSource_GetRearmNoAmmoString) == 0x000008, "Wrong alignment on SQRearmSource_GetRearmNoAmmoString");
static_assert(sizeof(SQRearmSource_GetRearmNoAmmoString) == 0x000010, "Wrong size on SQRearmSource_GetRearmNoAmmoString");
static_assert(offsetof(SQRearmSource_GetRearmNoAmmoString, ReturnValue) == 0x000000, "Member 'SQRearmSource_GetRearmNoAmmoString::ReturnValue' has a wrong offset!");

// Function Squad.SQRearmSource.GetRearmSuccessString
// 0x0010 (0x0010 - 0x0000)
struct SQRearmSource_GetRearmSuccessString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRearmSource_GetRearmSuccessString) == 0x000008, "Wrong alignment on SQRearmSource_GetRearmSuccessString");
static_assert(sizeof(SQRearmSource_GetRearmSuccessString) == 0x000010, "Wrong size on SQRearmSource_GetRearmSuccessString");
static_assert(offsetof(SQRearmSource_GetRearmSuccessString, ReturnValue) == 0x000000, "Member 'SQRearmSource_GetRearmSuccessString::ReturnValue' has a wrong offset!");

// Function Squad.SQRearmSource.UnbindEventToAmmoUpdated
// 0x0014 (0x0014 - 0x0000)
struct SQRearmSource_UnbindEventToAmmoUpdated final
{
public:
	TDelegate<void()>                             Delegate;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA2[0x3];                                      // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRearmSource_UnbindEventToAmmoUpdated) == 0x000004, "Wrong alignment on SQRearmSource_UnbindEventToAmmoUpdated");
static_assert(sizeof(SQRearmSource_UnbindEventToAmmoUpdated) == 0x000014, "Wrong size on SQRearmSource_UnbindEventToAmmoUpdated");
static_assert(offsetof(SQRearmSource_UnbindEventToAmmoUpdated, Delegate) == 0x000000, "Member 'SQRearmSource_UnbindEventToAmmoUpdated::Delegate' has a wrong offset!");
static_assert(offsetof(SQRearmSource_UnbindEventToAmmoUpdated, ReturnValue) == 0x000010, "Member 'SQRearmSource_UnbindEventToAmmoUpdated::ReturnValue' has a wrong offset!");

// Function Squad.SQRearmSource.CanRearmPawn
// 0x0010 (0x0010 - 0x0000)
struct SQRearmSource_CanRearmPawn final
{
public:
	const class APawn*                            Rearmer;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA3[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRearmSource_CanRearmPawn) == 0x000008, "Wrong alignment on SQRearmSource_CanRearmPawn");
static_assert(sizeof(SQRearmSource_CanRearmPawn) == 0x000010, "Wrong size on SQRearmSource_CanRearmPawn");
static_assert(offsetof(SQRearmSource_CanRearmPawn, Rearmer) == 0x000000, "Member 'SQRearmSource_CanRearmPawn::Rearmer' has a wrong offset!");
static_assert(offsetof(SQRearmSource_CanRearmPawn, ReturnValue) == 0x000008, "Member 'SQRearmSource_CanRearmPawn::ReturnValue' has a wrong offset!");

// Function Squad.SQRearmSource.CanRearmWeapon
// 0x0010 (0x0010 - 0x0000)
struct SQRearmSource_CanRearmWeapon final
{
public:
	const class ASQEquipableItem*                 Weapon;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA4[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRearmSource_CanRearmWeapon) == 0x000008, "Wrong alignment on SQRearmSource_CanRearmWeapon");
static_assert(sizeof(SQRearmSource_CanRearmWeapon) == 0x000010, "Wrong size on SQRearmSource_CanRearmWeapon");
static_assert(offsetof(SQRearmSource_CanRearmWeapon, Weapon) == 0x000000, "Member 'SQRearmSource_CanRearmWeapon::Weapon' has a wrong offset!");
static_assert(offsetof(SQRearmSource_CanRearmWeapon, ReturnValue) == 0x000008, "Member 'SQRearmSource_CanRearmWeapon::ReturnValue' has a wrong offset!");

// Function Squad.SQRearmSource.GetAmmo
// 0x0004 (0x0004 - 0x0000)
struct SQRearmSource_GetAmmo final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRearmSource_GetAmmo) == 0x000004, "Wrong alignment on SQRearmSource_GetAmmo");
static_assert(sizeof(SQRearmSource_GetAmmo) == 0x000004, "Wrong size on SQRearmSource_GetAmmo");
static_assert(offsetof(SQRearmSource_GetAmmo, ReturnValue) == 0x000000, "Member 'SQRearmSource_GetAmmo::ReturnValue' has a wrong offset!");

// Function Squad.SQRearmSource.GetRearmType
// 0x0001 (0x0001 - 0x0000)
struct SQRearmSource_GetRearmType final
{
public:
	ESQRearmType                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRearmSource_GetRearmType) == 0x000001, "Wrong alignment on SQRearmSource_GetRearmType");
static_assert(sizeof(SQRearmSource_GetRearmType) == 0x000001, "Wrong size on SQRearmSource_GetRearmType");
static_assert(offsetof(SQRearmSource_GetRearmType, ReturnValue) == 0x000000, "Member 'SQRearmSource_GetRearmType::ReturnValue' has a wrong offset!");

// Function Squad.SQRadialDeployableButton.GetDetailText
// 0x0018 (0x0018 - 0x0000)
struct SQRadialDeployableButton_GetDetailText final
{
public:
	class FText                                   DetailText;                                        // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRadialDeployableButton_GetDetailText) == 0x000008, "Wrong alignment on SQRadialDeployableButton_GetDetailText");
static_assert(sizeof(SQRadialDeployableButton_GetDetailText) == 0x000018, "Wrong size on SQRadialDeployableButton_GetDetailText");
static_assert(offsetof(SQRadialDeployableButton_GetDetailText, DetailText) == 0x000000, "Member 'SQRadialDeployableButton_GetDetailText::DetailText' has a wrong offset!");

// Function Squad.SQRadialDeployableButton.IsAvailable
// 0x0001 (0x0001 - 0x0000)
struct SQRadialDeployableButton_IsAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRadialDeployableButton_IsAvailable) == 0x000001, "Wrong alignment on SQRadialDeployableButton_IsAvailable");
static_assert(sizeof(SQRadialDeployableButton_IsAvailable) == 0x000001, "Wrong size on SQRadialDeployableButton_IsAvailable");
static_assert(offsetof(SQRadialDeployableButton_IsAvailable, ReturnValue) == 0x000000, "Member 'SQRadialDeployableButton_IsAvailable::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.ActivateReverbEffectFixed
// 0x0028 (0x0028 - 0x0000)
struct SQBlueprintLibrary_ActivateReverbEffectFixed final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReverbEffect*                          ReverbEffect;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TagName;                                           // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Priority;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA7[0x4];                                      // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_ActivateReverbEffectFixed) == 0x000008, "Wrong alignment on SQBlueprintLibrary_ActivateReverbEffectFixed");
static_assert(sizeof(SQBlueprintLibrary_ActivateReverbEffectFixed) == 0x000028, "Wrong size on SQBlueprintLibrary_ActivateReverbEffectFixed");
static_assert(offsetof(SQBlueprintLibrary_ActivateReverbEffectFixed, WorldContextObject) == 0x000000, "Member 'SQBlueprintLibrary_ActivateReverbEffectFixed::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ActivateReverbEffectFixed, ReverbEffect) == 0x000008, "Member 'SQBlueprintLibrary_ActivateReverbEffectFixed::ReverbEffect' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ActivateReverbEffectFixed, TagName) == 0x000010, "Member 'SQBlueprintLibrary_ActivateReverbEffectFixed::TagName' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ActivateReverbEffectFixed, Priority) == 0x000018, "Member 'SQBlueprintLibrary_ActivateReverbEffectFixed::Priority' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ActivateReverbEffectFixed, Volume) == 0x00001C, "Member 'SQBlueprintLibrary_ActivateReverbEffectFixed::Volume' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ActivateReverbEffectFixed, FadeTime) == 0x000020, "Member 'SQBlueprintLibrary_ActivateReverbEffectFixed::FadeTime' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.AdjustPositionForTextAlignment
// 0x001C (0x001C - 0x0000)
struct SQBlueprintLibrary_AdjustPositionForTextAlignment final
{
public:
	struct FVector2D                              OriginalRenderPosition;                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TextSize;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTextHorizontalAlignment                    HorizontalAlignment;                               // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTextVerticalAlignment                      VerticalAlignment;                                 // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA8[0x2];                                      // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0014(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_AdjustPositionForTextAlignment) == 0x000004, "Wrong alignment on SQBlueprintLibrary_AdjustPositionForTextAlignment");
static_assert(sizeof(SQBlueprintLibrary_AdjustPositionForTextAlignment) == 0x00001C, "Wrong size on SQBlueprintLibrary_AdjustPositionForTextAlignment");
static_assert(offsetof(SQBlueprintLibrary_AdjustPositionForTextAlignment, OriginalRenderPosition) == 0x000000, "Member 'SQBlueprintLibrary_AdjustPositionForTextAlignment::OriginalRenderPosition' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_AdjustPositionForTextAlignment, TextSize) == 0x000008, "Member 'SQBlueprintLibrary_AdjustPositionForTextAlignment::TextSize' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_AdjustPositionForTextAlignment, HorizontalAlignment) == 0x000010, "Member 'SQBlueprintLibrary_AdjustPositionForTextAlignment::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_AdjustPositionForTextAlignment, VerticalAlignment) == 0x000011, "Member 'SQBlueprintLibrary_AdjustPositionForTextAlignment::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_AdjustPositionForTextAlignment, ReturnValue) == 0x000014, "Member 'SQBlueprintLibrary_AdjustPositionForTextAlignment::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.ApplyAcceleration
// 0x0024 (0x0024 - 0x0000)
struct SQBlueprintLibrary_ApplyAcceleration final
{
public:
	float                                         TimeToMid;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Midpoint;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Position;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Velocity;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Acceleration;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewPosition;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewVelocity;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeLeft;                                          // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_ApplyAcceleration) == 0x000004, "Wrong alignment on SQBlueprintLibrary_ApplyAcceleration");
static_assert(sizeof(SQBlueprintLibrary_ApplyAcceleration) == 0x000024, "Wrong size on SQBlueprintLibrary_ApplyAcceleration");
static_assert(offsetof(SQBlueprintLibrary_ApplyAcceleration, TimeToMid) == 0x000000, "Member 'SQBlueprintLibrary_ApplyAcceleration::TimeToMid' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyAcceleration, Midpoint) == 0x000004, "Member 'SQBlueprintLibrary_ApplyAcceleration::Midpoint' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyAcceleration, Position) == 0x000008, "Member 'SQBlueprintLibrary_ApplyAcceleration::Position' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyAcceleration, Velocity) == 0x00000C, "Member 'SQBlueprintLibrary_ApplyAcceleration::Velocity' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyAcceleration, Acceleration) == 0x000010, "Member 'SQBlueprintLibrary_ApplyAcceleration::Acceleration' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyAcceleration, DeltaTime) == 0x000014, "Member 'SQBlueprintLibrary_ApplyAcceleration::DeltaTime' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyAcceleration, NewPosition) == 0x000018, "Member 'SQBlueprintLibrary_ApplyAcceleration::NewPosition' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyAcceleration, NewVelocity) == 0x00001C, "Member 'SQBlueprintLibrary_ApplyAcceleration::NewVelocity' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyAcceleration, TimeLeft) == 0x000020, "Member 'SQBlueprintLibrary_ApplyAcceleration::TimeLeft' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.ApplyDeceleration
// 0x0018 (0x0018 - 0x0000)
struct SQBlueprintLibrary_ApplyDeceleration final
{
public:
	float                                         Position;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Velocity;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Acceleration;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeLeft;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewPosition;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewVelocity;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_ApplyDeceleration) == 0x000004, "Wrong alignment on SQBlueprintLibrary_ApplyDeceleration");
static_assert(sizeof(SQBlueprintLibrary_ApplyDeceleration) == 0x000018, "Wrong size on SQBlueprintLibrary_ApplyDeceleration");
static_assert(offsetof(SQBlueprintLibrary_ApplyDeceleration, Position) == 0x000000, "Member 'SQBlueprintLibrary_ApplyDeceleration::Position' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyDeceleration, Velocity) == 0x000004, "Member 'SQBlueprintLibrary_ApplyDeceleration::Velocity' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyDeceleration, Acceleration) == 0x000008, "Member 'SQBlueprintLibrary_ApplyDeceleration::Acceleration' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyDeceleration, TimeLeft) == 0x00000C, "Member 'SQBlueprintLibrary_ApplyDeceleration::TimeLeft' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyDeceleration, NewPosition) == 0x000010, "Member 'SQBlueprintLibrary_ApplyDeceleration::NewPosition' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyDeceleration, NewVelocity) == 0x000014, "Member 'SQBlueprintLibrary_ApplyDeceleration::NewVelocity' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.ApplyGlobalTimeDilationOnDateTime
// 0x0018 (0x0018 - 0x0000)
struct SQBlueprintLibrary_ApplyGlobalTimeDilationOnDateTime final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              InTime;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_ApplyGlobalTimeDilationOnDateTime) == 0x000008, "Wrong alignment on SQBlueprintLibrary_ApplyGlobalTimeDilationOnDateTime");
static_assert(sizeof(SQBlueprintLibrary_ApplyGlobalTimeDilationOnDateTime) == 0x000018, "Wrong size on SQBlueprintLibrary_ApplyGlobalTimeDilationOnDateTime");
static_assert(offsetof(SQBlueprintLibrary_ApplyGlobalTimeDilationOnDateTime, WorldContextObject) == 0x000000, "Member 'SQBlueprintLibrary_ApplyGlobalTimeDilationOnDateTime::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyGlobalTimeDilationOnDateTime, InTime) == 0x000008, "Member 'SQBlueprintLibrary_ApplyGlobalTimeDilationOnDateTime::InTime' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyGlobalTimeDilationOnDateTime, ReturnValue) == 0x000010, "Member 'SQBlueprintLibrary_ApplyGlobalTimeDilationOnDateTime::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.ApplyGlobalTimeDilationOnTimeSpan
// 0x0018 (0x0018 - 0x0000)
struct SQBlueprintLibrary_ApplyGlobalTimeDilationOnTimeSpan final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              InDelay;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_ApplyGlobalTimeDilationOnTimeSpan) == 0x000008, "Wrong alignment on SQBlueprintLibrary_ApplyGlobalTimeDilationOnTimeSpan");
static_assert(sizeof(SQBlueprintLibrary_ApplyGlobalTimeDilationOnTimeSpan) == 0x000018, "Wrong size on SQBlueprintLibrary_ApplyGlobalTimeDilationOnTimeSpan");
static_assert(offsetof(SQBlueprintLibrary_ApplyGlobalTimeDilationOnTimeSpan, WorldContextObject) == 0x000000, "Member 'SQBlueprintLibrary_ApplyGlobalTimeDilationOnTimeSpan::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyGlobalTimeDilationOnTimeSpan, InDelay) == 0x000008, "Member 'SQBlueprintLibrary_ApplyGlobalTimeDilationOnTimeSpan::InDelay' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyGlobalTimeDilationOnTimeSpan, ReturnValue) == 0x000010, "Member 'SQBlueprintLibrary_ApplyGlobalTimeDilationOnTimeSpan::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.ApplyHitResultRadialDamageWithFalloff
// 0x00E8 (0x00E8 - 0x0000)
struct SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0008(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         BaseDamage;                                        // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumDamage;                                     // 0x0094(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0098(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KillZoneRadius;                                    // 0x00A4(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageInnerRadius;                                 // 0x00A8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageOuterRadius;                                 // 0x00AC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageFalloff;                                     // 0x00B0(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA9[0x4];                                      // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDamageType>                DamageTypeClass;                                   // 0x00B8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x00C0(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x00D0(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedByController;                            // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyDamageMeshes;                                 // 0x00E0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             DamagePreventionChannel;                           // 0x00E1(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E2(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DAA[0x5];                                      // 0x00E3(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff) == 0x000008, "Wrong alignment on SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff");
static_assert(sizeof(SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff) == 0x0000E8, "Wrong size on SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff");
static_assert(offsetof(SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff, WorldContextObject) == 0x000000, "Member 'SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff, HitResult) == 0x000008, "Member 'SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff::HitResult' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff, BaseDamage) == 0x000090, "Member 'SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff::BaseDamage' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff, MinimumDamage) == 0x000094, "Member 'SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff::MinimumDamage' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff, Origin) == 0x000098, "Member 'SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff::Origin' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff, KillZoneRadius) == 0x0000A4, "Member 'SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff::KillZoneRadius' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff, DamageInnerRadius) == 0x0000A8, "Member 'SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff::DamageInnerRadius' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff, DamageOuterRadius) == 0x0000AC, "Member 'SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff::DamageOuterRadius' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff, DamageFalloff) == 0x0000B0, "Member 'SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff::DamageFalloff' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff, DamageTypeClass) == 0x0000B8, "Member 'SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff, IgnoreActors) == 0x0000C0, "Member 'SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff::IgnoreActors' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff, DamageCauser) == 0x0000D0, "Member 'SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff::DamageCauser' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff, InstigatedByController) == 0x0000D8, "Member 'SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff::InstigatedByController' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff, bOnlyDamageMeshes) == 0x0000E0, "Member 'SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff::bOnlyDamageMeshes' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff, DamagePreventionChannel) == 0x0000E1, "Member 'SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff::DamagePreventionChannel' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff, ReturnValue) == 0x0000E2, "Member 'SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.ApplyOppositeAcceleration
// 0x0020 (0x0020 - 0x0000)
struct SQBlueprintLibrary_ApplyOppositeAcceleration final
{
public:
	float                                         Target;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Position;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Velocity;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OppositeAcceleration;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewPosition;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewVelocity;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeLeft;                                          // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_ApplyOppositeAcceleration) == 0x000004, "Wrong alignment on SQBlueprintLibrary_ApplyOppositeAcceleration");
static_assert(sizeof(SQBlueprintLibrary_ApplyOppositeAcceleration) == 0x000020, "Wrong size on SQBlueprintLibrary_ApplyOppositeAcceleration");
static_assert(offsetof(SQBlueprintLibrary_ApplyOppositeAcceleration, Target) == 0x000000, "Member 'SQBlueprintLibrary_ApplyOppositeAcceleration::Target' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyOppositeAcceleration, Position) == 0x000004, "Member 'SQBlueprintLibrary_ApplyOppositeAcceleration::Position' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyOppositeAcceleration, Velocity) == 0x000008, "Member 'SQBlueprintLibrary_ApplyOppositeAcceleration::Velocity' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyOppositeAcceleration, OppositeAcceleration) == 0x00000C, "Member 'SQBlueprintLibrary_ApplyOppositeAcceleration::OppositeAcceleration' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyOppositeAcceleration, DeltaTime) == 0x000010, "Member 'SQBlueprintLibrary_ApplyOppositeAcceleration::DeltaTime' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyOppositeAcceleration, NewPosition) == 0x000014, "Member 'SQBlueprintLibrary_ApplyOppositeAcceleration::NewPosition' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyOppositeAcceleration, NewVelocity) == 0x000018, "Member 'SQBlueprintLibrary_ApplyOppositeAcceleration::NewVelocity' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyOppositeAcceleration, TimeLeft) == 0x00001C, "Member 'SQBlueprintLibrary_ApplyOppositeAcceleration::TimeLeft' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.ApplyRadialDamageWithFalloff
// 0x0060 (0x0060 - 0x0000)
struct SQBlueprintLibrary_ApplyRadialDamageWithFalloff final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseDamage;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumDamage;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KillZoneRadius;                                    // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageInnerRadius;                                 // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageOuterRadius;                                 // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageFalloff;                                     // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DAB[0x4];                                      // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDamageType>                DamageTypeClass;                                   // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatedByController;                            // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyDamageMeshes;                                 // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             DamagePreventionChannel;                           // 0x0059(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x005A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DAC[0x5];                                      // 0x005B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_ApplyRadialDamageWithFalloff) == 0x000008, "Wrong alignment on SQBlueprintLibrary_ApplyRadialDamageWithFalloff");
static_assert(sizeof(SQBlueprintLibrary_ApplyRadialDamageWithFalloff) == 0x000060, "Wrong size on SQBlueprintLibrary_ApplyRadialDamageWithFalloff");
static_assert(offsetof(SQBlueprintLibrary_ApplyRadialDamageWithFalloff, WorldContextObject) == 0x000000, "Member 'SQBlueprintLibrary_ApplyRadialDamageWithFalloff::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyRadialDamageWithFalloff, BaseDamage) == 0x000008, "Member 'SQBlueprintLibrary_ApplyRadialDamageWithFalloff::BaseDamage' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyRadialDamageWithFalloff, MinimumDamage) == 0x00000C, "Member 'SQBlueprintLibrary_ApplyRadialDamageWithFalloff::MinimumDamage' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyRadialDamageWithFalloff, Origin) == 0x000010, "Member 'SQBlueprintLibrary_ApplyRadialDamageWithFalloff::Origin' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyRadialDamageWithFalloff, KillZoneRadius) == 0x00001C, "Member 'SQBlueprintLibrary_ApplyRadialDamageWithFalloff::KillZoneRadius' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyRadialDamageWithFalloff, DamageInnerRadius) == 0x000020, "Member 'SQBlueprintLibrary_ApplyRadialDamageWithFalloff::DamageInnerRadius' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyRadialDamageWithFalloff, DamageOuterRadius) == 0x000024, "Member 'SQBlueprintLibrary_ApplyRadialDamageWithFalloff::DamageOuterRadius' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyRadialDamageWithFalloff, DamageFalloff) == 0x000028, "Member 'SQBlueprintLibrary_ApplyRadialDamageWithFalloff::DamageFalloff' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyRadialDamageWithFalloff, DamageTypeClass) == 0x000030, "Member 'SQBlueprintLibrary_ApplyRadialDamageWithFalloff::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyRadialDamageWithFalloff, IgnoreActors) == 0x000038, "Member 'SQBlueprintLibrary_ApplyRadialDamageWithFalloff::IgnoreActors' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyRadialDamageWithFalloff, DamageCauser) == 0x000048, "Member 'SQBlueprintLibrary_ApplyRadialDamageWithFalloff::DamageCauser' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyRadialDamageWithFalloff, InstigatedByController) == 0x000050, "Member 'SQBlueprintLibrary_ApplyRadialDamageWithFalloff::InstigatedByController' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyRadialDamageWithFalloff, bOnlyDamageMeshes) == 0x000058, "Member 'SQBlueprintLibrary_ApplyRadialDamageWithFalloff::bOnlyDamageMeshes' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyRadialDamageWithFalloff, DamagePreventionChannel) == 0x000059, "Member 'SQBlueprintLibrary_ApplyRadialDamageWithFalloff::DamagePreventionChannel' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyRadialDamageWithFalloff, ReturnValue) == 0x00005A, "Member 'SQBlueprintLibrary_ApplyRadialDamageWithFalloff::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.ApplyTimeDilationFactorOnDateTime
// 0x0018 (0x0018 - 0x0000)
struct SQBlueprintLibrary_ApplyTimeDilationFactorOnDateTime final
{
public:
	struct FDateTime                              InTime;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTimeDilationFactor;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DAD[0x4];                                      // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_ApplyTimeDilationFactorOnDateTime) == 0x000008, "Wrong alignment on SQBlueprintLibrary_ApplyTimeDilationFactorOnDateTime");
static_assert(sizeof(SQBlueprintLibrary_ApplyTimeDilationFactorOnDateTime) == 0x000018, "Wrong size on SQBlueprintLibrary_ApplyTimeDilationFactorOnDateTime");
static_assert(offsetof(SQBlueprintLibrary_ApplyTimeDilationFactorOnDateTime, InTime) == 0x000000, "Member 'SQBlueprintLibrary_ApplyTimeDilationFactorOnDateTime::InTime' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyTimeDilationFactorOnDateTime, InTimeDilationFactor) == 0x000008, "Member 'SQBlueprintLibrary_ApplyTimeDilationFactorOnDateTime::InTimeDilationFactor' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyTimeDilationFactorOnDateTime, ReturnValue) == 0x000010, "Member 'SQBlueprintLibrary_ApplyTimeDilationFactorOnDateTime::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.ApplyTimeDilationFactorOnTimeSpan
// 0x0018 (0x0018 - 0x0000)
struct SQBlueprintLibrary_ApplyTimeDilationFactorOnTimeSpan final
{
public:
	struct FTimespan                              InDelay;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTimeDilationFactor;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DAE[0x4];                                      // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_ApplyTimeDilationFactorOnTimeSpan) == 0x000008, "Wrong alignment on SQBlueprintLibrary_ApplyTimeDilationFactorOnTimeSpan");
static_assert(sizeof(SQBlueprintLibrary_ApplyTimeDilationFactorOnTimeSpan) == 0x000018, "Wrong size on SQBlueprintLibrary_ApplyTimeDilationFactorOnTimeSpan");
static_assert(offsetof(SQBlueprintLibrary_ApplyTimeDilationFactorOnTimeSpan, InDelay) == 0x000000, "Member 'SQBlueprintLibrary_ApplyTimeDilationFactorOnTimeSpan::InDelay' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyTimeDilationFactorOnTimeSpan, InTimeDilationFactor) == 0x000008, "Member 'SQBlueprintLibrary_ApplyTimeDilationFactorOnTimeSpan::InTimeDilationFactor' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ApplyTimeDilationFactorOnTimeSpan, ReturnValue) == 0x000010, "Member 'SQBlueprintLibrary_ApplyTimeDilationFactorOnTimeSpan::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.AssembleSoldierAudioParameters
// 0x0020 (0x0020 - 0x0000)
struct SQBlueprintLibrary_AssembleSoldierAudioParameters final
{
public:
	const class ASQSoldier*                       Soldier;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetSpeedParameter;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetFloorPhysMatParameter;                         // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetWaterDepthParameter;                           // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DAF[0x5];                                      // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAudioComponentParam>           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_AssembleSoldierAudioParameters) == 0x000008, "Wrong alignment on SQBlueprintLibrary_AssembleSoldierAudioParameters");
static_assert(sizeof(SQBlueprintLibrary_AssembleSoldierAudioParameters) == 0x000020, "Wrong size on SQBlueprintLibrary_AssembleSoldierAudioParameters");
static_assert(offsetof(SQBlueprintLibrary_AssembleSoldierAudioParameters, Soldier) == 0x000000, "Member 'SQBlueprintLibrary_AssembleSoldierAudioParameters::Soldier' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_AssembleSoldierAudioParameters, bSetSpeedParameter) == 0x000008, "Member 'SQBlueprintLibrary_AssembleSoldierAudioParameters::bSetSpeedParameter' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_AssembleSoldierAudioParameters, bSetFloorPhysMatParameter) == 0x000009, "Member 'SQBlueprintLibrary_AssembleSoldierAudioParameters::bSetFloorPhysMatParameter' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_AssembleSoldierAudioParameters, bSetWaterDepthParameter) == 0x00000A, "Member 'SQBlueprintLibrary_AssembleSoldierAudioParameters::bSetWaterDepthParameter' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_AssembleSoldierAudioParameters, ReturnValue) == 0x000010, "Member 'SQBlueprintLibrary_AssembleSoldierAudioParameters::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.AsyncLoadClass
// 0x0038 (0x0038 - 0x0000)
struct SQBlueprintLibrary_AsyncLoadClass final
{
public:
	TSoftClassPtr<class UClass>                   Param_Class;                                       // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(TSoftClassPtr<class UClass> Class)> OnLoad;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_AsyncLoadClass) == 0x000008, "Wrong alignment on SQBlueprintLibrary_AsyncLoadClass");
static_assert(sizeof(SQBlueprintLibrary_AsyncLoadClass) == 0x000038, "Wrong size on SQBlueprintLibrary_AsyncLoadClass");
static_assert(offsetof(SQBlueprintLibrary_AsyncLoadClass, Param_Class) == 0x000000, "Member 'SQBlueprintLibrary_AsyncLoadClass::Param_Class' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_AsyncLoadClass, OnLoad) == 0x000028, "Member 'SQBlueprintLibrary_AsyncLoadClass::OnLoad' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.AsyncLoadClasses
// 0x0020 (0x0020 - 0x0000)
struct SQBlueprintLibrary_AsyncLoadClasses final
{
public:
	TArray<TSoftClassPtr<class UClass>>           Classes;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TDelegate<void(TArray<TSoftClassPtr<class UClass>>& Classes)> OnLoad;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_AsyncLoadClasses) == 0x000008, "Wrong alignment on SQBlueprintLibrary_AsyncLoadClasses");
static_assert(sizeof(SQBlueprintLibrary_AsyncLoadClasses) == 0x000020, "Wrong size on SQBlueprintLibrary_AsyncLoadClasses");
static_assert(offsetof(SQBlueprintLibrary_AsyncLoadClasses, Classes) == 0x000000, "Member 'SQBlueprintLibrary_AsyncLoadClasses::Classes' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_AsyncLoadClasses, OnLoad) == 0x000010, "Member 'SQBlueprintLibrary_AsyncLoadClasses::OnLoad' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.BreakFullHitResult
// 0x0108 (0x0108 - 0x0000)
struct SQBlueprintLibrary_BreakFullHitResult final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0088(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0094(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpactPoint;                                       // 0x00A0(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpactNormal;                                      // 0x00AC(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceStart;                                        // 0x00B8(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TraceEnd;                                          // 0x00C4(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockingHit;                                      // 0x00D0(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartPenetrating;                                 // 0x00D1(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB0[0x2];                                      // 0x00D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PenetrationDepth;                                  // 0x00D4(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x00D8(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB1[0x4];                                      // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      PhysMat;                                           // 0x00E0(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 HitActor;                                          // 0x00E8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    HitComponent;                                      // 0x00F0(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HitBoneName;                                       // 0x00F8(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitItem;                                           // 0x0100(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitFaceIndex;                                      // 0x0104(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_BreakFullHitResult) == 0x000008, "Wrong alignment on SQBlueprintLibrary_BreakFullHitResult");
static_assert(sizeof(SQBlueprintLibrary_BreakFullHitResult) == 0x000108, "Wrong size on SQBlueprintLibrary_BreakFullHitResult");
static_assert(offsetof(SQBlueprintLibrary_BreakFullHitResult, Hit) == 0x000000, "Member 'SQBlueprintLibrary_BreakFullHitResult::Hit' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_BreakFullHitResult, Location) == 0x000088, "Member 'SQBlueprintLibrary_BreakFullHitResult::Location' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_BreakFullHitResult, Normal) == 0x000094, "Member 'SQBlueprintLibrary_BreakFullHitResult::Normal' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_BreakFullHitResult, ImpactPoint) == 0x0000A0, "Member 'SQBlueprintLibrary_BreakFullHitResult::ImpactPoint' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_BreakFullHitResult, ImpactNormal) == 0x0000AC, "Member 'SQBlueprintLibrary_BreakFullHitResult::ImpactNormal' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_BreakFullHitResult, TraceStart) == 0x0000B8, "Member 'SQBlueprintLibrary_BreakFullHitResult::TraceStart' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_BreakFullHitResult, TraceEnd) == 0x0000C4, "Member 'SQBlueprintLibrary_BreakFullHitResult::TraceEnd' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_BreakFullHitResult, bBlockingHit) == 0x0000D0, "Member 'SQBlueprintLibrary_BreakFullHitResult::bBlockingHit' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_BreakFullHitResult, bStartPenetrating) == 0x0000D1, "Member 'SQBlueprintLibrary_BreakFullHitResult::bStartPenetrating' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_BreakFullHitResult, PenetrationDepth) == 0x0000D4, "Member 'SQBlueprintLibrary_BreakFullHitResult::PenetrationDepth' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_BreakFullHitResult, Time) == 0x0000D8, "Member 'SQBlueprintLibrary_BreakFullHitResult::Time' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_BreakFullHitResult, PhysMat) == 0x0000E0, "Member 'SQBlueprintLibrary_BreakFullHitResult::PhysMat' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_BreakFullHitResult, HitActor) == 0x0000E8, "Member 'SQBlueprintLibrary_BreakFullHitResult::HitActor' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_BreakFullHitResult, HitComponent) == 0x0000F0, "Member 'SQBlueprintLibrary_BreakFullHitResult::HitComponent' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_BreakFullHitResult, HitBoneName) == 0x0000F8, "Member 'SQBlueprintLibrary_BreakFullHitResult::HitBoneName' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_BreakFullHitResult, HitItem) == 0x000100, "Member 'SQBlueprintLibrary_BreakFullHitResult::HitItem' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_BreakFullHitResult, HitFaceIndex) == 0x000104, "Member 'SQBlueprintLibrary_BreakFullHitResult::HitFaceIndex' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.BreakInputActionKeyMapping
// 0x0050 (0x0050 - 0x0000)
struct SQBlueprintLibrary_BreakInputActionKeyMapping final
{
public:
	struct FInputActionKeyMapping                 KeyMapping;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0030(0x0018)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShift;                                            // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCtrl;                                             // 0x0049(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlt;                                              // 0x004A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCmd;                                              // 0x004B(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB2[0x4];                                      // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_BreakInputActionKeyMapping) == 0x000008, "Wrong alignment on SQBlueprintLibrary_BreakInputActionKeyMapping");
static_assert(sizeof(SQBlueprintLibrary_BreakInputActionKeyMapping) == 0x000050, "Wrong size on SQBlueprintLibrary_BreakInputActionKeyMapping");
static_assert(offsetof(SQBlueprintLibrary_BreakInputActionKeyMapping, KeyMapping) == 0x000000, "Member 'SQBlueprintLibrary_BreakInputActionKeyMapping::KeyMapping' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_BreakInputActionKeyMapping, ActionName) == 0x000028, "Member 'SQBlueprintLibrary_BreakInputActionKeyMapping::ActionName' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_BreakInputActionKeyMapping, Key) == 0x000030, "Member 'SQBlueprintLibrary_BreakInputActionKeyMapping::Key' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_BreakInputActionKeyMapping, bShift) == 0x000048, "Member 'SQBlueprintLibrary_BreakInputActionKeyMapping::bShift' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_BreakInputActionKeyMapping, bCtrl) == 0x000049, "Member 'SQBlueprintLibrary_BreakInputActionKeyMapping::bCtrl' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_BreakInputActionKeyMapping, bAlt) == 0x00004A, "Member 'SQBlueprintLibrary_BreakInputActionKeyMapping::bAlt' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_BreakInputActionKeyMapping, bCmd) == 0x00004B, "Member 'SQBlueprintLibrary_BreakInputActionKeyMapping::bCmd' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.BreakInputAxisKeyMapping
// 0x0050 (0x0050 - 0x0000)
struct SQBlueprintLibrary_BreakInputAxisKeyMapping final
{
public:
	struct FInputAxisKeyMapping                   KeyMapping;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0030(0x0018)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB3[0x4];                                      // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_BreakInputAxisKeyMapping) == 0x000008, "Wrong alignment on SQBlueprintLibrary_BreakInputAxisKeyMapping");
static_assert(sizeof(SQBlueprintLibrary_BreakInputAxisKeyMapping) == 0x000050, "Wrong size on SQBlueprintLibrary_BreakInputAxisKeyMapping");
static_assert(offsetof(SQBlueprintLibrary_BreakInputAxisKeyMapping, KeyMapping) == 0x000000, "Member 'SQBlueprintLibrary_BreakInputAxisKeyMapping::KeyMapping' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_BreakInputAxisKeyMapping, ActionName) == 0x000028, "Member 'SQBlueprintLibrary_BreakInputAxisKeyMapping::ActionName' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_BreakInputAxisKeyMapping, Key) == 0x000030, "Member 'SQBlueprintLibrary_BreakInputAxisKeyMapping::Key' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_BreakInputAxisKeyMapping, Scale) == 0x000048, "Member 'SQBlueprintLibrary_BreakInputAxisKeyMapping::Scale' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.CalcMidpoint
// 0x0014 (0x0014 - 0x0000)
struct SQBlueprintLibrary_CalcMidpoint final
{
public:
	float                                         Target;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Position;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Velocity;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Acceleration;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Midpoint;                                          // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_CalcMidpoint) == 0x000004, "Wrong alignment on SQBlueprintLibrary_CalcMidpoint");
static_assert(sizeof(SQBlueprintLibrary_CalcMidpoint) == 0x000014, "Wrong size on SQBlueprintLibrary_CalcMidpoint");
static_assert(offsetof(SQBlueprintLibrary_CalcMidpoint, Target) == 0x000000, "Member 'SQBlueprintLibrary_CalcMidpoint::Target' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_CalcMidpoint, Position) == 0x000004, "Member 'SQBlueprintLibrary_CalcMidpoint::Position' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_CalcMidpoint, Velocity) == 0x000008, "Member 'SQBlueprintLibrary_CalcMidpoint::Velocity' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_CalcMidpoint, Acceleration) == 0x00000C, "Member 'SQBlueprintLibrary_CalcMidpoint::Acceleration' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_CalcMidpoint, Midpoint) == 0x000010, "Member 'SQBlueprintLibrary_CalcMidpoint::Midpoint' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.CalcTimeToMid
// 0x0014 (0x0014 - 0x0000)
struct SQBlueprintLibrary_CalcTimeToMid final
{
public:
	float                                         Midpoint;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Position;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Velocity;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Acceleration;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToMid;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_CalcTimeToMid) == 0x000004, "Wrong alignment on SQBlueprintLibrary_CalcTimeToMid");
static_assert(sizeof(SQBlueprintLibrary_CalcTimeToMid) == 0x000014, "Wrong size on SQBlueprintLibrary_CalcTimeToMid");
static_assert(offsetof(SQBlueprintLibrary_CalcTimeToMid, Midpoint) == 0x000000, "Member 'SQBlueprintLibrary_CalcTimeToMid::Midpoint' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_CalcTimeToMid, Position) == 0x000004, "Member 'SQBlueprintLibrary_CalcTimeToMid::Position' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_CalcTimeToMid, Velocity) == 0x000008, "Member 'SQBlueprintLibrary_CalcTimeToMid::Velocity' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_CalcTimeToMid, Acceleration) == 0x00000C, "Member 'SQBlueprintLibrary_CalcTimeToMid::Acceleration' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_CalcTimeToMid, TimeToMid) == 0x000010, "Member 'SQBlueprintLibrary_CalcTimeToMid::TimeToMid' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.CalculateAmmoCostToSwapRole
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_CalculateAmmoCostToSwapRole final
{
public:
	const class USQRoleSettings*                  NewRole;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB4[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_CalculateAmmoCostToSwapRole) == 0x000008, "Wrong alignment on SQBlueprintLibrary_CalculateAmmoCostToSwapRole");
static_assert(sizeof(SQBlueprintLibrary_CalculateAmmoCostToSwapRole) == 0x000010, "Wrong size on SQBlueprintLibrary_CalculateAmmoCostToSwapRole");
static_assert(offsetof(SQBlueprintLibrary_CalculateAmmoCostToSwapRole, NewRole) == 0x000000, "Member 'SQBlueprintLibrary_CalculateAmmoCostToSwapRole::NewRole' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_CalculateAmmoCostToSwapRole, ReturnValue) == 0x000008, "Member 'SQBlueprintLibrary_CalculateAmmoCostToSwapRole::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.CaptureComponent2D_DeProject
// 0x0028 (0x0028 - 0x0000)
struct SQBlueprintLibrary_CaptureComponent2D_DeProject final
{
public:
	class USceneCaptureComponent2D*               Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScreenPos;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutWorldOrigin;                                    // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutWorldDirection;                                 // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_CaptureComponent2D_DeProject) == 0x000008, "Wrong alignment on SQBlueprintLibrary_CaptureComponent2D_DeProject");
static_assert(sizeof(SQBlueprintLibrary_CaptureComponent2D_DeProject) == 0x000028, "Wrong size on SQBlueprintLibrary_CaptureComponent2D_DeProject");
static_assert(offsetof(SQBlueprintLibrary_CaptureComponent2D_DeProject, Target) == 0x000000, "Member 'SQBlueprintLibrary_CaptureComponent2D_DeProject::Target' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_CaptureComponent2D_DeProject, ScreenPos) == 0x000008, "Member 'SQBlueprintLibrary_CaptureComponent2D_DeProject::ScreenPos' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_CaptureComponent2D_DeProject, OutWorldOrigin) == 0x000010, "Member 'SQBlueprintLibrary_CaptureComponent2D_DeProject::OutWorldOrigin' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_CaptureComponent2D_DeProject, OutWorldDirection) == 0x00001C, "Member 'SQBlueprintLibrary_CaptureComponent2D_DeProject::OutWorldDirection' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.CaptureComponent2D_Project
// 0x0020 (0x0020 - 0x0000)
struct SQBlueprintLibrary_CaptureComponent2D_Project final
{
public:
	class USceneCaptureComponent2D*               Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutPixelLocation;                                  // 0x0014(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB5[0x3];                                      // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_CaptureComponent2D_Project) == 0x000008, "Wrong alignment on SQBlueprintLibrary_CaptureComponent2D_Project");
static_assert(sizeof(SQBlueprintLibrary_CaptureComponent2D_Project) == 0x000020, "Wrong size on SQBlueprintLibrary_CaptureComponent2D_Project");
static_assert(offsetof(SQBlueprintLibrary_CaptureComponent2D_Project, Target) == 0x000000, "Member 'SQBlueprintLibrary_CaptureComponent2D_Project::Target' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_CaptureComponent2D_Project, Location) == 0x000008, "Member 'SQBlueprintLibrary_CaptureComponent2D_Project::Location' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_CaptureComponent2D_Project, OutPixelLocation) == 0x000014, "Member 'SQBlueprintLibrary_CaptureComponent2D_Project::OutPixelLocation' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_CaptureComponent2D_Project, ReturnValue) == 0x00001C, "Member 'SQBlueprintLibrary_CaptureComponent2D_Project::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.CenterMousePosition
// 0x0008 (0x0008 - 0x0000)
struct SQBlueprintLibrary_CenterMousePosition final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_CenterMousePosition) == 0x000008, "Wrong alignment on SQBlueprintLibrary_CenterMousePosition");
static_assert(sizeof(SQBlueprintLibrary_CenterMousePosition) == 0x000008, "Wrong size on SQBlueprintLibrary_CenterMousePosition");
static_assert(offsetof(SQBlueprintLibrary_CenterMousePosition, WorldContextObject) == 0x000000, "Member 'SQBlueprintLibrary_CenterMousePosition::WorldContextObject' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.ClampDelta
// 0x0014 (0x0014 - 0x0000)
struct SQBlueprintLibrary_ClampDelta final
{
public:
	float                                         InDelta;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Current;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_ClampDelta) == 0x000004, "Wrong alignment on SQBlueprintLibrary_ClampDelta");
static_assert(sizeof(SQBlueprintLibrary_ClampDelta) == 0x000014, "Wrong size on SQBlueprintLibrary_ClampDelta");
static_assert(offsetof(SQBlueprintLibrary_ClampDelta, InDelta) == 0x000000, "Member 'SQBlueprintLibrary_ClampDelta::InDelta' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ClampDelta, Current) == 0x000004, "Member 'SQBlueprintLibrary_ClampDelta::Current' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ClampDelta, Min) == 0x000008, "Member 'SQBlueprintLibrary_ClampDelta::Min' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ClampDelta, Max) == 0x00000C, "Member 'SQBlueprintLibrary_ClampDelta::Max' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ClampDelta, ReturnValue) == 0x000010, "Member 'SQBlueprintLibrary_ClampDelta::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.ClampDeltaAngle
// 0x0014 (0x0014 - 0x0000)
struct SQBlueprintLibrary_ClampDeltaAngle final
{
public:
	float                                         InDeltaAngle;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentAngle;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAngle;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngle;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_ClampDeltaAngle) == 0x000004, "Wrong alignment on SQBlueprintLibrary_ClampDeltaAngle");
static_assert(sizeof(SQBlueprintLibrary_ClampDeltaAngle) == 0x000014, "Wrong size on SQBlueprintLibrary_ClampDeltaAngle");
static_assert(offsetof(SQBlueprintLibrary_ClampDeltaAngle, InDeltaAngle) == 0x000000, "Member 'SQBlueprintLibrary_ClampDeltaAngle::InDeltaAngle' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ClampDeltaAngle, CurrentAngle) == 0x000004, "Member 'SQBlueprintLibrary_ClampDeltaAngle::CurrentAngle' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ClampDeltaAngle, MinAngle) == 0x000008, "Member 'SQBlueprintLibrary_ClampDeltaAngle::MinAngle' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ClampDeltaAngle, MaxAngle) == 0x00000C, "Member 'SQBlueprintLibrary_ClampDeltaAngle::MaxAngle' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ClampDeltaAngle, ReturnValue) == 0x000010, "Member 'SQBlueprintLibrary_ClampDeltaAngle::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.ClampVector
// 0x0024 (0x0024 - 0x0000)
struct SQBlueprintLibrary_ClampVector final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Min;                                               // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Max;                                               // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_ClampVector) == 0x000004, "Wrong alignment on SQBlueprintLibrary_ClampVector");
static_assert(sizeof(SQBlueprintLibrary_ClampVector) == 0x000024, "Wrong size on SQBlueprintLibrary_ClampVector");
static_assert(offsetof(SQBlueprintLibrary_ClampVector, Vector) == 0x000000, "Member 'SQBlueprintLibrary_ClampVector::Vector' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ClampVector, Min) == 0x00000C, "Member 'SQBlueprintLibrary_ClampVector::Min' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ClampVector, Max) == 0x000018, "Member 'SQBlueprintLibrary_ClampVector::Max' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.ClassIsChildOfSoft
// 0x0038 (0x0038 - 0x0000)
struct SQBlueprintLibrary_ClassIsChildOfSoft final
{
public:
	TSubclassOf<class UObject>                    TestClass;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SoftParentClass;                                   // 0x0008(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB6[0x7];                                      // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_ClassIsChildOfSoft) == 0x000008, "Wrong alignment on SQBlueprintLibrary_ClassIsChildOfSoft");
static_assert(sizeof(SQBlueprintLibrary_ClassIsChildOfSoft) == 0x000038, "Wrong size on SQBlueprintLibrary_ClassIsChildOfSoft");
static_assert(offsetof(SQBlueprintLibrary_ClassIsChildOfSoft, TestClass) == 0x000000, "Member 'SQBlueprintLibrary_ClassIsChildOfSoft::TestClass' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ClassIsChildOfSoft, SoftParentClass) == 0x000008, "Member 'SQBlueprintLibrary_ClassIsChildOfSoft::SoftParentClass' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ClassIsChildOfSoft, ReturnValue) == 0x000030, "Member 'SQBlueprintLibrary_ClassIsChildOfSoft::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.ClosestPointOnLine
// 0x0030 (0x0030 - 0x0000)
struct SQBlueprintLibrary_ClosestPointOnLine final
{
public:
	struct FVector                                LineStart;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LineEnd;                                           // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Point;                                             // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0024(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_ClosestPointOnLine) == 0x000004, "Wrong alignment on SQBlueprintLibrary_ClosestPointOnLine");
static_assert(sizeof(SQBlueprintLibrary_ClosestPointOnLine) == 0x000030, "Wrong size on SQBlueprintLibrary_ClosestPointOnLine");
static_assert(offsetof(SQBlueprintLibrary_ClosestPointOnLine, LineStart) == 0x000000, "Member 'SQBlueprintLibrary_ClosestPointOnLine::LineStart' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ClosestPointOnLine, LineEnd) == 0x00000C, "Member 'SQBlueprintLibrary_ClosestPointOnLine::LineEnd' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ClosestPointOnLine, Point) == 0x000018, "Member 'SQBlueprintLibrary_ClosestPointOnLine::Point' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ClosestPointOnLine, ReturnValue) == 0x000024, "Member 'SQBlueprintLibrary_ClosestPointOnLine::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.ComponentIsDamageableFrom
// 0x00C0 (0x00C0 - 0x0000)
struct SQBlueprintLibrary_ComponentIsDamageableFrom final
{
public:
	class UPrimitiveComponent*                    VictimComp;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Origin;                                            // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB7[0x4];                                      // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 IgnoredActor;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FHitResult                             OutHitResult;                                      // 0x0030(0x0088)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B8(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB8[0x7];                                      // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_ComponentIsDamageableFrom) == 0x000008, "Wrong alignment on SQBlueprintLibrary_ComponentIsDamageableFrom");
static_assert(sizeof(SQBlueprintLibrary_ComponentIsDamageableFrom) == 0x0000C0, "Wrong size on SQBlueprintLibrary_ComponentIsDamageableFrom");
static_assert(offsetof(SQBlueprintLibrary_ComponentIsDamageableFrom, VictimComp) == 0x000000, "Member 'SQBlueprintLibrary_ComponentIsDamageableFrom::VictimComp' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ComponentIsDamageableFrom, Origin) == 0x000008, "Member 'SQBlueprintLibrary_ComponentIsDamageableFrom::Origin' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ComponentIsDamageableFrom, IgnoredActor) == 0x000018, "Member 'SQBlueprintLibrary_ComponentIsDamageableFrom::IgnoredActor' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ComponentIsDamageableFrom, IgnoreActors) == 0x000020, "Member 'SQBlueprintLibrary_ComponentIsDamageableFrom::IgnoreActors' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ComponentIsDamageableFrom, OutHitResult) == 0x000030, "Member 'SQBlueprintLibrary_ComponentIsDamageableFrom::OutHitResult' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ComponentIsDamageableFrom, ReturnValue) == 0x0000B8, "Member 'SQBlueprintLibrary_ComponentIsDamageableFrom::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.ConvertByteTo
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_ConvertByteTo final
{
public:
	int32                                         A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQByteUnit                                   From;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQByteUnit                                   To;                                                // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB9[0x2];                                      // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Remaining;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_ConvertByteTo) == 0x000004, "Wrong alignment on SQBlueprintLibrary_ConvertByteTo");
static_assert(sizeof(SQBlueprintLibrary_ConvertByteTo) == 0x000010, "Wrong size on SQBlueprintLibrary_ConvertByteTo");
static_assert(offsetof(SQBlueprintLibrary_ConvertByteTo, A) == 0x000000, "Member 'SQBlueprintLibrary_ConvertByteTo::A' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ConvertByteTo, From) == 0x000004, "Member 'SQBlueprintLibrary_ConvertByteTo::From' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ConvertByteTo, To) == 0x000005, "Member 'SQBlueprintLibrary_ConvertByteTo::To' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ConvertByteTo, Remaining) == 0x000008, "Member 'SQBlueprintLibrary_ConvertByteTo::Remaining' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ConvertByteTo, ReturnValue) == 0x00000C, "Member 'SQBlueprintLibrary_ConvertByteTo::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.ConvertByteTo_I64
// 0x0020 (0x0020 - 0x0000)
struct SQBlueprintLibrary_ConvertByteTo_I64 final
{
public:
	int64                                         A;                                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQByteUnit                                   From;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQByteUnit                                   To;                                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DBA[0x6];                                      // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         Remaining;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_ConvertByteTo_I64) == 0x000008, "Wrong alignment on SQBlueprintLibrary_ConvertByteTo_I64");
static_assert(sizeof(SQBlueprintLibrary_ConvertByteTo_I64) == 0x000020, "Wrong size on SQBlueprintLibrary_ConvertByteTo_I64");
static_assert(offsetof(SQBlueprintLibrary_ConvertByteTo_I64, A) == 0x000000, "Member 'SQBlueprintLibrary_ConvertByteTo_I64::A' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ConvertByteTo_I64, From) == 0x000008, "Member 'SQBlueprintLibrary_ConvertByteTo_I64::From' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ConvertByteTo_I64, To) == 0x000009, "Member 'SQBlueprintLibrary_ConvertByteTo_I64::To' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ConvertByteTo_I64, Remaining) == 0x000010, "Member 'SQBlueprintLibrary_ConvertByteTo_I64::Remaining' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ConvertByteTo_I64, ReturnValue) == 0x000018, "Member 'SQBlueprintLibrary_ConvertByteTo_I64::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.ConvertNumberToGridLetter
// 0x0018 (0x0018 - 0x0000)
struct SQBlueprintLibrary_ConvertNumberToGridLetter final
{
public:
	class FString                                 OutResult;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DBB[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_ConvertNumberToGridLetter) == 0x000008, "Wrong alignment on SQBlueprintLibrary_ConvertNumberToGridLetter");
static_assert(sizeof(SQBlueprintLibrary_ConvertNumberToGridLetter) == 0x000018, "Wrong size on SQBlueprintLibrary_ConvertNumberToGridLetter");
static_assert(offsetof(SQBlueprintLibrary_ConvertNumberToGridLetter, OutResult) == 0x000000, "Member 'SQBlueprintLibrary_ConvertNumberToGridLetter::OutResult' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_ConvertNumberToGridLetter, Value) == 0x000010, "Member 'SQBlueprintLibrary_ConvertNumberToGridLetter::Value' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.CreateRenderTargetCube
// 0x0030 (0x0030 - 0x0000)
struct SQBlueprintLibrary_CreateRenderTargetCube final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Size;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPixelFormat                                  Format;                                            // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DBC[0x3];                                      // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ClearColor;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHDR;                                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceLinearGamma;                                 // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DBD[0x6];                                      // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTargetCube*               ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_CreateRenderTargetCube) == 0x000008, "Wrong alignment on SQBlueprintLibrary_CreateRenderTargetCube");
static_assert(sizeof(SQBlueprintLibrary_CreateRenderTargetCube) == 0x000030, "Wrong size on SQBlueprintLibrary_CreateRenderTargetCube");
static_assert(offsetof(SQBlueprintLibrary_CreateRenderTargetCube, WorldContextObject) == 0x000000, "Member 'SQBlueprintLibrary_CreateRenderTargetCube::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_CreateRenderTargetCube, Size) == 0x000008, "Member 'SQBlueprintLibrary_CreateRenderTargetCube::Size' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_CreateRenderTargetCube, Format) == 0x00000C, "Member 'SQBlueprintLibrary_CreateRenderTargetCube::Format' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_CreateRenderTargetCube, ClearColor) == 0x000010, "Member 'SQBlueprintLibrary_CreateRenderTargetCube::ClearColor' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_CreateRenderTargetCube, bHDR) == 0x000020, "Member 'SQBlueprintLibrary_CreateRenderTargetCube::bHDR' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_CreateRenderTargetCube, bForceLinearGamma) == 0x000021, "Member 'SQBlueprintLibrary_CreateRenderTargetCube::bForceLinearGamma' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_CreateRenderTargetCube, ReturnValue) == 0x000028, "Member 'SQBlueprintLibrary_CreateRenderTargetCube::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.DoesCustomServerSettingExist
// 0x0018 (0x0018 - 0x0000)
struct SQBlueprintLibrary_DoesCustomServerSettingExist final
{
public:
	class FString                                 PropertyName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DBE[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_DoesCustomServerSettingExist) == 0x000008, "Wrong alignment on SQBlueprintLibrary_DoesCustomServerSettingExist");
static_assert(sizeof(SQBlueprintLibrary_DoesCustomServerSettingExist) == 0x000018, "Wrong size on SQBlueprintLibrary_DoesCustomServerSettingExist");
static_assert(offsetof(SQBlueprintLibrary_DoesCustomServerSettingExist, PropertyName) == 0x000000, "Member 'SQBlueprintLibrary_DoesCustomServerSettingExist::PropertyName' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_DoesCustomServerSettingExist, ReturnValue) == 0x000010, "Member 'SQBlueprintLibrary_DoesCustomServerSettingExist::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.DoesStringContainDeveloperString
// 0x0018 (0x0018 - 0x0000)
struct SQBlueprintLibrary_DoesStringContainDeveloperString final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DBF[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_DoesStringContainDeveloperString) == 0x000008, "Wrong alignment on SQBlueprintLibrary_DoesStringContainDeveloperString");
static_assert(sizeof(SQBlueprintLibrary_DoesStringContainDeveloperString) == 0x000018, "Wrong size on SQBlueprintLibrary_DoesStringContainDeveloperString");
static_assert(offsetof(SQBlueprintLibrary_DoesStringContainDeveloperString, InString) == 0x000000, "Member 'SQBlueprintLibrary_DoesStringContainDeveloperString::InString' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_DoesStringContainDeveloperString, ReturnValue) == 0x000010, "Member 'SQBlueprintLibrary_DoesStringContainDeveloperString::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.DrawCircle
// 0x0038 (0x0038 - 0x0000)
struct SQBlueprintLibrary_DrawCircle final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSides;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0028(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DepthPriority;                                     // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC0[0x3];                                      // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Lifetime;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_DrawCircle) == 0x000008, "Wrong alignment on SQBlueprintLibrary_DrawCircle");
static_assert(sizeof(SQBlueprintLibrary_DrawCircle) == 0x000038, "Wrong size on SQBlueprintLibrary_DrawCircle");
static_assert(offsetof(SQBlueprintLibrary_DrawCircle, WorldContextObject) == 0x000000, "Member 'SQBlueprintLibrary_DrawCircle::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_DrawCircle, Location) == 0x000008, "Member 'SQBlueprintLibrary_DrawCircle::Location' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_DrawCircle, Direction) == 0x000014, "Member 'SQBlueprintLibrary_DrawCircle::Direction' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_DrawCircle, Radius) == 0x000020, "Member 'SQBlueprintLibrary_DrawCircle::Radius' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_DrawCircle, NumSides) == 0x000024, "Member 'SQBlueprintLibrary_DrawCircle::NumSides' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_DrawCircle, Color) == 0x000028, "Member 'SQBlueprintLibrary_DrawCircle::Color' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_DrawCircle, DepthPriority) == 0x00002C, "Member 'SQBlueprintLibrary_DrawCircle::DepthPriority' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_DrawCircle, Lifetime) == 0x000030, "Member 'SQBlueprintLibrary_DrawCircle::Lifetime' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_DrawCircle, Thickness) == 0x000034, "Member 'SQBlueprintLibrary_DrawCircle::Thickness' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.DrawTextFormattedWithFontInfo
// 0x00B8 (0x00B8 - 0x0000)
struct SQBlueprintLibrary_DrawTextFormattedWithFontInfo final
{
public:
	struct FPaintContext                          Context;                                           // 0x0000(0x0030)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0030(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector2D                              Position;                                          // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         FontInfo;                                          // 0x0050(0x0058)(Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Tint;                                              // 0x00A8(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_DrawTextFormattedWithFontInfo) == 0x000008, "Wrong alignment on SQBlueprintLibrary_DrawTextFormattedWithFontInfo");
static_assert(sizeof(SQBlueprintLibrary_DrawTextFormattedWithFontInfo) == 0x0000B8, "Wrong size on SQBlueprintLibrary_DrawTextFormattedWithFontInfo");
static_assert(offsetof(SQBlueprintLibrary_DrawTextFormattedWithFontInfo, Context) == 0x000000, "Member 'SQBlueprintLibrary_DrawTextFormattedWithFontInfo::Context' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_DrawTextFormattedWithFontInfo, Text) == 0x000030, "Member 'SQBlueprintLibrary_DrawTextFormattedWithFontInfo::Text' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_DrawTextFormattedWithFontInfo, Position) == 0x000048, "Member 'SQBlueprintLibrary_DrawTextFormattedWithFontInfo::Position' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_DrawTextFormattedWithFontInfo, FontInfo) == 0x000050, "Member 'SQBlueprintLibrary_DrawTextFormattedWithFontInfo::FontInfo' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_DrawTextFormattedWithFontInfo, Tint) == 0x0000A8, "Member 'SQBlueprintLibrary_DrawTextFormattedWithFontInfo::Tint' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.DumpStaticMeshDrawListStats
// 0x0008 (0x0008 - 0x0000)
struct SQBlueprintLibrary_DumpStaticMeshDrawListStats final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_DumpStaticMeshDrawListStats) == 0x000008, "Wrong alignment on SQBlueprintLibrary_DumpStaticMeshDrawListStats");
static_assert(sizeof(SQBlueprintLibrary_DumpStaticMeshDrawListStats) == 0x000008, "Wrong size on SQBlueprintLibrary_DumpStaticMeshDrawListStats");
static_assert(offsetof(SQBlueprintLibrary_DumpStaticMeshDrawListStats, WorldContextObject) == 0x000000, "Member 'SQBlueprintLibrary_DumpStaticMeshDrawListStats::WorldContextObject' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.FileLoadString
// 0x0028 (0x0028 - 0x0000)
struct SQBlueprintLibrary_FileLoadString final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutText;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC1[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_FileLoadString) == 0x000008, "Wrong alignment on SQBlueprintLibrary_FileLoadString");
static_assert(sizeof(SQBlueprintLibrary_FileLoadString) == 0x000028, "Wrong size on SQBlueprintLibrary_FileLoadString");
static_assert(offsetof(SQBlueprintLibrary_FileLoadString, Filename) == 0x000000, "Member 'SQBlueprintLibrary_FileLoadString::Filename' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_FileLoadString, OutText) == 0x000010, "Member 'SQBlueprintLibrary_FileLoadString::OutText' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_FileLoadString, ReturnValue) == 0x000020, "Member 'SQBlueprintLibrary_FileLoadString::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.FileSaveString
// 0x0028 (0x0028 - 0x0000)
struct SQBlueprintLibrary_FileSaveString final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InText;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC2[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_FileSaveString) == 0x000008, "Wrong alignment on SQBlueprintLibrary_FileSaveString");
static_assert(sizeof(SQBlueprintLibrary_FileSaveString) == 0x000028, "Wrong size on SQBlueprintLibrary_FileSaveString");
static_assert(offsetof(SQBlueprintLibrary_FileSaveString, Filename) == 0x000000, "Member 'SQBlueprintLibrary_FileSaveString::Filename' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_FileSaveString, InText) == 0x000010, "Member 'SQBlueprintLibrary_FileSaveString::InText' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_FileSaveString, ReturnValue) == 0x000020, "Member 'SQBlueprintLibrary_FileSaveString::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.FindDefaultComponentsByClass
// 0x0020 (0x0020 - 0x0000)
struct SQBlueprintLibrary_FindDefaultComponentsByClass final
{
public:
	TSubclassOf<class AActor>                     InActorClass;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UActorComponent>            InComponentClass;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UActorComponent*>                ReturnValue;                                       // 0x0010(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_FindDefaultComponentsByClass) == 0x000008, "Wrong alignment on SQBlueprintLibrary_FindDefaultComponentsByClass");
static_assert(sizeof(SQBlueprintLibrary_FindDefaultComponentsByClass) == 0x000020, "Wrong size on SQBlueprintLibrary_FindDefaultComponentsByClass");
static_assert(offsetof(SQBlueprintLibrary_FindDefaultComponentsByClass, InActorClass) == 0x000000, "Member 'SQBlueprintLibrary_FindDefaultComponentsByClass::InActorClass' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_FindDefaultComponentsByClass, InComponentClass) == 0x000008, "Member 'SQBlueprintLibrary_FindDefaultComponentsByClass::InComponentClass' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_FindDefaultComponentsByClass, ReturnValue) == 0x000010, "Member 'SQBlueprintLibrary_FindDefaultComponentsByClass::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.FindPlayerByNameOrId
// 0x0020 (0x0020 - 0x0000)
struct SQBlueprintLibrary_FindPlayerByNameOrId final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NameOrId;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerController*                    ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_FindPlayerByNameOrId) == 0x000008, "Wrong alignment on SQBlueprintLibrary_FindPlayerByNameOrId");
static_assert(sizeof(SQBlueprintLibrary_FindPlayerByNameOrId) == 0x000020, "Wrong size on SQBlueprintLibrary_FindPlayerByNameOrId");
static_assert(offsetof(SQBlueprintLibrary_FindPlayerByNameOrId, World) == 0x000000, "Member 'SQBlueprintLibrary_FindPlayerByNameOrId::World' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_FindPlayerByNameOrId, NameOrId) == 0x000008, "Member 'SQBlueprintLibrary_FindPlayerByNameOrId::NameOrId' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_FindPlayerByNameOrId, ReturnValue) == 0x000018, "Member 'SQBlueprintLibrary_FindPlayerByNameOrId::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.FindPlayerByPlayerId
// 0x0018 (0x0018 - 0x0000)
struct SQBlueprintLibrary_FindPlayerByPlayerId final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerId;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC3[0x4];                                      // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQPlayerController*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_FindPlayerByPlayerId) == 0x000008, "Wrong alignment on SQBlueprintLibrary_FindPlayerByPlayerId");
static_assert(sizeof(SQBlueprintLibrary_FindPlayerByPlayerId) == 0x000018, "Wrong size on SQBlueprintLibrary_FindPlayerByPlayerId");
static_assert(offsetof(SQBlueprintLibrary_FindPlayerByPlayerId, World) == 0x000000, "Member 'SQBlueprintLibrary_FindPlayerByPlayerId::World' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_FindPlayerByPlayerId, PlayerId) == 0x000008, "Member 'SQBlueprintLibrary_FindPlayerByPlayerId::PlayerId' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_FindPlayerByPlayerId, ReturnValue) == 0x000010, "Member 'SQBlueprintLibrary_FindPlayerByPlayerId::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.FormatTextActionKeys
// 0x0040 (0x0040 - 0x0000)
struct SQBlueprintLibrary_FormatTextActionKeys final
{
public:
	class FText                                   FormatText;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActionKeys;                                        // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_FormatTextActionKeys) == 0x000008, "Wrong alignment on SQBlueprintLibrary_FormatTextActionKeys");
static_assert(sizeof(SQBlueprintLibrary_FormatTextActionKeys) == 0x000040, "Wrong size on SQBlueprintLibrary_FormatTextActionKeys");
static_assert(offsetof(SQBlueprintLibrary_FormatTextActionKeys, FormatText) == 0x000000, "Member 'SQBlueprintLibrary_FormatTextActionKeys::FormatText' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_FormatTextActionKeys, ActionKeys) == 0x000018, "Member 'SQBlueprintLibrary_FormatTextActionKeys::ActionKeys' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_FormatTextActionKeys, ReturnValue) == 0x000028, "Member 'SQBlueprintLibrary_FormatTextActionKeys::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GenerateOrRetrieveDynamicMaterial
// 0x0018 (0x0018 - 0x0000)
struct SQBlueprintLibrary_GenerateOrRetrieveDynamicMaterial final
{
public:
	class UMeshComponent*                         Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GenerateOrRetrieveDynamicMaterial) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GenerateOrRetrieveDynamicMaterial");
static_assert(sizeof(SQBlueprintLibrary_GenerateOrRetrieveDynamicMaterial) == 0x000018, "Wrong size on SQBlueprintLibrary_GenerateOrRetrieveDynamicMaterial");
static_assert(offsetof(SQBlueprintLibrary_GenerateOrRetrieveDynamicMaterial, Mesh) == 0x000000, "Member 'SQBlueprintLibrary_GenerateOrRetrieveDynamicMaterial::Mesh' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GenerateOrRetrieveDynamicMaterial, ReturnValue) == 0x000008, "Member 'SQBlueprintLibrary_GenerateOrRetrieveDynamicMaterial::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetAcceptKey
// 0x0018 (0x0018 - 0x0000)
struct SQBlueprintLibrary_GetAcceptKey final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetAcceptKey) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetAcceptKey");
static_assert(sizeof(SQBlueprintLibrary_GetAcceptKey) == 0x000018, "Wrong size on SQBlueprintLibrary_GetAcceptKey");
static_assert(offsetof(SQBlueprintLibrary_GetAcceptKey, ReturnValue) == 0x000000, "Member 'SQBlueprintLibrary_GetAcceptKey::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetActionKeyName
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_GetActionKeyName final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Param_Name;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetActionKeyName) == 0x000004, "Wrong alignment on SQBlueprintLibrary_GetActionKeyName");
static_assert(sizeof(SQBlueprintLibrary_GetActionKeyName) == 0x000010, "Wrong size on SQBlueprintLibrary_GetActionKeyName");
static_assert(offsetof(SQBlueprintLibrary_GetActionKeyName, ActionName) == 0x000000, "Member 'SQBlueprintLibrary_GetActionKeyName::ActionName' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetActionKeyName, Param_Name) == 0x000008, "Member 'SQBlueprintLibrary_GetActionKeyName::Param_Name' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetActorHalfHeight
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_GetActorHalfHeight final
{
public:
	const class AActor*                           TestActor;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC4[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_GetActorHalfHeight) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetActorHalfHeight");
static_assert(sizeof(SQBlueprintLibrary_GetActorHalfHeight) == 0x000010, "Wrong size on SQBlueprintLibrary_GetActorHalfHeight");
static_assert(offsetof(SQBlueprintLibrary_GetActorHalfHeight, TestActor) == 0x000000, "Member 'SQBlueprintLibrary_GetActorHalfHeight::TestActor' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetActorHalfHeight, ReturnValue) == 0x000008, "Member 'SQBlueprintLibrary_GetActorHalfHeight::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetAllClassesInheritingFrom
// 0x0018 (0x0018 - 0x0000)
struct SQBlueprintLibrary_GetAllClassesInheritingFrom final
{
public:
	class UClass*                                 BaseClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoftClassPath>                 OutSubClasses;                                     // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetAllClassesInheritingFrom) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetAllClassesInheritingFrom");
static_assert(sizeof(SQBlueprintLibrary_GetAllClassesInheritingFrom) == 0x000018, "Wrong size on SQBlueprintLibrary_GetAllClassesInheritingFrom");
static_assert(offsetof(SQBlueprintLibrary_GetAllClassesInheritingFrom, BaseClass) == 0x000000, "Member 'SQBlueprintLibrary_GetAllClassesInheritingFrom::BaseClass' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetAllClassesInheritingFrom, OutSubClasses) == 0x000008, "Member 'SQBlueprintLibrary_GetAllClassesInheritingFrom::OutSubClasses' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetAllComponentsOfClass
// 0x0020 (0x0020 - 0x0000)
struct SQBlueprintLibrary_GetAllComponentsOfClass final
{
public:
	class AActor*                                 WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UActorComponent>            Param_Class;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        Components;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetAllComponentsOfClass) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetAllComponentsOfClass");
static_assert(sizeof(SQBlueprintLibrary_GetAllComponentsOfClass) == 0x000020, "Wrong size on SQBlueprintLibrary_GetAllComponentsOfClass");
static_assert(offsetof(SQBlueprintLibrary_GetAllComponentsOfClass, WorldContextObject) == 0x000000, "Member 'SQBlueprintLibrary_GetAllComponentsOfClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetAllComponentsOfClass, Param_Class) == 0x000008, "Member 'SQBlueprintLibrary_GetAllComponentsOfClass::Param_Class' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetAllComponentsOfClass, Components) == 0x000010, "Member 'SQBlueprintLibrary_GetAllComponentsOfClass::Components' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetAllKeybindsBackups
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_GetAllKeybindsBackups final
{
public:
	TArray<class FString>                         Backups;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetAllKeybindsBackups) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetAllKeybindsBackups");
static_assert(sizeof(SQBlueprintLibrary_GetAllKeybindsBackups) == 0x000010, "Wrong size on SQBlueprintLibrary_GetAllKeybindsBackups");
static_assert(offsetof(SQBlueprintLibrary_GetAllKeybindsBackups, Backups) == 0x000000, "Member 'SQBlueprintLibrary_GetAllKeybindsBackups::Backups' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetAllKeyMappings
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_GetAllKeyMappings final
{
public:
	TArray<struct FInputActionKeyMapping>         KeyMappings;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetAllKeyMappings) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetAllKeyMappings");
static_assert(sizeof(SQBlueprintLibrary_GetAllKeyMappings) == 0x000010, "Wrong size on SQBlueprintLibrary_GetAllKeyMappings");
static_assert(offsetof(SQBlueprintLibrary_GetAllKeyMappings, KeyMappings) == 0x000000, "Member 'SQBlueprintLibrary_GetAllKeyMappings::KeyMappings' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetAlphabetLetterString
// 0x0018 (0x0018 - 0x0000)
struct SQBlueprintLibrary_GetAlphabetLetterString final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC5[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetAlphabetLetterString) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetAlphabetLetterString");
static_assert(sizeof(SQBlueprintLibrary_GetAlphabetLetterString) == 0x000018, "Wrong size on SQBlueprintLibrary_GetAlphabetLetterString");
static_assert(offsetof(SQBlueprintLibrary_GetAlphabetLetterString, Param_Index) == 0x000000, "Member 'SQBlueprintLibrary_GetAlphabetLetterString::Param_Index' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetAlphabetLetterString, ReturnValue) == 0x000008, "Member 'SQBlueprintLibrary_GetAlphabetLetterString::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetAttachParentVelocity
// 0x0018 (0x0018 - 0x0000)
struct SQBlueprintLibrary_GetAttachParentVelocity final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxIterations;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetAttachParentVelocity) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetAttachParentVelocity");
static_assert(sizeof(SQBlueprintLibrary_GetAttachParentVelocity) == 0x000018, "Wrong size on SQBlueprintLibrary_GetAttachParentVelocity");
static_assert(offsetof(SQBlueprintLibrary_GetAttachParentVelocity, Actor) == 0x000000, "Member 'SQBlueprintLibrary_GetAttachParentVelocity::Actor' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetAttachParentVelocity, MaxIterations) == 0x000008, "Member 'SQBlueprintLibrary_GetAttachParentVelocity::MaxIterations' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetAttachParentVelocity, ReturnValue) == 0x00000C, "Member 'SQBlueprintLibrary_GetAttachParentVelocity::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetAudioComponentParamFromPhysMat
// 0x0028 (0x0028 - 0x0000)
struct SQBlueprintLibrary_GetAudioComponentParamFromPhysMat final
{
public:
	class UPhysicalMaterial*                      PhysMat;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAudioComponentParam                   ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetAudioComponentParamFromPhysMat) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetAudioComponentParamFromPhysMat");
static_assert(sizeof(SQBlueprintLibrary_GetAudioComponentParamFromPhysMat) == 0x000028, "Wrong size on SQBlueprintLibrary_GetAudioComponentParamFromPhysMat");
static_assert(offsetof(SQBlueprintLibrary_GetAudioComponentParamFromPhysMat, PhysMat) == 0x000000, "Member 'SQBlueprintLibrary_GetAudioComponentParamFromPhysMat::PhysMat' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetAudioComponentParamFromPhysMat, ReturnValue) == 0x000008, "Member 'SQBlueprintLibrary_GetAudioComponentParamFromPhysMat::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetAudioComponentParamsArrayFromPhysMat
// 0x0018 (0x0018 - 0x0000)
struct SQBlueprintLibrary_GetAudioComponentParamsArrayFromPhysMat final
{
public:
	class UPhysicalMaterial*                      PhysMat;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAudioComponentParam>           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetAudioComponentParamsArrayFromPhysMat) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetAudioComponentParamsArrayFromPhysMat");
static_assert(sizeof(SQBlueprintLibrary_GetAudioComponentParamsArrayFromPhysMat) == 0x000018, "Wrong size on SQBlueprintLibrary_GetAudioComponentParamsArrayFromPhysMat");
static_assert(offsetof(SQBlueprintLibrary_GetAudioComponentParamsArrayFromPhysMat, PhysMat) == 0x000000, "Member 'SQBlueprintLibrary_GetAudioComponentParamsArrayFromPhysMat::PhysMat' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetAudioComponentParamsArrayFromPhysMat, ReturnValue) == 0x000008, "Member 'SQBlueprintLibrary_GetAudioComponentParamsArrayFromPhysMat::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetCancelKey
// 0x0018 (0x0018 - 0x0000)
struct SQBlueprintLibrary_GetCancelKey final
{
public:
	struct FKey                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetCancelKey) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetCancelKey");
static_assert(sizeof(SQBlueprintLibrary_GetCancelKey) == 0x000018, "Wrong size on SQBlueprintLibrary_GetCancelKey");
static_assert(offsetof(SQBlueprintLibrary_GetCancelKey, ReturnValue) == 0x000000, "Member 'SQBlueprintLibrary_GetCancelKey::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetCanvasSize
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_GetCanvasSize final
{
public:
	class UCanvas*                                Canvas;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeX;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeY;                                             // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetCanvasSize) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetCanvasSize");
static_assert(sizeof(SQBlueprintLibrary_GetCanvasSize) == 0x000010, "Wrong size on SQBlueprintLibrary_GetCanvasSize");
static_assert(offsetof(SQBlueprintLibrary_GetCanvasSize, Canvas) == 0x000000, "Member 'SQBlueprintLibrary_GetCanvasSize::Canvas' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetCanvasSize, SizeX) == 0x000008, "Member 'SQBlueprintLibrary_GetCanvasSize::SizeX' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetCanvasSize, SizeY) == 0x00000C, "Member 'SQBlueprintLibrary_GetCanvasSize::SizeY' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetComponentTransform
// 0x0040 (0x0040 - 0x0000)
struct SQBlueprintLibrary_GetComponentTransform final
{
public:
	class USceneComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC6[0x8];                                      // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OutTransform;                                      // 0x0010(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetComponentTransform) == 0x000010, "Wrong alignment on SQBlueprintLibrary_GetComponentTransform");
static_assert(sizeof(SQBlueprintLibrary_GetComponentTransform) == 0x000040, "Wrong size on SQBlueprintLibrary_GetComponentTransform");
static_assert(offsetof(SQBlueprintLibrary_GetComponentTransform, Component) == 0x000000, "Member 'SQBlueprintLibrary_GetComponentTransform::Component' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetComponentTransform, OutTransform) == 0x000010, "Member 'SQBlueprintLibrary_GetComponentTransform::OutTransform' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetCurrentMapName
// 0x0018 (0x0018 - 0x0000)
struct SQBlueprintLibrary_GetCurrentMapName final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetCurrentMapName) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetCurrentMapName");
static_assert(sizeof(SQBlueprintLibrary_GetCurrentMapName) == 0x000018, "Wrong size on SQBlueprintLibrary_GetCurrentMapName");
static_assert(offsetof(SQBlueprintLibrary_GetCurrentMapName, WorldContextObject) == 0x000000, "Member 'SQBlueprintLibrary_GetCurrentMapName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetCurrentMapName, ReturnValue) == 0x000008, "Member 'SQBlueprintLibrary_GetCurrentMapName::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetCustomServerSetting
// 0x0030 (0x0030 - 0x0000)
struct SQBlueprintLibrary_GetCustomServerSetting final
{
public:
	class FString                                 PropertyName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultValue;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutResult;                                         // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetCustomServerSetting) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetCustomServerSetting");
static_assert(sizeof(SQBlueprintLibrary_GetCustomServerSetting) == 0x000030, "Wrong size on SQBlueprintLibrary_GetCustomServerSetting");
static_assert(offsetof(SQBlueprintLibrary_GetCustomServerSetting, PropertyName) == 0x000000, "Member 'SQBlueprintLibrary_GetCustomServerSetting::PropertyName' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetCustomServerSetting, DefaultValue) == 0x000010, "Member 'SQBlueprintLibrary_GetCustomServerSetting::DefaultValue' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetCustomServerSetting, OutResult) == 0x000020, "Member 'SQBlueprintLibrary_GetCustomServerSetting::OutResult' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetCustomServerSettingAsBool
// 0x0018 (0x0018 - 0x0000)
struct SQBlueprintLibrary_GetCustomServerSettingAsBool final
{
public:
	class FString                                 PropertyName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DefaultValue;                                      // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC7[0x6];                                      // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_GetCustomServerSettingAsBool) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetCustomServerSettingAsBool");
static_assert(sizeof(SQBlueprintLibrary_GetCustomServerSettingAsBool) == 0x000018, "Wrong size on SQBlueprintLibrary_GetCustomServerSettingAsBool");
static_assert(offsetof(SQBlueprintLibrary_GetCustomServerSettingAsBool, PropertyName) == 0x000000, "Member 'SQBlueprintLibrary_GetCustomServerSettingAsBool::PropertyName' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetCustomServerSettingAsBool, DefaultValue) == 0x000010, "Member 'SQBlueprintLibrary_GetCustomServerSettingAsBool::DefaultValue' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetCustomServerSettingAsBool, ReturnValue) == 0x000011, "Member 'SQBlueprintLibrary_GetCustomServerSettingAsBool::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetCustomServerSettingAsFloat
// 0x0018 (0x0018 - 0x0000)
struct SQBlueprintLibrary_GetCustomServerSettingAsFloat final
{
public:
	class FString                                 PropertyName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultValue;                                      // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetCustomServerSettingAsFloat) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetCustomServerSettingAsFloat");
static_assert(sizeof(SQBlueprintLibrary_GetCustomServerSettingAsFloat) == 0x000018, "Wrong size on SQBlueprintLibrary_GetCustomServerSettingAsFloat");
static_assert(offsetof(SQBlueprintLibrary_GetCustomServerSettingAsFloat, PropertyName) == 0x000000, "Member 'SQBlueprintLibrary_GetCustomServerSettingAsFloat::PropertyName' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetCustomServerSettingAsFloat, DefaultValue) == 0x000010, "Member 'SQBlueprintLibrary_GetCustomServerSettingAsFloat::DefaultValue' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetCustomServerSettingAsFloat, ReturnValue) == 0x000014, "Member 'SQBlueprintLibrary_GetCustomServerSettingAsFloat::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetCustomServerSettingAsInt
// 0x0018 (0x0018 - 0x0000)
struct SQBlueprintLibrary_GetCustomServerSettingAsInt final
{
public:
	class FString                                 PropertyName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultValue;                                      // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetCustomServerSettingAsInt) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetCustomServerSettingAsInt");
static_assert(sizeof(SQBlueprintLibrary_GetCustomServerSettingAsInt) == 0x000018, "Wrong size on SQBlueprintLibrary_GetCustomServerSettingAsInt");
static_assert(offsetof(SQBlueprintLibrary_GetCustomServerSettingAsInt, PropertyName) == 0x000000, "Member 'SQBlueprintLibrary_GetCustomServerSettingAsInt::PropertyName' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetCustomServerSettingAsInt, DefaultValue) == 0x000010, "Member 'SQBlueprintLibrary_GetCustomServerSettingAsInt::DefaultValue' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetCustomServerSettingAsInt, ReturnValue) == 0x000014, "Member 'SQBlueprintLibrary_GetCustomServerSettingAsInt::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetDefaultObjectFor
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_GetDefaultObjectFor final
{
public:
	class UClass*                                 Param_Class;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetDefaultObjectFor) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetDefaultObjectFor");
static_assert(sizeof(SQBlueprintLibrary_GetDefaultObjectFor) == 0x000010, "Wrong size on SQBlueprintLibrary_GetDefaultObjectFor");
static_assert(offsetof(SQBlueprintLibrary_GetDefaultObjectFor, Param_Class) == 0x000000, "Member 'SQBlueprintLibrary_GetDefaultObjectFor::Param_Class' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetDefaultObjectFor, ReturnValue) == 0x000008, "Member 'SQBlueprintLibrary_GetDefaultObjectFor::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetDLSSScaleMultiplier
// 0x0004 (0x0004 - 0x0000)
struct SQBlueprintLibrary_GetDLSSScaleMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetDLSSScaleMultiplier) == 0x000004, "Wrong alignment on SQBlueprintLibrary_GetDLSSScaleMultiplier");
static_assert(sizeof(SQBlueprintLibrary_GetDLSSScaleMultiplier) == 0x000004, "Wrong size on SQBlueprintLibrary_GetDLSSScaleMultiplier");
static_assert(offsetof(SQBlueprintLibrary_GetDLSSScaleMultiplier, ReturnValue) == 0x000000, "Member 'SQBlueprintLibrary_GetDLSSScaleMultiplier::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetDynamicEasingPosition
// 0x0018 (0x0018 - 0x0000)
struct SQBlueprintLibrary_GetDynamicEasingPosition final
{
public:
	struct FSQDynamicEasingStruct                 Easing;                                            // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetDynamicEasingPosition) == 0x000004, "Wrong alignment on SQBlueprintLibrary_GetDynamicEasingPosition");
static_assert(sizeof(SQBlueprintLibrary_GetDynamicEasingPosition) == 0x000018, "Wrong size on SQBlueprintLibrary_GetDynamicEasingPosition");
static_assert(offsetof(SQBlueprintLibrary_GetDynamicEasingPosition, Easing) == 0x000000, "Member 'SQBlueprintLibrary_GetDynamicEasingPosition::Easing' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetDynamicEasingPosition, ReturnValue) == 0x000014, "Member 'SQBlueprintLibrary_GetDynamicEasingPosition::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetFallbackLoadingBackground
// 0x0028 (0x0028 - 0x0000)
struct SQBlueprintLibrary_GetFallbackLoadingBackground final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetFallbackLoadingBackground) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetFallbackLoadingBackground");
static_assert(sizeof(SQBlueprintLibrary_GetFallbackLoadingBackground) == 0x000028, "Wrong size on SQBlueprintLibrary_GetFallbackLoadingBackground");
static_assert(offsetof(SQBlueprintLibrary_GetFallbackLoadingBackground, ReturnValue) == 0x000000, "Member 'SQBlueprintLibrary_GetFallbackLoadingBackground::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetFsrScaleMultiplier
// 0x0008 (0x0008 - 0x0000)
struct SQBlueprintLibrary_GetFsrScaleMultiplier final
{
public:
	float                                         FSR2AdditionalMultiplier;                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetFsrScaleMultiplier) == 0x000004, "Wrong alignment on SQBlueprintLibrary_GetFsrScaleMultiplier");
static_assert(sizeof(SQBlueprintLibrary_GetFsrScaleMultiplier) == 0x000008, "Wrong size on SQBlueprintLibrary_GetFsrScaleMultiplier");
static_assert(offsetof(SQBlueprintLibrary_GetFsrScaleMultiplier, FSR2AdditionalMultiplier) == 0x000000, "Member 'SQBlueprintLibrary_GetFsrScaleMultiplier::FSR2AdditionalMultiplier' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetFsrScaleMultiplier, ReturnValue) == 0x000004, "Member 'SQBlueprintLibrary_GetFsrScaleMultiplier::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetGameVersion
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_GetGameVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetGameVersion) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetGameVersion");
static_assert(sizeof(SQBlueprintLibrary_GetGameVersion) == 0x000010, "Wrong size on SQBlueprintLibrary_GetGameVersion");
static_assert(offsetof(SQBlueprintLibrary_GetGameVersion, ReturnValue) == 0x000000, "Member 'SQBlueprintLibrary_GetGameVersion::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetGameVersionInfo
// 0x0020 (0x0020 - 0x0000)
struct SQBlueprintLibrary_GetGameVersionInfo final
{
public:
	class FString                                 Variant;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Major;                                             // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minor;                                             // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Build;                                             // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Revision;                                          // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetGameVersionInfo) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetGameVersionInfo");
static_assert(sizeof(SQBlueprintLibrary_GetGameVersionInfo) == 0x000020, "Wrong size on SQBlueprintLibrary_GetGameVersionInfo");
static_assert(offsetof(SQBlueprintLibrary_GetGameVersionInfo, Variant) == 0x000000, "Member 'SQBlueprintLibrary_GetGameVersionInfo::Variant' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetGameVersionInfo, Major) == 0x000010, "Member 'SQBlueprintLibrary_GetGameVersionInfo::Major' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetGameVersionInfo, Minor) == 0x000014, "Member 'SQBlueprintLibrary_GetGameVersionInfo::Minor' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetGameVersionInfo, Build) == 0x000018, "Member 'SQBlueprintLibrary_GetGameVersionInfo::Build' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetGameVersionInfo, Revision) == 0x00001C, "Member 'SQBlueprintLibrary_GetGameVersionInfo::Revision' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetIntFromFName
// 0x000C (0x000C - 0x0000)
struct SQBlueprintLibrary_GetIntFromFName final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetIntFromFName) == 0x000004, "Wrong alignment on SQBlueprintLibrary_GetIntFromFName");
static_assert(sizeof(SQBlueprintLibrary_GetIntFromFName) == 0x00000C, "Wrong size on SQBlueprintLibrary_GetIntFromFName");
static_assert(offsetof(SQBlueprintLibrary_GetIntFromFName, Param_Name) == 0x000000, "Member 'SQBlueprintLibrary_GetIntFromFName::Param_Name' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetIntFromFName, ReturnValue) == 0x000008, "Member 'SQBlueprintLibrary_GetIntFromFName::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetIntFromPhysMat
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_GetIntFromPhysMat final
{
public:
	class UPhysicalMaterial*                      PhysMat;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC8[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_GetIntFromPhysMat) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetIntFromPhysMat");
static_assert(sizeof(SQBlueprintLibrary_GetIntFromPhysMat) == 0x000010, "Wrong size on SQBlueprintLibrary_GetIntFromPhysMat");
static_assert(offsetof(SQBlueprintLibrary_GetIntFromPhysMat, PhysMat) == 0x000000, "Member 'SQBlueprintLibrary_GetIntFromPhysMat::PhysMat' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetIntFromPhysMat, ReturnValue) == 0x000008, "Member 'SQBlueprintLibrary_GetIntFromPhysMat::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetKeyDisplayName
// 0x0030 (0x0030 - 0x0000)
struct SQBlueprintLibrary_GetKeyDisplayName final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OutDisplayName;                                    // 0x0018(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetKeyDisplayName) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetKeyDisplayName");
static_assert(sizeof(SQBlueprintLibrary_GetKeyDisplayName) == 0x000030, "Wrong size on SQBlueprintLibrary_GetKeyDisplayName");
static_assert(offsetof(SQBlueprintLibrary_GetKeyDisplayName, Key) == 0x000000, "Member 'SQBlueprintLibrary_GetKeyDisplayName::Key' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetKeyDisplayName, OutDisplayName) == 0x000018, "Member 'SQBlueprintLibrary_GetKeyDisplayName::OutDisplayName' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetKeyFromValue
// 0x0058 (0x0058 - 0x0000)
struct SQBlueprintLibrary_GetKeyFromValue final
{
public:
	TMap<int32, int32>                            Map;                                               // 0x0000(0x0050)(Parm, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0054(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetKeyFromValue) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetKeyFromValue");
static_assert(sizeof(SQBlueprintLibrary_GetKeyFromValue) == 0x000058, "Wrong size on SQBlueprintLibrary_GetKeyFromValue");
static_assert(offsetof(SQBlueprintLibrary_GetKeyFromValue, Map) == 0x000000, "Member 'SQBlueprintLibrary_GetKeyFromValue::Map' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetKeyFromValue, Value) == 0x000050, "Member 'SQBlueprintLibrary_GetKeyFromValue::Value' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetKeyFromValue, ReturnValue) == 0x000054, "Member 'SQBlueprintLibrary_GetKeyFromValue::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetKeyName
// 0x0020 (0x0020 - 0x0000)
struct SQBlueprintLibrary_GetKeyName final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutName;                                           // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetKeyName) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetKeyName");
static_assert(sizeof(SQBlueprintLibrary_GetKeyName) == 0x000020, "Wrong size on SQBlueprintLibrary_GetKeyName");
static_assert(offsetof(SQBlueprintLibrary_GetKeyName, Key) == 0x000000, "Member 'SQBlueprintLibrary_GetKeyName::Key' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetKeyName, OutName) == 0x000018, "Member 'SQBlueprintLibrary_GetKeyName::OutName' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetKeysMapedToAxis
// 0x0020 (0x0020 - 0x0000)
struct SQBlueprintLibrary_GetKeysMapedToAxis final
{
public:
	class FName                                   AxisName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Negative;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC9[0x7];                                      // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FInputAxisKeyMapping>           Keys;                                              // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetKeysMapedToAxis) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetKeysMapedToAxis");
static_assert(sizeof(SQBlueprintLibrary_GetKeysMapedToAxis) == 0x000020, "Wrong size on SQBlueprintLibrary_GetKeysMapedToAxis");
static_assert(offsetof(SQBlueprintLibrary_GetKeysMapedToAxis, AxisName) == 0x000000, "Member 'SQBlueprintLibrary_GetKeysMapedToAxis::AxisName' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetKeysMapedToAxis, Negative) == 0x000008, "Member 'SQBlueprintLibrary_GetKeysMapedToAxis::Negative' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetKeysMapedToAxis, Keys) == 0x000010, "Member 'SQBlueprintLibrary_GetKeysMapedToAxis::Keys' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetKeysMappedToAction
// 0x0018 (0x0018 - 0x0000)
struct SQBlueprintLibrary_GetKeysMappedToAction final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           Keys;                                              // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetKeysMappedToAction) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetKeysMappedToAction");
static_assert(sizeof(SQBlueprintLibrary_GetKeysMappedToAction) == 0x000018, "Wrong size on SQBlueprintLibrary_GetKeysMappedToAction");
static_assert(offsetof(SQBlueprintLibrary_GetKeysMappedToAction, ActionName) == 0x000000, "Member 'SQBlueprintLibrary_GetKeysMappedToAction::ActionName' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetKeysMappedToAction, Keys) == 0x000008, "Member 'SQBlueprintLibrary_GetKeysMappedToAction::Keys' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetKeysMappedToActionText
// 0x0020 (0x0020 - 0x0000)
struct SQBlueprintLibrary_GetKeysMappedToActionText final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetKeysMappedToActionText) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetKeysMappedToActionText");
static_assert(sizeof(SQBlueprintLibrary_GetKeysMappedToActionText) == 0x000020, "Wrong size on SQBlueprintLibrary_GetKeysMappedToActionText");
static_assert(offsetof(SQBlueprintLibrary_GetKeysMappedToActionText, ActionName) == 0x000000, "Member 'SQBlueprintLibrary_GetKeysMappedToActionText::ActionName' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetKeysMappedToActionText, ReturnValue) == 0x000008, "Member 'SQBlueprintLibrary_GetKeysMappedToActionText::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetLastRenderTime
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_GetLastRenderTime final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DCA[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_GetLastRenderTime) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetLastRenderTime");
static_assert(sizeof(SQBlueprintLibrary_GetLastRenderTime) == 0x000010, "Wrong size on SQBlueprintLibrary_GetLastRenderTime");
static_assert(offsetof(SQBlueprintLibrary_GetLastRenderTime, Component) == 0x000000, "Member 'SQBlueprintLibrary_GetLastRenderTime::Component' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetLastRenderTime, ReturnValue) == 0x000008, "Member 'SQBlueprintLibrary_GetLastRenderTime::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetMajorMinorVersion
// 0x0020 (0x0020 - 0x0000)
struct SQBlueprintLibrary_GetMajorMinorVersion final
{
public:
	class FString                                 RawVersion;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetMajorMinorVersion) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetMajorMinorVersion");
static_assert(sizeof(SQBlueprintLibrary_GetMajorMinorVersion) == 0x000020, "Wrong size on SQBlueprintLibrary_GetMajorMinorVersion");
static_assert(offsetof(SQBlueprintLibrary_GetMajorMinorVersion, RawVersion) == 0x000000, "Member 'SQBlueprintLibrary_GetMajorMinorVersion::RawVersion' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetMajorMinorVersion, ReturnValue) == 0x000010, "Member 'SQBlueprintLibrary_GetMajorMinorVersion::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetMicrophoneVolume
// 0x0004 (0x0004 - 0x0000)
struct SQBlueprintLibrary_GetMicrophoneVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetMicrophoneVolume) == 0x000004, "Wrong alignment on SQBlueprintLibrary_GetMicrophoneVolume");
static_assert(sizeof(SQBlueprintLibrary_GetMicrophoneVolume) == 0x000004, "Wrong size on SQBlueprintLibrary_GetMicrophoneVolume");
static_assert(offsetof(SQBlueprintLibrary_GetMicrophoneVolume, ReturnValue) == 0x000000, "Member 'SQBlueprintLibrary_GetMicrophoneVolume::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetNatoPhoneticString
// 0x0018 (0x0018 - 0x0000)
struct SQBlueprintLibrary_GetNatoPhoneticString final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DCB[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetNatoPhoneticString) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetNatoPhoneticString");
static_assert(sizeof(SQBlueprintLibrary_GetNatoPhoneticString) == 0x000018, "Wrong size on SQBlueprintLibrary_GetNatoPhoneticString");
static_assert(offsetof(SQBlueprintLibrary_GetNatoPhoneticString, Param_Index) == 0x000000, "Member 'SQBlueprintLibrary_GetNatoPhoneticString::Param_Index' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetNatoPhoneticString, ReturnValue) == 0x000008, "Member 'SQBlueprintLibrary_GetNatoPhoneticString::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetNetMode
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_GetNetMode final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetNetMode) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetNetMode");
static_assert(sizeof(SQBlueprintLibrary_GetNetMode) == 0x000010, "Wrong size on SQBlueprintLibrary_GetNetMode");
static_assert(offsetof(SQBlueprintLibrary_GetNetMode, ReturnValue) == 0x000000, "Member 'SQBlueprintLibrary_GetNetMode::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetNumSections
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_GetNumSections final
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LOD;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetNumSections) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetNumSections");
static_assert(sizeof(SQBlueprintLibrary_GetNumSections) == 0x000010, "Wrong size on SQBlueprintLibrary_GetNumSections");
static_assert(offsetof(SQBlueprintLibrary_GetNumSections, StaticMesh) == 0x000000, "Member 'SQBlueprintLibrary_GetNumSections::StaticMesh' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetNumSections, LOD) == 0x000008, "Member 'SQBlueprintLibrary_GetNumSections::LOD' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetNumSections, ReturnValue) == 0x00000C, "Member 'SQBlueprintLibrary_GetNumSections::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetNumTexCoords
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_GetNumTexCoords final
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LOD;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetNumTexCoords) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetNumTexCoords");
static_assert(sizeof(SQBlueprintLibrary_GetNumTexCoords) == 0x000010, "Wrong size on SQBlueprintLibrary_GetNumTexCoords");
static_assert(offsetof(SQBlueprintLibrary_GetNumTexCoords, StaticMesh) == 0x000000, "Member 'SQBlueprintLibrary_GetNumTexCoords::StaticMesh' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetNumTexCoords, LOD) == 0x000008, "Member 'SQBlueprintLibrary_GetNumTexCoords::LOD' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetNumTexCoords, ReturnValue) == 0x00000C, "Member 'SQBlueprintLibrary_GetNumTexCoords::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetNumTriangles
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_GetNumTriangles final
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LOD;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetNumTriangles) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetNumTriangles");
static_assert(sizeof(SQBlueprintLibrary_GetNumTriangles) == 0x000010, "Wrong size on SQBlueprintLibrary_GetNumTriangles");
static_assert(offsetof(SQBlueprintLibrary_GetNumTriangles, StaticMesh) == 0x000000, "Member 'SQBlueprintLibrary_GetNumTriangles::StaticMesh' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetNumTriangles, LOD) == 0x000008, "Member 'SQBlueprintLibrary_GetNumTriangles::LOD' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetNumTriangles, ReturnValue) == 0x00000C, "Member 'SQBlueprintLibrary_GetNumTriangles::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetNumVertices
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_GetNumVertices final
{
public:
	class UStaticMesh*                            StaticMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LOD;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetNumVertices) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetNumVertices");
static_assert(sizeof(SQBlueprintLibrary_GetNumVertices) == 0x000010, "Wrong size on SQBlueprintLibrary_GetNumVertices");
static_assert(offsetof(SQBlueprintLibrary_GetNumVertices, StaticMesh) == 0x000000, "Member 'SQBlueprintLibrary_GetNumVertices::StaticMesh' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetNumVertices, LOD) == 0x000008, "Member 'SQBlueprintLibrary_GetNumVertices::LOD' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetNumVertices, ReturnValue) == 0x00000C, "Member 'SQBlueprintLibrary_GetNumVertices::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetOverlapHitInfos
// 0x0018 (0x0018 - 0x0000)
struct SQBlueprintLibrary_GetOverlapHitInfos final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHitResult>                     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetOverlapHitInfos) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetOverlapHitInfos");
static_assert(sizeof(SQBlueprintLibrary_GetOverlapHitInfos) == 0x000018, "Wrong size on SQBlueprintLibrary_GetOverlapHitInfos");
static_assert(offsetof(SQBlueprintLibrary_GetOverlapHitInfos, Target) == 0x000000, "Member 'SQBlueprintLibrary_GetOverlapHitInfos::Target' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetOverlapHitInfos, ReturnValue) == 0x000008, "Member 'SQBlueprintLibrary_GetOverlapHitInfos::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetPiPLensMeshCornersWorldPos
// 0x0038 (0x0038 - 0x0000)
struct SQBlueprintLibrary_GetPiPLensMeshCornersWorldPos final
{
public:
	const class USQPipScopeCaptureComponent*      PiPComponent;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutBotLeft;                                        // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutTopRight;                                       // 0x0014(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutTopLeft;                                        // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutBotRight;                                       // 0x002C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetPiPLensMeshCornersWorldPos) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetPiPLensMeshCornersWorldPos");
static_assert(sizeof(SQBlueprintLibrary_GetPiPLensMeshCornersWorldPos) == 0x000038, "Wrong size on SQBlueprintLibrary_GetPiPLensMeshCornersWorldPos");
static_assert(offsetof(SQBlueprintLibrary_GetPiPLensMeshCornersWorldPos, PiPComponent) == 0x000000, "Member 'SQBlueprintLibrary_GetPiPLensMeshCornersWorldPos::PiPComponent' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetPiPLensMeshCornersWorldPos, OutBotLeft) == 0x000008, "Member 'SQBlueprintLibrary_GetPiPLensMeshCornersWorldPos::OutBotLeft' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetPiPLensMeshCornersWorldPos, OutTopRight) == 0x000014, "Member 'SQBlueprintLibrary_GetPiPLensMeshCornersWorldPos::OutTopRight' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetPiPLensMeshCornersWorldPos, OutTopLeft) == 0x000020, "Member 'SQBlueprintLibrary_GetPiPLensMeshCornersWorldPos::OutTopLeft' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetPiPLensMeshCornersWorldPos, OutBotRight) == 0x00002C, "Member 'SQBlueprintLibrary_GetPiPLensMeshCornersWorldPos::OutBotRight' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetPreviousLODLevel_DEPRECATED
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_GetPreviousLODLevel_DEPRECATED final
{
public:
	class UStaticMeshComponent*                   Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DCC[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_GetPreviousLODLevel_DEPRECATED) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetPreviousLODLevel_DEPRECATED");
static_assert(sizeof(SQBlueprintLibrary_GetPreviousLODLevel_DEPRECATED) == 0x000010, "Wrong size on SQBlueprintLibrary_GetPreviousLODLevel_DEPRECATED");
static_assert(offsetof(SQBlueprintLibrary_GetPreviousLODLevel_DEPRECATED, Component) == 0x000000, "Member 'SQBlueprintLibrary_GetPreviousLODLevel_DEPRECATED::Component' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetPreviousLODLevel_DEPRECATED, ReturnValue) == 0x000008, "Member 'SQBlueprintLibrary_GetPreviousLODLevel_DEPRECATED::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetPrimaryDisplaySize
// 0x0008 (0x0008 - 0x0000)
struct SQBlueprintLibrary_GetPrimaryDisplaySize final
{
public:
	int32                                         Width;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetPrimaryDisplaySize) == 0x000004, "Wrong alignment on SQBlueprintLibrary_GetPrimaryDisplaySize");
static_assert(sizeof(SQBlueprintLibrary_GetPrimaryDisplaySize) == 0x000008, "Wrong size on SQBlueprintLibrary_GetPrimaryDisplaySize");
static_assert(offsetof(SQBlueprintLibrary_GetPrimaryDisplaySize, Width) == 0x000000, "Member 'SQBlueprintLibrary_GetPrimaryDisplaySize::Width' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetPrimaryDisplaySize, Height) == 0x000004, "Member 'SQBlueprintLibrary_GetPrimaryDisplaySize::Height' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetScreenSize
// 0x0020 (0x0020 - 0x0000)
struct SQBlueprintLibrary_GetScreenSize final
{
public:
	class USceneComponent*                        PrimComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CameraOrigin;                                      // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutScreenSize;                                     // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutDistance;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DCD[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_GetScreenSize) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetScreenSize");
static_assert(sizeof(SQBlueprintLibrary_GetScreenSize) == 0x000020, "Wrong size on SQBlueprintLibrary_GetScreenSize");
static_assert(offsetof(SQBlueprintLibrary_GetScreenSize, PrimComp) == 0x000000, "Member 'SQBlueprintLibrary_GetScreenSize::PrimComp' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetScreenSize, CameraOrigin) == 0x000008, "Member 'SQBlueprintLibrary_GetScreenSize::CameraOrigin' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetScreenSize, OutScreenSize) == 0x000014, "Member 'SQBlueprintLibrary_GetScreenSize::OutScreenSize' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetScreenSize, OutDistance) == 0x000018, "Member 'SQBlueprintLibrary_GetScreenSize::OutDistance' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetScreenSizeFromBounds
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_GetScreenSizeFromBounds final
{
public:
	float                                         BoundsRadius;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FOV;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetScreenSizeFromBounds) == 0x000004, "Wrong alignment on SQBlueprintLibrary_GetScreenSizeFromBounds");
static_assert(sizeof(SQBlueprintLibrary_GetScreenSizeFromBounds) == 0x000010, "Wrong size on SQBlueprintLibrary_GetScreenSizeFromBounds");
static_assert(offsetof(SQBlueprintLibrary_GetScreenSizeFromBounds, BoundsRadius) == 0x000000, "Member 'SQBlueprintLibrary_GetScreenSizeFromBounds::BoundsRadius' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetScreenSizeFromBounds, FOV) == 0x000004, "Member 'SQBlueprintLibrary_GetScreenSizeFromBounds::FOV' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetScreenSizeFromBounds, Distance) == 0x000008, "Member 'SQBlueprintLibrary_GetScreenSizeFromBounds::Distance' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetScreenSizeFromBounds, ReturnValue) == 0x00000C, "Member 'SQBlueprintLibrary_GetScreenSizeFromBounds::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetServerHealthSlateColor
// 0x0038 (0x0038 - 0x0000)
struct SQBlueprintLibrary_GetServerHealthSlateColor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerHealth;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DCE[0x4];                                      // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetServerHealthSlateColor) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetServerHealthSlateColor");
static_assert(sizeof(SQBlueprintLibrary_GetServerHealthSlateColor) == 0x000038, "Wrong size on SQBlueprintLibrary_GetServerHealthSlateColor");
static_assert(offsetof(SQBlueprintLibrary_GetServerHealthSlateColor, WorldContextObject) == 0x000000, "Member 'SQBlueprintLibrary_GetServerHealthSlateColor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetServerHealthSlateColor, ServerHealth) == 0x000008, "Member 'SQBlueprintLibrary_GetServerHealthSlateColor::ServerHealth' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetServerHealthSlateColor, ReturnValue) == 0x000010, "Member 'SQBlueprintLibrary_GetServerHealthSlateColor::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetServerHealthValues
// 0x0008 (0x0008 - 0x0000)
struct SQBlueprintLibrary_GetServerHealthValues final
{
public:
	float                                         ServerHealthLow;                                   // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerHealthHigh;                                  // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetServerHealthValues) == 0x000004, "Wrong alignment on SQBlueprintLibrary_GetServerHealthValues");
static_assert(sizeof(SQBlueprintLibrary_GetServerHealthValues) == 0x000008, "Wrong size on SQBlueprintLibrary_GetServerHealthValues");
static_assert(offsetof(SQBlueprintLibrary_GetServerHealthValues, ServerHealthLow) == 0x000000, "Member 'SQBlueprintLibrary_GetServerHealthValues::ServerHealthLow' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetServerHealthValues, ServerHealthHigh) == 0x000004, "Member 'SQBlueprintLibrary_GetServerHealthValues::ServerHealthHigh' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetServerTagManager
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_GetServerTagManager final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQServerTagManager*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetServerTagManager) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetServerTagManager");
static_assert(sizeof(SQBlueprintLibrary_GetServerTagManager) == 0x000010, "Wrong size on SQBlueprintLibrary_GetServerTagManager");
static_assert(offsetof(SQBlueprintLibrary_GetServerTagManager, WorldContextObject) == 0x000000, "Member 'SQBlueprintLibrary_GetServerTagManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetServerTagManager, ReturnValue) == 0x000008, "Member 'SQBlueprintLibrary_GetServerTagManager::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetSpringPos3D
// 0x003C (0x003C - 0x0000)
struct SQBlueprintLibrary_GetSpringPos3D final
{
public:
	struct FSQSpringInterpStruct3D                Spring;                                            // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0030(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetSpringPos3D) == 0x000004, "Wrong alignment on SQBlueprintLibrary_GetSpringPos3D");
static_assert(sizeof(SQBlueprintLibrary_GetSpringPos3D) == 0x00003C, "Wrong size on SQBlueprintLibrary_GetSpringPos3D");
static_assert(offsetof(SQBlueprintLibrary_GetSpringPos3D, Spring) == 0x000000, "Member 'SQBlueprintLibrary_GetSpringPos3D::Spring' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetSpringPos3D, ReturnValue) == 0x000030, "Member 'SQBlueprintLibrary_GetSpringPos3D::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetSquadGameInstance
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_GetSquadGameInstance final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQGameInstance*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetSquadGameInstance) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetSquadGameInstance");
static_assert(sizeof(SQBlueprintLibrary_GetSquadGameInstance) == 0x000010, "Wrong size on SQBlueprintLibrary_GetSquadGameInstance");
static_assert(offsetof(SQBlueprintLibrary_GetSquadGameInstance, WorldContextObject) == 0x000000, "Member 'SQBlueprintLibrary_GetSquadGameInstance::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetSquadGameInstance, ReturnValue) == 0x000008, "Member 'SQBlueprintLibrary_GetSquadGameInstance::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetSquadGameSession
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_GetSquadGameSession final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQGameSession*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetSquadGameSession) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetSquadGameSession");
static_assert(sizeof(SQBlueprintLibrary_GetSquadGameSession) == 0x000010, "Wrong size on SQBlueprintLibrary_GetSquadGameSession");
static_assert(offsetof(SQBlueprintLibrary_GetSquadGameSession, WorldContextObject) == 0x000000, "Member 'SQBlueprintLibrary_GetSquadGameSession::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetSquadGameSession, ReturnValue) == 0x000008, "Member 'SQBlueprintLibrary_GetSquadGameSession::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetSquadGameUserSettings
// 0x0008 (0x0008 - 0x0000)
struct SQBlueprintLibrary_GetSquadGameUserSettings final
{
public:
	class USQGameUserSettings*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetSquadGameUserSettings) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetSquadGameUserSettings");
static_assert(sizeof(SQBlueprintLibrary_GetSquadGameUserSettings) == 0x000008, "Wrong size on SQBlueprintLibrary_GetSquadGameUserSettings");
static_assert(offsetof(SQBlueprintLibrary_GetSquadGameUserSettings, ReturnValue) == 0x000000, "Member 'SQBlueprintLibrary_GetSquadGameUserSettings::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetSquadPhysMat
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_GetSquadPhysMat final
{
public:
	class UPhysicalMaterial*                      PhysMat;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQPhysicalMaterial*                    SquadPhysMat;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetSquadPhysMat) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetSquadPhysMat");
static_assert(sizeof(SQBlueprintLibrary_GetSquadPhysMat) == 0x000010, "Wrong size on SQBlueprintLibrary_GetSquadPhysMat");
static_assert(offsetof(SQBlueprintLibrary_GetSquadPhysMat, PhysMat) == 0x000000, "Member 'SQBlueprintLibrary_GetSquadPhysMat::PhysMat' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetSquadPhysMat, SquadPhysMat) == 0x000008, "Member 'SQBlueprintLibrary_GetSquadPhysMat::SquadPhysMat' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetTextSize
// 0x0080 (0x0080 - 0x0000)
struct SQBlueprintLibrary_GetTextSize final
{
public:
	struct FSlateFontInfo                         FontInfo;                                          // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0058(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ScaleUI;                                           // 0x0070(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0074(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DCF[0x4];                                      // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_GetTextSize) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetTextSize");
static_assert(sizeof(SQBlueprintLibrary_GetTextSize) == 0x000080, "Wrong size on SQBlueprintLibrary_GetTextSize");
static_assert(offsetof(SQBlueprintLibrary_GetTextSize, FontInfo) == 0x000000, "Member 'SQBlueprintLibrary_GetTextSize::FontInfo' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetTextSize, Text) == 0x000058, "Member 'SQBlueprintLibrary_GetTextSize::Text' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetTextSize, ScaleUI) == 0x000070, "Member 'SQBlueprintLibrary_GetTextSize::ScaleUI' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetTextSize, ReturnValue) == 0x000074, "Member 'SQBlueprintLibrary_GetTextSize::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetTextureMemoryStats
// 0x001C (0x001C - 0x0000)
struct SQBlueprintLibrary_GetTextureMemoryStats final
{
public:
	struct FSQTextureMemoryStats                  ReturnValue;                                       // 0x0000(0x001C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetTextureMemoryStats) == 0x000004, "Wrong alignment on SQBlueprintLibrary_GetTextureMemoryStats");
static_assert(sizeof(SQBlueprintLibrary_GetTextureMemoryStats) == 0x00001C, "Wrong size on SQBlueprintLibrary_GetTextureMemoryStats");
static_assert(offsetof(SQBlueprintLibrary_GetTextureMemoryStats, ReturnValue) == 0x000000, "Member 'SQBlueprintLibrary_GetTextureMemoryStats::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetUpscalerMultiplier
// 0x0004 (0x0004 - 0x0000)
struct SQBlueprintLibrary_GetUpscalerMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetUpscalerMultiplier) == 0x000004, "Wrong alignment on SQBlueprintLibrary_GetUpscalerMultiplier");
static_assert(sizeof(SQBlueprintLibrary_GetUpscalerMultiplier) == 0x000004, "Wrong size on SQBlueprintLibrary_GetUpscalerMultiplier");
static_assert(offsetof(SQBlueprintLibrary_GetUpscalerMultiplier, ReturnValue) == 0x000000, "Member 'SQBlueprintLibrary_GetUpscalerMultiplier::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetWorldSettings
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_GetWorldSettings final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AWorldSettings*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetWorldSettings) == 0x000008, "Wrong alignment on SQBlueprintLibrary_GetWorldSettings");
static_assert(sizeof(SQBlueprintLibrary_GetWorldSettings) == 0x000010, "Wrong size on SQBlueprintLibrary_GetWorldSettings");
static_assert(offsetof(SQBlueprintLibrary_GetWorldSettings, WorldContextObject) == 0x000000, "Member 'SQBlueprintLibrary_GetWorldSettings::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetWorldSettings, ReturnValue) == 0x000008, "Member 'SQBlueprintLibrary_GetWorldSettings::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetXeSSScaleMultiplier
// 0x0004 (0x0004 - 0x0000)
struct SQBlueprintLibrary_GetXeSSScaleMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetXeSSScaleMultiplier) == 0x000004, "Wrong alignment on SQBlueprintLibrary_GetXeSSScaleMultiplier");
static_assert(sizeof(SQBlueprintLibrary_GetXeSSScaleMultiplier) == 0x000004, "Wrong size on SQBlueprintLibrary_GetXeSSScaleMultiplier");
static_assert(offsetof(SQBlueprintLibrary_GetXeSSScaleMultiplier, ReturnValue) == 0x000000, "Member 'SQBlueprintLibrary_GetXeSSScaleMultiplier::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.GetZoomedFOV
// 0x000C (0x000C - 0x0000)
struct SQBlueprintLibrary_GetZoomedFOV final
{
public:
	float                                         MagnificationDesired;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultFOV;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_GetZoomedFOV) == 0x000004, "Wrong alignment on SQBlueprintLibrary_GetZoomedFOV");
static_assert(sizeof(SQBlueprintLibrary_GetZoomedFOV) == 0x00000C, "Wrong size on SQBlueprintLibrary_GetZoomedFOV");
static_assert(offsetof(SQBlueprintLibrary_GetZoomedFOV, MagnificationDesired) == 0x000000, "Member 'SQBlueprintLibrary_GetZoomedFOV::MagnificationDesired' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetZoomedFOV, DefaultFOV) == 0x000004, "Member 'SQBlueprintLibrary_GetZoomedFOV::DefaultFOV' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_GetZoomedFOV, ReturnValue) == 0x000008, "Member 'SQBlueprintLibrary_GetZoomedFOV::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.InMainMenu
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_InMainMenu final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD0[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_InMainMenu) == 0x000008, "Wrong alignment on SQBlueprintLibrary_InMainMenu");
static_assert(sizeof(SQBlueprintLibrary_InMainMenu) == 0x000010, "Wrong size on SQBlueprintLibrary_InMainMenu");
static_assert(offsetof(SQBlueprintLibrary_InMainMenu, WorldContextObject) == 0x000000, "Member 'SQBlueprintLibrary_InMainMenu::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_InMainMenu, ReturnValue) == 0x000008, "Member 'SQBlueprintLibrary_InMainMenu::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.IsActorWithinDistanceToLocalPlayer
// 0x0018 (0x0018 - 0x0000)
struct SQBlueprintLibrary_IsActorWithinDistanceToLocalPlayer final
{
public:
	ESQReturnBool                                 Branches;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD1[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           OtherActor;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceInMeters;                                  // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD2[0x3];                                      // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_IsActorWithinDistanceToLocalPlayer) == 0x000008, "Wrong alignment on SQBlueprintLibrary_IsActorWithinDistanceToLocalPlayer");
static_assert(sizeof(SQBlueprintLibrary_IsActorWithinDistanceToLocalPlayer) == 0x000018, "Wrong size on SQBlueprintLibrary_IsActorWithinDistanceToLocalPlayer");
static_assert(offsetof(SQBlueprintLibrary_IsActorWithinDistanceToLocalPlayer, Branches) == 0x000000, "Member 'SQBlueprintLibrary_IsActorWithinDistanceToLocalPlayer::Branches' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_IsActorWithinDistanceToLocalPlayer, OtherActor) == 0x000008, "Member 'SQBlueprintLibrary_IsActorWithinDistanceToLocalPlayer::OtherActor' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_IsActorWithinDistanceToLocalPlayer, DistanceInMeters) == 0x000010, "Member 'SQBlueprintLibrary_IsActorWithinDistanceToLocalPlayer::DistanceInMeters' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_IsActorWithinDistanceToLocalPlayer, ReturnValue) == 0x000014, "Member 'SQBlueprintLibrary_IsActorWithinDistanceToLocalPlayer::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.IsDataTableRowOfStruct
// 0x0018 (0x0018 - 0x0000)
struct SQBlueprintLibrary_IsDataTableRowOfStruct final
{
public:
	const class UDataTable*                       Table;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RowStructName;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD3[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_IsDataTableRowOfStruct) == 0x000008, "Wrong alignment on SQBlueprintLibrary_IsDataTableRowOfStruct");
static_assert(sizeof(SQBlueprintLibrary_IsDataTableRowOfStruct) == 0x000018, "Wrong size on SQBlueprintLibrary_IsDataTableRowOfStruct");
static_assert(offsetof(SQBlueprintLibrary_IsDataTableRowOfStruct, Table) == 0x000000, "Member 'SQBlueprintLibrary_IsDataTableRowOfStruct::Table' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_IsDataTableRowOfStruct, RowStructName) == 0x000008, "Member 'SQBlueprintLibrary_IsDataTableRowOfStruct::RowStructName' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_IsDataTableRowOfStruct, ReturnValue) == 0x000010, "Member 'SQBlueprintLibrary_IsDataTableRowOfStruct::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.IsGamepadKey
// 0x0020 (0x0020 - 0x0000)
struct SQBlueprintLibrary_IsGamepadKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD4[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_IsGamepadKey) == 0x000008, "Wrong alignment on SQBlueprintLibrary_IsGamepadKey");
static_assert(sizeof(SQBlueprintLibrary_IsGamepadKey) == 0x000020, "Wrong size on SQBlueprintLibrary_IsGamepadKey");
static_assert(offsetof(SQBlueprintLibrary_IsGamepadKey, Key) == 0x000000, "Member 'SQBlueprintLibrary_IsGamepadKey::Key' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_IsGamepadKey, ReturnValue) == 0x000018, "Member 'SQBlueprintLibrary_IsGamepadKey::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.IsLocationWithinDistanceToLocalPlayer
// 0x0018 (0x0018 - 0x0000)
struct SQBlueprintLibrary_IsLocationWithinDistanceToLocalPlayer final
{
public:
	ESQReturnBool                                 Branches;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD5[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OtherLocation;                                     // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceInMeters;                                  // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD6[0x3];                                      // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_IsLocationWithinDistanceToLocalPlayer) == 0x000004, "Wrong alignment on SQBlueprintLibrary_IsLocationWithinDistanceToLocalPlayer");
static_assert(sizeof(SQBlueprintLibrary_IsLocationWithinDistanceToLocalPlayer) == 0x000018, "Wrong size on SQBlueprintLibrary_IsLocationWithinDistanceToLocalPlayer");
static_assert(offsetof(SQBlueprintLibrary_IsLocationWithinDistanceToLocalPlayer, Branches) == 0x000000, "Member 'SQBlueprintLibrary_IsLocationWithinDistanceToLocalPlayer::Branches' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_IsLocationWithinDistanceToLocalPlayer, OtherLocation) == 0x000004, "Member 'SQBlueprintLibrary_IsLocationWithinDistanceToLocalPlayer::OtherLocation' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_IsLocationWithinDistanceToLocalPlayer, DistanceInMeters) == 0x000010, "Member 'SQBlueprintLibrary_IsLocationWithinDistanceToLocalPlayer::DistanceInMeters' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_IsLocationWithinDistanceToLocalPlayer, ReturnValue) == 0x000014, "Member 'SQBlueprintLibrary_IsLocationWithinDistanceToLocalPlayer::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.IsMicrophoneAbleToCapture
// 0x0018 (0x0018 - 0x0000)
struct SQBlueprintLibrary_IsMicrophoneAbleToCapture final
{
public:
	class FString                                 OutErrorMessage;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD7[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_IsMicrophoneAbleToCapture) == 0x000008, "Wrong alignment on SQBlueprintLibrary_IsMicrophoneAbleToCapture");
static_assert(sizeof(SQBlueprintLibrary_IsMicrophoneAbleToCapture) == 0x000018, "Wrong size on SQBlueprintLibrary_IsMicrophoneAbleToCapture");
static_assert(offsetof(SQBlueprintLibrary_IsMicrophoneAbleToCapture, OutErrorMessage) == 0x000000, "Member 'SQBlueprintLibrary_IsMicrophoneAbleToCapture::OutErrorMessage' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_IsMicrophoneAbleToCapture, ReturnValue) == 0x000010, "Member 'SQBlueprintLibrary_IsMicrophoneAbleToCapture::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.IsNearlyEqualOrLess
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_IsNearlyEqualOrLess final
{
public:
	float                                         A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD8[0x3];                                      // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_IsNearlyEqualOrLess) == 0x000004, "Wrong alignment on SQBlueprintLibrary_IsNearlyEqualOrLess");
static_assert(sizeof(SQBlueprintLibrary_IsNearlyEqualOrLess) == 0x000010, "Wrong size on SQBlueprintLibrary_IsNearlyEqualOrLess");
static_assert(offsetof(SQBlueprintLibrary_IsNearlyEqualOrLess, A) == 0x000000, "Member 'SQBlueprintLibrary_IsNearlyEqualOrLess::A' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_IsNearlyEqualOrLess, B) == 0x000004, "Member 'SQBlueprintLibrary_IsNearlyEqualOrLess::B' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_IsNearlyEqualOrLess, Tolerance) == 0x000008, "Member 'SQBlueprintLibrary_IsNearlyEqualOrLess::Tolerance' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_IsNearlyEqualOrLess, ReturnValue) == 0x00000C, "Member 'SQBlueprintLibrary_IsNearlyEqualOrLess::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.IsPlayingInEditor
// 0x0001 (0x0001 - 0x0000)
struct SQBlueprintLibrary_IsPlayingInEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_IsPlayingInEditor) == 0x000001, "Wrong alignment on SQBlueprintLibrary_IsPlayingInEditor");
static_assert(sizeof(SQBlueprintLibrary_IsPlayingInEditor) == 0x000001, "Wrong size on SQBlueprintLibrary_IsPlayingInEditor");
static_assert(offsetof(SQBlueprintLibrary_IsPlayingInEditor, ReturnValue) == 0x000000, "Member 'SQBlueprintLibrary_IsPlayingInEditor::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.IsQueueEnabled
// 0x0001 (0x0001 - 0x0000)
struct SQBlueprintLibrary_IsQueueEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_IsQueueEnabled) == 0x000001, "Wrong alignment on SQBlueprintLibrary_IsQueueEnabled");
static_assert(sizeof(SQBlueprintLibrary_IsQueueEnabled) == 0x000001, "Wrong size on SQBlueprintLibrary_IsQueueEnabled");
static_assert(offsetof(SQBlueprintLibrary_IsQueueEnabled, ReturnValue) == 0x000000, "Member 'SQBlueprintLibrary_IsQueueEnabled::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.IsShippingBuild
// 0x0001 (0x0001 - 0x0000)
struct SQBlueprintLibrary_IsShippingBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_IsShippingBuild) == 0x000001, "Wrong alignment on SQBlueprintLibrary_IsShippingBuild");
static_assert(sizeof(SQBlueprintLibrary_IsShippingBuild) == 0x000001, "Wrong size on SQBlueprintLibrary_IsShippingBuild");
static_assert(offsetof(SQBlueprintLibrary_IsShippingBuild, ReturnValue) == 0x000000, "Member 'SQBlueprintLibrary_IsShippingBuild::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.IsSimulatingInEditor
// 0x0001 (0x0001 - 0x0000)
struct SQBlueprintLibrary_IsSimulatingInEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_IsSimulatingInEditor) == 0x000001, "Wrong alignment on SQBlueprintLibrary_IsSimulatingInEditor");
static_assert(sizeof(SQBlueprintLibrary_IsSimulatingInEditor) == 0x000001, "Wrong size on SQBlueprintLibrary_IsSimulatingInEditor");
static_assert(offsetof(SQBlueprintLibrary_IsSimulatingInEditor, ReturnValue) == 0x000000, "Member 'SQBlueprintLibrary_IsSimulatingInEditor::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.IsStandalone
// 0x0001 (0x0001 - 0x0000)
struct SQBlueprintLibrary_IsStandalone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_IsStandalone) == 0x000001, "Wrong alignment on SQBlueprintLibrary_IsStandalone");
static_assert(sizeof(SQBlueprintLibrary_IsStandalone) == 0x000001, "Wrong size on SQBlueprintLibrary_IsStandalone");
static_assert(offsetof(SQBlueprintLibrary_IsStandalone, ReturnValue) == 0x000000, "Member 'SQBlueprintLibrary_IsStandalone::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.IsStandaloneOrListenServer
// 0x0001 (0x0001 - 0x0000)
struct SQBlueprintLibrary_IsStandaloneOrListenServer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_IsStandaloneOrListenServer) == 0x000001, "Wrong alignment on SQBlueprintLibrary_IsStandaloneOrListenServer");
static_assert(sizeof(SQBlueprintLibrary_IsStandaloneOrListenServer) == 0x000001, "Wrong size on SQBlueprintLibrary_IsStandaloneOrListenServer");
static_assert(offsetof(SQBlueprintLibrary_IsStandaloneOrListenServer, ReturnValue) == 0x000000, "Member 'SQBlueprintLibrary_IsStandaloneOrListenServer::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.IsUltraWideResolution
// 0x0001 (0x0001 - 0x0000)
struct SQBlueprintLibrary_IsUltraWideResolution final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_IsUltraWideResolution) == 0x000001, "Wrong alignment on SQBlueprintLibrary_IsUltraWideResolution");
static_assert(sizeof(SQBlueprintLibrary_IsUltraWideResolution) == 0x000001, "Wrong size on SQBlueprintLibrary_IsUltraWideResolution");
static_assert(offsetof(SQBlueprintLibrary_IsUltraWideResolution, ReturnValue) == 0x000000, "Member 'SQBlueprintLibrary_IsUltraWideResolution::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.IsUnderTerrain
// 0x0028 (0x0028 - 0x0000)
struct SQBlueprintLibrary_IsUnderTerrain final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartTrace;                                        // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD9[0x4];                                      // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           InIgnoreActor;                                     // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceDistance;                                     // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceMustImpactAboveToBeUnderTerrain;             // 0x0024(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0025(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DDA[0x2];                                      // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_IsUnderTerrain) == 0x000008, "Wrong alignment on SQBlueprintLibrary_IsUnderTerrain");
static_assert(sizeof(SQBlueprintLibrary_IsUnderTerrain) == 0x000028, "Wrong size on SQBlueprintLibrary_IsUnderTerrain");
static_assert(offsetof(SQBlueprintLibrary_IsUnderTerrain, WorldContextObject) == 0x000000, "Member 'SQBlueprintLibrary_IsUnderTerrain::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_IsUnderTerrain, StartTrace) == 0x000008, "Member 'SQBlueprintLibrary_IsUnderTerrain::StartTrace' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_IsUnderTerrain, InIgnoreActor) == 0x000018, "Member 'SQBlueprintLibrary_IsUnderTerrain::InIgnoreActor' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_IsUnderTerrain, TraceDistance) == 0x000020, "Member 'SQBlueprintLibrary_IsUnderTerrain::TraceDistance' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_IsUnderTerrain, bTraceMustImpactAboveToBeUnderTerrain) == 0x000024, "Member 'SQBlueprintLibrary_IsUnderTerrain::bTraceMustImpactAboveToBeUnderTerrain' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_IsUnderTerrain, ReturnValue) == 0x000025, "Member 'SQBlueprintLibrary_IsUnderTerrain::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.IsValidKey
// 0x0020 (0x0020 - 0x0000)
struct SQBlueprintLibrary_IsValidKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DDB[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_IsValidKey) == 0x000008, "Wrong alignment on SQBlueprintLibrary_IsValidKey");
static_assert(sizeof(SQBlueprintLibrary_IsValidKey) == 0x000020, "Wrong size on SQBlueprintLibrary_IsValidKey");
static_assert(offsetof(SQBlueprintLibrary_IsValidKey, Key) == 0x000000, "Member 'SQBlueprintLibrary_IsValidKey::Key' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_IsValidKey, ReturnValue) == 0x000018, "Member 'SQBlueprintLibrary_IsValidKey::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.LoadCredits
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_LoadCredits final
{
public:
	TArray<struct FSQCreditsList>                 OutCreditsList;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_LoadCredits) == 0x000008, "Wrong alignment on SQBlueprintLibrary_LoadCredits");
static_assert(sizeof(SQBlueprintLibrary_LoadCredits) == 0x000010, "Wrong size on SQBlueprintLibrary_LoadCredits");
static_assert(offsetof(SQBlueprintLibrary_LoadCredits, OutCreditsList) == 0x000000, "Member 'SQBlueprintLibrary_LoadCredits::OutCreditsList' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.LogError
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_LogError final
{
public:
	class FString                                 Contents;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_LogError) == 0x000008, "Wrong alignment on SQBlueprintLibrary_LogError");
static_assert(sizeof(SQBlueprintLibrary_LogError) == 0x000010, "Wrong size on SQBlueprintLibrary_LogError");
static_assert(offsetof(SQBlueprintLibrary_LogError, Contents) == 0x000000, "Member 'SQBlueprintLibrary_LogError::Contents' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.LogMapMarkerError
// 0x0030 (0x0030 - 0x0000)
struct SQBlueprintLibrary_LogMapMarkerError final
{
public:
	class FString                                 Contents;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadId;                                           // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamId;                                            // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FireTeamId;                                        // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize                    Location;                                          // 0x001C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USQMapMarkerDataAsset*            MapMarkerDataAsset;                                // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_LogMapMarkerError) == 0x000008, "Wrong alignment on SQBlueprintLibrary_LogMapMarkerError");
static_assert(sizeof(SQBlueprintLibrary_LogMapMarkerError) == 0x000030, "Wrong size on SQBlueprintLibrary_LogMapMarkerError");
static_assert(offsetof(SQBlueprintLibrary_LogMapMarkerError, Contents) == 0x000000, "Member 'SQBlueprintLibrary_LogMapMarkerError::Contents' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_LogMapMarkerError, SquadId) == 0x000010, "Member 'SQBlueprintLibrary_LogMapMarkerError::SquadId' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_LogMapMarkerError, TeamId) == 0x000014, "Member 'SQBlueprintLibrary_LogMapMarkerError::TeamId' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_LogMapMarkerError, FireTeamId) == 0x000018, "Member 'SQBlueprintLibrary_LogMapMarkerError::FireTeamId' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_LogMapMarkerError, Location) == 0x00001C, "Member 'SQBlueprintLibrary_LogMapMarkerError::Location' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_LogMapMarkerError, MapMarkerDataAsset) == 0x000028, "Member 'SQBlueprintLibrary_LogMapMarkerError::MapMarkerDataAsset' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.LogUnusedProperties
// 0x0008 (0x0008 - 0x0000)
struct SQBlueprintLibrary_LogUnusedProperties final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_LogUnusedProperties) == 0x000008, "Wrong alignment on SQBlueprintLibrary_LogUnusedProperties");
static_assert(sizeof(SQBlueprintLibrary_LogUnusedProperties) == 0x000008, "Wrong size on SQBlueprintLibrary_LogUnusedProperties");
static_assert(offsetof(SQBlueprintLibrary_LogUnusedProperties, Object) == 0x000000, "Member 'SQBlueprintLibrary_LogUnusedProperties::Object' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.MapIconEnabledDefined
// 0x0001 (0x0001 - 0x0000)
struct SQBlueprintLibrary_MapIconEnabledDefined final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_MapIconEnabledDefined) == 0x000001, "Wrong alignment on SQBlueprintLibrary_MapIconEnabledDefined");
static_assert(sizeof(SQBlueprintLibrary_MapIconEnabledDefined) == 0x000001, "Wrong size on SQBlueprintLibrary_MapIconEnabledDefined");
static_assert(offsetof(SQBlueprintLibrary_MapIconEnabledDefined, ReturnValue) == 0x000000, "Member 'SQBlueprintLibrary_MapIconEnabledDefined::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.MapIconVisibleDefined
// 0x0001 (0x0001 - 0x0000)
struct SQBlueprintLibrary_MapIconVisibleDefined final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_MapIconVisibleDefined) == 0x000001, "Wrong alignment on SQBlueprintLibrary_MapIconVisibleDefined");
static_assert(sizeof(SQBlueprintLibrary_MapIconVisibleDefined) == 0x000001, "Wrong size on SQBlueprintLibrary_MapIconVisibleDefined");
static_assert(offsetof(SQBlueprintLibrary_MapIconVisibleDefined, ReturnValue) == 0x000000, "Member 'SQBlueprintLibrary_MapIconVisibleDefined::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.MapMarkersEnabledDefined
// 0x0001 (0x0001 - 0x0000)
struct SQBlueprintLibrary_MapMarkersEnabledDefined final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_MapMarkersEnabledDefined) == 0x000001, "Wrong alignment on SQBlueprintLibrary_MapMarkersEnabledDefined");
static_assert(sizeof(SQBlueprintLibrary_MapMarkersEnabledDefined) == 0x000001, "Wrong size on SQBlueprintLibrary_MapMarkersEnabledDefined");
static_assert(offsetof(SQBlueprintLibrary_MapMarkersEnabledDefined, ReturnValue) == 0x000000, "Member 'SQBlueprintLibrary_MapMarkersEnabledDefined::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.MarkAssetPackageDirty
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_MarkAssetPackageDirty final
{
public:
	class UObject*                                Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DDC[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_MarkAssetPackageDirty) == 0x000008, "Wrong alignment on SQBlueprintLibrary_MarkAssetPackageDirty");
static_assert(sizeof(SQBlueprintLibrary_MarkAssetPackageDirty) == 0x000010, "Wrong size on SQBlueprintLibrary_MarkAssetPackageDirty");
static_assert(offsetof(SQBlueprintLibrary_MarkAssetPackageDirty, Asset) == 0x000000, "Member 'SQBlueprintLibrary_MarkAssetPackageDirty::Asset' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_MarkAssetPackageDirty, ReturnValue) == 0x000008, "Member 'SQBlueprintLibrary_MarkAssetPackageDirty::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.MatchInProgress
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_MatchInProgress final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DDD[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_MatchInProgress) == 0x000008, "Wrong alignment on SQBlueprintLibrary_MatchInProgress");
static_assert(sizeof(SQBlueprintLibrary_MatchInProgress) == 0x000010, "Wrong size on SQBlueprintLibrary_MatchInProgress");
static_assert(offsetof(SQBlueprintLibrary_MatchInProgress, WorldContextObject) == 0x000000, "Member 'SQBlueprintLibrary_MatchInProgress::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_MatchInProgress, ReturnValue) == 0x000008, "Member 'SQBlueprintLibrary_MatchInProgress::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.MatchWaitingAfterCompletion
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_MatchWaitingAfterCompletion final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DDE[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_MatchWaitingAfterCompletion) == 0x000008, "Wrong alignment on SQBlueprintLibrary_MatchWaitingAfterCompletion");
static_assert(sizeof(SQBlueprintLibrary_MatchWaitingAfterCompletion) == 0x000010, "Wrong size on SQBlueprintLibrary_MatchWaitingAfterCompletion");
static_assert(offsetof(SQBlueprintLibrary_MatchWaitingAfterCompletion, WorldContextObject) == 0x000000, "Member 'SQBlueprintLibrary_MatchWaitingAfterCompletion::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_MatchWaitingAfterCompletion, ReturnValue) == 0x000008, "Member 'SQBlueprintLibrary_MatchWaitingAfterCompletion::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.MatchWaitingToStart
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_MatchWaitingToStart final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DDF[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_MatchWaitingToStart) == 0x000008, "Wrong alignment on SQBlueprintLibrary_MatchWaitingToStart");
static_assert(sizeof(SQBlueprintLibrary_MatchWaitingToStart) == 0x000010, "Wrong size on SQBlueprintLibrary_MatchWaitingToStart");
static_assert(offsetof(SQBlueprintLibrary_MatchWaitingToStart, WorldContextObject) == 0x000000, "Member 'SQBlueprintLibrary_MatchWaitingToStart::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_MatchWaitingToStart, ReturnValue) == 0x000008, "Member 'SQBlueprintLibrary_MatchWaitingToStart::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.ModdedServersOnTop
// 0x0001 (0x0001 - 0x0000)
struct SQBlueprintLibrary_ModdedServersOnTop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_ModdedServersOnTop) == 0x000001, "Wrong alignment on SQBlueprintLibrary_ModdedServersOnTop");
static_assert(sizeof(SQBlueprintLibrary_ModdedServersOnTop) == 0x000001, "Wrong size on SQBlueprintLibrary_ModdedServersOnTop");
static_assert(offsetof(SQBlueprintLibrary_ModdedServersOnTop, ReturnValue) == 0x000000, "Member 'SQBlueprintLibrary_ModdedServersOnTop::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.NameLexicalLess
// 0x0014 (0x0014 - 0x0000)
struct SQBlueprintLibrary_NameLexicalLess final
{
public:
	class FName                                   A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   B;                                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE0[0x3];                                      // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_NameLexicalLess) == 0x000004, "Wrong alignment on SQBlueprintLibrary_NameLexicalLess");
static_assert(sizeof(SQBlueprintLibrary_NameLexicalLess) == 0x000014, "Wrong size on SQBlueprintLibrary_NameLexicalLess");
static_assert(offsetof(SQBlueprintLibrary_NameLexicalLess, A) == 0x000000, "Member 'SQBlueprintLibrary_NameLexicalLess::A' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_NameLexicalLess, B) == 0x000008, "Member 'SQBlueprintLibrary_NameLexicalLess::B' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_NameLexicalLess, ReturnValue) == 0x000010, "Member 'SQBlueprintLibrary_NameLexicalLess::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.NormalizeAngle
// 0x0008 (0x0008 - 0x0000)
struct SQBlueprintLibrary_NormalizeAngle final
{
public:
	float                                         InAngle;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_NormalizeAngle) == 0x000004, "Wrong alignment on SQBlueprintLibrary_NormalizeAngle");
static_assert(sizeof(SQBlueprintLibrary_NormalizeAngle) == 0x000008, "Wrong size on SQBlueprintLibrary_NormalizeAngle");
static_assert(offsetof(SQBlueprintLibrary_NormalizeAngle, InAngle) == 0x000000, "Member 'SQBlueprintLibrary_NormalizeAngle::InAngle' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_NormalizeAngle, ReturnValue) == 0x000004, "Member 'SQBlueprintLibrary_NormalizeAngle::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.OffsetSpring3D
// 0x003C (0x003C - 0x0000)
struct SQBlueprintLibrary_OffsetSpring3D final
{
public:
	struct FSQSpringInterpStruct3D                Spring;                                            // 0x0000(0x0030)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                PosOffset;                                         // 0x0030(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_OffsetSpring3D) == 0x000004, "Wrong alignment on SQBlueprintLibrary_OffsetSpring3D");
static_assert(sizeof(SQBlueprintLibrary_OffsetSpring3D) == 0x00003C, "Wrong size on SQBlueprintLibrary_OffsetSpring3D");
static_assert(offsetof(SQBlueprintLibrary_OffsetSpring3D, Spring) == 0x000000, "Member 'SQBlueprintLibrary_OffsetSpring3D::Spring' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_OffsetSpring3D, PosOffset) == 0x000030, "Member 'SQBlueprintLibrary_OffsetSpring3D::PosOffset' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.OWICoreStateEnabledDefined
// 0x0001 (0x0001 - 0x0000)
struct SQBlueprintLibrary_OWICoreStateEnabledDefined final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_OWICoreStateEnabledDefined) == 0x000001, "Wrong alignment on SQBlueprintLibrary_OWICoreStateEnabledDefined");
static_assert(sizeof(SQBlueprintLibrary_OWICoreStateEnabledDefined) == 0x000001, "Wrong size on SQBlueprintLibrary_OWICoreStateEnabledDefined");
static_assert(offsetof(SQBlueprintLibrary_OWICoreStateEnabledDefined, ReturnValue) == 0x000000, "Member 'SQBlueprintLibrary_OWICoreStateEnabledDefined::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.OWICoreStateVisibleDefined
// 0x0001 (0x0001 - 0x0000)
struct SQBlueprintLibrary_OWICoreStateVisibleDefined final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_OWICoreStateVisibleDefined) == 0x000001, "Wrong alignment on SQBlueprintLibrary_OWICoreStateVisibleDefined");
static_assert(sizeof(SQBlueprintLibrary_OWICoreStateVisibleDefined) == 0x000001, "Wrong size on SQBlueprintLibrary_OWICoreStateVisibleDefined");
static_assert(offsetof(SQBlueprintLibrary_OWICoreStateVisibleDefined, ReturnValue) == 0x000000, "Member 'SQBlueprintLibrary_OWICoreStateVisibleDefined::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.PlaySoldierMovementFoleySound
// 0x0048 (0x0048 - 0x0000)
struct SQBlueprintLibrary_PlaySoldierMovementFoleySound final
{
public:
	const class ASQSoldier*                       Soldier;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetSpeedParameter;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetPhysMatParameter;                              // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetWaterDepthParameter;                           // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE1[0x1];                                      // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocationOffset;                                    // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE2[0x4];                                      // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class USoundAttenuation*                AttenuationSettings;                               // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USoundConcurrency*                ConcurrencySettings;                               // 0x0038(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE3[0x7];                                      // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_PlaySoldierMovementFoleySound) == 0x000008, "Wrong alignment on SQBlueprintLibrary_PlaySoldierMovementFoleySound");
static_assert(sizeof(SQBlueprintLibrary_PlaySoldierMovementFoleySound) == 0x000048, "Wrong size on SQBlueprintLibrary_PlaySoldierMovementFoleySound");
static_assert(offsetof(SQBlueprintLibrary_PlaySoldierMovementFoleySound, Soldier) == 0x000000, "Member 'SQBlueprintLibrary_PlaySoldierMovementFoleySound::Soldier' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_PlaySoldierMovementFoleySound, Sound) == 0x000008, "Member 'SQBlueprintLibrary_PlaySoldierMovementFoleySound::Sound' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_PlaySoldierMovementFoleySound, bSetSpeedParameter) == 0x000010, "Member 'SQBlueprintLibrary_PlaySoldierMovementFoleySound::bSetSpeedParameter' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_PlaySoldierMovementFoleySound, bSetPhysMatParameter) == 0x000011, "Member 'SQBlueprintLibrary_PlaySoldierMovementFoleySound::bSetPhysMatParameter' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_PlaySoldierMovementFoleySound, bSetWaterDepthParameter) == 0x000012, "Member 'SQBlueprintLibrary_PlaySoldierMovementFoleySound::bSetWaterDepthParameter' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_PlaySoldierMovementFoleySound, LocationOffset) == 0x000014, "Member 'SQBlueprintLibrary_PlaySoldierMovementFoleySound::LocationOffset' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_PlaySoldierMovementFoleySound, VolumeMultiplier) == 0x000020, "Member 'SQBlueprintLibrary_PlaySoldierMovementFoleySound::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_PlaySoldierMovementFoleySound, PitchMultiplier) == 0x000024, "Member 'SQBlueprintLibrary_PlaySoldierMovementFoleySound::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_PlaySoldierMovementFoleySound, StartTime) == 0x000028, "Member 'SQBlueprintLibrary_PlaySoldierMovementFoleySound::StartTime' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_PlaySoldierMovementFoleySound, AttenuationSettings) == 0x000030, "Member 'SQBlueprintLibrary_PlaySoldierMovementFoleySound::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_PlaySoldierMovementFoleySound, ConcurrencySettings) == 0x000038, "Member 'SQBlueprintLibrary_PlaySoldierMovementFoleySound::ConcurrencySettings' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_PlaySoldierMovementFoleySound, LocationType) == 0x000040, "Member 'SQBlueprintLibrary_PlaySoldierMovementFoleySound::LocationType' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.PlaySound2DWithParameters
// 0x0038 (0x0038 - 0x0000)
struct SQBlueprintLibrary_PlaySound2DWithParameters final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAudioComponentParam>           AudioParameters;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE4[0x4];                                      // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_PlaySound2DWithParameters) == 0x000008, "Wrong alignment on SQBlueprintLibrary_PlaySound2DWithParameters");
static_assert(sizeof(SQBlueprintLibrary_PlaySound2DWithParameters) == 0x000038, "Wrong size on SQBlueprintLibrary_PlaySound2DWithParameters");
static_assert(offsetof(SQBlueprintLibrary_PlaySound2DWithParameters, WorldContextObject) == 0x000000, "Member 'SQBlueprintLibrary_PlaySound2DWithParameters::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_PlaySound2DWithParameters, Sound) == 0x000008, "Member 'SQBlueprintLibrary_PlaySound2DWithParameters::Sound' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_PlaySound2DWithParameters, AudioParameters) == 0x000010, "Member 'SQBlueprintLibrary_PlaySound2DWithParameters::AudioParameters' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_PlaySound2DWithParameters, VolumeMultiplier) == 0x000020, "Member 'SQBlueprintLibrary_PlaySound2DWithParameters::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_PlaySound2DWithParameters, PitchMultiplier) == 0x000024, "Member 'SQBlueprintLibrary_PlaySound2DWithParameters::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_PlaySound2DWithParameters, StartTime) == 0x000028, "Member 'SQBlueprintLibrary_PlaySound2DWithParameters::StartTime' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_PlaySound2DWithParameters, ConcurrencySettings) == 0x000030, "Member 'SQBlueprintLibrary_PlaySound2DWithParameters::ConcurrencySettings' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.PlaySoundAtLocationWithParameters
// 0x0058 (0x0058 - 0x0000)
struct SQBlueprintLibrary_PlaySoundAtLocationWithParameters final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE5[0x4];                                      // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAudioComponentParam>           AudioParameters;                                   // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0030(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_PlaySoundAtLocationWithParameters) == 0x000008, "Wrong alignment on SQBlueprintLibrary_PlaySoundAtLocationWithParameters");
static_assert(sizeof(SQBlueprintLibrary_PlaySoundAtLocationWithParameters) == 0x000058, "Wrong size on SQBlueprintLibrary_PlaySoundAtLocationWithParameters");
static_assert(offsetof(SQBlueprintLibrary_PlaySoundAtLocationWithParameters, WorldContextObject) == 0x000000, "Member 'SQBlueprintLibrary_PlaySoundAtLocationWithParameters::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_PlaySoundAtLocationWithParameters, Sound) == 0x000008, "Member 'SQBlueprintLibrary_PlaySoundAtLocationWithParameters::Sound' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_PlaySoundAtLocationWithParameters, Location) == 0x000010, "Member 'SQBlueprintLibrary_PlaySoundAtLocationWithParameters::Location' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_PlaySoundAtLocationWithParameters, AudioParameters) == 0x000020, "Member 'SQBlueprintLibrary_PlaySoundAtLocationWithParameters::AudioParameters' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_PlaySoundAtLocationWithParameters, Rotation) == 0x000030, "Member 'SQBlueprintLibrary_PlaySoundAtLocationWithParameters::Rotation' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_PlaySoundAtLocationWithParameters, VolumeMultiplier) == 0x00003C, "Member 'SQBlueprintLibrary_PlaySoundAtLocationWithParameters::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_PlaySoundAtLocationWithParameters, PitchMultiplier) == 0x000040, "Member 'SQBlueprintLibrary_PlaySoundAtLocationWithParameters::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_PlaySoundAtLocationWithParameters, StartTime) == 0x000044, "Member 'SQBlueprintLibrary_PlaySoundAtLocationWithParameters::StartTime' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_PlaySoundAtLocationWithParameters, AttenuationSettings) == 0x000048, "Member 'SQBlueprintLibrary_PlaySoundAtLocationWithParameters::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_PlaySoundAtLocationWithParameters, ConcurrencySettings) == 0x000050, "Member 'SQBlueprintLibrary_PlaySoundAtLocationWithParameters::ConcurrencySettings' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.PrintHitResult
// 0x0088 (0x0088 - 0x0000)
struct SQBlueprintLibrary_PrintHitResult final
{
public:
	struct FHitResult                             Hit;                                               // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_PrintHitResult) == 0x000004, "Wrong alignment on SQBlueprintLibrary_PrintHitResult");
static_assert(sizeof(SQBlueprintLibrary_PrintHitResult) == 0x000088, "Wrong size on SQBlueprintLibrary_PrintHitResult");
static_assert(offsetof(SQBlueprintLibrary_PrintHitResult, Hit) == 0x000000, "Member 'SQBlueprintLibrary_PrintHitResult::Hit' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.PrintShotInfo
// 0x002C (0x002C - 0x0000)
struct SQBlueprintLibrary_PrintShotInfo final
{
public:
	struct FSQShotInfo                            Shot;                                              // 0x0000(0x002C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_PrintShotInfo) == 0x000004, "Wrong alignment on SQBlueprintLibrary_PrintShotInfo");
static_assert(sizeof(SQBlueprintLibrary_PrintShotInfo) == 0x00002C, "Wrong size on SQBlueprintLibrary_PrintShotInfo");
static_assert(offsetof(SQBlueprintLibrary_PrintShotInfo, Shot) == 0x000000, "Member 'SQBlueprintLibrary_PrintShotInfo::Shot' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.RebaseTransformLocalOriginOntoZero
// 0x0070 (0x0070 - 0x0000)
struct SQBlueprintLibrary_RebaseTransformLocalOriginOntoZero final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE6[0x8];                                      // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LocalTransform;                                    // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0040(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_RebaseTransformLocalOriginOntoZero) == 0x000010, "Wrong alignment on SQBlueprintLibrary_RebaseTransformLocalOriginOntoZero");
static_assert(sizeof(SQBlueprintLibrary_RebaseTransformLocalOriginOntoZero) == 0x000070, "Wrong size on SQBlueprintLibrary_RebaseTransformLocalOriginOntoZero");
static_assert(offsetof(SQBlueprintLibrary_RebaseTransformLocalOriginOntoZero, WorldContextObject) == 0x000000, "Member 'SQBlueprintLibrary_RebaseTransformLocalOriginOntoZero::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_RebaseTransformLocalOriginOntoZero, LocalTransform) == 0x000010, "Member 'SQBlueprintLibrary_RebaseTransformLocalOriginOntoZero::LocalTransform' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_RebaseTransformLocalOriginOntoZero, ReturnValue) == 0x000040, "Member 'SQBlueprintLibrary_RebaseTransformLocalOriginOntoZero::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.RebaseTransformZeroOriginOntoLocal
// 0x0070 (0x0070 - 0x0000)
struct SQBlueprintLibrary_RebaseTransformZeroOriginOntoLocal final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE7[0x8];                                      // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ZeroTransform;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0040(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_RebaseTransformZeroOriginOntoLocal) == 0x000010, "Wrong alignment on SQBlueprintLibrary_RebaseTransformZeroOriginOntoLocal");
static_assert(sizeof(SQBlueprintLibrary_RebaseTransformZeroOriginOntoLocal) == 0x000070, "Wrong size on SQBlueprintLibrary_RebaseTransformZeroOriginOntoLocal");
static_assert(offsetof(SQBlueprintLibrary_RebaseTransformZeroOriginOntoLocal, WorldContextObject) == 0x000000, "Member 'SQBlueprintLibrary_RebaseTransformZeroOriginOntoLocal::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_RebaseTransformZeroOriginOntoLocal, ZeroTransform) == 0x000010, "Member 'SQBlueprintLibrary_RebaseTransformZeroOriginOntoLocal::ZeroTransform' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_RebaseTransformZeroOriginOntoLocal, ReturnValue) == 0x000040, "Member 'SQBlueprintLibrary_RebaseTransformZeroOriginOntoLocal::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.RebindAxisKey
// 0x0040 (0x0040 - 0x0000)
struct SQBlueprintLibrary_RebindAxisKey final
{
public:
	struct FInputAxisKeyMapping                   Mapping;                                           // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FKey                                   NewKey;                                            // 0x0028(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_RebindAxisKey) == 0x000008, "Wrong alignment on SQBlueprintLibrary_RebindAxisKey");
static_assert(sizeof(SQBlueprintLibrary_RebindAxisKey) == 0x000040, "Wrong size on SQBlueprintLibrary_RebindAxisKey");
static_assert(offsetof(SQBlueprintLibrary_RebindAxisKey, Mapping) == 0x000000, "Member 'SQBlueprintLibrary_RebindAxisKey::Mapping' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_RebindAxisKey, NewKey) == 0x000028, "Member 'SQBlueprintLibrary_RebindAxisKey::NewKey' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.RebindKey
// 0x0028 (0x0028 - 0x0000)
struct SQBlueprintLibrary_RebindKey final
{
public:
	class FName                                   ActionName;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   NewKey;                                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OccuranceIndex;                                    // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE8[0x4];                                      // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_RebindKey) == 0x000008, "Wrong alignment on SQBlueprintLibrary_RebindKey");
static_assert(sizeof(SQBlueprintLibrary_RebindKey) == 0x000028, "Wrong size on SQBlueprintLibrary_RebindKey");
static_assert(offsetof(SQBlueprintLibrary_RebindKey, ActionName) == 0x000000, "Member 'SQBlueprintLibrary_RebindKey::ActionName' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_RebindKey, NewKey) == 0x000008, "Member 'SQBlueprintLibrary_RebindKey::NewKey' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_RebindKey, OccuranceIndex) == 0x000020, "Member 'SQBlueprintLibrary_RebindKey::OccuranceIndex' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.SaveAndForceRebuildingKeyMaps
// 0x0001 (0x0001 - 0x0000)
struct SQBlueprintLibrary_SaveAndForceRebuildingKeyMaps final
{
public:
	bool                                          bRestoreDefaults;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_SaveAndForceRebuildingKeyMaps) == 0x000001, "Wrong alignment on SQBlueprintLibrary_SaveAndForceRebuildingKeyMaps");
static_assert(sizeof(SQBlueprintLibrary_SaveAndForceRebuildingKeyMaps) == 0x000001, "Wrong size on SQBlueprintLibrary_SaveAndForceRebuildingKeyMaps");
static_assert(offsetof(SQBlueprintLibrary_SaveAndForceRebuildingKeyMaps, bRestoreDefaults) == 0x000000, "Member 'SQBlueprintLibrary_SaveAndForceRebuildingKeyMaps::bRestoreDefaults' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.ServerHealthEnabled
// 0x0001 (0x0001 - 0x0000)
struct SQBlueprintLibrary_ServerHealthEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_ServerHealthEnabled) == 0x000001, "Wrong alignment on SQBlueprintLibrary_ServerHealthEnabled");
static_assert(sizeof(SQBlueprintLibrary_ServerHealthEnabled) == 0x000001, "Wrong size on SQBlueprintLibrary_ServerHealthEnabled");
static_assert(offsetof(SQBlueprintLibrary_ServerHealthEnabled, ReturnValue) == 0x000000, "Member 'SQBlueprintLibrary_ServerHealthEnabled::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.ServerLicensingNoticeNeeded
// 0x0001 (0x0001 - 0x0000)
struct SQBlueprintLibrary_ServerLicensingNoticeNeeded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_ServerLicensingNoticeNeeded) == 0x000001, "Wrong alignment on SQBlueprintLibrary_ServerLicensingNoticeNeeded");
static_assert(sizeof(SQBlueprintLibrary_ServerLicensingNoticeNeeded) == 0x000001, "Wrong size on SQBlueprintLibrary_ServerLicensingNoticeNeeded");
static_assert(offsetof(SQBlueprintLibrary_ServerLicensingNoticeNeeded, ReturnValue) == 0x000000, "Member 'SQBlueprintLibrary_ServerLicensingNoticeNeeded::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.SetActorCollisionInGame
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_SetActorCollisionInGame final
{
public:
	class AActor*                                 ActorToAffect;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewCollisionEnabled;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToAttachedChildren;                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE9[0x6];                                      // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_SetActorCollisionInGame) == 0x000008, "Wrong alignment on SQBlueprintLibrary_SetActorCollisionInGame");
static_assert(sizeof(SQBlueprintLibrary_SetActorCollisionInGame) == 0x000010, "Wrong size on SQBlueprintLibrary_SetActorCollisionInGame");
static_assert(offsetof(SQBlueprintLibrary_SetActorCollisionInGame, ActorToAffect) == 0x000000, "Member 'SQBlueprintLibrary_SetActorCollisionInGame::ActorToAffect' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SetActorCollisionInGame, bNewCollisionEnabled) == 0x000008, "Member 'SQBlueprintLibrary_SetActorCollisionInGame::bNewCollisionEnabled' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SetActorCollisionInGame, bPropagateToAttachedChildren) == 0x000009, "Member 'SQBlueprintLibrary_SetActorCollisionInGame::bPropagateToAttachedChildren' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.SetActorComponentStablyNamed
// 0x0008 (0x0008 - 0x0000)
struct SQBlueprintLibrary_SetActorComponentStablyNamed final
{
public:
	class UActorComponent*                        ActorComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_SetActorComponentStablyNamed) == 0x000008, "Wrong alignment on SQBlueprintLibrary_SetActorComponentStablyNamed");
static_assert(sizeof(SQBlueprintLibrary_SetActorComponentStablyNamed) == 0x000008, "Wrong size on SQBlueprintLibrary_SetActorComponentStablyNamed");
static_assert(offsetof(SQBlueprintLibrary_SetActorComponentStablyNamed, ActorComponent) == 0x000000, "Member 'SQBlueprintLibrary_SetActorComponentStablyNamed::ActorComponent' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.SetActorHiddenInGame
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_SetActorHiddenInGame final
{
public:
	class AActor*                                 ActorToAffect;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewHidden;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToAttachedChildren;                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DEA[0x6];                                      // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_SetActorHiddenInGame) == 0x000008, "Wrong alignment on SQBlueprintLibrary_SetActorHiddenInGame");
static_assert(sizeof(SQBlueprintLibrary_SetActorHiddenInGame) == 0x000010, "Wrong size on SQBlueprintLibrary_SetActorHiddenInGame");
static_assert(offsetof(SQBlueprintLibrary_SetActorHiddenInGame, ActorToAffect) == 0x000000, "Member 'SQBlueprintLibrary_SetActorHiddenInGame::ActorToAffect' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SetActorHiddenInGame, bNewHidden) == 0x000008, "Member 'SQBlueprintLibrary_SetActorHiddenInGame::bNewHidden' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SetActorHiddenInGame, bPropagateToAttachedChildren) == 0x000009, "Member 'SQBlueprintLibrary_SetActorHiddenInGame::bPropagateToAttachedChildren' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.SetActorTickGroup
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_SetActorTickGroup final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETickingGroup                                 NewTickGroup;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DEB[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_SetActorTickGroup) == 0x000008, "Wrong alignment on SQBlueprintLibrary_SetActorTickGroup");
static_assert(sizeof(SQBlueprintLibrary_SetActorTickGroup) == 0x000010, "Wrong size on SQBlueprintLibrary_SetActorTickGroup");
static_assert(offsetof(SQBlueprintLibrary_SetActorTickGroup, Target) == 0x000000, "Member 'SQBlueprintLibrary_SetActorTickGroup::Target' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SetActorTickGroup, NewTickGroup) == 0x000008, "Member 'SQBlueprintLibrary_SetActorTickGroup::NewTickGroup' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.SetComponentTickGroup
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_SetComponentTickGroup final
{
public:
	class UActorComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETickingGroup                                 NewTickGroup;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DEC[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_SetComponentTickGroup) == 0x000008, "Wrong alignment on SQBlueprintLibrary_SetComponentTickGroup");
static_assert(sizeof(SQBlueprintLibrary_SetComponentTickGroup) == 0x000010, "Wrong size on SQBlueprintLibrary_SetComponentTickGroup");
static_assert(offsetof(SQBlueprintLibrary_SetComponentTickGroup, Target) == 0x000000, "Member 'SQBlueprintLibrary_SetComponentTickGroup::Target' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SetComponentTickGroup, NewTickGroup) == 0x000008, "Member 'SQBlueprintLibrary_SetComponentTickGroup::NewTickGroup' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.SetDynamicEasingTarget
// 0x0018 (0x0018 - 0x0000)
struct SQBlueprintLibrary_SetDynamicEasingTarget final
{
public:
	struct FSQDynamicEasingStruct                 Easing;                                            // 0x0000(0x0014)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         NewTarget;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_SetDynamicEasingTarget) == 0x000004, "Wrong alignment on SQBlueprintLibrary_SetDynamicEasingTarget");
static_assert(sizeof(SQBlueprintLibrary_SetDynamicEasingTarget) == 0x000018, "Wrong size on SQBlueprintLibrary_SetDynamicEasingTarget");
static_assert(offsetof(SQBlueprintLibrary_SetDynamicEasingTarget, Easing) == 0x000000, "Member 'SQBlueprintLibrary_SetDynamicEasingTarget::Easing' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SetDynamicEasingTarget, NewTarget) == 0x000014, "Member 'SQBlueprintLibrary_SetDynamicEasingTarget::NewTarget' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.SetMasterPoseComponent
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_SetMasterPoseComponent final
{
public:
	class USkeletalMeshComponent*                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 Master;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_SetMasterPoseComponent) == 0x000008, "Wrong alignment on SQBlueprintLibrary_SetMasterPoseComponent");
static_assert(sizeof(SQBlueprintLibrary_SetMasterPoseComponent) == 0x000010, "Wrong size on SQBlueprintLibrary_SetMasterPoseComponent");
static_assert(offsetof(SQBlueprintLibrary_SetMasterPoseComponent, Target) == 0x000000, "Member 'SQBlueprintLibrary_SetMasterPoseComponent::Target' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SetMasterPoseComponent, Master) == 0x000008, "Member 'SQBlueprintLibrary_SetMasterPoseComponent::Master' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.SetMicrophoneForceAutoGain
// 0x0002 (0x0002 - 0x0000)
struct SQBlueprintLibrary_SetMicrophoneForceAutoGain final
{
public:
	bool                                          bInValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_SetMicrophoneForceAutoGain) == 0x000001, "Wrong alignment on SQBlueprintLibrary_SetMicrophoneForceAutoGain");
static_assert(sizeof(SQBlueprintLibrary_SetMicrophoneForceAutoGain) == 0x000002, "Wrong size on SQBlueprintLibrary_SetMicrophoneForceAutoGain");
static_assert(offsetof(SQBlueprintLibrary_SetMicrophoneForceAutoGain, bInValue) == 0x000000, "Member 'SQBlueprintLibrary_SetMicrophoneForceAutoGain::bInValue' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SetMicrophoneForceAutoGain, ReturnValue) == 0x000001, "Member 'SQBlueprintLibrary_SetMicrophoneForceAutoGain::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.SetMobility
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_SetMobility final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EComponentMobility                            NewMobility;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DED[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_SetMobility) == 0x000008, "Wrong alignment on SQBlueprintLibrary_SetMobility");
static_assert(sizeof(SQBlueprintLibrary_SetMobility) == 0x000010, "Wrong size on SQBlueprintLibrary_SetMobility");
static_assert(offsetof(SQBlueprintLibrary_SetMobility, Target) == 0x000000, "Member 'SQBlueprintLibrary_SetMobility::Target' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SetMobility, NewMobility) == 0x000008, "Member 'SQBlueprintLibrary_SetMobility::NewMobility' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.SetMousePosition
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_SetMousePosition final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         X;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_SetMousePosition) == 0x000008, "Wrong alignment on SQBlueprintLibrary_SetMousePosition");
static_assert(sizeof(SQBlueprintLibrary_SetMousePosition) == 0x000010, "Wrong size on SQBlueprintLibrary_SetMousePosition");
static_assert(offsetof(SQBlueprintLibrary_SetMousePosition, WorldContextObject) == 0x000000, "Member 'SQBlueprintLibrary_SetMousePosition::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SetMousePosition, X) == 0x000008, "Member 'SQBlueprintLibrary_SetMousePosition::X' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SetMousePosition, Y) == 0x00000C, "Member 'SQBlueprintLibrary_SetMousePosition::Y' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.SetSkeletalMeshCanTick
// 0x0060 (0x0060 - 0x0000)
struct SQBlueprintLibrary_SetSkeletalMeshCanTick final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DEE[0x7];                                      // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class USkeletalMeshComponent*>           Exclude;                                           // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_SetSkeletalMeshCanTick) == 0x000008, "Wrong alignment on SQBlueprintLibrary_SetSkeletalMeshCanTick");
static_assert(sizeof(SQBlueprintLibrary_SetSkeletalMeshCanTick) == 0x000060, "Wrong size on SQBlueprintLibrary_SetSkeletalMeshCanTick");
static_assert(offsetof(SQBlueprintLibrary_SetSkeletalMeshCanTick, Actor) == 0x000000, "Member 'SQBlueprintLibrary_SetSkeletalMeshCanTick::Actor' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SetSkeletalMeshCanTick, bEnable) == 0x000008, "Member 'SQBlueprintLibrary_SetSkeletalMeshCanTick::bEnable' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SetSkeletalMeshCanTick, Exclude) == 0x000010, "Member 'SQBlueprintLibrary_SetSkeletalMeshCanTick::Exclude' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.SetSkeletalMeshMaxTickrate
// 0x0060 (0x0060 - 0x0000)
struct SQBlueprintLibrary_SetSkeletalMeshMaxTickrate final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tickrate;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DEF[0x4];                                      // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class USkeletalMeshComponent*>           Exclude;                                           // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_SetSkeletalMeshMaxTickrate) == 0x000008, "Wrong alignment on SQBlueprintLibrary_SetSkeletalMeshMaxTickrate");
static_assert(sizeof(SQBlueprintLibrary_SetSkeletalMeshMaxTickrate) == 0x000060, "Wrong size on SQBlueprintLibrary_SetSkeletalMeshMaxTickrate");
static_assert(offsetof(SQBlueprintLibrary_SetSkeletalMeshMaxTickrate, Actor) == 0x000000, "Member 'SQBlueprintLibrary_SetSkeletalMeshMaxTickrate::Actor' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SetSkeletalMeshMaxTickrate, Tickrate) == 0x000008, "Member 'SQBlueprintLibrary_SetSkeletalMeshMaxTickrate::Tickrate' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SetSkeletalMeshMaxTickrate, Exclude) == 0x000010, "Member 'SQBlueprintLibrary_SetSkeletalMeshMaxTickrate::Exclude' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.SetSkeletalPhysMaterialOverride
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_SetSkeletalPhysMaterialOverride final
{
public:
	class USkeletalMeshComponent*                 Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalMaterial*                      NewPhysMaterial;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_SetSkeletalPhysMaterialOverride) == 0x000008, "Wrong alignment on SQBlueprintLibrary_SetSkeletalPhysMaterialOverride");
static_assert(sizeof(SQBlueprintLibrary_SetSkeletalPhysMaterialOverride) == 0x000010, "Wrong size on SQBlueprintLibrary_SetSkeletalPhysMaterialOverride");
static_assert(offsetof(SQBlueprintLibrary_SetSkeletalPhysMaterialOverride, Component) == 0x000000, "Member 'SQBlueprintLibrary_SetSkeletalPhysMaterialOverride::Component' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SetSkeletalPhysMaterialOverride, NewPhysMaterial) == 0x000008, "Member 'SQBlueprintLibrary_SetSkeletalPhysMaterialOverride::NewPhysMaterial' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.SetTextureRenderTarget2DSize
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_SetTextureRenderTarget2DSize final
{
public:
	class UTextureRenderTarget2D*                 Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeX;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeY;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_SetTextureRenderTarget2DSize) == 0x000008, "Wrong alignment on SQBlueprintLibrary_SetTextureRenderTarget2DSize");
static_assert(sizeof(SQBlueprintLibrary_SetTextureRenderTarget2DSize) == 0x000010, "Wrong size on SQBlueprintLibrary_SetTextureRenderTarget2DSize");
static_assert(offsetof(SQBlueprintLibrary_SetTextureRenderTarget2DSize, Texture) == 0x000000, "Member 'SQBlueprintLibrary_SetTextureRenderTarget2DSize::Texture' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SetTextureRenderTarget2DSize, SizeX) == 0x000008, "Member 'SQBlueprintLibrary_SetTextureRenderTarget2DSize::SizeX' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SetTextureRenderTarget2DSize, SizeY) == 0x00000C, "Member 'SQBlueprintLibrary_SetTextureRenderTarget2DSize::SizeY' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.SortNameArray
// 0x0020 (0x0020 - 0x0000)
struct SQBlueprintLibrary_SortNameArray final
{
public:
	TArray<class FName>                           Array;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_SortNameArray) == 0x000008, "Wrong alignment on SQBlueprintLibrary_SortNameArray");
static_assert(sizeof(SQBlueprintLibrary_SortNameArray) == 0x000020, "Wrong size on SQBlueprintLibrary_SortNameArray");
static_assert(offsetof(SQBlueprintLibrary_SortNameArray, Array) == 0x000000, "Member 'SQBlueprintLibrary_SortNameArray::Array' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SortNameArray, ReturnValue) == 0x000010, "Member 'SQBlueprintLibrary_SortNameArray::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.SpawnLastingEffect
// 0x0038 (0x0038 - 0x0000)
struct SQBlueprintLibrary_SpawnLastingEffect final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQLastingEffect>           LastingEffect;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnRotation;                                     // 0x001C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ESpawnActorCollisionHandlingMethod            CollisionHandlingMethod;                           // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF0[0x7];                                      // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQLastingEffect*                       ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_SpawnLastingEffect) == 0x000008, "Wrong alignment on SQBlueprintLibrary_SpawnLastingEffect");
static_assert(sizeof(SQBlueprintLibrary_SpawnLastingEffect) == 0x000038, "Wrong size on SQBlueprintLibrary_SpawnLastingEffect");
static_assert(offsetof(SQBlueprintLibrary_SpawnLastingEffect, WorldContextObject) == 0x000000, "Member 'SQBlueprintLibrary_SpawnLastingEffect::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SpawnLastingEffect, LastingEffect) == 0x000008, "Member 'SQBlueprintLibrary_SpawnLastingEffect::LastingEffect' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SpawnLastingEffect, SpawnLocation) == 0x000010, "Member 'SQBlueprintLibrary_SpawnLastingEffect::SpawnLocation' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SpawnLastingEffect, SpawnRotation) == 0x00001C, "Member 'SQBlueprintLibrary_SpawnLastingEffect::SpawnRotation' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SpawnLastingEffect, CollisionHandlingMethod) == 0x000028, "Member 'SQBlueprintLibrary_SpawnLastingEffect::CollisionHandlingMethod' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SpawnLastingEffect, ReturnValue) == 0x000030, "Member 'SQBlueprintLibrary_SpawnLastingEffect::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.SpawnSoundAttachedWithParameters
// 0x0068 (0x0068 - 0x0000)
struct SQBlueprintLibrary_SpawnSoundAttachedWithParameters final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAudioComponentParam>           AudioParameters;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0034(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF1[0x2];                                      // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumeMultiplier;                                  // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      ConcurrencySettings;                               // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        ReturnValue;                                       // 0x0060(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_SpawnSoundAttachedWithParameters) == 0x000008, "Wrong alignment on SQBlueprintLibrary_SpawnSoundAttachedWithParameters");
static_assert(sizeof(SQBlueprintLibrary_SpawnSoundAttachedWithParameters) == 0x000068, "Wrong size on SQBlueprintLibrary_SpawnSoundAttachedWithParameters");
static_assert(offsetof(SQBlueprintLibrary_SpawnSoundAttachedWithParameters, Sound) == 0x000000, "Member 'SQBlueprintLibrary_SpawnSoundAttachedWithParameters::Sound' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SpawnSoundAttachedWithParameters, AttachToComponent) == 0x000008, "Member 'SQBlueprintLibrary_SpawnSoundAttachedWithParameters::AttachToComponent' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SpawnSoundAttachedWithParameters, AudioParameters) == 0x000010, "Member 'SQBlueprintLibrary_SpawnSoundAttachedWithParameters::AudioParameters' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SpawnSoundAttachedWithParameters, AttachPointName) == 0x000020, "Member 'SQBlueprintLibrary_SpawnSoundAttachedWithParameters::AttachPointName' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SpawnSoundAttachedWithParameters, Location) == 0x000028, "Member 'SQBlueprintLibrary_SpawnSoundAttachedWithParameters::Location' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SpawnSoundAttachedWithParameters, Rotation) == 0x000034, "Member 'SQBlueprintLibrary_SpawnSoundAttachedWithParameters::Rotation' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SpawnSoundAttachedWithParameters, LocationType) == 0x000040, "Member 'SQBlueprintLibrary_SpawnSoundAttachedWithParameters::LocationType' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SpawnSoundAttachedWithParameters, bStopWhenAttachedToDestroyed) == 0x000041, "Member 'SQBlueprintLibrary_SpawnSoundAttachedWithParameters::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SpawnSoundAttachedWithParameters, VolumeMultiplier) == 0x000044, "Member 'SQBlueprintLibrary_SpawnSoundAttachedWithParameters::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SpawnSoundAttachedWithParameters, PitchMultiplier) == 0x000048, "Member 'SQBlueprintLibrary_SpawnSoundAttachedWithParameters::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SpawnSoundAttachedWithParameters, StartTime) == 0x00004C, "Member 'SQBlueprintLibrary_SpawnSoundAttachedWithParameters::StartTime' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SpawnSoundAttachedWithParameters, AttenuationSettings) == 0x000050, "Member 'SQBlueprintLibrary_SpawnSoundAttachedWithParameters::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SpawnSoundAttachedWithParameters, ConcurrencySettings) == 0x000058, "Member 'SQBlueprintLibrary_SpawnSoundAttachedWithParameters::ConcurrencySettings' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SpawnSoundAttachedWithParameters, ReturnValue) == 0x000060, "Member 'SQBlueprintLibrary_SpawnSoundAttachedWithParameters::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.SQLogMessage
// 0x0020 (0x0020 - 0x0000)
struct SQBlueprintLibrary_SQLogMessage final
{
public:
	class FText                                   Message;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EBPLogSeverity                                MessageType;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF2[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_SQLogMessage) == 0x000008, "Wrong alignment on SQBlueprintLibrary_SQLogMessage");
static_assert(sizeof(SQBlueprintLibrary_SQLogMessage) == 0x000020, "Wrong size on SQBlueprintLibrary_SQLogMessage");
static_assert(offsetof(SQBlueprintLibrary_SQLogMessage, Message) == 0x000000, "Member 'SQBlueprintLibrary_SQLogMessage::Message' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SQLogMessage, MessageType) == 0x000018, "Member 'SQBlueprintLibrary_SQLogMessage::MessageType' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.SQLogOutputAndMessage
// 0x0020 (0x0020 - 0x0000)
struct SQBlueprintLibrary_SQLogOutputAndMessage final
{
public:
	const class UObject*                          Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBPLogSeverity                                Severity;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF3[0x7];                                      // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_SQLogOutputAndMessage) == 0x000008, "Wrong alignment on SQBlueprintLibrary_SQLogOutputAndMessage");
static_assert(sizeof(SQBlueprintLibrary_SQLogOutputAndMessage) == 0x000020, "Wrong size on SQBlueprintLibrary_SQLogOutputAndMessage");
static_assert(offsetof(SQBlueprintLibrary_SQLogOutputAndMessage, Target) == 0x000000, "Member 'SQBlueprintLibrary_SQLogOutputAndMessage::Target' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SQLogOutputAndMessage, Severity) == 0x000008, "Member 'SQBlueprintLibrary_SQLogOutputAndMessage::Severity' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_SQLogOutputAndMessage, Message) == 0x000010, "Member 'SQBlueprintLibrary_SQLogOutputAndMessage::Message' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.TransformPiPScopeUVToWorldPos
// 0x0020 (0x0020 - 0x0000)
struct SQBlueprintLibrary_TransformPiPScopeUVToWorldPos final
{
public:
	const class USQPipScopeCaptureComponent*      PiPComponent;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UV;                                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF4[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_TransformPiPScopeUVToWorldPos) == 0x000008, "Wrong alignment on SQBlueprintLibrary_TransformPiPScopeUVToWorldPos");
static_assert(sizeof(SQBlueprintLibrary_TransformPiPScopeUVToWorldPos) == 0x000020, "Wrong size on SQBlueprintLibrary_TransformPiPScopeUVToWorldPos");
static_assert(offsetof(SQBlueprintLibrary_TransformPiPScopeUVToWorldPos, PiPComponent) == 0x000000, "Member 'SQBlueprintLibrary_TransformPiPScopeUVToWorldPos::PiPComponent' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_TransformPiPScopeUVToWorldPos, UV) == 0x000008, "Member 'SQBlueprintLibrary_TransformPiPScopeUVToWorldPos::UV' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_TransformPiPScopeUVToWorldPos, ReturnValue) == 0x000010, "Member 'SQBlueprintLibrary_TransformPiPScopeUVToWorldPos::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.TransformPointToNewFOV
// 0x0070 (0x0070 - 0x0000)
struct SQBlueprintLibrary_TransformPointToNewFOV final
{
public:
	struct FVector                                WorldPos;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF5[0x4];                                      // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                ViewMatrix;                                        // 0x0010(0x0040)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PlayerFOV;                                         // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SeparateWeaponFOV;                                 // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0058(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF6[0xC];                                      // 0x0064(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_TransformPointToNewFOV) == 0x000010, "Wrong alignment on SQBlueprintLibrary_TransformPointToNewFOV");
static_assert(sizeof(SQBlueprintLibrary_TransformPointToNewFOV) == 0x000070, "Wrong size on SQBlueprintLibrary_TransformPointToNewFOV");
static_assert(offsetof(SQBlueprintLibrary_TransformPointToNewFOV, WorldPos) == 0x000000, "Member 'SQBlueprintLibrary_TransformPointToNewFOV::WorldPos' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_TransformPointToNewFOV, ViewMatrix) == 0x000010, "Member 'SQBlueprintLibrary_TransformPointToNewFOV::ViewMatrix' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_TransformPointToNewFOV, PlayerFOV) == 0x000050, "Member 'SQBlueprintLibrary_TransformPointToNewFOV::PlayerFOV' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_TransformPointToNewFOV, SeparateWeaponFOV) == 0x000054, "Member 'SQBlueprintLibrary_TransformPointToNewFOV::SeparateWeaponFOV' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_TransformPointToNewFOV, ReturnValue) == 0x000058, "Member 'SQBlueprintLibrary_TransformPointToNewFOV::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.TransformWorldPosToPiPScopeWorldPos
// 0x0028 (0x0028 - 0x0000)
struct SQBlueprintLibrary_TransformWorldPosToPiPScopeWorldPos final
{
public:
	class USQPipScopeCaptureComponent*            PiPComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldPos;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutUVPoint;                                        // 0x0014(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_TransformWorldPosToPiPScopeWorldPos) == 0x000008, "Wrong alignment on SQBlueprintLibrary_TransformWorldPosToPiPScopeWorldPos");
static_assert(sizeof(SQBlueprintLibrary_TransformWorldPosToPiPScopeWorldPos) == 0x000028, "Wrong size on SQBlueprintLibrary_TransformWorldPosToPiPScopeWorldPos");
static_assert(offsetof(SQBlueprintLibrary_TransformWorldPosToPiPScopeWorldPos, PiPComponent) == 0x000000, "Member 'SQBlueprintLibrary_TransformWorldPosToPiPScopeWorldPos::PiPComponent' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_TransformWorldPosToPiPScopeWorldPos, WorldPos) == 0x000008, "Member 'SQBlueprintLibrary_TransformWorldPosToPiPScopeWorldPos::WorldPos' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_TransformWorldPosToPiPScopeWorldPos, OutUVPoint) == 0x000014, "Member 'SQBlueprintLibrary_TransformWorldPosToPiPScopeWorldPos::OutUVPoint' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_TransformWorldPosToPiPScopeWorldPos, ReturnValue) == 0x00001C, "Member 'SQBlueprintLibrary_TransformWorldPosToPiPScopeWorldPos::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.TransformWorldVectorToTangent
// 0x003C (0x003C - 0x0000)
struct SQBlueprintLibrary_TransformWorldVectorToTangent final
{
public:
	struct FVector                                WorldVector;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldTangentX;                                     // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldTangentY;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldTangentNormal;                                // 0x0024(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0030(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_TransformWorldVectorToTangent) == 0x000004, "Wrong alignment on SQBlueprintLibrary_TransformWorldVectorToTangent");
static_assert(sizeof(SQBlueprintLibrary_TransformWorldVectorToTangent) == 0x00003C, "Wrong size on SQBlueprintLibrary_TransformWorldVectorToTangent");
static_assert(offsetof(SQBlueprintLibrary_TransformWorldVectorToTangent, WorldVector) == 0x000000, "Member 'SQBlueprintLibrary_TransformWorldVectorToTangent::WorldVector' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_TransformWorldVectorToTangent, WorldTangentX) == 0x00000C, "Member 'SQBlueprintLibrary_TransformWorldVectorToTangent::WorldTangentX' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_TransformWorldVectorToTangent, WorldTangentY) == 0x000018, "Member 'SQBlueprintLibrary_TransformWorldVectorToTangent::WorldTangentY' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_TransformWorldVectorToTangent, WorldTangentNormal) == 0x000024, "Member 'SQBlueprintLibrary_TransformWorldVectorToTangent::WorldTangentNormal' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_TransformWorldVectorToTangent, ReturnValue) == 0x000030, "Member 'SQBlueprintLibrary_TransformWorldVectorToTangent::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.TryGetDefaultObjectFor
// 0x0018 (0x0018 - 0x0000)
struct SQBlueprintLibrary_TryGetDefaultObjectFor final
{
public:
	TSubclassOf<class UObject>                    Param_Class;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OutDefaultObject;                                  // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF7[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBlueprintLibrary_TryGetDefaultObjectFor) == 0x000008, "Wrong alignment on SQBlueprintLibrary_TryGetDefaultObjectFor");
static_assert(sizeof(SQBlueprintLibrary_TryGetDefaultObjectFor) == 0x000018, "Wrong size on SQBlueprintLibrary_TryGetDefaultObjectFor");
static_assert(offsetof(SQBlueprintLibrary_TryGetDefaultObjectFor, Param_Class) == 0x000000, "Member 'SQBlueprintLibrary_TryGetDefaultObjectFor::Param_Class' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_TryGetDefaultObjectFor, OutDefaultObject) == 0x000008, "Member 'SQBlueprintLibrary_TryGetDefaultObjectFor::OutDefaultObject' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_TryGetDefaultObjectFor, ReturnValue) == 0x000010, "Member 'SQBlueprintLibrary_TryGetDefaultObjectFor::ReturnValue' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.UpdateDynamicEasing
// 0x0018 (0x0018 - 0x0000)
struct SQBlueprintLibrary_UpdateDynamicEasing final
{
public:
	struct FSQDynamicEasingStruct                 Easing;                                            // 0x0000(0x0014)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_UpdateDynamicEasing) == 0x000004, "Wrong alignment on SQBlueprintLibrary_UpdateDynamicEasing");
static_assert(sizeof(SQBlueprintLibrary_UpdateDynamicEasing) == 0x000018, "Wrong size on SQBlueprintLibrary_UpdateDynamicEasing");
static_assert(offsetof(SQBlueprintLibrary_UpdateDynamicEasing, Easing) == 0x000000, "Member 'SQBlueprintLibrary_UpdateDynamicEasing::Easing' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_UpdateDynamicEasing, DeltaTime) == 0x000014, "Member 'SQBlueprintLibrary_UpdateDynamicEasing::DeltaTime' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.UpdateSpring3D
// 0x0034 (0x0034 - 0x0000)
struct SQBlueprintLibrary_UpdateSpring3D final
{
public:
	struct FSQSpringInterpStruct3D                Spring;                                            // 0x0000(0x0030)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_UpdateSpring3D) == 0x000004, "Wrong alignment on SQBlueprintLibrary_UpdateSpring3D");
static_assert(sizeof(SQBlueprintLibrary_UpdateSpring3D) == 0x000034, "Wrong size on SQBlueprintLibrary_UpdateSpring3D");
static_assert(offsetof(SQBlueprintLibrary_UpdateSpring3D, Spring) == 0x000000, "Member 'SQBlueprintLibrary_UpdateSpring3D::Spring' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_UpdateSpring3D, DeltaTime) == 0x000030, "Member 'SQBlueprintLibrary_UpdateSpring3D::DeltaTime' has a wrong offset!");

// Function Squad.SQBlueprintLibrary.UpdateTextureOnImage
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_UpdateTextureOnImage final
{
public:
	class UImage*                                 Image;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2DDynamic*                      Texture;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_UpdateTextureOnImage) == 0x000008, "Wrong alignment on SQBlueprintLibrary_UpdateTextureOnImage");
static_assert(sizeof(SQBlueprintLibrary_UpdateTextureOnImage) == 0x000010, "Wrong size on SQBlueprintLibrary_UpdateTextureOnImage");
static_assert(offsetof(SQBlueprintLibrary_UpdateTextureOnImage, Image) == 0x000000, "Member 'SQBlueprintLibrary_UpdateTextureOnImage::Image' has a wrong offset!");
static_assert(offsetof(SQBlueprintLibrary_UpdateTextureOnImage, Texture) == 0x000008, "Member 'SQBlueprintLibrary_UpdateTextureOnImage::Texture' has a wrong offset!");

// DelegateFunction Squad.SQBlueprintLibrary.AsyncLoadAssetCompleted__DelegateSignature
// 0x0028 (0x0028 - 0x0000)
struct SQBlueprintLibrary_AsyncLoadAssetCompleted__DelegateSignature final
{
public:
	TSoftClassPtr<class UClass>                   Param_Class;                                       // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_AsyncLoadAssetCompleted__DelegateSignature) == 0x000008, "Wrong alignment on SQBlueprintLibrary_AsyncLoadAssetCompleted__DelegateSignature");
static_assert(sizeof(SQBlueprintLibrary_AsyncLoadAssetCompleted__DelegateSignature) == 0x000028, "Wrong size on SQBlueprintLibrary_AsyncLoadAssetCompleted__DelegateSignature");
static_assert(offsetof(SQBlueprintLibrary_AsyncLoadAssetCompleted__DelegateSignature, Param_Class) == 0x000000, "Member 'SQBlueprintLibrary_AsyncLoadAssetCompleted__DelegateSignature::Param_Class' has a wrong offset!");

// DelegateFunction Squad.SQBlueprintLibrary.AsyncLoadAssetsCompleted__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct SQBlueprintLibrary_AsyncLoadAssetsCompleted__DelegateSignature final
{
public:
	TArray<TSoftClassPtr<class UClass>>           Classes;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlueprintLibrary_AsyncLoadAssetsCompleted__DelegateSignature) == 0x000008, "Wrong alignment on SQBlueprintLibrary_AsyncLoadAssetsCompleted__DelegateSignature");
static_assert(sizeof(SQBlueprintLibrary_AsyncLoadAssetsCompleted__DelegateSignature) == 0x000010, "Wrong size on SQBlueprintLibrary_AsyncLoadAssetsCompleted__DelegateSignature");
static_assert(offsetof(SQBlueprintLibrary_AsyncLoadAssetsCompleted__DelegateSignature, Classes) == 0x000000, "Member 'SQBlueprintLibrary_AsyncLoadAssetsCompleted__DelegateSignature::Classes' has a wrong offset!");

// Function Squad.SQMovementAdjustmentComponent.OnBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct SQMovementAdjustmentComponent_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF9[0x3];                                      // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMovementAdjustmentComponent_OnBeginOverlap) == 0x000008, "Wrong alignment on SQMovementAdjustmentComponent_OnBeginOverlap");
static_assert(sizeof(SQMovementAdjustmentComponent_OnBeginOverlap) == 0x0000A8, "Wrong size on SQMovementAdjustmentComponent_OnBeginOverlap");
static_assert(offsetof(SQMovementAdjustmentComponent_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'SQMovementAdjustmentComponent_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SQMovementAdjustmentComponent_OnBeginOverlap, OtherActor) == 0x000008, "Member 'SQMovementAdjustmentComponent_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SQMovementAdjustmentComponent_OnBeginOverlap, OtherComp) == 0x000010, "Member 'SQMovementAdjustmentComponent_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(SQMovementAdjustmentComponent_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'SQMovementAdjustmentComponent_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SQMovementAdjustmentComponent_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'SQMovementAdjustmentComponent_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(SQMovementAdjustmentComponent_OnBeginOverlap, SweepResult) == 0x000020, "Member 'SQMovementAdjustmentComponent_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function Squad.SQMovementAdjustmentComponent.OnEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct SQMovementAdjustmentComponent_OnEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DFA[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQMovementAdjustmentComponent_OnEndOverlap) == 0x000008, "Wrong alignment on SQMovementAdjustmentComponent_OnEndOverlap");
static_assert(sizeof(SQMovementAdjustmentComponent_OnEndOverlap) == 0x000020, "Wrong size on SQMovementAdjustmentComponent_OnEndOverlap");
static_assert(offsetof(SQMovementAdjustmentComponent_OnEndOverlap, OverlappedComponent) == 0x000000, "Member 'SQMovementAdjustmentComponent_OnEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SQMovementAdjustmentComponent_OnEndOverlap, OtherActor) == 0x000008, "Member 'SQMovementAdjustmentComponent_OnEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SQMovementAdjustmentComponent_OnEndOverlap, OtherComp) == 0x000010, "Member 'SQMovementAdjustmentComponent_OnEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(SQMovementAdjustmentComponent_OnEndOverlap, OtherBodyIndex) == 0x000018, "Member 'SQMovementAdjustmentComponent_OnEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function Squad.SQSettings.GetLogId
// 0x0010 (0x0010 - 0x0000)
struct SQSettings_GetLogId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSettings_GetLogId) == 0x000008, "Wrong alignment on SQSettings_GetLogId");
static_assert(sizeof(SQSettings_GetLogId) == 0x000010, "Wrong size on SQSettings_GetLogId");
static_assert(offsetof(SQSettings_GetLogId, ReturnValue) == 0x000000, "Member 'SQSettings_GetLogId::ReturnValue' has a wrong offset!");

// Function Squad.SQSettings.GetModID
// 0x0010 (0x0010 - 0x0000)
struct SQSettings_GetModID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSettings_GetModID) == 0x000008, "Wrong alignment on SQSettings_GetModID");
static_assert(sizeof(SQSettings_GetModID) == 0x000010, "Wrong size on SQSettings_GetModID");
static_assert(offsetof(SQSettings_GetModID, ReturnValue) == 0x000000, "Member 'SQSettings_GetModID::ReturnValue' has a wrong offset!");

// Function Squad.SQSettings.GetDisplayName
// 0x0020 (0x0020 - 0x0000)
struct SQSettings_GetDisplayName final
{
public:
	class FText                                   OutDisplayName;                                    // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DFC[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSettings_GetDisplayName) == 0x000008, "Wrong alignment on SQSettings_GetDisplayName");
static_assert(sizeof(SQSettings_GetDisplayName) == 0x000020, "Wrong size on SQSettings_GetDisplayName");
static_assert(offsetof(SQSettings_GetDisplayName, OutDisplayName) == 0x000000, "Member 'SQSettings_GetDisplayName::OutDisplayName' has a wrong offset!");
static_assert(offsetof(SQSettings_GetDisplayName, ReturnValue) == 0x000018, "Member 'SQSettings_GetDisplayName::ReturnValue' has a wrong offset!");

// Function Squad.SQSettings.GetId
// 0x0008 (0x0008 - 0x0000)
struct SQSettings_GetId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSettings_GetId) == 0x000004, "Wrong alignment on SQSettings_GetId");
static_assert(sizeof(SQSettings_GetId) == 0x000008, "Wrong size on SQSettings_GetId");
static_assert(offsetof(SQSettings_GetId, ReturnValue) == 0x000000, "Member 'SQSettings_GetId::ReturnValue' has a wrong offset!");

// Function Squad.SQSettings.GetIdAsString
// 0x0010 (0x0010 - 0x0000)
struct SQSettings_GetIdAsString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSettings_GetIdAsString) == 0x000008, "Wrong alignment on SQSettings_GetIdAsString");
static_assert(sizeof(SQSettings_GetIdAsString) == 0x000010, "Wrong size on SQSettings_GetIdAsString");
static_assert(offsetof(SQSettings_GetIdAsString, ReturnValue) == 0x000000, "Member 'SQSettings_GetIdAsString::ReturnValue' has a wrong offset!");

// Function Squad.SQPawn.BlueprintCalcCamera
// 0x003C (0x003C - 0x0000)
struct SQPawn_BlueprintCalcCamera final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InFOV;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutLocation;                                       // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OutRotation;                                       // 0x002C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         OutFOV;                                            // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPawn_BlueprintCalcCamera) == 0x000004, "Wrong alignment on SQPawn_BlueprintCalcCamera");
static_assert(sizeof(SQPawn_BlueprintCalcCamera) == 0x00003C, "Wrong size on SQPawn_BlueprintCalcCamera");
static_assert(offsetof(SQPawn_BlueprintCalcCamera, DeltaTime) == 0x000000, "Member 'SQPawn_BlueprintCalcCamera::DeltaTime' has a wrong offset!");
static_assert(offsetof(SQPawn_BlueprintCalcCamera, InLocation) == 0x000004, "Member 'SQPawn_BlueprintCalcCamera::InLocation' has a wrong offset!");
static_assert(offsetof(SQPawn_BlueprintCalcCamera, InRotation) == 0x000010, "Member 'SQPawn_BlueprintCalcCamera::InRotation' has a wrong offset!");
static_assert(offsetof(SQPawn_BlueprintCalcCamera, InFOV) == 0x00001C, "Member 'SQPawn_BlueprintCalcCamera::InFOV' has a wrong offset!");
static_assert(offsetof(SQPawn_BlueprintCalcCamera, OutLocation) == 0x000020, "Member 'SQPawn_BlueprintCalcCamera::OutLocation' has a wrong offset!");
static_assert(offsetof(SQPawn_BlueprintCalcCamera, OutRotation) == 0x00002C, "Member 'SQPawn_BlueprintCalcCamera::OutRotation' has a wrong offset!");
static_assert(offsetof(SQPawn_BlueprintCalcCamera, OutFOV) == 0x000038, "Member 'SQPawn_BlueprintCalcCamera::OutFOV' has a wrong offset!");

// Function Squad.SQPawn.SetTeam
// 0x0001 (0x0001 - 0x0000)
struct SQPawn_SetTeam final
{
public:
	ESQTeam                                       Param_Team;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPawn_SetTeam) == 0x000001, "Wrong alignment on SQPawn_SetTeam");
static_assert(sizeof(SQPawn_SetTeam) == 0x000001, "Wrong size on SQPawn_SetTeam");
static_assert(offsetof(SQPawn_SetTeam, Param_Team) == 0x000000, "Member 'SQPawn_SetTeam::Param_Team' has a wrong offset!");

// Function Squad.SQPawn.GetTeam
// 0x0001 (0x0001 - 0x0000)
struct SQPawn_GetTeam final
{
public:
	ESQTeam                                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPawn_GetTeam) == 0x000001, "Wrong alignment on SQPawn_GetTeam");
static_assert(sizeof(SQPawn_GetTeam) == 0x000001, "Wrong size on SQPawn_GetTeam");
static_assert(offsetof(SQPawn_GetTeam, ReturnValue) == 0x000000, "Member 'SQPawn_GetTeam::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleSeat.GetVehicleEngine
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleSeat_GetVehicleEngine final
{
public:
	class USQVehicleComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleSeat_GetVehicleEngine) == 0x000008, "Wrong alignment on SQVehicleSeat_GetVehicleEngine");
static_assert(sizeof(SQVehicleSeat_GetVehicleEngine) == 0x000008, "Wrong size on SQVehicleSeat_GetVehicleEngine");
static_assert(offsetof(SQVehicleSeat_GetVehicleEngine, ReturnValue) == 0x000000, "Member 'SQVehicleSeat_GetVehicleEngine::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleSeat.OnRep_SeatHealth
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleSeat_OnRep_SeatHealth final
{
public:
	float                                         PreviousHealth;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleSeat_OnRep_SeatHealth) == 0x000004, "Wrong alignment on SQVehicleSeat_OnRep_SeatHealth");
static_assert(sizeof(SQVehicleSeat_OnRep_SeatHealth) == 0x000004, "Wrong size on SQVehicleSeat_OnRep_SeatHealth");
static_assert(offsetof(SQVehicleSeat_OnRep_SeatHealth, PreviousHealth) == 0x000000, "Member 'SQVehicleSeat_OnRep_SeatHealth::PreviousHealth' has a wrong offset!");

// Function Squad.SQVehicleSeat.RequestChangeSeat
// 0x0010 (0x0010 - 0x0000)
struct SQVehicleSeat_RequestChangeSeat final
{
public:
	class ASQPlayerController*                    Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequestedSeat;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0B[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVehicleSeat_RequestChangeSeat) == 0x000008, "Wrong alignment on SQVehicleSeat_RequestChangeSeat");
static_assert(sizeof(SQVehicleSeat_RequestChangeSeat) == 0x000010, "Wrong size on SQVehicleSeat_RequestChangeSeat");
static_assert(offsetof(SQVehicleSeat_RequestChangeSeat, Player) == 0x000000, "Member 'SQVehicleSeat_RequestChangeSeat::Player' has a wrong offset!");
static_assert(offsetof(SQVehicleSeat_RequestChangeSeat, RequestedSeat) == 0x000008, "Member 'SQVehicleSeat_RequestChangeSeat::RequestedSeat' has a wrong offset!");

// Function Squad.SQVehicleSeat.ServerCancelPlayerExit
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleSeat_ServerCancelPlayerExit final
{
public:
	class ASQPlayerController*                    SPC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleSeat_ServerCancelPlayerExit) == 0x000008, "Wrong alignment on SQVehicleSeat_ServerCancelPlayerExit");
static_assert(sizeof(SQVehicleSeat_ServerCancelPlayerExit) == 0x000008, "Wrong size on SQVehicleSeat_ServerCancelPlayerExit");
static_assert(offsetof(SQVehicleSeat_ServerCancelPlayerExit, SPC) == 0x000000, "Member 'SQVehicleSeat_ServerCancelPlayerExit::SPC' has a wrong offset!");

// Function Squad.SQVehicleSeat.ServerSetTurnOut
// 0x0001 (0x0001 - 0x0000)
struct SQVehicleSeat_ServerSetTurnOut final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleSeat_ServerSetTurnOut) == 0x000001, "Wrong alignment on SQVehicleSeat_ServerSetTurnOut");
static_assert(sizeof(SQVehicleSeat_ServerSetTurnOut) == 0x000001, "Wrong size on SQVehicleSeat_ServerSetTurnOut");
static_assert(offsetof(SQVehicleSeat_ServerSetTurnOut, bEnabled) == 0x000000, "Member 'SQVehicleSeat_ServerSetTurnOut::bEnabled' has a wrong offset!");

// Function Squad.SQVehicleSeat.SetTurnOut
// 0x0001 (0x0001 - 0x0000)
struct SQVehicleSeat_SetTurnOut final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleSeat_SetTurnOut) == 0x000001, "Wrong alignment on SQVehicleSeat_SetTurnOut");
static_assert(sizeof(SQVehicleSeat_SetTurnOut) == 0x000001, "Wrong size on SQVehicleSeat_SetTurnOut");
static_assert(offsetof(SQVehicleSeat_SetTurnOut, bEnabled) == 0x000000, "Member 'SQVehicleSeat_SetTurnOut::bEnabled' has a wrong offset!");

// Function Squad.SQVehicleSeat.Get1PAttachComponent
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleSeat_Get1PAttachComponent final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleSeat_Get1PAttachComponent) == 0x000008, "Wrong alignment on SQVehicleSeat_Get1PAttachComponent");
static_assert(sizeof(SQVehicleSeat_Get1PAttachComponent) == 0x000008, "Wrong size on SQVehicleSeat_Get1PAttachComponent");
static_assert(offsetof(SQVehicleSeat_Get1PAttachComponent, ReturnValue) == 0x000000, "Member 'SQVehicleSeat_Get1PAttachComponent::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleSeat.Get3PAttachComponent
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleSeat_Get3PAttachComponent final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleSeat_Get3PAttachComponent) == 0x000008, "Wrong alignment on SQVehicleSeat_Get3PAttachComponent");
static_assert(sizeof(SQVehicleSeat_Get3PAttachComponent) == 0x000008, "Wrong size on SQVehicleSeat_Get3PAttachComponent");
static_assert(offsetof(SQVehicleSeat_Get3PAttachComponent, ReturnValue) == 0x000000, "Member 'SQVehicleSeat_Get3PAttachComponent::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleSeat.GetADSCameraLocationComponent
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleSeat_GetADSCameraLocationComponent final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleSeat_GetADSCameraLocationComponent) == 0x000008, "Wrong alignment on SQVehicleSeat_GetADSCameraLocationComponent");
static_assert(sizeof(SQVehicleSeat_GetADSCameraLocationComponent) == 0x000008, "Wrong size on SQVehicleSeat_GetADSCameraLocationComponent");
static_assert(offsetof(SQVehicleSeat_GetADSCameraLocationComponent, ReturnValue) == 0x000000, "Member 'SQVehicleSeat_GetADSCameraLocationComponent::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleSeat.GetCameraComponent
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleSeat_GetCameraComponent final
{
public:
	class UCameraComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleSeat_GetCameraComponent) == 0x000008, "Wrong alignment on SQVehicleSeat_GetCameraComponent");
static_assert(sizeof(SQVehicleSeat_GetCameraComponent) == 0x000008, "Wrong size on SQVehicleSeat_GetCameraComponent");
static_assert(offsetof(SQVehicleSeat_GetCameraComponent, ReturnValue) == 0x000000, "Member 'SQVehicleSeat_GetCameraComponent::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleSeat.GetDefaultCameraLocationComponent
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleSeat_GetDefaultCameraLocationComponent final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleSeat_GetDefaultCameraLocationComponent) == 0x000008, "Wrong alignment on SQVehicleSeat_GetDefaultCameraLocationComponent");
static_assert(sizeof(SQVehicleSeat_GetDefaultCameraLocationComponent) == 0x000008, "Wrong size on SQVehicleSeat_GetDefaultCameraLocationComponent");
static_assert(offsetof(SQVehicleSeat_GetDefaultCameraLocationComponent, ReturnValue) == 0x000000, "Member 'SQVehicleSeat_GetDefaultCameraLocationComponent::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleSeat.GetMasterPoseComponent
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleSeat_GetMasterPoseComponent final
{
public:
	class USkinnedMeshComponent*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleSeat_GetMasterPoseComponent) == 0x000008, "Wrong alignment on SQVehicleSeat_GetMasterPoseComponent");
static_assert(sizeof(SQVehicleSeat_GetMasterPoseComponent) == 0x000008, "Wrong size on SQVehicleSeat_GetMasterPoseComponent");
static_assert(offsetof(SQVehicleSeat_GetMasterPoseComponent, ReturnValue) == 0x000000, "Member 'SQVehicleSeat_GetMasterPoseComponent::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleSeat.GetNormalizedSeatHealth
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleSeat_GetNormalizedSeatHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleSeat_GetNormalizedSeatHealth) == 0x000004, "Wrong alignment on SQVehicleSeat_GetNormalizedSeatHealth");
static_assert(sizeof(SQVehicleSeat_GetNormalizedSeatHealth) == 0x000004, "Wrong size on SQVehicleSeat_GetNormalizedSeatHealth");
static_assert(offsetof(SQVehicleSeat_GetNormalizedSeatHealth, ReturnValue) == 0x000000, "Member 'SQVehicleSeat_GetNormalizedSeatHealth::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleSeat.GetSeatHealth
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleSeat_GetSeatHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleSeat_GetSeatHealth) == 0x000004, "Wrong alignment on SQVehicleSeat_GetSeatHealth");
static_assert(sizeof(SQVehicleSeat_GetSeatHealth) == 0x000004, "Wrong size on SQVehicleSeat_GetSeatHealth");
static_assert(offsetof(SQVehicleSeat_GetSeatHealth, ReturnValue) == 0x000000, "Member 'SQVehicleSeat_GetSeatHealth::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleSeat.GetSoldierAttachComponent
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleSeat_GetSoldierAttachComponent final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleSeat_GetSoldierAttachComponent) == 0x000008, "Wrong alignment on SQVehicleSeat_GetSoldierAttachComponent");
static_assert(sizeof(SQVehicleSeat_GetSoldierAttachComponent) == 0x000008, "Wrong size on SQVehicleSeat_GetSoldierAttachComponent");
static_assert(offsetof(SQVehicleSeat_GetSoldierAttachComponent, ReturnValue) == 0x000000, "Member 'SQVehicleSeat_GetSoldierAttachComponent::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleSeat.GetVehicle
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleSeat_GetVehicle final
{
public:
	class ASQVehicle*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleSeat_GetVehicle) == 0x000008, "Wrong alignment on SQVehicleSeat_GetVehicle");
static_assert(sizeof(SQVehicleSeat_GetVehicle) == 0x000008, "Wrong size on SQVehicleSeat_GetVehicle");
static_assert(offsetof(SQVehicleSeat_GetVehicle, ReturnValue) == 0x000000, "Member 'SQVehicleSeat_GetVehicle::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleSeat.GetVehicleInventory
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleSeat_GetVehicleInventory final
{
public:
	class USQVehicleInventoryComponent*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleSeat_GetVehicleInventory) == 0x000008, "Wrong alignment on SQVehicleSeat_GetVehicleInventory");
static_assert(sizeof(SQVehicleSeat_GetVehicleInventory) == 0x000008, "Wrong size on SQVehicleSeat_GetVehicleInventory");
static_assert(offsetof(SQVehicleSeat_GetVehicleInventory, ReturnValue) == 0x000000, "Member 'SQVehicleSeat_GetVehicleInventory::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleSeat.GetVehicleResourceInventory
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleSeat_GetVehicleResourceInventory final
{
public:
	class USQVehicleResourceWeaponInventoryComponent* ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleSeat_GetVehicleResourceInventory) == 0x000008, "Wrong alignment on SQVehicleSeat_GetVehicleResourceInventory");
static_assert(sizeof(SQVehicleSeat_GetVehicleResourceInventory) == 0x000008, "Wrong size on SQVehicleSeat_GetVehicleResourceInventory");
static_assert(offsetof(SQVehicleSeat_GetVehicleResourceInventory, ReturnValue) == 0x000000, "Member 'SQVehicleSeat_GetVehicleResourceInventory::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleSeat.GetVehicleSeatComponent
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleSeat_GetVehicleSeatComponent final
{
public:
	class USQVehicleSeatComponent*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleSeat_GetVehicleSeatComponent) == 0x000008, "Wrong alignment on SQVehicleSeat_GetVehicleSeatComponent");
static_assert(sizeof(SQVehicleSeat_GetVehicleSeatComponent) == 0x000008, "Wrong size on SQVehicleSeat_GetVehicleSeatComponent");
static_assert(offsetof(SQVehicleSeat_GetVehicleSeatComponent, ReturnValue) == 0x000000, "Member 'SQVehicleSeat_GetVehicleSeatComponent::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleSeat.GetWeaponAttachComponent
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleSeat_GetWeaponAttachComponent final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleSeat_GetWeaponAttachComponent) == 0x000008, "Wrong alignment on SQVehicleSeat_GetWeaponAttachComponent");
static_assert(sizeof(SQVehicleSeat_GetWeaponAttachComponent) == 0x000008, "Wrong size on SQVehicleSeat_GetWeaponAttachComponent");
static_assert(offsetof(SQVehicleSeat_GetWeaponAttachComponent, ReturnValue) == 0x000000, "Member 'SQVehicleSeat_GetWeaponAttachComponent::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicle.BurnVehicle
// 0x0010 (0x0010 - 0x0000)
struct SQVehicle_BurnVehicle final
{
public:
	float                                         VehicleBurnAmount;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoldierBurnAmount;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            BurnCauser;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicle_BurnVehicle) == 0x000008, "Wrong alignment on SQVehicle_BurnVehicle");
static_assert(sizeof(SQVehicle_BurnVehicle) == 0x000010, "Wrong size on SQVehicle_BurnVehicle");
static_assert(offsetof(SQVehicle_BurnVehicle, VehicleBurnAmount) == 0x000000, "Member 'SQVehicle_BurnVehicle::VehicleBurnAmount' has a wrong offset!");
static_assert(offsetof(SQVehicle_BurnVehicle, SoldierBurnAmount) == 0x000004, "Member 'SQVehicle_BurnVehicle::SoldierBurnAmount' has a wrong offset!");
static_assert(offsetof(SQVehicle_BurnVehicle, BurnCauser) == 0x000008, "Member 'SQVehicle_BurnVehicle::BurnCauser' has a wrong offset!");

// Function Squad.SQVehicle.CanActAsRearmSource
// 0x0001 (0x0001 - 0x0000)
struct SQVehicle_CanActAsRearmSource final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicle_CanActAsRearmSource) == 0x000001, "Wrong alignment on SQVehicle_CanActAsRearmSource");
static_assert(sizeof(SQVehicle_CanActAsRearmSource) == 0x000001, "Wrong size on SQVehicle_CanActAsRearmSource");
static_assert(offsetof(SQVehicle_CanActAsRearmSource, ReturnValue) == 0x000000, "Member 'SQVehicle_CanActAsRearmSource::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicle.DrivetrainComponentDestroyed
// 0x0008 (0x0008 - 0x0000)
struct SQVehicle_DrivetrainComponentDestroyed final
{
public:
	class USQDriveTrainComponent*                 DriveTrainComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicle_DrivetrainComponentDestroyed) == 0x000008, "Wrong alignment on SQVehicle_DrivetrainComponentDestroyed");
static_assert(sizeof(SQVehicle_DrivetrainComponentDestroyed) == 0x000008, "Wrong size on SQVehicle_DrivetrainComponentDestroyed");
static_assert(offsetof(SQVehicle_DrivetrainComponentDestroyed, DriveTrainComponent) == 0x000000, "Member 'SQVehicle_DrivetrainComponentDestroyed::DriveTrainComponent' has a wrong offset!");

// Function Squad.SQVehicle.DrivetrainComponentRepaired
// 0x0008 (0x0008 - 0x0000)
struct SQVehicle_DrivetrainComponentRepaired final
{
public:
	class USQDriveTrainComponent*                 DriveTrainComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicle_DrivetrainComponentRepaired) == 0x000008, "Wrong alignment on SQVehicle_DrivetrainComponentRepaired");
static_assert(sizeof(SQVehicle_DrivetrainComponentRepaired) == 0x000008, "Wrong size on SQVehicle_DrivetrainComponentRepaired");
static_assert(offsetof(SQVehicle_DrivetrainComponentRepaired, DriveTrainComponent) == 0x000000, "Member 'SQVehicle_DrivetrainComponentRepaired::DriveTrainComponent' has a wrong offset!");

// Function Squad.SQVehicle.EjectPlayerFromSeat
// 0x0004 (0x0004 - 0x0000)
struct SQVehicle_EjectPlayerFromSeat final
{
public:
	int32                                         Seat;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicle_EjectPlayerFromSeat) == 0x000004, "Wrong alignment on SQVehicle_EjectPlayerFromSeat");
static_assert(sizeof(SQVehicle_EjectPlayerFromSeat) == 0x000004, "Wrong size on SQVehicle_EjectPlayerFromSeat");
static_assert(offsetof(SQVehicle_EjectPlayerFromSeat, Seat) == 0x000000, "Member 'SQVehicle_EjectPlayerFromSeat::Seat' has a wrong offset!");

// Function Squad.SQVehicle.EnteredVehicle
// 0x0010 (0x0010 - 0x0000)
struct SQVehicle_EnteredVehicle final
{
public:
	class ASQSoldier*                             Soldier;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQVehicleSeatComponent*                NewSeat;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicle_EnteredVehicle) == 0x000008, "Wrong alignment on SQVehicle_EnteredVehicle");
static_assert(sizeof(SQVehicle_EnteredVehicle) == 0x000010, "Wrong size on SQVehicle_EnteredVehicle");
static_assert(offsetof(SQVehicle_EnteredVehicle, Soldier) == 0x000000, "Member 'SQVehicle_EnteredVehicle::Soldier' has a wrong offset!");
static_assert(offsetof(SQVehicle_EnteredVehicle, NewSeat) == 0x000008, "Member 'SQVehicle_EnteredVehicle::NewSeat' has a wrong offset!");

// Function Squad.SQVehicle.EnterTurnOut
// 0x0008 (0x0008 - 0x0000)
struct SQVehicle_EnterTurnOut final
{
public:
	class USQVehicleSeatComponent*                Seat;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicle_EnterTurnOut) == 0x000008, "Wrong alignment on SQVehicle_EnterTurnOut");
static_assert(sizeof(SQVehicle_EnterTurnOut) == 0x000008, "Wrong size on SQVehicle_EnterTurnOut");
static_assert(offsetof(SQVehicle_EnterTurnOut, Seat) == 0x000000, "Member 'SQVehicle_EnterTurnOut::Seat' has a wrong offset!");

// Function Squad.SQVehicle.ExitTurnOut
// 0x0008 (0x0008 - 0x0000)
struct SQVehicle_ExitTurnOut final
{
public:
	class USQVehicleSeatComponent*                Seat;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicle_ExitTurnOut) == 0x000008, "Wrong alignment on SQVehicle_ExitTurnOut");
static_assert(sizeof(SQVehicle_ExitTurnOut) == 0x000008, "Wrong size on SQVehicle_ExitTurnOut");
static_assert(offsetof(SQVehicle_ExitTurnOut, Seat) == 0x000000, "Member 'SQVehicle_ExitTurnOut::Seat' has a wrong offset!");

// Function Squad.SQVehicle.FindFirstAvailableSeat
// 0x0010 (0x0010 - 0x0000)
struct SQVehicle_FindFirstAvailableSeat final
{
public:
	class ASQPlayerController*                    SPC;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeDriverSeat;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E20[0x3];                                      // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicle_FindFirstAvailableSeat) == 0x000008, "Wrong alignment on SQVehicle_FindFirstAvailableSeat");
static_assert(sizeof(SQVehicle_FindFirstAvailableSeat) == 0x000010, "Wrong size on SQVehicle_FindFirstAvailableSeat");
static_assert(offsetof(SQVehicle_FindFirstAvailableSeat, SPC) == 0x000000, "Member 'SQVehicle_FindFirstAvailableSeat::SPC' has a wrong offset!");
static_assert(offsetof(SQVehicle_FindFirstAvailableSeat, bIncludeDriverSeat) == 0x000008, "Member 'SQVehicle_FindFirstAvailableSeat::bIncludeDriverSeat' has a wrong offset!");
static_assert(offsetof(SQVehicle_FindFirstAvailableSeat, ReturnValue) == 0x00000C, "Member 'SQVehicle_FindFirstAvailableSeat::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicle.GetExitPoints
// 0x0010 (0x0010 - 0x0000)
struct SQVehicle_GetExitPoints final
{
public:
	TArray<class USQVehicleExitPointComponent*>   OutExitPoints;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicle_GetExitPoints) == 0x000008, "Wrong alignment on SQVehicle_GetExitPoints");
static_assert(sizeof(SQVehicle_GetExitPoints) == 0x000010, "Wrong size on SQVehicle_GetExitPoints");
static_assert(offsetof(SQVehicle_GetExitPoints, OutExitPoints) == 0x000000, "Member 'SQVehicle_GetExitPoints::OutExitPoints' has a wrong offset!");

// Function Squad.SQVehicle.LeftVehicle
// 0x0010 (0x0010 - 0x0000)
struct SQVehicle_LeftVehicle final
{
public:
	class ASQSoldier*                             Soldier;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQVehicleSeatComponent*                PreviousSeat;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicle_LeftVehicle) == 0x000008, "Wrong alignment on SQVehicle_LeftVehicle");
static_assert(sizeof(SQVehicle_LeftVehicle) == 0x000010, "Wrong size on SQVehicle_LeftVehicle");
static_assert(offsetof(SQVehicle_LeftVehicle, Soldier) == 0x000000, "Member 'SQVehicle_LeftVehicle::Soldier' has a wrong offset!");
static_assert(offsetof(SQVehicle_LeftVehicle, PreviousSeat) == 0x000008, "Member 'SQVehicle_LeftVehicle::PreviousSeat' has a wrong offset!");

// Function Squad.SQVehicle.MulticastPlayDamageEffects
// 0x0018 (0x0018 - 0x0000)
struct SQVehicle_MulticastPlayDamageEffects final
{
public:
	TSubclassOf<class UDamageType>                DamageTypeClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpactLocationZeroBased;                           // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E21[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVehicle_MulticastPlayDamageEffects) == 0x000008, "Wrong alignment on SQVehicle_MulticastPlayDamageEffects");
static_assert(sizeof(SQVehicle_MulticastPlayDamageEffects) == 0x000018, "Wrong size on SQVehicle_MulticastPlayDamageEffects");
static_assert(offsetof(SQVehicle_MulticastPlayDamageEffects, DamageTypeClass) == 0x000000, "Member 'SQVehicle_MulticastPlayDamageEffects::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(SQVehicle_MulticastPlayDamageEffects, ImpactLocationZeroBased) == 0x000008, "Member 'SQVehicle_MulticastPlayDamageEffects::ImpactLocationZeroBased' has a wrong offset!");

// Function Squad.SQVehicle.OnEnterBoundary
// 0x0010 (0x0010 - 0x0000)
struct SQVehicle_OnEnterBoundary final
{
public:
	class USQBoundaryListener*                    Listener;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQBoundary*                            Boundary;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicle_OnEnterBoundary) == 0x000008, "Wrong alignment on SQVehicle_OnEnterBoundary");
static_assert(sizeof(SQVehicle_OnEnterBoundary) == 0x000010, "Wrong size on SQVehicle_OnEnterBoundary");
static_assert(offsetof(SQVehicle_OnEnterBoundary, Listener) == 0x000000, "Member 'SQVehicle_OnEnterBoundary::Listener' has a wrong offset!");
static_assert(offsetof(SQVehicle_OnEnterBoundary, Boundary) == 0x000008, "Member 'SQVehicle_OnEnterBoundary::Boundary' has a wrong offset!");

// Function Squad.SQVehicle.OnExitBoundary
// 0x0010 (0x0010 - 0x0000)
struct SQVehicle_OnExitBoundary final
{
public:
	class USQBoundaryListener*                    Listener;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQBoundary*                            Boundary;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicle_OnExitBoundary) == 0x000008, "Wrong alignment on SQVehicle_OnExitBoundary");
static_assert(sizeof(SQVehicle_OnExitBoundary) == 0x000010, "Wrong size on SQVehicle_OnExitBoundary");
static_assert(offsetof(SQVehicle_OnExitBoundary, Listener) == 0x000000, "Member 'SQVehicle_OnExitBoundary::Listener' has a wrong offset!");
static_assert(offsetof(SQVehicle_OnExitBoundary, Boundary) == 0x000008, "Member 'SQVehicle_OnExitBoundary::Boundary' has a wrong offset!");

// Function Squad.SQVehicle.PlayerRequestLeaveSeat
// 0x0008 (0x0008 - 0x0000)
struct SQVehicle_PlayerRequestLeaveSeat final
{
public:
	class ASQPlayerController*                    Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicle_PlayerRequestLeaveSeat) == 0x000008, "Wrong alignment on SQVehicle_PlayerRequestLeaveSeat");
static_assert(sizeof(SQVehicle_PlayerRequestLeaveSeat) == 0x000008, "Wrong size on SQVehicle_PlayerRequestLeaveSeat");
static_assert(offsetof(SQVehicle_PlayerRequestLeaveSeat, Player) == 0x000000, "Member 'SQVehicle_PlayerRequestLeaveSeat::Player' has a wrong offset!");

// Function Squad.SQVehicle.RepairVehicle
// 0x0018 (0x0018 - 0x0000)
struct SQVehicle_RepairVehicle final
{
public:
	const class AActor*                           SourceRepairer;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQRepairSource                               RepairSource;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E22[0x3];                                      // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RepairAmount;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoldierHealAmount;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E23[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVehicle_RepairVehicle) == 0x000008, "Wrong alignment on SQVehicle_RepairVehicle");
static_assert(sizeof(SQVehicle_RepairVehicle) == 0x000018, "Wrong size on SQVehicle_RepairVehicle");
static_assert(offsetof(SQVehicle_RepairVehicle, SourceRepairer) == 0x000000, "Member 'SQVehicle_RepairVehicle::SourceRepairer' has a wrong offset!");
static_assert(offsetof(SQVehicle_RepairVehicle, RepairSource) == 0x000008, "Member 'SQVehicle_RepairVehicle::RepairSource' has a wrong offset!");
static_assert(offsetof(SQVehicle_RepairVehicle, RepairAmount) == 0x00000C, "Member 'SQVehicle_RepairVehicle::RepairAmount' has a wrong offset!");
static_assert(offsetof(SQVehicle_RepairVehicle, SoldierHealAmount) == 0x000010, "Member 'SQVehicle_RepairVehicle::SoldierHealAmount' has a wrong offset!");

// Function Squad.SQVehicle.SwitchedSeat
// 0x0018 (0x0018 - 0x0000)
struct SQVehicle_SwitchedSeat final
{
public:
	class ASQSoldier*                             Soldier;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQVehicleSeatComponent*                PreviousSeat;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQVehicleSeatComponent*                NewSeat;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicle_SwitchedSeat) == 0x000008, "Wrong alignment on SQVehicle_SwitchedSeat");
static_assert(sizeof(SQVehicle_SwitchedSeat) == 0x000018, "Wrong size on SQVehicle_SwitchedSeat");
static_assert(offsetof(SQVehicle_SwitchedSeat, Soldier) == 0x000000, "Member 'SQVehicle_SwitchedSeat::Soldier' has a wrong offset!");
static_assert(offsetof(SQVehicle_SwitchedSeat, PreviousSeat) == 0x000008, "Member 'SQVehicle_SwitchedSeat::PreviousSeat' has a wrong offset!");
static_assert(offsetof(SQVehicle_SwitchedSeat, NewSeat) == 0x000010, "Member 'SQVehicle_SwitchedSeat::NewSeat' has a wrong offset!");

// Function Squad.SQVehicle.ToggleMistParticleSystemsDepthCalculation
// 0x0001 (0x0001 - 0x0000)
struct SQVehicle_ToggleMistParticleSystemsDepthCalculation final
{
public:
	bool                                          bActivate;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicle_ToggleMistParticleSystemsDepthCalculation) == 0x000001, "Wrong alignment on SQVehicle_ToggleMistParticleSystemsDepthCalculation");
static_assert(sizeof(SQVehicle_ToggleMistParticleSystemsDepthCalculation) == 0x000001, "Wrong size on SQVehicle_ToggleMistParticleSystemsDepthCalculation");
static_assert(offsetof(SQVehicle_ToggleMistParticleSystemsDepthCalculation, bActivate) == 0x000000, "Member 'SQVehicle_ToggleMistParticleSystemsDepthCalculation::bActivate' has a wrong offset!");

// Function Squad.SQVehicle.GetDriverSeat
// 0x0008 (0x0008 - 0x0000)
struct SQVehicle_GetDriverSeat final
{
public:
	class USQVehicleSeatComponent*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicle_GetDriverSeat) == 0x000008, "Wrong alignment on SQVehicle_GetDriverSeat");
static_assert(sizeof(SQVehicle_GetDriverSeat) == 0x000008, "Wrong size on SQVehicle_GetDriverSeat");
static_assert(offsetof(SQVehicle_GetDriverSeat, ReturnValue) == 0x000000, "Member 'SQVehicle_GetDriverSeat::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicle.GetEmergencyRecoveryComponent
// 0x0008 (0x0008 - 0x0000)
struct SQVehicle_GetEmergencyRecoveryComponent final
{
public:
	class USQVehicleEmergencyRecoveryComponent*   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicle_GetEmergencyRecoveryComponent) == 0x000008, "Wrong alignment on SQVehicle_GetEmergencyRecoveryComponent");
static_assert(sizeof(SQVehicle_GetEmergencyRecoveryComponent) == 0x000008, "Wrong size on SQVehicle_GetEmergencyRecoveryComponent");
static_assert(offsetof(SQVehicle_GetEmergencyRecoveryComponent, ReturnValue) == 0x000000, "Member 'SQVehicle_GetEmergencyRecoveryComponent::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicle.GetInventoryAmmoPoints
// 0x0004 (0x0004 - 0x0000)
struct SQVehicle_GetInventoryAmmoPoints final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicle_GetInventoryAmmoPoints) == 0x000004, "Wrong alignment on SQVehicle_GetInventoryAmmoPoints");
static_assert(sizeof(SQVehicle_GetInventoryAmmoPoints) == 0x000004, "Wrong size on SQVehicle_GetInventoryAmmoPoints");
static_assert(offsetof(SQVehicle_GetInventoryAmmoPoints, ReturnValue) == 0x000000, "Member 'SQVehicle_GetInventoryAmmoPoints::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicle.GetNumOccupants
// 0x0004 (0x0004 - 0x0000)
struct SQVehicle_GetNumOccupants final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicle_GetNumOccupants) == 0x000004, "Wrong alignment on SQVehicle_GetNumOccupants");
static_assert(sizeof(SQVehicle_GetNumOccupants) == 0x000004, "Wrong size on SQVehicle_GetNumOccupants");
static_assert(offsetof(SQVehicle_GetNumOccupants, ReturnValue) == 0x000000, "Member 'SQVehicle_GetNumOccupants::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicle.GetPlayersSeat
// 0x0010 (0x0010 - 0x0000)
struct SQVehicle_GetPlayersSeat final
{
public:
	const class ASQPlayerController*              Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E24[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVehicle_GetPlayersSeat) == 0x000008, "Wrong alignment on SQVehicle_GetPlayersSeat");
static_assert(sizeof(SQVehicle_GetPlayersSeat) == 0x000010, "Wrong size on SQVehicle_GetPlayersSeat");
static_assert(offsetof(SQVehicle_GetPlayersSeat, Player) == 0x000000, "Member 'SQVehicle_GetPlayersSeat::Player' has a wrong offset!");
static_assert(offsetof(SQVehicle_GetPlayersSeat, ReturnValue) == 0x000008, "Member 'SQVehicle_GetPlayersSeat::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicle.GetSeats
// 0x0010 (0x0010 - 0x0000)
struct SQVehicle_GetSeats final
{
public:
	TArray<class USQVehicleSeatComponent*>        ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicle_GetSeats) == 0x000008, "Wrong alignment on SQVehicle_GetSeats");
static_assert(sizeof(SQVehicle_GetSeats) == 0x000010, "Wrong size on SQVehicle_GetSeats");
static_assert(offsetof(SQVehicle_GetSeats, ReturnValue) == 0x000000, "Member 'SQVehicle_GetSeats::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicle.HasResourceInventory
// 0x0001 (0x0001 - 0x0000)
struct SQVehicle_HasResourceInventory final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicle_HasResourceInventory) == 0x000001, "Wrong alignment on SQVehicle_HasResourceInventory");
static_assert(sizeof(SQVehicle_HasResourceInventory) == 0x000001, "Wrong size on SQVehicle_HasResourceInventory");
static_assert(offsetof(SQVehicle_HasResourceInventory, ReturnValue) == 0x000000, "Member 'SQVehicle_HasResourceInventory::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicle.IsOutOfMapBounds
// 0x0001 (0x0001 - 0x0000)
struct SQVehicle_IsOutOfMapBounds final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicle_IsOutOfMapBounds) == 0x000001, "Wrong alignment on SQVehicle_IsOutOfMapBounds");
static_assert(sizeof(SQVehicle_IsOutOfMapBounds) == 0x000001, "Wrong size on SQVehicle_IsOutOfMapBounds");
static_assert(offsetof(SQVehicle_IsOutOfMapBounds, ReturnValue) == 0x000000, "Member 'SQVehicle_IsOutOfMapBounds::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicle.IsSeatHeldByClaimingSquad
// 0x0008 (0x0008 - 0x0000)
struct SQVehicle_IsSeatHeldByClaimingSquad final
{
public:
	int32                                         Seat;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E25[0x3];                                      // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVehicle_IsSeatHeldByClaimingSquad) == 0x000004, "Wrong alignment on SQVehicle_IsSeatHeldByClaimingSquad");
static_assert(sizeof(SQVehicle_IsSeatHeldByClaimingSquad) == 0x000008, "Wrong size on SQVehicle_IsSeatHeldByClaimingSquad");
static_assert(offsetof(SQVehicle_IsSeatHeldByClaimingSquad, Seat) == 0x000000, "Member 'SQVehicle_IsSeatHeldByClaimingSquad::Seat' has a wrong offset!");
static_assert(offsetof(SQVehicle_IsSeatHeldByClaimingSquad, ReturnValue) == 0x000004, "Member 'SQVehicle_IsSeatHeldByClaimingSquad::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicle.IsValidSeat
// 0x0008 (0x0008 - 0x0000)
struct SQVehicle_IsValidSeat final
{
public:
	int32                                         Seat;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E26[0x3];                                      // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVehicle_IsValidSeat) == 0x000004, "Wrong alignment on SQVehicle_IsValidSeat");
static_assert(sizeof(SQVehicle_IsValidSeat) == 0x000008, "Wrong size on SQVehicle_IsValidSeat");
static_assert(offsetof(SQVehicle_IsValidSeat, Seat) == 0x000000, "Member 'SQVehicle_IsValidSeat::Seat' has a wrong offset!");
static_assert(offsetof(SQVehicle_IsValidSeat, ReturnValue) == 0x000004, "Member 'SQVehicle_IsValidSeat::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicle.IsVehicleEmpty
// 0x0001 (0x0001 - 0x0000)
struct SQVehicle_IsVehicleEmpty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicle_IsVehicleEmpty) == 0x000001, "Wrong alignment on SQVehicle_IsVehicleEmpty");
static_assert(sizeof(SQVehicle_IsVehicleEmpty) == 0x000001, "Wrong size on SQVehicle_IsVehicleEmpty");
static_assert(offsetof(SQVehicle_IsVehicleEmpty, ReturnValue) == 0x000000, "Member 'SQVehicle_IsVehicleEmpty::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicle.IsVehicleFull
// 0x0001 (0x0001 - 0x0000)
struct SQVehicle_IsVehicleFull final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicle_IsVehicleFull) == 0x000001, "Wrong alignment on SQVehicle_IsVehicleFull");
static_assert(sizeof(SQVehicle_IsVehicleFull) == 0x000001, "Wrong size on SQVehicle_IsVehicleFull");
static_assert(offsetof(SQVehicle_IsVehicleFull, ReturnValue) == 0x000000, "Member 'SQVehicle_IsVehicleFull::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicle.SetEffectPhysmatParams
// 0x0010 (0x0010 - 0x0000)
struct SQVehicle_SetEffectPhysmatParams final
{
public:
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQPhysicalMaterial*                    SQPhysMat;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicle_SetEffectPhysmatParams) == 0x000008, "Wrong alignment on SQVehicle_SetEffectPhysmatParams");
static_assert(sizeof(SQVehicle_SetEffectPhysmatParams) == 0x000010, "Wrong size on SQVehicle_SetEffectPhysmatParams");
static_assert(offsetof(SQVehicle_SetEffectPhysmatParams, ParticleSystem) == 0x000000, "Member 'SQVehicle_SetEffectPhysmatParams::ParticleSystem' has a wrong offset!");
static_assert(offsetof(SQVehicle_SetEffectPhysmatParams, SQPhysMat) == 0x000008, "Member 'SQVehicle_SetEffectPhysmatParams::SQPhysMat' has a wrong offset!");

// Function Squad.SQVehicle.SetFXSystemPhysmatParams
// 0x0010 (0x0010 - 0x0000)
struct SQVehicle_SetFXSystemPhysmatParams final
{
public:
	class UFXSystemComponent*                     FXSystemComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQPhysicalMaterial*                    SQPhysMat;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicle_SetFXSystemPhysmatParams) == 0x000008, "Wrong alignment on SQVehicle_SetFXSystemPhysmatParams");
static_assert(sizeof(SQVehicle_SetFXSystemPhysmatParams) == 0x000010, "Wrong size on SQVehicle_SetFXSystemPhysmatParams");
static_assert(offsetof(SQVehicle_SetFXSystemPhysmatParams, FXSystemComponent) == 0x000000, "Member 'SQVehicle_SetFXSystemPhysmatParams::FXSystemComponent' has a wrong offset!");
static_assert(offsetof(SQVehicle_SetFXSystemPhysmatParams, SQPhysMat) == 0x000008, "Member 'SQVehicle_SetFXSystemPhysmatParams::SQPhysMat' has a wrong offset!");

// Function Squad.SQGroundVehicle.DoesVehicleHaveWheels
// 0x0001 (0x0001 - 0x0000)
struct SQGroundVehicle_DoesVehicleHaveWheels final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGroundVehicle_DoesVehicleHaveWheels) == 0x000001, "Wrong alignment on SQGroundVehicle_DoesVehicleHaveWheels");
static_assert(sizeof(SQGroundVehicle_DoesVehicleHaveWheels) == 0x000001, "Wrong size on SQGroundVehicle_DoesVehicleHaveWheels");
static_assert(offsetof(SQGroundVehicle_DoesVehicleHaveWheels, ReturnValue) == 0x000000, "Member 'SQGroundVehicle_DoesVehicleHaveWheels::ReturnValue' has a wrong offset!");

// Function Squad.SQGroundVehicle.OnRagdollBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct SQGroundVehicle_OnRagdollBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E30[0x3];                                      // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGroundVehicle_OnRagdollBeginOverlap) == 0x000008, "Wrong alignment on SQGroundVehicle_OnRagdollBeginOverlap");
static_assert(sizeof(SQGroundVehicle_OnRagdollBeginOverlap) == 0x0000A8, "Wrong size on SQGroundVehicle_OnRagdollBeginOverlap");
static_assert(offsetof(SQGroundVehicle_OnRagdollBeginOverlap, OverlappedComponent) == 0x000000, "Member 'SQGroundVehicle_OnRagdollBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SQGroundVehicle_OnRagdollBeginOverlap, OtherActor) == 0x000008, "Member 'SQGroundVehicle_OnRagdollBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SQGroundVehicle_OnRagdollBeginOverlap, OtherComp) == 0x000010, "Member 'SQGroundVehicle_OnRagdollBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(SQGroundVehicle_OnRagdollBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'SQGroundVehicle_OnRagdollBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SQGroundVehicle_OnRagdollBeginOverlap, bFromSweep) == 0x00001C, "Member 'SQGroundVehicle_OnRagdollBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(SQGroundVehicle_OnRagdollBeginOverlap, SweepResult) == 0x000020, "Member 'SQGroundVehicle_OnRagdollBeginOverlap::SweepResult' has a wrong offset!");

// Function Squad.SQGroundVehicle.ServerSetEngineActiveInput
// 0x0001 (0x0001 - 0x0000)
struct SQGroundVehicle_ServerSetEngineActiveInput final
{
public:
	bool                                          bNewEngineActive;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGroundVehicle_ServerSetEngineActiveInput) == 0x000001, "Wrong alignment on SQGroundVehicle_ServerSetEngineActiveInput");
static_assert(sizeof(SQGroundVehicle_ServerSetEngineActiveInput) == 0x000001, "Wrong size on SQGroundVehicle_ServerSetEngineActiveInput");
static_assert(offsetof(SQGroundVehicle_ServerSetEngineActiveInput, bNewEngineActive) == 0x000000, "Member 'SQGroundVehicle_ServerSetEngineActiveInput::bNewEngineActive' has a wrong offset!");

// Function Squad.SQGroundVehicle.ServerSetEngineBoostPressed
// 0x0001 (0x0001 - 0x0000)
struct SQGroundVehicle_ServerSetEngineBoostPressed final
{
public:
	bool                                          bInHasEngineBoostBeenPressed;                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGroundVehicle_ServerSetEngineBoostPressed) == 0x000001, "Wrong alignment on SQGroundVehicle_ServerSetEngineBoostPressed");
static_assert(sizeof(SQGroundVehicle_ServerSetEngineBoostPressed) == 0x000001, "Wrong size on SQGroundVehicle_ServerSetEngineBoostPressed");
static_assert(offsetof(SQGroundVehicle_ServerSetEngineBoostPressed, bInHasEngineBoostBeenPressed) == 0x000000, "Member 'SQGroundVehicle_ServerSetEngineBoostPressed::bInHasEngineBoostBeenPressed' has a wrong offset!");

// Function Squad.SQGroundVehicle.ServerSetEngineToggleActiveInput
// 0x0001 (0x0001 - 0x0000)
struct SQGroundVehicle_ServerSetEngineToggleActiveInput final
{
public:
	bool                                          bInIsEngineToggleActive;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGroundVehicle_ServerSetEngineToggleActiveInput) == 0x000001, "Wrong alignment on SQGroundVehicle_ServerSetEngineToggleActiveInput");
static_assert(sizeof(SQGroundVehicle_ServerSetEngineToggleActiveInput) == 0x000001, "Wrong size on SQGroundVehicle_ServerSetEngineToggleActiveInput");
static_assert(offsetof(SQGroundVehicle_ServerSetEngineToggleActiveInput, bInIsEngineToggleActive) == 0x000000, "Member 'SQGroundVehicle_ServerSetEngineToggleActiveInput::bInIsEngineToggleActive' has a wrong offset!");

// Function Squad.SQGroundVehicle.ToggleWheelUnderwaterTimer
// 0x0001 (0x0001 - 0x0000)
struct SQGroundVehicle_ToggleWheelUnderwaterTimer final
{
public:
	bool                                          bActivated;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGroundVehicle_ToggleWheelUnderwaterTimer) == 0x000001, "Wrong alignment on SQGroundVehicle_ToggleWheelUnderwaterTimer");
static_assert(sizeof(SQGroundVehicle_ToggleWheelUnderwaterTimer) == 0x000001, "Wrong size on SQGroundVehicle_ToggleWheelUnderwaterTimer");
static_assert(offsetof(SQGroundVehicle_ToggleWheelUnderwaterTimer, bActivated) == 0x000000, "Member 'SQGroundVehicle_ToggleWheelUnderwaterTimer::bActivated' has a wrong offset!");

// Function Squad.SQGroundVehicle.GetCurrentEngineToggleElapsedTime
// 0x0004 (0x0004 - 0x0000)
struct SQGroundVehicle_GetCurrentEngineToggleElapsedTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGroundVehicle_GetCurrentEngineToggleElapsedTime) == 0x000004, "Wrong alignment on SQGroundVehicle_GetCurrentEngineToggleElapsedTime");
static_assert(sizeof(SQGroundVehicle_GetCurrentEngineToggleElapsedTime) == 0x000004, "Wrong size on SQGroundVehicle_GetCurrentEngineToggleElapsedTime");
static_assert(offsetof(SQGroundVehicle_GetCurrentEngineToggleElapsedTime, ReturnValue) == 0x000000, "Member 'SQGroundVehicle_GetCurrentEngineToggleElapsedTime::ReturnValue' has a wrong offset!");

// Function Squad.SQGroundVehicle.GetCurrentEngineTogglePercentage
// 0x0004 (0x0004 - 0x0000)
struct SQGroundVehicle_GetCurrentEngineTogglePercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGroundVehicle_GetCurrentEngineTogglePercentage) == 0x000004, "Wrong alignment on SQGroundVehicle_GetCurrentEngineTogglePercentage");
static_assert(sizeof(SQGroundVehicle_GetCurrentEngineTogglePercentage) == 0x000004, "Wrong size on SQGroundVehicle_GetCurrentEngineTogglePercentage");
static_assert(offsetof(SQGroundVehicle_GetCurrentEngineTogglePercentage, ReturnValue) == 0x000000, "Member 'SQGroundVehicle_GetCurrentEngineTogglePercentage::ReturnValue' has a wrong offset!");

// Function Squad.SQGroundVehicle.GetCurrentEngineToggleRequiredDuration
// 0x0004 (0x0004 - 0x0000)
struct SQGroundVehicle_GetCurrentEngineToggleRequiredDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGroundVehicle_GetCurrentEngineToggleRequiredDuration) == 0x000004, "Wrong alignment on SQGroundVehicle_GetCurrentEngineToggleRequiredDuration");
static_assert(sizeof(SQGroundVehicle_GetCurrentEngineToggleRequiredDuration) == 0x000004, "Wrong size on SQGroundVehicle_GetCurrentEngineToggleRequiredDuration");
static_assert(offsetof(SQGroundVehicle_GetCurrentEngineToggleRequiredDuration, ReturnValue) == 0x000000, "Member 'SQGroundVehicle_GetCurrentEngineToggleRequiredDuration::ReturnValue' has a wrong offset!");

// Function Squad.SQGroundVehicle.GetEngineLoad
// 0x0004 (0x0004 - 0x0000)
struct SQGroundVehicle_GetEngineLoad final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGroundVehicle_GetEngineLoad) == 0x000004, "Wrong alignment on SQGroundVehicle_GetEngineLoad");
static_assert(sizeof(SQGroundVehicle_GetEngineLoad) == 0x000004, "Wrong size on SQGroundVehicle_GetEngineLoad");
static_assert(offsetof(SQGroundVehicle_GetEngineLoad, ReturnValue) == 0x000000, "Member 'SQGroundVehicle_GetEngineLoad::ReturnValue' has a wrong offset!");

// Function Squad.SQGroundVehicle.GetEngineMaxRPM
// 0x0004 (0x0004 - 0x0000)
struct SQGroundVehicle_GetEngineMaxRPM final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGroundVehicle_GetEngineMaxRPM) == 0x000004, "Wrong alignment on SQGroundVehicle_GetEngineMaxRPM");
static_assert(sizeof(SQGroundVehicle_GetEngineMaxRPM) == 0x000004, "Wrong size on SQGroundVehicle_GetEngineMaxRPM");
static_assert(offsetof(SQGroundVehicle_GetEngineMaxRPM, ReturnValue) == 0x000000, "Member 'SQGroundVehicle_GetEngineMaxRPM::ReturnValue' has a wrong offset!");

// Function Squad.SQGroundVehicle.GetEngineRPM
// 0x0004 (0x0004 - 0x0000)
struct SQGroundVehicle_GetEngineRPM final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGroundVehicle_GetEngineRPM) == 0x000004, "Wrong alignment on SQGroundVehicle_GetEngineRPM");
static_assert(sizeof(SQGroundVehicle_GetEngineRPM) == 0x000004, "Wrong size on SQGroundVehicle_GetEngineRPM");
static_assert(offsetof(SQGroundVehicle_GetEngineRPM, ReturnValue) == 0x000000, "Member 'SQGroundVehicle_GetEngineRPM::ReturnValue' has a wrong offset!");

// Function Squad.SQGroundVehicle.GetForwardSpeed
// 0x0004 (0x0004 - 0x0000)
struct SQGroundVehicle_GetForwardSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGroundVehicle_GetForwardSpeed) == 0x000004, "Wrong alignment on SQGroundVehicle_GetForwardSpeed");
static_assert(sizeof(SQGroundVehicle_GetForwardSpeed) == 0x000004, "Wrong size on SQGroundVehicle_GetForwardSpeed");
static_assert(offsetof(SQGroundVehicle_GetForwardSpeed, ReturnValue) == 0x000000, "Member 'SQGroundVehicle_GetForwardSpeed::ReturnValue' has a wrong offset!");

// Function Squad.SQGroundVehicle.IsEngineActive
// 0x0001 (0x0001 - 0x0000)
struct SQGroundVehicle_IsEngineActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGroundVehicle_IsEngineActive) == 0x000001, "Wrong alignment on SQGroundVehicle_IsEngineActive");
static_assert(sizeof(SQGroundVehicle_IsEngineActive) == 0x000001, "Wrong size on SQGroundVehicle_IsEngineActive");
static_assert(offsetof(SQGroundVehicle_IsEngineActive, ReturnValue) == 0x000000, "Member 'SQGroundVehicle_IsEngineActive::ReturnValue' has a wrong offset!");

// Function Squad.SQGroundVehicle.IsEngineToggleActive
// 0x0001 (0x0001 - 0x0000)
struct SQGroundVehicle_IsEngineToggleActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGroundVehicle_IsEngineToggleActive) == 0x000001, "Wrong alignment on SQGroundVehicle_IsEngineToggleActive");
static_assert(sizeof(SQGroundVehicle_IsEngineToggleActive) == 0x000001, "Wrong size on SQGroundVehicle_IsEngineToggleActive");
static_assert(offsetof(SQGroundVehicle_IsEngineToggleActive, ReturnValue) == 0x000000, "Member 'SQGroundVehicle_IsEngineToggleActive::ReturnValue' has a wrong offset!");

// Function Squad.SQGroundVehicle.IsHandbrakeActive
// 0x0001 (0x0001 - 0x0000)
struct SQGroundVehicle_IsHandbrakeActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGroundVehicle_IsHandbrakeActive) == 0x000001, "Wrong alignment on SQGroundVehicle_IsHandbrakeActive");
static_assert(sizeof(SQGroundVehicle_IsHandbrakeActive) == 0x000001, "Wrong size on SQGroundVehicle_IsHandbrakeActive");
static_assert(offsetof(SQGroundVehicle_IsHandbrakeActive, ReturnValue) == 0x000000, "Member 'SQGroundVehicle_IsHandbrakeActive::ReturnValue' has a wrong offset!");

// Function Squad.SQWheeledVehicleBase.DestroyWheel
// 0x0010 (0x0010 - 0x0000)
struct SQWheeledVehicleBase_DestroyWheel final
{
public:
	class USQDriveTrainComponent*                 DriveTrainComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverseDamage;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E31[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQWheeledVehicleBase_DestroyWheel) == 0x000008, "Wrong alignment on SQWheeledVehicleBase_DestroyWheel");
static_assert(sizeof(SQWheeledVehicleBase_DestroyWheel) == 0x000010, "Wrong size on SQWheeledVehicleBase_DestroyWheel");
static_assert(offsetof(SQWheeledVehicleBase_DestroyWheel, DriveTrainComponent) == 0x000000, "Member 'SQWheeledVehicleBase_DestroyWheel::DriveTrainComponent' has a wrong offset!");
static_assert(offsetof(SQWheeledVehicleBase_DestroyWheel, bReverseDamage) == 0x000008, "Member 'SQWheeledVehicleBase_DestroyWheel::bReverseDamage' has a wrong offset!");

// Function Squad.SQMultiThreadedFunctionLibrary.QueueBlueprintMultithreadTask
// 0x0018 (0x0018 - 0x0000)
struct SQMultiThreadedFunctionLibrary_QueueBlueprintMultithreadTask final
{
public:
	class USQMultithreadObject*                   MultithreadObject;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class USQMultithreadObject* CompletedObject)> OnCompleted;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMultiThreadedFunctionLibrary_QueueBlueprintMultithreadTask) == 0x000008, "Wrong alignment on SQMultiThreadedFunctionLibrary_QueueBlueprintMultithreadTask");
static_assert(sizeof(SQMultiThreadedFunctionLibrary_QueueBlueprintMultithreadTask) == 0x000018, "Wrong size on SQMultiThreadedFunctionLibrary_QueueBlueprintMultithreadTask");
static_assert(offsetof(SQMultiThreadedFunctionLibrary_QueueBlueprintMultithreadTask, MultithreadObject) == 0x000000, "Member 'SQMultiThreadedFunctionLibrary_QueueBlueprintMultithreadTask::MultithreadObject' has a wrong offset!");
static_assert(offsetof(SQMultiThreadedFunctionLibrary_QueueBlueprintMultithreadTask, OnCompleted) == 0x000008, "Member 'SQMultiThreadedFunctionLibrary_QueueBlueprintMultithreadTask::OnCompleted' has a wrong offset!");

// Function Squad.SQPlayerController.ApprovalEntryExpireOnClient
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerController_ApprovalEntryExpireOnClient final
{
public:
	uint32                                        Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ApprovalEntryExpireOnClient) == 0x000004, "Wrong alignment on SQPlayerController_ApprovalEntryExpireOnClient");
static_assert(sizeof(SQPlayerController_ApprovalEntryExpireOnClient) == 0x000004, "Wrong size on SQPlayerController_ApprovalEntryExpireOnClient");
static_assert(offsetof(SQPlayerController_ApprovalEntryExpireOnClient, Param_Index) == 0x000000, "Member 'SQPlayerController_ApprovalEntryExpireOnClient::Param_Index' has a wrong offset!");

// Function Squad.SQPlayerController.ApprovalEntryExpireOnServer
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerController_ApprovalEntryExpireOnServer final
{
public:
	uint32                                        Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ApprovalEntryExpireOnServer) == 0x000004, "Wrong alignment on SQPlayerController_ApprovalEntryExpireOnServer");
static_assert(sizeof(SQPlayerController_ApprovalEntryExpireOnServer) == 0x000004, "Wrong size on SQPlayerController_ApprovalEntryExpireOnServer");
static_assert(offsetof(SQPlayerController_ApprovalEntryExpireOnServer, Param_Index) == 0x000000, "Member 'SQPlayerController_ApprovalEntryExpireOnServer::Param_Index' has a wrong offset!");

// Function Squad.SQPlayerController.BlueprintOnMatchEnded
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerController_BlueprintOnMatchEnded final
{
public:
	int32                                         WinningTeam;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LosingTeam;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinnerTickets;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoserTickets;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_BlueprintOnMatchEnded) == 0x000004, "Wrong alignment on SQPlayerController_BlueprintOnMatchEnded");
static_assert(sizeof(SQPlayerController_BlueprintOnMatchEnded) == 0x000010, "Wrong size on SQPlayerController_BlueprintOnMatchEnded");
static_assert(offsetof(SQPlayerController_BlueprintOnMatchEnded, WinningTeam) == 0x000000, "Member 'SQPlayerController_BlueprintOnMatchEnded::WinningTeam' has a wrong offset!");
static_assert(offsetof(SQPlayerController_BlueprintOnMatchEnded, LosingTeam) == 0x000004, "Member 'SQPlayerController_BlueprintOnMatchEnded::LosingTeam' has a wrong offset!");
static_assert(offsetof(SQPlayerController_BlueprintOnMatchEnded, WinnerTickets) == 0x000008, "Member 'SQPlayerController_BlueprintOnMatchEnded::WinnerTickets' has a wrong offset!");
static_assert(offsetof(SQPlayerController_BlueprintOnMatchEnded, LoserTickets) == 0x00000C, "Member 'SQPlayerController_BlueprintOnMatchEnded::LoserTickets' has a wrong offset!");

// Function Squad.SQPlayerController.BP_ExposeUnavailabilityReason
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerController_BP_ExposeUnavailabilityReason final
{
public:
	struct FDataTableRowHandle                    InReason;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_BP_ExposeUnavailabilityReason) == 0x000008, "Wrong alignment on SQPlayerController_BP_ExposeUnavailabilityReason");
static_assert(sizeof(SQPlayerController_BP_ExposeUnavailabilityReason) == 0x000010, "Wrong size on SQPlayerController_BP_ExposeUnavailabilityReason");
static_assert(offsetof(SQPlayerController_BP_ExposeUnavailabilityReason, InReason) == 0x000000, "Member 'SQPlayerController_BP_ExposeUnavailabilityReason::InReason' has a wrong offset!");

// Function Squad.SQPlayerController.BP_FailPlaceDeployableFromEquippable
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_BP_FailPlaceDeployableFromEquippable final
{
public:
	class ASQEquipableItem*                       Equippable;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_BP_FailPlaceDeployableFromEquippable) == 0x000008, "Wrong alignment on SQPlayerController_BP_FailPlaceDeployableFromEquippable");
static_assert(sizeof(SQPlayerController_BP_FailPlaceDeployableFromEquippable) == 0x000008, "Wrong size on SQPlayerController_BP_FailPlaceDeployableFromEquippable");
static_assert(offsetof(SQPlayerController_BP_FailPlaceDeployableFromEquippable, Equippable) == 0x000000, "Member 'SQPlayerController_BP_FailPlaceDeployableFromEquippable::Equippable' has a wrong offset!");

// Function Squad.SQPlayerController.BP_InitializeDeployableFromEquippable
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerController_BP_InitializeDeployableFromEquippable final
{
public:
	class ASQDeployableItem*                      DeployableItem;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQEquipableItem*                       Equippable;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_BP_InitializeDeployableFromEquippable) == 0x000008, "Wrong alignment on SQPlayerController_BP_InitializeDeployableFromEquippable");
static_assert(sizeof(SQPlayerController_BP_InitializeDeployableFromEquippable) == 0x000010, "Wrong size on SQPlayerController_BP_InitializeDeployableFromEquippable");
static_assert(offsetof(SQPlayerController_BP_InitializeDeployableFromEquippable, DeployableItem) == 0x000000, "Member 'SQPlayerController_BP_InitializeDeployableFromEquippable::DeployableItem' has a wrong offset!");
static_assert(offsetof(SQPlayerController_BP_InitializeDeployableFromEquippable, Equippable) == 0x000008, "Member 'SQPlayerController_BP_InitializeDeployableFromEquippable::Equippable' has a wrong offset!");

// Function Squad.SQPlayerController.BPHasAccessLevel
// 0x0002 (0x0002 - 0x0000)
struct SQPlayerController_BPHasAccessLevel final
{
public:
	ESQAdminAccessLevels                          RequestedLevel;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_BPHasAccessLevel) == 0x000001, "Wrong alignment on SQPlayerController_BPHasAccessLevel");
static_assert(sizeof(SQPlayerController_BPHasAccessLevel) == 0x000002, "Wrong size on SQPlayerController_BPHasAccessLevel");
static_assert(offsetof(SQPlayerController_BPHasAccessLevel, RequestedLevel) == 0x000000, "Member 'SQPlayerController_BPHasAccessLevel::RequestedLevel' has a wrong offset!");
static_assert(offsetof(SQPlayerController_BPHasAccessLevel, ReturnValue) == 0x000001, "Member 'SQPlayerController_BPHasAccessLevel::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.BPServerRearmWeapons
// 0x0020 (0x0020 - 0x0000)
struct SQPlayerController_BPServerRearmWeapons final
{
public:
	TScriptInterface<class ISQRearmSource>        RearmSource;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FSQRearmWeaponRequest>          RearmRequest;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_BPServerRearmWeapons) == 0x000008, "Wrong alignment on SQPlayerController_BPServerRearmWeapons");
static_assert(sizeof(SQPlayerController_BPServerRearmWeapons) == 0x000020, "Wrong size on SQPlayerController_BPServerRearmWeapons");
static_assert(offsetof(SQPlayerController_BPServerRearmWeapons, RearmSource) == 0x000000, "Member 'SQPlayerController_BPServerRearmWeapons::RearmSource' has a wrong offset!");
static_assert(offsetof(SQPlayerController_BPServerRearmWeapons, RearmRequest) == 0x000010, "Member 'SQPlayerController_BPServerRearmWeapons::RearmRequest' has a wrong offset!");

// Function Squad.SQPlayerController.BPTraceMarkerLocation
// 0x0020 (0x0020 - 0x0000)
struct SQPlayerController_BPTraceMarkerLocation final
{
public:
	TSubclassOf<class ASQMapMarker>               MarkerClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0014(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_BPTraceMarkerLocation) == 0x000008, "Wrong alignment on SQPlayerController_BPTraceMarkerLocation");
static_assert(sizeof(SQPlayerController_BPTraceMarkerLocation) == 0x000020, "Wrong size on SQPlayerController_BPTraceMarkerLocation");
static_assert(offsetof(SQPlayerController_BPTraceMarkerLocation, MarkerClass) == 0x000000, "Member 'SQPlayerController_BPTraceMarkerLocation::MarkerClass' has a wrong offset!");
static_assert(offsetof(SQPlayerController_BPTraceMarkerLocation, Start) == 0x000008, "Member 'SQPlayerController_BPTraceMarkerLocation::Start' has a wrong offset!");
static_assert(offsetof(SQPlayerController_BPTraceMarkerLocation, End) == 0x000014, "Member 'SQPlayerController_BPTraceMarkerLocation::End' has a wrong offset!");

// Function Squad.SQPlayerController.CancelEmote
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_CancelEmote final
{
public:
	const class USQEmotesData*                    EmoteData;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_CancelEmote) == 0x000008, "Wrong alignment on SQPlayerController_CancelEmote");
static_assert(sizeof(SQPlayerController_CancelEmote) == 0x000008, "Wrong size on SQPlayerController_CancelEmote");
static_assert(offsetof(SQPlayerController_CancelEmote, EmoteData) == 0x000000, "Member 'SQPlayerController_CancelEmote::EmoteData' has a wrong offset!");

// Function Squad.SQPlayerController.ChangeRole
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerController_ChangeRole final
{
public:
	class USQRoleSettings*                        NewRole;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGivePartialAmmo;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeavingSquad;                                     // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E42[0x6];                                      // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPlayerController_ChangeRole) == 0x000008, "Wrong alignment on SQPlayerController_ChangeRole");
static_assert(sizeof(SQPlayerController_ChangeRole) == 0x000010, "Wrong size on SQPlayerController_ChangeRole");
static_assert(offsetof(SQPlayerController_ChangeRole, NewRole) == 0x000000, "Member 'SQPlayerController_ChangeRole::NewRole' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ChangeRole, bGivePartialAmmo) == 0x000008, "Member 'SQPlayerController_ChangeRole::bGivePartialAmmo' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ChangeRole, bLeavingSquad) == 0x000009, "Member 'SQPlayerController_ChangeRole::bLeavingSquad' has a wrong offset!");

// Function Squad.SQPlayerController.ChangeRoleFromDeployable
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerController_ChangeRoleFromDeployable final
{
public:
	class USQRoleSettings*                        NewRole;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQDeployable*                          Deployable;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ChangeRoleFromDeployable) == 0x000008, "Wrong alignment on SQPlayerController_ChangeRoleFromDeployable");
static_assert(sizeof(SQPlayerController_ChangeRoleFromDeployable) == 0x000010, "Wrong size on SQPlayerController_ChangeRoleFromDeployable");
static_assert(offsetof(SQPlayerController_ChangeRoleFromDeployable, NewRole) == 0x000000, "Member 'SQPlayerController_ChangeRoleFromDeployable::NewRole' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ChangeRoleFromDeployable, Deployable) == 0x000008, "Member 'SQPlayerController_ChangeRoleFromDeployable::Deployable' has a wrong offset!");

// Function Squad.SQPlayerController.ChangeTeamsWithId
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerController_ChangeTeamsWithId final
{
public:
	int32                                         NewTeam;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ChangeTeamsWithId) == 0x000004, "Wrong alignment on SQPlayerController_ChangeTeamsWithId");
static_assert(sizeof(SQPlayerController_ChangeTeamsWithId) == 0x000004, "Wrong size on SQPlayerController_ChangeTeamsWithId");
static_assert(offsetof(SQPlayerController_ChangeTeamsWithId, NewTeam) == 0x000000, "Member 'SQPlayerController_ChangeTeamsWithId::NewTeam' has a wrong offset!");

// Function Squad.SQPlayerController.Chat
// 0x0018 (0x0018 - 0x0000)
struct SQPlayerController_Chat final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQChat                                       ChatType;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E43[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPlayerController_Chat) == 0x000008, "Wrong alignment on SQPlayerController_Chat");
static_assert(sizeof(SQPlayerController_Chat) == 0x000018, "Wrong size on SQPlayerController_Chat");
static_assert(offsetof(SQPlayerController_Chat, Msg) == 0x000000, "Member 'SQPlayerController_Chat::Msg' has a wrong offset!");
static_assert(offsetof(SQPlayerController_Chat, ChatType) == 0x000010, "Member 'SQPlayerController_Chat::ChatType' has a wrong offset!");

// Function Squad.SQPlayerController.ChatToAll
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerController_ChatToAll final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ChatToAll) == 0x000008, "Wrong alignment on SQPlayerController_ChatToAll");
static_assert(sizeof(SQPlayerController_ChatToAll) == 0x000010, "Wrong size on SQPlayerController_ChatToAll");
static_assert(offsetof(SQPlayerController_ChatToAll, Msg) == 0x000000, "Member 'SQPlayerController_ChatToAll::Msg' has a wrong offset!");

// Function Squad.SQPlayerController.ChatToSquad
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerController_ChatToSquad final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ChatToSquad) == 0x000008, "Wrong alignment on SQPlayerController_ChatToSquad");
static_assert(sizeof(SQPlayerController_ChatToSquad) == 0x000010, "Wrong size on SQPlayerController_ChatToSquad");
static_assert(offsetof(SQPlayerController_ChatToSquad, Msg) == 0x000000, "Member 'SQPlayerController_ChatToSquad::Msg' has a wrong offset!");

// Function Squad.SQPlayerController.ChatToTeam
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerController_ChatToTeam final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ChatToTeam) == 0x000008, "Wrong alignment on SQPlayerController_ChatToTeam");
static_assert(sizeof(SQPlayerController_ChatToTeam) == 0x000010, "Wrong size on SQPlayerController_ChatToTeam");
static_assert(offsetof(SQPlayerController_ChatToTeam, Msg) == 0x000000, "Member 'SQPlayerController_ChatToTeam::Msg' has a wrong offset!");

// Function Squad.SQPlayerController.ClientCloseAmmoBag
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_ClientCloseAmmoBag final
{
public:
	class ASQDeployableAmmoBag*                   Ammobag;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ClientCloseAmmoBag) == 0x000008, "Wrong alignment on SQPlayerController_ClientCloseAmmoBag");
static_assert(sizeof(SQPlayerController_ClientCloseAmmoBag) == 0x000008, "Wrong size on SQPlayerController_ClientCloseAmmoBag");
static_assert(offsetof(SQPlayerController_ClientCloseAmmoBag, Ammobag) == 0x000000, "Member 'SQPlayerController_ClientCloseAmmoBag::Ammobag' has a wrong offset!");

// Function Squad.SQPlayerController.ClientCloseDeployableInteractableMenu
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_ClientCloseDeployableInteractableMenu final
{
public:
	class ASQDeployableInteractable*              DeployableInteractable;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ClientCloseDeployableInteractableMenu) == 0x000008, "Wrong alignment on SQPlayerController_ClientCloseDeployableInteractableMenu");
static_assert(sizeof(SQPlayerController_ClientCloseDeployableInteractableMenu) == 0x000008, "Wrong size on SQPlayerController_ClientCloseDeployableInteractableMenu");
static_assert(offsetof(SQPlayerController_ClientCloseDeployableInteractableMenu, DeployableInteractable) == 0x000000, "Member 'SQPlayerController_ClientCloseDeployableInteractableMenu::DeployableInteractable' has a wrong offset!");

// Function Squad.SQPlayerController.ClientCreateVehicleOverlayWidget
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_ClientCreateVehicleOverlayWidget final
{
public:
	TSubclassOf<class USQVehicleViewWidget>       WidgetClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ClientCreateVehicleOverlayWidget) == 0x000008, "Wrong alignment on SQPlayerController_ClientCreateVehicleOverlayWidget");
static_assert(sizeof(SQPlayerController_ClientCreateVehicleOverlayWidget) == 0x000008, "Wrong size on SQPlayerController_ClientCreateVehicleOverlayWidget");
static_assert(offsetof(SQPlayerController_ClientCreateVehicleOverlayWidget, WidgetClass) == 0x000000, "Member 'SQPlayerController_ClientCreateVehicleOverlayWidget::WidgetClass' has a wrong offset!");

// Function Squad.SQPlayerController.ClientDrawSphere
// 0x0038 (0x0038 - 0x0000)
struct SQPlayerController_ClientDrawSphere final
{
public:
	struct FVector                                ZeroLocation;                                      // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Segments;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RebaseOntoLocal;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPersistentLines;                                  // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E44[0x2];                                      // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Lifetime;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LogLabel;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DepthPriority;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E45[0x3];                                      // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Thickness;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ClientDrawSphere) == 0x000008, "Wrong alignment on SQPlayerController_ClientDrawSphere");
static_assert(sizeof(SQPlayerController_ClientDrawSphere) == 0x000038, "Wrong size on SQPlayerController_ClientDrawSphere");
static_assert(offsetof(SQPlayerController_ClientDrawSphere, ZeroLocation) == 0x000000, "Member 'SQPlayerController_ClientDrawSphere::ZeroLocation' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ClientDrawSphere, Radius) == 0x00000C, "Member 'SQPlayerController_ClientDrawSphere::Radius' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ClientDrawSphere, Segments) == 0x000010, "Member 'SQPlayerController_ClientDrawSphere::Segments' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ClientDrawSphere, Color) == 0x000014, "Member 'SQPlayerController_ClientDrawSphere::Color' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ClientDrawSphere, RebaseOntoLocal) == 0x000018, "Member 'SQPlayerController_ClientDrawSphere::RebaseOntoLocal' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ClientDrawSphere, bPersistentLines) == 0x000019, "Member 'SQPlayerController_ClientDrawSphere::bPersistentLines' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ClientDrawSphere, Lifetime) == 0x00001C, "Member 'SQPlayerController_ClientDrawSphere::Lifetime' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ClientDrawSphere, LogLabel) == 0x000020, "Member 'SQPlayerController_ClientDrawSphere::LogLabel' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ClientDrawSphere, DepthPriority) == 0x000030, "Member 'SQPlayerController_ClientDrawSphere::DepthPriority' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ClientDrawSphere, Thickness) == 0x000034, "Member 'SQPlayerController_ClientDrawSphere::Thickness' has a wrong offset!");

// Function Squad.SQPlayerController.ClientExposeUnavailabilityReason
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerController_ClientExposeUnavailabilityReason final
{
public:
	struct FDataTableRowHandle                    InReason;                                          // 0x0000(0x0010)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ClientExposeUnavailabilityReason) == 0x000008, "Wrong alignment on SQPlayerController_ClientExposeUnavailabilityReason");
static_assert(sizeof(SQPlayerController_ClientExposeUnavailabilityReason) == 0x000010, "Wrong size on SQPlayerController_ClientExposeUnavailabilityReason");
static_assert(offsetof(SQPlayerController_ClientExposeUnavailabilityReason, InReason) == 0x000000, "Member 'SQPlayerController_ClientExposeUnavailabilityReason::InReason' has a wrong offset!");

// Function Squad.SQPlayerController.ClientIgnoreWeaponInput
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_ClientIgnoreWeaponInput final
{
public:
	bool                                          bIgnore;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ClientIgnoreWeaponInput) == 0x000001, "Wrong alignment on SQPlayerController_ClientIgnoreWeaponInput");
static_assert(sizeof(SQPlayerController_ClientIgnoreWeaponInput) == 0x000001, "Wrong size on SQPlayerController_ClientIgnoreWeaponInput");
static_assert(offsetof(SQPlayerController_ClientIgnoreWeaponInput, bIgnore) == 0x000000, "Member 'SQPlayerController_ClientIgnoreWeaponInput::bIgnore' has a wrong offset!");

// Function Squad.SQPlayerController.ClientOnPlayerToggleVoice_Editor
// 0x0030 (0x0030 - 0x0000)
struct SQPlayerController_ClientOnPlayerToggleVoice_Editor final
{
public:
	struct FUniqueNetIdRepl                       TalkingPlayerId;                                   // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQVoiceChannel                               VoiceChannel;                                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E46[0x7];                                      // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPlayerController_ClientOnPlayerToggleVoice_Editor) == 0x000008, "Wrong alignment on SQPlayerController_ClientOnPlayerToggleVoice_Editor");
static_assert(sizeof(SQPlayerController_ClientOnPlayerToggleVoice_Editor) == 0x000030, "Wrong size on SQPlayerController_ClientOnPlayerToggleVoice_Editor");
static_assert(offsetof(SQPlayerController_ClientOnPlayerToggleVoice_Editor, TalkingPlayerId) == 0x000000, "Member 'SQPlayerController_ClientOnPlayerToggleVoice_Editor::TalkingPlayerId' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ClientOnPlayerToggleVoice_Editor, VoiceChannel) == 0x000028, "Member 'SQPlayerController_ClientOnPlayerToggleVoice_Editor::VoiceChannel' has a wrong offset!");

// Function Squad.SQPlayerController.ClientOpenAmmoBag
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_ClientOpenAmmoBag final
{
public:
	class ASQDeployableAmmoBag*                   Ammobag;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ClientOpenAmmoBag) == 0x000008, "Wrong alignment on SQPlayerController_ClientOpenAmmoBag");
static_assert(sizeof(SQPlayerController_ClientOpenAmmoBag) == 0x000008, "Wrong size on SQPlayerController_ClientOpenAmmoBag");
static_assert(offsetof(SQPlayerController_ClientOpenAmmoBag, Ammobag) == 0x000000, "Member 'SQPlayerController_ClientOpenAmmoBag::Ammobag' has a wrong offset!");

// Function Squad.SQPlayerController.ClientOpenDeployableInteractableMenu
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_ClientOpenDeployableInteractableMenu final
{
public:
	class ASQDeployableInteractable*              DeployableInteractable;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ClientOpenDeployableInteractableMenu) == 0x000008, "Wrong alignment on SQPlayerController_ClientOpenDeployableInteractableMenu");
static_assert(sizeof(SQPlayerController_ClientOpenDeployableInteractableMenu) == 0x000008, "Wrong size on SQPlayerController_ClientOpenDeployableInteractableMenu");
static_assert(offsetof(SQPlayerController_ClientOpenDeployableInteractableMenu, DeployableInteractable) == 0x000000, "Member 'SQPlayerController_ClientOpenDeployableInteractableMenu::DeployableInteractable' has a wrong offset!");

// Function Squad.SQPlayerController.ClientPushApprovalMessage
// 0x0048 (0x0048 - 0x0000)
struct SQPlayerController_ClientPushApprovalMessage final
{
public:
	uint32                                        Key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E47[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQApprovalEntryRequest                ApprovalEntry;                                     // 0x0008(0x0038)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	const class ASQPlayerState*                   Requester;                                         // 0x0040(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ClientPushApprovalMessage) == 0x000008, "Wrong alignment on SQPlayerController_ClientPushApprovalMessage");
static_assert(sizeof(SQPlayerController_ClientPushApprovalMessage) == 0x000048, "Wrong size on SQPlayerController_ClientPushApprovalMessage");
static_assert(offsetof(SQPlayerController_ClientPushApprovalMessage, Key) == 0x000000, "Member 'SQPlayerController_ClientPushApprovalMessage::Key' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ClientPushApprovalMessage, ApprovalEntry) == 0x000008, "Member 'SQPlayerController_ClientPushApprovalMessage::ApprovalEntry' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ClientPushApprovalMessage, Requester) == 0x000040, "Member 'SQPlayerController_ClientPushApprovalMessage::Requester' has a wrong offset!");

// Function Squad.SQPlayerController.ClientReportServerTime
// 0x0018 (0x0018 - 0x0000)
struct SQPlayerController_ClientReportServerTime final
{
public:
	struct FDateTime                              InRequestClientUTCTime;                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              InServerUTCTime;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaterTimeSeconds;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E48[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPlayerController_ClientReportServerTime) == 0x000008, "Wrong alignment on SQPlayerController_ClientReportServerTime");
static_assert(sizeof(SQPlayerController_ClientReportServerTime) == 0x000018, "Wrong size on SQPlayerController_ClientReportServerTime");
static_assert(offsetof(SQPlayerController_ClientReportServerTime, InRequestClientUTCTime) == 0x000000, "Member 'SQPlayerController_ClientReportServerTime::InRequestClientUTCTime' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ClientReportServerTime, InServerUTCTime) == 0x000008, "Member 'SQPlayerController_ClientReportServerTime::InServerUTCTime' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ClientReportServerTime, WaterTimeSeconds) == 0x000010, "Member 'SQPlayerController_ClientReportServerTime::WaterTimeSeconds' has a wrong offset!");

// Function Squad.SQPlayerController.ClientSendLineToConsole
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerController_ClientSendLineToConsole final
{
public:
	class FString                                 Line;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ClientSendLineToConsole) == 0x000008, "Wrong alignment on SQPlayerController_ClientSendLineToConsole");
static_assert(sizeof(SQPlayerController_ClientSendLineToConsole) == 0x000010, "Wrong size on SQPlayerController_ClientSendLineToConsole");
static_assert(offsetof(SQPlayerController_ClientSendLineToConsole, Line) == 0x000000, "Member 'SQPlayerController_ClientSendLineToConsole::Line' has a wrong offset!");

// Function Squad.SQPlayerController.ClientSendRoundEndEvent
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerController_ClientSendRoundEndEvent final
{
public:
	int32                                         WinningTeam;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LosingTeam;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinnerTickets;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoserTickets;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ClientSendRoundEndEvent) == 0x000004, "Wrong alignment on SQPlayerController_ClientSendRoundEndEvent");
static_assert(sizeof(SQPlayerController_ClientSendRoundEndEvent) == 0x000010, "Wrong size on SQPlayerController_ClientSendRoundEndEvent");
static_assert(offsetof(SQPlayerController_ClientSendRoundEndEvent, WinningTeam) == 0x000000, "Member 'SQPlayerController_ClientSendRoundEndEvent::WinningTeam' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ClientSendRoundEndEvent, LosingTeam) == 0x000004, "Member 'SQPlayerController_ClientSendRoundEndEvent::LosingTeam' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ClientSendRoundEndEvent, WinnerTickets) == 0x000008, "Member 'SQPlayerController_ClientSendRoundEndEvent::WinnerTickets' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ClientSendRoundEndEvent, LoserTickets) == 0x00000C, "Member 'SQPlayerController_ClientSendRoundEndEvent::LoserTickets' has a wrong offset!");

// Function Squad.SQPlayerController.ClientSetSpectatorCamera
// 0x0018 (0x0018 - 0x0000)
struct SQPlayerController_ClientSetSpectatorCamera final
{
public:
	struct FVector                                CameraLocation;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CameraRotation;                                    // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ClientSetSpectatorCamera) == 0x000004, "Wrong alignment on SQPlayerController_ClientSetSpectatorCamera");
static_assert(sizeof(SQPlayerController_ClientSetSpectatorCamera) == 0x000018, "Wrong size on SQPlayerController_ClientSetSpectatorCamera");
static_assert(offsetof(SQPlayerController_ClientSetSpectatorCamera, CameraLocation) == 0x000000, "Member 'SQPlayerController_ClientSetSpectatorCamera::CameraLocation' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ClientSetSpectatorCamera, CameraRotation) == 0x00000C, "Member 'SQPlayerController_ClientSetSpectatorCamera::CameraRotation' has a wrong offset!");

// Function Squad.SQPlayerController.ClientShowToast
// 0x0020 (0x0020 - 0x0000)
struct SQPlayerController_ClientShowToast final
{
public:
	class FText                                   ToastText;                                         // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Lifetime;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E49[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPlayerController_ClientShowToast) == 0x000008, "Wrong alignment on SQPlayerController_ClientShowToast");
static_assert(sizeof(SQPlayerController_ClientShowToast) == 0x000020, "Wrong size on SQPlayerController_ClientShowToast");
static_assert(offsetof(SQPlayerController_ClientShowToast, ToastText) == 0x000000, "Member 'SQPlayerController_ClientShowToast::ToastText' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ClientShowToast, Lifetime) == 0x000018, "Member 'SQPlayerController_ClientShowToast::Lifetime' has a wrong offset!");

// Function Squad.SQPlayerController.ClientShowVehicleInventory
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerController_ClientShowVehicleInventory final
{
public:
	class ASQVehicle*                             Vehicle;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESeatProgressMenuMode                         MenuMode;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4A[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPlayerController_ClientShowVehicleInventory) == 0x000008, "Wrong alignment on SQPlayerController_ClientShowVehicleInventory");
static_assert(sizeof(SQPlayerController_ClientShowVehicleInventory) == 0x000010, "Wrong size on SQPlayerController_ClientShowVehicleInventory");
static_assert(offsetof(SQPlayerController_ClientShowVehicleInventory, Vehicle) == 0x000000, "Member 'SQPlayerController_ClientShowVehicleInventory::Vehicle' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ClientShowVehicleInventory, MenuMode) == 0x000008, "Member 'SQPlayerController_ClientShowVehicleInventory::MenuMode' has a wrong offset!");

// Function Squad.SQPlayerController.ClientStartSeatProgressBar
// 0x0018 (0x0018 - 0x0000)
struct SQPlayerController_ClientStartSeatProgressBar final
{
public:
	float                                         Timer;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4B[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQVehicle*                             Vehicle;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESeatProgressMenuMode                         MenuMode;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4C[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPlayerController_ClientStartSeatProgressBar) == 0x000008, "Wrong alignment on SQPlayerController_ClientStartSeatProgressBar");
static_assert(sizeof(SQPlayerController_ClientStartSeatProgressBar) == 0x000018, "Wrong size on SQPlayerController_ClientStartSeatProgressBar");
static_assert(offsetof(SQPlayerController_ClientStartSeatProgressBar, Timer) == 0x000000, "Member 'SQPlayerController_ClientStartSeatProgressBar::Timer' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ClientStartSeatProgressBar, Vehicle) == 0x000008, "Member 'SQPlayerController_ClientStartSeatProgressBar::Vehicle' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ClientStartSeatProgressBar, MenuMode) == 0x000010, "Member 'SQPlayerController_ClientStartSeatProgressBar::MenuMode' has a wrong offset!");

// Function Squad.SQPlayerController.ClientSystemMessage
// 0x0028 (0x0028 - 0x0000)
struct SQPlayerController_ClientSystemMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MessageLifetime;                                   // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQNotificationTypes                          NotificationType;                                  // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4D[0x3];                                      // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPlayerController_ClientSystemMessage) == 0x000008, "Wrong alignment on SQPlayerController_ClientSystemMessage");
static_assert(sizeof(SQPlayerController_ClientSystemMessage) == 0x000028, "Wrong size on SQPlayerController_ClientSystemMessage");
static_assert(offsetof(SQPlayerController_ClientSystemMessage, Message) == 0x000000, "Member 'SQPlayerController_ClientSystemMessage::Message' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ClientSystemMessage, Color) == 0x000010, "Member 'SQPlayerController_ClientSystemMessage::Color' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ClientSystemMessage, MessageLifetime) == 0x000020, "Member 'SQPlayerController_ClientSystemMessage::MessageLifetime' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ClientSystemMessage, NotificationType) == 0x000024, "Member 'SQPlayerController_ClientSystemMessage::NotificationType' has a wrong offset!");

// Function Squad.SQPlayerController.ClientWasKickedFromSquad
// 0x0020 (0x0020 - 0x0000)
struct SQPlayerController_ClientWasKickedFromSquad final
{
public:
	class FText                                   KickReason;                                        // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SquadId;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationOfBan;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ClientWasKickedFromSquad) == 0x000008, "Wrong alignment on SQPlayerController_ClientWasKickedFromSquad");
static_assert(sizeof(SQPlayerController_ClientWasKickedFromSquad) == 0x000020, "Wrong size on SQPlayerController_ClientWasKickedFromSquad");
static_assert(offsetof(SQPlayerController_ClientWasKickedFromSquad, KickReason) == 0x000000, "Member 'SQPlayerController_ClientWasKickedFromSquad::KickReason' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ClientWasKickedFromSquad, SquadId) == 0x000018, "Member 'SQPlayerController_ClientWasKickedFromSquad::SquadId' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ClientWasKickedFromSquad, DurationOfBan) == 0x00001C, "Member 'SQPlayerController_ClientWasKickedFromSquad::DurationOfBan' has a wrong offset!");

// Function Squad.SQPlayerController.CreateMarker
// 0x0028 (0x0028 - 0x0000)
struct SQPlayerController_CreateMarker final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClientId;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             IconTexture;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MapPosition;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeT;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4E[0x4];                                      // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 MyOwner;                                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_CreateMarker) == 0x000008, "Wrong alignment on SQPlayerController_CreateMarker");
static_assert(sizeof(SQPlayerController_CreateMarker) == 0x000028, "Wrong size on SQPlayerController_CreateMarker");
static_assert(offsetof(SQPlayerController_CreateMarker, TeamId) == 0x000000, "Member 'SQPlayerController_CreateMarker::TeamId' has a wrong offset!");
static_assert(offsetof(SQPlayerController_CreateMarker, ClientId) == 0x000004, "Member 'SQPlayerController_CreateMarker::ClientId' has a wrong offset!");
static_assert(offsetof(SQPlayerController_CreateMarker, IconTexture) == 0x000008, "Member 'SQPlayerController_CreateMarker::IconTexture' has a wrong offset!");
static_assert(offsetof(SQPlayerController_CreateMarker, MapPosition) == 0x000010, "Member 'SQPlayerController_CreateMarker::MapPosition' has a wrong offset!");
static_assert(offsetof(SQPlayerController_CreateMarker, LifeT) == 0x000018, "Member 'SQPlayerController_CreateMarker::LifeT' has a wrong offset!");
static_assert(offsetof(SQPlayerController_CreateMarker, MyOwner) == 0x000020, "Member 'SQPlayerController_CreateMarker::MyOwner' has a wrong offset!");

// Function Squad.SQPlayerController.CreateSquad
// 0x0018 (0x0018 - 0x0000)
struct SQPlayerController_CreateSquad final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Locked;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4F[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPlayerController_CreateSquad) == 0x000008, "Wrong alignment on SQPlayerController_CreateSquad");
static_assert(sizeof(SQPlayerController_CreateSquad) == 0x000018, "Wrong size on SQPlayerController_CreateSquad");
static_assert(offsetof(SQPlayerController_CreateSquad, Param_Name) == 0x000000, "Member 'SQPlayerController_CreateSquad::Param_Name' has a wrong offset!");
static_assert(offsetof(SQPlayerController_CreateSquad, Locked) == 0x000010, "Member 'SQPlayerController_CreateSquad::Locked' has a wrong offset!");

// Function Squad.SQPlayerController.DebugAssignSteamTestItem
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_DebugAssignSteamTestItem final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_DebugAssignSteamTestItem) == 0x000004, "Wrong alignment on SQPlayerController_DebugAssignSteamTestItem");
static_assert(sizeof(SQPlayerController_DebugAssignSteamTestItem) == 0x000008, "Wrong size on SQPlayerController_DebugAssignSteamTestItem");
static_assert(offsetof(SQPlayerController_DebugAssignSteamTestItem, ID) == 0x000000, "Member 'SQPlayerController_DebugAssignSteamTestItem::ID' has a wrong offset!");
static_assert(offsetof(SQPlayerController_DebugAssignSteamTestItem, Amount) == 0x000004, "Member 'SQPlayerController_DebugAssignSteamTestItem::Amount' has a wrong offset!");

// Function Squad.SQPlayerController.DebugBugItGo
// 0x0018 (0x0018 - 0x0000)
struct SQPlayerController_DebugBugItGo final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Roll;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_DebugBugItGo) == 0x000004, "Wrong alignment on SQPlayerController_DebugBugItGo");
static_assert(sizeof(SQPlayerController_DebugBugItGo) == 0x000018, "Wrong size on SQPlayerController_DebugBugItGo");
static_assert(offsetof(SQPlayerController_DebugBugItGo, X) == 0x000000, "Member 'SQPlayerController_DebugBugItGo::X' has a wrong offset!");
static_assert(offsetof(SQPlayerController_DebugBugItGo, Y) == 0x000004, "Member 'SQPlayerController_DebugBugItGo::Y' has a wrong offset!");
static_assert(offsetof(SQPlayerController_DebugBugItGo, Z) == 0x000008, "Member 'SQPlayerController_DebugBugItGo::Z' has a wrong offset!");
static_assert(offsetof(SQPlayerController_DebugBugItGo, Pitch) == 0x00000C, "Member 'SQPlayerController_DebugBugItGo::Pitch' has a wrong offset!");
static_assert(offsetof(SQPlayerController_DebugBugItGo, Yaw) == 0x000010, "Member 'SQPlayerController_DebugBugItGo::Yaw' has a wrong offset!");
static_assert(offsetof(SQPlayerController_DebugBugItGo, Roll) == 0x000014, "Member 'SQPlayerController_DebugBugItGo::Roll' has a wrong offset!");

// Function Squad.SQPlayerController.DebugPlayEmote
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerController_DebugPlayEmote final
{
public:
	class FString                                 EmoteDataName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_DebugPlayEmote) == 0x000008, "Wrong alignment on SQPlayerController_DebugPlayEmote");
static_assert(sizeof(SQPlayerController_DebugPlayEmote) == 0x000010, "Wrong size on SQPlayerController_DebugPlayEmote");
static_assert(offsetof(SQPlayerController_DebugPlayEmote, EmoteDataName) == 0x000000, "Member 'SQPlayerController_DebugPlayEmote::EmoteDataName' has a wrong offset!");

// Function Squad.SQPlayerController.DebugRemoveSteamTestItem
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_DebugRemoveSteamTestItem final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_DebugRemoveSteamTestItem) == 0x000004, "Wrong alignment on SQPlayerController_DebugRemoveSteamTestItem");
static_assert(sizeof(SQPlayerController_DebugRemoveSteamTestItem) == 0x000008, "Wrong size on SQPlayerController_DebugRemoveSteamTestItem");
static_assert(offsetof(SQPlayerController_DebugRemoveSteamTestItem, ID) == 0x000000, "Member 'SQPlayerController_DebugRemoveSteamTestItem::ID' has a wrong offset!");
static_assert(offsetof(SQPlayerController_DebugRemoveSteamTestItem, Amount) == 0x000004, "Member 'SQPlayerController_DebugRemoveSteamTestItem::Amount' has a wrong offset!");

// Function Squad.SQPlayerController.DebugSetServerSecondsNonSeamlessForced
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerController_DebugSetServerSecondsNonSeamlessForced final
{
public:
	float                                         Seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_DebugSetServerSecondsNonSeamlessForced) == 0x000004, "Wrong alignment on SQPlayerController_DebugSetServerSecondsNonSeamlessForced");
static_assert(sizeof(SQPlayerController_DebugSetServerSecondsNonSeamlessForced) == 0x000004, "Wrong size on SQPlayerController_DebugSetServerSecondsNonSeamlessForced");
static_assert(offsetof(SQPlayerController_DebugSetServerSecondsNonSeamlessForced, Seconds) == 0x000000, "Member 'SQPlayerController_DebugSetServerSecondsNonSeamlessForced::Seconds' has a wrong offset!");

// Function Squad.SQPlayerController.DebugSetServerTickRate
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerController_DebugSetServerTickRate final
{
public:
	float                                         NewTickRate;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_DebugSetServerTickRate) == 0x000004, "Wrong alignment on SQPlayerController_DebugSetServerTickRate");
static_assert(sizeof(SQPlayerController_DebugSetServerTickRate) == 0x000004, "Wrong size on SQPlayerController_DebugSetServerTickRate");
static_assert(offsetof(SQPlayerController_DebugSetServerTickRate, NewTickRate) == 0x000000, "Member 'SQPlayerController_DebugSetServerTickRate::NewTickRate' has a wrong offset!");

// Function Squad.SQPlayerController.DebugToggleEditorBlastCones
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_DebugToggleEditorBlastCones final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_DebugToggleEditorBlastCones) == 0x000001, "Wrong alignment on SQPlayerController_DebugToggleEditorBlastCones");
static_assert(sizeof(SQPlayerController_DebugToggleEditorBlastCones) == 0x000001, "Wrong size on SQPlayerController_DebugToggleEditorBlastCones");
static_assert(offsetof(SQPlayerController_DebugToggleEditorBlastCones, Value) == 0x000000, "Member 'SQPlayerController_DebugToggleEditorBlastCones::Value' has a wrong offset!");

// Function Squad.SQPlayerController.DebugToggleForceAllowCommanderActions
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_DebugToggleForceAllowCommanderActions final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_DebugToggleForceAllowCommanderActions) == 0x000001, "Wrong alignment on SQPlayerController_DebugToggleForceAllowCommanderActions");
static_assert(sizeof(SQPlayerController_DebugToggleForceAllowCommanderActions) == 0x000001, "Wrong size on SQPlayerController_DebugToggleForceAllowCommanderActions");
static_assert(offsetof(SQPlayerController_DebugToggleForceAllowCommanderActions, Value) == 0x000000, "Member 'SQPlayerController_DebugToggleForceAllowCommanderActions::Value' has a wrong offset!");

// Function Squad.SQPlayerController.DebugToggleForceNoCommanderCooldowns
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_DebugToggleForceNoCommanderCooldowns final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_DebugToggleForceNoCommanderCooldowns) == 0x000001, "Wrong alignment on SQPlayerController_DebugToggleForceNoCommanderCooldowns");
static_assert(sizeof(SQPlayerController_DebugToggleForceNoCommanderCooldowns) == 0x000001, "Wrong size on SQPlayerController_DebugToggleForceNoCommanderCooldowns");
static_assert(offsetof(SQPlayerController_DebugToggleForceNoCommanderCooldowns, Value) == 0x000000, "Member 'SQPlayerController_DebugToggleForceNoCommanderCooldowns::Value' has a wrong offset!");

// Function Squad.SQPlayerController.DebugToggleInfiniteMags
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_DebugToggleInfiniteMags final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_DebugToggleInfiniteMags) == 0x000001, "Wrong alignment on SQPlayerController_DebugToggleInfiniteMags");
static_assert(sizeof(SQPlayerController_DebugToggleInfiniteMags) == 0x000001, "Wrong size on SQPlayerController_DebugToggleInfiniteMags");
static_assert(offsetof(SQPlayerController_DebugToggleInfiniteMags, Value) == 0x000000, "Member 'SQPlayerController_DebugToggleInfiniteMags::Value' has a wrong offset!");

// Function Squad.SQPlayerController.DebugToggleNoStaminaDrain
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_DebugToggleNoStaminaDrain final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_DebugToggleNoStaminaDrain) == 0x000001, "Wrong alignment on SQPlayerController_DebugToggleNoStaminaDrain");
static_assert(sizeof(SQPlayerController_DebugToggleNoStaminaDrain) == 0x000001, "Wrong size on SQPlayerController_DebugToggleNoStaminaDrain");
static_assert(offsetof(SQPlayerController_DebugToggleNoStaminaDrain, Value) == 0x000000, "Member 'SQPlayerController_DebugToggleNoStaminaDrain::Value' has a wrong offset!");

// Function Squad.SQPlayerController.DebugToggleShowHitreg
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_DebugToggleShowHitreg final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_DebugToggleShowHitreg) == 0x000001, "Wrong alignment on SQPlayerController_DebugToggleShowHitreg");
static_assert(sizeof(SQPlayerController_DebugToggleShowHitreg) == 0x000001, "Wrong size on SQPlayerController_DebugToggleShowHitreg");
static_assert(offsetof(SQPlayerController_DebugToggleShowHitreg, Value) == 0x000000, "Member 'SQPlayerController_DebugToggleShowHitreg::Value' has a wrong offset!");

// Function Squad.SQPlayerController.DebugToggleShowRebase
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_DebugToggleShowRebase final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_DebugToggleShowRebase) == 0x000001, "Wrong alignment on SQPlayerController_DebugToggleShowRebase");
static_assert(sizeof(SQPlayerController_DebugToggleShowRebase) == 0x000001, "Wrong size on SQPlayerController_DebugToggleShowRebase");
static_assert(offsetof(SQPlayerController_DebugToggleShowRebase, Value) == 0x000000, "Member 'SQPlayerController_DebugToggleShowRebase::Value' has a wrong offset!");

// Function Squad.SQPlayerController.DebugToggleShowVehicleDamageReceived
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_DebugToggleShowVehicleDamageReceived final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_DebugToggleShowVehicleDamageReceived) == 0x000001, "Wrong alignment on SQPlayerController_DebugToggleShowVehicleDamageReceived");
static_assert(sizeof(SQPlayerController_DebugToggleShowVehicleDamageReceived) == 0x000001, "Wrong size on SQPlayerController_DebugToggleShowVehicleDamageReceived");
static_assert(offsetof(SQPlayerController_DebugToggleShowVehicleDamageReceived, Value) == 0x000000, "Member 'SQPlayerController_DebugToggleShowVehicleDamageReceived::Value' has a wrong offset!");

// Function Squad.SQPlayerController.DebugToggleVehicleGodMode
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_DebugToggleVehicleGodMode final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_DebugToggleVehicleGodMode) == 0x000001, "Wrong alignment on SQPlayerController_DebugToggleVehicleGodMode");
static_assert(sizeof(SQPlayerController_DebugToggleVehicleGodMode) == 0x000001, "Wrong size on SQPlayerController_DebugToggleVehicleGodMode");
static_assert(offsetof(SQPlayerController_DebugToggleVehicleGodMode, Value) == 0x000000, "Member 'SQPlayerController_DebugToggleVehicleGodMode::Value' has a wrong offset!");

// Function Squad.SQPlayerController.DisbandFireTeam
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerController_DisbandFireTeam final
{
public:
	int32                                         FireTeamIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_DisbandFireTeam) == 0x000004, "Wrong alignment on SQPlayerController_DisbandFireTeam");
static_assert(sizeof(SQPlayerController_DisbandFireTeam) == 0x000004, "Wrong size on SQPlayerController_DisbandFireTeam");
static_assert(offsetof(SQPlayerController_DisbandFireTeam, FireTeamIndex) == 0x000000, "Member 'SQPlayerController_DisbandFireTeam::FireTeamIndex' has a wrong offset!");

// Function Squad.SQPlayerController.FinalizePendingDeployable
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_FinalizePendingDeployable final
{
public:
	bool                                          OutSuccess;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_FinalizePendingDeployable) == 0x000001, "Wrong alignment on SQPlayerController_FinalizePendingDeployable");
static_assert(sizeof(SQPlayerController_FinalizePendingDeployable) == 0x000001, "Wrong size on SQPlayerController_FinalizePendingDeployable");
static_assert(offsetof(SQPlayerController_FinalizePendingDeployable, OutSuccess) == 0x000000, "Member 'SQPlayerController_FinalizePendingDeployable::OutSuccess' has a wrong offset!");

// Function Squad.SQPlayerController.FinalizePendingDeployableItem
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_FinalizePendingDeployableItem final
{
public:
	bool                                          OutSuccess;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_FinalizePendingDeployableItem) == 0x000001, "Wrong alignment on SQPlayerController_FinalizePendingDeployableItem");
static_assert(sizeof(SQPlayerController_FinalizePendingDeployableItem) == 0x000001, "Wrong size on SQPlayerController_FinalizePendingDeployableItem");
static_assert(offsetof(SQPlayerController_FinalizePendingDeployableItem, OutSuccess) == 0x000000, "Member 'SQPlayerController_FinalizePendingDeployableItem::OutSuccess' has a wrong offset!");

// Function Squad.SQPlayerController.GetLastDeathTime
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerController_GetLastDeathTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_GetLastDeathTime) == 0x000004, "Wrong alignment on SQPlayerController_GetLastDeathTime");
static_assert(sizeof(SQPlayerController_GetLastDeathTime) == 0x000004, "Wrong size on SQPlayerController_GetLastDeathTime");
static_assert(offsetof(SQPlayerController_GetLastDeathTime, ReturnValue) == 0x000000, "Member 'SQPlayerController_GetLastDeathTime::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.GiveFireTeamLeader
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerController_GiveFireTeamLeader final
{
public:
	class ASQPlayerState*                         NewLeader;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FireTeamIndex;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E50[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPlayerController_GiveFireTeamLeader) == 0x000008, "Wrong alignment on SQPlayerController_GiveFireTeamLeader");
static_assert(sizeof(SQPlayerController_GiveFireTeamLeader) == 0x000010, "Wrong size on SQPlayerController_GiveFireTeamLeader");
static_assert(offsetof(SQPlayerController_GiveFireTeamLeader, NewLeader) == 0x000000, "Member 'SQPlayerController_GiveFireTeamLeader::NewLeader' has a wrong offset!");
static_assert(offsetof(SQPlayerController_GiveFireTeamLeader, FireTeamIndex) == 0x000008, "Member 'SQPlayerController_GiveFireTeamLeader::FireTeamIndex' has a wrong offset!");

// Function Squad.SQPlayerController.GiveSquadLeader
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_GiveSquadLeader final
{
public:
	class ASQPlayerState*                         NewLeader;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_GiveSquadLeader) == 0x000008, "Wrong alignment on SQPlayerController_GiveSquadLeader");
static_assert(sizeof(SQPlayerController_GiveSquadLeader) == 0x000008, "Wrong size on SQPlayerController_GiveSquadLeader");
static_assert(offsetof(SQPlayerController_GiveSquadLeader, NewLeader) == 0x000000, "Member 'SQPlayerController_GiveSquadLeader::NewLeader' has a wrong offset!");

// Function Squad.SQPlayerController.IsEntryMap
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_IsEntryMap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_IsEntryMap) == 0x000001, "Wrong alignment on SQPlayerController_IsEntryMap");
static_assert(sizeof(SQPlayerController_IsEntryMap) == 0x000001, "Wrong size on SQPlayerController_IsEntryMap");
static_assert(offsetof(SQPlayerController_IsEntryMap, ReturnValue) == 0x000000, "Member 'SQPlayerController_IsEntryMap::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.IsInactive
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_IsInactive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_IsInactive) == 0x000001, "Wrong alignment on SQPlayerController_IsInactive");
static_assert(sizeof(SQPlayerController_IsInactive) == 0x000001, "Wrong size on SQPlayerController_IsInactive");
static_assert(offsetof(SQPlayerController_IsInactive, ReturnValue) == 0x000000, "Member 'SQPlayerController_IsInactive::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.IsInVehicle
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_IsInVehicle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_IsInVehicle) == 0x000001, "Wrong alignment on SQPlayerController_IsInVehicle");
static_assert(sizeof(SQPlayerController_IsInVehicle) == 0x000001, "Wrong size on SQPlayerController_IsInVehicle");
static_assert(offsetof(SQPlayerController_IsInVehicle, ReturnValue) == 0x000000, "Member 'SQPlayerController_IsInVehicle::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.IsPlayer
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_IsPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_IsPlayer) == 0x000001, "Wrong alignment on SQPlayerController_IsPlayer");
static_assert(sizeof(SQPlayerController_IsPlayer) == 0x000001, "Wrong size on SQPlayerController_IsPlayer");
static_assert(offsetof(SQPlayerController_IsPlayer, ReturnValue) == 0x000000, "Member 'SQPlayerController_IsPlayer::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.IsShowingSpawnMenu
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_IsShowingSpawnMenu final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_IsShowingSpawnMenu) == 0x000001, "Wrong alignment on SQPlayerController_IsShowingSpawnMenu");
static_assert(sizeof(SQPlayerController_IsShowingSpawnMenu) == 0x000001, "Wrong size on SQPlayerController_IsShowingSpawnMenu");
static_assert(offsetof(SQPlayerController_IsShowingSpawnMenu, ReturnValue) == 0x000000, "Member 'SQPlayerController_IsShowingSpawnMenu::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.JoinSquadWithId
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerController_JoinSquadWithId final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_JoinSquadWithId) == 0x000004, "Wrong alignment on SQPlayerController_JoinSquadWithId");
static_assert(sizeof(SQPlayerController_JoinSquadWithId) == 0x000004, "Wrong size on SQPlayerController_JoinSquadWithId");
static_assert(offsetof(SQPlayerController_JoinSquadWithId, ID) == 0x000000, "Member 'SQPlayerController_JoinSquadWithId::ID' has a wrong offset!");

// Function Squad.SQPlayerController.JoinSquadWithName
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerController_JoinSquadWithName final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_JoinSquadWithName) == 0x000008, "Wrong alignment on SQPlayerController_JoinSquadWithName");
static_assert(sizeof(SQPlayerController_JoinSquadWithName) == 0x000010, "Wrong size on SQPlayerController_JoinSquadWithName");
static_assert(offsetof(SQPlayerController_JoinSquadWithName, Param_Name) == 0x000000, "Member 'SQPlayerController_JoinSquadWithName::Param_Name' has a wrong offset!");

// Function Squad.SQPlayerController.KickPlayerFromSquad
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_KickPlayerFromSquad final
{
public:
	class ASQPlayerState*                         ToKick;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_KickPlayerFromSquad) == 0x000008, "Wrong alignment on SQPlayerController_KickPlayerFromSquad");
static_assert(sizeof(SQPlayerController_KickPlayerFromSquad) == 0x000008, "Wrong size on SQPlayerController_KickPlayerFromSquad");
static_assert(offsetof(SQPlayerController_KickPlayerFromSquad, ToKick) == 0x000000, "Member 'SQPlayerController_KickPlayerFromSquad::ToKick' has a wrong offset!");

// Function Squad.SQPlayerController.MovePlayerToFireTeam
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerController_MovePlayerToFireTeam final
{
public:
	class ASQPlayerState*                         TargetPlayerState;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FireTeamIndex;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Position;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_MovePlayerToFireTeam) == 0x000008, "Wrong alignment on SQPlayerController_MovePlayerToFireTeam");
static_assert(sizeof(SQPlayerController_MovePlayerToFireTeam) == 0x000010, "Wrong size on SQPlayerController_MovePlayerToFireTeam");
static_assert(offsetof(SQPlayerController_MovePlayerToFireTeam, TargetPlayerState) == 0x000000, "Member 'SQPlayerController_MovePlayerToFireTeam::TargetPlayerState' has a wrong offset!");
static_assert(offsetof(SQPlayerController_MovePlayerToFireTeam, FireTeamIndex) == 0x000008, "Member 'SQPlayerController_MovePlayerToFireTeam::FireTeamIndex' has a wrong offset!");
static_assert(offsetof(SQPlayerController_MovePlayerToFireTeam, Position) == 0x00000C, "Member 'SQPlayerController_MovePlayerToFireTeam::Position' has a wrong offset!");

// Function Squad.SQPlayerController.MuteSquad
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_MuteSquad final
{
public:
	class ASQSquadState*                          MuteSquadState;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_MuteSquad) == 0x000008, "Wrong alignment on SQPlayerController_MuteSquad");
static_assert(sizeof(SQPlayerController_MuteSquad) == 0x000008, "Wrong size on SQPlayerController_MuteSquad");
static_assert(offsetof(SQPlayerController_MuteSquad, MuteSquadState) == 0x000000, "Member 'SQPlayerController_MuteSquad::MuteSquadState' has a wrong offset!");

// Function Squad.SQPlayerController.OnAltFireWeaponOverride
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_OnAltFireWeaponOverride final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_OnAltFireWeaponOverride) == 0x000001, "Wrong alignment on SQPlayerController_OnAltFireWeaponOverride");
static_assert(sizeof(SQPlayerController_OnAltFireWeaponOverride) == 0x000001, "Wrong size on SQPlayerController_OnAltFireWeaponOverride");
static_assert(offsetof(SQPlayerController_OnAltFireWeaponOverride, ReturnValue) == 0x000000, "Member 'SQPlayerController_OnAltFireWeaponOverride::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.OnEnterBoundary
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerController_OnEnterBoundary final
{
public:
	class USQBoundaryListener*                    Listener;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQBoundary*                            Boundary;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_OnEnterBoundary) == 0x000008, "Wrong alignment on SQPlayerController_OnEnterBoundary");
static_assert(sizeof(SQPlayerController_OnEnterBoundary) == 0x000010, "Wrong size on SQPlayerController_OnEnterBoundary");
static_assert(offsetof(SQPlayerController_OnEnterBoundary, Listener) == 0x000000, "Member 'SQPlayerController_OnEnterBoundary::Listener' has a wrong offset!");
static_assert(offsetof(SQPlayerController_OnEnterBoundary, Boundary) == 0x000008, "Member 'SQPlayerController_OnEnterBoundary::Boundary' has a wrong offset!");

// Function Squad.SQPlayerController.OnExitBoundary
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerController_OnExitBoundary final
{
public:
	class USQBoundaryListener*                    Listener;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQBoundary*                            Boundary;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_OnExitBoundary) == 0x000008, "Wrong alignment on SQPlayerController_OnExitBoundary");
static_assert(sizeof(SQPlayerController_OnExitBoundary) == 0x000010, "Wrong size on SQPlayerController_OnExitBoundary");
static_assert(offsetof(SQPlayerController_OnExitBoundary, Listener) == 0x000000, "Member 'SQPlayerController_OnExitBoundary::Listener' has a wrong offset!");
static_assert(offsetof(SQPlayerController_OnExitBoundary, Boundary) == 0x000008, "Member 'SQPlayerController_OnExitBoundary::Boundary' has a wrong offset!");

// Function Squad.SQPlayerController.OnFireWeaponOverride
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_OnFireWeaponOverride final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_OnFireWeaponOverride) == 0x000001, "Wrong alignment on SQPlayerController_OnFireWeaponOverride");
static_assert(sizeof(SQPlayerController_OnFireWeaponOverride) == 0x000001, "Wrong size on SQPlayerController_OnFireWeaponOverride");
static_assert(offsetof(SQPlayerController_OnFireWeaponOverride, ReturnValue) == 0x000000, "Member 'SQPlayerController_OnFireWeaponOverride::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.OnOutOfMapBoundsChanged
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_OnOutOfMapBoundsChanged final
{
public:
	float                                         KillTimestamp;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOutOfBounds;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E51[0x3];                                      // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPlayerController_OnOutOfMapBoundsChanged) == 0x000004, "Wrong alignment on SQPlayerController_OnOutOfMapBoundsChanged");
static_assert(sizeof(SQPlayerController_OnOutOfMapBoundsChanged) == 0x000008, "Wrong size on SQPlayerController_OnOutOfMapBoundsChanged");
static_assert(offsetof(SQPlayerController_OnOutOfMapBoundsChanged, KillTimestamp) == 0x000000, "Member 'SQPlayerController_OnOutOfMapBoundsChanged::KillTimestamp' has a wrong offset!");
static_assert(offsetof(SQPlayerController_OnOutOfMapBoundsChanged, bIsOutOfBounds) == 0x000004, "Member 'SQPlayerController_OnOutOfMapBoundsChanged::bIsOutOfBounds' has a wrong offset!");

// Function Squad.SQPlayerController.OnPendingDeathChanged
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_OnPendingDeathChanged final
{
public:
	float                                         KillTimestamp;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeathIsPending;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E52[0x3];                                      // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPlayerController_OnPendingDeathChanged) == 0x000004, "Wrong alignment on SQPlayerController_OnPendingDeathChanged");
static_assert(sizeof(SQPlayerController_OnPendingDeathChanged) == 0x000008, "Wrong size on SQPlayerController_OnPendingDeathChanged");
static_assert(offsetof(SQPlayerController_OnPendingDeathChanged, KillTimestamp) == 0x000000, "Member 'SQPlayerController_OnPendingDeathChanged::KillTimestamp' has a wrong offset!");
static_assert(offsetof(SQPlayerController_OnPendingDeathChanged, bDeathIsPending) == 0x000004, "Member 'SQPlayerController_OnPendingDeathChanged::bDeathIsPending' has a wrong offset!");

// Function Squad.SQPlayerController.OnRep_SquadState
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_OnRep_SquadState final
{
public:
	class ASQSquadState*                          OldSquadState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_OnRep_SquadState) == 0x000008, "Wrong alignment on SQPlayerController_OnRep_SquadState");
static_assert(sizeof(SQPlayerController_OnRep_SquadState) == 0x000008, "Wrong size on SQPlayerController_OnRep_SquadState");
static_assert(offsetof(SQPlayerController_OnRep_SquadState, OldSquadState) == 0x000000, "Member 'SQPlayerController_OnRep_SquadState::OldSquadState' has a wrong offset!");

// Function Squad.SQPlayerController.OnSelectedSpawnActivatedTimeStampChangedSignal
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_OnSelectedSpawnActivatedTimeStampChangedSignal final
{
public:
	class ASQGameSpawn*                           SpawnPoint;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_OnSelectedSpawnActivatedTimeStampChangedSignal) == 0x000008, "Wrong alignment on SQPlayerController_OnSelectedSpawnActivatedTimeStampChangedSignal");
static_assert(sizeof(SQPlayerController_OnSelectedSpawnActivatedTimeStampChangedSignal) == 0x000008, "Wrong size on SQPlayerController_OnSelectedSpawnActivatedTimeStampChangedSignal");
static_assert(offsetof(SQPlayerController_OnSelectedSpawnActivatedTimeStampChangedSignal, SpawnPoint) == 0x000000, "Member 'SQPlayerController_OnSelectedSpawnActivatedTimeStampChangedSignal::SpawnPoint' has a wrong offset!");

// Function Squad.SQPlayerController.OnSelectedSpawnerDestroyed
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_OnSelectedSpawnerDestroyed final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_OnSelectedSpawnerDestroyed) == 0x000008, "Wrong alignment on SQPlayerController_OnSelectedSpawnerDestroyed");
static_assert(sizeof(SQPlayerController_OnSelectedSpawnerDestroyed) == 0x000008, "Wrong size on SQPlayerController_OnSelectedSpawnerDestroyed");
static_assert(offsetof(SQPlayerController_OnSelectedSpawnerDestroyed, Actor) == 0x000000, "Member 'SQPlayerController_OnSelectedSpawnerDestroyed::Actor' has a wrong offset!");

// Function Squad.SQPlayerController.OnSelectedSpawnSiegedStateChanged
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_OnSelectedSpawnSiegedStateChanged final
{
public:
	class ASQGameSpawn*                           SpawnPoint;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_OnSelectedSpawnSiegedStateChanged) == 0x000008, "Wrong alignment on SQPlayerController_OnSelectedSpawnSiegedStateChanged");
static_assert(sizeof(SQPlayerController_OnSelectedSpawnSiegedStateChanged) == 0x000008, "Wrong size on SQPlayerController_OnSelectedSpawnSiegedStateChanged");
static_assert(offsetof(SQPlayerController_OnSelectedSpawnSiegedStateChanged, SpawnPoint) == 0x000000, "Member 'SQPlayerController_OnSelectedSpawnSiegedStateChanged::SpawnPoint' has a wrong offset!");

// Function Squad.SQPlayerController.OnSpawningEnabledStateChanged
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_OnSpawningEnabledStateChanged final
{
public:
	class ASQGameSpawn*                           SpawnPoint;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_OnSpawningEnabledStateChanged) == 0x000008, "Wrong alignment on SQPlayerController_OnSpawningEnabledStateChanged");
static_assert(sizeof(SQPlayerController_OnSpawningEnabledStateChanged) == 0x000008, "Wrong size on SQPlayerController_OnSpawningEnabledStateChanged");
static_assert(offsetof(SQPlayerController_OnSpawningEnabledStateChanged, SpawnPoint) == 0x000000, "Member 'SQPlayerController_OnSpawningEnabledStateChanged::SpawnPoint' has a wrong offset!");

// Function Squad.SQPlayerController.OnWorldOriginLocationChangedEventHandler
// 0x000C (0x000C - 0x0000)
struct SQPlayerController_OnWorldOriginLocationChangedEventHandler final
{
public:
	struct FVector                                WorldOrigin;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_OnWorldOriginLocationChangedEventHandler) == 0x000004, "Wrong alignment on SQPlayerController_OnWorldOriginLocationChangedEventHandler");
static_assert(sizeof(SQPlayerController_OnWorldOriginLocationChangedEventHandler) == 0x00000C, "Wrong size on SQPlayerController_OnWorldOriginLocationChangedEventHandler");
static_assert(offsetof(SQPlayerController_OnWorldOriginLocationChangedEventHandler, WorldOrigin) == 0x000000, "Member 'SQPlayerController_OnWorldOriginLocationChangedEventHandler::WorldOrigin' has a wrong offset!");

// Function Squad.SQPlayerController.PlayEmote
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_PlayEmote final
{
public:
	const class USQEmotesData*                    EmoteData;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_PlayEmote) == 0x000008, "Wrong alignment on SQPlayerController_PlayEmote");
static_assert(sizeof(SQPlayerController_PlayEmote) == 0x000008, "Wrong size on SQPlayerController_PlayEmote");
static_assert(offsetof(SQPlayerController_PlayEmote, EmoteData) == 0x000000, "Member 'SQPlayerController_PlayEmote::EmoteData' has a wrong offset!");

// Function Squad.SQPlayerController.PlayEmoteAnim
// 0x000C (0x000C - 0x0000)
struct SQPlayerController_PlayEmoteAnim final
{
public:
	ESQEmotes                                     Emote;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E53[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CustomName;                                        // 0x0004(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_PlayEmoteAnim) == 0x000004, "Wrong alignment on SQPlayerController_PlayEmoteAnim");
static_assert(sizeof(SQPlayerController_PlayEmoteAnim) == 0x00000C, "Wrong size on SQPlayerController_PlayEmoteAnim");
static_assert(offsetof(SQPlayerController_PlayEmoteAnim, Emote) == 0x000000, "Member 'SQPlayerController_PlayEmoteAnim::Emote' has a wrong offset!");
static_assert(offsetof(SQPlayerController_PlayEmoteAnim, CustomName) == 0x000004, "Member 'SQPlayerController_PlayEmoteAnim::CustomName' has a wrong offset!");

// Function Squad.SQPlayerController.ProcessApprovalEntry
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_ProcessApprovalEntry final
{
public:
	uint8                                         Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ProcessApprovalEntry) == 0x000001, "Wrong alignment on SQPlayerController_ProcessApprovalEntry");
static_assert(sizeof(SQPlayerController_ProcessApprovalEntry) == 0x000001, "Wrong size on SQPlayerController_ProcessApprovalEntry");
static_assert(offsetof(SQPlayerController_ProcessApprovalEntry, Mode) == 0x000000, "Member 'SQPlayerController_ProcessApprovalEntry::Mode' has a wrong offset!");

// Function Squad.SQPlayerController.RequestRole
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerController_RequestRole final
{
public:
	const class USQRoleSettings*                  InRoleSettings;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E54[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPlayerController_RequestRole) == 0x000008, "Wrong alignment on SQPlayerController_RequestRole");
static_assert(sizeof(SQPlayerController_RequestRole) == 0x000010, "Wrong size on SQPlayerController_RequestRole");
static_assert(offsetof(SQPlayerController_RequestRole, InRoleSettings) == 0x000000, "Member 'SQPlayerController_RequestRole::InRoleSettings' has a wrong offset!");
static_assert(offsetof(SQPlayerController_RequestRole, ReturnValue) == 0x000008, "Member 'SQPlayerController_RequestRole::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.RequestRoleRearm
// 0x0020 (0x0020 - 0x0000)
struct SQPlayerController_RequestRoleRearm final
{
public:
	const class USQRoleSettings*                  InRoleSettings;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ISQRearmSource>        InRearmSource;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E55[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPlayerController_RequestRoleRearm) == 0x000008, "Wrong alignment on SQPlayerController_RequestRoleRearm");
static_assert(sizeof(SQPlayerController_RequestRoleRearm) == 0x000020, "Wrong size on SQPlayerController_RequestRoleRearm");
static_assert(offsetof(SQPlayerController_RequestRoleRearm, InRoleSettings) == 0x000000, "Member 'SQPlayerController_RequestRoleRearm::InRoleSettings' has a wrong offset!");
static_assert(offsetof(SQPlayerController_RequestRoleRearm, InRearmSource) == 0x000008, "Member 'SQPlayerController_RequestRoleRearm::InRearmSource' has a wrong offset!");
static_assert(offsetof(SQPlayerController_RequestRoleRearm, ReturnValue) == 0x000018, "Member 'SQPlayerController_RequestRoleRearm::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.Say
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerController_Say final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_Say) == 0x000008, "Wrong alignment on SQPlayerController_Say");
static_assert(sizeof(SQPlayerController_Say) == 0x000010, "Wrong size on SQPlayerController_Say");
static_assert(offsetof(SQPlayerController_Say, Msg) == 0x000000, "Member 'SQPlayerController_Say::Msg' has a wrong offset!");

// Function Squad.SQPlayerController.SelectSpawn
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_SelectSpawn final
{
public:
	class ASQGameSpawn*                           Spawn;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_SelectSpawn) == 0x000008, "Wrong alignment on SQPlayerController_SelectSpawn");
static_assert(sizeof(SQPlayerController_SelectSpawn) == 0x000008, "Wrong size on SQPlayerController_SelectSpawn");
static_assert(offsetof(SQPlayerController_SelectSpawn, Spawn) == 0x000000, "Member 'SQPlayerController_SelectSpawn::Spawn' has a wrong offset!");

// Function Squad.SQPlayerController.ServerAddApprovalEntry
// 0x0040 (0x0040 - 0x0000)
struct SQPlayerController_ServerAddApprovalEntry final
{
public:
	struct FSQApprovalEntryRequest                Entry;                                             // 0x0000(0x0038)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EApprovalRequestChannels                      Filter;                                            // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E56[0x7];                                      // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPlayerController_ServerAddApprovalEntry) == 0x000008, "Wrong alignment on SQPlayerController_ServerAddApprovalEntry");
static_assert(sizeof(SQPlayerController_ServerAddApprovalEntry) == 0x000040, "Wrong size on SQPlayerController_ServerAddApprovalEntry");
static_assert(offsetof(SQPlayerController_ServerAddApprovalEntry, Entry) == 0x000000, "Member 'SQPlayerController_ServerAddApprovalEntry::Entry' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ServerAddApprovalEntry, Filter) == 0x000038, "Member 'SQPlayerController_ServerAddApprovalEntry::Filter' has a wrong offset!");

// Function Squad.SQPlayerController.ServerCancelEmote
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_ServerCancelEmote final
{
public:
	class FName                                   EmoteDataName;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerCancelEmote) == 0x000004, "Wrong alignment on SQPlayerController_ServerCancelEmote");
static_assert(sizeof(SQPlayerController_ServerCancelEmote) == 0x000008, "Wrong size on SQPlayerController_ServerCancelEmote");
static_assert(offsetof(SQPlayerController_ServerCancelEmote, EmoteDataName) == 0x000000, "Member 'SQPlayerController_ServerCancelEmote::EmoteDataName' has a wrong offset!");

// Function Squad.SQPlayerController.ServerChangeSquadLock
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_ServerChangeSquadLock final
{
public:
	class ASQSquadState*                          Squad;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerChangeSquadLock) == 0x000008, "Wrong alignment on SQPlayerController_ServerChangeSquadLock");
static_assert(sizeof(SQPlayerController_ServerChangeSquadLock) == 0x000008, "Wrong size on SQPlayerController_ServerChangeSquadLock");
static_assert(offsetof(SQPlayerController_ServerChangeSquadLock, Squad) == 0x000000, "Member 'SQPlayerController_ServerChangeSquadLock::Squad' has a wrong offset!");

// Function Squad.SQPlayerController.ServerChat
// 0x0018 (0x0018 - 0x0000)
struct SQPlayerController_ServerChat final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQChat                                       ChatType;                                          // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E57[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPlayerController_ServerChat) == 0x000008, "Wrong alignment on SQPlayerController_ServerChat");
static_assert(sizeof(SQPlayerController_ServerChat) == 0x000018, "Wrong size on SQPlayerController_ServerChat");
static_assert(offsetof(SQPlayerController_ServerChat, Msg) == 0x000000, "Member 'SQPlayerController_ServerChat::Msg' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ServerChat, ChatType) == 0x000010, "Member 'SQPlayerController_ServerChat::ChatType' has a wrong offset!");

// Function Squad.SQPlayerController.ServerCreateSquad
// 0x0018 (0x0018 - 0x0000)
struct SQPlayerController_ServerCreateSquad final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Locked;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E58[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPlayerController_ServerCreateSquad) == 0x000008, "Wrong alignment on SQPlayerController_ServerCreateSquad");
static_assert(sizeof(SQPlayerController_ServerCreateSquad) == 0x000018, "Wrong size on SQPlayerController_ServerCreateSquad");
static_assert(offsetof(SQPlayerController_ServerCreateSquad, Param_Name) == 0x000000, "Member 'SQPlayerController_ServerCreateSquad::Param_Name' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ServerCreateSquad, Locked) == 0x000010, "Member 'SQPlayerController_ServerCreateSquad::Locked' has a wrong offset!");

// Function Squad.SQPlayerController.ServerCreateVehicleOverlayWidget
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_ServerCreateVehicleOverlayWidget final
{
public:
	TSubclassOf<class USQVehicleViewWidget>       WidgetClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerCreateVehicleOverlayWidget) == 0x000008, "Wrong alignment on SQPlayerController_ServerCreateVehicleOverlayWidget");
static_assert(sizeof(SQPlayerController_ServerCreateVehicleOverlayWidget) == 0x000008, "Wrong size on SQPlayerController_ServerCreateVehicleOverlayWidget");
static_assert(offsetof(SQPlayerController_ServerCreateVehicleOverlayWidget, WidgetClass) == 0x000000, "Member 'SQPlayerController_ServerCreateVehicleOverlayWidget::WidgetClass' has a wrong offset!");

// Function Squad.SQPlayerController.ServerDebugAssignSteamTestItem
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_ServerDebugAssignSteamTestItem final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerDebugAssignSteamTestItem) == 0x000004, "Wrong alignment on SQPlayerController_ServerDebugAssignSteamTestItem");
static_assert(sizeof(SQPlayerController_ServerDebugAssignSteamTestItem) == 0x000008, "Wrong size on SQPlayerController_ServerDebugAssignSteamTestItem");
static_assert(offsetof(SQPlayerController_ServerDebugAssignSteamTestItem, ID) == 0x000000, "Member 'SQPlayerController_ServerDebugAssignSteamTestItem::ID' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ServerDebugAssignSteamTestItem, Amount) == 0x000004, "Member 'SQPlayerController_ServerDebugAssignSteamTestItem::Amount' has a wrong offset!");

// Function Squad.SQPlayerController.ServerDebugBugItGo
// 0x0018 (0x0018 - 0x0000)
struct SQPlayerController_ServerDebugBugItGo final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Roll;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerDebugBugItGo) == 0x000004, "Wrong alignment on SQPlayerController_ServerDebugBugItGo");
static_assert(sizeof(SQPlayerController_ServerDebugBugItGo) == 0x000018, "Wrong size on SQPlayerController_ServerDebugBugItGo");
static_assert(offsetof(SQPlayerController_ServerDebugBugItGo, X) == 0x000000, "Member 'SQPlayerController_ServerDebugBugItGo::X' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ServerDebugBugItGo, Y) == 0x000004, "Member 'SQPlayerController_ServerDebugBugItGo::Y' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ServerDebugBugItGo, Z) == 0x000008, "Member 'SQPlayerController_ServerDebugBugItGo::Z' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ServerDebugBugItGo, Pitch) == 0x00000C, "Member 'SQPlayerController_ServerDebugBugItGo::Pitch' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ServerDebugBugItGo, Yaw) == 0x000010, "Member 'SQPlayerController_ServerDebugBugItGo::Yaw' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ServerDebugBugItGo, Roll) == 0x000014, "Member 'SQPlayerController_ServerDebugBugItGo::Roll' has a wrong offset!");

// Function Squad.SQPlayerController.ServerDebugRemoveSteamTestItem
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_ServerDebugRemoveSteamTestItem final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerDebugRemoveSteamTestItem) == 0x000004, "Wrong alignment on SQPlayerController_ServerDebugRemoveSteamTestItem");
static_assert(sizeof(SQPlayerController_ServerDebugRemoveSteamTestItem) == 0x000008, "Wrong size on SQPlayerController_ServerDebugRemoveSteamTestItem");
static_assert(offsetof(SQPlayerController_ServerDebugRemoveSteamTestItem, ID) == 0x000000, "Member 'SQPlayerController_ServerDebugRemoveSteamTestItem::ID' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ServerDebugRemoveSteamTestItem, Amount) == 0x000004, "Member 'SQPlayerController_ServerDebugRemoveSteamTestItem::Amount' has a wrong offset!");

// Function Squad.SQPlayerController.ServerDebugSetServerSecondsNonSeamlessForced
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerController_ServerDebugSetServerSecondsNonSeamlessForced final
{
public:
	float                                         Seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerDebugSetServerSecondsNonSeamlessForced) == 0x000004, "Wrong alignment on SQPlayerController_ServerDebugSetServerSecondsNonSeamlessForced");
static_assert(sizeof(SQPlayerController_ServerDebugSetServerSecondsNonSeamlessForced) == 0x000004, "Wrong size on SQPlayerController_ServerDebugSetServerSecondsNonSeamlessForced");
static_assert(offsetof(SQPlayerController_ServerDebugSetServerSecondsNonSeamlessForced, Seconds) == 0x000000, "Member 'SQPlayerController_ServerDebugSetServerSecondsNonSeamlessForced::Seconds' has a wrong offset!");

// Function Squad.SQPlayerController.ServerDebugSetServerTickRate
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerController_ServerDebugSetServerTickRate final
{
public:
	float                                         NewTickRate;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerDebugSetServerTickRate) == 0x000004, "Wrong alignment on SQPlayerController_ServerDebugSetServerTickRate");
static_assert(sizeof(SQPlayerController_ServerDebugSetServerTickRate) == 0x000004, "Wrong size on SQPlayerController_ServerDebugSetServerTickRate");
static_assert(offsetof(SQPlayerController_ServerDebugSetServerTickRate, NewTickRate) == 0x000000, "Member 'SQPlayerController_ServerDebugSetServerTickRate::NewTickRate' has a wrong offset!");

// Function Squad.SQPlayerController.ServerDebugToggleForceAllowCommanderActions
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_ServerDebugToggleForceAllowCommanderActions final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerDebugToggleForceAllowCommanderActions) == 0x000001, "Wrong alignment on SQPlayerController_ServerDebugToggleForceAllowCommanderActions");
static_assert(sizeof(SQPlayerController_ServerDebugToggleForceAllowCommanderActions) == 0x000001, "Wrong size on SQPlayerController_ServerDebugToggleForceAllowCommanderActions");
static_assert(offsetof(SQPlayerController_ServerDebugToggleForceAllowCommanderActions, Value) == 0x000000, "Member 'SQPlayerController_ServerDebugToggleForceAllowCommanderActions::Value' has a wrong offset!");

// Function Squad.SQPlayerController.ServerDebugToggleForceNoCommanderCooldowns
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_ServerDebugToggleForceNoCommanderCooldowns final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerDebugToggleForceNoCommanderCooldowns) == 0x000001, "Wrong alignment on SQPlayerController_ServerDebugToggleForceNoCommanderCooldowns");
static_assert(sizeof(SQPlayerController_ServerDebugToggleForceNoCommanderCooldowns) == 0x000001, "Wrong size on SQPlayerController_ServerDebugToggleForceNoCommanderCooldowns");
static_assert(offsetof(SQPlayerController_ServerDebugToggleForceNoCommanderCooldowns, Value) == 0x000000, "Member 'SQPlayerController_ServerDebugToggleForceNoCommanderCooldowns::Value' has a wrong offset!");

// Function Squad.SQPlayerController.ServerDebugToggleInfiniteMags
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_ServerDebugToggleInfiniteMags final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerDebugToggleInfiniteMags) == 0x000001, "Wrong alignment on SQPlayerController_ServerDebugToggleInfiniteMags");
static_assert(sizeof(SQPlayerController_ServerDebugToggleInfiniteMags) == 0x000001, "Wrong size on SQPlayerController_ServerDebugToggleInfiniteMags");
static_assert(offsetof(SQPlayerController_ServerDebugToggleInfiniteMags, Value) == 0x000000, "Member 'SQPlayerController_ServerDebugToggleInfiniteMags::Value' has a wrong offset!");

// Function Squad.SQPlayerController.ServerDebugToggleNoStaminaDrain
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_ServerDebugToggleNoStaminaDrain final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerDebugToggleNoStaminaDrain) == 0x000001, "Wrong alignment on SQPlayerController_ServerDebugToggleNoStaminaDrain");
static_assert(sizeof(SQPlayerController_ServerDebugToggleNoStaminaDrain) == 0x000001, "Wrong size on SQPlayerController_ServerDebugToggleNoStaminaDrain");
static_assert(offsetof(SQPlayerController_ServerDebugToggleNoStaminaDrain, Value) == 0x000000, "Member 'SQPlayerController_ServerDebugToggleNoStaminaDrain::Value' has a wrong offset!");

// Function Squad.SQPlayerController.ServerDebugToggleShowHitreg
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_ServerDebugToggleShowHitreg final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerDebugToggleShowHitreg) == 0x000001, "Wrong alignment on SQPlayerController_ServerDebugToggleShowHitreg");
static_assert(sizeof(SQPlayerController_ServerDebugToggleShowHitreg) == 0x000001, "Wrong size on SQPlayerController_ServerDebugToggleShowHitreg");
static_assert(offsetof(SQPlayerController_ServerDebugToggleShowHitreg, Value) == 0x000000, "Member 'SQPlayerController_ServerDebugToggleShowHitreg::Value' has a wrong offset!");

// Function Squad.SQPlayerController.ServerDebugToggleShowRebase
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_ServerDebugToggleShowRebase final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerDebugToggleShowRebase) == 0x000001, "Wrong alignment on SQPlayerController_ServerDebugToggleShowRebase");
static_assert(sizeof(SQPlayerController_ServerDebugToggleShowRebase) == 0x000001, "Wrong size on SQPlayerController_ServerDebugToggleShowRebase");
static_assert(offsetof(SQPlayerController_ServerDebugToggleShowRebase, Value) == 0x000000, "Member 'SQPlayerController_ServerDebugToggleShowRebase::Value' has a wrong offset!");

// Function Squad.SQPlayerController.ServerDebugToggleShowVehicleDamageReceived
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_ServerDebugToggleShowVehicleDamageReceived final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerDebugToggleShowVehicleDamageReceived) == 0x000001, "Wrong alignment on SQPlayerController_ServerDebugToggleShowVehicleDamageReceived");
static_assert(sizeof(SQPlayerController_ServerDebugToggleShowVehicleDamageReceived) == 0x000001, "Wrong size on SQPlayerController_ServerDebugToggleShowVehicleDamageReceived");
static_assert(offsetof(SQPlayerController_ServerDebugToggleShowVehicleDamageReceived, Value) == 0x000000, "Member 'SQPlayerController_ServerDebugToggleShowVehicleDamageReceived::Value' has a wrong offset!");

// Function Squad.SQPlayerController.ServerDebugToggleVehicleGodMode
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_ServerDebugToggleVehicleGodMode final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerDebugToggleVehicleGodMode) == 0x000001, "Wrong alignment on SQPlayerController_ServerDebugToggleVehicleGodMode");
static_assert(sizeof(SQPlayerController_ServerDebugToggleVehicleGodMode) == 0x000001, "Wrong size on SQPlayerController_ServerDebugToggleVehicleGodMode");
static_assert(offsetof(SQPlayerController_ServerDebugToggleVehicleGodMode, Value) == 0x000000, "Member 'SQPlayerController_ServerDebugToggleVehicleGodMode::Value' has a wrong offset!");

// Function Squad.SQPlayerController.ServerDisbandFireTeam
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerController_ServerDisbandFireTeam final
{
public:
	int32                                         FireTeamIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerDisbandFireTeam) == 0x000004, "Wrong alignment on SQPlayerController_ServerDisbandFireTeam");
static_assert(sizeof(SQPlayerController_ServerDisbandFireTeam) == 0x000004, "Wrong size on SQPlayerController_ServerDisbandFireTeam");
static_assert(offsetof(SQPlayerController_ServerDisbandFireTeam, FireTeamIndex) == 0x000000, "Member 'SQPlayerController_ServerDisbandFireTeam::FireTeamIndex' has a wrong offset!");

// Function Squad.SQPlayerController.ServerEmergencyTeleport
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerController_ServerEmergencyTeleport final
{
public:
	class ASQVehicle*                             Vehicle;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQVehicleRecoveryMethod                      RecoveryMethod;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E59[0x3];                                      // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DesiredYawRotation;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerEmergencyTeleport) == 0x000008, "Wrong alignment on SQPlayerController_ServerEmergencyTeleport");
static_assert(sizeof(SQPlayerController_ServerEmergencyTeleport) == 0x000010, "Wrong size on SQPlayerController_ServerEmergencyTeleport");
static_assert(offsetof(SQPlayerController_ServerEmergencyTeleport, Vehicle) == 0x000000, "Member 'SQPlayerController_ServerEmergencyTeleport::Vehicle' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ServerEmergencyTeleport, RecoveryMethod) == 0x000008, "Member 'SQPlayerController_ServerEmergencyTeleport::RecoveryMethod' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ServerEmergencyTeleport, DesiredYawRotation) == 0x00000C, "Member 'SQPlayerController_ServerEmergencyTeleport::DesiredYawRotation' has a wrong offset!");

// Function Squad.SQPlayerController.ServerFinishSeatProgress
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_ServerFinishSeatProgress final
{
public:
	class ASQVehicle*                             Vehicle;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerFinishSeatProgress) == 0x000008, "Wrong alignment on SQPlayerController_ServerFinishSeatProgress");
static_assert(sizeof(SQPlayerController_ServerFinishSeatProgress) == 0x000008, "Wrong size on SQPlayerController_ServerFinishSeatProgress");
static_assert(offsetof(SQPlayerController_ServerFinishSeatProgress, Vehicle) == 0x000000, "Member 'SQPlayerController_ServerFinishSeatProgress::Vehicle' has a wrong offset!");

// Function Squad.SQPlayerController.ServerGameCommandFromRemotePlayer
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerController_ServerGameCommandFromRemotePlayer final
{
public:
	class FString                                 Cmd;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerGameCommandFromRemotePlayer) == 0x000008, "Wrong alignment on SQPlayerController_ServerGameCommandFromRemotePlayer");
static_assert(sizeof(SQPlayerController_ServerGameCommandFromRemotePlayer) == 0x000010, "Wrong size on SQPlayerController_ServerGameCommandFromRemotePlayer");
static_assert(offsetof(SQPlayerController_ServerGameCommandFromRemotePlayer, Cmd) == 0x000000, "Member 'SQPlayerController_ServerGameCommandFromRemotePlayer::Cmd' has a wrong offset!");

// Function Squad.SQPlayerController.ServerGameplayMutePlayer
// 0x0028 (0x0028 - 0x0000)
struct SQPlayerController_ServerGameplayMutePlayer final
{
public:
	struct FUniqueNetIdRepl                       MutePlayerId;                                      // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerGameplayMutePlayer) == 0x000008, "Wrong alignment on SQPlayerController_ServerGameplayMutePlayer");
static_assert(sizeof(SQPlayerController_ServerGameplayMutePlayer) == 0x000028, "Wrong size on SQPlayerController_ServerGameplayMutePlayer");
static_assert(offsetof(SQPlayerController_ServerGameplayMutePlayer, MutePlayerId) == 0x000000, "Member 'SQPlayerController_ServerGameplayMutePlayer::MutePlayerId' has a wrong offset!");

// Function Squad.SQPlayerController.ServerGameplayUnmutePlayer
// 0x0028 (0x0028 - 0x0000)
struct SQPlayerController_ServerGameplayUnmutePlayer final
{
public:
	struct FUniqueNetIdRepl                       MutePlayerId;                                      // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerGameplayUnmutePlayer) == 0x000008, "Wrong alignment on SQPlayerController_ServerGameplayUnmutePlayer");
static_assert(sizeof(SQPlayerController_ServerGameplayUnmutePlayer) == 0x000028, "Wrong size on SQPlayerController_ServerGameplayUnmutePlayer");
static_assert(offsetof(SQPlayerController_ServerGameplayUnmutePlayer, MutePlayerId) == 0x000000, "Member 'SQPlayerController_ServerGameplayUnmutePlayer::MutePlayerId' has a wrong offset!");

// Function Squad.SQPlayerController.ServerGiveFireTeamLeader
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerController_ServerGiveFireTeamLeader final
{
public:
	class ASQPlayerState*                         NewLeader;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FireTeamIndex;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E5A[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPlayerController_ServerGiveFireTeamLeader) == 0x000008, "Wrong alignment on SQPlayerController_ServerGiveFireTeamLeader");
static_assert(sizeof(SQPlayerController_ServerGiveFireTeamLeader) == 0x000010, "Wrong size on SQPlayerController_ServerGiveFireTeamLeader");
static_assert(offsetof(SQPlayerController_ServerGiveFireTeamLeader, NewLeader) == 0x000000, "Member 'SQPlayerController_ServerGiveFireTeamLeader::NewLeader' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ServerGiveFireTeamLeader, FireTeamIndex) == 0x000008, "Member 'SQPlayerController_ServerGiveFireTeamLeader::FireTeamIndex' has a wrong offset!");

// Function Squad.SQPlayerController.ServerGiveSquadLeader
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_ServerGiveSquadLeader final
{
public:
	class ASQPlayerState*                         NewLeader;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerGiveSquadLeader) == 0x000008, "Wrong alignment on SQPlayerController_ServerGiveSquadLeader");
static_assert(sizeof(SQPlayerController_ServerGiveSquadLeader) == 0x000008, "Wrong size on SQPlayerController_ServerGiveSquadLeader");
static_assert(offsetof(SQPlayerController_ServerGiveSquadLeader, NewLeader) == 0x000000, "Member 'SQPlayerController_ServerGiveSquadLeader::NewLeader' has a wrong offset!");

// Function Squad.SQPlayerController.ServerJoinSquad
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_ServerJoinSquad final
{
public:
	class ASQSquadStatePrivateToTeam*             ToJoin;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerJoinSquad) == 0x000008, "Wrong alignment on SQPlayerController_ServerJoinSquad");
static_assert(sizeof(SQPlayerController_ServerJoinSquad) == 0x000008, "Wrong size on SQPlayerController_ServerJoinSquad");
static_assert(offsetof(SQPlayerController_ServerJoinSquad, ToJoin) == 0x000000, "Member 'SQPlayerController_ServerJoinSquad::ToJoin' has a wrong offset!");

// Function Squad.SQPlayerController.ServerKickPlayerFromSquad
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_ServerKickPlayerFromSquad final
{
public:
	class ASQPlayerState*                         ToKick;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerKickPlayerFromSquad) == 0x000008, "Wrong alignment on SQPlayerController_ServerKickPlayerFromSquad");
static_assert(sizeof(SQPlayerController_ServerKickPlayerFromSquad) == 0x000008, "Wrong size on SQPlayerController_ServerKickPlayerFromSquad");
static_assert(offsetof(SQPlayerController_ServerKickPlayerFromSquad, ToKick) == 0x000000, "Member 'SQPlayerController_ServerKickPlayerFromSquad::ToKick' has a wrong offset!");

// Function Squad.SQPlayerController.ServerMovePlayerToFireTeam
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerController_ServerMovePlayerToFireTeam final
{
public:
	class ASQPlayerState*                         TargetPlayerState;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FireTeamIndex;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Position;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerMovePlayerToFireTeam) == 0x000008, "Wrong alignment on SQPlayerController_ServerMovePlayerToFireTeam");
static_assert(sizeof(SQPlayerController_ServerMovePlayerToFireTeam) == 0x000010, "Wrong size on SQPlayerController_ServerMovePlayerToFireTeam");
static_assert(offsetof(SQPlayerController_ServerMovePlayerToFireTeam, TargetPlayerState) == 0x000000, "Member 'SQPlayerController_ServerMovePlayerToFireTeam::TargetPlayerState' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ServerMovePlayerToFireTeam, FireTeamIndex) == 0x000008, "Member 'SQPlayerController_ServerMovePlayerToFireTeam::FireTeamIndex' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ServerMovePlayerToFireTeam, Position) == 0x00000C, "Member 'SQPlayerController_ServerMovePlayerToFireTeam::Position' has a wrong offset!");

// Function Squad.SQPlayerController.ServerMuteSquad
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_ServerMuteSquad final
{
public:
	class ASQSquadState*                          MuteSquadState;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerMuteSquad) == 0x000008, "Wrong alignment on SQPlayerController_ServerMuteSquad");
static_assert(sizeof(SQPlayerController_ServerMuteSquad) == 0x000008, "Wrong size on SQPlayerController_ServerMuteSquad");
static_assert(offsetof(SQPlayerController_ServerMuteSquad, MuteSquadState) == 0x000000, "Member 'SQPlayerController_ServerMuteSquad::MuteSquadState' has a wrong offset!");

// Function Squad.SQPlayerController.ServerNotifyExplosiveHit
// 0x01B8 (0x01B8 - 0x0000)
struct SQPlayerController_ServerNotifyExplosiveHit final
{
public:
	struct FSQShotInfo                            ShotInfoZeroBased;                                 // 0x0000(0x002C)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E5B[0x4];                                      // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQPenetrationTrace>            TargetsZeroBased;                                  // 0x0030(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0040(0x0088)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FArmorPenetration                      CachedPenetration;                                 // 0x00C8(0x0028)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQWeaponData                          WeaponConfig;                                      // 0x00F0(0x00C8)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerNotifyExplosiveHit) == 0x000008, "Wrong alignment on SQPlayerController_ServerNotifyExplosiveHit");
static_assert(sizeof(SQPlayerController_ServerNotifyExplosiveHit) == 0x0001B8, "Wrong size on SQPlayerController_ServerNotifyExplosiveHit");
static_assert(offsetof(SQPlayerController_ServerNotifyExplosiveHit, ShotInfoZeroBased) == 0x000000, "Member 'SQPlayerController_ServerNotifyExplosiveHit::ShotInfoZeroBased' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ServerNotifyExplosiveHit, TargetsZeroBased) == 0x000030, "Member 'SQPlayerController_ServerNotifyExplosiveHit::TargetsZeroBased' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ServerNotifyExplosiveHit, HitResult) == 0x000040, "Member 'SQPlayerController_ServerNotifyExplosiveHit::HitResult' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ServerNotifyExplosiveHit, CachedPenetration) == 0x0000C8, "Member 'SQPlayerController_ServerNotifyExplosiveHit::CachedPenetration' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ServerNotifyExplosiveHit, WeaponConfig) == 0x0000F0, "Member 'SQPlayerController_ServerNotifyExplosiveHit::WeaponConfig' has a wrong offset!");

// Function Squad.SQPlayerController.ServerOnPlayerToggleVoice_Editor
// 0x0030 (0x0030 - 0x0000)
struct SQPlayerController_ServerOnPlayerToggleVoice_Editor final
{
public:
	struct FUniqueNetIdRepl                       TalkingPlayerId;                                   // 0x0000(0x0028)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQVoiceChannel                               VoiceChannel;                                      // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E5C[0x7];                                      // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPlayerController_ServerOnPlayerToggleVoice_Editor) == 0x000008, "Wrong alignment on SQPlayerController_ServerOnPlayerToggleVoice_Editor");
static_assert(sizeof(SQPlayerController_ServerOnPlayerToggleVoice_Editor) == 0x000030, "Wrong size on SQPlayerController_ServerOnPlayerToggleVoice_Editor");
static_assert(offsetof(SQPlayerController_ServerOnPlayerToggleVoice_Editor, TalkingPlayerId) == 0x000000, "Member 'SQPlayerController_ServerOnPlayerToggleVoice_Editor::TalkingPlayerId' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ServerOnPlayerToggleVoice_Editor, VoiceChannel) == 0x000028, "Member 'SQPlayerController_ServerOnPlayerToggleVoice_Editor::VoiceChannel' has a wrong offset!");

// Function Squad.SQPlayerController.ServerPlayCustomEmote
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_ServerPlayCustomEmote final
{
public:
	class FName                                   CustomName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerPlayCustomEmote) == 0x000004, "Wrong alignment on SQPlayerController_ServerPlayCustomEmote");
static_assert(sizeof(SQPlayerController_ServerPlayCustomEmote) == 0x000008, "Wrong size on SQPlayerController_ServerPlayCustomEmote");
static_assert(offsetof(SQPlayerController_ServerPlayCustomEmote, CustomName) == 0x000000, "Member 'SQPlayerController_ServerPlayCustomEmote::CustomName' has a wrong offset!");

// Function Squad.SQPlayerController.ServerPlayEmote
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_ServerPlayEmote final
{
public:
	class FName                                   EmoteDataName;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerPlayEmote) == 0x000004, "Wrong alignment on SQPlayerController_ServerPlayEmote");
static_assert(sizeof(SQPlayerController_ServerPlayEmote) == 0x000008, "Wrong size on SQPlayerController_ServerPlayEmote");
static_assert(offsetof(SQPlayerController_ServerPlayEmote, EmoteDataName) == 0x000000, "Member 'SQPlayerController_ServerPlayEmote::EmoteDataName' has a wrong offset!");

// Function Squad.SQPlayerController.ServerPlayEmoteAnim
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_ServerPlayEmoteAnim final
{
public:
	ESQEmotes                                     Emote;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerPlayEmoteAnim) == 0x000001, "Wrong alignment on SQPlayerController_ServerPlayEmoteAnim");
static_assert(sizeof(SQPlayerController_ServerPlayEmoteAnim) == 0x000001, "Wrong size on SQPlayerController_ServerPlayEmoteAnim");
static_assert(offsetof(SQPlayerController_ServerPlayEmoteAnim, Emote) == 0x000000, "Member 'SQPlayerController_ServerPlayEmoteAnim::Emote' has a wrong offset!");

// Function Squad.SQPlayerController.ServerProcessApprovalEntry
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_ServerProcessApprovalEntry final
{
public:
	uint8                                         Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E5D[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        VerifyKey;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerProcessApprovalEntry) == 0x000004, "Wrong alignment on SQPlayerController_ServerProcessApprovalEntry");
static_assert(sizeof(SQPlayerController_ServerProcessApprovalEntry) == 0x000008, "Wrong size on SQPlayerController_ServerProcessApprovalEntry");
static_assert(offsetof(SQPlayerController_ServerProcessApprovalEntry, Mode) == 0x000000, "Member 'SQPlayerController_ServerProcessApprovalEntry::Mode' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ServerProcessApprovalEntry, VerifyKey) == 0x000004, "Member 'SQPlayerController_ServerProcessApprovalEntry::VerifyKey' has a wrong offset!");

// Function Squad.SQPlayerController.ServerRearmWeapons
// 0x0018 (0x0018 - 0x0000)
struct SQPlayerController_ServerRearmWeapons final
{
public:
	class UObject*                                RearmObject;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSQRearmWeaponRequest>          RearmRequest;                                      // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerRearmWeapons) == 0x000008, "Wrong alignment on SQPlayerController_ServerRearmWeapons");
static_assert(sizeof(SQPlayerController_ServerRearmWeapons) == 0x000018, "Wrong size on SQPlayerController_ServerRearmWeapons");
static_assert(offsetof(SQPlayerController_ServerRearmWeapons, RearmObject) == 0x000000, "Member 'SQPlayerController_ServerRearmWeapons::RearmObject' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ServerRearmWeapons, RearmRequest) == 0x000008, "Member 'SQPlayerController_ServerRearmWeapons::RearmRequest' has a wrong offset!");

// Function Squad.SQPlayerController.ServerReportSteamSessionTicket
// 0x0020 (0x0020 - 0x0000)
struct SQPlayerController_ServerReportSteamSessionTicket final
{
public:
	class FString                                 PlayerSteamId;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionTicket;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerReportSteamSessionTicket) == 0x000008, "Wrong alignment on SQPlayerController_ServerReportSteamSessionTicket");
static_assert(sizeof(SQPlayerController_ServerReportSteamSessionTicket) == 0x000020, "Wrong size on SQPlayerController_ServerReportSteamSessionTicket");
static_assert(offsetof(SQPlayerController_ServerReportSteamSessionTicket, PlayerSteamId) == 0x000000, "Member 'SQPlayerController_ServerReportSteamSessionTicket::PlayerSteamId' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ServerReportSteamSessionTicket, SessionTicket) == 0x000010, "Member 'SQPlayerController_ServerReportSteamSessionTicket::SessionTicket' has a wrong offset!");

// Function Squad.SQPlayerController.ServerRequestDeployRole
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_ServerRequestDeployRole final
{
public:
	class USQRoleSettings*                        NewRole;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerRequestDeployRole) == 0x000008, "Wrong alignment on SQPlayerController_ServerRequestDeployRole");
static_assert(sizeof(SQPlayerController_ServerRequestDeployRole) == 0x000008, "Wrong size on SQPlayerController_ServerRequestDeployRole");
static_assert(offsetof(SQPlayerController_ServerRequestDeployRole, NewRole) == 0x000000, "Member 'SQPlayerController_ServerRequestDeployRole::NewRole' has a wrong offset!");

// Function Squad.SQPlayerController.ServerRequestPlaceDeployable
// 0x0040 (0x0040 - 0x0000)
struct SQPlayerController_ServerRequestPlaceDeployable final
{
public:
	class FName                                   InDeployableId;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E5E[0x8];                                      // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InPosition;                                        // 0x0010(0x0030)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerRequestPlaceDeployable) == 0x000010, "Wrong alignment on SQPlayerController_ServerRequestPlaceDeployable");
static_assert(sizeof(SQPlayerController_ServerRequestPlaceDeployable) == 0x000040, "Wrong size on SQPlayerController_ServerRequestPlaceDeployable");
static_assert(offsetof(SQPlayerController_ServerRequestPlaceDeployable, InDeployableId) == 0x000000, "Member 'SQPlayerController_ServerRequestPlaceDeployable::InDeployableId' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ServerRequestPlaceDeployable, InPosition) == 0x000010, "Member 'SQPlayerController_ServerRequestPlaceDeployable::InPosition' has a wrong offset!");

// Function Squad.SQPlayerController.ServerRequestPlaceDeployableItem
// 0x0040 (0x0040 - 0x0000)
struct SQPlayerController_ServerRequestPlaceDeployableItem final
{
public:
	class FName                                   InDeployableItemId;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E5F[0x8];                                      // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InPosition;                                        // 0x0010(0x0030)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerRequestPlaceDeployableItem) == 0x000010, "Wrong alignment on SQPlayerController_ServerRequestPlaceDeployableItem");
static_assert(sizeof(SQPlayerController_ServerRequestPlaceDeployableItem) == 0x000040, "Wrong size on SQPlayerController_ServerRequestPlaceDeployableItem");
static_assert(offsetof(SQPlayerController_ServerRequestPlaceDeployableItem, InDeployableItemId) == 0x000000, "Member 'SQPlayerController_ServerRequestPlaceDeployableItem::InDeployableItemId' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ServerRequestPlaceDeployableItem, InPosition) == 0x000010, "Member 'SQPlayerController_ServerRequestPlaceDeployableItem::InPosition' has a wrong offset!");

// Function Squad.SQPlayerController.ServerRequestRestartPlayer
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_ServerRequestRestartPlayer final
{
public:
	class ASQGameSpawn*                           Spawn;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerRequestRestartPlayer) == 0x000008, "Wrong alignment on SQPlayerController_ServerRequestRestartPlayer");
static_assert(sizeof(SQPlayerController_ServerRequestRestartPlayer) == 0x000008, "Wrong size on SQPlayerController_ServerRequestRestartPlayer");
static_assert(offsetof(SQPlayerController_ServerRequestRestartPlayer, Spawn) == 0x000000, "Member 'SQPlayerController_ServerRequestRestartPlayer::Spawn' has a wrong offset!");

// Function Squad.SQPlayerController.ServerRequestRole
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_ServerRequestRole final
{
public:
	class FName                                   InRoleId;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerRequestRole) == 0x000004, "Wrong alignment on SQPlayerController_ServerRequestRole");
static_assert(sizeof(SQPlayerController_ServerRequestRole) == 0x000008, "Wrong size on SQPlayerController_ServerRequestRole");
static_assert(offsetof(SQPlayerController_ServerRequestRole, InRoleId) == 0x000000, "Member 'SQPlayerController_ServerRequestRole::InRoleId' has a wrong offset!");

// Function Squad.SQPlayerController.ServerRequestRoleRearm
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerController_ServerRequestRoleRearm final
{
public:
	class FName                                   InRoleId;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                InRearmSource;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerRequestRoleRearm) == 0x000008, "Wrong alignment on SQPlayerController_ServerRequestRoleRearm");
static_assert(sizeof(SQPlayerController_ServerRequestRoleRearm) == 0x000010, "Wrong size on SQPlayerController_ServerRequestRoleRearm");
static_assert(offsetof(SQPlayerController_ServerRequestRoleRearm, InRoleId) == 0x000000, "Member 'SQPlayerController_ServerRequestRoleRearm::InRoleId' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ServerRequestRoleRearm, InRearmSource) == 0x000008, "Member 'SQPlayerController_ServerRequestRoleRearm::InRearmSource' has a wrong offset!");

// Function Squad.SQPlayerController.ServerRequestServerTime
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_ServerRequestServerTime final
{
public:
	struct FDateTime                              InClientUTCTime;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerRequestServerTime) == 0x000008, "Wrong alignment on SQPlayerController_ServerRequestServerTime");
static_assert(sizeof(SQPlayerController_ServerRequestServerTime) == 0x000008, "Wrong size on SQPlayerController_ServerRequestServerTime");
static_assert(offsetof(SQPlayerController_ServerRequestServerTime, InClientUTCTime) == 0x000000, "Member 'SQPlayerController_ServerRequestServerTime::InClientUTCTime' has a wrong offset!");

// Function Squad.SQPlayerController.ServerSay
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerController_ServerSay final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerSay) == 0x000008, "Wrong alignment on SQPlayerController_ServerSay");
static_assert(sizeof(SQPlayerController_ServerSay) == 0x000010, "Wrong size on SQPlayerController_ServerSay");
static_assert(offsetof(SQPlayerController_ServerSay, Msg) == 0x000000, "Member 'SQPlayerController_ServerSay::Msg' has a wrong offset!");

// Function Squad.SQPlayerController.ServerSetMuteAllPlayersExceptSquad
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_ServerSetMuteAllPlayersExceptSquad final
{
public:
	bool                                          bMute;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerSetMuteAllPlayersExceptSquad) == 0x000001, "Wrong alignment on SQPlayerController_ServerSetMuteAllPlayersExceptSquad");
static_assert(sizeof(SQPlayerController_ServerSetMuteAllPlayersExceptSquad) == 0x000001, "Wrong size on SQPlayerController_ServerSetMuteAllPlayersExceptSquad");
static_assert(offsetof(SQPlayerController_ServerSetMuteAllPlayersExceptSquad, bMute) == 0x000000, "Member 'SQPlayerController_ServerSetMuteAllPlayersExceptSquad::bMute' has a wrong offset!");

// Function Squad.SQPlayerController.ServerSetVoipHandAnim
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_ServerSetVoipHandAnim final
{
public:
	ESQVoiceChannel                               VoiceChannel;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerSetVoipHandAnim) == 0x000001, "Wrong alignment on SQPlayerController_ServerSetVoipHandAnim");
static_assert(sizeof(SQPlayerController_ServerSetVoipHandAnim) == 0x000001, "Wrong size on SQPlayerController_ServerSetVoipHandAnim");
static_assert(offsetof(SQPlayerController_ServerSetVoipHandAnim, VoiceChannel) == 0x000000, "Member 'SQPlayerController_ServerSetVoipHandAnim::VoiceChannel' has a wrong offset!");

// Function Squad.SQPlayerController.ServerShareRallyPoint
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerController_ServerShareRallyPoint final
{
public:
	int32                                         SquadId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerShareRallyPoint) == 0x000004, "Wrong alignment on SQPlayerController_ServerShareRallyPoint");
static_assert(sizeof(SQPlayerController_ServerShareRallyPoint) == 0x000004, "Wrong size on SQPlayerController_ServerShareRallyPoint");
static_assert(offsetof(SQPlayerController_ServerShareRallyPoint, SquadId) == 0x000000, "Member 'SQPlayerController_ServerShareRallyPoint::SquadId' has a wrong offset!");

// Function Squad.SQPlayerController.ServerSLInviteMember
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_ServerSLInviteMember final
{
public:
	class ASQPlayerState*                         PlayerToInvite;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerSLInviteMember) == 0x000008, "Wrong alignment on SQPlayerController_ServerSLInviteMember");
static_assert(sizeof(SQPlayerController_ServerSLInviteMember) == 0x000008, "Wrong size on SQPlayerController_ServerSLInviteMember");
static_assert(offsetof(SQPlayerController_ServerSLInviteMember, PlayerToInvite) == 0x000000, "Member 'SQPlayerController_ServerSLInviteMember::PlayerToInvite' has a wrong offset!");

// Function Squad.SQPlayerController.ServerStartHealing
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_ServerStartHealing final
{
public:
	class ASQSoldier*                             HealedSoldier;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerStartHealing) == 0x000008, "Wrong alignment on SQPlayerController_ServerStartHealing");
static_assert(sizeof(SQPlayerController_ServerStartHealing) == 0x000008, "Wrong size on SQPlayerController_ServerStartHealing");
static_assert(offsetof(SQPlayerController_ServerStartHealing, HealedSoldier) == 0x000000, "Member 'SQPlayerController_ServerStartHealing::HealedSoldier' has a wrong offset!");

// Function Squad.SQPlayerController.ServerSuicide
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_ServerSuicide final
{
public:
	bool                                          bLeavingServer;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerSuicide) == 0x000001, "Wrong alignment on SQPlayerController_ServerSuicide");
static_assert(sizeof(SQPlayerController_ServerSuicide) == 0x000001, "Wrong size on SQPlayerController_ServerSuicide");
static_assert(offsetof(SQPlayerController_ServerSuicide, bLeavingServer) == 0x000000, "Member 'SQPlayerController_ServerSuicide::bLeavingServer' has a wrong offset!");

// Function Squad.SQPlayerController.ServerSwitchSeat
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerController_ServerSwitchSeat final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerSwitchSeat) == 0x000004, "Wrong alignment on SQPlayerController_ServerSwitchSeat");
static_assert(sizeof(SQPlayerController_ServerSwitchSeat) == 0x000004, "Wrong size on SQPlayerController_ServerSwitchSeat");
static_assert(offsetof(SQPlayerController_ServerSwitchSeat, Param_Index) == 0x000000, "Member 'SQPlayerController_ServerSwitchSeat::Param_Index' has a wrong offset!");

// Function Squad.SQPlayerController.ServerTryClaimVehicle
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_ServerTryClaimVehicle final
{
public:
	class ASQVehicle*                             VehicleToClaim;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerTryClaimVehicle) == 0x000008, "Wrong alignment on SQPlayerController_ServerTryClaimVehicle");
static_assert(sizeof(SQPlayerController_ServerTryClaimVehicle) == 0x000008, "Wrong size on SQPlayerController_ServerTryClaimVehicle");
static_assert(offsetof(SQPlayerController_ServerTryClaimVehicle, VehicleToClaim) == 0x000000, "Member 'SQPlayerController_ServerTryClaimVehicle::VehicleToClaim' has a wrong offset!");

// Function Squad.SQPlayerController.ServerUnmuteSquad
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_ServerUnmuteSquad final
{
public:
	class ASQSquadState*                          MuteSquadState;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ServerUnmuteSquad) == 0x000008, "Wrong alignment on SQPlayerController_ServerUnmuteSquad");
static_assert(sizeof(SQPlayerController_ServerUnmuteSquad) == 0x000008, "Wrong size on SQPlayerController_ServerUnmuteSquad");
static_assert(offsetof(SQPlayerController_ServerUnmuteSquad, MuteSquadState) == 0x000000, "Member 'SQPlayerController_ServerUnmuteSquad::MuteSquadState' has a wrong offset!");

// Function Squad.SQPlayerController.SetCurrentRole
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerController_SetCurrentRole final
{
public:
	class USQRoleSettings*                        NewRoleSettings;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQSpawnInventoryReason                       SpawnInventoryReason;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E60[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPlayerController_SetCurrentRole) == 0x000008, "Wrong alignment on SQPlayerController_SetCurrentRole");
static_assert(sizeof(SQPlayerController_SetCurrentRole) == 0x000010, "Wrong size on SQPlayerController_SetCurrentRole");
static_assert(offsetof(SQPlayerController_SetCurrentRole, NewRoleSettings) == 0x000000, "Member 'SQPlayerController_SetCurrentRole::NewRoleSettings' has a wrong offset!");
static_assert(offsetof(SQPlayerController_SetCurrentRole, SpawnInventoryReason) == 0x000008, "Member 'SQPlayerController_SetCurrentRole::SpawnInventoryReason' has a wrong offset!");

// Function Squad.SQPlayerController.SetIgnoreWeaponInput
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_SetIgnoreWeaponInput final
{
public:
	bool                                          bNewClickInput;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_SetIgnoreWeaponInput) == 0x000001, "Wrong alignment on SQPlayerController_SetIgnoreWeaponInput");
static_assert(sizeof(SQPlayerController_SetIgnoreWeaponInput) == 0x000001, "Wrong size on SQPlayerController_SetIgnoreWeaponInput");
static_assert(offsetof(SQPlayerController_SetIgnoreWeaponInput, bNewClickInput) == 0x000000, "Member 'SQPlayerController_SetIgnoreWeaponInput::bNewClickInput' has a wrong offset!");

// Function Squad.SQPlayerController.SetOutOfMapBoundsKillTimestamp
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerController_SetOutOfMapBoundsKillTimestamp final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_SetOutOfMapBoundsKillTimestamp) == 0x000004, "Wrong alignment on SQPlayerController_SetOutOfMapBoundsKillTimestamp");
static_assert(sizeof(SQPlayerController_SetOutOfMapBoundsKillTimestamp) == 0x000004, "Wrong size on SQPlayerController_SetOutOfMapBoundsKillTimestamp");
static_assert(offsetof(SQPlayerController_SetOutOfMapBoundsKillTimestamp, Timestamp) == 0x000000, "Member 'SQPlayerController_SetOutOfMapBoundsKillTimestamp::Timestamp' has a wrong offset!");

// Function Squad.SQPlayerController.SetPendingDeathKillTimestamp
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerController_SetPendingDeathKillTimestamp final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_SetPendingDeathKillTimestamp) == 0x000004, "Wrong alignment on SQPlayerController_SetPendingDeathKillTimestamp");
static_assert(sizeof(SQPlayerController_SetPendingDeathKillTimestamp) == 0x000004, "Wrong size on SQPlayerController_SetPendingDeathKillTimestamp");
static_assert(offsetof(SQPlayerController_SetPendingDeathKillTimestamp, Timestamp) == 0x000000, "Member 'SQPlayerController_SetPendingDeathKillTimestamp::Timestamp' has a wrong offset!");

// Function Squad.SQPlayerController.SetRoamingMapOpen
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_SetRoamingMapOpen final
{
public:
	bool                                          bOpen;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_SetRoamingMapOpen) == 0x000001, "Wrong alignment on SQPlayerController_SetRoamingMapOpen");
static_assert(sizeof(SQPlayerController_SetRoamingMapOpen) == 0x000001, "Wrong size on SQPlayerController_SetRoamingMapOpen");
static_assert(offsetof(SQPlayerController_SetRoamingMapOpen, bOpen) == 0x000000, "Member 'SQPlayerController_SetRoamingMapOpen::bOpen' has a wrong offset!");

// Function Squad.SQPlayerController.SetSelectionMode
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_SetSelectionMode final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_SetSelectionMode) == 0x000001, "Wrong alignment on SQPlayerController_SetSelectionMode");
static_assert(sizeof(SQPlayerController_SetSelectionMode) == 0x000001, "Wrong size on SQPlayerController_SetSelectionMode");
static_assert(offsetof(SQPlayerController_SetSelectionMode, bEnabled) == 0x000000, "Member 'SQPlayerController_SetSelectionMode::bEnabled' has a wrong offset!");

// Function Squad.SQPlayerController.ShareRallyPoint
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerController_ShareRallyPoint final
{
public:
	int32                                         SquadId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ShareRallyPoint) == 0x000004, "Wrong alignment on SQPlayerController_ShareRallyPoint");
static_assert(sizeof(SQPlayerController_ShareRallyPoint) == 0x000004, "Wrong size on SQPlayerController_ShareRallyPoint");
static_assert(offsetof(SQPlayerController_ShareRallyPoint, SquadId) == 0x000000, "Member 'SQPlayerController_ShareRallyPoint::SquadId' has a wrong offset!");

// Function Squad.SQPlayerController.ShowToast
// 0x0020 (0x0020 - 0x0000)
struct SQPlayerController_ShowToast final
{
public:
	class FText                                   ToastText;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Lifetime;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceSlate;                                       // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E61[0x3];                                      // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPlayerController_ShowToast) == 0x000008, "Wrong alignment on SQPlayerController_ShowToast");
static_assert(sizeof(SQPlayerController_ShowToast) == 0x000020, "Wrong size on SQPlayerController_ShowToast");
static_assert(offsetof(SQPlayerController_ShowToast, ToastText) == 0x000000, "Member 'SQPlayerController_ShowToast::ToastText' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ShowToast, Lifetime) == 0x000018, "Member 'SQPlayerController_ShowToast::Lifetime' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ShowToast, bForceSlate) == 0x00001C, "Member 'SQPlayerController_ShowToast::bForceSlate' has a wrong offset!");

// Function Squad.SQPlayerController.SimulateInputKey
// 0x0020 (0x0020 - 0x0000)
struct SQPlayerController_SimulateInputKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPressed;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E62[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPlayerController_SimulateInputKey) == 0x000008, "Wrong alignment on SQPlayerController_SimulateInputKey");
static_assert(sizeof(SQPlayerController_SimulateInputKey) == 0x000020, "Wrong size on SQPlayerController_SimulateInputKey");
static_assert(offsetof(SQPlayerController_SimulateInputKey, Key) == 0x000000, "Member 'SQPlayerController_SimulateInputKey::Key' has a wrong offset!");
static_assert(offsetof(SQPlayerController_SimulateInputKey, bPressed) == 0x000018, "Member 'SQPlayerController_SimulateInputKey::bPressed' has a wrong offset!");

// Function Squad.SQPlayerController.SpawnGhost
// 0x0030 (0x0030 - 0x0000)
struct SQPlayerController_SpawnGhost final
{
public:
	TSoftClassPtr<class UClass>                   InDeployableReference;                             // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQDeployableSettings*                  InDeployableSettings;                              // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_SpawnGhost) == 0x000008, "Wrong alignment on SQPlayerController_SpawnGhost");
static_assert(sizeof(SQPlayerController_SpawnGhost) == 0x000030, "Wrong size on SQPlayerController_SpawnGhost");
static_assert(offsetof(SQPlayerController_SpawnGhost, InDeployableReference) == 0x000000, "Member 'SQPlayerController_SpawnGhost::InDeployableReference' has a wrong offset!");
static_assert(offsetof(SQPlayerController_SpawnGhost, InDeployableSettings) == 0x000028, "Member 'SQPlayerController_SpawnGhost::InDeployableSettings' has a wrong offset!");

// Function Squad.SQPlayerController.SQBugit
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerController_SQBugit final
{
public:
	class FString                                 ScreenShotDescription;                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_SQBugit) == 0x000008, "Wrong alignment on SQPlayerController_SQBugit");
static_assert(sizeof(SQPlayerController_SQBugit) == 0x000010, "Wrong size on SQPlayerController_SQBugit");
static_assert(offsetof(SQPlayerController_SQBugit, ScreenShotDescription) == 0x000000, "Member 'SQPlayerController_SQBugit::ScreenShotDescription' has a wrong offset!");

// Function Squad.SQPlayerController.SQSM_InsertDistanceFactorThesholds
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_SQSM_InsertDistanceFactorThesholds final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_SQSM_InsertDistanceFactorThesholds) == 0x000004, "Wrong alignment on SQPlayerController_SQSM_InsertDistanceFactorThesholds");
static_assert(sizeof(SQPlayerController_SQSM_InsertDistanceFactorThesholds) == 0x000008, "Wrong size on SQPlayerController_SQSM_InsertDistanceFactorThesholds");
static_assert(offsetof(SQPlayerController_SQSM_InsertDistanceFactorThesholds, Param_Index) == 0x000000, "Member 'SQPlayerController_SQSM_InsertDistanceFactorThesholds::Param_Index' has a wrong offset!");
static_assert(offsetof(SQPlayerController_SQSM_InsertDistanceFactorThesholds, Value) == 0x000004, "Member 'SQPlayerController_SQSM_InsertDistanceFactorThesholds::Value' has a wrong offset!");

// Function Squad.SQPlayerController.SQSM_RemoveDistanceFactorThesholds
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_SQSM_RemoveDistanceFactorThesholds final
{
public:
	int32                                         SrcIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_SQSM_RemoveDistanceFactorThesholds) == 0x000004, "Wrong alignment on SQPlayerController_SQSM_RemoveDistanceFactorThesholds");
static_assert(sizeof(SQPlayerController_SQSM_RemoveDistanceFactorThesholds) == 0x000008, "Wrong size on SQPlayerController_SQSM_RemoveDistanceFactorThesholds");
static_assert(offsetof(SQPlayerController_SQSM_RemoveDistanceFactorThesholds, SrcIndex) == 0x000000, "Member 'SQPlayerController_SQSM_RemoveDistanceFactorThesholds::SrcIndex' has a wrong offset!");
static_assert(offsetof(SQPlayerController_SQSM_RemoveDistanceFactorThesholds, Count) == 0x000004, "Member 'SQPlayerController_SQSM_RemoveDistanceFactorThesholds::Count' has a wrong offset!");

// Function Squad.SQPlayerController.SQSM_SetDistanceFactorThesholds
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_SQSM_SetDistanceFactorThesholds final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_SQSM_SetDistanceFactorThesholds) == 0x000004, "Wrong alignment on SQPlayerController_SQSM_SetDistanceFactorThesholds");
static_assert(sizeof(SQPlayerController_SQSM_SetDistanceFactorThesholds) == 0x000008, "Wrong size on SQPlayerController_SQSM_SetDistanceFactorThesholds");
static_assert(offsetof(SQPlayerController_SQSM_SetDistanceFactorThesholds, Param_Index) == 0x000000, "Member 'SQPlayerController_SQSM_SetDistanceFactorThesholds::Param_Index' has a wrong offset!");
static_assert(offsetof(SQPlayerController_SQSM_SetDistanceFactorThesholds, Value) == 0x000004, "Member 'SQPlayerController_SQSM_SetDistanceFactorThesholds::Value' has a wrong offset!");

// Function Squad.SQPlayerController.SQSM_SetNonRenderedUpdateRate
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerController_SQSM_SetNonRenderedUpdateRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_SQSM_SetNonRenderedUpdateRate) == 0x000004, "Wrong alignment on SQPlayerController_SQSM_SetNonRenderedUpdateRate");
static_assert(sizeof(SQPlayerController_SQSM_SetNonRenderedUpdateRate) == 0x000004, "Wrong size on SQPlayerController_SQSM_SetNonRenderedUpdateRate");
static_assert(offsetof(SQPlayerController_SQSM_SetNonRenderedUpdateRate, Value) == 0x000000, "Member 'SQPlayerController_SQSM_SetNonRenderedUpdateRate::Value' has a wrong offset!");

// Function Squad.SQPlayerController.SQSM_SetServerUpdateRate
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerController_SQSM_SetServerUpdateRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_SQSM_SetServerUpdateRate) == 0x000004, "Wrong alignment on SQPlayerController_SQSM_SetServerUpdateRate");
static_assert(sizeof(SQPlayerController_SQSM_SetServerUpdateRate) == 0x000004, "Wrong size on SQPlayerController_SQSM_SetServerUpdateRate");
static_assert(offsetof(SQPlayerController_SQSM_SetServerUpdateRate, Value) == 0x000000, "Member 'SQPlayerController_SQSM_SetServerUpdateRate::Value' has a wrong offset!");

// Function Squad.SQPlayerController.StartPlaceDeployable
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerController_StartPlaceDeployable final
{
public:
	class USQDeployableSettings*                  InDeployableSettings;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsItem;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E63[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPlayerController_StartPlaceDeployable) == 0x000008, "Wrong alignment on SQPlayerController_StartPlaceDeployable");
static_assert(sizeof(SQPlayerController_StartPlaceDeployable) == 0x000010, "Wrong size on SQPlayerController_StartPlaceDeployable");
static_assert(offsetof(SQPlayerController_StartPlaceDeployable, InDeployableSettings) == 0x000000, "Member 'SQPlayerController_StartPlaceDeployable::InDeployableSettings' has a wrong offset!");
static_assert(offsetof(SQPlayerController_StartPlaceDeployable, InIsItem) == 0x000008, "Member 'SQPlayerController_StartPlaceDeployable::InIsItem' has a wrong offset!");

// Function Squad.SQPlayerController.TimeUntilCanSpawn
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerController_TimeUntilCanSpawn final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_TimeUntilCanSpawn) == 0x000004, "Wrong alignment on SQPlayerController_TimeUntilCanSpawn");
static_assert(sizeof(SQPlayerController_TimeUntilCanSpawn) == 0x000004, "Wrong size on SQPlayerController_TimeUntilCanSpawn");
static_assert(offsetof(SQPlayerController_TimeUntilCanSpawn, ReturnValue) == 0x000000, "Member 'SQPlayerController_TimeUntilCanSpawn::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.ToggleMutePlayer
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_ToggleMutePlayer final
{
public:
	class ASQPlayerState*                         MutePlayerState;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ToggleMutePlayer) == 0x000008, "Wrong alignment on SQPlayerController_ToggleMutePlayer");
static_assert(sizeof(SQPlayerController_ToggleMutePlayer) == 0x000008, "Wrong size on SQPlayerController_ToggleMutePlayer");
static_assert(offsetof(SQPlayerController_ToggleMutePlayer, MutePlayerState) == 0x000000, "Member 'SQPlayerController_ToggleMutePlayer::MutePlayerState' has a wrong offset!");

// Function Squad.SQPlayerController.ToggleShowRebase
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_ToggleShowRebase final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ToggleShowRebase) == 0x000001, "Wrong alignment on SQPlayerController_ToggleShowRebase");
static_assert(sizeof(SQPlayerController_ToggleShowRebase) == 0x000001, "Wrong size on SQPlayerController_ToggleShowRebase");
static_assert(offsetof(SQPlayerController_ToggleShowRebase, Value) == 0x000000, "Member 'SQPlayerController_ToggleShowRebase::Value' has a wrong offset!");

// Function Squad.SQPlayerController.TryClaimVehicle
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerController_TryClaimVehicle final
{
public:
	class ASQVehicle*                             Vehicle;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E64[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPlayerController_TryClaimVehicle) == 0x000008, "Wrong alignment on SQPlayerController_TryClaimVehicle");
static_assert(sizeof(SQPlayerController_TryClaimVehicle) == 0x000010, "Wrong size on SQPlayerController_TryClaimVehicle");
static_assert(offsetof(SQPlayerController_TryClaimVehicle, Vehicle) == 0x000000, "Member 'SQPlayerController_TryClaimVehicle::Vehicle' has a wrong offset!");
static_assert(offsetof(SQPlayerController_TryClaimVehicle, ReturnValue) == 0x000008, "Member 'SQPlayerController_TryClaimVehicle::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.UnmuteSquad
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_UnmuteSquad final
{
public:
	class ASQSquadState*                          MuteSquadState;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_UnmuteSquad) == 0x000008, "Wrong alignment on SQPlayerController_UnmuteSquad");
static_assert(sizeof(SQPlayerController_UnmuteSquad) == 0x000008, "Wrong size on SQPlayerController_UnmuteSquad");
static_assert(offsetof(SQPlayerController_UnmuteSquad, MuteSquadState) == 0x000000, "Member 'SQPlayerController_UnmuteSquad::MuteSquadState' has a wrong offset!");

// Function Squad.SQPlayerController.ClientShowPopup
// 0x0038 (0x0038 - 0x0000)
struct SQPlayerController_ClientShowPopup final
{
public:
	class ASQPlayerState*                         Speaker;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Message;                                           // 0x0008(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	ESQChat                                       Channel;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQNotificationTypes                          NotificationType;                                  // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E65[0x6];                                      // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StreamerModeVariantMessage;                        // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ClientShowPopup) == 0x000008, "Wrong alignment on SQPlayerController_ClientShowPopup");
static_assert(sizeof(SQPlayerController_ClientShowPopup) == 0x000038, "Wrong size on SQPlayerController_ClientShowPopup");
static_assert(offsetof(SQPlayerController_ClientShowPopup, Speaker) == 0x000000, "Member 'SQPlayerController_ClientShowPopup::Speaker' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ClientShowPopup, Message) == 0x000008, "Member 'SQPlayerController_ClientShowPopup::Message' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ClientShowPopup, Channel) == 0x000020, "Member 'SQPlayerController_ClientShowPopup::Channel' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ClientShowPopup, NotificationType) == 0x000021, "Member 'SQPlayerController_ClientShowPopup::NotificationType' has a wrong offset!");
static_assert(offsetof(SQPlayerController_ClientShowPopup, StreamerModeVariantMessage) == 0x000028, "Member 'SQPlayerController_ClientShowPopup::StreamerModeVariantMessage' has a wrong offset!");

// Function Squad.SQPlayerController.DebugToggleShowMapBoundary
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_DebugToggleShowMapBoundary final
{
public:
	bool                                          bShowMapBoundary;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_DebugToggleShowMapBoundary) == 0x000001, "Wrong alignment on SQPlayerController_DebugToggleShowMapBoundary");
static_assert(sizeof(SQPlayerController_DebugToggleShowMapBoundary) == 0x000001, "Wrong size on SQPlayerController_DebugToggleShowMapBoundary");
static_assert(offsetof(SQPlayerController_DebugToggleShowMapBoundary, bShowMapBoundary) == 0x000000, "Member 'SQPlayerController_DebugToggleShowMapBoundary::bShowMapBoundary' has a wrong offset!");

// Function Squad.SQPlayerController.DebugToggleShowVehicleSpawners
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_DebugToggleShowVehicleSpawners final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_DebugToggleShowVehicleSpawners) == 0x000001, "Wrong alignment on SQPlayerController_DebugToggleShowVehicleSpawners");
static_assert(sizeof(SQPlayerController_DebugToggleShowVehicleSpawners) == 0x000001, "Wrong size on SQPlayerController_DebugToggleShowVehicleSpawners");
static_assert(offsetof(SQPlayerController_DebugToggleShowVehicleSpawners, Value) == 0x000000, "Member 'SQPlayerController_DebugToggleShowVehicleSpawners::Value' has a wrong offset!");

// Function Squad.SQPlayerController.EnemyPlayerCanHearLocalVoice
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerController_EnemyPlayerCanHearLocalVoice final
{
public:
	const class ASQPlayerController*              EnemyPlayer;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E66[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPlayerController_EnemyPlayerCanHearLocalVoice) == 0x000008, "Wrong alignment on SQPlayerController_EnemyPlayerCanHearLocalVoice");
static_assert(sizeof(SQPlayerController_EnemyPlayerCanHearLocalVoice) == 0x000010, "Wrong size on SQPlayerController_EnemyPlayerCanHearLocalVoice");
static_assert(offsetof(SQPlayerController_EnemyPlayerCanHearLocalVoice, EnemyPlayer) == 0x000000, "Member 'SQPlayerController_EnemyPlayerCanHearLocalVoice::EnemyPlayer' has a wrong offset!");
static_assert(offsetof(SQPlayerController_EnemyPlayerCanHearLocalVoice, ReturnValue) == 0x000008, "Member 'SQPlayerController_EnemyPlayerCanHearLocalVoice::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.GetCurrentRole
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_GetCurrentRole final
{
public:
	class USQRoleSettings*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_GetCurrentRole) == 0x000008, "Wrong alignment on SQPlayerController_GetCurrentRole");
static_assert(sizeof(SQPlayerController_GetCurrentRole) == 0x000008, "Wrong size on SQPlayerController_GetCurrentRole");
static_assert(offsetof(SQPlayerController_GetCurrentRole, ReturnValue) == 0x000000, "Member 'SQPlayerController_GetCurrentRole::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.GetCurrentSeat
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_GetCurrentSeat final
{
public:
	class USQVehicleSeatComponent*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_GetCurrentSeat) == 0x000008, "Wrong alignment on SQPlayerController_GetCurrentSeat");
static_assert(sizeof(SQPlayerController_GetCurrentSeat) == 0x000008, "Wrong size on SQPlayerController_GetCurrentSeat");
static_assert(offsetof(SQPlayerController_GetCurrentSeat, ReturnValue) == 0x000000, "Member 'SQPlayerController_GetCurrentSeat::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.GetCurrentSeatPawn
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_GetCurrentSeatPawn final
{
public:
	class ASQVehicleSeat*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_GetCurrentSeatPawn) == 0x000008, "Wrong alignment on SQPlayerController_GetCurrentSeatPawn");
static_assert(sizeof(SQPlayerController_GetCurrentSeatPawn) == 0x000008, "Wrong size on SQPlayerController_GetCurrentSeatPawn");
static_assert(offsetof(SQPlayerController_GetCurrentSeatPawn, ReturnValue) == 0x000000, "Member 'SQPlayerController_GetCurrentSeatPawn::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.GetCurrentVehicle
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_GetCurrentVehicle final
{
public:
	class ASQVehicle*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_GetCurrentVehicle) == 0x000008, "Wrong alignment on SQPlayerController_GetCurrentVehicle");
static_assert(sizeof(SQPlayerController_GetCurrentVehicle) == 0x000008, "Wrong size on SQPlayerController_GetCurrentVehicle");
static_assert(offsetof(SQPlayerController_GetCurrentVehicle, ReturnValue) == 0x000000, "Member 'SQPlayerController_GetCurrentVehicle::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.GetDeployableReference
// 0x0030 (0x0030 - 0x0000)
struct SQPlayerController_GetDeployableReference final
{
public:
	class USQDeployableSettings*                  InDeployableSettings;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   OutDeployableReference;                            // 0x0008(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_GetDeployableReference) == 0x000008, "Wrong alignment on SQPlayerController_GetDeployableReference");
static_assert(sizeof(SQPlayerController_GetDeployableReference) == 0x000030, "Wrong size on SQPlayerController_GetDeployableReference");
static_assert(offsetof(SQPlayerController_GetDeployableReference, InDeployableSettings) == 0x000000, "Member 'SQPlayerController_GetDeployableReference::InDeployableSettings' has a wrong offset!");
static_assert(offsetof(SQPlayerController_GetDeployableReference, OutDeployableReference) == 0x000008, "Member 'SQPlayerController_GetDeployableReference::OutDeployableReference' has a wrong offset!");

// Function Squad.SQPlayerController.GetDeployRole
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_GetDeployRole final
{
public:
	class USQRoleSettings*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_GetDeployRole) == 0x000008, "Wrong alignment on SQPlayerController_GetDeployRole");
static_assert(sizeof(SQPlayerController_GetDeployRole) == 0x000008, "Wrong size on SQPlayerController_GetDeployRole");
static_assert(offsetof(SQPlayerController_GetDeployRole, ReturnValue) == 0x000000, "Member 'SQPlayerController_GetDeployRole::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.GetOutOfMapBoundsKillTimestamp
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerController_GetOutOfMapBoundsKillTimestamp final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_GetOutOfMapBoundsKillTimestamp) == 0x000004, "Wrong alignment on SQPlayerController_GetOutOfMapBoundsKillTimestamp");
static_assert(sizeof(SQPlayerController_GetOutOfMapBoundsKillTimestamp) == 0x000004, "Wrong size on SQPlayerController_GetOutOfMapBoundsKillTimestamp");
static_assert(offsetof(SQPlayerController_GetOutOfMapBoundsKillTimestamp, ReturnValue) == 0x000000, "Member 'SQPlayerController_GetOutOfMapBoundsKillTimestamp::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.GetPendingDeathKillTimestamp
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerController_GetPendingDeathKillTimestamp final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_GetPendingDeathKillTimestamp) == 0x000004, "Wrong alignment on SQPlayerController_GetPendingDeathKillTimestamp");
static_assert(sizeof(SQPlayerController_GetPendingDeathKillTimestamp) == 0x000004, "Wrong size on SQPlayerController_GetPendingDeathKillTimestamp");
static_assert(offsetof(SQPlayerController_GetPendingDeathKillTimestamp, ReturnValue) == 0x000000, "Member 'SQPlayerController_GetPendingDeathKillTimestamp::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.GetPitchInputScale
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerController_GetPitchInputScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_GetPitchInputScale) == 0x000004, "Wrong alignment on SQPlayerController_GetPitchInputScale");
static_assert(sizeof(SQPlayerController_GetPitchInputScale) == 0x000004, "Wrong size on SQPlayerController_GetPitchInputScale");
static_assert(offsetof(SQPlayerController_GetPitchInputScale, ReturnValue) == 0x000000, "Member 'SQPlayerController_GetPitchInputScale::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.GetSelectedSpawn
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_GetSelectedSpawn final
{
public:
	class ASQGameSpawn*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_GetSelectedSpawn) == 0x000008, "Wrong alignment on SQPlayerController_GetSelectedSpawn");
static_assert(sizeof(SQPlayerController_GetSelectedSpawn) == 0x000008, "Wrong size on SQPlayerController_GetSelectedSpawn");
static_assert(offsetof(SQPlayerController_GetSelectedSpawn, ReturnValue) == 0x000000, "Member 'SQPlayerController_GetSelectedSpawn::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.GetSoldier
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_GetSoldier final
{
public:
	class ASQSoldier*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_GetSoldier) == 0x000008, "Wrong alignment on SQPlayerController_GetSoldier");
static_assert(sizeof(SQPlayerController_GetSoldier) == 0x000008, "Wrong size on SQPlayerController_GetSoldier");
static_assert(offsetof(SQPlayerController_GetSoldier, ReturnValue) == 0x000000, "Member 'SQPlayerController_GetSoldier::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.GetSquadPlayerState
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_GetSquadPlayerState final
{
public:
	class ASQPlayerState*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_GetSquadPlayerState) == 0x000008, "Wrong alignment on SQPlayerController_GetSquadPlayerState");
static_assert(sizeof(SQPlayerController_GetSquadPlayerState) == 0x000008, "Wrong size on SQPlayerController_GetSquadPlayerState");
static_assert(offsetof(SQPlayerController_GetSquadPlayerState, ReturnValue) == 0x000000, "Member 'SQPlayerController_GetSquadPlayerState::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.GetTeam
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerController_GetTeam final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_GetTeam) == 0x000004, "Wrong alignment on SQPlayerController_GetTeam");
static_assert(sizeof(SQPlayerController_GetTeam) == 0x000004, "Wrong size on SQPlayerController_GetTeam");
static_assert(offsetof(SQPlayerController_GetTeam, ReturnValue) == 0x000000, "Member 'SQPlayerController_GetTeam::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.GetYawInputScale
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerController_GetYawInputScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_GetYawInputScale) == 0x000004, "Wrong alignment on SQPlayerController_GetYawInputScale");
static_assert(sizeof(SQPlayerController_GetYawInputScale) == 0x000004, "Wrong size on SQPlayerController_GetYawInputScale");
static_assert(offsetof(SQPlayerController_GetYawInputScale, ReturnValue) == 0x000000, "Member 'SQPlayerController_GetYawInputScale::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.IsAdmin
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_IsAdmin final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_IsAdmin) == 0x000001, "Wrong alignment on SQPlayerController_IsAdmin");
static_assert(sizeof(SQPlayerController_IsAdmin) == 0x000001, "Wrong size on SQPlayerController_IsAdmin");
static_assert(offsetof(SQPlayerController_IsAdmin, ReturnValue) == 0x000000, "Member 'SQPlayerController_IsAdmin::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.IsAdminCamera
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_IsAdminCamera final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_IsAdminCamera) == 0x000001, "Wrong alignment on SQPlayerController_IsAdminCamera");
static_assert(sizeof(SQPlayerController_IsAdminCamera) == 0x000001, "Wrong size on SQPlayerController_IsAdminCamera");
static_assert(offsetof(SQPlayerController_IsAdminCamera, ReturnValue) == 0x000000, "Member 'SQPlayerController_IsAdminCamera::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.IsAlive
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_IsAlive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_IsAlive) == 0x000001, "Wrong alignment on SQPlayerController_IsAlive");
static_assert(sizeof(SQPlayerController_IsAlive) == 0x000001, "Wrong size on SQPlayerController_IsAlive");
static_assert(offsetof(SQPlayerController_IsAlive, ReturnValue) == 0x000000, "Member 'SQPlayerController_IsAlive::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.IsCameraMan
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_IsCameraMan final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_IsCameraMan) == 0x000001, "Wrong alignment on SQPlayerController_IsCameraMan");
static_assert(sizeof(SQPlayerController_IsCameraMan) == 0x000001, "Wrong size on SQPlayerController_IsCameraMan");
static_assert(offsetof(SQPlayerController_IsCameraMan, ReturnValue) == 0x000000, "Member 'SQPlayerController_IsCameraMan::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.IsCommander
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_IsCommander final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_IsCommander) == 0x000001, "Wrong alignment on SQPlayerController_IsCommander");
static_assert(sizeof(SQPlayerController_IsCommander) == 0x000001, "Wrong size on SQPlayerController_IsCommander");
static_assert(offsetof(SQPlayerController_IsCommander, ReturnValue) == 0x000000, "Member 'SQPlayerController_IsCommander::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.IsDeathPending
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_IsDeathPending final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_IsDeathPending) == 0x000001, "Wrong alignment on SQPlayerController_IsDeathPending");
static_assert(sizeof(SQPlayerController_IsDeathPending) == 0x000001, "Wrong size on SQPlayerController_IsDeathPending");
static_assert(offsetof(SQPlayerController_IsDeathPending, ReturnValue) == 0x000000, "Member 'SQPlayerController_IsDeathPending::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.IsDeployRoleAvailable
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_IsDeployRoleAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_IsDeployRoleAvailable) == 0x000001, "Wrong alignment on SQPlayerController_IsDeployRoleAvailable");
static_assert(sizeof(SQPlayerController_IsDeployRoleAvailable) == 0x000001, "Wrong size on SQPlayerController_IsDeployRoleAvailable");
static_assert(offsetof(SQPlayerController_IsDeployRoleAvailable, ReturnValue) == 0x000000, "Member 'SQPlayerController_IsDeployRoleAvailable::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.IsDev
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_IsDev final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_IsDev) == 0x000001, "Wrong alignment on SQPlayerController_IsDev");
static_assert(sizeof(SQPlayerController_IsDev) == 0x000001, "Wrong size on SQPlayerController_IsDev");
static_assert(offsetof(SQPlayerController_IsDev, ReturnValue) == 0x000000, "Member 'SQPlayerController_IsDev::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.IsFireTeamLeader
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_IsFireTeamLeader final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_IsFireTeamLeader) == 0x000001, "Wrong alignment on SQPlayerController_IsFireTeamLeader");
static_assert(sizeof(SQPlayerController_IsFireTeamLeader) == 0x000001, "Wrong size on SQPlayerController_IsFireTeamLeader");
static_assert(offsetof(SQPlayerController_IsFireTeamLeader, ReturnValue) == 0x000000, "Member 'SQPlayerController_IsFireTeamLeader::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.IsMember
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_IsMember final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_IsMember) == 0x000001, "Wrong alignment on SQPlayerController_IsMember");
static_assert(sizeof(SQPlayerController_IsMember) == 0x000001, "Wrong size on SQPlayerController_IsMember");
static_assert(offsetof(SQPlayerController_IsMember, ReturnValue) == 0x000000, "Member 'SQPlayerController_IsMember::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.IsOutOfMapBounds
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_IsOutOfMapBounds final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_IsOutOfMapBounds) == 0x000001, "Wrong alignment on SQPlayerController_IsOutOfMapBounds");
static_assert(sizeof(SQPlayerController_IsOutOfMapBounds) == 0x000001, "Wrong size on SQPlayerController_IsOutOfMapBounds");
static_assert(offsetof(SQPlayerController_IsOutOfMapBounds, ReturnValue) == 0x000000, "Member 'SQPlayerController_IsOutOfMapBounds::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.IsQA
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_IsQA final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_IsQA) == 0x000001, "Wrong alignment on SQPlayerController_IsQA");
static_assert(sizeof(SQPlayerController_IsQA) == 0x000001, "Wrong size on SQPlayerController_IsQA");
static_assert(offsetof(SQPlayerController_IsQA, ReturnValue) == 0x000000, "Member 'SQPlayerController_IsQA::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.IsRoamingMapOpen
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_IsRoamingMapOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_IsRoamingMapOpen) == 0x000001, "Wrong alignment on SQPlayerController_IsRoamingMapOpen");
static_assert(sizeof(SQPlayerController_IsRoamingMapOpen) == 0x000001, "Wrong size on SQPlayerController_IsRoamingMapOpen");
static_assert(offsetof(SQPlayerController_IsRoamingMapOpen, ReturnValue) == 0x000000, "Member 'SQPlayerController_IsRoamingMapOpen::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.IsSquadLeader
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_IsSquadLeader final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_IsSquadLeader) == 0x000001, "Wrong alignment on SQPlayerController_IsSquadLeader");
static_assert(sizeof(SQPlayerController_IsSquadLeader) == 0x000001, "Wrong size on SQPlayerController_IsSquadLeader");
static_assert(offsetof(SQPlayerController_IsSquadLeader, ReturnValue) == 0x000000, "Member 'SQPlayerController_IsSquadLeader::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.IsUsingFreeLook
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_IsUsingFreeLook final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_IsUsingFreeLook) == 0x000001, "Wrong alignment on SQPlayerController_IsUsingFreeLook");
static_assert(sizeof(SQPlayerController_IsUsingFreeLook) == 0x000001, "Wrong size on SQPlayerController_IsUsingFreeLook");
static_assert(offsetof(SQPlayerController_IsUsingFreeLook, ReturnValue) == 0x000000, "Member 'SQPlayerController_IsUsingFreeLook::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.IsWeaponInputIgnored
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_IsWeaponInputIgnored final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_IsWeaponInputIgnored) == 0x000001, "Wrong alignment on SQPlayerController_IsWeaponInputIgnored");
static_assert(sizeof(SQPlayerController_IsWeaponInputIgnored) == 0x000001, "Wrong size on SQPlayerController_IsWeaponInputIgnored");
static_assert(offsetof(SQPlayerController_IsWeaponInputIgnored, ReturnValue) == 0x000000, "Member 'SQPlayerController_IsWeaponInputIgnored::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.IsWounded
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_IsWounded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_IsWounded) == 0x000001, "Wrong alignment on SQPlayerController_IsWounded");
static_assert(sizeof(SQPlayerController_IsWounded) == 0x000001, "Wrong size on SQPlayerController_IsWounded");
static_assert(offsetof(SQPlayerController_IsWounded, ReturnValue) == 0x000000, "Member 'SQPlayerController_IsWounded::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerController.OnReceiveChat
// 0x0030 (0x0030 - 0x0000)
struct SQPlayerController_OnReceiveChat final
{
public:
	class ASQPlayerState*                         Speaker;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQChat                                       Channel;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQNotificationTypes                          NotificationType;                                  // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E67[0x6];                                      // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StreamerModeVariantMessage;                        // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_OnReceiveChat) == 0x000008, "Wrong alignment on SQPlayerController_OnReceiveChat");
static_assert(sizeof(SQPlayerController_OnReceiveChat) == 0x000030, "Wrong size on SQPlayerController_OnReceiveChat");
static_assert(offsetof(SQPlayerController_OnReceiveChat, Speaker) == 0x000000, "Member 'SQPlayerController_OnReceiveChat::Speaker' has a wrong offset!");
static_assert(offsetof(SQPlayerController_OnReceiveChat, Message) == 0x000008, "Member 'SQPlayerController_OnReceiveChat::Message' has a wrong offset!");
static_assert(offsetof(SQPlayerController_OnReceiveChat, Channel) == 0x000018, "Member 'SQPlayerController_OnReceiveChat::Channel' has a wrong offset!");
static_assert(offsetof(SQPlayerController_OnReceiveChat, NotificationType) == 0x000019, "Member 'SQPlayerController_OnReceiveChat::NotificationType' has a wrong offset!");
static_assert(offsetof(SQPlayerController_OnReceiveChat, StreamerModeVariantMessage) == 0x000020, "Member 'SQPlayerController_OnReceiveChat::StreamerModeVariantMessage' has a wrong offset!");

// Function Squad.SQPlayerController.SetDeployRole
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerController_SetDeployRole final
{
public:
	class USQRoleSettings*                        NewRoleSettings;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_SetDeployRole) == 0x000008, "Wrong alignment on SQPlayerController_SetDeployRole");
static_assert(sizeof(SQPlayerController_SetDeployRole) == 0x000008, "Wrong size on SQPlayerController_SetDeployRole");
static_assert(offsetof(SQPlayerController_SetDeployRole, NewRoleSettings) == 0x000000, "Member 'SQPlayerController_SetDeployRole::NewRoleSettings' has a wrong offset!");

// Function Squad.SQPlayerController.SetWorldOrigin
// 0x000C (0x000C - 0x0000)
struct SQPlayerController_SetWorldOrigin final
{
public:
	struct FIntVector                             NewOrigin;                                         // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_SetWorldOrigin) == 0x000004, "Wrong alignment on SQPlayerController_SetWorldOrigin");
static_assert(sizeof(SQPlayerController_SetWorldOrigin) == 0x00000C, "Wrong size on SQPlayerController_SetWorldOrigin");
static_assert(offsetof(SQPlayerController_SetWorldOrigin, NewOrigin) == 0x000000, "Member 'SQPlayerController_SetWorldOrigin::NewOrigin' has a wrong offset!");

// Function Squad.SQPlayerController.ShouldSkipPassword
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerController_ShouldSkipPassword final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerController_ShouldSkipPassword) == 0x000001, "Wrong alignment on SQPlayerController_ShouldSkipPassword");
static_assert(sizeof(SQPlayerController_ShouldSkipPassword) == 0x000001, "Wrong size on SQPlayerController_ShouldSkipPassword");
static_assert(offsetof(SQPlayerController_ShouldSkipPassword, ReturnValue) == 0x000000, "Member 'SQPlayerController_ShouldSkipPassword::ReturnValue' has a wrong offset!");

// Function Squad.SQOnlineHelpers.GetUsersInSession
// 0x0128 (0x0128 - 0x0000)
struct SQOnlineHelpers_GetUsersInSession final
{
public:
	TArray<struct FSQBlueprintFriend>             Results;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FBlueprintSessionResult                Session;                                           // 0x0010(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FSQBlueprintFriend>             ReturnValue;                                       // 0x0118(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQOnlineHelpers_GetUsersInSession) == 0x000008, "Wrong alignment on SQOnlineHelpers_GetUsersInSession");
static_assert(sizeof(SQOnlineHelpers_GetUsersInSession) == 0x000128, "Wrong size on SQOnlineHelpers_GetUsersInSession");
static_assert(offsetof(SQOnlineHelpers_GetUsersInSession, Results) == 0x000000, "Member 'SQOnlineHelpers_GetUsersInSession::Results' has a wrong offset!");
static_assert(offsetof(SQOnlineHelpers_GetUsersInSession, Session) == 0x000010, "Member 'SQOnlineHelpers_GetUsersInSession::Session' has a wrong offset!");
static_assert(offsetof(SQOnlineHelpers_GetUsersInSession, ReturnValue) == 0x000118, "Member 'SQOnlineHelpers_GetUsersInSession::ReturnValue' has a wrong offset!");

// Function Squad.SQOnlineHelpers.GetUsersSessionIndex
// 0x0078 (0x0078 - 0x0000)
struct SQOnlineHelpers_GetUsersSessionIndex final
{
public:
	struct FSQBlueprintFriend                     User;                                              // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FBlueprintSessionResult>        Sessions;                                          // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E69[0x4];                                      // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQOnlineHelpers_GetUsersSessionIndex) == 0x000008, "Wrong alignment on SQOnlineHelpers_GetUsersSessionIndex");
static_assert(sizeof(SQOnlineHelpers_GetUsersSessionIndex) == 0x000078, "Wrong size on SQOnlineHelpers_GetUsersSessionIndex");
static_assert(offsetof(SQOnlineHelpers_GetUsersSessionIndex, User) == 0x000000, "Member 'SQOnlineHelpers_GetUsersSessionIndex::User' has a wrong offset!");
static_assert(offsetof(SQOnlineHelpers_GetUsersSessionIndex, Sessions) == 0x000060, "Member 'SQOnlineHelpers_GetUsersSessionIndex::Sessions' has a wrong offset!");
static_assert(offsetof(SQOnlineHelpers_GetUsersSessionIndex, ReturnValue) == 0x000070, "Member 'SQOnlineHelpers_GetUsersSessionIndex::ReturnValue' has a wrong offset!");

// Function Squad.SQOnlineHelpers.IsUserInSession
// 0x0170 (0x0170 - 0x0000)
struct SQOnlineHelpers_IsUserInSession final
{
public:
	struct FSQBlueprintFriend                     User;                                              // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FBlueprintSessionResult                Session;                                           // 0x0060(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0168(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E6A[0x7];                                      // 0x0169(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQOnlineHelpers_IsUserInSession) == 0x000008, "Wrong alignment on SQOnlineHelpers_IsUserInSession");
static_assert(sizeof(SQOnlineHelpers_IsUserInSession) == 0x000170, "Wrong size on SQOnlineHelpers_IsUserInSession");
static_assert(offsetof(SQOnlineHelpers_IsUserInSession, User) == 0x000000, "Member 'SQOnlineHelpers_IsUserInSession::User' has a wrong offset!");
static_assert(offsetof(SQOnlineHelpers_IsUserInSession, Session) == 0x000060, "Member 'SQOnlineHelpers_IsUserInSession::Session' has a wrong offset!");
static_assert(offsetof(SQOnlineHelpers_IsUserInSession, ReturnValue) == 0x000168, "Member 'SQOnlineHelpers_IsUserInSession::ReturnValue' has a wrong offset!");

// Function Squad.SQAIController.SpawnBots
// 0x0004 (0x0004 - 0x0000)
struct SQAIController_SpawnBots final
{
public:
	int32                                         NumberOfBotsToSpawn;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAIController_SpawnBots) == 0x000004, "Wrong alignment on SQAIController_SpawnBots");
static_assert(sizeof(SQAIController_SpawnBots) == 0x000004, "Wrong size on SQAIController_SpawnBots");
static_assert(offsetof(SQAIController_SpawnBots, NumberOfBotsToSpawn) == 0x000000, "Member 'SQAIController_SpawnBots::NumberOfBotsToSpawn' has a wrong offset!");

// Function Squad.SQAIController.FindClosestEnemyWithLOS
// 0x0010 (0x0010 - 0x0000)
struct SQAIController_FindClosestEnemyWithLOS final
{
public:
	class ASQSoldier*                             ExcludeEnemy;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E6C[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAIController_FindClosestEnemyWithLOS) == 0x000008, "Wrong alignment on SQAIController_FindClosestEnemyWithLOS");
static_assert(sizeof(SQAIController_FindClosestEnemyWithLOS) == 0x000010, "Wrong size on SQAIController_FindClosestEnemyWithLOS");
static_assert(offsetof(SQAIController_FindClosestEnemyWithLOS, ExcludeEnemy) == 0x000000, "Member 'SQAIController_FindClosestEnemyWithLOS::ExcludeEnemy' has a wrong offset!");
static_assert(offsetof(SQAIController_FindClosestEnemyWithLOS, ReturnValue) == 0x000008, "Member 'SQAIController_FindClosestEnemyWithLOS::ReturnValue' has a wrong offset!");

// Function Squad.SQAIController.SetCurrentRole
// 0x0010 (0x0010 - 0x0000)
struct SQAIController_SetCurrentRole final
{
public:
	class USQRoleSettings*                        NewRoleSettings;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQSpawnInventoryReason                       SpawnInventoryReason;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E6D[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAIController_SetCurrentRole) == 0x000008, "Wrong alignment on SQAIController_SetCurrentRole");
static_assert(sizeof(SQAIController_SetCurrentRole) == 0x000010, "Wrong size on SQAIController_SetCurrentRole");
static_assert(offsetof(SQAIController_SetCurrentRole, NewRoleSettings) == 0x000000, "Member 'SQAIController_SetCurrentRole::NewRoleSettings' has a wrong offset!");
static_assert(offsetof(SQAIController_SetCurrentRole, SpawnInventoryReason) == 0x000008, "Member 'SQAIController_SetCurrentRole::SpawnInventoryReason' has a wrong offset!");

// Function Squad.SQAIController.GetSoldier
// 0x0008 (0x0008 - 0x0000)
struct SQAIController_GetSoldier final
{
public:
	class ASQSoldier*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAIController_GetSoldier) == 0x000008, "Wrong alignment on SQAIController_GetSoldier");
static_assert(sizeof(SQAIController_GetSoldier) == 0x000008, "Wrong size on SQAIController_GetSoldier");
static_assert(offsetof(SQAIController_GetSoldier, ReturnValue) == 0x000000, "Member 'SQAIController_GetSoldier::ReturnValue' has a wrong offset!");

// Function Squad.SQAIController.GetSquadPlayerState
// 0x0008 (0x0008 - 0x0000)
struct SQAIController_GetSquadPlayerState final
{
public:
	class ASQPlayerState*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAIController_GetSquadPlayerState) == 0x000008, "Wrong alignment on SQAIController_GetSquadPlayerState");
static_assert(sizeof(SQAIController_GetSquadPlayerState) == 0x000008, "Wrong size on SQAIController_GetSquadPlayerState");
static_assert(offsetof(SQAIController_GetSquadPlayerState, ReturnValue) == 0x000000, "Member 'SQAIController_GetSquadPlayerState::ReturnValue' has a wrong offset!");

// Function Squad.SQAIController.IsEnemy
// 0x0010 (0x0010 - 0x0000)
struct SQAIController_IsEnemy final
{
public:
	class ASQSoldier*                             Soldier;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E6E[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAIController_IsEnemy) == 0x000008, "Wrong alignment on SQAIController_IsEnemy");
static_assert(sizeof(SQAIController_IsEnemy) == 0x000010, "Wrong size on SQAIController_IsEnemy");
static_assert(offsetof(SQAIController_IsEnemy, Soldier) == 0x000000, "Member 'SQAIController_IsEnemy::Soldier' has a wrong offset!");
static_assert(offsetof(SQAIController_IsEnemy, ReturnValue) == 0x000008, "Member 'SQAIController_IsEnemy::ReturnValue' has a wrong offset!");

// Function Squad.SQAmbientAndReverbComponent.OnOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct SQAmbientAndReverbComponent_OnOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E71[0x3];                                      // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAmbientAndReverbComponent_OnOverlapBegin) == 0x000008, "Wrong alignment on SQAmbientAndReverbComponent_OnOverlapBegin");
static_assert(sizeof(SQAmbientAndReverbComponent_OnOverlapBegin) == 0x0000A8, "Wrong size on SQAmbientAndReverbComponent_OnOverlapBegin");
static_assert(offsetof(SQAmbientAndReverbComponent_OnOverlapBegin, OverlappedComponent) == 0x000000, "Member 'SQAmbientAndReverbComponent_OnOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SQAmbientAndReverbComponent_OnOverlapBegin, OtherActor) == 0x000008, "Member 'SQAmbientAndReverbComponent_OnOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(SQAmbientAndReverbComponent_OnOverlapBegin, OtherComp) == 0x000010, "Member 'SQAmbientAndReverbComponent_OnOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(SQAmbientAndReverbComponent_OnOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'SQAmbientAndReverbComponent_OnOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SQAmbientAndReverbComponent_OnOverlapBegin, bFromSweep) == 0x00001C, "Member 'SQAmbientAndReverbComponent_OnOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(SQAmbientAndReverbComponent_OnOverlapBegin, SweepResult) == 0x000020, "Member 'SQAmbientAndReverbComponent_OnOverlapBegin::SweepResult' has a wrong offset!");

// Function Squad.SQAmbientAndReverbComponent.OnOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct SQAmbientAndReverbComponent_OnOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E72[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAmbientAndReverbComponent_OnOverlapEnd) == 0x000008, "Wrong alignment on SQAmbientAndReverbComponent_OnOverlapEnd");
static_assert(sizeof(SQAmbientAndReverbComponent_OnOverlapEnd) == 0x000020, "Wrong size on SQAmbientAndReverbComponent_OnOverlapEnd");
static_assert(offsetof(SQAmbientAndReverbComponent_OnOverlapEnd, OverlappedComponent) == 0x000000, "Member 'SQAmbientAndReverbComponent_OnOverlapEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SQAmbientAndReverbComponent_OnOverlapEnd, OtherActor) == 0x000008, "Member 'SQAmbientAndReverbComponent_OnOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(SQAmbientAndReverbComponent_OnOverlapEnd, OtherComp) == 0x000010, "Member 'SQAmbientAndReverbComponent_OnOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(SQAmbientAndReverbComponent_OnOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'SQAmbientAndReverbComponent_OnOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function Squad.SQVehicleResource.FindValidDropOffs
// 0x0018 (0x0018 - 0x0000)
struct SQVehicleResource_FindValidDropOffs final
{
public:
	class ASQForwardBase*                         Fob;                                               // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Zone;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E75[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVehicleResource_FindValidDropOffs) == 0x000008, "Wrong alignment on SQVehicleResource_FindValidDropOffs");
static_assert(sizeof(SQVehicleResource_FindValidDropOffs) == 0x000018, "Wrong size on SQVehicleResource_FindValidDropOffs");
static_assert(offsetof(SQVehicleResource_FindValidDropOffs, Fob) == 0x000000, "Member 'SQVehicleResource_FindValidDropOffs::Fob' has a wrong offset!");
static_assert(offsetof(SQVehicleResource_FindValidDropOffs, Zone) == 0x000008, "Member 'SQVehicleResource_FindValidDropOffs::Zone' has a wrong offset!");
static_assert(offsetof(SQVehicleResource_FindValidDropOffs, ReturnValue) == 0x000010, "Member 'SQVehicleResource_FindValidDropOffs::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleResource.ModifyResource
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleResource_ModifyResource final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleResource_ModifyResource) == 0x000004, "Wrong alignment on SQVehicleResource_ModifyResource");
static_assert(sizeof(SQVehicleResource_ModifyResource) == 0x000004, "Wrong size on SQVehicleResource_ModifyResource");
static_assert(offsetof(SQVehicleResource_ModifyResource, Amount) == 0x000000, "Member 'SQVehicleResource_ModifyResource::Amount' has a wrong offset!");

// Function Squad.SQVehicleResource.ServerBeginResourceDropOff
// 0x0018 (0x0018 - 0x0000)
struct SQVehicleResource_ServerBeginResourceDropOff final
{
public:
	class ASQForwardBase*                         Fob;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Zone;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DropRate;                                          // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E76[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVehicleResource_ServerBeginResourceDropOff) == 0x000008, "Wrong alignment on SQVehicleResource_ServerBeginResourceDropOff");
static_assert(sizeof(SQVehicleResource_ServerBeginResourceDropOff) == 0x000018, "Wrong size on SQVehicleResource_ServerBeginResourceDropOff");
static_assert(offsetof(SQVehicleResource_ServerBeginResourceDropOff, Fob) == 0x000000, "Member 'SQVehicleResource_ServerBeginResourceDropOff::Fob' has a wrong offset!");
static_assert(offsetof(SQVehicleResource_ServerBeginResourceDropOff, Zone) == 0x000008, "Member 'SQVehicleResource_ServerBeginResourceDropOff::Zone' has a wrong offset!");
static_assert(offsetof(SQVehicleResource_ServerBeginResourceDropOff, DropRate) == 0x000010, "Member 'SQVehicleResource_ServerBeginResourceDropOff::DropRate' has a wrong offset!");

// Function Squad.SQVehicleResource.UseResource
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleResource_UseResource final
{
public:
	float                                         ModifyAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleResource_UseResource) == 0x000004, "Wrong alignment on SQVehicleResource_UseResource");
static_assert(sizeof(SQVehicleResource_UseResource) == 0x000004, "Wrong size on SQVehicleResource_UseResource");
static_assert(offsetof(SQVehicleResource_UseResource, ModifyAmount) == 0x000000, "Member 'SQVehicleResource_UseResource::ModifyAmount' has a wrong offset!");

// Function Squad.SQVehicleResource.AtValidResourcePoint
// 0x0001 (0x0001 - 0x0000)
struct SQVehicleResource_AtValidResourcePoint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleResource_AtValidResourcePoint) == 0x000001, "Wrong alignment on SQVehicleResource_AtValidResourcePoint");
static_assert(sizeof(SQVehicleResource_AtValidResourcePoint) == 0x000001, "Wrong size on SQVehicleResource_AtValidResourcePoint");
static_assert(offsetof(SQVehicleResource_AtValidResourcePoint, ReturnValue) == 0x000000, "Member 'SQVehicleResource_AtValidResourcePoint::ReturnValue' has a wrong offset!");

// Function Squad.SQPainCausingVolumeComponent.OnBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct SQPainCausingVolumeComponent_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E7A[0x3];                                      // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPainCausingVolumeComponent_OnBeginOverlap) == 0x000008, "Wrong alignment on SQPainCausingVolumeComponent_OnBeginOverlap");
static_assert(sizeof(SQPainCausingVolumeComponent_OnBeginOverlap) == 0x0000A8, "Wrong size on SQPainCausingVolumeComponent_OnBeginOverlap");
static_assert(offsetof(SQPainCausingVolumeComponent_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'SQPainCausingVolumeComponent_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SQPainCausingVolumeComponent_OnBeginOverlap, OtherActor) == 0x000008, "Member 'SQPainCausingVolumeComponent_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SQPainCausingVolumeComponent_OnBeginOverlap, OtherComp) == 0x000010, "Member 'SQPainCausingVolumeComponent_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(SQPainCausingVolumeComponent_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'SQPainCausingVolumeComponent_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SQPainCausingVolumeComponent_OnBeginOverlap, bFromSweep) == 0x00001C, "Member 'SQPainCausingVolumeComponent_OnBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(SQPainCausingVolumeComponent_OnBeginOverlap, SweepResult) == 0x000020, "Member 'SQPainCausingVolumeComponent_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function Squad.SQAmmoWidget.UpdateFiremode
// 0x0008 (0x0008 - 0x0000)
struct SQAmmoWidget_UpdateFiremode final
{
public:
	class ASQEquipableItem*                       CurrentItem;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAmmoWidget_UpdateFiremode) == 0x000008, "Wrong alignment on SQAmmoWidget_UpdateFiremode");
static_assert(sizeof(SQAmmoWidget_UpdateFiremode) == 0x000008, "Wrong size on SQAmmoWidget_UpdateFiremode");
static_assert(offsetof(SQAmmoWidget_UpdateFiremode, CurrentItem) == 0x000000, "Member 'SQAmmoWidget_UpdateFiremode::CurrentItem' has a wrong offset!");

// Function Squad.SQAmmoWidget.UpdateMags
// 0x0008 (0x0008 - 0x0000)
struct SQAmmoWidget_UpdateMags final
{
public:
	class ASQEquipableItem*                       CurrentItem;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAmmoWidget_UpdateMags) == 0x000008, "Wrong alignment on SQAmmoWidget_UpdateMags");
static_assert(sizeof(SQAmmoWidget_UpdateMags) == 0x000008, "Wrong size on SQAmmoWidget_UpdateMags");
static_assert(offsetof(SQAmmoWidget_UpdateMags, CurrentItem) == 0x000000, "Member 'SQAmmoWidget_UpdateMags::CurrentItem' has a wrong offset!");

// Function Squad.SQAmmoWidget.UpdateShowingStatus
// 0x0001 (0x0001 - 0x0000)
struct SQAmmoWidget_UpdateShowingStatus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAmmoWidget_UpdateShowingStatus) == 0x000001, "Wrong alignment on SQAmmoWidget_UpdateShowingStatus");
static_assert(sizeof(SQAmmoWidget_UpdateShowingStatus) == 0x000001, "Wrong size on SQAmmoWidget_UpdateShowingStatus");
static_assert(offsetof(SQAmmoWidget_UpdateShowingStatus, ReturnValue) == 0x000000, "Member 'SQAmmoWidget_UpdateShowingStatus::ReturnValue' has a wrong offset!");

// Function Squad.SQAnalyticsBlueprintLibrary.SendAnalyticEvent
// 0x0030 (0x0030 - 0x0000)
struct SQAnalyticsBlueprintLibrary_SendAnalyticEvent final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventDataKey;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventData;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAnalyticsBlueprintLibrary_SendAnalyticEvent) == 0x000008, "Wrong alignment on SQAnalyticsBlueprintLibrary_SendAnalyticEvent");
static_assert(sizeof(SQAnalyticsBlueprintLibrary_SendAnalyticEvent) == 0x000030, "Wrong size on SQAnalyticsBlueprintLibrary_SendAnalyticEvent");
static_assert(offsetof(SQAnalyticsBlueprintLibrary_SendAnalyticEvent, EventName) == 0x000000, "Member 'SQAnalyticsBlueprintLibrary_SendAnalyticEvent::EventName' has a wrong offset!");
static_assert(offsetof(SQAnalyticsBlueprintLibrary_SendAnalyticEvent, EventDataKey) == 0x000010, "Member 'SQAnalyticsBlueprintLibrary_SendAnalyticEvent::EventDataKey' has a wrong offset!");
static_assert(offsetof(SQAnalyticsBlueprintLibrary_SendAnalyticEvent, EventData) == 0x000020, "Member 'SQAnalyticsBlueprintLibrary_SendAnalyticEvent::EventData' has a wrong offset!");

// Function Squad.SQAnalyticsBlueprintLibrary.SendAnalyticEventArray
// 0x0020 (0x0020 - 0x0000)
struct SQAnalyticsBlueprintLibrary_SendAnalyticEventArray final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnalyticKeyValue>              EventData;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAnalyticsBlueprintLibrary_SendAnalyticEventArray) == 0x000008, "Wrong alignment on SQAnalyticsBlueprintLibrary_SendAnalyticEventArray");
static_assert(sizeof(SQAnalyticsBlueprintLibrary_SendAnalyticEventArray) == 0x000020, "Wrong size on SQAnalyticsBlueprintLibrary_SendAnalyticEventArray");
static_assert(offsetof(SQAnalyticsBlueprintLibrary_SendAnalyticEventArray, EventName) == 0x000000, "Member 'SQAnalyticsBlueprintLibrary_SendAnalyticEventArray::EventName' has a wrong offset!");
static_assert(offsetof(SQAnalyticsBlueprintLibrary_SendAnalyticEventArray, EventData) == 0x000010, "Member 'SQAnalyticsBlueprintLibrary_SendAnalyticEventArray::EventData' has a wrong offset!");

// Function Squad.SQPlayerCameraManager.GetAdjustedFOV
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerCameraManager_GetAdjustedFOV final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerCameraManager_GetAdjustedFOV) == 0x000004, "Wrong alignment on SQPlayerCameraManager_GetAdjustedFOV");
static_assert(sizeof(SQPlayerCameraManager_GetAdjustedFOV) == 0x000004, "Wrong size on SQPlayerCameraManager_GetAdjustedFOV");
static_assert(offsetof(SQPlayerCameraManager_GetAdjustedFOV, ReturnValue) == 0x000000, "Member 'SQPlayerCameraManager_GetAdjustedFOV::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerCameraManager.ModifyNearClipPlane
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerCameraManager_ModifyNearClipPlane final
{
public:
	float                                         NearClipPlaneDistance;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerCameraManager_ModifyNearClipPlane) == 0x000004, "Wrong alignment on SQPlayerCameraManager_ModifyNearClipPlane");
static_assert(sizeof(SQPlayerCameraManager_ModifyNearClipPlane) == 0x000004, "Wrong size on SQPlayerCameraManager_ModifyNearClipPlane");
static_assert(offsetof(SQPlayerCameraManager_ModifyNearClipPlane, NearClipPlaneDistance) == 0x000000, "Member 'SQPlayerCameraManager_ModifyNearClipPlane::NearClipPlaneDistance' has a wrong offset!");

// Function Squad.SQPlayerCameraManager.CalcScreenCenterRay
// 0x001C (0x001C - 0x0000)
struct SQPlayerCameraManager_CalcScreenCenterRay final
{
public:
	float                                         Range;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutStart;                                          // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutEnd;                                            // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerCameraManager_CalcScreenCenterRay) == 0x000004, "Wrong alignment on SQPlayerCameraManager_CalcScreenCenterRay");
static_assert(sizeof(SQPlayerCameraManager_CalcScreenCenterRay) == 0x00001C, "Wrong size on SQPlayerCameraManager_CalcScreenCenterRay");
static_assert(offsetof(SQPlayerCameraManager_CalcScreenCenterRay, Range) == 0x000000, "Member 'SQPlayerCameraManager_CalcScreenCenterRay::Range' has a wrong offset!");
static_assert(offsetof(SQPlayerCameraManager_CalcScreenCenterRay, OutStart) == 0x000004, "Member 'SQPlayerCameraManager_CalcScreenCenterRay::OutStart' has a wrong offset!");
static_assert(offsetof(SQPlayerCameraManager_CalcScreenCenterRay, OutEnd) == 0x000010, "Member 'SQPlayerCameraManager_CalcScreenCenterRay::OutEnd' has a wrong offset!");

// Function Squad.SQPlayerCameraManager.GetLastNearClipPlane
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerCameraManager_GetLastNearClipPlane final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerCameraManager_GetLastNearClipPlane) == 0x000004, "Wrong alignment on SQPlayerCameraManager_GetLastNearClipPlane");
static_assert(sizeof(SQPlayerCameraManager_GetLastNearClipPlane) == 0x000004, "Wrong size on SQPlayerCameraManager_GetLastNearClipPlane");
static_assert(offsetof(SQPlayerCameraManager_GetLastNearClipPlane, ReturnValue) == 0x000000, "Member 'SQPlayerCameraManager_GetLastNearClipPlane::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerCameraManager.GetNearClipPlane
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerCameraManager_GetNearClipPlane final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerCameraManager_GetNearClipPlane) == 0x000004, "Wrong alignment on SQPlayerCameraManager_GetNearClipPlane");
static_assert(sizeof(SQPlayerCameraManager_GetNearClipPlane) == 0x000004, "Wrong size on SQPlayerCameraManager_GetNearClipPlane");
static_assert(offsetof(SQPlayerCameraManager_GetNearClipPlane, ReturnValue) == 0x000000, "Member 'SQPlayerCameraManager_GetNearClipPlane::ReturnValue' has a wrong offset!");

// Function Squad.SQAnimInstance.EndLoopAnimationHandler
// 0x0040 (0x0040 - 0x0000)
struct SQAnimInstance_EndLoopAnimationHandler final
{
public:
	class UAnimMontage*                           WeaponMontage;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Soldier1pMontage;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Soldier3pMontage;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQMontageSectionNames                 SectionNames;                                      // 0x0018(0x0028)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAnimInstance_EndLoopAnimationHandler) == 0x000008, "Wrong alignment on SQAnimInstance_EndLoopAnimationHandler");
static_assert(sizeof(SQAnimInstance_EndLoopAnimationHandler) == 0x000040, "Wrong size on SQAnimInstance_EndLoopAnimationHandler");
static_assert(offsetof(SQAnimInstance_EndLoopAnimationHandler, WeaponMontage) == 0x000000, "Member 'SQAnimInstance_EndLoopAnimationHandler::WeaponMontage' has a wrong offset!");
static_assert(offsetof(SQAnimInstance_EndLoopAnimationHandler, Soldier1pMontage) == 0x000008, "Member 'SQAnimInstance_EndLoopAnimationHandler::Soldier1pMontage' has a wrong offset!");
static_assert(offsetof(SQAnimInstance_EndLoopAnimationHandler, Soldier3pMontage) == 0x000010, "Member 'SQAnimInstance_EndLoopAnimationHandler::Soldier3pMontage' has a wrong offset!");
static_assert(offsetof(SQAnimInstance_EndLoopAnimationHandler, SectionNames) == 0x000018, "Member 'SQAnimInstance_EndLoopAnimationHandler::SectionNames' has a wrong offset!");

// Function Squad.SQAnimInstance.PauseAnimationHandler
// 0x0018 (0x0018 - 0x0000)
struct SQAnimInstance_PauseAnimationHandler final
{
public:
	class UAnimMontage*                           WeaponMontage;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Soldier1pMontage;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Soldier3pMontage;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAnimInstance_PauseAnimationHandler) == 0x000008, "Wrong alignment on SQAnimInstance_PauseAnimationHandler");
static_assert(sizeof(SQAnimInstance_PauseAnimationHandler) == 0x000018, "Wrong size on SQAnimInstance_PauseAnimationHandler");
static_assert(offsetof(SQAnimInstance_PauseAnimationHandler, WeaponMontage) == 0x000000, "Member 'SQAnimInstance_PauseAnimationHandler::WeaponMontage' has a wrong offset!");
static_assert(offsetof(SQAnimInstance_PauseAnimationHandler, Soldier1pMontage) == 0x000008, "Member 'SQAnimInstance_PauseAnimationHandler::Soldier1pMontage' has a wrong offset!");
static_assert(offsetof(SQAnimInstance_PauseAnimationHandler, Soldier3pMontage) == 0x000010, "Member 'SQAnimInstance_PauseAnimationHandler::Soldier3pMontage' has a wrong offset!");

// Function Squad.SQAnimInstance.PlayAnimationHandler
// 0x0018 (0x0018 - 0x0000)
struct SQAnimInstance_PlayAnimationHandler final
{
public:
	class UAnimMontage*                           WeaponMontage;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Soldier1pMontage;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Soldier3pMontage;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAnimInstance_PlayAnimationHandler) == 0x000008, "Wrong alignment on SQAnimInstance_PlayAnimationHandler");
static_assert(sizeof(SQAnimInstance_PlayAnimationHandler) == 0x000018, "Wrong size on SQAnimInstance_PlayAnimationHandler");
static_assert(offsetof(SQAnimInstance_PlayAnimationHandler, WeaponMontage) == 0x000000, "Member 'SQAnimInstance_PlayAnimationHandler::WeaponMontage' has a wrong offset!");
static_assert(offsetof(SQAnimInstance_PlayAnimationHandler, Soldier1pMontage) == 0x000008, "Member 'SQAnimInstance_PlayAnimationHandler::Soldier1pMontage' has a wrong offset!");
static_assert(offsetof(SQAnimInstance_PlayAnimationHandler, Soldier3pMontage) == 0x000010, "Member 'SQAnimInstance_PlayAnimationHandler::Soldier3pMontage' has a wrong offset!");

// Function Squad.SQAnimInstance.ResumeAnimationHandler
// 0x0018 (0x0018 - 0x0000)
struct SQAnimInstance_ResumeAnimationHandler final
{
public:
	class UAnimMontage*                           WeaponMontage;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Soldier1pMontage;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Soldier3pMontage;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAnimInstance_ResumeAnimationHandler) == 0x000008, "Wrong alignment on SQAnimInstance_ResumeAnimationHandler");
static_assert(sizeof(SQAnimInstance_ResumeAnimationHandler) == 0x000018, "Wrong size on SQAnimInstance_ResumeAnimationHandler");
static_assert(offsetof(SQAnimInstance_ResumeAnimationHandler, WeaponMontage) == 0x000000, "Member 'SQAnimInstance_ResumeAnimationHandler::WeaponMontage' has a wrong offset!");
static_assert(offsetof(SQAnimInstance_ResumeAnimationHandler, Soldier1pMontage) == 0x000008, "Member 'SQAnimInstance_ResumeAnimationHandler::Soldier1pMontage' has a wrong offset!");
static_assert(offsetof(SQAnimInstance_ResumeAnimationHandler, Soldier3pMontage) == 0x000010, "Member 'SQAnimInstance_ResumeAnimationHandler::Soldier3pMontage' has a wrong offset!");

// Function Squad.SQAnimInstance.SetAnimationPlayRateHandler
// 0x0020 (0x0020 - 0x0000)
struct SQAnimInstance_SetAnimationPlayRateHandler final
{
public:
	class UAnimMontage*                           WeaponMontage;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Soldier1pMontage;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Soldier3pMontage;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewPlayRate;                                       // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E86[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAnimInstance_SetAnimationPlayRateHandler) == 0x000008, "Wrong alignment on SQAnimInstance_SetAnimationPlayRateHandler");
static_assert(sizeof(SQAnimInstance_SetAnimationPlayRateHandler) == 0x000020, "Wrong size on SQAnimInstance_SetAnimationPlayRateHandler");
static_assert(offsetof(SQAnimInstance_SetAnimationPlayRateHandler, WeaponMontage) == 0x000000, "Member 'SQAnimInstance_SetAnimationPlayRateHandler::WeaponMontage' has a wrong offset!");
static_assert(offsetof(SQAnimInstance_SetAnimationPlayRateHandler, Soldier1pMontage) == 0x000008, "Member 'SQAnimInstance_SetAnimationPlayRateHandler::Soldier1pMontage' has a wrong offset!");
static_assert(offsetof(SQAnimInstance_SetAnimationPlayRateHandler, Soldier3pMontage) == 0x000010, "Member 'SQAnimInstance_SetAnimationPlayRateHandler::Soldier3pMontage' has a wrong offset!");
static_assert(offsetof(SQAnimInstance_SetAnimationPlayRateHandler, NewPlayRate) == 0x000018, "Member 'SQAnimInstance_SetAnimationPlayRateHandler::NewPlayRate' has a wrong offset!");

// Function Squad.SQAnimInstance.StopAnimationHandler
// 0x0020 (0x0020 - 0x0000)
struct SQAnimInstance_StopAnimationHandler final
{
public:
	class UAnimMontage*                           WeaponMontage;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Soldier1pMontage;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Soldier3pMontage;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         blendOutTime;                                      // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopAllWeaponAnims;                               // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E87[0x3];                                      // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAnimInstance_StopAnimationHandler) == 0x000008, "Wrong alignment on SQAnimInstance_StopAnimationHandler");
static_assert(sizeof(SQAnimInstance_StopAnimationHandler) == 0x000020, "Wrong size on SQAnimInstance_StopAnimationHandler");
static_assert(offsetof(SQAnimInstance_StopAnimationHandler, WeaponMontage) == 0x000000, "Member 'SQAnimInstance_StopAnimationHandler::WeaponMontage' has a wrong offset!");
static_assert(offsetof(SQAnimInstance_StopAnimationHandler, Soldier1pMontage) == 0x000008, "Member 'SQAnimInstance_StopAnimationHandler::Soldier1pMontage' has a wrong offset!");
static_assert(offsetof(SQAnimInstance_StopAnimationHandler, Soldier3pMontage) == 0x000010, "Member 'SQAnimInstance_StopAnimationHandler::Soldier3pMontage' has a wrong offset!");
static_assert(offsetof(SQAnimInstance_StopAnimationHandler, blendOutTime) == 0x000018, "Member 'SQAnimInstance_StopAnimationHandler::blendOutTime' has a wrong offset!");
static_assert(offsetof(SQAnimInstance_StopAnimationHandler, bStopAllWeaponAnims) == 0x00001C, "Member 'SQAnimInstance_StopAnimationHandler::bStopAllWeaponAnims' has a wrong offset!");

// Function Squad.SQAnimInstance.UpdateStaticItemInfo
// 0x0008 (0x0008 - 0x0000)
struct SQAnimInstance_UpdateStaticItemInfo final
{
public:
	class USQItemStaticInfo*                      InfoObject;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAnimInstance_UpdateStaticItemInfo) == 0x000008, "Wrong alignment on SQAnimInstance_UpdateStaticItemInfo");
static_assert(sizeof(SQAnimInstance_UpdateStaticItemInfo) == 0x000008, "Wrong size on SQAnimInstance_UpdateStaticItemInfo");
static_assert(offsetof(SQAnimInstance_UpdateStaticItemInfo, InfoObject) == 0x000000, "Member 'SQAnimInstance_UpdateStaticItemInfo::InfoObject' has a wrong offset!");

// Function Squad.SQAnimInstanceSoldier.AlignWithGround
// 0x0018 (0x0018 - 0x0000)
struct SQAnimInstanceSoldier_AlignWithGround final
{
public:
	struct FVector                                FloorNormal;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAnimInstanceSoldier_AlignWithGround) == 0x000004, "Wrong alignment on SQAnimInstanceSoldier_AlignWithGround");
static_assert(sizeof(SQAnimInstanceSoldier_AlignWithGround) == 0x000018, "Wrong size on SQAnimInstanceSoldier_AlignWithGround");
static_assert(offsetof(SQAnimInstanceSoldier_AlignWithGround, FloorNormal) == 0x000000, "Member 'SQAnimInstanceSoldier_AlignWithGround::FloorNormal' has a wrong offset!");
static_assert(offsetof(SQAnimInstanceSoldier_AlignWithGround, ReturnValue) == 0x00000C, "Member 'SQAnimInstanceSoldier_AlignWithGround::ReturnValue' has a wrong offset!");

// Function Squad.SQAnimInstanceSoldier.UpdateFastPathTransitionVariables
// 0x0004 (0x0004 - 0x0000)
struct SQAnimInstanceSoldier_UpdateFastPathTransitionVariables final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAnimInstanceSoldier_UpdateFastPathTransitionVariables) == 0x000004, "Wrong alignment on SQAnimInstanceSoldier_UpdateFastPathTransitionVariables");
static_assert(sizeof(SQAnimInstanceSoldier_UpdateFastPathTransitionVariables) == 0x000004, "Wrong size on SQAnimInstanceSoldier_UpdateFastPathTransitionVariables");
static_assert(offsetof(SQAnimInstanceSoldier_UpdateFastPathTransitionVariables, DeltaSeconds) == 0x000000, "Member 'SQAnimInstanceSoldier_UpdateFastPathTransitionVariables::DeltaSeconds' has a wrong offset!");

// Function Squad.SQAnimInstanceSoldier.UpdateSteeringWheelVariables
// 0x0004 (0x0004 - 0x0000)
struct SQAnimInstanceSoldier_UpdateSteeringWheelVariables final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAnimInstanceSoldier_UpdateSteeringWheelVariables) == 0x000004, "Wrong alignment on SQAnimInstanceSoldier_UpdateSteeringWheelVariables");
static_assert(sizeof(SQAnimInstanceSoldier_UpdateSteeringWheelVariables) == 0x000004, "Wrong size on SQAnimInstanceSoldier_UpdateSteeringWheelVariables");
static_assert(offsetof(SQAnimInstanceSoldier_UpdateSteeringWheelVariables, DeltaSeconds) == 0x000000, "Member 'SQAnimInstanceSoldier_UpdateSteeringWheelVariables::DeltaSeconds' has a wrong offset!");

// Function Squad.SQAnimInstanceSoldier.UpdateVehicle
// 0x0004 (0x0004 - 0x0000)
struct SQAnimInstanceSoldier_UpdateVehicle final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAnimInstanceSoldier_UpdateVehicle) == 0x000004, "Wrong alignment on SQAnimInstanceSoldier_UpdateVehicle");
static_assert(sizeof(SQAnimInstanceSoldier_UpdateVehicle) == 0x000004, "Wrong size on SQAnimInstanceSoldier_UpdateVehicle");
static_assert(offsetof(SQAnimInstanceSoldier_UpdateVehicle, DeltaSeconds) == 0x000000, "Member 'SQAnimInstanceSoldier_UpdateVehicle::DeltaSeconds' has a wrong offset!");

// Function Squad.SQAnimInstanceSoldier.UpdateVehicleAim
// 0x0004 (0x0004 - 0x0000)
struct SQAnimInstanceSoldier_UpdateVehicleAim final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAnimInstanceSoldier_UpdateVehicleAim) == 0x000004, "Wrong alignment on SQAnimInstanceSoldier_UpdateVehicleAim");
static_assert(sizeof(SQAnimInstanceSoldier_UpdateVehicleAim) == 0x000004, "Wrong size on SQAnimInstanceSoldier_UpdateVehicleAim");
static_assert(offsetof(SQAnimInstanceSoldier_UpdateVehicleAim, DeltaSeconds) == 0x000000, "Member 'SQAnimInstanceSoldier_UpdateVehicleAim::DeltaSeconds' has a wrong offset!");

// Function Squad.SQPipScopeCaptureComponent.CycleMagnificationLevel
// 0x0004 (0x0004 - 0x0000)
struct SQPipScopeCaptureComponent_CycleMagnificationLevel final
{
public:
	int32                                         OverrideLevel;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPipScopeCaptureComponent_CycleMagnificationLevel) == 0x000004, "Wrong alignment on SQPipScopeCaptureComponent_CycleMagnificationLevel");
static_assert(sizeof(SQPipScopeCaptureComponent_CycleMagnificationLevel) == 0x000004, "Wrong size on SQPipScopeCaptureComponent_CycleMagnificationLevel");
static_assert(offsetof(SQPipScopeCaptureComponent_CycleMagnificationLevel, OverrideLevel) == 0x000000, "Member 'SQPipScopeCaptureComponent_CycleMagnificationLevel::OverrideLevel' has a wrong offset!");

// Function Squad.SQPipScopeCaptureComponent.CycleReticleGlowLevel
// 0x0004 (0x0004 - 0x0000)
struct SQPipScopeCaptureComponent_CycleReticleGlowLevel final
{
public:
	int32                                         OverrideLevel;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPipScopeCaptureComponent_CycleReticleGlowLevel) == 0x000004, "Wrong alignment on SQPipScopeCaptureComponent_CycleReticleGlowLevel");
static_assert(sizeof(SQPipScopeCaptureComponent_CycleReticleGlowLevel) == 0x000004, "Wrong size on SQPipScopeCaptureComponent_CycleReticleGlowLevel");
static_assert(offsetof(SQPipScopeCaptureComponent_CycleReticleGlowLevel, OverrideLevel) == 0x000000, "Member 'SQPipScopeCaptureComponent_CycleReticleGlowLevel::OverrideLevel' has a wrong offset!");

// Function Squad.SQPipScopeCaptureComponent.GetReticleScale
// 0x0004 (0x0004 - 0x0000)
struct SQPipScopeCaptureComponent_GetReticleScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPipScopeCaptureComponent_GetReticleScale) == 0x000004, "Wrong alignment on SQPipScopeCaptureComponent_GetReticleScale");
static_assert(sizeof(SQPipScopeCaptureComponent_GetReticleScale) == 0x000004, "Wrong size on SQPipScopeCaptureComponent_GetReticleScale");
static_assert(offsetof(SQPipScopeCaptureComponent_GetReticleScale, ReturnValue) == 0x000000, "Member 'SQPipScopeCaptureComponent_GetReticleScale::ReturnValue' has a wrong offset!");

// Function Squad.SQPipScopeCaptureComponent.OnAdsPressedEvent
// 0x0001 (0x0001 - 0x0000)
struct SQPipScopeCaptureComponent_OnAdsPressedEvent final
{
public:
	bool                                          bAdsState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPipScopeCaptureComponent_OnAdsPressedEvent) == 0x000001, "Wrong alignment on SQPipScopeCaptureComponent_OnAdsPressedEvent");
static_assert(sizeof(SQPipScopeCaptureComponent_OnAdsPressedEvent) == 0x000001, "Wrong size on SQPipScopeCaptureComponent_OnAdsPressedEvent");
static_assert(offsetof(SQPipScopeCaptureComponent_OnAdsPressedEvent, bAdsState) == 0x000000, "Member 'SQPipScopeCaptureComponent_OnAdsPressedEvent::bAdsState' has a wrong offset!");

// Function Squad.SQPipScopeCaptureComponent.OnAdsTransitionCompleteEvent
// 0x0001 (0x0001 - 0x0000)
struct SQPipScopeCaptureComponent_OnAdsTransitionCompleteEvent final
{
public:
	bool                                          bAdsState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPipScopeCaptureComponent_OnAdsTransitionCompleteEvent) == 0x000001, "Wrong alignment on SQPipScopeCaptureComponent_OnAdsTransitionCompleteEvent");
static_assert(sizeof(SQPipScopeCaptureComponent_OnAdsTransitionCompleteEvent) == 0x000001, "Wrong size on SQPipScopeCaptureComponent_OnAdsTransitionCompleteEvent");
static_assert(offsetof(SQPipScopeCaptureComponent_OnAdsTransitionCompleteEvent, bAdsState) == 0x000000, "Member 'SQPipScopeCaptureComponent_OnAdsTransitionCompleteEvent::bAdsState' has a wrong offset!");

// DelegateFunction Squad.SQPipScopeCaptureComponent.OnCycleMagnification__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SQPipScopeCaptureComponent_OnCycleMagnification__DelegateSignature final
{
public:
	float                                         NewFOV;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewMagnification;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPipScopeCaptureComponent_OnCycleMagnification__DelegateSignature) == 0x000004, "Wrong alignment on SQPipScopeCaptureComponent_OnCycleMagnification__DelegateSignature");
static_assert(sizeof(SQPipScopeCaptureComponent_OnCycleMagnification__DelegateSignature) == 0x000008, "Wrong size on SQPipScopeCaptureComponent_OnCycleMagnification__DelegateSignature");
static_assert(offsetof(SQPipScopeCaptureComponent_OnCycleMagnification__DelegateSignature, NewFOV) == 0x000000, "Member 'SQPipScopeCaptureComponent_OnCycleMagnification__DelegateSignature::NewFOV' has a wrong offset!");
static_assert(offsetof(SQPipScopeCaptureComponent_OnCycleMagnification__DelegateSignature, NewMagnification) == 0x000004, "Member 'SQPipScopeCaptureComponent_OnCycleMagnification__DelegateSignature::NewMagnification' has a wrong offset!");

// Function Squad.SQPipScopeCaptureComponent.OnPawnOwnerChanged
// 0x0008 (0x0008 - 0x0000)
struct SQPipScopeCaptureComponent_OnPawnOwnerChanged final
{
public:
	class APawn*                                  NewPawnOwner;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPipScopeCaptureComponent_OnPawnOwnerChanged) == 0x000008, "Wrong alignment on SQPipScopeCaptureComponent_OnPawnOwnerChanged");
static_assert(sizeof(SQPipScopeCaptureComponent_OnPawnOwnerChanged) == 0x000008, "Wrong size on SQPipScopeCaptureComponent_OnPawnOwnerChanged");
static_assert(offsetof(SQPipScopeCaptureComponent_OnPawnOwnerChanged, NewPawnOwner) == 0x000000, "Member 'SQPipScopeCaptureComponent_OnPawnOwnerChanged::NewPawnOwner' has a wrong offset!");

// Function Squad.SQPipScopeCaptureComponent.PrioritizeScopeClarity
// 0x0001 (0x0001 - 0x0000)
struct SQPipScopeCaptureComponent_PrioritizeScopeClarity final
{
public:
	bool                                          bIsPrioritizingScopeClarity;                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPipScopeCaptureComponent_PrioritizeScopeClarity) == 0x000001, "Wrong alignment on SQPipScopeCaptureComponent_PrioritizeScopeClarity");
static_assert(sizeof(SQPipScopeCaptureComponent_PrioritizeScopeClarity) == 0x000001, "Wrong size on SQPipScopeCaptureComponent_PrioritizeScopeClarity");
static_assert(offsetof(SQPipScopeCaptureComponent_PrioritizeScopeClarity, bIsPrioritizingScopeClarity) == 0x000000, "Member 'SQPipScopeCaptureComponent_PrioritizeScopeClarity::bIsPrioritizingScopeClarity' has a wrong offset!");

// Function Squad.SQPipScopeCaptureComponent.WeaponUnEquipped
// 0x0008 (0x0008 - 0x0000)
struct SQPipScopeCaptureComponent_WeaponUnEquipped final
{
public:
	class ASQEquipableItem*                       EquipableItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPipScopeCaptureComponent_WeaponUnEquipped) == 0x000008, "Wrong alignment on SQPipScopeCaptureComponent_WeaponUnEquipped");
static_assert(sizeof(SQPipScopeCaptureComponent_WeaponUnEquipped) == 0x000008, "Wrong size on SQPipScopeCaptureComponent_WeaponUnEquipped");
static_assert(offsetof(SQPipScopeCaptureComponent_WeaponUnEquipped, EquipableItem) == 0x000000, "Member 'SQPipScopeCaptureComponent_WeaponUnEquipped::EquipableItem' has a wrong offset!");

// Function Squad.SQPipScopeCaptureComponent.GetRenderTargetSizeMultiplier
// 0x0004 (0x0004 - 0x0000)
struct SQPipScopeCaptureComponent_GetRenderTargetSizeMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPipScopeCaptureComponent_GetRenderTargetSizeMultiplier) == 0x000004, "Wrong alignment on SQPipScopeCaptureComponent_GetRenderTargetSizeMultiplier");
static_assert(sizeof(SQPipScopeCaptureComponent_GetRenderTargetSizeMultiplier) == 0x000004, "Wrong size on SQPipScopeCaptureComponent_GetRenderTargetSizeMultiplier");
static_assert(offsetof(SQPipScopeCaptureComponent_GetRenderTargetSizeMultiplier, ReturnValue) == 0x000000, "Member 'SQPipScopeCaptureComponent_GetRenderTargetSizeMultiplier::ReturnValue' has a wrong offset!");

// Function Squad.SQAnimInstanceSoldier1P.SetWeaponSpringBipodEventDefaults
// 0x0001 (0x0001 - 0x0000)
struct SQAnimInstanceSoldier1P_SetWeaponSpringBipodEventDefaults final
{
public:
	bool                                          bBipodState;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAnimInstanceSoldier1P_SetWeaponSpringBipodEventDefaults) == 0x000001, "Wrong alignment on SQAnimInstanceSoldier1P_SetWeaponSpringBipodEventDefaults");
static_assert(sizeof(SQAnimInstanceSoldier1P_SetWeaponSpringBipodEventDefaults) == 0x000001, "Wrong size on SQAnimInstanceSoldier1P_SetWeaponSpringBipodEventDefaults");
static_assert(offsetof(SQAnimInstanceSoldier1P_SetWeaponSpringBipodEventDefaults, bBipodState) == 0x000000, "Member 'SQAnimInstanceSoldier1P_SetWeaponSpringBipodEventDefaults::bBipodState' has a wrong offset!");

// Function Squad.SQAnimInstanceSoldier1P.SetWeaponSpringParameters
// 0x0001 (0x0001 - 0x0000)
struct SQAnimInstanceSoldier1P_SetWeaponSpringParameters final
{
public:
	bool                                          bAdsState;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAnimInstanceSoldier1P_SetWeaponSpringParameters) == 0x000001, "Wrong alignment on SQAnimInstanceSoldier1P_SetWeaponSpringParameters");
static_assert(sizeof(SQAnimInstanceSoldier1P_SetWeaponSpringParameters) == 0x000001, "Wrong size on SQAnimInstanceSoldier1P_SetWeaponSpringParameters");
static_assert(offsetof(SQAnimInstanceSoldier1P_SetWeaponSpringParameters, bAdsState) == 0x000000, "Member 'SQAnimInstanceSoldier1P_SetWeaponSpringParameters::bAdsState' has a wrong offset!");

// Function Squad.SQAnimInstanceSoldier1P.UpdateBobbingsPlayrate
// 0x0004 (0x0004 - 0x0000)
struct SQAnimInstanceSoldier1P_UpdateBobbingsPlayrate final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAnimInstanceSoldier1P_UpdateBobbingsPlayrate) == 0x000004, "Wrong alignment on SQAnimInstanceSoldier1P_UpdateBobbingsPlayrate");
static_assert(sizeof(SQAnimInstanceSoldier1P_UpdateBobbingsPlayrate) == 0x000004, "Wrong size on SQAnimInstanceSoldier1P_UpdateBobbingsPlayrate");
static_assert(offsetof(SQAnimInstanceSoldier1P_UpdateBobbingsPlayrate, DeltaSeconds) == 0x000000, "Member 'SQAnimInstanceSoldier1P_UpdateBobbingsPlayrate::DeltaSeconds' has a wrong offset!");

// Function Squad.SQAnimInstanceSoldier1P.UpdateIsFallingPlayRate
// 0x0004 (0x0004 - 0x0000)
struct SQAnimInstanceSoldier1P_UpdateIsFallingPlayRate final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAnimInstanceSoldier1P_UpdateIsFallingPlayRate) == 0x000004, "Wrong alignment on SQAnimInstanceSoldier1P_UpdateIsFallingPlayRate");
static_assert(sizeof(SQAnimInstanceSoldier1P_UpdateIsFallingPlayRate) == 0x000004, "Wrong size on SQAnimInstanceSoldier1P_UpdateIsFallingPlayRate");
static_assert(offsetof(SQAnimInstanceSoldier1P_UpdateIsFallingPlayRate, DeltaSeconds) == 0x000000, "Member 'SQAnimInstanceSoldier1P_UpdateIsFallingPlayRate::DeltaSeconds' has a wrong offset!");

// Function Squad.SQAnimInstanceSoldier1P.UpdateLofSuppression
// 0x0004 (0x0004 - 0x0000)
struct SQAnimInstanceSoldier1P_UpdateLofSuppression final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAnimInstanceSoldier1P_UpdateLofSuppression) == 0x000004, "Wrong alignment on SQAnimInstanceSoldier1P_UpdateLofSuppression");
static_assert(sizeof(SQAnimInstanceSoldier1P_UpdateLofSuppression) == 0x000004, "Wrong size on SQAnimInstanceSoldier1P_UpdateLofSuppression");
static_assert(offsetof(SQAnimInstanceSoldier1P_UpdateLofSuppression, DeltaSeconds) == 0x000000, "Member 'SQAnimInstanceSoldier1P_UpdateLofSuppression::DeltaSeconds' has a wrong offset!");

// Function Squad.SQArmorMeshComponent.GetArmorThicknessAtHit
// 0x008C (0x008C - 0x0000)
struct SQArmorMeshComponent_GetArmorThicknessAtHit final
{
public:
	struct FHitResult                             InHit;                                             // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0088(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQArmorMeshComponent_GetArmorThicknessAtHit) == 0x000004, "Wrong alignment on SQArmorMeshComponent_GetArmorThicknessAtHit");
static_assert(sizeof(SQArmorMeshComponent_GetArmorThicknessAtHit) == 0x00008C, "Wrong size on SQArmorMeshComponent_GetArmorThicknessAtHit");
static_assert(offsetof(SQArmorMeshComponent_GetArmorThicknessAtHit, InHit) == 0x000000, "Member 'SQArmorMeshComponent_GetArmorThicknessAtHit::InHit' has a wrong offset!");
static_assert(offsetof(SQArmorMeshComponent_GetArmorThicknessAtHit, ReturnValue) == 0x000088, "Member 'SQArmorMeshComponent_GetArmorThicknessAtHit::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailability_Deployable.GetRefundPercentage
// 0x0004 (0x0004 - 0x0000)
struct SQAvailability_Deployable_GetRefundPercentage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAvailability_Deployable_GetRefundPercentage) == 0x000004, "Wrong alignment on SQAvailability_Deployable_GetRefundPercentage");
static_assert(sizeof(SQAvailability_Deployable_GetRefundPercentage) == 0x000004, "Wrong size on SQAvailability_Deployable_GetRefundPercentage");
static_assert(offsetof(SQAvailability_Deployable_GetRefundPercentage, ReturnValue) == 0x000000, "Member 'SQAvailability_Deployable_GetRefundPercentage::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailability_Deployable.ProcessRefund
// 0x0018 (0x0018 - 0x0000)
struct SQAvailability_Deployable_ProcessRefund final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQTeam*                                InTeam;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASQDeployable*                    InDeployable;                                      // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAvailability_Deployable_ProcessRefund) == 0x000008, "Wrong alignment on SQAvailability_Deployable_ProcessRefund");
static_assert(sizeof(SQAvailability_Deployable_ProcessRefund) == 0x000018, "Wrong size on SQAvailability_Deployable_ProcessRefund");
static_assert(offsetof(SQAvailability_Deployable_ProcessRefund, InPlayer) == 0x000000, "Member 'SQAvailability_Deployable_ProcessRefund::InPlayer' has a wrong offset!");
static_assert(offsetof(SQAvailability_Deployable_ProcessRefund, InTeam) == 0x000008, "Member 'SQAvailability_Deployable_ProcessRefund::InTeam' has a wrong offset!");
static_assert(offsetof(SQAvailability_Deployable_ProcessRefund, InDeployable) == 0x000010, "Member 'SQAvailability_Deployable_ProcessRefund::InDeployable' has a wrong offset!");

// Function Squad.SQAvailability_Deployable.ShouldRefund
// 0x0020 (0x0020 - 0x0000)
struct SQAvailability_Deployable_ShouldRefund final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQTeam*                                InTeam;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASQDeployable*                    InDeployable;                                      // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ECD[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAvailability_Deployable_ShouldRefund) == 0x000008, "Wrong alignment on SQAvailability_Deployable_ShouldRefund");
static_assert(sizeof(SQAvailability_Deployable_ShouldRefund) == 0x000020, "Wrong size on SQAvailability_Deployable_ShouldRefund");
static_assert(offsetof(SQAvailability_Deployable_ShouldRefund, InPlayer) == 0x000000, "Member 'SQAvailability_Deployable_ShouldRefund::InPlayer' has a wrong offset!");
static_assert(offsetof(SQAvailability_Deployable_ShouldRefund, InTeam) == 0x000008, "Member 'SQAvailability_Deployable_ShouldRefund::InTeam' has a wrong offset!");
static_assert(offsetof(SQAvailability_Deployable_ShouldRefund, InDeployable) == 0x000010, "Member 'SQAvailability_Deployable_ShouldRefund::InDeployable' has a wrong offset!");
static_assert(offsetof(SQAvailability_Deployable_ShouldRefund, ReturnValue) == 0x000018, "Member 'SQAvailability_Deployable_ShouldRefund::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailability_Role.CanRearm
// 0x0038 (0x0038 - 0x0000)
struct SQAvailability_Role_CanRearm final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ISQRearmSource>        InRearmSource;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         OutCost;                                           // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ECE[0x4];                                      // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    OutRestrictionReason;                              // 0x0020(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ECF[0x7];                                      // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAvailability_Role_CanRearm) == 0x000008, "Wrong alignment on SQAvailability_Role_CanRearm");
static_assert(sizeof(SQAvailability_Role_CanRearm) == 0x000038, "Wrong size on SQAvailability_Role_CanRearm");
static_assert(offsetof(SQAvailability_Role_CanRearm, InPlayer) == 0x000000, "Member 'SQAvailability_Role_CanRearm::InPlayer' has a wrong offset!");
static_assert(offsetof(SQAvailability_Role_CanRearm, InRearmSource) == 0x000008, "Member 'SQAvailability_Role_CanRearm::InRearmSource' has a wrong offset!");
static_assert(offsetof(SQAvailability_Role_CanRearm, OutCost) == 0x000018, "Member 'SQAvailability_Role_CanRearm::OutCost' has a wrong offset!");
static_assert(offsetof(SQAvailability_Role_CanRearm, OutRestrictionReason) == 0x000020, "Member 'SQAvailability_Role_CanRearm::OutRestrictionReason' has a wrong offset!");
static_assert(offsetof(SQAvailability_Role_CanRearm, ReturnValue) == 0x000030, "Member 'SQAvailability_Role_CanRearm::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailability_Role.GetAvailabilityForPlayerRearm
// 0x0078 (0x0078 - 0x0000)
struct SQAvailability_Role_GetAvailabilityForPlayerRearm final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ISQRearmSource>        InRearmSource;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState_Role              InOutRearmStatus;                                  // 0x0018(0x0058)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         OutCost;                                           // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ED0[0x4];                                      // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAvailability_Role_GetAvailabilityForPlayerRearm) == 0x000008, "Wrong alignment on SQAvailability_Role_GetAvailabilityForPlayerRearm");
static_assert(sizeof(SQAvailability_Role_GetAvailabilityForPlayerRearm) == 0x000078, "Wrong size on SQAvailability_Role_GetAvailabilityForPlayerRearm");
static_assert(offsetof(SQAvailability_Role_GetAvailabilityForPlayerRearm, InPlayer) == 0x000000, "Member 'SQAvailability_Role_GetAvailabilityForPlayerRearm::InPlayer' has a wrong offset!");
static_assert(offsetof(SQAvailability_Role_GetAvailabilityForPlayerRearm, InRearmSource) == 0x000008, "Member 'SQAvailability_Role_GetAvailabilityForPlayerRearm::InRearmSource' has a wrong offset!");
static_assert(offsetof(SQAvailability_Role_GetAvailabilityForPlayerRearm, InOutRearmStatus) == 0x000018, "Member 'SQAvailability_Role_GetAvailabilityForPlayerRearm::InOutRearmStatus' has a wrong offset!");
static_assert(offsetof(SQAvailability_Role_GetAvailabilityForPlayerRearm, OutCost) == 0x000070, "Member 'SQAvailability_Role_GetAvailabilityForPlayerRearm::OutCost' has a wrong offset!");

// Function Squad.SQAvailability_Role.GetInsufficientAmmoReamFailureReason
// 0x0010 (0x0010 - 0x0000)
struct SQAvailability_Role_GetInsufficientAmmoReamFailureReason final
{
public:
	struct FDataTableRowHandle                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAvailability_Role_GetInsufficientAmmoReamFailureReason) == 0x000008, "Wrong alignment on SQAvailability_Role_GetInsufficientAmmoReamFailureReason");
static_assert(sizeof(SQAvailability_Role_GetInsufficientAmmoReamFailureReason) == 0x000010, "Wrong size on SQAvailability_Role_GetInsufficientAmmoReamFailureReason");
static_assert(offsetof(SQAvailability_Role_GetInsufficientAmmoReamFailureReason, ReturnValue) == 0x000000, "Member 'SQAvailability_Role_GetInsufficientAmmoReamFailureReason::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailability_Role.GetRearmOperationCost
// 0x0020 (0x0020 - 0x0000)
struct SQAvailability_Role_GetRearmOperationCost final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ISQRearmSource>        InRearmSource;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ED1[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAvailability_Role_GetRearmOperationCost) == 0x000008, "Wrong alignment on SQAvailability_Role_GetRearmOperationCost");
static_assert(sizeof(SQAvailability_Role_GetRearmOperationCost) == 0x000020, "Wrong size on SQAvailability_Role_GetRearmOperationCost");
static_assert(offsetof(SQAvailability_Role_GetRearmOperationCost, InPlayer) == 0x000000, "Member 'SQAvailability_Role_GetRearmOperationCost::InPlayer' has a wrong offset!");
static_assert(offsetof(SQAvailability_Role_GetRearmOperationCost, InRearmSource) == 0x000008, "Member 'SQAvailability_Role_GetRearmOperationCost::InRearmSource' has a wrong offset!");
static_assert(offsetof(SQAvailability_Role_GetRearmOperationCost, ReturnValue) == 0x000018, "Member 'SQAvailability_Role_GetRearmOperationCost::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailability_Role.GetRearmRefundPercentage
// 0x0004 (0x0004 - 0x0000)
struct SQAvailability_Role_GetRearmRefundPercentage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAvailability_Role_GetRearmRefundPercentage) == 0x000004, "Wrong alignment on SQAvailability_Role_GetRearmRefundPercentage");
static_assert(sizeof(SQAvailability_Role_GetRearmRefundPercentage) == 0x000004, "Wrong size on SQAvailability_Role_GetRearmRefundPercentage");
static_assert(offsetof(SQAvailability_Role_GetRearmRefundPercentage, ReturnValue) == 0x000000, "Member 'SQAvailability_Role_GetRearmRefundPercentage::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailability_Role.HasSameCountLimit
// 0x0010 (0x0010 - 0x0000)
struct SQAvailability_Role_HasSameCountLimit final
{
public:
	const class USQAvailability_Role*             Other;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ED2[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQAvailability_Role_HasSameCountLimit) == 0x000008, "Wrong alignment on SQAvailability_Role_HasSameCountLimit");
static_assert(sizeof(SQAvailability_Role_HasSameCountLimit) == 0x000010, "Wrong size on SQAvailability_Role_HasSameCountLimit");
static_assert(offsetof(SQAvailability_Role_HasSameCountLimit, Other) == 0x000000, "Member 'SQAvailability_Role_HasSameCountLimit::Other' has a wrong offset!");
static_assert(offsetof(SQAvailability_Role_HasSameCountLimit, ReturnValue) == 0x000008, "Member 'SQAvailability_Role_HasSameCountLimit::ReturnValue' has a wrong offset!");

// Function Squad.SQAvailability_Role.ProcessRearmCost
// 0x0018 (0x0018 - 0x0000)
struct SQAvailability_Role_ProcessRearmCost final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ISQRearmSource>        InRearmSource;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQAvailability_Role_ProcessRearmCost) == 0x000008, "Wrong alignment on SQAvailability_Role_ProcessRearmCost");
static_assert(sizeof(SQAvailability_Role_ProcessRearmCost) == 0x000018, "Wrong size on SQAvailability_Role_ProcessRearmCost");
static_assert(offsetof(SQAvailability_Role_ProcessRearmCost, InPlayer) == 0x000000, "Member 'SQAvailability_Role_ProcessRearmCost::InPlayer' has a wrong offset!");
static_assert(offsetof(SQAvailability_Role_ProcessRearmCost, InRearmSource) == 0x000008, "Member 'SQAvailability_Role_ProcessRearmCost::InRearmSource' has a wrong offset!");

// Function Squad.SQBaseGameSubsystem.TickSubsystem
// 0x0004 (0x0004 - 0x0000)
struct SQBaseGameSubsystem_TickSubsystem final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBaseGameSubsystem_TickSubsystem) == 0x000004, "Wrong alignment on SQBaseGameSubsystem_TickSubsystem");
static_assert(sizeof(SQBaseGameSubsystem_TickSubsystem) == 0x000004, "Wrong size on SQBaseGameSubsystem_TickSubsystem");
static_assert(offsetof(SQBaseGameSubsystem_TickSubsystem, DeltaTime) == 0x000000, "Member 'SQBaseGameSubsystem_TickSubsystem::DeltaTime' has a wrong offset!");

// Function Squad.SQBlastComponent.ServerFireBlast
// 0x0018 (0x0018 - 0x0000)
struct SQBlastComponent_ServerFireBlast final
{
public:
	struct FVector                                BlastLocationZeroBased;                            // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BlastAimVector;                                    // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBlastComponent_ServerFireBlast) == 0x000004, "Wrong alignment on SQBlastComponent_ServerFireBlast");
static_assert(sizeof(SQBlastComponent_ServerFireBlast) == 0x000018, "Wrong size on SQBlastComponent_ServerFireBlast");
static_assert(offsetof(SQBlastComponent_ServerFireBlast, BlastLocationZeroBased) == 0x000000, "Member 'SQBlastComponent_ServerFireBlast::BlastLocationZeroBased' has a wrong offset!");
static_assert(offsetof(SQBlastComponent_ServerFireBlast, BlastAimVector) == 0x00000C, "Member 'SQBlastComponent_ServerFireBlast::BlastAimVector' has a wrong offset!");

// Function Squad.SQEquipableItem.BlueprintDrawHUD
// 0x0008 (0x0008 - 0x0000)
struct SQEquipableItem_BlueprintDrawHUD final
{
public:
	class UCanvas*                                Canvas;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_BlueprintDrawHUD) == 0x000008, "Wrong alignment on SQEquipableItem_BlueprintDrawHUD");
static_assert(sizeof(SQEquipableItem_BlueprintDrawHUD) == 0x000008, "Wrong size on SQEquipableItem_BlueprintDrawHUD");
static_assert(offsetof(SQEquipableItem_BlueprintDrawHUD, Canvas) == 0x000000, "Member 'SQEquipableItem_BlueprintDrawHUD::Canvas' has a wrong offset!");

// Function Squad.SQEquipableItem.BlueprintUpdateFirstPersonVisibility
// 0x0001 (0x0001 - 0x0000)
struct SQEquipableItem_BlueprintUpdateFirstPersonVisibility final
{
public:
	bool                                          bIsFirstPersonVisible;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_BlueprintUpdateFirstPersonVisibility) == 0x000001, "Wrong alignment on SQEquipableItem_BlueprintUpdateFirstPersonVisibility");
static_assert(sizeof(SQEquipableItem_BlueprintUpdateFirstPersonVisibility) == 0x000001, "Wrong size on SQEquipableItem_BlueprintUpdateFirstPersonVisibility");
static_assert(offsetof(SQEquipableItem_BlueprintUpdateFirstPersonVisibility, bIsFirstPersonVisible) == 0x000000, "Member 'SQEquipableItem_BlueprintUpdateFirstPersonVisibility::bIsFirstPersonVisible' has a wrong offset!");

// Function Squad.SQEquipableItem.GetFireDirection
// 0x000C (0x000C - 0x0000)
struct SQEquipableItem_GetFireDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_GetFireDirection) == 0x000004, "Wrong alignment on SQEquipableItem_GetFireDirection");
static_assert(sizeof(SQEquipableItem_GetFireDirection) == 0x00000C, "Wrong size on SQEquipableItem_GetFireDirection");
static_assert(offsetof(SQEquipableItem_GetFireDirection, ReturnValue) == 0x000000, "Member 'SQEquipableItem_GetFireDirection::ReturnValue' has a wrong offset!");

// Function Squad.SQEquipableItem.GetMesh
// 0x0010 (0x0010 - 0x0000)
struct SQEquipableItem_GetMesh final
{
public:
	bool                                          bGetMesh1P;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EE0[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_GetMesh) == 0x000008, "Wrong alignment on SQEquipableItem_GetMesh");
static_assert(sizeof(SQEquipableItem_GetMesh) == 0x000010, "Wrong size on SQEquipableItem_GetMesh");
static_assert(offsetof(SQEquipableItem_GetMesh, bGetMesh1P) == 0x000000, "Member 'SQEquipableItem_GetMesh::bGetMesh1P' has a wrong offset!");
static_assert(offsetof(SQEquipableItem_GetMesh, ReturnValue) == 0x000008, "Member 'SQEquipableItem_GetMesh::ReturnValue' has a wrong offset!");

// Function Squad.SQEquipableItem.HasAmmo
// 0x0001 (0x0001 - 0x0000)
struct SQEquipableItem_HasAmmo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_HasAmmo) == 0x000001, "Wrong alignment on SQEquipableItem_HasAmmo");
static_assert(sizeof(SQEquipableItem_HasAmmo) == 0x000001, "Wrong size on SQEquipableItem_HasAmmo");
static_assert(offsetof(SQEquipableItem_HasAmmo, ReturnValue) == 0x000000, "Member 'SQEquipableItem_HasAmmo::ReturnValue' has a wrong offset!");

// Function Squad.SQEquipableItem.InitializeAmmoValues
// 0x0048 (0x0048 - 0x0000)
struct SQEquipableItem_InitializeAmmoValues final
{
public:
	struct FSQInventoryData                       ItemClass;                                         // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bSpawnMaxAmmo;                                     // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EE1[0x3];                                      // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQPersistedAmmoCount                  PersistedAmmo;                                     // 0x003C(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_EE2[0x4];                                      // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEquipableItem_InitializeAmmoValues) == 0x000008, "Wrong alignment on SQEquipableItem_InitializeAmmoValues");
static_assert(sizeof(SQEquipableItem_InitializeAmmoValues) == 0x000048, "Wrong size on SQEquipableItem_InitializeAmmoValues");
static_assert(offsetof(SQEquipableItem_InitializeAmmoValues, ItemClass) == 0x000000, "Member 'SQEquipableItem_InitializeAmmoValues::ItemClass' has a wrong offset!");
static_assert(offsetof(SQEquipableItem_InitializeAmmoValues, bSpawnMaxAmmo) == 0x000038, "Member 'SQEquipableItem_InitializeAmmoValues::bSpawnMaxAmmo' has a wrong offset!");
static_assert(offsetof(SQEquipableItem_InitializeAmmoValues, PersistedAmmo) == 0x00003C, "Member 'SQEquipableItem_InitializeAmmoValues::PersistedAmmo' has a wrong offset!");

// Function Squad.SQEquipableItem.PlaySoundAttachedToWeapon
// 0x0028 (0x0028 - 0x0000)
struct SQEquipableItem_PlaySoundAttachedToWeapon final
{
public:
	class USoundCue*                              Sound1p;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              Sound3p;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FallbackOrigin;                                    // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EE3[0x4];                                      // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEquipableItem_PlaySoundAttachedToWeapon) == 0x000008, "Wrong alignment on SQEquipableItem_PlaySoundAttachedToWeapon");
static_assert(sizeof(SQEquipableItem_PlaySoundAttachedToWeapon) == 0x000028, "Wrong size on SQEquipableItem_PlaySoundAttachedToWeapon");
static_assert(offsetof(SQEquipableItem_PlaySoundAttachedToWeapon, Sound1p) == 0x000000, "Member 'SQEquipableItem_PlaySoundAttachedToWeapon::Sound1p' has a wrong offset!");
static_assert(offsetof(SQEquipableItem_PlaySoundAttachedToWeapon, Sound3p) == 0x000008, "Member 'SQEquipableItem_PlaySoundAttachedToWeapon::Sound3p' has a wrong offset!");
static_assert(offsetof(SQEquipableItem_PlaySoundAttachedToWeapon, SocketName) == 0x000010, "Member 'SQEquipableItem_PlaySoundAttachedToWeapon::SocketName' has a wrong offset!");
static_assert(offsetof(SQEquipableItem_PlaySoundAttachedToWeapon, FallbackOrigin) == 0x000018, "Member 'SQEquipableItem_PlaySoundAttachedToWeapon::FallbackOrigin' has a wrong offset!");

// Function Squad.SQEquipableItem.Rearm
// 0x0008 (0x0008 - 0x0000)
struct SQEquipableItem_Rearm final
{
public:
	int32                                         Quantity;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_Rearm) == 0x000004, "Wrong alignment on SQEquipableItem_Rearm");
static_assert(sizeof(SQEquipableItem_Rearm) == 0x000008, "Wrong size on SQEquipableItem_Rearm");
static_assert(offsetof(SQEquipableItem_Rearm, Quantity) == 0x000000, "Member 'SQEquipableItem_Rearm::Quantity' has a wrong offset!");
static_assert(offsetof(SQEquipableItem_Rearm, ReturnValue) == 0x000004, "Member 'SQEquipableItem_Rearm::ReturnValue' has a wrong offset!");

// Function Squad.SQEquipableItem.SetLoweringAnimation
// 0x0001 (0x0001 - 0x0000)
struct SQEquipableItem_SetLoweringAnimation final
{
public:
	bool                                          bLowered;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_SetLoweringAnimation) == 0x000001, "Wrong alignment on SQEquipableItem_SetLoweringAnimation");
static_assert(sizeof(SQEquipableItem_SetLoweringAnimation) == 0x000001, "Wrong size on SQEquipableItem_SetLoweringAnimation");
static_assert(offsetof(SQEquipableItem_SetLoweringAnimation, bLowered) == 0x000000, "Member 'SQEquipableItem_SetLoweringAnimation::bLowered' has a wrong offset!");

// Function Squad.SQEquipableItem.SetRaisingAnimation
// 0x0001 (0x0001 - 0x0000)
struct SQEquipableItem_SetRaisingAnimation final
{
public:
	bool                                          bRaised;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_SetRaisingAnimation) == 0x000001, "Wrong alignment on SQEquipableItem_SetRaisingAnimation");
static_assert(sizeof(SQEquipableItem_SetRaisingAnimation) == 0x000001, "Wrong size on SQEquipableItem_SetRaisingAnimation");
static_assert(offsetof(SQEquipableItem_SetRaisingAnimation, bRaised) == 0x000000, "Member 'SQEquipableItem_SetRaisingAnimation::bRaised' has a wrong offset!");

// Function Squad.SQEquipableItem.StopAllMontages3P
// 0x0004 (0x0004 - 0x0000)
struct SQEquipableItem_StopAllMontages3P final
{
public:
	float                                         blendOutTime;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_StopAllMontages3P) == 0x000004, "Wrong alignment on SQEquipableItem_StopAllMontages3P");
static_assert(sizeof(SQEquipableItem_StopAllMontages3P) == 0x000004, "Wrong size on SQEquipableItem_StopAllMontages3P");
static_assert(offsetof(SQEquipableItem_StopAllMontages3P, blendOutTime) == 0x000000, "Member 'SQEquipableItem_StopAllMontages3P::blendOutTime' has a wrong offset!");

// Function Squad.SQEquipableItem.UpdateItemVisibility
// 0x0001 (0x0001 - 0x0000)
struct SQEquipableItem_UpdateItemVisibility final
{
public:
	bool                                          NewVisibility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_UpdateItemVisibility) == 0x000001, "Wrong alignment on SQEquipableItem_UpdateItemVisibility");
static_assert(sizeof(SQEquipableItem_UpdateItemVisibility) == 0x000001, "Wrong size on SQEquipableItem_UpdateItemVisibility");
static_assert(offsetof(SQEquipableItem_UpdateItemVisibility, NewVisibility) == 0x000000, "Member 'SQEquipableItem_UpdateItemVisibility::NewVisibility' has a wrong offset!");

// Function Squad.SQEquipableItem.UpdateMoveInputs
// 0x0001 (0x0001 - 0x0000)
struct SQEquipableItem_UpdateMoveInputs final
{
public:
	bool                                          bForceStopLoop;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_UpdateMoveInputs) == 0x000001, "Wrong alignment on SQEquipableItem_UpdateMoveInputs");
static_assert(sizeof(SQEquipableItem_UpdateMoveInputs) == 0x000001, "Wrong size on SQEquipableItem_UpdateMoveInputs");
static_assert(offsetof(SQEquipableItem_UpdateMoveInputs, bForceStopLoop) == 0x000000, "Member 'SQEquipableItem_UpdateMoveInputs::bForceStopLoop' has a wrong offset!");

// Function Squad.SQEquipableItem.UpdateSprintBobbing
// 0x0001 (0x0001 - 0x0000)
struct SQEquipableItem_UpdateSprintBobbing final
{
public:
	bool                                          bForceStopLoop;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_UpdateSprintBobbing) == 0x000001, "Wrong alignment on SQEquipableItem_UpdateSprintBobbing");
static_assert(sizeof(SQEquipableItem_UpdateSprintBobbing) == 0x000001, "Wrong size on SQEquipableItem_UpdateSprintBobbing");
static_assert(offsetof(SQEquipableItem_UpdateSprintBobbing, bForceStopLoop) == 0x000000, "Member 'SQEquipableItem_UpdateSprintBobbing::bForceStopLoop' has a wrong offset!");

// Function Squad.SQEquipableItem.CalculateMaxAmmoCost
// 0x0008 (0x0008 - 0x0000)
struct SQEquipableItem_CalculateMaxAmmoCost final
{
public:
	int32                                         MaxCount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_CalculateMaxAmmoCost) == 0x000004, "Wrong alignment on SQEquipableItem_CalculateMaxAmmoCost");
static_assert(sizeof(SQEquipableItem_CalculateMaxAmmoCost) == 0x000008, "Wrong size on SQEquipableItem_CalculateMaxAmmoCost");
static_assert(offsetof(SQEquipableItem_CalculateMaxAmmoCost, MaxCount) == 0x000000, "Member 'SQEquipableItem_CalculateMaxAmmoCost::MaxCount' has a wrong offset!");
static_assert(offsetof(SQEquipableItem_CalculateMaxAmmoCost, ReturnValue) == 0x000004, "Member 'SQEquipableItem_CalculateMaxAmmoCost::ReturnValue' has a wrong offset!");

// Function Squad.SQEquipableItem.CalculateMissingAmmoCost
// 0x0004 (0x0004 - 0x0000)
struct SQEquipableItem_CalculateMissingAmmoCost final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_CalculateMissingAmmoCost) == 0x000004, "Wrong alignment on SQEquipableItem_CalculateMissingAmmoCost");
static_assert(sizeof(SQEquipableItem_CalculateMissingAmmoCost) == 0x000004, "Wrong size on SQEquipableItem_CalculateMissingAmmoCost");
static_assert(offsetof(SQEquipableItem_CalculateMissingAmmoCost, ReturnValue) == 0x000000, "Member 'SQEquipableItem_CalculateMissingAmmoCost::ReturnValue' has a wrong offset!");

// Function Squad.SQEquipableItem.CalculateMissingRearmItems
// 0x0004 (0x0004 - 0x0000)
struct SQEquipableItem_CalculateMissingRearmItems final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_CalculateMissingRearmItems) == 0x000004, "Wrong alignment on SQEquipableItem_CalculateMissingRearmItems");
static_assert(sizeof(SQEquipableItem_CalculateMissingRearmItems) == 0x000004, "Wrong size on SQEquipableItem_CalculateMissingRearmItems");
static_assert(offsetof(SQEquipableItem_CalculateMissingRearmItems, ReturnValue) == 0x000000, "Member 'SQEquipableItem_CalculateMissingRearmItems::ReturnValue' has a wrong offset!");

// Function Squad.SQEquipableItem.CalculateRearmAmmoCost
// 0x0008 (0x0008 - 0x0000)
struct SQEquipableItem_CalculateRearmAmmoCost final
{
public:
	int32                                         QuantityToRearm;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_CalculateRearmAmmoCost) == 0x000004, "Wrong alignment on SQEquipableItem_CalculateRearmAmmoCost");
static_assert(sizeof(SQEquipableItem_CalculateRearmAmmoCost) == 0x000008, "Wrong size on SQEquipableItem_CalculateRearmAmmoCost");
static_assert(offsetof(SQEquipableItem_CalculateRearmAmmoCost, QuantityToRearm) == 0x000000, "Member 'SQEquipableItem_CalculateRearmAmmoCost::QuantityToRearm' has a wrong offset!");
static_assert(offsetof(SQEquipableItem_CalculateRearmAmmoCost, ReturnValue) == 0x000004, "Member 'SQEquipableItem_CalculateRearmAmmoCost::ReturnValue' has a wrong offset!");

// Function Squad.SQEquipableItem.CanAltUse
// 0x0001 (0x0001 - 0x0000)
struct SQEquipableItem_CanAltUse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_CanAltUse) == 0x000001, "Wrong alignment on SQEquipableItem_CanAltUse");
static_assert(sizeof(SQEquipableItem_CanAltUse) == 0x000001, "Wrong size on SQEquipableItem_CanAltUse");
static_assert(offsetof(SQEquipableItem_CanAltUse, ReturnValue) == 0x000000, "Member 'SQEquipableItem_CanAltUse::ReturnValue' has a wrong offset!");

// Function Squad.SQEquipableItem.CanRearm
// 0x0001 (0x0001 - 0x0000)
struct SQEquipableItem_CanRearm final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_CanRearm) == 0x000001, "Wrong alignment on SQEquipableItem_CanRearm");
static_assert(sizeof(SQEquipableItem_CanRearm) == 0x000001, "Wrong size on SQEquipableItem_CanRearm");
static_assert(offsetof(SQEquipableItem_CanRearm, ReturnValue) == 0x000000, "Member 'SQEquipableItem_CanRearm::ReturnValue' has a wrong offset!");

// Function Squad.SQEquipableItem.CanRearmFromType
// 0x0002 (0x0002 - 0x0000)
struct SQEquipableItem_CanRearmFromType final
{
public:
	ESQRearmType                                  RearmType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_CanRearmFromType) == 0x000001, "Wrong alignment on SQEquipableItem_CanRearmFromType");
static_assert(sizeof(SQEquipableItem_CanRearmFromType) == 0x000002, "Wrong size on SQEquipableItem_CanRearmFromType");
static_assert(offsetof(SQEquipableItem_CanRearmFromType, RearmType) == 0x000000, "Member 'SQEquipableItem_CanRearmFromType::RearmType' has a wrong offset!");
static_assert(offsetof(SQEquipableItem_CanRearmFromType, ReturnValue) == 0x000001, "Member 'SQEquipableItem_CanRearmFromType::ReturnValue' has a wrong offset!");

// Function Squad.SQEquipableItem.CanShovel
// 0x0028 (0x0028 - 0x0000)
struct SQEquipableItem_CanShovel final
{
public:
	int32                                         ShovelTraceLength;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShovelTraceSphereRadius;                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bRemovingHealth;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EE4[0x7];                                      // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQDeployable*                          ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_CanShovel) == 0x000008, "Wrong alignment on SQEquipableItem_CanShovel");
static_assert(sizeof(SQEquipableItem_CanShovel) == 0x000028, "Wrong size on SQEquipableItem_CanShovel");
static_assert(offsetof(SQEquipableItem_CanShovel, ShovelTraceLength) == 0x000000, "Member 'SQEquipableItem_CanShovel::ShovelTraceLength' has a wrong offset!");
static_assert(offsetof(SQEquipableItem_CanShovel, ShovelTraceSphereRadius) == 0x000004, "Member 'SQEquipableItem_CanShovel::ShovelTraceSphereRadius' has a wrong offset!");
static_assert(offsetof(SQEquipableItem_CanShovel, ObjectTypes) == 0x000008, "Member 'SQEquipableItem_CanShovel::ObjectTypes' has a wrong offset!");
static_assert(offsetof(SQEquipableItem_CanShovel, bRemovingHealth) == 0x000018, "Member 'SQEquipableItem_CanShovel::bRemovingHealth' has a wrong offset!");
static_assert(offsetof(SQEquipableItem_CanShovel, ReturnValue) == 0x000020, "Member 'SQEquipableItem_CanShovel::ReturnValue' has a wrong offset!");

// Function Squad.SQEquipableItem.CanUse
// 0x0001 (0x0001 - 0x0000)
struct SQEquipableItem_CanUse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_CanUse) == 0x000001, "Wrong alignment on SQEquipableItem_CanUse");
static_assert(sizeof(SQEquipableItem_CanUse) == 0x000001, "Wrong size on SQEquipableItem_CanUse");
static_assert(offsetof(SQEquipableItem_CanUse, ReturnValue) == 0x000000, "Member 'SQEquipableItem_CanUse::ReturnValue' has a wrong offset!");

// Function Squad.SQEquipableItem.CreatePersistingAmmoCount
// 0x0008 (0x0008 - 0x0000)
struct SQEquipableItem_CreatePersistingAmmoCount final
{
public:
	struct FSQPersistedAmmoCount                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_CreatePersistingAmmoCount) == 0x000004, "Wrong alignment on SQEquipableItem_CreatePersistingAmmoCount");
static_assert(sizeof(SQEquipableItem_CreatePersistingAmmoCount) == 0x000008, "Wrong size on SQEquipableItem_CreatePersistingAmmoCount");
static_assert(offsetof(SQEquipableItem_CreatePersistingAmmoCount, ReturnValue) == 0x000000, "Member 'SQEquipableItem_CreatePersistingAmmoCount::ReturnValue' has a wrong offset!");

// Function Squad.SQEquipableItem.GetController
// 0x0008 (0x0008 - 0x0000)
struct SQEquipableItem_GetController final
{
public:
	class AController*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_GetController) == 0x000008, "Wrong alignment on SQEquipableItem_GetController");
static_assert(sizeof(SQEquipableItem_GetController) == 0x000008, "Wrong size on SQEquipableItem_GetController");
static_assert(offsetof(SQEquipableItem_GetController, ReturnValue) == 0x000000, "Member 'SQEquipableItem_GetController::ReturnValue' has a wrong offset!");

// Function Squad.SQEquipableItem.GetItemStaticInfo
// 0x0008 (0x0008 - 0x0000)
struct SQEquipableItem_GetItemStaticInfo final
{
public:
	class USQItemStaticInfo*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_GetItemStaticInfo) == 0x000008, "Wrong alignment on SQEquipableItem_GetItemStaticInfo");
static_assert(sizeof(SQEquipableItem_GetItemStaticInfo) == 0x000008, "Wrong size on SQEquipableItem_GetItemStaticInfo");
static_assert(offsetof(SQEquipableItem_GetItemStaticInfo, ReturnValue) == 0x000000, "Member 'SQEquipableItem_GetItemStaticInfo::ReturnValue' has a wrong offset!");

// Function Squad.SQEquipableItem.GetOwnerPawn
// 0x0008 (0x0008 - 0x0000)
struct SQEquipableItem_GetOwnerPawn final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_GetOwnerPawn) == 0x000008, "Wrong alignment on SQEquipableItem_GetOwnerPawn");
static_assert(sizeof(SQEquipableItem_GetOwnerPawn) == 0x000008, "Wrong size on SQEquipableItem_GetOwnerPawn");
static_assert(offsetof(SQEquipableItem_GetOwnerPawn, ReturnValue) == 0x000000, "Member 'SQEquipableItem_GetOwnerPawn::ReturnValue' has a wrong offset!");

// Function Squad.SQEquipableItem.GetRearmItemCount
// 0x0004 (0x0004 - 0x0000)
struct SQEquipableItem_GetRearmItemCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_GetRearmItemCount) == 0x000004, "Wrong alignment on SQEquipableItem_GetRearmItemCount");
static_assert(sizeof(SQEquipableItem_GetRearmItemCount) == 0x000004, "Wrong size on SQEquipableItem_GetRearmItemCount");
static_assert(offsetof(SQEquipableItem_GetRearmItemCount, ReturnValue) == 0x000000, "Member 'SQEquipableItem_GetRearmItemCount::ReturnValue' has a wrong offset!");

// Function Squad.SQEquipableItem.GetRearmMaxItemCount
// 0x0004 (0x0004 - 0x0000)
struct SQEquipableItem_GetRearmMaxItemCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_GetRearmMaxItemCount) == 0x000004, "Wrong alignment on SQEquipableItem_GetRearmMaxItemCount");
static_assert(sizeof(SQEquipableItem_GetRearmMaxItemCount) == 0x000004, "Wrong size on SQEquipableItem_GetRearmMaxItemCount");
static_assert(offsetof(SQEquipableItem_GetRearmMaxItemCount, ReturnValue) == 0x000000, "Member 'SQEquipableItem_GetRearmMaxItemCount::ReturnValue' has a wrong offset!");

// Function Squad.SQEquipableItem.IsAmmoFull
// 0x0001 (0x0001 - 0x0000)
struct SQEquipableItem_IsAmmoFull final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_IsAmmoFull) == 0x000001, "Wrong alignment on SQEquipableItem_IsAmmoFull");
static_assert(sizeof(SQEquipableItem_IsAmmoFull) == 0x000001, "Wrong size on SQEquipableItem_IsAmmoFull");
static_assert(offsetof(SQEquipableItem_IsAmmoFull, ReturnValue) == 0x000000, "Member 'SQEquipableItem_IsAmmoFull::ReturnValue' has a wrong offset!");

// Function Squad.SQEquipableItem.IsBeingUsed
// 0x0001 (0x0001 - 0x0000)
struct SQEquipableItem_IsBeingUsed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_IsBeingUsed) == 0x000001, "Wrong alignment on SQEquipableItem_IsBeingUsed");
static_assert(sizeof(SQEquipableItem_IsBeingUsed) == 0x000001, "Wrong size on SQEquipableItem_IsBeingUsed");
static_assert(offsetof(SQEquipableItem_IsBeingUsed, ReturnValue) == 0x000000, "Member 'SQEquipableItem_IsBeingUsed::ReturnValue' has a wrong offset!");

// Function Squad.SQEquipableItem.IsEquipped
// 0x0001 (0x0001 - 0x0000)
struct SQEquipableItem_IsEquipped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_IsEquipped) == 0x000001, "Wrong alignment on SQEquipableItem_IsEquipped");
static_assert(sizeof(SQEquipableItem_IsEquipped) == 0x000001, "Wrong size on SQEquipableItem_IsEquipped");
static_assert(offsetof(SQEquipableItem_IsEquipped, ReturnValue) == 0x000000, "Member 'SQEquipableItem_IsEquipped::ReturnValue' has a wrong offset!");

// Function Squad.SQEquipableItem.IsFirstPersonViewTarget
// 0x0001 (0x0001 - 0x0000)
struct SQEquipableItem_IsFirstPersonViewTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_IsFirstPersonViewTarget) == 0x000001, "Wrong alignment on SQEquipableItem_IsFirstPersonViewTarget");
static_assert(sizeof(SQEquipableItem_IsFirstPersonViewTarget) == 0x000001, "Wrong size on SQEquipableItem_IsFirstPersonViewTarget");
static_assert(offsetof(SQEquipableItem_IsFirstPersonViewTarget, ReturnValue) == 0x000000, "Member 'SQEquipableItem_IsFirstPersonViewTarget::ReturnValue' has a wrong offset!");

// Function Squad.SQEquipableItem.ShovelHitDeployable
// 0x0098 (0x0098 - 0x0000)
struct SQEquipableItem_ShovelHitDeployable final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bRemovingHealth;                                   // 0x0088(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EE5[0x7];                                      // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQDeployable*                          ReturnValue;                                       // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEquipableItem_ShovelHitDeployable) == 0x000008, "Wrong alignment on SQEquipableItem_ShovelHitDeployable");
static_assert(sizeof(SQEquipableItem_ShovelHitDeployable) == 0x000098, "Wrong size on SQEquipableItem_ShovelHitDeployable");
static_assert(offsetof(SQEquipableItem_ShovelHitDeployable, HitResult) == 0x000000, "Member 'SQEquipableItem_ShovelHitDeployable::HitResult' has a wrong offset!");
static_assert(offsetof(SQEquipableItem_ShovelHitDeployable, bRemovingHealth) == 0x000088, "Member 'SQEquipableItem_ShovelHitDeployable::bRemovingHealth' has a wrong offset!");
static_assert(offsetof(SQEquipableItem_ShovelHitDeployable, ReturnValue) == 0x000090, "Member 'SQEquipableItem_ShovelHitDeployable::ReturnValue' has a wrong offset!");

// Function Squad.SQRepairEquipable.OnRep_RepairedTarget
// 0x0008 (0x0008 - 0x0000)
struct SQRepairEquipable_OnRep_RepairedTarget final
{
public:
	class ASQVehicle*                             PreviousRepairedTarget;                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRepairEquipable_OnRep_RepairedTarget) == 0x000008, "Wrong alignment on SQRepairEquipable_OnRep_RepairedTarget");
static_assert(sizeof(SQRepairEquipable_OnRep_RepairedTarget) == 0x000008, "Wrong size on SQRepairEquipable_OnRep_RepairedTarget");
static_assert(offsetof(SQRepairEquipable_OnRep_RepairedTarget, PreviousRepairedTarget) == 0x000000, "Member 'SQRepairEquipable_OnRep_RepairedTarget::PreviousRepairedTarget' has a wrong offset!");

// Function Squad.SQSoldier.AttemptRadialSuppression
// 0x0028 (0x0028 - 0x0000)
struct SQSoldier_AttemptRadialSuppression final
{
public:
	struct FVector                                SuppressionOrigin;                                 // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F21[0x4];                                      // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           SuppressionInstigator;                             // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQRadialSuppressionInfo>   SuppressionInfoClass;                              // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F22[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSoldier_AttemptRadialSuppression) == 0x000008, "Wrong alignment on SQSoldier_AttemptRadialSuppression");
static_assert(sizeof(SQSoldier_AttemptRadialSuppression) == 0x000028, "Wrong size on SQSoldier_AttemptRadialSuppression");
static_assert(offsetof(SQSoldier_AttemptRadialSuppression, SuppressionOrigin) == 0x000000, "Member 'SQSoldier_AttemptRadialSuppression::SuppressionOrigin' has a wrong offset!");
static_assert(offsetof(SQSoldier_AttemptRadialSuppression, SuppressionInstigator) == 0x000010, "Member 'SQSoldier_AttemptRadialSuppression::SuppressionInstigator' has a wrong offset!");
static_assert(offsetof(SQSoldier_AttemptRadialSuppression, SuppressionInfoClass) == 0x000018, "Member 'SQSoldier_AttemptRadialSuppression::SuppressionInfoClass' has a wrong offset!");
static_assert(offsetof(SQSoldier_AttemptRadialSuppression, ReturnValue) == 0x000020, "Member 'SQSoldier_AttemptRadialSuppression::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.AttemptSuppression
// 0x0038 (0x0038 - 0x0000)
struct SQSoldier_AttemptSuppression final
{
public:
	struct FVector                                SuppressionStart;                                  // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SuppressionEnd;                                    // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           ProjectileInstigator;                              // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQSuppressionInfo>         SuppressionInfoClass;                              // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutClosestPoint;                                   // 0x0028(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutApplySuppression;                              // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0035(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F23[0x2];                                      // 0x0036(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSoldier_AttemptSuppression) == 0x000008, "Wrong alignment on SQSoldier_AttemptSuppression");
static_assert(sizeof(SQSoldier_AttemptSuppression) == 0x000038, "Wrong size on SQSoldier_AttemptSuppression");
static_assert(offsetof(SQSoldier_AttemptSuppression, SuppressionStart) == 0x000000, "Member 'SQSoldier_AttemptSuppression::SuppressionStart' has a wrong offset!");
static_assert(offsetof(SQSoldier_AttemptSuppression, SuppressionEnd) == 0x00000C, "Member 'SQSoldier_AttemptSuppression::SuppressionEnd' has a wrong offset!");
static_assert(offsetof(SQSoldier_AttemptSuppression, ProjectileInstigator) == 0x000018, "Member 'SQSoldier_AttemptSuppression::ProjectileInstigator' has a wrong offset!");
static_assert(offsetof(SQSoldier_AttemptSuppression, SuppressionInfoClass) == 0x000020, "Member 'SQSoldier_AttemptSuppression::SuppressionInfoClass' has a wrong offset!");
static_assert(offsetof(SQSoldier_AttemptSuppression, OutClosestPoint) == 0x000028, "Member 'SQSoldier_AttemptSuppression::OutClosestPoint' has a wrong offset!");
static_assert(offsetof(SQSoldier_AttemptSuppression, bOutApplySuppression) == 0x000034, "Member 'SQSoldier_AttemptSuppression::bOutApplySuppression' has a wrong offset!");
static_assert(offsetof(SQSoldier_AttemptSuppression, ReturnValue) == 0x000035, "Member 'SQSoldier_AttemptSuppression::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.AttemptToRearmWeapons
// 0x0028 (0x0028 - 0x0000)
struct SQSoldier_AttemptToRearmWeapons final
{
public:
	TScriptInterface<class ISQRearmSource>        RearmSource;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FSQRearmWeaponRequest>          RearmRequest;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F24[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSoldier_AttemptToRearmWeapons) == 0x000008, "Wrong alignment on SQSoldier_AttemptToRearmWeapons");
static_assert(sizeof(SQSoldier_AttemptToRearmWeapons) == 0x000028, "Wrong size on SQSoldier_AttemptToRearmWeapons");
static_assert(offsetof(SQSoldier_AttemptToRearmWeapons, RearmSource) == 0x000000, "Member 'SQSoldier_AttemptToRearmWeapons::RearmSource' has a wrong offset!");
static_assert(offsetof(SQSoldier_AttemptToRearmWeapons, RearmRequest) == 0x000010, "Member 'SQSoldier_AttemptToRearmWeapons::RearmRequest' has a wrong offset!");
static_assert(offsetof(SQSoldier_AttemptToRearmWeapons, ReturnValue) == 0x000020, "Member 'SQSoldier_AttemptToRearmWeapons::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.BlueprintCalcCamera
// 0x003C (0x003C - 0x0000)
struct SQSoldier_BlueprintCalcCamera final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InFOV;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutLocation;                                       // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OutRotation;                                       // 0x002C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         OutFOV;                                            // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_BlueprintCalcCamera) == 0x000004, "Wrong alignment on SQSoldier_BlueprintCalcCamera");
static_assert(sizeof(SQSoldier_BlueprintCalcCamera) == 0x00003C, "Wrong size on SQSoldier_BlueprintCalcCamera");
static_assert(offsetof(SQSoldier_BlueprintCalcCamera, DeltaTime) == 0x000000, "Member 'SQSoldier_BlueprintCalcCamera::DeltaTime' has a wrong offset!");
static_assert(offsetof(SQSoldier_BlueprintCalcCamera, InLocation) == 0x000004, "Member 'SQSoldier_BlueprintCalcCamera::InLocation' has a wrong offset!");
static_assert(offsetof(SQSoldier_BlueprintCalcCamera, InRotation) == 0x000010, "Member 'SQSoldier_BlueprintCalcCamera::InRotation' has a wrong offset!");
static_assert(offsetof(SQSoldier_BlueprintCalcCamera, InFOV) == 0x00001C, "Member 'SQSoldier_BlueprintCalcCamera::InFOV' has a wrong offset!");
static_assert(offsetof(SQSoldier_BlueprintCalcCamera, OutLocation) == 0x000020, "Member 'SQSoldier_BlueprintCalcCamera::OutLocation' has a wrong offset!");
static_assert(offsetof(SQSoldier_BlueprintCalcCamera, OutRotation) == 0x00002C, "Member 'SQSoldier_BlueprintCalcCamera::OutRotation' has a wrong offset!");
static_assert(offsetof(SQSoldier_BlueprintCalcCamera, OutFOV) == 0x000038, "Member 'SQSoldier_BlueprintCalcCamera::OutFOV' has a wrong offset!");

// Function Squad.SQSoldier.BlueprintUpdateFirstPersonVisibility
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_BlueprintUpdateFirstPersonVisibility final
{
public:
	bool                                          bIsFirstPersonVisible;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_BlueprintUpdateFirstPersonVisibility) == 0x000001, "Wrong alignment on SQSoldier_BlueprintUpdateFirstPersonVisibility");
static_assert(sizeof(SQSoldier_BlueprintUpdateFirstPersonVisibility) == 0x000001, "Wrong size on SQSoldier_BlueprintUpdateFirstPersonVisibility");
static_assert(offsetof(SQSoldier_BlueprintUpdateFirstPersonVisibility, bIsFirstPersonVisible) == 0x000000, "Member 'SQSoldier_BlueprintUpdateFirstPersonVisibility::bIsFirstPersonVisible' has a wrong offset!");

// Function Squad.SQSoldier.BPBleedingDamageTaken
// 0x0004 (0x0004 - 0x0000)
struct SQSoldier_BPBleedingDamageTaken final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_BPBleedingDamageTaken) == 0x000004, "Wrong alignment on SQSoldier_BPBleedingDamageTaken");
static_assert(sizeof(SQSoldier_BPBleedingDamageTaken) == 0x000004, "Wrong size on SQSoldier_BPBleedingDamageTaken");
static_assert(offsetof(SQSoldier_BPBleedingDamageTaken, Damage) == 0x000000, "Member 'SQSoldier_BPBleedingDamageTaken::Damage' has a wrong offset!");

// Function Squad.SQSoldier.BPDie
// 0x0028 (0x0028 - 0x0000)
struct SQSoldier_BPDie final
{
public:
	float                                         KillingDamage;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F25[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           DamageEvent;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            Killer;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_BPDie) == 0x000008, "Wrong alignment on SQSoldier_BPDie");
static_assert(sizeof(SQSoldier_BPDie) == 0x000028, "Wrong size on SQSoldier_BPDie");
static_assert(offsetof(SQSoldier_BPDie, KillingDamage) == 0x000000, "Member 'SQSoldier_BPDie::KillingDamage' has a wrong offset!");
static_assert(offsetof(SQSoldier_BPDie, DamageEvent) == 0x000008, "Member 'SQSoldier_BPDie::DamageEvent' has a wrong offset!");
static_assert(offsetof(SQSoldier_BPDie, Killer) == 0x000018, "Member 'SQSoldier_BPDie::Killer' has a wrong offset!");
static_assert(offsetof(SQSoldier_BPDie, DamageCauser) == 0x000020, "Member 'SQSoldier_BPDie::DamageCauser' has a wrong offset!");

// Function Squad.SQSoldier.BPOnEndProne
// 0x0008 (0x0008 - 0x0000)
struct SQSoldier_BPOnEndProne final
{
public:
	float                                         HalfHeightAdjust;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaledHalfHeightAdjust;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_BPOnEndProne) == 0x000004, "Wrong alignment on SQSoldier_BPOnEndProne");
static_assert(sizeof(SQSoldier_BPOnEndProne) == 0x000008, "Wrong size on SQSoldier_BPOnEndProne");
static_assert(offsetof(SQSoldier_BPOnEndProne, HalfHeightAdjust) == 0x000000, "Member 'SQSoldier_BPOnEndProne::HalfHeightAdjust' has a wrong offset!");
static_assert(offsetof(SQSoldier_BPOnEndProne, ScaledHalfHeightAdjust) == 0x000004, "Member 'SQSoldier_BPOnEndProne::ScaledHalfHeightAdjust' has a wrong offset!");

// Function Squad.SQSoldier.BPOnSnapZoneOverlapBegin
// 0x00A0 (0x00A0 - 0x0000)
struct SQSoldier_BPOnSnapZoneOverlapBegin final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F26[0x3];                                      // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0018(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_BPOnSnapZoneOverlapBegin) == 0x000008, "Wrong alignment on SQSoldier_BPOnSnapZoneOverlapBegin");
static_assert(sizeof(SQSoldier_BPOnSnapZoneOverlapBegin) == 0x0000A0, "Wrong size on SQSoldier_BPOnSnapZoneOverlapBegin");
static_assert(offsetof(SQSoldier_BPOnSnapZoneOverlapBegin, OtherActor) == 0x000000, "Member 'SQSoldier_BPOnSnapZoneOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(SQSoldier_BPOnSnapZoneOverlapBegin, OtherComp) == 0x000008, "Member 'SQSoldier_BPOnSnapZoneOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(SQSoldier_BPOnSnapZoneOverlapBegin, OtherBodyIndex) == 0x000010, "Member 'SQSoldier_BPOnSnapZoneOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SQSoldier_BPOnSnapZoneOverlapBegin, bFromSweep) == 0x000014, "Member 'SQSoldier_BPOnSnapZoneOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(SQSoldier_BPOnSnapZoneOverlapBegin, SweepResult) == 0x000018, "Member 'SQSoldier_BPOnSnapZoneOverlapBegin::SweepResult' has a wrong offset!");

// Function Squad.SQSoldier.BPOnSnapZoneOverlapEnd
// 0x0018 (0x0018 - 0x0000)
struct SQSoldier_BPOnSnapZoneOverlapEnd final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F27[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSoldier_BPOnSnapZoneOverlapEnd) == 0x000008, "Wrong alignment on SQSoldier_BPOnSnapZoneOverlapEnd");
static_assert(sizeof(SQSoldier_BPOnSnapZoneOverlapEnd) == 0x000018, "Wrong size on SQSoldier_BPOnSnapZoneOverlapEnd");
static_assert(offsetof(SQSoldier_BPOnSnapZoneOverlapEnd, OtherActor) == 0x000000, "Member 'SQSoldier_BPOnSnapZoneOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(SQSoldier_BPOnSnapZoneOverlapEnd, OtherComp) == 0x000008, "Member 'SQSoldier_BPOnSnapZoneOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(SQSoldier_BPOnSnapZoneOverlapEnd, OtherBodyIndex) == 0x000010, "Member 'SQSoldier_BPOnSnapZoneOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function Squad.SQSoldier.BPOnStartProne
// 0x0008 (0x0008 - 0x0000)
struct SQSoldier_BPOnStartProne final
{
public:
	float                                         HalfHeightAdjust;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaledHalfHeightAdjust;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_BPOnStartProne) == 0x000004, "Wrong alignment on SQSoldier_BPOnStartProne");
static_assert(sizeof(SQSoldier_BPOnStartProne) == 0x000008, "Wrong size on SQSoldier_BPOnStartProne");
static_assert(offsetof(SQSoldier_BPOnStartProne, HalfHeightAdjust) == 0x000000, "Member 'SQSoldier_BPOnStartProne::HalfHeightAdjust' has a wrong offset!");
static_assert(offsetof(SQSoldier_BPOnStartProne, ScaledHalfHeightAdjust) == 0x000004, "Member 'SQSoldier_BPOnStartProne::ScaledHalfHeightAdjust' has a wrong offset!");

// Function Squad.SQSoldier.BPWound
// 0x0028 (0x0028 - 0x0000)
struct SQSoldier_BPWound final
{
public:
	float                                         KillingDamage;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F28[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           DamageEvent;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            Killer;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_BPWound) == 0x000008, "Wrong alignment on SQSoldier_BPWound");
static_assert(sizeof(SQSoldier_BPWound) == 0x000028, "Wrong size on SQSoldier_BPWound");
static_assert(offsetof(SQSoldier_BPWound, KillingDamage) == 0x000000, "Member 'SQSoldier_BPWound::KillingDamage' has a wrong offset!");
static_assert(offsetof(SQSoldier_BPWound, DamageEvent) == 0x000008, "Member 'SQSoldier_BPWound::DamageEvent' has a wrong offset!");
static_assert(offsetof(SQSoldier_BPWound, Killer) == 0x000018, "Member 'SQSoldier_BPWound::Killer' has a wrong offset!");
static_assert(offsetof(SQSoldier_BPWound, DamageCauser) == 0x000020, "Member 'SQSoldier_BPWound::DamageCauser' has a wrong offset!");

// Function Squad.SQSoldier.BPWoundedDamageTaken
// 0x0004 (0x0004 - 0x0000)
struct SQSoldier_BPWoundedDamageTaken final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_BPWoundedDamageTaken) == 0x000004, "Wrong alignment on SQSoldier_BPWoundedDamageTaken");
static_assert(sizeof(SQSoldier_BPWoundedDamageTaken) == 0x000004, "Wrong size on SQSoldier_BPWoundedDamageTaken");
static_assert(offsetof(SQSoldier_BPWoundedDamageTaken, Damage) == 0x000000, "Member 'SQSoldier_BPWoundedDamageTaken::Damage' has a wrong offset!");

// Function Squad.SQSoldier.CalcCamera_BP
// 0x003C (0x003C - 0x0000)
struct SQSoldier_CalcCamera_BP final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocation;                                        // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InFOV;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutLocation;                                       // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OutRotation;                                       // 0x002C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         OutFOV;                                            // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_CalcCamera_BP) == 0x000004, "Wrong alignment on SQSoldier_CalcCamera_BP");
static_assert(sizeof(SQSoldier_CalcCamera_BP) == 0x00003C, "Wrong size on SQSoldier_CalcCamera_BP");
static_assert(offsetof(SQSoldier_CalcCamera_BP, DeltaTime) == 0x000000, "Member 'SQSoldier_CalcCamera_BP::DeltaTime' has a wrong offset!");
static_assert(offsetof(SQSoldier_CalcCamera_BP, InLocation) == 0x000004, "Member 'SQSoldier_CalcCamera_BP::InLocation' has a wrong offset!");
static_assert(offsetof(SQSoldier_CalcCamera_BP, InRotation) == 0x000010, "Member 'SQSoldier_CalcCamera_BP::InRotation' has a wrong offset!");
static_assert(offsetof(SQSoldier_CalcCamera_BP, InFOV) == 0x00001C, "Member 'SQSoldier_CalcCamera_BP::InFOV' has a wrong offset!");
static_assert(offsetof(SQSoldier_CalcCamera_BP, OutLocation) == 0x000020, "Member 'SQSoldier_CalcCamera_BP::OutLocation' has a wrong offset!");
static_assert(offsetof(SQSoldier_CalcCamera_BP, OutRotation) == 0x00002C, "Member 'SQSoldier_CalcCamera_BP::OutRotation' has a wrong offset!");
static_assert(offsetof(SQSoldier_CalcCamera_BP, OutFOV) == 0x000038, "Member 'SQSoldier_CalcCamera_BP::OutFOV' has a wrong offset!");

// Function Squad.SQSoldier.ChangeSoundMix
// 0x0008 (0x0008 - 0x0000)
struct SQSoldier_ChangeSoundMix final
{
public:
	class USoundMix*                              NewSoundMix;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_ChangeSoundMix) == 0x000008, "Wrong alignment on SQSoldier_ChangeSoundMix");
static_assert(sizeof(SQSoldier_ChangeSoundMix) == 0x000008, "Wrong size on SQSoldier_ChangeSoundMix");
static_assert(offsetof(SQSoldier_ChangeSoundMix, NewSoundMix) == 0x000000, "Member 'SQSoldier_ChangeSoundMix::NewSoundMix' has a wrong offset!");

// Function Squad.SQSoldier.DeactivateSprintState
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_DeactivateSprintState final
{
public:
	bool                                          bHasMovementInput;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_DeactivateSprintState) == 0x000001, "Wrong alignment on SQSoldier_DeactivateSprintState");
static_assert(sizeof(SQSoldier_DeactivateSprintState) == 0x000001, "Wrong size on SQSoldier_DeactivateSprintState");
static_assert(offsetof(SQSoldier_DeactivateSprintState, bHasMovementInput) == 0x000000, "Member 'SQSoldier_DeactivateSprintState::bHasMovementInput' has a wrong offset!");

// Function Squad.SQSoldier.DebugAddAmmoSupply
// 0x0004 (0x0004 - 0x0000)
struct SQSoldier_DebugAddAmmoSupply final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_DebugAddAmmoSupply) == 0x000004, "Wrong alignment on SQSoldier_DebugAddAmmoSupply");
static_assert(sizeof(SQSoldier_DebugAddAmmoSupply) == 0x000004, "Wrong size on SQSoldier_DebugAddAmmoSupply");
static_assert(offsetof(SQSoldier_DebugAddAmmoSupply, Amount) == 0x000000, "Member 'SQSoldier_DebugAddAmmoSupply::Amount' has a wrong offset!");

// Function Squad.SQSoldier.DebugAddBuildSupply
// 0x0004 (0x0004 - 0x0000)
struct SQSoldier_DebugAddBuildSupply final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_DebugAddBuildSupply) == 0x000004, "Wrong alignment on SQSoldier_DebugAddBuildSupply");
static_assert(sizeof(SQSoldier_DebugAddBuildSupply) == 0x000004, "Wrong size on SQSoldier_DebugAddBuildSupply");
static_assert(offsetof(SQSoldier_DebugAddBuildSupply, Amount) == 0x000000, "Member 'SQSoldier_DebugAddBuildSupply::Amount' has a wrong offset!");

// Function Squad.SQSoldier.DebugSetHealth
// 0x0004 (0x0004 - 0x0000)
struct SQSoldier_DebugSetHealth final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_DebugSetHealth) == 0x000004, "Wrong alignment on SQSoldier_DebugSetHealth");
static_assert(sizeof(SQSoldier_DebugSetHealth) == 0x000004, "Wrong size on SQSoldier_DebugSetHealth");
static_assert(offsetof(SQSoldier_DebugSetHealth, Value) == 0x000000, "Member 'SQSoldier_DebugSetHealth::Value' has a wrong offset!");

// Function Squad.SQSoldier.DebugToggleOriginRebaseTest
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_DebugToggleOriginRebaseTest final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_DebugToggleOriginRebaseTest) == 0x000001, "Wrong alignment on SQSoldier_DebugToggleOriginRebaseTest");
static_assert(sizeof(SQSoldier_DebugToggleOriginRebaseTest) == 0x000001, "Wrong size on SQSoldier_DebugToggleOriginRebaseTest");
static_assert(offsetof(SQSoldier_DebugToggleOriginRebaseTest, Value) == 0x000000, "Member 'SQSoldier_DebugToggleOriginRebaseTest::Value' has a wrong offset!");

// Function Squad.SQSoldier.DebugTogglePostRecovery
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_DebugTogglePostRecovery final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_DebugTogglePostRecovery) == 0x000001, "Wrong alignment on SQSoldier_DebugTogglePostRecovery");
static_assert(sizeof(SQSoldier_DebugTogglePostRecovery) == 0x000001, "Wrong size on SQSoldier_DebugTogglePostRecovery");
static_assert(offsetof(SQSoldier_DebugTogglePostRecovery, Value) == 0x000000, "Member 'SQSoldier_DebugTogglePostRecovery::Value' has a wrong offset!");

// Function Squad.SQSoldier.Die
// 0x0030 (0x0030 - 0x0000)
struct SQSoldier_Die final
{
public:
	float                                         KillingDamage;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F29[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           DamageEvent;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            Killer;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F2A[0x7];                                      // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSoldier_Die) == 0x000008, "Wrong alignment on SQSoldier_Die");
static_assert(sizeof(SQSoldier_Die) == 0x000030, "Wrong size on SQSoldier_Die");
static_assert(offsetof(SQSoldier_Die, KillingDamage) == 0x000000, "Member 'SQSoldier_Die::KillingDamage' has a wrong offset!");
static_assert(offsetof(SQSoldier_Die, DamageEvent) == 0x000008, "Member 'SQSoldier_Die::DamageEvent' has a wrong offset!");
static_assert(offsetof(SQSoldier_Die, Killer) == 0x000018, "Member 'SQSoldier_Die::Killer' has a wrong offset!");
static_assert(offsetof(SQSoldier_Die, DamageCauser) == 0x000020, "Member 'SQSoldier_Die::DamageCauser' has a wrong offset!");
static_assert(offsetof(SQSoldier_Die, ReturnValue) == 0x000028, "Member 'SQSoldier_Die::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.EnteredSeat
// 0x0018 (0x0018 - 0x0000)
struct SQSoldier_EnteredSeat final
{
public:
	class USQVehicleSeatComponent*                PreviousSeat;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQVehicleSeatComponent*                NewSeat;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSwitchedSeats;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnteredVehicle;                                   // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F2B[0x6];                                      // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSoldier_EnteredSeat) == 0x000008, "Wrong alignment on SQSoldier_EnteredSeat");
static_assert(sizeof(SQSoldier_EnteredSeat) == 0x000018, "Wrong size on SQSoldier_EnteredSeat");
static_assert(offsetof(SQSoldier_EnteredSeat, PreviousSeat) == 0x000000, "Member 'SQSoldier_EnteredSeat::PreviousSeat' has a wrong offset!");
static_assert(offsetof(SQSoldier_EnteredSeat, NewSeat) == 0x000008, "Member 'SQSoldier_EnteredSeat::NewSeat' has a wrong offset!");
static_assert(offsetof(SQSoldier_EnteredSeat, bSwitchedSeats) == 0x000010, "Member 'SQSoldier_EnteredSeat::bSwitchedSeats' has a wrong offset!");
static_assert(offsetof(SQSoldier_EnteredSeat, bEnteredVehicle) == 0x000011, "Member 'SQSoldier_EnteredSeat::bEnteredVehicle' has a wrong offset!");

// Function Squad.SQSoldier.EnteredVehicle
// 0x0008 (0x0008 - 0x0000)
struct SQSoldier_EnteredVehicle final
{
public:
	class USQVehicleSeatComponent*                NewSeat;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_EnteredVehicle) == 0x000008, "Wrong alignment on SQSoldier_EnteredVehicle");
static_assert(sizeof(SQSoldier_EnteredVehicle) == 0x000008, "Wrong size on SQSoldier_EnteredVehicle");
static_assert(offsetof(SQSoldier_EnteredVehicle, NewSeat) == 0x000000, "Member 'SQSoldier_EnteredVehicle::NewSeat' has a wrong offset!");

// Function Squad.SQSoldier.GetDamageForFallingAtSpeed
// 0x000C (0x000C - 0x0000)
struct SQSoldier_GetDamageForFallingAtSpeed final
{
public:
	float                                         InFallSpeed;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBaseHealth;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_GetDamageForFallingAtSpeed) == 0x000004, "Wrong alignment on SQSoldier_GetDamageForFallingAtSpeed");
static_assert(sizeof(SQSoldier_GetDamageForFallingAtSpeed) == 0x00000C, "Wrong size on SQSoldier_GetDamageForFallingAtSpeed");
static_assert(offsetof(SQSoldier_GetDamageForFallingAtSpeed, InFallSpeed) == 0x000000, "Member 'SQSoldier_GetDamageForFallingAtSpeed::InFallSpeed' has a wrong offset!");
static_assert(offsetof(SQSoldier_GetDamageForFallingAtSpeed, InBaseHealth) == 0x000004, "Member 'SQSoldier_GetDamageForFallingAtSpeed::InBaseHealth' has a wrong offset!");
static_assert(offsetof(SQSoldier_GetDamageForFallingAtSpeed, ReturnValue) == 0x000008, "Member 'SQSoldier_GetDamageForFallingAtSpeed::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.GetDrowningHeight
// 0x0004 (0x0004 - 0x0000)
struct SQSoldier_GetDrowningHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_GetDrowningHeight) == 0x000004, "Wrong alignment on SQSoldier_GetDrowningHeight");
static_assert(sizeof(SQSoldier_GetDrowningHeight) == 0x000004, "Wrong size on SQSoldier_GetDrowningHeight");
static_assert(offsetof(SQSoldier_GetDrowningHeight, ReturnValue) == 0x000000, "Member 'SQSoldier_GetDrowningHeight::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.GetNearestFOB
// 0x0010 (0x0010 - 0x0000)
struct SQSoldier_GetNearestFOB final
{
public:
	bool                                          bIsFriendly;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F2C[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQForwardBase*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_GetNearestFOB) == 0x000008, "Wrong alignment on SQSoldier_GetNearestFOB");
static_assert(sizeof(SQSoldier_GetNearestFOB) == 0x000010, "Wrong size on SQSoldier_GetNearestFOB");
static_assert(offsetof(SQSoldier_GetNearestFOB, bIsFriendly) == 0x000000, "Member 'SQSoldier_GetNearestFOB::bIsFriendly' has a wrong offset!");
static_assert(offsetof(SQSoldier_GetNearestFOB, ReturnValue) == 0x000008, "Member 'SQSoldier_GetNearestFOB::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.GetSeatState
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_GetSeatState final
{
public:
	ESQSoldierSeatState                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_GetSeatState) == 0x000001, "Wrong alignment on SQSoldier_GetSeatState");
static_assert(sizeof(SQSoldier_GetSeatState) == 0x000001, "Wrong size on SQSoldier_GetSeatState");
static_assert(offsetof(SQSoldier_GetSeatState, ReturnValue) == 0x000000, "Member 'SQSoldier_GetSeatState::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.Heal
// 0x0004 (0x0004 - 0x0000)
struct SQSoldier_Heal final
{
public:
	float                                         AmountHealed;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_Heal) == 0x000004, "Wrong alignment on SQSoldier_Heal");
static_assert(sizeof(SQSoldier_Heal) == 0x000004, "Wrong size on SQSoldier_Heal");
static_assert(offsetof(SQSoldier_Heal, AmountHealed) == 0x000000, "Member 'SQSoldier_Heal::AmountHealed' has a wrong offset!");

// Function Squad.SQSoldier.InitiateDragging
// 0x0010 (0x0010 - 0x0000)
struct SQSoldier_InitiateDragging final
{
public:
	class ASQSoldier*                             SoldierToDrag;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoneIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F2D[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSoldier_InitiateDragging) == 0x000008, "Wrong alignment on SQSoldier_InitiateDragging");
static_assert(sizeof(SQSoldier_InitiateDragging) == 0x000010, "Wrong size on SQSoldier_InitiateDragging");
static_assert(offsetof(SQSoldier_InitiateDragging, SoldierToDrag) == 0x000000, "Member 'SQSoldier_InitiateDragging::SoldierToDrag' has a wrong offset!");
static_assert(offsetof(SQSoldier_InitiateDragging, BoneIndex) == 0x000008, "Member 'SQSoldier_InitiateDragging::BoneIndex' has a wrong offset!");

// Function Squad.SQSoldier.IsMontagePlaying
// 0x0018 (0x0018 - 0x0000)
struct SQSoldier_IsMontagePlaying final
{
public:
	class UAnimMontage*                           FirstPersonAnim;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ThirdPersonAnim;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F2E[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSoldier_IsMontagePlaying) == 0x000008, "Wrong alignment on SQSoldier_IsMontagePlaying");
static_assert(sizeof(SQSoldier_IsMontagePlaying) == 0x000018, "Wrong size on SQSoldier_IsMontagePlaying");
static_assert(offsetof(SQSoldier_IsMontagePlaying, FirstPersonAnim) == 0x000000, "Member 'SQSoldier_IsMontagePlaying::FirstPersonAnim' has a wrong offset!");
static_assert(offsetof(SQSoldier_IsMontagePlaying, ThirdPersonAnim) == 0x000008, "Member 'SQSoldier_IsMontagePlaying::ThirdPersonAnim' has a wrong offset!");
static_assert(offsetof(SQSoldier_IsMontagePlaying, ReturnValue) == 0x000010, "Member 'SQSoldier_IsMontagePlaying::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.LeftSeat
// 0x0010 (0x0010 - 0x0000)
struct SQSoldier_LeftSeat final
{
public:
	class USQVehicleSeatComponent*                PreviousSeat;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSwitchedSeats;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeftVehicle;                                      // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F2F[0x6];                                      // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSoldier_LeftSeat) == 0x000008, "Wrong alignment on SQSoldier_LeftSeat");
static_assert(sizeof(SQSoldier_LeftSeat) == 0x000010, "Wrong size on SQSoldier_LeftSeat");
static_assert(offsetof(SQSoldier_LeftSeat, PreviousSeat) == 0x000000, "Member 'SQSoldier_LeftSeat::PreviousSeat' has a wrong offset!");
static_assert(offsetof(SQSoldier_LeftSeat, bSwitchedSeats) == 0x000008, "Member 'SQSoldier_LeftSeat::bSwitchedSeats' has a wrong offset!");
static_assert(offsetof(SQSoldier_LeftSeat, bLeftVehicle) == 0x000009, "Member 'SQSoldier_LeftSeat::bLeftVehicle' has a wrong offset!");

// Function Squad.SQSoldier.LeftVehicle
// 0x0008 (0x0008 - 0x0000)
struct SQSoldier_LeftVehicle final
{
public:
	class USQVehicleSeatComponent*                PreviousSeat;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_LeftVehicle) == 0x000008, "Wrong alignment on SQSoldier_LeftVehicle");
static_assert(sizeof(SQSoldier_LeftVehicle) == 0x000008, "Wrong size on SQSoldier_LeftVehicle");
static_assert(offsetof(SQSoldier_LeftVehicle, PreviousSeat) == 0x000000, "Member 'SQSoldier_LeftVehicle::PreviousSeat' has a wrong offset!");

// Function Squad.SQSoldier.MulticastChangeRootComponent
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_MulticastChangeRootComponent final
{
public:
	bool                                          bSetMeshAsRoot;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_MulticastChangeRootComponent) == 0x000001, "Wrong alignment on SQSoldier_MulticastChangeRootComponent");
static_assert(sizeof(SQSoldier_MulticastChangeRootComponent) == 0x000001, "Wrong size on SQSoldier_MulticastChangeRootComponent");
static_assert(offsetof(SQSoldier_MulticastChangeRootComponent, bSetMeshAsRoot) == 0x000000, "Member 'SQSoldier_MulticastChangeRootComponent::bSetMeshAsRoot' has a wrong offset!");

// Function Squad.SQSoldier.MulticastLean
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_MulticastLean final
{
public:
	uint8                                         NewLeanDirection;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_MulticastLean) == 0x000001, "Wrong alignment on SQSoldier_MulticastLean");
static_assert(sizeof(SQSoldier_MulticastLean) == 0x000001, "Wrong size on SQSoldier_MulticastLean");
static_assert(offsetof(SQSoldier_MulticastLean, NewLeanDirection) == 0x000000, "Member 'SQSoldier_MulticastLean::NewLeanDirection' has a wrong offset!");

// Function Squad.SQSoldier.MulticastPlayCustomEmote
// 0x0008 (0x0008 - 0x0000)
struct SQSoldier_MulticastPlayCustomEmote final
{
public:
	class FName                                   CustomName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_MulticastPlayCustomEmote) == 0x000004, "Wrong alignment on SQSoldier_MulticastPlayCustomEmote");
static_assert(sizeof(SQSoldier_MulticastPlayCustomEmote) == 0x000008, "Wrong size on SQSoldier_MulticastPlayCustomEmote");
static_assert(offsetof(SQSoldier_MulticastPlayCustomEmote, CustomName) == 0x000000, "Member 'SQSoldier_MulticastPlayCustomEmote::CustomName' has a wrong offset!");

// Function Squad.SQSoldier.MulticastPlayEmoteAnim
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_MulticastPlayEmoteAnim final
{
public:
	ESQEmotes                                     Emote;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_MulticastPlayEmoteAnim) == 0x000001, "Wrong alignment on SQSoldier_MulticastPlayEmoteAnim");
static_assert(sizeof(SQSoldier_MulticastPlayEmoteAnim) == 0x000001, "Wrong size on SQSoldier_MulticastPlayEmoteAnim");
static_assert(offsetof(SQSoldier_MulticastPlayEmoteAnim, Emote) == 0x000000, "Member 'SQSoldier_MulticastPlayEmoteAnim::Emote' has a wrong offset!");

// Function Squad.SQSoldier.MulticastSetDragging
// 0x0018 (0x0018 - 0x0000)
struct SQSoldier_MulticastSetDragging final
{
public:
	bool                                          bDrag;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F30[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQSoldier*                             SoldierToDrag;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoneIndex;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F31[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSoldier_MulticastSetDragging) == 0x000008, "Wrong alignment on SQSoldier_MulticastSetDragging");
static_assert(sizeof(SQSoldier_MulticastSetDragging) == 0x000018, "Wrong size on SQSoldier_MulticastSetDragging");
static_assert(offsetof(SQSoldier_MulticastSetDragging, bDrag) == 0x000000, "Member 'SQSoldier_MulticastSetDragging::bDrag' has a wrong offset!");
static_assert(offsetof(SQSoldier_MulticastSetDragging, SoldierToDrag) == 0x000008, "Member 'SQSoldier_MulticastSetDragging::SoldierToDrag' has a wrong offset!");
static_assert(offsetof(SQSoldier_MulticastSetDragging, BoneIndex) == 0x000010, "Member 'SQSoldier_MulticastSetDragging::BoneIndex' has a wrong offset!");

// Function Squad.SQSoldier.OnEnterBoundary
// 0x0010 (0x0010 - 0x0000)
struct SQSoldier_OnEnterBoundary final
{
public:
	class USQBoundaryListener*                    Listener;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQBoundary*                            Boundary;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_OnEnterBoundary) == 0x000008, "Wrong alignment on SQSoldier_OnEnterBoundary");
static_assert(sizeof(SQSoldier_OnEnterBoundary) == 0x000010, "Wrong size on SQSoldier_OnEnterBoundary");
static_assert(offsetof(SQSoldier_OnEnterBoundary, Listener) == 0x000000, "Member 'SQSoldier_OnEnterBoundary::Listener' has a wrong offset!");
static_assert(offsetof(SQSoldier_OnEnterBoundary, Boundary) == 0x000008, "Member 'SQSoldier_OnEnterBoundary::Boundary' has a wrong offset!");

// DelegateFunction Squad.SQSoldier.OnEquip__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SQSoldier_OnEquip__DelegateSignature final
{
public:
	class USQItemStaticInfo*                      StaticInfo;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_OnEquip__DelegateSignature) == 0x000008, "Wrong alignment on SQSoldier_OnEquip__DelegateSignature");
static_assert(sizeof(SQSoldier_OnEquip__DelegateSignature) == 0x000008, "Wrong size on SQSoldier_OnEquip__DelegateSignature");
static_assert(offsetof(SQSoldier_OnEquip__DelegateSignature, StaticInfo) == 0x000000, "Member 'SQSoldier_OnEquip__DelegateSignature::StaticInfo' has a wrong offset!");

// Function Squad.SQSoldier.OnExitBoundary
// 0x0010 (0x0010 - 0x0000)
struct SQSoldier_OnExitBoundary final
{
public:
	class USQBoundaryListener*                    Listener;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQBoundary*                            Boundary;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_OnExitBoundary) == 0x000008, "Wrong alignment on SQSoldier_OnExitBoundary");
static_assert(sizeof(SQSoldier_OnExitBoundary) == 0x000010, "Wrong size on SQSoldier_OnExitBoundary");
static_assert(offsetof(SQSoldier_OnExitBoundary, Listener) == 0x000000, "Member 'SQSoldier_OnExitBoundary::Listener' has a wrong offset!");
static_assert(offsetof(SQSoldier_OnExitBoundary, Boundary) == 0x000008, "Member 'SQSoldier_OnExitBoundary::Boundary' has a wrong offset!");

// Function Squad.SQSoldier.OnFeetBottomCollideWithWaterLevel
// 0x0004 (0x0004 - 0x0000)
struct SQSoldier_OnFeetBottomCollideWithWaterLevel final
{
public:
	float                                         ImmersionDepth;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_OnFeetBottomCollideWithWaterLevel) == 0x000004, "Wrong alignment on SQSoldier_OnFeetBottomCollideWithWaterLevel");
static_assert(sizeof(SQSoldier_OnFeetBottomCollideWithWaterLevel) == 0x000004, "Wrong size on SQSoldier_OnFeetBottomCollideWithWaterLevel");
static_assert(offsetof(SQSoldier_OnFeetBottomCollideWithWaterLevel, ImmersionDepth) == 0x000000, "Member 'SQSoldier_OnFeetBottomCollideWithWaterLevel::ImmersionDepth' has a wrong offset!");

// Function Squad.SQSoldier.OnHipHeightCollideWithWaterLevel
// 0x0004 (0x0004 - 0x0000)
struct SQSoldier_OnHipHeightCollideWithWaterLevel final
{
public:
	float                                         ImmersionDepth;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_OnHipHeightCollideWithWaterLevel) == 0x000004, "Wrong alignment on SQSoldier_OnHipHeightCollideWithWaterLevel");
static_assert(sizeof(SQSoldier_OnHipHeightCollideWithWaterLevel) == 0x000004, "Wrong size on SQSoldier_OnHipHeightCollideWithWaterLevel");
static_assert(offsetof(SQSoldier_OnHipHeightCollideWithWaterLevel, ImmersionDepth) == 0x000000, "Member 'SQSoldier_OnHipHeightCollideWithWaterLevel::ImmersionDepth' has a wrong offset!");

// Function Squad.SQSoldier.OnRagdollHit
// 0x00B0 (0x00B0 - 0x0000)
struct SQSoldier_OnRagdollHit final
{
public:
	class UPrimitiveComponent*                    HitComp;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0024(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_F32[0x4];                                      // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSoldier_OnRagdollHit) == 0x000008, "Wrong alignment on SQSoldier_OnRagdollHit");
static_assert(sizeof(SQSoldier_OnRagdollHit) == 0x0000B0, "Wrong size on SQSoldier_OnRagdollHit");
static_assert(offsetof(SQSoldier_OnRagdollHit, HitComp) == 0x000000, "Member 'SQSoldier_OnRagdollHit::HitComp' has a wrong offset!");
static_assert(offsetof(SQSoldier_OnRagdollHit, OtherActor) == 0x000008, "Member 'SQSoldier_OnRagdollHit::OtherActor' has a wrong offset!");
static_assert(offsetof(SQSoldier_OnRagdollHit, OtherComp) == 0x000010, "Member 'SQSoldier_OnRagdollHit::OtherComp' has a wrong offset!");
static_assert(offsetof(SQSoldier_OnRagdollHit, NormalImpulse) == 0x000018, "Member 'SQSoldier_OnRagdollHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(SQSoldier_OnRagdollHit, Hit) == 0x000024, "Member 'SQSoldier_OnRagdollHit::Hit' has a wrong offset!");

// Function Squad.SQSoldier.OnRep_Bipod
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_OnRep_Bipod final
{
public:
	bool                                          bBipodWasDeployed;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_OnRep_Bipod) == 0x000001, "Wrong alignment on SQSoldier_OnRep_Bipod");
static_assert(sizeof(SQSoldier_OnRep_Bipod) == 0x000001, "Wrong size on SQSoldier_OnRep_Bipod");
static_assert(offsetof(SQSoldier_OnRep_Bipod, bBipodWasDeployed) == 0x000000, "Member 'SQSoldier_OnRep_Bipod::bBipodWasDeployed' has a wrong offset!");

// Function Squad.SQSoldier.OnRep_ClimbInfo
// 0x0030 (0x0030 - 0x0000)
struct SQSoldier_OnRep_ClimbInfo final
{
public:
	struct FSQClimbInfo                           PrevClimbInfo;                                     // 0x0000(0x0030)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_OnRep_ClimbInfo) == 0x000008, "Wrong alignment on SQSoldier_OnRep_ClimbInfo");
static_assert(sizeof(SQSoldier_OnRep_ClimbInfo) == 0x000030, "Wrong size on SQSoldier_OnRep_ClimbInfo");
static_assert(offsetof(SQSoldier_OnRep_ClimbInfo, PrevClimbInfo) == 0x000000, "Member 'SQSoldier_OnRep_ClimbInfo::PrevClimbInfo' has a wrong offset!");

// Function Squad.SQSoldier.OnRep_CurrentSeat
// 0x0008 (0x0008 - 0x0000)
struct SQSoldier_OnRep_CurrentSeat final
{
public:
	class USQVehicleSeatComponent*                PreviousSeat;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_OnRep_CurrentSeat) == 0x000008, "Wrong alignment on SQSoldier_OnRep_CurrentSeat");
static_assert(sizeof(SQSoldier_OnRep_CurrentSeat) == 0x000008, "Wrong size on SQSoldier_OnRep_CurrentSeat");
static_assert(offsetof(SQSoldier_OnRep_CurrentSeat, PreviousSeat) == 0x000000, "Member 'SQSoldier_OnRep_CurrentSeat::PreviousSeat' has a wrong offset!");

// Function Squad.SQSoldier.OnRep_Health
// 0x0004 (0x0004 - 0x0000)
struct SQSoldier_OnRep_Health final
{
public:
	float                                         OldHealth;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_OnRep_Health) == 0x000004, "Wrong alignment on SQSoldier_OnRep_Health");
static_assert(sizeof(SQSoldier_OnRep_Health) == 0x000004, "Wrong size on SQSoldier_OnRep_Health");
static_assert(offsetof(SQSoldier_OnRep_Health, OldHealth) == 0x000000, "Member 'SQSoldier_OnRep_Health::OldHealth' has a wrong offset!");

// Function Squad.SQSoldier.OnRep_ItemRaisedAboveHeadChanged
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_OnRep_ItemRaisedAboveHeadChanged final
{
public:
	bool                                          bVal;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_OnRep_ItemRaisedAboveHeadChanged) == 0x000001, "Wrong alignment on SQSoldier_OnRep_ItemRaisedAboveHeadChanged");
static_assert(sizeof(SQSoldier_OnRep_ItemRaisedAboveHeadChanged) == 0x000001, "Wrong size on SQSoldier_OnRep_ItemRaisedAboveHeadChanged");
static_assert(offsetof(SQSoldier_OnRep_ItemRaisedAboveHeadChanged, bVal) == 0x000000, "Member 'SQSoldier_OnRep_ItemRaisedAboveHeadChanged::bVal' has a wrong offset!");

// Function Squad.SQSoldier.OnRep_WeaponLoweredChanged
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_OnRep_WeaponLoweredChanged final
{
public:
	bool                                          bVal;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_OnRep_WeaponLoweredChanged) == 0x000001, "Wrong alignment on SQSoldier_OnRep_WeaponLoweredChanged");
static_assert(sizeof(SQSoldier_OnRep_WeaponLoweredChanged) == 0x000001, "Wrong size on SQSoldier_OnRep_WeaponLoweredChanged");
static_assert(offsetof(SQSoldier_OnRep_WeaponLoweredChanged, bVal) == 0x000000, "Member 'SQSoldier_OnRep_WeaponLoweredChanged::bVal' has a wrong offset!");

// Function Squad.SQSoldier.OnSnapZoneOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct SQSoldier_OnSnapZoneOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F33[0x3];                                      // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_OnSnapZoneOverlapBegin) == 0x000008, "Wrong alignment on SQSoldier_OnSnapZoneOverlapBegin");
static_assert(sizeof(SQSoldier_OnSnapZoneOverlapBegin) == 0x0000A8, "Wrong size on SQSoldier_OnSnapZoneOverlapBegin");
static_assert(offsetof(SQSoldier_OnSnapZoneOverlapBegin, OverlappedComponent) == 0x000000, "Member 'SQSoldier_OnSnapZoneOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SQSoldier_OnSnapZoneOverlapBegin, OtherActor) == 0x000008, "Member 'SQSoldier_OnSnapZoneOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(SQSoldier_OnSnapZoneOverlapBegin, OtherComp) == 0x000010, "Member 'SQSoldier_OnSnapZoneOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(SQSoldier_OnSnapZoneOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'SQSoldier_OnSnapZoneOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SQSoldier_OnSnapZoneOverlapBegin, bFromSweep) == 0x00001C, "Member 'SQSoldier_OnSnapZoneOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(SQSoldier_OnSnapZoneOverlapBegin, SweepResult) == 0x000020, "Member 'SQSoldier_OnSnapZoneOverlapBegin::SweepResult' has a wrong offset!");

// Function Squad.SQSoldier.OnSnapZoneOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct SQSoldier_OnSnapZoneOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F34[0x4];                                      // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSoldier_OnSnapZoneOverlapEnd) == 0x000008, "Wrong alignment on SQSoldier_OnSnapZoneOverlapEnd");
static_assert(sizeof(SQSoldier_OnSnapZoneOverlapEnd) == 0x000020, "Wrong size on SQSoldier_OnSnapZoneOverlapEnd");
static_assert(offsetof(SQSoldier_OnSnapZoneOverlapEnd, OverlappedComponent) == 0x000000, "Member 'SQSoldier_OnSnapZoneOverlapEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SQSoldier_OnSnapZoneOverlapEnd, OtherActor) == 0x000008, "Member 'SQSoldier_OnSnapZoneOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(SQSoldier_OnSnapZoneOverlapEnd, OtherComp) == 0x000010, "Member 'SQSoldier_OnSnapZoneOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(SQSoldier_OnSnapZoneOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'SQSoldier_OnSnapZoneOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function Squad.SQSoldier.PlayClothingSound
// 0x0004 (0x0004 - 0x0000)
struct SQSoldier_PlayClothingSound final
{
public:
	float                                         MaxDistanceInMeters;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_PlayClothingSound) == 0x000004, "Wrong alignment on SQSoldier_PlayClothingSound");
static_assert(sizeof(SQSoldier_PlayClothingSound) == 0x000004, "Wrong size on SQSoldier_PlayClothingSound");
static_assert(offsetof(SQSoldier_PlayClothingSound, MaxDistanceInMeters) == 0x000000, "Member 'SQSoldier_PlayClothingSound::MaxDistanceInMeters' has a wrong offset!");

// Function Squad.SQSoldier.PlayEquipmentSound
// 0x0004 (0x0004 - 0x0000)
struct SQSoldier_PlayEquipmentSound final
{
public:
	float                                         MaxDistanceInMeters;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_PlayEquipmentSound) == 0x000004, "Wrong alignment on SQSoldier_PlayEquipmentSound");
static_assert(sizeof(SQSoldier_PlayEquipmentSound) == 0x000004, "Wrong size on SQSoldier_PlayEquipmentSound");
static_assert(offsetof(SQSoldier_PlayEquipmentSound, MaxDistanceInMeters) == 0x000000, "Member 'SQSoldier_PlayEquipmentSound::MaxDistanceInMeters' has a wrong offset!");

// Function Squad.SQSoldier.PlayFootStep
// 0x0014 (0x0014 - 0x0000)
struct SQSoldier_PlayFootStep final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OpposingKneeSocketName;                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistanceInMeters;                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_PlayFootStep) == 0x000004, "Wrong alignment on SQSoldier_PlayFootStep");
static_assert(sizeof(SQSoldier_PlayFootStep) == 0x000014, "Wrong size on SQSoldier_PlayFootStep");
static_assert(offsetof(SQSoldier_PlayFootStep, SocketName) == 0x000000, "Member 'SQSoldier_PlayFootStep::SocketName' has a wrong offset!");
static_assert(offsetof(SQSoldier_PlayFootStep, OpposingKneeSocketName) == 0x000008, "Member 'SQSoldier_PlayFootStep::OpposingKneeSocketName' has a wrong offset!");
static_assert(offsetof(SQSoldier_PlayFootStep, MaxDistanceInMeters) == 0x000010, "Member 'SQSoldier_PlayFootStep::MaxDistanceInMeters' has a wrong offset!");

// Function Squad.SQSoldier.PlayOrStopAnimations
// 0x0018 (0x0018 - 0x0000)
struct SQSoldier_PlayOrStopAnimations final
{
public:
	class UAnimMontage*                           FirstPersonAnim;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ThirdPersonAnim;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopAnimation;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F35[0x3];                                      // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         blendOutTime;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_PlayOrStopAnimations) == 0x000008, "Wrong alignment on SQSoldier_PlayOrStopAnimations");
static_assert(sizeof(SQSoldier_PlayOrStopAnimations) == 0x000018, "Wrong size on SQSoldier_PlayOrStopAnimations");
static_assert(offsetof(SQSoldier_PlayOrStopAnimations, FirstPersonAnim) == 0x000000, "Member 'SQSoldier_PlayOrStopAnimations::FirstPersonAnim' has a wrong offset!");
static_assert(offsetof(SQSoldier_PlayOrStopAnimations, ThirdPersonAnim) == 0x000008, "Member 'SQSoldier_PlayOrStopAnimations::ThirdPersonAnim' has a wrong offset!");
static_assert(offsetof(SQSoldier_PlayOrStopAnimations, bStopAnimation) == 0x000010, "Member 'SQSoldier_PlayOrStopAnimations::bStopAnimation' has a wrong offset!");
static_assert(offsetof(SQSoldier_PlayOrStopAnimations, blendOutTime) == 0x000014, "Member 'SQSoldier_PlayOrStopAnimations::blendOutTime' has a wrong offset!");

// Function Squad.SQSoldier.PlayOrStopMontage
// 0x0018 (0x0018 - 0x0000)
struct SQSoldier_PlayOrStopMontage final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Montage;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopAnimation;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F36[0x3];                                      // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         blendOutTime;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_PlayOrStopMontage) == 0x000008, "Wrong alignment on SQSoldier_PlayOrStopMontage");
static_assert(sizeof(SQSoldier_PlayOrStopMontage) == 0x000018, "Wrong size on SQSoldier_PlayOrStopMontage");
static_assert(offsetof(SQSoldier_PlayOrStopMontage, AnimInstance) == 0x000000, "Member 'SQSoldier_PlayOrStopMontage::AnimInstance' has a wrong offset!");
static_assert(offsetof(SQSoldier_PlayOrStopMontage, Montage) == 0x000008, "Member 'SQSoldier_PlayOrStopMontage::Montage' has a wrong offset!");
static_assert(offsetof(SQSoldier_PlayOrStopMontage, bStopAnimation) == 0x000010, "Member 'SQSoldier_PlayOrStopMontage::bStopAnimation' has a wrong offset!");
static_assert(offsetof(SQSoldier_PlayOrStopMontage, blendOutTime) == 0x000014, "Member 'SQSoldier_PlayOrStopMontage::blendOutTime' has a wrong offset!");

// Function Squad.SQSoldier.ServerClimb
// 0x0070 (0x0070 - 0x0000)
struct SQSoldier_ServerClimb final
{
public:
	struct FTransform                             ClientTransformZeroBased;                          // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQClimbInfo                           ClientInfo;                                        // 0x0030(0x0030)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          InIsMovingForward;                                 // 0x0060(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F37[0xF];                                      // 0x0061(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSoldier_ServerClimb) == 0x000010, "Wrong alignment on SQSoldier_ServerClimb");
static_assert(sizeof(SQSoldier_ServerClimb) == 0x000070, "Wrong size on SQSoldier_ServerClimb");
static_assert(offsetof(SQSoldier_ServerClimb, ClientTransformZeroBased) == 0x000000, "Member 'SQSoldier_ServerClimb::ClientTransformZeroBased' has a wrong offset!");
static_assert(offsetof(SQSoldier_ServerClimb, ClientInfo) == 0x000030, "Member 'SQSoldier_ServerClimb::ClientInfo' has a wrong offset!");
static_assert(offsetof(SQSoldier_ServerClimb, InIsMovingForward) == 0x000060, "Member 'SQSoldier_ServerClimb::InIsMovingForward' has a wrong offset!");

// Function Squad.SQSoldier.ServerDebugAddAmmoSupply
// 0x0004 (0x0004 - 0x0000)
struct SQSoldier_ServerDebugAddAmmoSupply final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_ServerDebugAddAmmoSupply) == 0x000004, "Wrong alignment on SQSoldier_ServerDebugAddAmmoSupply");
static_assert(sizeof(SQSoldier_ServerDebugAddAmmoSupply) == 0x000004, "Wrong size on SQSoldier_ServerDebugAddAmmoSupply");
static_assert(offsetof(SQSoldier_ServerDebugAddAmmoSupply, Amount) == 0x000000, "Member 'SQSoldier_ServerDebugAddAmmoSupply::Amount' has a wrong offset!");

// Function Squad.SQSoldier.ServerDebugAddBuildSupply
// 0x0004 (0x0004 - 0x0000)
struct SQSoldier_ServerDebugAddBuildSupply final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_ServerDebugAddBuildSupply) == 0x000004, "Wrong alignment on SQSoldier_ServerDebugAddBuildSupply");
static_assert(sizeof(SQSoldier_ServerDebugAddBuildSupply) == 0x000004, "Wrong size on SQSoldier_ServerDebugAddBuildSupply");
static_assert(offsetof(SQSoldier_ServerDebugAddBuildSupply, Amount) == 0x000000, "Member 'SQSoldier_ServerDebugAddBuildSupply::Amount' has a wrong offset!");

// Function Squad.SQSoldier.ServerDebugSetHealth
// 0x0004 (0x0004 - 0x0000)
struct SQSoldier_ServerDebugSetHealth final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_ServerDebugSetHealth) == 0x000004, "Wrong alignment on SQSoldier_ServerDebugSetHealth");
static_assert(sizeof(SQSoldier_ServerDebugSetHealth) == 0x000004, "Wrong size on SQSoldier_ServerDebugSetHealth");
static_assert(offsetof(SQSoldier_ServerDebugSetHealth, Value) == 0x000000, "Member 'SQSoldier_ServerDebugSetHealth::Value' has a wrong offset!");

// Function Squad.SQSoldier.ServerDebugTogglePostRecovery
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_ServerDebugTogglePostRecovery final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_ServerDebugTogglePostRecovery) == 0x000001, "Wrong alignment on SQSoldier_ServerDebugTogglePostRecovery");
static_assert(sizeof(SQSoldier_ServerDebugTogglePostRecovery) == 0x000001, "Wrong size on SQSoldier_ServerDebugTogglePostRecovery");
static_assert(offsetof(SQSoldier_ServerDebugTogglePostRecovery, Value) == 0x000000, "Member 'SQSoldier_ServerDebugTogglePostRecovery::Value' has a wrong offset!");

// Function Squad.SQSoldier.ServerDeployableInteractable
// 0x0008 (0x0008 - 0x0000)
struct SQSoldier_ServerDeployableInteractable final
{
public:
	class ASQDeployableInteractable*              Deployable;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_ServerDeployableInteractable) == 0x000008, "Wrong alignment on SQSoldier_ServerDeployableInteractable");
static_assert(sizeof(SQSoldier_ServerDeployableInteractable) == 0x000008, "Wrong size on SQSoldier_ServerDeployableInteractable");
static_assert(offsetof(SQSoldier_ServerDeployableInteractable, Deployable) == 0x000000, "Member 'SQSoldier_ServerDeployableInteractable::Deployable' has a wrong offset!");

// Function Squad.SQSoldier.ServerDeployBipod
// 0x0018 (0x0018 - 0x0000)
struct SQSoldier_ServerDeployBipod final
{
public:
	struct FVector                                RemoteBipodDeploymentLocationZeroBased;            // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RemoteActorLocationZeroBased;                      // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_ServerDeployBipod) == 0x000004, "Wrong alignment on SQSoldier_ServerDeployBipod");
static_assert(sizeof(SQSoldier_ServerDeployBipod) == 0x000018, "Wrong size on SQSoldier_ServerDeployBipod");
static_assert(offsetof(SQSoldier_ServerDeployBipod, RemoteBipodDeploymentLocationZeroBased) == 0x000000, "Member 'SQSoldier_ServerDeployBipod::RemoteBipodDeploymentLocationZeroBased' has a wrong offset!");
static_assert(offsetof(SQSoldier_ServerDeployBipod, RemoteActorLocationZeroBased) == 0x00000C, "Member 'SQSoldier_ServerDeployBipod::RemoteActorLocationZeroBased' has a wrong offset!");

// Function Squad.SQSoldier.ServerDragBody
// 0x0018 (0x0018 - 0x0000)
struct SQSoldier_ServerDragBody final
{
public:
	bool                                          bDrag;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F38[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQSoldier*                             SoldierToDrag;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoneIndex;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F39[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSoldier_ServerDragBody) == 0x000008, "Wrong alignment on SQSoldier_ServerDragBody");
static_assert(sizeof(SQSoldier_ServerDragBody) == 0x000018, "Wrong size on SQSoldier_ServerDragBody");
static_assert(offsetof(SQSoldier_ServerDragBody, bDrag) == 0x000000, "Member 'SQSoldier_ServerDragBody::bDrag' has a wrong offset!");
static_assert(offsetof(SQSoldier_ServerDragBody, SoldierToDrag) == 0x000008, "Member 'SQSoldier_ServerDragBody::SoldierToDrag' has a wrong offset!");
static_assert(offsetof(SQSoldier_ServerDragBody, BoneIndex) == 0x000010, "Member 'SQSoldier_ServerDragBody::BoneIndex' has a wrong offset!");

// Function Squad.SQSoldier.ServerLowerWeapon
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_ServerLowerWeapon final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_ServerLowerWeapon) == 0x000001, "Wrong alignment on SQSoldier_ServerLowerWeapon");
static_assert(sizeof(SQSoldier_ServerLowerWeapon) == 0x000001, "Wrong size on SQSoldier_ServerLowerWeapon");
static_assert(offsetof(SQSoldier_ServerLowerWeapon, bValue) == 0x000000, "Member 'SQSoldier_ServerLowerWeapon::bValue' has a wrong offset!");

// Function Squad.SQSoldier.ServerPickupAmmoBag
// 0x0008 (0x0008 - 0x0000)
struct SQSoldier_ServerPickupAmmoBag final
{
public:
	class ASQDeployableAmmoBag*                   Ammobag;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_ServerPickupAmmoBag) == 0x000008, "Wrong alignment on SQSoldier_ServerPickupAmmoBag");
static_assert(sizeof(SQSoldier_ServerPickupAmmoBag) == 0x000008, "Wrong size on SQSoldier_ServerPickupAmmoBag");
static_assert(offsetof(SQSoldier_ServerPickupAmmoBag, Ammobag) == 0x000000, "Member 'SQSoldier_ServerPickupAmmoBag::Ammobag' has a wrong offset!");

// Function Squad.SQSoldier.ServerRaiseItemAboveHead
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_ServerRaiseItemAboveHead final
{
public:
	bool                                          bShouldRaise;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_ServerRaiseItemAboveHead) == 0x000001, "Wrong alignment on SQSoldier_ServerRaiseItemAboveHead");
static_assert(sizeof(SQSoldier_ServerRaiseItemAboveHead) == 0x000001, "Wrong size on SQSoldier_ServerRaiseItemAboveHead");
static_assert(offsetof(SQSoldier_ServerRaiseItemAboveHead, bShouldRaise) == 0x000000, "Member 'SQSoldier_ServerRaiseItemAboveHead::bShouldRaise' has a wrong offset!");

// Function Squad.SQSoldier.ServerVehicleCollision
// 0x0010 (0x0010 - 0x0000)
struct SQSoldier_ServerVehicleCollision final
{
public:
	class ASQVehicle*                             Vehicle;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldKill;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F3A[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSoldier_ServerVehicleCollision) == 0x000008, "Wrong alignment on SQSoldier_ServerVehicleCollision");
static_assert(sizeof(SQSoldier_ServerVehicleCollision) == 0x000010, "Wrong size on SQSoldier_ServerVehicleCollision");
static_assert(offsetof(SQSoldier_ServerVehicleCollision, Vehicle) == 0x000000, "Member 'SQSoldier_ServerVehicleCollision::Vehicle' has a wrong offset!");
static_assert(offsetof(SQSoldier_ServerVehicleCollision, bShouldKill) == 0x000008, "Member 'SQSoldier_ServerVehicleCollision::bShouldKill' has a wrong offset!");

// Function Squad.SQSoldier.SetFirstPersonVisibility
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_SetFirstPersonVisibility final
{
public:
	bool                                          bIsFirstPersonVisible;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_SetFirstPersonVisibility) == 0x000001, "Wrong alignment on SQSoldier_SetFirstPersonVisibility");
static_assert(sizeof(SQSoldier_SetFirstPersonVisibility) == 0x000001, "Wrong size on SQSoldier_SetFirstPersonVisibility");
static_assert(offsetof(SQSoldier_SetFirstPersonVisibility, bIsFirstPersonVisible) == 0x000000, "Member 'SQSoldier_SetFirstPersonVisibility::bIsFirstPersonVisible' has a wrong offset!");

// Function Squad.SQSoldier.SetFullSuppressionRadius
// 0x0004 (0x0004 - 0x0000)
struct SQSoldier_SetFullSuppressionRadius final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_SetFullSuppressionRadius) == 0x000004, "Wrong alignment on SQSoldier_SetFullSuppressionRadius");
static_assert(sizeof(SQSoldier_SetFullSuppressionRadius) == 0x000004, "Wrong size on SQSoldier_SetFullSuppressionRadius");
static_assert(offsetof(SQSoldier_SetFullSuppressionRadius, Radius) == 0x000000, "Member 'SQSoldier_SetFullSuppressionRadius::Radius' has a wrong offset!");

// Function Squad.SQSoldier.SetIsHoldingBreath
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_SetIsHoldingBreath final
{
public:
	bool                                          bInIsHoldingBreath;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_SetIsHoldingBreath) == 0x000001, "Wrong alignment on SQSoldier_SetIsHoldingBreath");
static_assert(sizeof(SQSoldier_SetIsHoldingBreath) == 0x000001, "Wrong size on SQSoldier_SetIsHoldingBreath");
static_assert(offsetof(SQSoldier_SetIsHoldingBreath, bInIsHoldingBreath) == 0x000000, "Member 'SQSoldier_SetIsHoldingBreath::bInIsHoldingBreath' has a wrong offset!");

// Function Squad.SQSoldier.SetSeatState
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_SetSeatState final
{
public:
	ESQSoldierSeatState                           SoldierSeatState;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_SetSeatState) == 0x000001, "Wrong alignment on SQSoldier_SetSeatState");
static_assert(sizeof(SQSoldier_SetSeatState) == 0x000001, "Wrong size on SQSoldier_SetSeatState");
static_assert(offsetof(SQSoldier_SetSeatState, SoldierSeatState) == 0x000000, "Member 'SQSoldier_SetSeatState::SoldierSeatState' has a wrong offset!");

// Function Squad.SQSoldier.SetSuppressionRadius
// 0x0004 (0x0004 - 0x0000)
struct SQSoldier_SetSuppressionRadius final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_SetSuppressionRadius) == 0x000004, "Wrong alignment on SQSoldier_SetSuppressionRadius");
static_assert(sizeof(SQSoldier_SetSuppressionRadius) == 0x000004, "Wrong size on SQSoldier_SetSuppressionRadius");
static_assert(offsetof(SQSoldier_SetSuppressionRadius, Radius) == 0x000000, "Member 'SQSoldier_SetSuppressionRadius::Radius' has a wrong offset!");

// Function Squad.SQSoldier.StartBodyDragging
// 0x0010 (0x0010 - 0x0000)
struct SQSoldier_StartBodyDragging final
{
public:
	class ASQSoldier*                             SoldierToDrag;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoneIndex;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F3B[0x4];                                      // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSoldier_StartBodyDragging) == 0x000008, "Wrong alignment on SQSoldier_StartBodyDragging");
static_assert(sizeof(SQSoldier_StartBodyDragging) == 0x000010, "Wrong size on SQSoldier_StartBodyDragging");
static_assert(offsetof(SQSoldier_StartBodyDragging, SoldierToDrag) == 0x000000, "Member 'SQSoldier_StartBodyDragging::SoldierToDrag' has a wrong offset!");
static_assert(offsetof(SQSoldier_StartBodyDragging, BoneIndex) == 0x000008, "Member 'SQSoldier_StartBodyDragging::BoneIndex' has a wrong offset!");

// Function Squad.SQSoldier.SwitchedSeat
// 0x0010 (0x0010 - 0x0000)
struct SQSoldier_SwitchedSeat final
{
public:
	class USQVehicleSeatComponent*                PreviousSeat;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQVehicleSeatComponent*                NewSeat;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_SwitchedSeat) == 0x000008, "Wrong alignment on SQSoldier_SwitchedSeat");
static_assert(sizeof(SQSoldier_SwitchedSeat) == 0x000010, "Wrong size on SQSoldier_SwitchedSeat");
static_assert(offsetof(SQSoldier_SwitchedSeat, PreviousSeat) == 0x000000, "Member 'SQSoldier_SwitchedSeat::PreviousSeat' has a wrong offset!");
static_assert(offsetof(SQSoldier_SwitchedSeat, NewSeat) == 0x000008, "Member 'SQSoldier_SwitchedSeat::NewSeat' has a wrong offset!");

// Function Squad.SQSoldier.SwitchWeapon
// 0x0008 (0x0008 - 0x0000)
struct SQSoldier_SwitchWeapon final
{
public:
	int32                                         NewWeaponSlotla;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F3C[0x3];                                      // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSoldier_SwitchWeapon) == 0x000004, "Wrong alignment on SQSoldier_SwitchWeapon");
static_assert(sizeof(SQSoldier_SwitchWeapon) == 0x000008, "Wrong size on SQSoldier_SwitchWeapon");
static_assert(offsetof(SQSoldier_SwitchWeapon, NewWeaponSlotla) == 0x000000, "Member 'SQSoldier_SwitchWeapon::NewWeaponSlotla' has a wrong offset!");
static_assert(offsetof(SQSoldier_SwitchWeapon, ReturnValue) == 0x000004, "Member 'SQSoldier_SwitchWeapon::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.TickUpdateThirdPersonView
// 0x0004 (0x0004 - 0x0000)
struct SQSoldier_TickUpdateThirdPersonView final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_TickUpdateThirdPersonView) == 0x000004, "Wrong alignment on SQSoldier_TickUpdateThirdPersonView");
static_assert(sizeof(SQSoldier_TickUpdateThirdPersonView) == 0x000004, "Wrong size on SQSoldier_TickUpdateThirdPersonView");
static_assert(offsetof(SQSoldier_TickUpdateThirdPersonView, DeltaTime) == 0x000000, "Member 'SQSoldier_TickUpdateThirdPersonView::DeltaTime' has a wrong offset!");

// Function Squad.SQSoldier.Update1pCamStanceHeight
// 0x0004 (0x0004 - 0x0000)
struct SQSoldier_Update1pCamStanceHeight final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_Update1pCamStanceHeight) == 0x000004, "Wrong alignment on SQSoldier_Update1pCamStanceHeight");
static_assert(sizeof(SQSoldier_Update1pCamStanceHeight) == 0x000004, "Wrong size on SQSoldier_Update1pCamStanceHeight");
static_assert(offsetof(SQSoldier_Update1pCamStanceHeight, DeltaSeconds) == 0x000000, "Member 'SQSoldier_Update1pCamStanceHeight::DeltaSeconds' has a wrong offset!");

// Function Squad.SQSoldier.UpdateStaticItemInfo
// 0x0008 (0x0008 - 0x0000)
struct SQSoldier_UpdateStaticItemInfo final
{
public:
	class USQItemStaticInfo*                      InfoObject;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_UpdateStaticItemInfo) == 0x000008, "Wrong alignment on SQSoldier_UpdateStaticItemInfo");
static_assert(sizeof(SQSoldier_UpdateStaticItemInfo) == 0x000008, "Wrong size on SQSoldier_UpdateStaticItemInfo");
static_assert(offsetof(SQSoldier_UpdateStaticItemInfo, InfoObject) == 0x000000, "Member 'SQSoldier_UpdateStaticItemInfo::InfoObject' has a wrong offset!");

// Function Squad.SQSoldier.UserSettingsChanged
// 0x0008 (0x0008 - 0x0000)
struct SQSoldier_UserSettingsChanged final
{
public:
	const class USQGameUserSettings*              Settings;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_UserSettingsChanged) == 0x000008, "Wrong alignment on SQSoldier_UserSettingsChanged");
static_assert(sizeof(SQSoldier_UserSettingsChanged) == 0x000008, "Wrong size on SQSoldier_UserSettingsChanged");
static_assert(offsetof(SQSoldier_UserSettingsChanged, Settings) == 0x000000, "Member 'SQSoldier_UserSettingsChanged::Settings' has a wrong offset!");

// Function Squad.SQSoldier.Wound
// 0x0030 (0x0030 - 0x0000)
struct SQSoldier_Wound final
{
public:
	float                                         KillingDamage;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F3D[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           DamageEvent;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            Killer;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F3E[0x7];                                      // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSoldier_Wound) == 0x000008, "Wrong alignment on SQSoldier_Wound");
static_assert(sizeof(SQSoldier_Wound) == 0x000030, "Wrong size on SQSoldier_Wound");
static_assert(offsetof(SQSoldier_Wound, KillingDamage) == 0x000000, "Member 'SQSoldier_Wound::KillingDamage' has a wrong offset!");
static_assert(offsetof(SQSoldier_Wound, DamageEvent) == 0x000008, "Member 'SQSoldier_Wound::DamageEvent' has a wrong offset!");
static_assert(offsetof(SQSoldier_Wound, Killer) == 0x000018, "Member 'SQSoldier_Wound::Killer' has a wrong offset!");
static_assert(offsetof(SQSoldier_Wound, DamageCauser) == 0x000020, "Member 'SQSoldier_Wound::DamageCauser' has a wrong offset!");
static_assert(offsetof(SQSoldier_Wound, ReturnValue) == 0x000028, "Member 'SQSoldier_Wound::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.BPGetYawViewLimits
// 0x0010 (0x0010 - 0x0000)
struct SQSoldier_BPGetYawViewLimits final
{
public:
	struct FVector2D                              YawViewLimits;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_BPGetYawViewLimits) == 0x000004, "Wrong alignment on SQSoldier_BPGetYawViewLimits");
static_assert(sizeof(SQSoldier_BPGetYawViewLimits) == 0x000010, "Wrong size on SQSoldier_BPGetYawViewLimits");
static_assert(offsetof(SQSoldier_BPGetYawViewLimits, YawViewLimits) == 0x000000, "Member 'SQSoldier_BPGetYawViewLimits::YawViewLimits' has a wrong offset!");
static_assert(offsetof(SQSoldier_BPGetYawViewLimits, ReturnValue) == 0x000008, "Member 'SQSoldier_BPGetYawViewLimits::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.CanADS
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_CanADS final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_CanADS) == 0x000001, "Wrong alignment on SQSoldier_CanADS");
static_assert(sizeof(SQSoldier_CanADS) == 0x000001, "Wrong size on SQSoldier_CanADS");
static_assert(offsetof(SQSoldier_CanADS, ReturnValue) == 0x000000, "Member 'SQSoldier_CanADS::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.CanStartWithMaxAmmo
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_CanStartWithMaxAmmo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_CanStartWithMaxAmmo) == 0x000001, "Wrong alignment on SQSoldier_CanStartWithMaxAmmo");
static_assert(sizeof(SQSoldier_CanStartWithMaxAmmo) == 0x000001, "Wrong size on SQSoldier_CanStartWithMaxAmmo");
static_assert(offsetof(SQSoldier_CanStartWithMaxAmmo, ReturnValue) == 0x000000, "Member 'SQSoldier_CanStartWithMaxAmmo::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.CheckItemCollision
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_CheckItemCollision final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_CheckItemCollision) == 0x000001, "Wrong alignment on SQSoldier_CheckItemCollision");
static_assert(sizeof(SQSoldier_CheckItemCollision) == 0x000001, "Wrong size on SQSoldier_CheckItemCollision");
static_assert(offsetof(SQSoldier_CheckItemCollision, ReturnValue) == 0x000000, "Member 'SQSoldier_CheckItemCollision::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.FindPerStanceValues
// 0x0014 (0x0014 - 0x0000)
struct SQSoldier_FindPerStanceValues final
{
public:
	float                                         StandingValue;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrouchingValue;                                    // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProneValue;                                        // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BipodValue;                                        // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_FindPerStanceValues) == 0x000004, "Wrong alignment on SQSoldier_FindPerStanceValues");
static_assert(sizeof(SQSoldier_FindPerStanceValues) == 0x000014, "Wrong size on SQSoldier_FindPerStanceValues");
static_assert(offsetof(SQSoldier_FindPerStanceValues, StandingValue) == 0x000000, "Member 'SQSoldier_FindPerStanceValues::StandingValue' has a wrong offset!");
static_assert(offsetof(SQSoldier_FindPerStanceValues, CrouchingValue) == 0x000004, "Member 'SQSoldier_FindPerStanceValues::CrouchingValue' has a wrong offset!");
static_assert(offsetof(SQSoldier_FindPerStanceValues, ProneValue) == 0x000008, "Member 'SQSoldier_FindPerStanceValues::ProneValue' has a wrong offset!");
static_assert(offsetof(SQSoldier_FindPerStanceValues, BipodValue) == 0x00000C, "Member 'SQSoldier_FindPerStanceValues::BipodValue' has a wrong offset!");
static_assert(offsetof(SQSoldier_FindPerStanceValues, ReturnValue) == 0x000010, "Member 'SQSoldier_FindPerStanceValues::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.GetChestHeight
// 0x0010 (0x0010 - 0x0000)
struct SQSoldier_GetChestHeight final
{
public:
	struct FVector                                TestLocation;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_GetChestHeight) == 0x000004, "Wrong alignment on SQSoldier_GetChestHeight");
static_assert(sizeof(SQSoldier_GetChestHeight) == 0x000010, "Wrong size on SQSoldier_GetChestHeight");
static_assert(offsetof(SQSoldier_GetChestHeight, TestLocation) == 0x000000, "Member 'SQSoldier_GetChestHeight::TestLocation' has a wrong offset!");
static_assert(offsetof(SQSoldier_GetChestHeight, ReturnValue) == 0x00000C, "Member 'SQSoldier_GetChestHeight::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.GetCurrentHealthPercentage
// 0x0004 (0x0004 - 0x0000)
struct SQSoldier_GetCurrentHealthPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_GetCurrentHealthPercentage) == 0x000004, "Wrong alignment on SQSoldier_GetCurrentHealthPercentage");
static_assert(sizeof(SQSoldier_GetCurrentHealthPercentage) == 0x000004, "Wrong size on SQSoldier_GetCurrentHealthPercentage");
static_assert(offsetof(SQSoldier_GetCurrentHealthPercentage, ReturnValue) == 0x000000, "Member 'SQSoldier_GetCurrentHealthPercentage::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.GetCurrentSeat
// 0x0008 (0x0008 - 0x0000)
struct SQSoldier_GetCurrentSeat final
{
public:
	class USQVehicleSeatComponent*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_GetCurrentSeat) == 0x000008, "Wrong alignment on SQSoldier_GetCurrentSeat");
static_assert(sizeof(SQSoldier_GetCurrentSeat) == 0x000008, "Wrong size on SQSoldier_GetCurrentSeat");
static_assert(offsetof(SQSoldier_GetCurrentSeat, ReturnValue) == 0x000000, "Member 'SQSoldier_GetCurrentSeat::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.GetCurrentSeatPawn
// 0x0008 (0x0008 - 0x0000)
struct SQSoldier_GetCurrentSeatPawn final
{
public:
	class ASQVehicleSeat*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_GetCurrentSeatPawn) == 0x000008, "Wrong alignment on SQSoldier_GetCurrentSeatPawn");
static_assert(sizeof(SQSoldier_GetCurrentSeatPawn) == 0x000008, "Wrong size on SQSoldier_GetCurrentSeatPawn");
static_assert(offsetof(SQSoldier_GetCurrentSeatPawn, ReturnValue) == 0x000000, "Member 'SQSoldier_GetCurrentSeatPawn::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.GetCurrentSeatWeaponRotation
// 0x000C (0x000C - 0x0000)
struct SQSoldier_GetCurrentSeatWeaponRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_GetCurrentSeatWeaponRotation) == 0x000004, "Wrong alignment on SQSoldier_GetCurrentSeatWeaponRotation");
static_assert(sizeof(SQSoldier_GetCurrentSeatWeaponRotation) == 0x00000C, "Wrong size on SQSoldier_GetCurrentSeatWeaponRotation");
static_assert(offsetof(SQSoldier_GetCurrentSeatWeaponRotation, ReturnValue) == 0x000000, "Member 'SQSoldier_GetCurrentSeatWeaponRotation::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.GetCurrentSpeedPercentage
// 0x0004 (0x0004 - 0x0000)
struct SQSoldier_GetCurrentSpeedPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_GetCurrentSpeedPercentage) == 0x000004, "Wrong alignment on SQSoldier_GetCurrentSpeedPercentage");
static_assert(sizeof(SQSoldier_GetCurrentSpeedPercentage) == 0x000004, "Wrong size on SQSoldier_GetCurrentSpeedPercentage");
static_assert(offsetof(SQSoldier_GetCurrentSpeedPercentage, ReturnValue) == 0x000000, "Member 'SQSoldier_GetCurrentSpeedPercentage::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.GetCurrentVehicle
// 0x0008 (0x0008 - 0x0000)
struct SQSoldier_GetCurrentVehicle final
{
public:
	class ASQVehicle*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_GetCurrentVehicle) == 0x000008, "Wrong alignment on SQSoldier_GetCurrentVehicle");
static_assert(sizeof(SQSoldier_GetCurrentVehicle) == 0x000008, "Wrong size on SQSoldier_GetCurrentVehicle");
static_assert(offsetof(SQSoldier_GetCurrentVehicle, ReturnValue) == 0x000000, "Member 'SQSoldier_GetCurrentVehicle::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.GetCurrentWeapon
// 0x0008 (0x0008 - 0x0000)
struct SQSoldier_GetCurrentWeapon final
{
public:
	class ASQEquipableItem*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_GetCurrentWeapon) == 0x000008, "Wrong alignment on SQSoldier_GetCurrentWeapon");
static_assert(sizeof(SQSoldier_GetCurrentWeapon) == 0x000008, "Wrong size on SQSoldier_GetCurrentWeapon");
static_assert(offsetof(SQSoldier_GetCurrentWeapon, ReturnValue) == 0x000000, "Member 'SQSoldier_GetCurrentWeapon::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.GetFirstPersonVisibility
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_GetFirstPersonVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_GetFirstPersonVisibility) == 0x000001, "Wrong alignment on SQSoldier_GetFirstPersonVisibility");
static_assert(sizeof(SQSoldier_GetFirstPersonVisibility) == 0x000001, "Wrong size on SQSoldier_GetFirstPersonVisibility");
static_assert(offsetof(SQSoldier_GetFirstPersonVisibility, ReturnValue) == 0x000000, "Member 'SQSoldier_GetFirstPersonVisibility::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.GetFootHeight
// 0x0010 (0x0010 - 0x0000)
struct SQSoldier_GetFootHeight final
{
public:
	struct FVector                                TestLocation;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_GetFootHeight) == 0x000004, "Wrong alignment on SQSoldier_GetFootHeight");
static_assert(sizeof(SQSoldier_GetFootHeight) == 0x000010, "Wrong size on SQSoldier_GetFootHeight");
static_assert(offsetof(SQSoldier_GetFootHeight, TestLocation) == 0x000000, "Member 'SQSoldier_GetFootHeight::TestLocation' has a wrong offset!");
static_assert(offsetof(SQSoldier_GetFootHeight, ReturnValue) == 0x00000C, "Member 'SQSoldier_GetFootHeight::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.GetHeadHeight
// 0x0010 (0x0010 - 0x0000)
struct SQSoldier_GetHeadHeight final
{
public:
	struct FVector                                TestLocation;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_GetHeadHeight) == 0x000004, "Wrong alignment on SQSoldier_GetHeadHeight");
static_assert(sizeof(SQSoldier_GetHeadHeight) == 0x000010, "Wrong size on SQSoldier_GetHeadHeight");
static_assert(offsetof(SQSoldier_GetHeadHeight, TestLocation) == 0x000000, "Member 'SQSoldier_GetHeadHeight::TestLocation' has a wrong offset!");
static_assert(offsetof(SQSoldier_GetHeadHeight, ReturnValue) == 0x00000C, "Member 'SQSoldier_GetHeadHeight::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.GetHipHeight
// 0x0010 (0x0010 - 0x0000)
struct SQSoldier_GetHipHeight final
{
public:
	struct FVector                                TestLocation;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_GetHipHeight) == 0x000004, "Wrong alignment on SQSoldier_GetHipHeight");
static_assert(sizeof(SQSoldier_GetHipHeight) == 0x000010, "Wrong size on SQSoldier_GetHipHeight");
static_assert(offsetof(SQSoldier_GetHipHeight, TestLocation) == 0x000000, "Member 'SQSoldier_GetHipHeight::TestLocation' has a wrong offset!");
static_assert(offsetof(SQSoldier_GetHipHeight, ReturnValue) == 0x00000C, "Member 'SQSoldier_GetHipHeight::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.GetInventory
// 0x0008 (0x0008 - 0x0000)
struct SQSoldier_GetInventory final
{
public:
	class USQPawnInventoryComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_GetInventory) == 0x000008, "Wrong alignment on SQSoldier_GetInventory");
static_assert(sizeof(SQSoldier_GetInventory) == 0x000008, "Wrong size on SQSoldier_GetInventory");
static_assert(offsetof(SQSoldier_GetInventory, ReturnValue) == 0x000000, "Member 'SQSoldier_GetInventory::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.GetKneeHeight
// 0x0010 (0x0010 - 0x0000)
struct SQSoldier_GetKneeHeight final
{
public:
	struct FVector                                TestLocation;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_GetKneeHeight) == 0x000004, "Wrong alignment on SQSoldier_GetKneeHeight");
static_assert(sizeof(SQSoldier_GetKneeHeight) == 0x000010, "Wrong size on SQSoldier_GetKneeHeight");
static_assert(offsetof(SQSoldier_GetKneeHeight, TestLocation) == 0x000000, "Member 'SQSoldier_GetKneeHeight::TestLocation' has a wrong offset!");
static_assert(offsetof(SQSoldier_GetKneeHeight, ReturnValue) == 0x00000C, "Member 'SQSoldier_GetKneeHeight::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.GetMaxHealth
// 0x0004 (0x0004 - 0x0000)
struct SQSoldier_GetMaxHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_GetMaxHealth) == 0x000004, "Wrong alignment on SQSoldier_GetMaxHealth");
static_assert(sizeof(SQSoldier_GetMaxHealth) == 0x000004, "Wrong size on SQSoldier_GetMaxHealth");
static_assert(offsetof(SQSoldier_GetMaxHealth, ReturnValue) == 0x000000, "Member 'SQSoldier_GetMaxHealth::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.GetPendingWeapon
// 0x0008 (0x0008 - 0x0000)
struct SQSoldier_GetPendingWeapon final
{
public:
	class ASQEquipableItem*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_GetPendingWeapon) == 0x000008, "Wrong alignment on SQSoldier_GetPendingWeapon");
static_assert(sizeof(SQSoldier_GetPendingWeapon) == 0x000008, "Wrong size on SQSoldier_GetPendingWeapon");
static_assert(offsetof(SQSoldier_GetPendingWeapon, ReturnValue) == 0x000000, "Member 'SQSoldier_GetPendingWeapon::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.GetTeam
// 0x0004 (0x0004 - 0x0000)
struct SQSoldier_GetTeam final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_GetTeam) == 0x000004, "Wrong alignment on SQSoldier_GetTeam");
static_assert(sizeof(SQSoldier_GetTeam) == 0x000004, "Wrong size on SQSoldier_GetTeam");
static_assert(offsetof(SQSoldier_GetTeam, ReturnValue) == 0x000000, "Member 'SQSoldier_GetTeam::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.GetTeamState
// 0x0008 (0x0008 - 0x0000)
struct SQSoldier_GetTeamState final
{
public:
	class ASQTeamState*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_GetTeamState) == 0x000008, "Wrong alignment on SQSoldier_GetTeamState");
static_assert(sizeof(SQSoldier_GetTeamState) == 0x000008, "Wrong size on SQSoldier_GetTeamState");
static_assert(offsetof(SQSoldier_GetTeamState, ReturnValue) == 0x000000, "Member 'SQSoldier_GetTeamState::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.IsAlive
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_IsAlive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_IsAlive) == 0x000001, "Wrong alignment on SQSoldier_IsAlive");
static_assert(sizeof(SQSoldier_IsAlive) == 0x000001, "Wrong size on SQSoldier_IsAlive");
static_assert(offsetof(SQSoldier_IsAlive, ReturnValue) == 0x000000, "Member 'SQSoldier_IsAlive::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.IsBeingDragged
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_IsBeingDragged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_IsBeingDragged) == 0x000001, "Wrong alignment on SQSoldier_IsBeingDragged");
static_assert(sizeof(SQSoldier_IsBeingDragged) == 0x000001, "Wrong size on SQSoldier_IsBeingDragged");
static_assert(offsetof(SQSoldier_IsBeingDragged, ReturnValue) == 0x000000, "Member 'SQSoldier_IsBeingDragged::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.IsClimbing
// 0x0002 (0x0002 - 0x0000)
struct SQSoldier_IsClimbing final
{
public:
	bool                                          bRequiredOnly;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_IsClimbing) == 0x000001, "Wrong alignment on SQSoldier_IsClimbing");
static_assert(sizeof(SQSoldier_IsClimbing) == 0x000002, "Wrong size on SQSoldier_IsClimbing");
static_assert(offsetof(SQSoldier_IsClimbing, bRequiredOnly) == 0x000000, "Member 'SQSoldier_IsClimbing::bRequiredOnly' has a wrong offset!");
static_assert(offsetof(SQSoldier_IsClimbing, ReturnValue) == 0x000001, "Member 'SQSoldier_IsClimbing::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.IsDragging
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_IsDragging final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_IsDragging) == 0x000001, "Wrong alignment on SQSoldier_IsDragging");
static_assert(sizeof(SQSoldier_IsDragging) == 0x000001, "Wrong size on SQSoldier_IsDragging");
static_assert(offsetof(SQSoldier_IsDragging, ReturnValue) == 0x000000, "Member 'SQSoldier_IsDragging::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.IsFirstPersonViewTarget
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_IsFirstPersonViewTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_IsFirstPersonViewTarget) == 0x000001, "Wrong alignment on SQSoldier_IsFirstPersonViewTarget");
static_assert(sizeof(SQSoldier_IsFirstPersonViewTarget) == 0x000001, "Wrong size on SQSoldier_IsFirstPersonViewTarget");
static_assert(offsetof(SQSoldier_IsFirstPersonViewTarget, ReturnValue) == 0x000000, "Member 'SQSoldier_IsFirstPersonViewTarget::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.IsImmersedPastChestHeight
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_IsImmersedPastChestHeight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_IsImmersedPastChestHeight) == 0x000001, "Wrong alignment on SQSoldier_IsImmersedPastChestHeight");
static_assert(sizeof(SQSoldier_IsImmersedPastChestHeight) == 0x000001, "Wrong size on SQSoldier_IsImmersedPastChestHeight");
static_assert(offsetof(SQSoldier_IsImmersedPastChestHeight, ReturnValue) == 0x000000, "Member 'SQSoldier_IsImmersedPastChestHeight::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.IsImmersedPastFootHeight
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_IsImmersedPastFootHeight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_IsImmersedPastFootHeight) == 0x000001, "Wrong alignment on SQSoldier_IsImmersedPastFootHeight");
static_assert(sizeof(SQSoldier_IsImmersedPastFootHeight) == 0x000001, "Wrong size on SQSoldier_IsImmersedPastFootHeight");
static_assert(offsetof(SQSoldier_IsImmersedPastFootHeight, ReturnValue) == 0x000000, "Member 'SQSoldier_IsImmersedPastFootHeight::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.IsImmersedPastHeadHeight
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_IsImmersedPastHeadHeight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_IsImmersedPastHeadHeight) == 0x000001, "Wrong alignment on SQSoldier_IsImmersedPastHeadHeight");
static_assert(sizeof(SQSoldier_IsImmersedPastHeadHeight) == 0x000001, "Wrong size on SQSoldier_IsImmersedPastHeadHeight");
static_assert(offsetof(SQSoldier_IsImmersedPastHeadHeight, ReturnValue) == 0x000000, "Member 'SQSoldier_IsImmersedPastHeadHeight::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.IsImmersedPastHipHeight
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_IsImmersedPastHipHeight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_IsImmersedPastHipHeight) == 0x000001, "Wrong alignment on SQSoldier_IsImmersedPastHipHeight");
static_assert(sizeof(SQSoldier_IsImmersedPastHipHeight) == 0x000001, "Wrong size on SQSoldier_IsImmersedPastHipHeight");
static_assert(offsetof(SQSoldier_IsImmersedPastHipHeight, ReturnValue) == 0x000000, "Member 'SQSoldier_IsImmersedPastHipHeight::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.IsImmersedPastKneeHeight
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_IsImmersedPastKneeHeight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_IsImmersedPastKneeHeight) == 0x000001, "Wrong alignment on SQSoldier_IsImmersedPastKneeHeight");
static_assert(sizeof(SQSoldier_IsImmersedPastKneeHeight) == 0x000001, "Wrong size on SQSoldier_IsImmersedPastKneeHeight");
static_assert(offsetof(SQSoldier_IsImmersedPastKneeHeight, ReturnValue) == 0x000000, "Member 'SQSoldier_IsImmersedPastKneeHeight::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.IsInteracting
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_IsInteracting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_IsInteracting) == 0x000001, "Wrong alignment on SQSoldier_IsInteracting");
static_assert(sizeof(SQSoldier_IsInteracting) == 0x000001, "Wrong size on SQSoldier_IsInteracting");
static_assert(offsetof(SQSoldier_IsInteracting, ReturnValue) == 0x000000, "Member 'SQSoldier_IsInteracting::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.IsInVehicle
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_IsInVehicle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_IsInVehicle) == 0x000001, "Wrong alignment on SQSoldier_IsInVehicle");
static_assert(sizeof(SQSoldier_IsInVehicle) == 0x000001, "Wrong size on SQSoldier_IsInVehicle");
static_assert(offsetof(SQSoldier_IsInVehicle, ReturnValue) == 0x000000, "Member 'SQSoldier_IsInVehicle::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.IsOutOfMapBounds
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_IsOutOfMapBounds final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_IsOutOfMapBounds) == 0x000001, "Wrong alignment on SQSoldier_IsOutOfMapBounds");
static_assert(sizeof(SQSoldier_IsOutOfMapBounds) == 0x000001, "Wrong size on SQSoldier_IsOutOfMapBounds");
static_assert(offsetof(SQSoldier_IsOutOfMapBounds, ReturnValue) == 0x000000, "Member 'SQSoldier_IsOutOfMapBounds::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.IsProneTransitioning
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_IsProneTransitioning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_IsProneTransitioning) == 0x000001, "Wrong alignment on SQSoldier_IsProneTransitioning");
static_assert(sizeof(SQSoldier_IsProneTransitioning) == 0x000001, "Wrong size on SQSoldier_IsProneTransitioning");
static_assert(offsetof(SQSoldier_IsProneTransitioning, ReturnValue) == 0x000000, "Member 'SQSoldier_IsProneTransitioning::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.IsPullingTriggerOnWeapon
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_IsPullingTriggerOnWeapon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_IsPullingTriggerOnWeapon) == 0x000001, "Wrong alignment on SQSoldier_IsPullingTriggerOnWeapon");
static_assert(sizeof(SQSoldier_IsPullingTriggerOnWeapon) == 0x000001, "Wrong size on SQSoldier_IsPullingTriggerOnWeapon");
static_assert(offsetof(SQSoldier_IsPullingTriggerOnWeapon, ReturnValue) == 0x000000, "Member 'SQSoldier_IsPullingTriggerOnWeapon::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.IsSprinting
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_IsSprinting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_IsSprinting) == 0x000001, "Wrong alignment on SQSoldier_IsSprinting");
static_assert(sizeof(SQSoldier_IsSprinting) == 0x000001, "Wrong size on SQSoldier_IsSprinting");
static_assert(offsetof(SQSoldier_IsSprinting, ReturnValue) == 0x000000, "Member 'SQSoldier_IsSprinting::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.IsWeaponLowered
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_IsWeaponLowered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_IsWeaponLowered) == 0x000001, "Wrong alignment on SQSoldier_IsWeaponLowered");
static_assert(sizeof(SQSoldier_IsWeaponLowered) == 0x000001, "Wrong size on SQSoldier_IsWeaponLowered");
static_assert(offsetof(SQSoldier_IsWeaponLowered, ReturnValue) == 0x000000, "Member 'SQSoldier_IsWeaponLowered::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldier.WeaponMagazineHasAmmo
// 0x0001 (0x0001 - 0x0000)
struct SQSoldier_WeaponMagazineHasAmmo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldier_WeaponMagazineHasAmmo) == 0x000001, "Wrong alignment on SQSoldier_WeaponMagazineHasAmmo");
static_assert(sizeof(SQSoldier_WeaponMagazineHasAmmo) == 0x000001, "Wrong size on SQSoldier_WeaponMagazineHasAmmo");
static_assert(offsetof(SQSoldier_WeaponMagazineHasAmmo, ReturnValue) == 0x000000, "Member 'SQSoldier_WeaponMagazineHasAmmo::ReturnValue' has a wrong offset!");

// Function Squad.SQBoundaryListener.OnEnterBoundary
// 0x0008 (0x0008 - 0x0000)
struct SQBoundaryListener_OnEnterBoundary final
{
public:
	class ASQBoundary*                            Boundary;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBoundaryListener_OnEnterBoundary) == 0x000008, "Wrong alignment on SQBoundaryListener_OnEnterBoundary");
static_assert(sizeof(SQBoundaryListener_OnEnterBoundary) == 0x000008, "Wrong size on SQBoundaryListener_OnEnterBoundary");
static_assert(offsetof(SQBoundaryListener_OnEnterBoundary, Boundary) == 0x000000, "Member 'SQBoundaryListener_OnEnterBoundary::Boundary' has a wrong offset!");

// Function Squad.SQBoundaryListener.OnExitBoundary
// 0x0008 (0x0008 - 0x0000)
struct SQBoundaryListener_OnExitBoundary final
{
public:
	class ASQBoundary*                            Boundary;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBoundaryListener_OnExitBoundary) == 0x000008, "Wrong alignment on SQBoundaryListener_OnExitBoundary");
static_assert(sizeof(SQBoundaryListener_OnExitBoundary) == 0x000008, "Wrong size on SQBoundaryListener_OnExitBoundary");
static_assert(offsetof(SQBoundaryListener_OnExitBoundary, Boundary) == 0x000000, "Member 'SQBoundaryListener_OnExitBoundary::Boundary' has a wrong offset!");

// Function Squad.SQBoundaryListener.GetActor
// 0x0008 (0x0008 - 0x0000)
struct SQBoundaryListener_GetActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBoundaryListener_GetActor) == 0x000008, "Wrong alignment on SQBoundaryListener_GetActor");
static_assert(sizeof(SQBoundaryListener_GetActor) == 0x000008, "Wrong size on SQBoundaryListener_GetActor");
static_assert(offsetof(SQBoundaryListener_GetActor, ReturnValue) == 0x000000, "Member 'SQBoundaryListener_GetActor::ReturnValue' has a wrong offset!");

// Function Squad.SQBoundaryListener.ShouldRegisterToBoundary
// 0x0010 (0x0010 - 0x0000)
struct SQBoundaryListener_ShouldRegisterToBoundary final
{
public:
	const class ASQBoundary*                      Boundary;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F45[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBoundaryListener_ShouldRegisterToBoundary) == 0x000008, "Wrong alignment on SQBoundaryListener_ShouldRegisterToBoundary");
static_assert(sizeof(SQBoundaryListener_ShouldRegisterToBoundary) == 0x000010, "Wrong size on SQBoundaryListener_ShouldRegisterToBoundary");
static_assert(offsetof(SQBoundaryListener_ShouldRegisterToBoundary, Boundary) == 0x000000, "Member 'SQBoundaryListener_ShouldRegisterToBoundary::Boundary' has a wrong offset!");
static_assert(offsetof(SQBoundaryListener_ShouldRegisterToBoundary, ReturnValue) == 0x000008, "Member 'SQBoundaryListener_ShouldRegisterToBoundary::ReturnValue' has a wrong offset!");

// Function Squad.SQRestriction.TryGetLocalFOB
// 0x0018 (0x0018 - 0x0000)
struct SQRestriction_TryGetLocalFOB final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQForwardBase*                         OutFOB;                                            // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F46[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRestriction_TryGetLocalFOB) == 0x000008, "Wrong alignment on SQRestriction_TryGetLocalFOB");
static_assert(sizeof(SQRestriction_TryGetLocalFOB) == 0x000018, "Wrong size on SQRestriction_TryGetLocalFOB");
static_assert(offsetof(SQRestriction_TryGetLocalFOB, InPlayer) == 0x000000, "Member 'SQRestriction_TryGetLocalFOB::InPlayer' has a wrong offset!");
static_assert(offsetof(SQRestriction_TryGetLocalFOB, OutFOB) == 0x000008, "Member 'SQRestriction_TryGetLocalFOB::OutFOB' has a wrong offset!");
static_assert(offsetof(SQRestriction_TryGetLocalFOB, ReturnValue) == 0x000010, "Member 'SQRestriction_TryGetLocalFOB::ReturnValue' has a wrong offset!");

// Function Squad.SQRestriction.TryGetLocalVehicle
// 0x0018 (0x0018 - 0x0000)
struct SQRestriction_TryGetLocalVehicle final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQVehicle*                             OutVehicle;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F47[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRestriction_TryGetLocalVehicle) == 0x000008, "Wrong alignment on SQRestriction_TryGetLocalVehicle");
static_assert(sizeof(SQRestriction_TryGetLocalVehicle) == 0x000018, "Wrong size on SQRestriction_TryGetLocalVehicle");
static_assert(offsetof(SQRestriction_TryGetLocalVehicle, InPlayer) == 0x000000, "Member 'SQRestriction_TryGetLocalVehicle::InPlayer' has a wrong offset!");
static_assert(offsetof(SQRestriction_TryGetLocalVehicle, OutVehicle) == 0x000008, "Member 'SQRestriction_TryGetLocalVehicle::OutVehicle' has a wrong offset!");
static_assert(offsetof(SQRestriction_TryGetLocalVehicle, ReturnValue) == 0x000010, "Member 'SQRestriction_TryGetLocalVehicle::ReturnValue' has a wrong offset!");

// Function Squad.SQRestriction.GetRestrictionReason
// 0x0018 (0x0018 - 0x0000)
struct SQRestriction_GetRestrictionReason final
{
public:
	struct FDataTableRowHandle                    OutRestrictionReason;                              // 0x0000(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F48[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRestriction_GetRestrictionReason) == 0x000008, "Wrong alignment on SQRestriction_GetRestrictionReason");
static_assert(sizeof(SQRestriction_GetRestrictionReason) == 0x000018, "Wrong size on SQRestriction_GetRestrictionReason");
static_assert(offsetof(SQRestriction_GetRestrictionReason, OutRestrictionReason) == 0x000000, "Member 'SQRestriction_GetRestrictionReason::OutRestrictionReason' has a wrong offset!");
static_assert(offsetof(SQRestriction_GetRestrictionReason, ReturnValue) == 0x000010, "Member 'SQRestriction_GetRestrictionReason::ReturnValue' has a wrong offset!");

// Function Squad.SQRestriction_Delay_Base.GetDefaultDelay
// 0x0008 (0x0008 - 0x0000)
struct SQRestriction_Delay_Base_GetDefaultDelay final
{
public:
	struct FTimespan                              OutDefaultDelay;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRestriction_Delay_Base_GetDefaultDelay) == 0x000008, "Wrong alignment on SQRestriction_Delay_Base_GetDefaultDelay");
static_assert(sizeof(SQRestriction_Delay_Base_GetDefaultDelay) == 0x000008, "Wrong size on SQRestriction_Delay_Base_GetDefaultDelay");
static_assert(offsetof(SQRestriction_Delay_Base_GetDefaultDelay, OutDefaultDelay) == 0x000000, "Member 'SQRestriction_Delay_Base_GetDefaultDelay::OutDefaultDelay' has a wrong offset!");

// Function Squad.SQRestriction_Delay_Base.HasInitialDelay
// 0x0030 (0x0030 - 0x0000)
struct SQRestriction_Delay_Base_HasInitialDelay final
{
public:
	class ASQTeam*                                InTeam;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              OutInitialDelay;                                   // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutDelayedUsage;                                   // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F49[0x4];                                      // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    OutDelayReason;                                    // 0x0018(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4A[0x7];                                      // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRestriction_Delay_Base_HasInitialDelay) == 0x000008, "Wrong alignment on SQRestriction_Delay_Base_HasInitialDelay");
static_assert(sizeof(SQRestriction_Delay_Base_HasInitialDelay) == 0x000030, "Wrong size on SQRestriction_Delay_Base_HasInitialDelay");
static_assert(offsetof(SQRestriction_Delay_Base_HasInitialDelay, InTeam) == 0x000000, "Member 'SQRestriction_Delay_Base_HasInitialDelay::InTeam' has a wrong offset!");
static_assert(offsetof(SQRestriction_Delay_Base_HasInitialDelay, OutInitialDelay) == 0x000008, "Member 'SQRestriction_Delay_Base_HasInitialDelay::OutInitialDelay' has a wrong offset!");
static_assert(offsetof(SQRestriction_Delay_Base_HasInitialDelay, OutDelayedUsage) == 0x000010, "Member 'SQRestriction_Delay_Base_HasInitialDelay::OutDelayedUsage' has a wrong offset!");
static_assert(offsetof(SQRestriction_Delay_Base_HasInitialDelay, OutDelayReason) == 0x000018, "Member 'SQRestriction_Delay_Base_HasInitialDelay::OutDelayReason' has a wrong offset!");
static_assert(offsetof(SQRestriction_Delay_Base_HasInitialDelay, ReturnValue) == 0x000028, "Member 'SQRestriction_Delay_Base_HasInitialDelay::ReturnValue' has a wrong offset!");

// Function Squad.SQRestriction_Delay_Base.OnPlayerAddUsage
// 0x0028 (0x0028 - 0x0000)
struct SQRestriction_Delay_Base_OnPlayerAddUsage final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              OutNextAvailabilityDelay;                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    OutDelayReason;                                    // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4B[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRestriction_Delay_Base_OnPlayerAddUsage) == 0x000008, "Wrong alignment on SQRestriction_Delay_Base_OnPlayerAddUsage");
static_assert(sizeof(SQRestriction_Delay_Base_OnPlayerAddUsage) == 0x000028, "Wrong size on SQRestriction_Delay_Base_OnPlayerAddUsage");
static_assert(offsetof(SQRestriction_Delay_Base_OnPlayerAddUsage, InPlayer) == 0x000000, "Member 'SQRestriction_Delay_Base_OnPlayerAddUsage::InPlayer' has a wrong offset!");
static_assert(offsetof(SQRestriction_Delay_Base_OnPlayerAddUsage, OutNextAvailabilityDelay) == 0x000008, "Member 'SQRestriction_Delay_Base_OnPlayerAddUsage::OutNextAvailabilityDelay' has a wrong offset!");
static_assert(offsetof(SQRestriction_Delay_Base_OnPlayerAddUsage, OutDelayReason) == 0x000010, "Member 'SQRestriction_Delay_Base_OnPlayerAddUsage::OutDelayReason' has a wrong offset!");
static_assert(offsetof(SQRestriction_Delay_Base_OnPlayerAddUsage, ReturnValue) == 0x000020, "Member 'SQRestriction_Delay_Base_OnPlayerAddUsage::ReturnValue' has a wrong offset!");

// Function Squad.SQRestriction_Delay_Base.OnPlayerRemoveUsage
// 0x0028 (0x0028 - 0x0000)
struct SQRestriction_Delay_Base_OnPlayerRemoveUsage final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              OutNextAvailabilityDelay;                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    OutDelayReason;                                    // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4C[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRestriction_Delay_Base_OnPlayerRemoveUsage) == 0x000008, "Wrong alignment on SQRestriction_Delay_Base_OnPlayerRemoveUsage");
static_assert(sizeof(SQRestriction_Delay_Base_OnPlayerRemoveUsage) == 0x000028, "Wrong size on SQRestriction_Delay_Base_OnPlayerRemoveUsage");
static_assert(offsetof(SQRestriction_Delay_Base_OnPlayerRemoveUsage, InPlayer) == 0x000000, "Member 'SQRestriction_Delay_Base_OnPlayerRemoveUsage::InPlayer' has a wrong offset!");
static_assert(offsetof(SQRestriction_Delay_Base_OnPlayerRemoveUsage, OutNextAvailabilityDelay) == 0x000008, "Member 'SQRestriction_Delay_Base_OnPlayerRemoveUsage::OutNextAvailabilityDelay' has a wrong offset!");
static_assert(offsetof(SQRestriction_Delay_Base_OnPlayerRemoveUsage, OutDelayReason) == 0x000010, "Member 'SQRestriction_Delay_Base_OnPlayerRemoveUsage::OutDelayReason' has a wrong offset!");
static_assert(offsetof(SQRestriction_Delay_Base_OnPlayerRemoveUsage, ReturnValue) == 0x000020, "Member 'SQRestriction_Delay_Base_OnPlayerRemoveUsage::ReturnValue' has a wrong offset!");

// Function Squad.SQRestriction_Delay_Base.OnTeamAddUsage
// 0x0028 (0x0028 - 0x0000)
struct SQRestriction_Delay_Base_OnTeamAddUsage final
{
public:
	class ASQTeam*                                InTeam;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              OutNextAvailabilityDelay;                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    OutDelayReason;                                    // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4D[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRestriction_Delay_Base_OnTeamAddUsage) == 0x000008, "Wrong alignment on SQRestriction_Delay_Base_OnTeamAddUsage");
static_assert(sizeof(SQRestriction_Delay_Base_OnTeamAddUsage) == 0x000028, "Wrong size on SQRestriction_Delay_Base_OnTeamAddUsage");
static_assert(offsetof(SQRestriction_Delay_Base_OnTeamAddUsage, InTeam) == 0x000000, "Member 'SQRestriction_Delay_Base_OnTeamAddUsage::InTeam' has a wrong offset!");
static_assert(offsetof(SQRestriction_Delay_Base_OnTeamAddUsage, OutNextAvailabilityDelay) == 0x000008, "Member 'SQRestriction_Delay_Base_OnTeamAddUsage::OutNextAvailabilityDelay' has a wrong offset!");
static_assert(offsetof(SQRestriction_Delay_Base_OnTeamAddUsage, OutDelayReason) == 0x000010, "Member 'SQRestriction_Delay_Base_OnTeamAddUsage::OutDelayReason' has a wrong offset!");
static_assert(offsetof(SQRestriction_Delay_Base_OnTeamAddUsage, ReturnValue) == 0x000020, "Member 'SQRestriction_Delay_Base_OnTeamAddUsage::ReturnValue' has a wrong offset!");

// Function Squad.SQRestriction_Delay_Base.OnTeamRemoveUsage
// 0x0028 (0x0028 - 0x0000)
struct SQRestriction_Delay_Base_OnTeamRemoveUsage final
{
public:
	class ASQTeam*                                InTeam;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              OutNextAvailabilityDelay;                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    OutDelayReason;                                    // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4E[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRestriction_Delay_Base_OnTeamRemoveUsage) == 0x000008, "Wrong alignment on SQRestriction_Delay_Base_OnTeamRemoveUsage");
static_assert(sizeof(SQRestriction_Delay_Base_OnTeamRemoveUsage) == 0x000028, "Wrong size on SQRestriction_Delay_Base_OnTeamRemoveUsage");
static_assert(offsetof(SQRestriction_Delay_Base_OnTeamRemoveUsage, InTeam) == 0x000000, "Member 'SQRestriction_Delay_Base_OnTeamRemoveUsage::InTeam' has a wrong offset!");
static_assert(offsetof(SQRestriction_Delay_Base_OnTeamRemoveUsage, OutNextAvailabilityDelay) == 0x000008, "Member 'SQRestriction_Delay_Base_OnTeamRemoveUsage::OutNextAvailabilityDelay' has a wrong offset!");
static_assert(offsetof(SQRestriction_Delay_Base_OnTeamRemoveUsage, OutDelayReason) == 0x000010, "Member 'SQRestriction_Delay_Base_OnTeamRemoveUsage::OutDelayReason' has a wrong offset!");
static_assert(offsetof(SQRestriction_Delay_Base_OnTeamRemoveUsage, ReturnValue) == 0x000020, "Member 'SQRestriction_Delay_Base_OnTeamRemoveUsage::ReturnValue' has a wrong offset!");

// Function Squad.SQBoundary.FindListenerData
// 0x0020 (0x0020 - 0x0000)
struct SQBoundary_FindListenerData final
{
public:
	class USQBoundaryListener*                    Listener;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutFound;                                         // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F56[0x3];                                      // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQBoundaryListenerData                ReturnValue;                                       // 0x000C(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBoundary_FindListenerData) == 0x000008, "Wrong alignment on SQBoundary_FindListenerData");
static_assert(sizeof(SQBoundary_FindListenerData) == 0x000020, "Wrong size on SQBoundary_FindListenerData");
static_assert(offsetof(SQBoundary_FindListenerData, Listener) == 0x000000, "Member 'SQBoundary_FindListenerData::Listener' has a wrong offset!");
static_assert(offsetof(SQBoundary_FindListenerData, bOutFound) == 0x000008, "Member 'SQBoundary_FindListenerData::bOutFound' has a wrong offset!");
static_assert(offsetof(SQBoundary_FindListenerData, ReturnValue) == 0x00000C, "Member 'SQBoundary_FindListenerData::ReturnValue' has a wrong offset!");

// Function Squad.SQBoundary.GetXYBoundaryBounds
// 0x001C (0x001C - 0x0000)
struct SQBoundary_GetXYBoundaryBounds final
{
public:
	struct FBoxSphereBounds                       ReturnValue;                                       // 0x0000(0x001C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBoundary_GetXYBoundaryBounds) == 0x000004, "Wrong alignment on SQBoundary_GetXYBoundaryBounds");
static_assert(sizeof(SQBoundary_GetXYBoundaryBounds) == 0x00001C, "Wrong size on SQBoundary_GetXYBoundaryBounds");
static_assert(offsetof(SQBoundary_GetXYBoundaryBounds, ReturnValue) == 0x000000, "Member 'SQBoundary_GetXYBoundaryBounds::ReturnValue' has a wrong offset!");

// Function Squad.SQBoundary.IsInside
// 0x0010 (0x0010 - 0x0000)
struct SQBoundary_IsInside final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F57[0x3];                                      // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBoundary_IsInside) == 0x000004, "Wrong alignment on SQBoundary_IsInside");
static_assert(sizeof(SQBoundary_IsInside) == 0x000010, "Wrong size on SQBoundary_IsInside");
static_assert(offsetof(SQBoundary_IsInside, Location) == 0x000000, "Member 'SQBoundary_IsInside::Location' has a wrong offset!");
static_assert(offsetof(SQBoundary_IsInside, ReturnValue) == 0x00000C, "Member 'SQBoundary_IsInside::ReturnValue' has a wrong offset!");

// Function Squad.SQBoundary.OnListenerEnterBoundary
// 0x0008 (0x0008 - 0x0000)
struct SQBoundary_OnListenerEnterBoundary final
{
public:
	class USQBoundaryListener*                    Listener;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBoundary_OnListenerEnterBoundary) == 0x000008, "Wrong alignment on SQBoundary_OnListenerEnterBoundary");
static_assert(sizeof(SQBoundary_OnListenerEnterBoundary) == 0x000008, "Wrong size on SQBoundary_OnListenerEnterBoundary");
static_assert(offsetof(SQBoundary_OnListenerEnterBoundary, Listener) == 0x000000, "Member 'SQBoundary_OnListenerEnterBoundary::Listener' has a wrong offset!");

// Function Squad.SQBoundary.OnListenerExitBoundary
// 0x0008 (0x0008 - 0x0000)
struct SQBoundary_OnListenerExitBoundary final
{
public:
	class USQBoundaryListener*                    Listener;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBoundary_OnListenerExitBoundary) == 0x000008, "Wrong alignment on SQBoundary_OnListenerExitBoundary");
static_assert(sizeof(SQBoundary_OnListenerExitBoundary) == 0x000008, "Wrong size on SQBoundary_OnListenerExitBoundary");
static_assert(offsetof(SQBoundary_OnListenerExitBoundary, Listener) == 0x000000, "Member 'SQBoundary_OnListenerExitBoundary::Listener' has a wrong offset!");

// Function Squad.SQBoundary.RegisterListener
// 0x0010 (0x0010 - 0x0000)
struct SQBoundary_RegisterListener final
{
public:
	class USQBoundaryListener*                    Listener;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F58[0x6];                                      // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBoundary_RegisterListener) == 0x000008, "Wrong alignment on SQBoundary_RegisterListener");
static_assert(sizeof(SQBoundary_RegisterListener) == 0x000010, "Wrong size on SQBoundary_RegisterListener");
static_assert(offsetof(SQBoundary_RegisterListener, Listener) == 0x000000, "Member 'SQBoundary_RegisterListener::Listener' has a wrong offset!");
static_assert(offsetof(SQBoundary_RegisterListener, bForce) == 0x000008, "Member 'SQBoundary_RegisterListener::bForce' has a wrong offset!");
static_assert(offsetof(SQBoundary_RegisterListener, ReturnValue) == 0x000009, "Member 'SQBoundary_RegisterListener::ReturnValue' has a wrong offset!");

// Function Squad.SQBoundary.UnregisterListener
// 0x0010 (0x0010 - 0x0000)
struct SQBoundary_UnregisterListener final
{
public:
	class USQBoundaryListener*                    Listener;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F59[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQBoundary_UnregisterListener) == 0x000008, "Wrong alignment on SQBoundary_UnregisterListener");
static_assert(sizeof(SQBoundary_UnregisterListener) == 0x000010, "Wrong size on SQBoundary_UnregisterListener");
static_assert(offsetof(SQBoundary_UnregisterListener, Listener) == 0x000000, "Member 'SQBoundary_UnregisterListener::Listener' has a wrong offset!");
static_assert(offsetof(SQBoundary_UnregisterListener, ReturnValue) == 0x000008, "Member 'SQBoundary_UnregisterListener::ReturnValue' has a wrong offset!");

// Function Squad.SQBPFL_UI.CopyToClipboard
// 0x0010 (0x0010 - 0x0000)
struct SQBPFL_UI_CopyToClipboard final
{
public:
	class FString                                 ToText;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBPFL_UI_CopyToClipboard) == 0x000008, "Wrong alignment on SQBPFL_UI_CopyToClipboard");
static_assert(sizeof(SQBPFL_UI_CopyToClipboard) == 0x000010, "Wrong size on SQBPFL_UI_CopyToClipboard");
static_assert(offsetof(SQBPFL_UI_CopyToClipboard, ToText) == 0x000000, "Member 'SQBPFL_UI_CopyToClipboard::ToText' has a wrong offset!");

// Function Squad.SQBuffManager.ApplyBuff
// 0x0008 (0x0008 - 0x0000)
struct SQBuffManager_ApplyBuff final
{
public:
	ESQBuffTypes                                  BuffTypeToApply;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F5A[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBuffManager_ApplyBuff) == 0x000004, "Wrong alignment on SQBuffManager_ApplyBuff");
static_assert(sizeof(SQBuffManager_ApplyBuff) == 0x000008, "Wrong size on SQBuffManager_ApplyBuff");
static_assert(offsetof(SQBuffManager_ApplyBuff, BuffTypeToApply) == 0x000000, "Member 'SQBuffManager_ApplyBuff::BuffTypeToApply' has a wrong offset!");
static_assert(offsetof(SQBuffManager_ApplyBuff, Duration) == 0x000004, "Member 'SQBuffManager_ApplyBuff::Duration' has a wrong offset!");

// Function Squad.SQBuffManager.PulseBuff
// 0x0008 (0x0008 - 0x0000)
struct SQBuffManager_PulseBuff final
{
public:
	ESQBuffTypes                                  BuffTypeToApply;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F5B[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBuffManager_PulseBuff) == 0x000004, "Wrong alignment on SQBuffManager_PulseBuff");
static_assert(sizeof(SQBuffManager_PulseBuff) == 0x000008, "Wrong size on SQBuffManager_PulseBuff");
static_assert(offsetof(SQBuffManager_PulseBuff, BuffTypeToApply) == 0x000000, "Member 'SQBuffManager_PulseBuff::BuffTypeToApply' has a wrong offset!");
static_assert(offsetof(SQBuffManager_PulseBuff, Duration) == 0x000004, "Member 'SQBuffManager_PulseBuff::Duration' has a wrong offset!");

// Function Squad.SQBuffManager.RemoveBuff
// 0x0001 (0x0001 - 0x0000)
struct SQBuffManager_RemoveBuff final
{
public:
	ESQBuffTypes                                  BuffTypeToRemove;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBuffManager_RemoveBuff) == 0x000001, "Wrong alignment on SQBuffManager_RemoveBuff");
static_assert(sizeof(SQBuffManager_RemoveBuff) == 0x000001, "Wrong size on SQBuffManager_RemoveBuff");
static_assert(offsetof(SQBuffManager_RemoveBuff, BuffTypeToRemove) == 0x000000, "Member 'SQBuffManager_RemoveBuff::BuffTypeToRemove' has a wrong offset!");

// Function Squad.SQBuffManager.HasBuff
// 0x0002 (0x0002 - 0x0000)
struct SQBuffManager_HasBuff final
{
public:
	ESQBuffTypes                                  BuffTypeToCheck;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQBuffManager_HasBuff) == 0x000001, "Wrong alignment on SQBuffManager_HasBuff");
static_assert(sizeof(SQBuffManager_HasBuff) == 0x000002, "Wrong size on SQBuffManager_HasBuff");
static_assert(offsetof(SQBuffManager_HasBuff, BuffTypeToCheck) == 0x000000, "Member 'SQBuffManager_HasBuff::BuffTypeToCheck' has a wrong offset!");
static_assert(offsetof(SQBuffManager_HasBuff, ReturnValue) == 0x000001, "Member 'SQBuffManager_HasBuff::ReturnValue' has a wrong offset!");

// Function Squad.SQRestriction_Boolean.IsRestrictedForPlayer
// 0x0010 (0x0010 - 0x0000)
struct SQRestriction_Boolean_IsRestrictedForPlayer final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F5D[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRestriction_Boolean_IsRestrictedForPlayer) == 0x000008, "Wrong alignment on SQRestriction_Boolean_IsRestrictedForPlayer");
static_assert(sizeof(SQRestriction_Boolean_IsRestrictedForPlayer) == 0x000010, "Wrong size on SQRestriction_Boolean_IsRestrictedForPlayer");
static_assert(offsetof(SQRestriction_Boolean_IsRestrictedForPlayer, InPlayer) == 0x000000, "Member 'SQRestriction_Boolean_IsRestrictedForPlayer::InPlayer' has a wrong offset!");
static_assert(offsetof(SQRestriction_Boolean_IsRestrictedForPlayer, ReturnValue) == 0x000008, "Member 'SQRestriction_Boolean_IsRestrictedForPlayer::ReturnValue' has a wrong offset!");

// Function Squad.SQRestriction_Boolean.IsRestrictedForTeam
// 0x0010 (0x0010 - 0x0000)
struct SQRestriction_Boolean_IsRestrictedForTeam final
{
public:
	class ASQTeam*                                InTeam;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F5E[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRestriction_Boolean_IsRestrictedForTeam) == 0x000008, "Wrong alignment on SQRestriction_Boolean_IsRestrictedForTeam");
static_assert(sizeof(SQRestriction_Boolean_IsRestrictedForTeam) == 0x000010, "Wrong size on SQRestriction_Boolean_IsRestrictedForTeam");
static_assert(offsetof(SQRestriction_Boolean_IsRestrictedForTeam, InTeam) == 0x000000, "Member 'SQRestriction_Boolean_IsRestrictedForTeam::InTeam' has a wrong offset!");
static_assert(offsetof(SQRestriction_Boolean_IsRestrictedForTeam, ReturnValue) == 0x000008, "Member 'SQRestriction_Boolean_IsRestrictedForTeam::ReturnValue' has a wrong offset!");

// Function Squad.SQRestriction_ActorsInRange.IsAuthorizedWithActorInRange
// 0x0018 (0x0018 - 0x0000)
struct SQRestriction_ActorsInRange_IsAuthorizedWithActorInRange final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           InActorInRange;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F61[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRestriction_ActorsInRange_IsAuthorizedWithActorInRange) == 0x000008, "Wrong alignment on SQRestriction_ActorsInRange_IsAuthorizedWithActorInRange");
static_assert(sizeof(SQRestriction_ActorsInRange_IsAuthorizedWithActorInRange) == 0x000018, "Wrong size on SQRestriction_ActorsInRange_IsAuthorizedWithActorInRange");
static_assert(offsetof(SQRestriction_ActorsInRange_IsAuthorizedWithActorInRange, InPlayer) == 0x000000, "Member 'SQRestriction_ActorsInRange_IsAuthorizedWithActorInRange::InPlayer' has a wrong offset!");
static_assert(offsetof(SQRestriction_ActorsInRange_IsAuthorizedWithActorInRange, InActorInRange) == 0x000008, "Member 'SQRestriction_ActorsInRange_IsAuthorizedWithActorInRange::InActorInRange' has a wrong offset!");
static_assert(offsetof(SQRestriction_ActorsInRange_IsAuthorizedWithActorInRange, ReturnValue) == 0x000010, "Member 'SQRestriction_ActorsInRange_IsAuthorizedWithActorInRange::ReturnValue' has a wrong offset!");

// Function Squad.SQRestriction_ActorsInRange.IsRestrictedWithActorsInRange
// 0x0020 (0x0020 - 0x0000)
struct SQRestriction_ActorsInRange_IsRestrictedWithActorsInRange final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         InActorsInRange;                                   // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F62[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRestriction_ActorsInRange_IsRestrictedWithActorsInRange) == 0x000008, "Wrong alignment on SQRestriction_ActorsInRange_IsRestrictedWithActorsInRange");
static_assert(sizeof(SQRestriction_ActorsInRange_IsRestrictedWithActorsInRange) == 0x000020, "Wrong size on SQRestriction_ActorsInRange_IsRestrictedWithActorsInRange");
static_assert(offsetof(SQRestriction_ActorsInRange_IsRestrictedWithActorsInRange, InPlayer) == 0x000000, "Member 'SQRestriction_ActorsInRange_IsRestrictedWithActorsInRange::InPlayer' has a wrong offset!");
static_assert(offsetof(SQRestriction_ActorsInRange_IsRestrictedWithActorsInRange, InActorsInRange) == 0x000008, "Member 'SQRestriction_ActorsInRange_IsRestrictedWithActorsInRange::InActorsInRange' has a wrong offset!");
static_assert(offsetof(SQRestriction_ActorsInRange_IsRestrictedWithActorsInRange, ReturnValue) == 0x000018, "Member 'SQRestriction_ActorsInRange_IsRestrictedWithActorsInRange::ReturnValue' has a wrong offset!");

// Function Squad.SQCameraMan.ClientUpdateCustomTimeDilation
// 0x0004 (0x0004 - 0x0000)
struct SQCameraMan_ClientUpdateCustomTimeDilation final
{
public:
	float                                         NewCustomDilation;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCameraMan_ClientUpdateCustomTimeDilation) == 0x000004, "Wrong alignment on SQCameraMan_ClientUpdateCustomTimeDilation");
static_assert(sizeof(SQCameraMan_ClientUpdateCustomTimeDilation) == 0x000004, "Wrong size on SQCameraMan_ClientUpdateCustomTimeDilation");
static_assert(offsetof(SQCameraMan_ClientUpdateCustomTimeDilation, NewCustomDilation) == 0x000000, "Member 'SQCameraMan_ClientUpdateCustomTimeDilation::NewCustomDilation' has a wrong offset!");

// Function Squad.SQCameraMan.DrawHUD
// 0x0010 (0x0010 - 0x0000)
struct SQCameraMan_DrawHUD final
{
public:
	class ASQHUD*                                 SquadHUD;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvas*                                Canvas;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCameraMan_DrawHUD) == 0x000008, "Wrong alignment on SQCameraMan_DrawHUD");
static_assert(sizeof(SQCameraMan_DrawHUD) == 0x000010, "Wrong size on SQCameraMan_DrawHUD");
static_assert(offsetof(SQCameraMan_DrawHUD, SquadHUD) == 0x000000, "Member 'SQCameraMan_DrawHUD::SquadHUD' has a wrong offset!");
static_assert(offsetof(SQCameraMan_DrawHUD, Canvas) == 0x000008, "Member 'SQCameraMan_DrawHUD::Canvas' has a wrong offset!");

// Function Squad.SQCameraMan.RecalculateCustomTimeDilation
// 0x0004 (0x0004 - 0x0000)
struct SQCameraMan_RecalculateCustomTimeDilation final
{
public:
	float                                         TimeDilation;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCameraMan_RecalculateCustomTimeDilation) == 0x000004, "Wrong alignment on SQCameraMan_RecalculateCustomTimeDilation");
static_assert(sizeof(SQCameraMan_RecalculateCustomTimeDilation) == 0x000004, "Wrong size on SQCameraMan_RecalculateCustomTimeDilation");
static_assert(offsetof(SQCameraMan_RecalculateCustomTimeDilation, TimeDilation) == 0x000000, "Member 'SQCameraMan_RecalculateCustomTimeDilation::TimeDilation' has a wrong offset!");

// Function Squad.SQCameraMan.ServerSetDecelerationTarget
// 0x0004 (0x0004 - 0x0000)
struct SQCameraMan_ServerSetDecelerationTarget final
{
public:
	float                                         InDecelerationTarget;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCameraMan_ServerSetDecelerationTarget) == 0x000004, "Wrong alignment on SQCameraMan_ServerSetDecelerationTarget");
static_assert(sizeof(SQCameraMan_ServerSetDecelerationTarget) == 0x000004, "Wrong size on SQCameraMan_ServerSetDecelerationTarget");
static_assert(offsetof(SQCameraMan_ServerSetDecelerationTarget, InDecelerationTarget) == 0x000000, "Member 'SQCameraMan_ServerSetDecelerationTarget::InDecelerationTarget' has a wrong offset!");

// Function Squad.SQCameraMan.ServerSetFlySpeedTarget
// 0x0004 (0x0004 - 0x0000)
struct SQCameraMan_ServerSetFlySpeedTarget final
{
public:
	float                                         InFlySpeedTarget;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCameraMan_ServerSetFlySpeedTarget) == 0x000004, "Wrong alignment on SQCameraMan_ServerSetFlySpeedTarget");
static_assert(sizeof(SQCameraMan_ServerSetFlySpeedTarget) == 0x000004, "Wrong size on SQCameraMan_ServerSetFlySpeedTarget");
static_assert(offsetof(SQCameraMan_ServerSetFlySpeedTarget, InFlySpeedTarget) == 0x000000, "Member 'SQCameraMan_ServerSetFlySpeedTarget::InFlySpeedTarget' has a wrong offset!");

// Function Squad.SQCameraMan.ServerSetIgnoreSlomo
// 0x0001 (0x0001 - 0x0000)
struct SQCameraMan_ServerSetIgnoreSlomo final
{
public:
	bool                                          bShouldIgnore;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCameraMan_ServerSetIgnoreSlomo) == 0x000001, "Wrong alignment on SQCameraMan_ServerSetIgnoreSlomo");
static_assert(sizeof(SQCameraMan_ServerSetIgnoreSlomo) == 0x000001, "Wrong size on SQCameraMan_ServerSetIgnoreSlomo");
static_assert(offsetof(SQCameraMan_ServerSetIgnoreSlomo, bShouldIgnore) == 0x000000, "Member 'SQCameraMan_ServerSetIgnoreSlomo::bShouldIgnore' has a wrong offset!");

// Function Squad.SQGraphNodeComponent.AddNeighbor
// 0x0008 (0x0008 - 0x0000)
struct SQGraphNodeComponent_AddNeighbor final
{
public:
	class USQGraphNodeComponent*                  Neighbor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGraphNodeComponent_AddNeighbor) == 0x000008, "Wrong alignment on SQGraphNodeComponent_AddNeighbor");
static_assert(sizeof(SQGraphNodeComponent_AddNeighbor) == 0x000008, "Wrong size on SQGraphNodeComponent_AddNeighbor");
static_assert(offsetof(SQGraphNodeComponent_AddNeighbor, Neighbor) == 0x000000, "Member 'SQGraphNodeComponent_AddNeighbor::Neighbor' has a wrong offset!");

// Function Squad.SQGraphNodeComponent.GetNeighbors
// 0x0010 (0x0010 - 0x0000)
struct SQGraphNodeComponent_GetNeighbors final
{
public:
	TArray<class USQGraphNodeComponent*>          InOutNodes;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGraphNodeComponent_GetNeighbors) == 0x000008, "Wrong alignment on SQGraphNodeComponent_GetNeighbors");
static_assert(sizeof(SQGraphNodeComponent_GetNeighbors) == 0x000010, "Wrong size on SQGraphNodeComponent_GetNeighbors");
static_assert(offsetof(SQGraphNodeComponent_GetNeighbors, InOutNodes) == 0x000000, "Member 'SQGraphNodeComponent_GetNeighbors::InOutNodes' has a wrong offset!");

// Function Squad.SQGraphNodeComponent.OnNeighborAdded
// 0x0008 (0x0008 - 0x0000)
struct SQGraphNodeComponent_OnNeighborAdded final
{
public:
	class USQGraphNodeComponent*                  Neighbor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGraphNodeComponent_OnNeighborAdded) == 0x000008, "Wrong alignment on SQGraphNodeComponent_OnNeighborAdded");
static_assert(sizeof(SQGraphNodeComponent_OnNeighborAdded) == 0x000008, "Wrong size on SQGraphNodeComponent_OnNeighborAdded");
static_assert(offsetof(SQGraphNodeComponent_OnNeighborAdded, Neighbor) == 0x000000, "Member 'SQGraphNodeComponent_OnNeighborAdded::Neighbor' has a wrong offset!");

// Function Squad.SQGraphNodeComponent.OnNeighborRemoved
// 0x0008 (0x0008 - 0x0000)
struct SQGraphNodeComponent_OnNeighborRemoved final
{
public:
	class USQGraphNodeComponent*                  Neighbor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGraphNodeComponent_OnNeighborRemoved) == 0x000008, "Wrong alignment on SQGraphNodeComponent_OnNeighborRemoved");
static_assert(sizeof(SQGraphNodeComponent_OnNeighborRemoved) == 0x000008, "Wrong size on SQGraphNodeComponent_OnNeighborRemoved");
static_assert(offsetof(SQGraphNodeComponent_OnNeighborRemoved, Neighbor) == 0x000000, "Member 'SQGraphNodeComponent_OnNeighborRemoved::Neighbor' has a wrong offset!");

// Function Squad.SQGraphNodeComponent.RemoveNeighbor
// 0x0008 (0x0008 - 0x0000)
struct SQGraphNodeComponent_RemoveNeighbor final
{
public:
	class USQGraphNodeComponent*                  Neighbor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGraphNodeComponent_RemoveNeighbor) == 0x000008, "Wrong alignment on SQGraphNodeComponent_RemoveNeighbor");
static_assert(sizeof(SQGraphNodeComponent_RemoveNeighbor) == 0x000008, "Wrong size on SQGraphNodeComponent_RemoveNeighbor");
static_assert(offsetof(SQGraphNodeComponent_RemoveNeighbor, Neighbor) == 0x000000, "Member 'SQGraphNodeComponent_RemoveNeighbor::Neighbor' has a wrong offset!");

// Function Squad.SQCaptureZoneComponent.FindMainBase
// 0x0020 (0x0020 - 0x0000)
struct SQCaptureZoneComponent_FindMainBase final
{
public:
	uint8                                         Team;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F6C[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USQGraphNodeComponent*>          VisitedNodes;                                      // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class USQGraphNodeComponent*                  ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCaptureZoneComponent_FindMainBase) == 0x000008, "Wrong alignment on SQCaptureZoneComponent_FindMainBase");
static_assert(sizeof(SQCaptureZoneComponent_FindMainBase) == 0x000020, "Wrong size on SQCaptureZoneComponent_FindMainBase");
static_assert(offsetof(SQCaptureZoneComponent_FindMainBase, Team) == 0x000000, "Member 'SQCaptureZoneComponent_FindMainBase::Team' has a wrong offset!");
static_assert(offsetof(SQCaptureZoneComponent_FindMainBase, VisitedNodes) == 0x000008, "Member 'SQCaptureZoneComponent_FindMainBase::VisitedNodes' has a wrong offset!");
static_assert(offsetof(SQCaptureZoneComponent_FindMainBase, ReturnValue) == 0x000018, "Member 'SQCaptureZoneComponent_FindMainBase::ReturnValue' has a wrong offset!");

// Function Squad.SQCaptureZoneComponent.FullyCap
// 0x0001 (0x0001 - 0x0000)
struct SQCaptureZoneComponent_FullyCap final
{
public:
	uint8                                         ForTeam;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCaptureZoneComponent_FullyCap) == 0x000001, "Wrong alignment on SQCaptureZoneComponent_FullyCap");
static_assert(sizeof(SQCaptureZoneComponent_FullyCap) == 0x000001, "Wrong size on SQCaptureZoneComponent_FullyCap");
static_assert(offsetof(SQCaptureZoneComponent_FullyCap, ForTeam) == 0x000000, "Member 'SQCaptureZoneComponent_FullyCap::ForTeam' has a wrong offset!");

// Function Squad.SQCaptureZoneComponent.GetCapturezoneDirections
// 0x0020 (0x0020 - 0x0000)
struct SQCaptureZoneComponent_GetCapturezoneDirections final
{
public:
	TArray<class USQCaptureZoneComponent*>        TeamOneDir;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class USQCaptureZoneComponent*>        TeamTwoDir;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCaptureZoneComponent_GetCapturezoneDirections) == 0x000008, "Wrong alignment on SQCaptureZoneComponent_GetCapturezoneDirections");
static_assert(sizeof(SQCaptureZoneComponent_GetCapturezoneDirections) == 0x000020, "Wrong size on SQCaptureZoneComponent_GetCapturezoneDirections");
static_assert(offsetof(SQCaptureZoneComponent_GetCapturezoneDirections, TeamOneDir) == 0x000000, "Member 'SQCaptureZoneComponent_GetCapturezoneDirections::TeamOneDir' has a wrong offset!");
static_assert(offsetof(SQCaptureZoneComponent_GetCapturezoneDirections, TeamTwoDir) == 0x000010, "Member 'SQCaptureZoneComponent_GetCapturezoneDirections::TeamTwoDir' has a wrong offset!");

// Function Squad.SQCaptureZoneComponent.GetPlayersInCaptureZone
// 0x0020 (0x0020 - 0x0000)
struct SQCaptureZoneComponent_GetPlayersInCaptureZone final
{
public:
	TArray<class AActor*>                         TeamOne;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         TeamTwo;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCaptureZoneComponent_GetPlayersInCaptureZone) == 0x000008, "Wrong alignment on SQCaptureZoneComponent_GetPlayersInCaptureZone");
static_assert(sizeof(SQCaptureZoneComponent_GetPlayersInCaptureZone) == 0x000020, "Wrong size on SQCaptureZoneComponent_GetPlayersInCaptureZone");
static_assert(offsetof(SQCaptureZoneComponent_GetPlayersInCaptureZone, TeamOne) == 0x000000, "Member 'SQCaptureZoneComponent_GetPlayersInCaptureZone::TeamOne' has a wrong offset!");
static_assert(offsetof(SQCaptureZoneComponent_GetPlayersInCaptureZone, TeamTwo) == 0x000010, "Member 'SQCaptureZoneComponent_GetPlayersInCaptureZone::TeamTwo' has a wrong offset!");

// Function Squad.SQCaptureZoneComponent.SetTeamCanCapture
// 0x0003 (0x0003 - 0x0000)
struct SQCaptureZoneComponent_SetTeamCanCapture final
{
public:
	uint8                                         Team;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanCap;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCaptureZoneComponent_SetTeamCanCapture) == 0x000001, "Wrong alignment on SQCaptureZoneComponent_SetTeamCanCapture");
static_assert(sizeof(SQCaptureZoneComponent_SetTeamCanCapture) == 0x000003, "Wrong size on SQCaptureZoneComponent_SetTeamCanCapture");
static_assert(offsetof(SQCaptureZoneComponent_SetTeamCanCapture, Team) == 0x000000, "Member 'SQCaptureZoneComponent_SetTeamCanCapture::Team' has a wrong offset!");
static_assert(offsetof(SQCaptureZoneComponent_SetTeamCanCapture, bCanCap) == 0x000001, "Member 'SQCaptureZoneComponent_SetTeamCanCapture::bCanCap' has a wrong offset!");
static_assert(offsetof(SQCaptureZoneComponent_SetTeamCanCapture, ReturnValue) == 0x000002, "Member 'SQCaptureZoneComponent_SetTeamCanCapture::ReturnValue' has a wrong offset!");

// Function Squad.SQCaptureZoneComponent.SetTeamHaveKnowledge
// 0x0003 (0x0003 - 0x0000)
struct SQCaptureZoneComponent_SetTeamHaveKnowledge final
{
public:
	uint8                                         Team;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHaveKnowledge;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCaptureZoneComponent_SetTeamHaveKnowledge) == 0x000001, "Wrong alignment on SQCaptureZoneComponent_SetTeamHaveKnowledge");
static_assert(sizeof(SQCaptureZoneComponent_SetTeamHaveKnowledge) == 0x000003, "Wrong size on SQCaptureZoneComponent_SetTeamHaveKnowledge");
static_assert(offsetof(SQCaptureZoneComponent_SetTeamHaveKnowledge, Team) == 0x000000, "Member 'SQCaptureZoneComponent_SetTeamHaveKnowledge::Team' has a wrong offset!");
static_assert(offsetof(SQCaptureZoneComponent_SetTeamHaveKnowledge, bHaveKnowledge) == 0x000001, "Member 'SQCaptureZoneComponent_SetTeamHaveKnowledge::bHaveKnowledge' has a wrong offset!");
static_assert(offsetof(SQCaptureZoneComponent_SetTeamHaveKnowledge, ReturnValue) == 0x000002, "Member 'SQCaptureZoneComponent_SetTeamHaveKnowledge::ReturnValue' has a wrong offset!");

// Function Squad.SQCaptureZoneComponent.UpdateCanCaptureState
// 0x0020 (0x0020 - 0x0000)
struct SQCaptureZoneComponent_UpdateCanCaptureState final
{
public:
	TArray<class USQCaptureZoneComponent*>        TeamOneDir;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class USQCaptureZoneComponent*>        TeamTwoDir;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCaptureZoneComponent_UpdateCanCaptureState) == 0x000008, "Wrong alignment on SQCaptureZoneComponent_UpdateCanCaptureState");
static_assert(sizeof(SQCaptureZoneComponent_UpdateCanCaptureState) == 0x000020, "Wrong size on SQCaptureZoneComponent_UpdateCanCaptureState");
static_assert(offsetof(SQCaptureZoneComponent_UpdateCanCaptureState, TeamOneDir) == 0x000000, "Member 'SQCaptureZoneComponent_UpdateCanCaptureState::TeamOneDir' has a wrong offset!");
static_assert(offsetof(SQCaptureZoneComponent_UpdateCanCaptureState, TeamTwoDir) == 0x000010, "Member 'SQCaptureZoneComponent_UpdateCanCaptureState::TeamTwoDir' has a wrong offset!");

// Function Squad.SQCaptureZoneComponent.UpdateCaptureState
// 0x0010 (0x0010 - 0x0000)
struct SQCaptureZoneComponent_UpdateCaptureState final
{
public:
	class USQCaptureZoneComponent*                CaptureZone;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Team;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F6D[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQCaptureZoneComponent_UpdateCaptureState) == 0x000008, "Wrong alignment on SQCaptureZoneComponent_UpdateCaptureState");
static_assert(sizeof(SQCaptureZoneComponent_UpdateCaptureState) == 0x000010, "Wrong size on SQCaptureZoneComponent_UpdateCaptureState");
static_assert(offsetof(SQCaptureZoneComponent_UpdateCaptureState, CaptureZone) == 0x000000, "Member 'SQCaptureZoneComponent_UpdateCaptureState::CaptureZone' has a wrong offset!");
static_assert(offsetof(SQCaptureZoneComponent_UpdateCaptureState, Team) == 0x000008, "Member 'SQCaptureZoneComponent_UpdateCaptureState::Team' has a wrong offset!");

// Function Squad.SQCaptureZoneComponent.UpdateTeamKnowledge
// 0x0020 (0x0020 - 0x0000)
struct SQCaptureZoneComponent_UpdateTeamKnowledge final
{
public:
	TArray<class USQCaptureZoneComponent*>        TeamOneDir;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class USQCaptureZoneComponent*>        TeamTwoDir;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCaptureZoneComponent_UpdateTeamKnowledge) == 0x000008, "Wrong alignment on SQCaptureZoneComponent_UpdateTeamKnowledge");
static_assert(sizeof(SQCaptureZoneComponent_UpdateTeamKnowledge) == 0x000020, "Wrong size on SQCaptureZoneComponent_UpdateTeamKnowledge");
static_assert(offsetof(SQCaptureZoneComponent_UpdateTeamKnowledge, TeamOneDir) == 0x000000, "Member 'SQCaptureZoneComponent_UpdateTeamKnowledge::TeamOneDir' has a wrong offset!");
static_assert(offsetof(SQCaptureZoneComponent_UpdateTeamKnowledge, TeamTwoDir) == 0x000010, "Member 'SQCaptureZoneComponent_UpdateTeamKnowledge::TeamTwoDir' has a wrong offset!");

// Function Squad.SQCaptureZoneComponent.GetCanTeamCapture
// 0x0002 (0x0002 - 0x0000)
struct SQCaptureZoneComponent_GetCanTeamCapture final
{
public:
	uint8                                         Team;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCaptureZoneComponent_GetCanTeamCapture) == 0x000001, "Wrong alignment on SQCaptureZoneComponent_GetCanTeamCapture");
static_assert(sizeof(SQCaptureZoneComponent_GetCanTeamCapture) == 0x000002, "Wrong size on SQCaptureZoneComponent_GetCanTeamCapture");
static_assert(offsetof(SQCaptureZoneComponent_GetCanTeamCapture, Team) == 0x000000, "Member 'SQCaptureZoneComponent_GetCanTeamCapture::Team' has a wrong offset!");
static_assert(offsetof(SQCaptureZoneComponent_GetCanTeamCapture, ReturnValue) == 0x000001, "Member 'SQCaptureZoneComponent_GetCanTeamCapture::ReturnValue' has a wrong offset!");

// Function Squad.SQCaptureZoneComponent.GetCurrentModeCaptureZoneStats
// 0x0020 (0x0020 - 0x0000)
struct SQCaptureZoneComponent_GetCurrentModeCaptureZoneStats final
{
public:
	struct FCaptureZoneStats                      OutputCaptureZoneStats;                            // 0x0000(0x0018)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F6E[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQCaptureZoneComponent_GetCurrentModeCaptureZoneStats) == 0x000008, "Wrong alignment on SQCaptureZoneComponent_GetCurrentModeCaptureZoneStats");
static_assert(sizeof(SQCaptureZoneComponent_GetCurrentModeCaptureZoneStats) == 0x000020, "Wrong size on SQCaptureZoneComponent_GetCurrentModeCaptureZoneStats");
static_assert(offsetof(SQCaptureZoneComponent_GetCurrentModeCaptureZoneStats, OutputCaptureZoneStats) == 0x000000, "Member 'SQCaptureZoneComponent_GetCurrentModeCaptureZoneStats::OutputCaptureZoneStats' has a wrong offset!");
static_assert(offsetof(SQCaptureZoneComponent_GetCurrentModeCaptureZoneStats, ReturnValue) == 0x000018, "Member 'SQCaptureZoneComponent_GetCurrentModeCaptureZoneStats::ReturnValue' has a wrong offset!");

// Function Squad.SQCaptureZoneComponent.GetTeamHaveKnowledge
// 0x0002 (0x0002 - 0x0000)
struct SQCaptureZoneComponent_GetTeamHaveKnowledge final
{
public:
	uint8                                         Team;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCaptureZoneComponent_GetTeamHaveKnowledge) == 0x000001, "Wrong alignment on SQCaptureZoneComponent_GetTeamHaveKnowledge");
static_assert(sizeof(SQCaptureZoneComponent_GetTeamHaveKnowledge) == 0x000002, "Wrong size on SQCaptureZoneComponent_GetTeamHaveKnowledge");
static_assert(offsetof(SQCaptureZoneComponent_GetTeamHaveKnowledge, Team) == 0x000000, "Member 'SQCaptureZoneComponent_GetTeamHaveKnowledge::Team' has a wrong offset!");
static_assert(offsetof(SQCaptureZoneComponent_GetTeamHaveKnowledge, ReturnValue) == 0x000001, "Member 'SQCaptureZoneComponent_GetTeamHaveKnowledge::ReturnValue' has a wrong offset!");

// Function Squad.SQCdnFile.GetAsTexture
// 0x0008 (0x0008 - 0x0000)
struct SQCdnFile_GetAsTexture final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCdnFile_GetAsTexture) == 0x000008, "Wrong alignment on SQCdnFile_GetAsTexture");
static_assert(sizeof(SQCdnFile_GetAsTexture) == 0x000008, "Wrong size on SQCdnFile_GetAsTexture");
static_assert(offsetof(SQCdnFile_GetAsTexture, ReturnValue) == 0x000000, "Member 'SQCdnFile_GetAsTexture::ReturnValue' has a wrong offset!");

// Function Squad.SQCheatManager.SqDumpPakContents
// 0x0010 (0x0010 - 0x0000)
struct SQCheatManager_SqDumpPakContents final
{
public:
	class FString                                 OutputFilename;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCheatManager_SqDumpPakContents) == 0x000008, "Wrong alignment on SQCheatManager_SqDumpPakContents");
static_assert(sizeof(SQCheatManager_SqDumpPakContents) == 0x000010, "Wrong size on SQCheatManager_SqDumpPakContents");
static_assert(offsetof(SQCheatManager_SqDumpPakContents, OutputFilename) == 0x000000, "Member 'SQCheatManager_SqDumpPakContents::OutputFilename' has a wrong offset!");

// Function Squad.SQFriendsBrowserWidget.OnFindFriendsCompleted
// 0x0018 (0x0018 - 0x0000)
struct SQFriendsBrowserWidget_OnFindFriendsCompleted final
{
public:
	TArray<struct FSQBlueprintFriend>             Results;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F72[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQFriendsBrowserWidget_OnFindFriendsCompleted) == 0x000008, "Wrong alignment on SQFriendsBrowserWidget_OnFindFriendsCompleted");
static_assert(sizeof(SQFriendsBrowserWidget_OnFindFriendsCompleted) == 0x000018, "Wrong size on SQFriendsBrowserWidget_OnFindFriendsCompleted");
static_assert(offsetof(SQFriendsBrowserWidget_OnFindFriendsCompleted, Results) == 0x000000, "Member 'SQFriendsBrowserWidget_OnFindFriendsCompleted::Results' has a wrong offset!");
static_assert(offsetof(SQFriendsBrowserWidget_OnFindFriendsCompleted, bSuccess) == 0x000010, "Member 'SQFriendsBrowserWidget_OnFindFriendsCompleted::bSuccess' has a wrong offset!");

// Function Squad.SQFriendsBrowserWidget.OnSuccess
// 0x0010 (0x0010 - 0x0000)
struct SQFriendsBrowserWidget_OnSuccess final
{
public:
	TArray<struct FSQBlueprintFriend>             Results;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFriendsBrowserWidget_OnSuccess) == 0x000008, "Wrong alignment on SQFriendsBrowserWidget_OnSuccess");
static_assert(sizeof(SQFriendsBrowserWidget_OnSuccess) == 0x000010, "Wrong size on SQFriendsBrowserWidget_OnSuccess");
static_assert(offsetof(SQFriendsBrowserWidget_OnSuccess, Results) == 0x000000, "Member 'SQFriendsBrowserWidget_OnSuccess::Results' has a wrong offset!");

// Function Squad.SQChunkSettings.GetChunkSettings
// 0x0008 (0x0008 - 0x0000)
struct SQChunkSettings_GetChunkSettings final
{
public:
	class USQChunkSettings*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQChunkSettings_GetChunkSettings) == 0x000008, "Wrong alignment on SQChunkSettings_GetChunkSettings");
static_assert(sizeof(SQChunkSettings_GetChunkSettings) == 0x000008, "Wrong size on SQChunkSettings_GetChunkSettings");
static_assert(offsetof(SQChunkSettings_GetChunkSettings, ReturnValue) == 0x000000, "Member 'SQChunkSettings_GetChunkSettings::ReturnValue' has a wrong offset!");

// Function Squad.SQCloudServicesSubsystem.GetCrossPromotionData
// 0x0078 (0x0078 - 0x0000)
struct SQCloudServicesSubsystem_GetCrossPromotionData final
{
public:
	struct FCrossPromotionData                    ReturnValue;                                       // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCloudServicesSubsystem_GetCrossPromotionData) == 0x000008, "Wrong alignment on SQCloudServicesSubsystem_GetCrossPromotionData");
static_assert(sizeof(SQCloudServicesSubsystem_GetCrossPromotionData) == 0x000078, "Wrong size on SQCloudServicesSubsystem_GetCrossPromotionData");
static_assert(offsetof(SQCloudServicesSubsystem_GetCrossPromotionData, ReturnValue) == 0x000000, "Member 'SQCloudServicesSubsystem_GetCrossPromotionData::ReturnValue' has a wrong offset!");

// Function Squad.SQCloudServicesSubsystem.GetNewsData
// 0x0048 (0x0048 - 0x0000)
struct SQCloudServicesSubsystem_GetNewsData final
{
public:
	struct FNewsData                              ReturnValue;                                       // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCloudServicesSubsystem_GetNewsData) == 0x000008, "Wrong alignment on SQCloudServicesSubsystem_GetNewsData");
static_assert(sizeof(SQCloudServicesSubsystem_GetNewsData) == 0x000048, "Wrong size on SQCloudServicesSubsystem_GetNewsData");
static_assert(offsetof(SQCloudServicesSubsystem_GetNewsData, ReturnValue) == 0x000000, "Member 'SQCloudServicesSubsystem_GetNewsData::ReturnValue' has a wrong offset!");

// Function Squad.SQCloudServicesSubsystem.GetTitleData
// 0x0098 (0x0098 - 0x0000)
struct SQCloudServicesSubsystem_GetTitleData final
{
public:
	struct FTitleData                             ReturnValue;                                       // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCloudServicesSubsystem_GetTitleData) == 0x000008, "Wrong alignment on SQCloudServicesSubsystem_GetTitleData");
static_assert(sizeof(SQCloudServicesSubsystem_GetTitleData) == 0x000098, "Wrong size on SQCloudServicesSubsystem_GetTitleData");
static_assert(offsetof(SQCloudServicesSubsystem_GetTitleData, ReturnValue) == 0x000000, "Member 'SQCloudServicesSubsystem_GetTitleData::ReturnValue' has a wrong offset!");

// Function Squad.SQCloudServicesSubsystem.RequestFile
// 0x0020 (0x0020 - 0x0000)
struct SQCloudServicesSubsystem_RequestFile final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class USQCdnFile* File)>       OnReadyDelegate;                                   // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCloudServicesSubsystem_RequestFile) == 0x000008, "Wrong alignment on SQCloudServicesSubsystem_RequestFile");
static_assert(sizeof(SQCloudServicesSubsystem_RequestFile) == 0x000020, "Wrong size on SQCloudServicesSubsystem_RequestFile");
static_assert(offsetof(SQCloudServicesSubsystem_RequestFile, Filename) == 0x000000, "Member 'SQCloudServicesSubsystem_RequestFile::Filename' has a wrong offset!");
static_assert(offsetof(SQCloudServicesSubsystem_RequestFile, OnReadyDelegate) == 0x000010, "Member 'SQCloudServicesSubsystem_RequestFile::OnReadyDelegate' has a wrong offset!");

// Function Squad.SQCloudServicesSubsystem.RequestNewsData
// 0x0001 (0x0001 - 0x0000)
struct SQCloudServicesSubsystem_RequestNewsData final
{
public:
	bool                                          bForceRefresh;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCloudServicesSubsystem_RequestNewsData) == 0x000001, "Wrong alignment on SQCloudServicesSubsystem_RequestNewsData");
static_assert(sizeof(SQCloudServicesSubsystem_RequestNewsData) == 0x000001, "Wrong size on SQCloudServicesSubsystem_RequestNewsData");
static_assert(offsetof(SQCloudServicesSubsystem_RequestNewsData, bForceRefresh) == 0x000000, "Member 'SQCloudServicesSubsystem_RequestNewsData::bForceRefresh' has a wrong offset!");

// Function Squad.SQCloudServicesSubsystem.RequestPlayerData
// 0x0001 (0x0001 - 0x0000)
struct SQCloudServicesSubsystem_RequestPlayerData final
{
public:
	bool                                          bForceRefresh;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCloudServicesSubsystem_RequestPlayerData) == 0x000001, "Wrong alignment on SQCloudServicesSubsystem_RequestPlayerData");
static_assert(sizeof(SQCloudServicesSubsystem_RequestPlayerData) == 0x000001, "Wrong size on SQCloudServicesSubsystem_RequestPlayerData");
static_assert(offsetof(SQCloudServicesSubsystem_RequestPlayerData, bForceRefresh) == 0x000000, "Member 'SQCloudServicesSubsystem_RequestPlayerData::bForceRefresh' has a wrong offset!");

// Function Squad.SQCloudServicesSubsystem.RequestTitleData
// 0x0001 (0x0001 - 0x0000)
struct SQCloudServicesSubsystem_RequestTitleData final
{
public:
	bool                                          bForceRefresh;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCloudServicesSubsystem_RequestTitleData) == 0x000001, "Wrong alignment on SQCloudServicesSubsystem_RequestTitleData");
static_assert(sizeof(SQCloudServicesSubsystem_RequestTitleData) == 0x000001, "Wrong size on SQCloudServicesSubsystem_RequestTitleData");
static_assert(offsetof(SQCloudServicesSubsystem_RequestTitleData, bForceRefresh) == 0x000000, "Member 'SQCloudServicesSubsystem_RequestTitleData::bForceRefresh' has a wrong offset!");

// Function Squad.SQCloudServicesSubsystem.SendAnalyticEvent
// 0x0030 (0x0030 - 0x0000)
struct SQCloudServicesSubsystem_SendAnalyticEvent final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventDataKey;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventData;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCloudServicesSubsystem_SendAnalyticEvent) == 0x000008, "Wrong alignment on SQCloudServicesSubsystem_SendAnalyticEvent");
static_assert(sizeof(SQCloudServicesSubsystem_SendAnalyticEvent) == 0x000030, "Wrong size on SQCloudServicesSubsystem_SendAnalyticEvent");
static_assert(offsetof(SQCloudServicesSubsystem_SendAnalyticEvent, EventName) == 0x000000, "Member 'SQCloudServicesSubsystem_SendAnalyticEvent::EventName' has a wrong offset!");
static_assert(offsetof(SQCloudServicesSubsystem_SendAnalyticEvent, EventDataKey) == 0x000010, "Member 'SQCloudServicesSubsystem_SendAnalyticEvent::EventDataKey' has a wrong offset!");
static_assert(offsetof(SQCloudServicesSubsystem_SendAnalyticEvent, EventData) == 0x000020, "Member 'SQCloudServicesSubsystem_SendAnalyticEvent::EventData' has a wrong offset!");

// Function Squad.SQCloudServicesSubsystem.SendAnalyticEventArray
// 0x0020 (0x0020 - 0x0000)
struct SQCloudServicesSubsystem_SendAnalyticEventArray final
{
public:
	class FString                                 EventName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnalyticKeyValue>              EventData;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCloudServicesSubsystem_SendAnalyticEventArray) == 0x000008, "Wrong alignment on SQCloudServicesSubsystem_SendAnalyticEventArray");
static_assert(sizeof(SQCloudServicesSubsystem_SendAnalyticEventArray) == 0x000020, "Wrong size on SQCloudServicesSubsystem_SendAnalyticEventArray");
static_assert(offsetof(SQCloudServicesSubsystem_SendAnalyticEventArray, EventName) == 0x000000, "Member 'SQCloudServicesSubsystem_SendAnalyticEventArray::EventName' has a wrong offset!");
static_assert(offsetof(SQCloudServicesSubsystem_SendAnalyticEventArray, EventData) == 0x000010, "Member 'SQCloudServicesSubsystem_SendAnalyticEventArray::EventData' has a wrong offset!");

// Function Squad.SQCollisionDamage.ApplyDamage
// 0x0004 (0x0004 - 0x0000)
struct SQCollisionDamage_ApplyDamage final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCollisionDamage_ApplyDamage) == 0x000004, "Wrong alignment on SQCollisionDamage_ApplyDamage");
static_assert(sizeof(SQCollisionDamage_ApplyDamage) == 0x000004, "Wrong size on SQCollisionDamage_ApplyDamage");
static_assert(offsetof(SQCollisionDamage_ApplyDamage, Damage) == 0x000000, "Member 'SQCollisionDamage_ApplyDamage::Damage' has a wrong offset!");

// Function Squad.SQCollisionDamage.OnActorHit
// 0x00A8 (0x00A8 - 0x0000)
struct SQCollisionDamage_OnActorHit final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x001C(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_F7B[0x4];                                      // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQCollisionDamage_OnActorHit) == 0x000008, "Wrong alignment on SQCollisionDamage_OnActorHit");
static_assert(sizeof(SQCollisionDamage_OnActorHit) == 0x0000A8, "Wrong size on SQCollisionDamage_OnActorHit");
static_assert(offsetof(SQCollisionDamage_OnActorHit, SelfActor) == 0x000000, "Member 'SQCollisionDamage_OnActorHit::SelfActor' has a wrong offset!");
static_assert(offsetof(SQCollisionDamage_OnActorHit, OtherActor) == 0x000008, "Member 'SQCollisionDamage_OnActorHit::OtherActor' has a wrong offset!");
static_assert(offsetof(SQCollisionDamage_OnActorHit, NormalImpulse) == 0x000010, "Member 'SQCollisionDamage_OnActorHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(SQCollisionDamage_OnActorHit, Hit) == 0x00001C, "Member 'SQCollisionDamage_OnActorHit::Hit' has a wrong offset!");

// Function Squad.SQCollisionDamage.CalculateDamage
// 0x00A8 (0x00A8 - 0x0000)
struct SQCollisionDamage_CalculateDamage final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x001C(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x00A4(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCollisionDamage_CalculateDamage) == 0x000008, "Wrong alignment on SQCollisionDamage_CalculateDamage");
static_assert(sizeof(SQCollisionDamage_CalculateDamage) == 0x0000A8, "Wrong size on SQCollisionDamage_CalculateDamage");
static_assert(offsetof(SQCollisionDamage_CalculateDamage, SelfActor) == 0x000000, "Member 'SQCollisionDamage_CalculateDamage::SelfActor' has a wrong offset!");
static_assert(offsetof(SQCollisionDamage_CalculateDamage, OtherActor) == 0x000008, "Member 'SQCollisionDamage_CalculateDamage::OtherActor' has a wrong offset!");
static_assert(offsetof(SQCollisionDamage_CalculateDamage, NormalImpulse) == 0x000010, "Member 'SQCollisionDamage_CalculateDamage::NormalImpulse' has a wrong offset!");
static_assert(offsetof(SQCollisionDamage_CalculateDamage, Hit) == 0x00001C, "Member 'SQCollisionDamage_CalculateDamage::Hit' has a wrong offset!");
static_assert(offsetof(SQCollisionDamage_CalculateDamage, ReturnValue) == 0x0000A4, "Member 'SQCollisionDamage_CalculateDamage::ReturnValue' has a wrong offset!");

// Function Squad.SQColorsDataAsset.GetColor
// 0x0018 (0x0018 - 0x0000)
struct SQColorsDataAsset_GetColor final
{
public:
	ESQMapWidgetTint                              TintValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F87[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FireTeamIndex;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQColorsDataAsset_GetColor) == 0x000004, "Wrong alignment on SQColorsDataAsset_GetColor");
static_assert(sizeof(SQColorsDataAsset_GetColor) == 0x000018, "Wrong size on SQColorsDataAsset_GetColor");
static_assert(offsetof(SQColorsDataAsset_GetColor, TintValue) == 0x000000, "Member 'SQColorsDataAsset_GetColor::TintValue' has a wrong offset!");
static_assert(offsetof(SQColorsDataAsset_GetColor, FireTeamIndex) == 0x000004, "Member 'SQColorsDataAsset_GetColor::FireTeamIndex' has a wrong offset!");
static_assert(offsetof(SQColorsDataAsset_GetColor, ReturnValue) == 0x000008, "Member 'SQColorsDataAsset_GetColor::ReturnValue' has a wrong offset!");

// Function Squad.SQColorsDataAsset.GetUIColors
// 0x0014 (0x0014 - 0x0000)
struct SQColorsDataAsset_GetUIColors final
{
public:
	int32                                         ColorIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQColorsDataAsset_GetUIColors) == 0x000004, "Wrong alignment on SQColorsDataAsset_GetUIColors");
static_assert(sizeof(SQColorsDataAsset_GetUIColors) == 0x000014, "Wrong size on SQColorsDataAsset_GetUIColors");
static_assert(offsetof(SQColorsDataAsset_GetUIColors, ColorIndex) == 0x000000, "Member 'SQColorsDataAsset_GetUIColors::ColorIndex' has a wrong offset!");
static_assert(offsetof(SQColorsDataAsset_GetUIColors, ReturnValue) == 0x000004, "Member 'SQColorsDataAsset_GetUIColors::ReturnValue' has a wrong offset!");

// Function Squad.SQCommandActor.SetAction
// 0x0008 (0x0008 - 0x0000)
struct SQCommandActor_SetAction final
{
public:
	TSubclassOf<class USQGridData_CommandOption>  NewAction;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCommandActor_SetAction) == 0x000008, "Wrong alignment on SQCommandActor_SetAction");
static_assert(sizeof(SQCommandActor_SetAction) == 0x000008, "Wrong size on SQCommandActor_SetAction");
static_assert(offsetof(SQCommandActor_SetAction, NewAction) == 0x000000, "Member 'SQCommandActor_SetAction::NewAction' has a wrong offset!");

// Function Squad.SQFreeLookComponent.ServerSetFreeLookRotation
// 0x000C (0x000C - 0x0000)
struct SQFreeLookComponent_ServerSetFreeLookRotation final
{
public:
	struct FRotator                               NewFreeLookRotation;                               // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFreeLookComponent_ServerSetFreeLookRotation) == 0x000004, "Wrong alignment on SQFreeLookComponent_ServerSetFreeLookRotation");
static_assert(sizeof(SQFreeLookComponent_ServerSetFreeLookRotation) == 0x00000C, "Wrong size on SQFreeLookComponent_ServerSetFreeLookRotation");
static_assert(offsetof(SQFreeLookComponent_ServerSetFreeLookRotation, NewFreeLookRotation) == 0x000000, "Member 'SQFreeLookComponent_ServerSetFreeLookRotation::NewFreeLookRotation' has a wrong offset!");

// Function Squad.SQFreeLookComponent.SetCanFreelookWhileADS
// 0x0001 (0x0001 - 0x0000)
struct SQFreeLookComponent_SetCanFreelookWhileADS final
{
public:
	bool                                          bNewBool;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFreeLookComponent_SetCanFreelookWhileADS) == 0x000001, "Wrong alignment on SQFreeLookComponent_SetCanFreelookWhileADS");
static_assert(sizeof(SQFreeLookComponent_SetCanFreelookWhileADS) == 0x000001, "Wrong size on SQFreeLookComponent_SetCanFreelookWhileADS");
static_assert(offsetof(SQFreeLookComponent_SetCanFreelookWhileADS, bNewBool) == 0x000000, "Member 'SQFreeLookComponent_SetCanFreelookWhileADS::bNewBool' has a wrong offset!");

// Function Squad.SQFreeLookComponent.SetFreeLookCamera
// 0x0008 (0x0008 - 0x0000)
struct SQFreeLookComponent_SetFreeLookCamera final
{
public:
	class UCameraComponent*                       NewCamera;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFreeLookComponent_SetFreeLookCamera) == 0x000008, "Wrong alignment on SQFreeLookComponent_SetFreeLookCamera");
static_assert(sizeof(SQFreeLookComponent_SetFreeLookCamera) == 0x000008, "Wrong size on SQFreeLookComponent_SetFreeLookCamera");
static_assert(offsetof(SQFreeLookComponent_SetFreeLookCamera, NewCamera) == 0x000000, "Member 'SQFreeLookComponent_SetFreeLookCamera::NewCamera' has a wrong offset!");

// Function Squad.SQFreeLookComponent.SetFreelookCanRecenterWeapons
// 0x0001 (0x0001 - 0x0000)
struct SQFreeLookComponent_SetFreelookCanRecenterWeapons final
{
public:
	bool                                          bNewBool;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFreeLookComponent_SetFreelookCanRecenterWeapons) == 0x000001, "Wrong alignment on SQFreeLookComponent_SetFreelookCanRecenterWeapons");
static_assert(sizeof(SQFreeLookComponent_SetFreelookCanRecenterWeapons) == 0x000001, "Wrong size on SQFreeLookComponent_SetFreelookCanRecenterWeapons");
static_assert(offsetof(SQFreeLookComponent_SetFreelookCanRecenterWeapons, bNewBool) == 0x000000, "Member 'SQFreeLookComponent_SetFreelookCanRecenterWeapons::bNewBool' has a wrong offset!");

// Function Squad.SQFreeLookComponent.SetFreeLookMode
// 0x0001 (0x0001 - 0x0000)
struct SQFreeLookComponent_SetFreeLookMode final
{
public:
	EFreeLookMode                                 NewFreeLookMode;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFreeLookComponent_SetFreeLookMode) == 0x000001, "Wrong alignment on SQFreeLookComponent_SetFreeLookMode");
static_assert(sizeof(SQFreeLookComponent_SetFreeLookMode) == 0x000001, "Wrong size on SQFreeLookComponent_SetFreeLookMode");
static_assert(offsetof(SQFreeLookComponent_SetFreeLookMode, NewFreeLookMode) == 0x000000, "Member 'SQFreeLookComponent_SetFreeLookMode::NewFreeLookMode' has a wrong offset!");

// Function Squad.SQFreeLookComponent.SetFreeLookRotation
// 0x000C (0x000C - 0x0000)
struct SQFreeLookComponent_SetFreeLookRotation final
{
public:
	struct FRotator                               NewFreeLookRotator;                                // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFreeLookComponent_SetFreeLookRotation) == 0x000004, "Wrong alignment on SQFreeLookComponent_SetFreeLookRotation");
static_assert(sizeof(SQFreeLookComponent_SetFreeLookRotation) == 0x00000C, "Wrong size on SQFreeLookComponent_SetFreeLookRotation");
static_assert(offsetof(SQFreeLookComponent_SetFreeLookRotation, NewFreeLookRotator) == 0x000000, "Member 'SQFreeLookComponent_SetFreeLookRotation::NewFreeLookRotator' has a wrong offset!");

// Function Squad.SQFreeLookComponent.SetIsToggleActive
// 0x0001 (0x0001 - 0x0000)
struct SQFreeLookComponent_SetIsToggleActive final
{
public:
	bool                                          bNewState;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFreeLookComponent_SetIsToggleActive) == 0x000001, "Wrong alignment on SQFreeLookComponent_SetIsToggleActive");
static_assert(sizeof(SQFreeLookComponent_SetIsToggleActive) == 0x000001, "Wrong size on SQFreeLookComponent_SetIsToggleActive");
static_assert(offsetof(SQFreeLookComponent_SetIsToggleActive, bNewState) == 0x000000, "Member 'SQFreeLookComponent_SetIsToggleActive::bNewState' has a wrong offset!");

// Function Squad.SQFreeLookComponent.SetPitchLimits
// 0x0008 (0x0008 - 0x0000)
struct SQFreeLookComponent_SetPitchLimits final
{
public:
	struct FVector2D                              NewPitchLimits;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFreeLookComponent_SetPitchLimits) == 0x000004, "Wrong alignment on SQFreeLookComponent_SetPitchLimits");
static_assert(sizeof(SQFreeLookComponent_SetPitchLimits) == 0x000008, "Wrong size on SQFreeLookComponent_SetPitchLimits");
static_assert(offsetof(SQFreeLookComponent_SetPitchLimits, NewPitchLimits) == 0x000000, "Member 'SQFreeLookComponent_SetPitchLimits::NewPitchLimits' has a wrong offset!");

// Function Squad.SQFreeLookComponent.SetReplicateFreeLookRotation
// 0x0001 (0x0001 - 0x0000)
struct SQFreeLookComponent_SetReplicateFreeLookRotation final
{
public:
	bool                                          bNewBool;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFreeLookComponent_SetReplicateFreeLookRotation) == 0x000001, "Wrong alignment on SQFreeLookComponent_SetReplicateFreeLookRotation");
static_assert(sizeof(SQFreeLookComponent_SetReplicateFreeLookRotation) == 0x000001, "Wrong size on SQFreeLookComponent_SetReplicateFreeLookRotation");
static_assert(offsetof(SQFreeLookComponent_SetReplicateFreeLookRotation, bNewBool) == 0x000000, "Member 'SQFreeLookComponent_SetReplicateFreeLookRotation::bNewBool' has a wrong offset!");

// Function Squad.SQFreeLookComponent.SetRotationSpeed
// 0x0008 (0x0008 - 0x0000)
struct SQFreeLookComponent_SetRotationSpeed final
{
public:
	struct FVector2D                              NewRotationSpeed;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFreeLookComponent_SetRotationSpeed) == 0x000004, "Wrong alignment on SQFreeLookComponent_SetRotationSpeed");
static_assert(sizeof(SQFreeLookComponent_SetRotationSpeed) == 0x000008, "Wrong size on SQFreeLookComponent_SetRotationSpeed");
static_assert(offsetof(SQFreeLookComponent_SetRotationSpeed, NewRotationSpeed) == 0x000000, "Member 'SQFreeLookComponent_SetRotationSpeed::NewRotationSpeed' has a wrong offset!");

// Function Squad.SQFreeLookComponent.SetYawLimits
// 0x0008 (0x0008 - 0x0000)
struct SQFreeLookComponent_SetYawLimits final
{
public:
	struct FVector2D                              NewYawLimits;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFreeLookComponent_SetYawLimits) == 0x000004, "Wrong alignment on SQFreeLookComponent_SetYawLimits");
static_assert(sizeof(SQFreeLookComponent_SetYawLimits) == 0x000008, "Wrong size on SQFreeLookComponent_SetYawLimits");
static_assert(offsetof(SQFreeLookComponent_SetYawLimits, NewYawLimits) == 0x000000, "Member 'SQFreeLookComponent_SetYawLimits::NewYawLimits' has a wrong offset!");

// Function Squad.SQFreeLookComponent.CalculateFreeLookRotation
// 0x000C (0x000C - 0x0000)
struct SQFreeLookComponent_CalculateFreeLookRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFreeLookComponent_CalculateFreeLookRotation) == 0x000004, "Wrong alignment on SQFreeLookComponent_CalculateFreeLookRotation");
static_assert(sizeof(SQFreeLookComponent_CalculateFreeLookRotation) == 0x00000C, "Wrong size on SQFreeLookComponent_CalculateFreeLookRotation");
static_assert(offsetof(SQFreeLookComponent_CalculateFreeLookRotation, ReturnValue) == 0x000000, "Member 'SQFreeLookComponent_CalculateFreeLookRotation::ReturnValue' has a wrong offset!");

// Function Squad.SQFreeLookComponent.GetCanFreelookWhileADS
// 0x0001 (0x0001 - 0x0000)
struct SQFreeLookComponent_GetCanFreelookWhileADS final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFreeLookComponent_GetCanFreelookWhileADS) == 0x000001, "Wrong alignment on SQFreeLookComponent_GetCanFreelookWhileADS");
static_assert(sizeof(SQFreeLookComponent_GetCanFreelookWhileADS) == 0x000001, "Wrong size on SQFreeLookComponent_GetCanFreelookWhileADS");
static_assert(offsetof(SQFreeLookComponent_GetCanFreelookWhileADS, ReturnValue) == 0x000000, "Member 'SQFreeLookComponent_GetCanFreelookWhileADS::ReturnValue' has a wrong offset!");

// Function Squad.SQFreeLookComponent.GetFreeLookCamera
// 0x0008 (0x0008 - 0x0000)
struct SQFreeLookComponent_GetFreeLookCamera final
{
public:
	class UCameraComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFreeLookComponent_GetFreeLookCamera) == 0x000008, "Wrong alignment on SQFreeLookComponent_GetFreeLookCamera");
static_assert(sizeof(SQFreeLookComponent_GetFreeLookCamera) == 0x000008, "Wrong size on SQFreeLookComponent_GetFreeLookCamera");
static_assert(offsetof(SQFreeLookComponent_GetFreeLookCamera, ReturnValue) == 0x000000, "Member 'SQFreeLookComponent_GetFreeLookCamera::ReturnValue' has a wrong offset!");

// Function Squad.SQFreeLookComponent.GetFreelookCanRecenterWeapons
// 0x0001 (0x0001 - 0x0000)
struct SQFreeLookComponent_GetFreelookCanRecenterWeapons final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFreeLookComponent_GetFreelookCanRecenterWeapons) == 0x000001, "Wrong alignment on SQFreeLookComponent_GetFreelookCanRecenterWeapons");
static_assert(sizeof(SQFreeLookComponent_GetFreelookCanRecenterWeapons) == 0x000001, "Wrong size on SQFreeLookComponent_GetFreelookCanRecenterWeapons");
static_assert(offsetof(SQFreeLookComponent_GetFreelookCanRecenterWeapons, ReturnValue) == 0x000000, "Member 'SQFreeLookComponent_GetFreelookCanRecenterWeapons::ReturnValue' has a wrong offset!");

// Function Squad.SQFreeLookComponent.GetIsFreeLookComponentActive
// 0x0001 (0x0001 - 0x0000)
struct SQFreeLookComponent_GetIsFreeLookComponentActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFreeLookComponent_GetIsFreeLookComponentActive) == 0x000001, "Wrong alignment on SQFreeLookComponent_GetIsFreeLookComponentActive");
static_assert(sizeof(SQFreeLookComponent_GetIsFreeLookComponentActive) == 0x000001, "Wrong size on SQFreeLookComponent_GetIsFreeLookComponentActive");
static_assert(offsetof(SQFreeLookComponent_GetIsFreeLookComponentActive, ReturnValue) == 0x000000, "Member 'SQFreeLookComponent_GetIsFreeLookComponentActive::ReturnValue' has a wrong offset!");

// Function Squad.SQFreeLookComponent.GetIsUsingFreeLook
// 0x0001 (0x0001 - 0x0000)
struct SQFreeLookComponent_GetIsUsingFreeLook final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFreeLookComponent_GetIsUsingFreeLook) == 0x000001, "Wrong alignment on SQFreeLookComponent_GetIsUsingFreeLook");
static_assert(sizeof(SQFreeLookComponent_GetIsUsingFreeLook) == 0x000001, "Wrong size on SQFreeLookComponent_GetIsUsingFreeLook");
static_assert(offsetof(SQFreeLookComponent_GetIsUsingFreeLook, ReturnValue) == 0x000000, "Member 'SQFreeLookComponent_GetIsUsingFreeLook::ReturnValue' has a wrong offset!");

// Function Squad.SQFreeLookComponent.GetPitchLimits
// 0x0008 (0x0008 - 0x0000)
struct SQFreeLookComponent_GetPitchLimits final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFreeLookComponent_GetPitchLimits) == 0x000004, "Wrong alignment on SQFreeLookComponent_GetPitchLimits");
static_assert(sizeof(SQFreeLookComponent_GetPitchLimits) == 0x000008, "Wrong size on SQFreeLookComponent_GetPitchLimits");
static_assert(offsetof(SQFreeLookComponent_GetPitchLimits, ReturnValue) == 0x000000, "Member 'SQFreeLookComponent_GetPitchLimits::ReturnValue' has a wrong offset!");

// Function Squad.SQFreeLookComponent.GetRotationSpeed
// 0x0008 (0x0008 - 0x0000)
struct SQFreeLookComponent_GetRotationSpeed final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFreeLookComponent_GetRotationSpeed) == 0x000004, "Wrong alignment on SQFreeLookComponent_GetRotationSpeed");
static_assert(sizeof(SQFreeLookComponent_GetRotationSpeed) == 0x000008, "Wrong size on SQFreeLookComponent_GetRotationSpeed");
static_assert(offsetof(SQFreeLookComponent_GetRotationSpeed, ReturnValue) == 0x000000, "Member 'SQFreeLookComponent_GetRotationSpeed::ReturnValue' has a wrong offset!");

// Function Squad.SQFreeLookComponent.GetYawLimits
// 0x0008 (0x0008 - 0x0000)
struct SQFreeLookComponent_GetYawLimits final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFreeLookComponent_GetYawLimits) == 0x000004, "Wrong alignment on SQFreeLookComponent_GetYawLimits");
static_assert(sizeof(SQFreeLookComponent_GetYawLimits) == 0x000008, "Wrong size on SQFreeLookComponent_GetYawLimits");
static_assert(offsetof(SQFreeLookComponent_GetYawLimits, ReturnValue) == 0x000000, "Member 'SQFreeLookComponent_GetYawLimits::ReturnValue' has a wrong offset!");

// Function Squad.SQCommanderInputComponent.AttemptSetActionsUsableState
// 0x0001 (0x0001 - 0x0000)
struct SQCommanderInputComponent_AttemptSetActionsUsableState final
{
public:
	bool                                          bNewActionsEnabled;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCommanderInputComponent_AttemptSetActionsUsableState) == 0x000001, "Wrong alignment on SQCommanderInputComponent_AttemptSetActionsUsableState");
static_assert(sizeof(SQCommanderInputComponent_AttemptSetActionsUsableState) == 0x000001, "Wrong size on SQCommanderInputComponent_AttemptSetActionsUsableState");
static_assert(offsetof(SQCommanderInputComponent_AttemptSetActionsUsableState, bNewActionsEnabled) == 0x000000, "Member 'SQCommanderInputComponent_AttemptSetActionsUsableState::bNewActionsEnabled' has a wrong offset!");

// Function Squad.SQCommanderInputComponent.DebugEnableVoteRequirements
// 0x0001 (0x0001 - 0x0000)
struct SQCommanderInputComponent_DebugEnableVoteRequirements final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCommanderInputComponent_DebugEnableVoteRequirements) == 0x000001, "Wrong alignment on SQCommanderInputComponent_DebugEnableVoteRequirements");
static_assert(sizeof(SQCommanderInputComponent_DebugEnableVoteRequirements) == 0x000001, "Wrong size on SQCommanderInputComponent_DebugEnableVoteRequirements");
static_assert(offsetof(SQCommanderInputComponent_DebugEnableVoteRequirements, bEnable) == 0x000000, "Member 'SQCommanderInputComponent_DebugEnableVoteRequirements::bEnable' has a wrong offset!");

// Function Squad.SQCommanderInputComponent.DebugVoteForCommander
// 0x0010 (0x0010 - 0x0000)
struct SQCommanderInputComponent_DebugVoteForCommander final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCommanderInputComponent_DebugVoteForCommander) == 0x000008, "Wrong alignment on SQCommanderInputComponent_DebugVoteForCommander");
static_assert(sizeof(SQCommanderInputComponent_DebugVoteForCommander) == 0x000010, "Wrong size on SQCommanderInputComponent_DebugVoteForCommander");
static_assert(offsetof(SQCommanderInputComponent_DebugVoteForCommander, PlayerName) == 0x000000, "Member 'SQCommanderInputComponent_DebugVoteForCommander::PlayerName' has a wrong offset!");

// Function Squad.SQCommanderInputComponent.RequestCommandActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct SQCommanderInputComponent_RequestCommandActorDestroyed final
{
public:
	TSubclassOf<class USQGridData_CommandOption>  CommandOption;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCommanderInputComponent_RequestCommandActorDestroyed) == 0x000008, "Wrong alignment on SQCommanderInputComponent_RequestCommandActorDestroyed");
static_assert(sizeof(SQCommanderInputComponent_RequestCommandActorDestroyed) == 0x000008, "Wrong size on SQCommanderInputComponent_RequestCommandActorDestroyed");
static_assert(offsetof(SQCommanderInputComponent_RequestCommandActorDestroyed, CommandOption) == 0x000000, "Member 'SQCommanderInputComponent_RequestCommandActorDestroyed::CommandOption' has a wrong offset!");

// Function Squad.SQCommanderInputComponent.RequestCreateCommandActor
// 0x0050 (0x0050 - 0x0000)
struct SQCommanderInputComponent_RequestCreateCommandActor final
{
public:
	TSubclassOf<class USQGridData_CommandOption>  CommandOption;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8D[0x8];                                      // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0040(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8E[0xC];                                      // 0x0044(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQCommanderInputComponent_RequestCreateCommandActor) == 0x000010, "Wrong alignment on SQCommanderInputComponent_RequestCreateCommandActor");
static_assert(sizeof(SQCommanderInputComponent_RequestCreateCommandActor) == 0x000050, "Wrong size on SQCommanderInputComponent_RequestCreateCommandActor");
static_assert(offsetof(SQCommanderInputComponent_RequestCreateCommandActor, CommandOption) == 0x000000, "Member 'SQCommanderInputComponent_RequestCreateCommandActor::CommandOption' has a wrong offset!");
static_assert(offsetof(SQCommanderInputComponent_RequestCreateCommandActor, Transform) == 0x000010, "Member 'SQCommanderInputComponent_RequestCreateCommandActor::Transform' has a wrong offset!");
static_assert(offsetof(SQCommanderInputComponent_RequestCreateCommandActor, Distance) == 0x000040, "Member 'SQCommanderInputComponent_RequestCreateCommandActor::Distance' has a wrong offset!");

// Function Squad.SQCommanderInputComponent.RequestSupportAtLocation
// 0x000C (0x000C - 0x0000)
struct SQCommanderInputComponent_RequestSupportAtLocation final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCommanderInputComponent_RequestSupportAtLocation) == 0x000004, "Wrong alignment on SQCommanderInputComponent_RequestSupportAtLocation");
static_assert(sizeof(SQCommanderInputComponent_RequestSupportAtLocation) == 0x00000C, "Wrong size on SQCommanderInputComponent_RequestSupportAtLocation");
static_assert(offsetof(SQCommanderInputComponent_RequestSupportAtLocation, WorldLocation) == 0x000000, "Member 'SQCommanderInputComponent_RequestSupportAtLocation::WorldLocation' has a wrong offset!");

// Function Squad.SQCommanderInputComponent.ServerAttemptSetActionsUsableState
// 0x0001 (0x0001 - 0x0000)
struct SQCommanderInputComponent_ServerAttemptSetActionsUsableState final
{
public:
	bool                                          bNewActionsEnabled;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCommanderInputComponent_ServerAttemptSetActionsUsableState) == 0x000001, "Wrong alignment on SQCommanderInputComponent_ServerAttemptSetActionsUsableState");
static_assert(sizeof(SQCommanderInputComponent_ServerAttemptSetActionsUsableState) == 0x000001, "Wrong size on SQCommanderInputComponent_ServerAttemptSetActionsUsableState");
static_assert(offsetof(SQCommanderInputComponent_ServerAttemptSetActionsUsableState, bNewActionsEnabled) == 0x000000, "Member 'SQCommanderInputComponent_ServerAttemptSetActionsUsableState::bNewActionsEnabled' has a wrong offset!");

// Function Squad.SQCommanderInputComponent.ServerDebugEnableVoteRequirements
// 0x0001 (0x0001 - 0x0000)
struct SQCommanderInputComponent_ServerDebugEnableVoteRequirements final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCommanderInputComponent_ServerDebugEnableVoteRequirements) == 0x000001, "Wrong alignment on SQCommanderInputComponent_ServerDebugEnableVoteRequirements");
static_assert(sizeof(SQCommanderInputComponent_ServerDebugEnableVoteRequirements) == 0x000001, "Wrong size on SQCommanderInputComponent_ServerDebugEnableVoteRequirements");
static_assert(offsetof(SQCommanderInputComponent_ServerDebugEnableVoteRequirements, bEnable) == 0x000000, "Member 'SQCommanderInputComponent_ServerDebugEnableVoteRequirements::bEnable' has a wrong offset!");

// Function Squad.SQCommanderInputComponent.ServerMakePlayerCommander
// 0x0008 (0x0008 - 0x0000)
struct SQCommanderInputComponent_ServerMakePlayerCommander final
{
public:
	class ASQPlayerState*                         NewCommander;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCommanderInputComponent_ServerMakePlayerCommander) == 0x000008, "Wrong alignment on SQCommanderInputComponent_ServerMakePlayerCommander");
static_assert(sizeof(SQCommanderInputComponent_ServerMakePlayerCommander) == 0x000008, "Wrong size on SQCommanderInputComponent_ServerMakePlayerCommander");
static_assert(offsetof(SQCommanderInputComponent_ServerMakePlayerCommander, NewCommander) == 0x000000, "Member 'SQCommanderInputComponent_ServerMakePlayerCommander::NewCommander' has a wrong offset!");

// Function Squad.SQCommanderInputComponent.ServerRequestCommandActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct SQCommanderInputComponent_ServerRequestCommandActorDestroyed final
{
public:
	TSubclassOf<class USQGridData_CommandOption>  CommandOption;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCommanderInputComponent_ServerRequestCommandActorDestroyed) == 0x000008, "Wrong alignment on SQCommanderInputComponent_ServerRequestCommandActorDestroyed");
static_assert(sizeof(SQCommanderInputComponent_ServerRequestCommandActorDestroyed) == 0x000008, "Wrong size on SQCommanderInputComponent_ServerRequestCommandActorDestroyed");
static_assert(offsetof(SQCommanderInputComponent_ServerRequestCommandActorDestroyed, CommandOption) == 0x000000, "Member 'SQCommanderInputComponent_ServerRequestCommandActorDestroyed::CommandOption' has a wrong offset!");

// Function Squad.SQCommanderInputComponent.ServerRequestCreateCommandActor
// 0x0050 (0x0050 - 0x0000)
struct SQCommanderInputComponent_ServerRequestCreateCommandActor final
{
public:
	TSubclassOf<class USQGridData_CommandOption>  CommandOption;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8F[0x8];                                      // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0040(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F90[0xC];                                      // 0x0044(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQCommanderInputComponent_ServerRequestCreateCommandActor) == 0x000010, "Wrong alignment on SQCommanderInputComponent_ServerRequestCreateCommandActor");
static_assert(sizeof(SQCommanderInputComponent_ServerRequestCreateCommandActor) == 0x000050, "Wrong size on SQCommanderInputComponent_ServerRequestCreateCommandActor");
static_assert(offsetof(SQCommanderInputComponent_ServerRequestCreateCommandActor, CommandOption) == 0x000000, "Member 'SQCommanderInputComponent_ServerRequestCreateCommandActor::CommandOption' has a wrong offset!");
static_assert(offsetof(SQCommanderInputComponent_ServerRequestCreateCommandActor, Transform) == 0x000010, "Member 'SQCommanderInputComponent_ServerRequestCreateCommandActor::Transform' has a wrong offset!");
static_assert(offsetof(SQCommanderInputComponent_ServerRequestCreateCommandActor, Distance) == 0x000040, "Member 'SQCommanderInputComponent_ServerRequestCreateCommandActor::Distance' has a wrong offset!");

// Function Squad.SQCommanderInputComponent.ServerRequestSupportAtLocation
// 0x000C (0x000C - 0x0000)
struct SQCommanderInputComponent_ServerRequestSupportAtLocation final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCommanderInputComponent_ServerRequestSupportAtLocation) == 0x000004, "Wrong alignment on SQCommanderInputComponent_ServerRequestSupportAtLocation");
static_assert(sizeof(SQCommanderInputComponent_ServerRequestSupportAtLocation) == 0x00000C, "Wrong size on SQCommanderInputComponent_ServerRequestSupportAtLocation");
static_assert(offsetof(SQCommanderInputComponent_ServerRequestSupportAtLocation, WorldLocation) == 0x000000, "Member 'SQCommanderInputComponent_ServerRequestSupportAtLocation::WorldLocation' has a wrong offset!");

// Function Squad.SQCommanderInputComponent.ServerVoteForCommander
// 0x0008 (0x0008 - 0x0000)
struct SQCommanderInputComponent_ServerVoteForCommander final
{
public:
	class ASQPlayerState*                         Nominee;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCommanderInputComponent_ServerVoteForCommander) == 0x000008, "Wrong alignment on SQCommanderInputComponent_ServerVoteForCommander");
static_assert(sizeof(SQCommanderInputComponent_ServerVoteForCommander) == 0x000008, "Wrong size on SQCommanderInputComponent_ServerVoteForCommander");
static_assert(offsetof(SQCommanderInputComponent_ServerVoteForCommander, Nominee) == 0x000000, "Member 'SQCommanderInputComponent_ServerVoteForCommander::Nominee' has a wrong offset!");

// Function Squad.SQCommanderInputComponent.VotePlayer
// 0x0008 (0x0008 - 0x0000)
struct SQCommanderInputComponent_VotePlayer final
{
public:
	class ASQPlayerState*                         Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCommanderInputComponent_VotePlayer) == 0x000008, "Wrong alignment on SQCommanderInputComponent_VotePlayer");
static_assert(sizeof(SQCommanderInputComponent_VotePlayer) == 0x000008, "Wrong size on SQCommanderInputComponent_VotePlayer");
static_assert(offsetof(SQCommanderInputComponent_VotePlayer, Player) == 0x000000, "Member 'SQCommanderInputComponent_VotePlayer::Player' has a wrong offset!");

// Function Squad.SQGameInstance.GetServerUniqueId
// 0x0128 (0x0128 - 0x0000)
struct SQGameInstance_GetServerUniqueId final
{
public:
	struct FBlueprintSessionResult                BlueprintSessionResult;                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x0108(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutUniqueId;                                       // 0x0110(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0120(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9B[0x7];                                      // 0x0121(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameInstance_GetServerUniqueId) == 0x000008, "Wrong alignment on SQGameInstance_GetServerUniqueId");
static_assert(sizeof(SQGameInstance_GetServerUniqueId) == 0x000128, "Wrong size on SQGameInstance_GetServerUniqueId");
static_assert(offsetof(SQGameInstance_GetServerUniqueId, BlueprintSessionResult) == 0x000000, "Member 'SQGameInstance_GetServerUniqueId::BlueprintSessionResult' has a wrong offset!");
static_assert(offsetof(SQGameInstance_GetServerUniqueId, WorldContextObject) == 0x000108, "Member 'SQGameInstance_GetServerUniqueId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQGameInstance_GetServerUniqueId, OutUniqueId) == 0x000110, "Member 'SQGameInstance_GetServerUniqueId::OutUniqueId' has a wrong offset!");
static_assert(offsetof(SQGameInstance_GetServerUniqueId, ReturnValue) == 0x000120, "Member 'SQGameInstance_GetServerUniqueId::ReturnValue' has a wrong offset!");

// Function Squad.SQGameInstance.CanQueueForServer
// 0x0018 (0x0018 - 0x0000)
struct SQGameInstance_CanQueueForServer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USQSessionInfo*                   ServerSession;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9C[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameInstance_CanQueueForServer) == 0x000008, "Wrong alignment on SQGameInstance_CanQueueForServer");
static_assert(sizeof(SQGameInstance_CanQueueForServer) == 0x000018, "Wrong size on SQGameInstance_CanQueueForServer");
static_assert(offsetof(SQGameInstance_CanQueueForServer, WorldContextObject) == 0x000000, "Member 'SQGameInstance_CanQueueForServer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQGameInstance_CanQueueForServer, ServerSession) == 0x000008, "Member 'SQGameInstance_CanQueueForServer::ServerSession' has a wrong offset!");
static_assert(offsetof(SQGameInstance_CanQueueForServer, ReturnValue) == 0x000010, "Member 'SQGameInstance_CanQueueForServer::ReturnValue' has a wrong offset!");

// Function Squad.SQGameInstance.DetermineStartupLayer
// 0x0001 (0x0001 - 0x0000)
struct SQGameInstance_DetermineStartupLayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameInstance_DetermineStartupLayer) == 0x000001, "Wrong alignment on SQGameInstance_DetermineStartupLayer");
static_assert(sizeof(SQGameInstance_DetermineStartupLayer) == 0x000001, "Wrong size on SQGameInstance_DetermineStartupLayer");
static_assert(offsetof(SQGameInstance_DetermineStartupLayer, ReturnValue) == 0x000000, "Member 'SQGameInstance_DetermineStartupLayer::ReturnValue' has a wrong offset!");

// Function Squad.SQGameInstance.ForceLoadFaction
// 0x0010 (0x0010 - 0x0000)
struct SQGameInstance_ForceLoadFaction final
{
public:
	class FName                                   FactionID;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQFaction*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameInstance_ForceLoadFaction) == 0x000008, "Wrong alignment on SQGameInstance_ForceLoadFaction");
static_assert(sizeof(SQGameInstance_ForceLoadFaction) == 0x000010, "Wrong size on SQGameInstance_ForceLoadFaction");
static_assert(offsetof(SQGameInstance_ForceLoadFaction, FactionID) == 0x000000, "Member 'SQGameInstance_ForceLoadFaction::FactionID' has a wrong offset!");
static_assert(offsetof(SQGameInstance_ForceLoadFaction, ReturnValue) == 0x000008, "Member 'SQGameInstance_ForceLoadFaction::ReturnValue' has a wrong offset!");

// Function Squad.SQGameInstance.GetPipTextureIfAvailable
// 0x0010 (0x0010 - 0x0000)
struct SQGameInstance_GetPipTextureIfAvailable final
{
public:
	const class USQPipScopeCaptureComponent*      InCaptureComponent;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameInstance_GetPipTextureIfAvailable) == 0x000008, "Wrong alignment on SQGameInstance_GetPipTextureIfAvailable");
static_assert(sizeof(SQGameInstance_GetPipTextureIfAvailable) == 0x000010, "Wrong size on SQGameInstance_GetPipTextureIfAvailable");
static_assert(offsetof(SQGameInstance_GetPipTextureIfAvailable, InCaptureComponent) == 0x000000, "Member 'SQGameInstance_GetPipTextureIfAvailable::InCaptureComponent' has a wrong offset!");
static_assert(offsetof(SQGameInstance_GetPipTextureIfAvailable, ReturnValue) == 0x000008, "Member 'SQGameInstance_GetPipTextureIfAvailable::ReturnValue' has a wrong offset!");

// Function Squad.SQGameInstance.GetSquadUISettings
// 0x0008 (0x0008 - 0x0000)
struct SQGameInstance_GetSquadUISettings final
{
public:
	class USQUISettings*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameInstance_GetSquadUISettings) == 0x000008, "Wrong alignment on SQGameInstance_GetSquadUISettings");
static_assert(sizeof(SQGameInstance_GetSquadUISettings) == 0x000008, "Wrong size on SQGameInstance_GetSquadUISettings");
static_assert(offsetof(SQGameInstance_GetSquadUISettings, ReturnValue) == 0x000000, "Member 'SQGameInstance_GetSquadUISettings::ReturnValue' has a wrong offset!");

// Function Squad.SQGameInstance.HostGame
// 0x0030 (0x0030 - 0x0000)
struct SQGameInstance_HostGame final
{
public:
	class ULocalPlayer*                           LocalPlayer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameType;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InTravelURL;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9D[0x7];                                      // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameInstance_HostGame) == 0x000008, "Wrong alignment on SQGameInstance_HostGame");
static_assert(sizeof(SQGameInstance_HostGame) == 0x000030, "Wrong size on SQGameInstance_HostGame");
static_assert(offsetof(SQGameInstance_HostGame, LocalPlayer) == 0x000000, "Member 'SQGameInstance_HostGame::LocalPlayer' has a wrong offset!");
static_assert(offsetof(SQGameInstance_HostGame, GameType) == 0x000008, "Member 'SQGameInstance_HostGame::GameType' has a wrong offset!");
static_assert(offsetof(SQGameInstance_HostGame, InTravelURL) == 0x000018, "Member 'SQGameInstance_HostGame::InTravelURL' has a wrong offset!");
static_assert(offsetof(SQGameInstance_HostGame, ReturnValue) == 0x000028, "Member 'SQGameInstance_HostGame::ReturnValue' has a wrong offset!");

// Function Squad.SQGameInstance.IsLoadingFinished
// 0x0001 (0x0001 - 0x0000)
struct SQGameInstance_IsLoadingFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameInstance_IsLoadingFinished) == 0x000001, "Wrong alignment on SQGameInstance_IsLoadingFinished");
static_assert(sizeof(SQGameInstance_IsLoadingFinished) == 0x000001, "Wrong size on SQGameInstance_IsLoadingFinished");
static_assert(offsetof(SQGameInstance_IsLoadingFinished, ReturnValue) == 0x000000, "Member 'SQGameInstance_IsLoadingFinished::ReturnValue' has a wrong offset!");

// Function Squad.SQGameInstance.IsOnlineServiceConnected
// 0x0001 (0x0001 - 0x0000)
struct SQGameInstance_IsOnlineServiceConnected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameInstance_IsOnlineServiceConnected) == 0x000001, "Wrong alignment on SQGameInstance_IsOnlineServiceConnected");
static_assert(sizeof(SQGameInstance_IsOnlineServiceConnected) == 0x000001, "Wrong size on SQGameInstance_IsOnlineServiceConnected");
static_assert(offsetof(SQGameInstance_IsOnlineServiceConnected, ReturnValue) == 0x000000, "Member 'SQGameInstance_IsOnlineServiceConnected::ReturnValue' has a wrong offset!");

// Function Squad.SQGameInstance.IsSteamConnected
// 0x0001 (0x0001 - 0x0000)
struct SQGameInstance_IsSteamConnected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameInstance_IsSteamConnected) == 0x000001, "Wrong alignment on SQGameInstance_IsSteamConnected");
static_assert(sizeof(SQGameInstance_IsSteamConnected) == 0x000001, "Wrong size on SQGameInstance_IsSteamConnected");
static_assert(offsetof(SQGameInstance_IsSteamConnected, ReturnValue) == 0x000000, "Member 'SQGameInstance_IsSteamConnected::ReturnValue' has a wrong offset!");

// Function Squad.SQGameInstance.MakePipTextureTargetAvailable
// 0x0008 (0x0008 - 0x0000)
struct SQGameInstance_MakePipTextureTargetAvailable final
{
public:
	const class UTextureRenderTarget2D*           InTextureTarget;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameInstance_MakePipTextureTargetAvailable) == 0x000008, "Wrong alignment on SQGameInstance_MakePipTextureTargetAvailable");
static_assert(sizeof(SQGameInstance_MakePipTextureTargetAvailable) == 0x000008, "Wrong size on SQGameInstance_MakePipTextureTargetAvailable");
static_assert(offsetof(SQGameInstance_MakePipTextureTargetAvailable, InTextureTarget) == 0x000000, "Member 'SQGameInstance_MakePipTextureTargetAvailable::InTextureTarget' has a wrong offset!");

// Function Squad.SQGameInstance.MarkLoadingRequirementFinished
// 0x0001 (0x0001 - 0x0000)
struct SQGameInstance_MarkLoadingRequirementFinished final
{
public:
	ESQLoadingRequirement                         Requirement;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameInstance_MarkLoadingRequirementFinished) == 0x000001, "Wrong alignment on SQGameInstance_MarkLoadingRequirementFinished");
static_assert(sizeof(SQGameInstance_MarkLoadingRequirementFinished) == 0x000001, "Wrong size on SQGameInstance_MarkLoadingRequirementFinished");
static_assert(offsetof(SQGameInstance_MarkLoadingRequirementFinished, Requirement) == 0x000000, "Member 'SQGameInstance_MarkLoadingRequirementFinished::Requirement' has a wrong offset!");

// Function Squad.SQGameInstance.OnNewModdedFactionAvailable
// 0x0008 (0x0008 - 0x0000)
struct SQGameInstance_OnNewModdedFactionAvailable final
{
public:
	class USQFaction*                             Faction;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameInstance_OnNewModdedFactionAvailable) == 0x000008, "Wrong alignment on SQGameInstance_OnNewModdedFactionAvailable");
static_assert(sizeof(SQGameInstance_OnNewModdedFactionAvailable) == 0x000008, "Wrong size on SQGameInstance_OnNewModdedFactionAvailable");
static_assert(offsetof(SQGameInstance_OnNewModdedFactionAvailable, Faction) == 0x000000, "Member 'SQGameInstance_OnNewModdedFactionAvailable::Faction' has a wrong offset!");

// Function Squad.SQGameInstance.OnNewModdedFactionSetupAvailable
// 0x0008 (0x0008 - 0x0000)
struct SQGameInstance_OnNewModdedFactionSetupAvailable final
{
public:
	class USQFactionSetup*                        FactionSetup;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameInstance_OnNewModdedFactionSetupAvailable) == 0x000008, "Wrong alignment on SQGameInstance_OnNewModdedFactionSetupAvailable");
static_assert(sizeof(SQGameInstance_OnNewModdedFactionSetupAvailable) == 0x000008, "Wrong size on SQGameInstance_OnNewModdedFactionSetupAvailable");
static_assert(offsetof(SQGameInstance_OnNewModdedFactionSetupAvailable, FactionSetup) == 0x000000, "Member 'SQGameInstance_OnNewModdedFactionSetupAvailable::FactionSetup' has a wrong offset!");

// Function Squad.SQGameInstance.OnNewModdedLayerAvailable
// 0x0008 (0x0008 - 0x0000)
struct SQGameInstance_OnNewModdedLayerAvailable final
{
public:
	class USQLayer*                               Layer;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameInstance_OnNewModdedLayerAvailable) == 0x000008, "Wrong alignment on SQGameInstance_OnNewModdedLayerAvailable");
static_assert(sizeof(SQGameInstance_OnNewModdedLayerAvailable) == 0x000008, "Wrong size on SQGameInstance_OnNewModdedLayerAvailable");
static_assert(offsetof(SQGameInstance_OnNewModdedLayerAvailable, Layer) == 0x000000, "Member 'SQGameInstance_OnNewModdedLayerAvailable::Layer' has a wrong offset!");

// Function Squad.SQGameInstance.OnNewModdedLevelAvailable
// 0x0008 (0x0008 - 0x0000)
struct SQGameInstance_OnNewModdedLevelAvailable final
{
public:
	class USQLevel*                               Level;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameInstance_OnNewModdedLevelAvailable) == 0x000008, "Wrong alignment on SQGameInstance_OnNewModdedLevelAvailable");
static_assert(sizeof(SQGameInstance_OnNewModdedLevelAvailable) == 0x000008, "Wrong size on SQGameInstance_OnNewModdedLevelAvailable");
static_assert(offsetof(SQGameInstance_OnNewModdedLevelAvailable, Level) == 0x000000, "Member 'SQGameInstance_OnNewModdedLevelAvailable::Level' has a wrong offset!");

// Function Squad.SQGameInstance.OverrideNextLayer
// 0x002C (0x002C - 0x0000)
struct SQGameInstance_OverrideNextLayer final
{
public:
	class FName                                   NextLayerName;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQLayerSettings                       LayerData;                                         // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bExtendSearch;                                     // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0029(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9E[0x2];                                      // 0x002A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameInstance_OverrideNextLayer) == 0x000004, "Wrong alignment on SQGameInstance_OverrideNextLayer");
static_assert(sizeof(SQGameInstance_OverrideNextLayer) == 0x00002C, "Wrong size on SQGameInstance_OverrideNextLayer");
static_assert(offsetof(SQGameInstance_OverrideNextLayer, NextLayerName) == 0x000000, "Member 'SQGameInstance_OverrideNextLayer::NextLayerName' has a wrong offset!");
static_assert(offsetof(SQGameInstance_OverrideNextLayer, LayerData) == 0x000008, "Member 'SQGameInstance_OverrideNextLayer::LayerData' has a wrong offset!");
static_assert(offsetof(SQGameInstance_OverrideNextLayer, bExtendSearch) == 0x000028, "Member 'SQGameInstance_OverrideNextLayer::bExtendSearch' has a wrong offset!");
static_assert(offsetof(SQGameInstance_OverrideNextLayer, ReturnValue) == 0x000029, "Member 'SQGameInstance_OverrideNextLayer::ReturnValue' has a wrong offset!");

// Function Squad.SQGameInstance.OverrideNextLevel
// 0x000C (0x000C - 0x0000)
struct SQGameInstance_OverrideNextLevel final
{
public:
	class FName                                   NextLevelName;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExtendSearch;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9F[0x2];                                      // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameInstance_OverrideNextLevel) == 0x000004, "Wrong alignment on SQGameInstance_OverrideNextLevel");
static_assert(sizeof(SQGameInstance_OverrideNextLevel) == 0x00000C, "Wrong size on SQGameInstance_OverrideNextLevel");
static_assert(offsetof(SQGameInstance_OverrideNextLevel, NextLevelName) == 0x000000, "Member 'SQGameInstance_OverrideNextLevel::NextLevelName' has a wrong offset!");
static_assert(offsetof(SQGameInstance_OverrideNextLevel, bExtendSearch) == 0x000008, "Member 'SQGameInstance_OverrideNextLevel::bExtendSearch' has a wrong offset!");
static_assert(offsetof(SQGameInstance_OverrideNextLevel, ReturnValue) == 0x000009, "Member 'SQGameInstance_OverrideNextLevel::ReturnValue' has a wrong offset!");

// Function Squad.SQGameInstance.PlayMusic
// 0x0008 (0x0008 - 0x0000)
struct SQGameInstance_PlayMusic final
{
public:
	class USoundBase*                             InOverrideMusic;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameInstance_PlayMusic) == 0x000008, "Wrong alignment on SQGameInstance_PlayMusic");
static_assert(sizeof(SQGameInstance_PlayMusic) == 0x000008, "Wrong size on SQGameInstance_PlayMusic");
static_assert(offsetof(SQGameInstance_PlayMusic, InOverrideMusic) == 0x000000, "Member 'SQGameInstance_PlayMusic::InOverrideMusic' has a wrong offset!");

// Function Squad.SQGameInstance.QueueForServer
// 0x0018 (0x0018 - 0x0000)
struct SQGameInstance_QueueForServer final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQSessionInfo*                         ServerSession;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQJoinBeaconClient*                    ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameInstance_QueueForServer) == 0x000008, "Wrong alignment on SQGameInstance_QueueForServer");
static_assert(sizeof(SQGameInstance_QueueForServer) == 0x000018, "Wrong size on SQGameInstance_QueueForServer");
static_assert(offsetof(SQGameInstance_QueueForServer, WorldContextObject) == 0x000000, "Member 'SQGameInstance_QueueForServer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQGameInstance_QueueForServer, ServerSession) == 0x000008, "Member 'SQGameInstance_QueueForServer::ServerSession' has a wrong offset!");
static_assert(offsetof(SQGameInstance_QueueForServer, ReturnValue) == 0x000010, "Member 'SQGameInstance_QueueForServer::ReturnValue' has a wrong offset!");

// Function Squad.SQGameInstance.ServerTravelToNextLayer
// 0x0010 (0x0010 - 0x0000)
struct SQGameInstance_ServerTravelToNextLayer final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameInstance_ServerTravelToNextLayer) == 0x000008, "Wrong alignment on SQGameInstance_ServerTravelToNextLayer");
static_assert(sizeof(SQGameInstance_ServerTravelToNextLayer) == 0x000010, "Wrong size on SQGameInstance_ServerTravelToNextLayer");
static_assert(offsetof(SQGameInstance_ServerTravelToNextLayer, Params_0) == 0x000000, "Member 'SQGameInstance_ServerTravelToNextLayer::Params_0' has a wrong offset!");

// Function Squad.SQGameInstance.ServerTravelToNextLevel
// 0x0010 (0x0010 - 0x0000)
struct SQGameInstance_ServerTravelToNextLevel final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameInstance_ServerTravelToNextLevel) == 0x000008, "Wrong alignment on SQGameInstance_ServerTravelToNextLevel");
static_assert(sizeof(SQGameInstance_ServerTravelToNextLevel) == 0x000010, "Wrong size on SQGameInstance_ServerTravelToNextLevel");
static_assert(offsetof(SQGameInstance_ServerTravelToNextLevel, Params_0) == 0x000000, "Member 'SQGameInstance_ServerTravelToNextLevel::Params_0' has a wrong offset!");

// Function Squad.SQGameInstance.ServerTravelToNextMap
// 0x0010 (0x0010 - 0x0000)
struct SQGameInstance_ServerTravelToNextMap final
{
public:
	class FString                                 Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameInstance_ServerTravelToNextMap) == 0x000008, "Wrong alignment on SQGameInstance_ServerTravelToNextMap");
static_assert(sizeof(SQGameInstance_ServerTravelToNextMap) == 0x000010, "Wrong size on SQGameInstance_ServerTravelToNextMap");
static_assert(offsetof(SQGameInstance_ServerTravelToNextMap, Params_0) == 0x000000, "Member 'SQGameInstance_ServerTravelToNextMap::Params_0' has a wrong offset!");

// Function Squad.SQGameInstance.TryGetNextLayers
// 0x0020 (0x0020 - 0x0000)
struct SQGameInstance_TryGetNextLayers final
{
public:
	int32                                         InCount;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA0[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USQLayer*>                       OutLayers;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA1[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameInstance_TryGetNextLayers) == 0x000008, "Wrong alignment on SQGameInstance_TryGetNextLayers");
static_assert(sizeof(SQGameInstance_TryGetNextLayers) == 0x000020, "Wrong size on SQGameInstance_TryGetNextLayers");
static_assert(offsetof(SQGameInstance_TryGetNextLayers, InCount) == 0x000000, "Member 'SQGameInstance_TryGetNextLayers::InCount' has a wrong offset!");
static_assert(offsetof(SQGameInstance_TryGetNextLayers, OutLayers) == 0x000008, "Member 'SQGameInstance_TryGetNextLayers::OutLayers' has a wrong offset!");
static_assert(offsetof(SQGameInstance_TryGetNextLayers, ReturnValue) == 0x000018, "Member 'SQGameInstance_TryGetNextLayers::ReturnValue' has a wrong offset!");

// Function Squad.SQGameInstance.TryGetNextLevels
// 0x0020 (0x0020 - 0x0000)
struct SQGameInstance_TryGetNextLevels final
{
public:
	int32                                         InCount;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA2[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USQLevel*>                       OutLevels;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA3[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameInstance_TryGetNextLevels) == 0x000008, "Wrong alignment on SQGameInstance_TryGetNextLevels");
static_assert(sizeof(SQGameInstance_TryGetNextLevels) == 0x000020, "Wrong size on SQGameInstance_TryGetNextLevels");
static_assert(offsetof(SQGameInstance_TryGetNextLevels, InCount) == 0x000000, "Member 'SQGameInstance_TryGetNextLevels::InCount' has a wrong offset!");
static_assert(offsetof(SQGameInstance_TryGetNextLevels, OutLevels) == 0x000008, "Member 'SQGameInstance_TryGetNextLevels::OutLevels' has a wrong offset!");
static_assert(offsetof(SQGameInstance_TryGetNextLevels, ReturnValue) == 0x000018, "Member 'SQGameInstance_TryGetNextLevels::ReturnValue' has a wrong offset!");

// Function Squad.SQGameInstance.VerifyPassword
// 0x0120 (0x0120 - 0x0000)
struct SQGameInstance_VerifyPassword final
{
public:
	struct FBlueprintSessionResult                BlueprintSessionResult;                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 UserPassword;                                      // 0x0108(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0118(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA4[0x7];                                      // 0x0119(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameInstance_VerifyPassword) == 0x000008, "Wrong alignment on SQGameInstance_VerifyPassword");
static_assert(sizeof(SQGameInstance_VerifyPassword) == 0x000120, "Wrong size on SQGameInstance_VerifyPassword");
static_assert(offsetof(SQGameInstance_VerifyPassword, BlueprintSessionResult) == 0x000000, "Member 'SQGameInstance_VerifyPassword::BlueprintSessionResult' has a wrong offset!");
static_assert(offsetof(SQGameInstance_VerifyPassword, UserPassword) == 0x000108, "Member 'SQGameInstance_VerifyPassword::UserPassword' has a wrong offset!");
static_assert(offsetof(SQGameInstance_VerifyPassword, ReturnValue) == 0x000118, "Member 'SQGameInstance_VerifyPassword::ReturnValue' has a wrong offset!");

// Function Squad.SQGameInstance.DetermineLayerFromName
// 0x0018 (0x0018 - 0x0000)
struct SQGameInstance_DetermineLayerFromName final
{
public:
	class FName                                   InLayerName;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQLayer*                               OutLayer;                                          // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA5[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameInstance_DetermineLayerFromName) == 0x000008, "Wrong alignment on SQGameInstance_DetermineLayerFromName");
static_assert(sizeof(SQGameInstance_DetermineLayerFromName) == 0x000018, "Wrong size on SQGameInstance_DetermineLayerFromName");
static_assert(offsetof(SQGameInstance_DetermineLayerFromName, InLayerName) == 0x000000, "Member 'SQGameInstance_DetermineLayerFromName::InLayerName' has a wrong offset!");
static_assert(offsetof(SQGameInstance_DetermineLayerFromName, OutLayer) == 0x000008, "Member 'SQGameInstance_DetermineLayerFromName::OutLayer' has a wrong offset!");
static_assert(offsetof(SQGameInstance_DetermineLayerFromName, ReturnValue) == 0x000010, "Member 'SQGameInstance_DetermineLayerFromName::ReturnValue' has a wrong offset!");

// Function Squad.SQGameInstance.FindLayers
// 0x0028 (0x0028 - 0x0000)
struct SQGameInstance_FindLayers final
{
public:
	TArray<class FString>                         InSpecificLayerList;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class USQLayer*>                       OutLayers;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA6[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameInstance_FindLayers) == 0x000008, "Wrong alignment on SQGameInstance_FindLayers");
static_assert(sizeof(SQGameInstance_FindLayers) == 0x000028, "Wrong size on SQGameInstance_FindLayers");
static_assert(offsetof(SQGameInstance_FindLayers, InSpecificLayerList) == 0x000000, "Member 'SQGameInstance_FindLayers::InSpecificLayerList' has a wrong offset!");
static_assert(offsetof(SQGameInstance_FindLayers, OutLayers) == 0x000010, "Member 'SQGameInstance_FindLayers::OutLayers' has a wrong offset!");
static_assert(offsetof(SQGameInstance_FindLayers, ReturnValue) == 0x000020, "Member 'SQGameInstance_FindLayers::ReturnValue' has a wrong offset!");

// Function Squad.SQGameInstance.FindLevels
// 0x0028 (0x0028 - 0x0000)
struct SQGameInstance_FindLevels final
{
public:
	TArray<class FString>                         InSpecificLevelList;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class USQLevel*>                       OutLevels;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA7[0x7];                                      // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameInstance_FindLevels) == 0x000008, "Wrong alignment on SQGameInstance_FindLevels");
static_assert(sizeof(SQGameInstance_FindLevels) == 0x000028, "Wrong size on SQGameInstance_FindLevels");
static_assert(offsetof(SQGameInstance_FindLevels, InSpecificLevelList) == 0x000000, "Member 'SQGameInstance_FindLevels::InSpecificLevelList' has a wrong offset!");
static_assert(offsetof(SQGameInstance_FindLevels, OutLevels) == 0x000010, "Member 'SQGameInstance_FindLevels::OutLevels' has a wrong offset!");
static_assert(offsetof(SQGameInstance_FindLevels, ReturnValue) == 0x000020, "Member 'SQGameInstance_FindLevels::ReturnValue' has a wrong offset!");

// Function Squad.SQGameInstance.GetCurrentLayerDisplayName
// 0x0010 (0x0010 - 0x0000)
struct SQGameInstance_GetCurrentLayerDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameInstance_GetCurrentLayerDisplayName) == 0x000008, "Wrong alignment on SQGameInstance_GetCurrentLayerDisplayName");
static_assert(sizeof(SQGameInstance_GetCurrentLayerDisplayName) == 0x000010, "Wrong size on SQGameInstance_GetCurrentLayerDisplayName");
static_assert(offsetof(SQGameInstance_GetCurrentLayerDisplayName, ReturnValue) == 0x000000, "Member 'SQGameInstance_GetCurrentLayerDisplayName::ReturnValue' has a wrong offset!");

// Function Squad.SQGameInstance.GetCurrentLayerDisplayText
// 0x0018 (0x0018 - 0x0000)
struct SQGameInstance_GetCurrentLayerDisplayText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameInstance_GetCurrentLayerDisplayText) == 0x000008, "Wrong alignment on SQGameInstance_GetCurrentLayerDisplayText");
static_assert(sizeof(SQGameInstance_GetCurrentLayerDisplayText) == 0x000018, "Wrong size on SQGameInstance_GetCurrentLayerDisplayText");
static_assert(offsetof(SQGameInstance_GetCurrentLayerDisplayText, ReturnValue) == 0x000000, "Member 'SQGameInstance_GetCurrentLayerDisplayText::ReturnValue' has a wrong offset!");

// Function Squad.SQGameInstance.GetCurrentLayerId
// 0x0010 (0x0010 - 0x0000)
struct SQGameInstance_GetCurrentLayerId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameInstance_GetCurrentLayerId) == 0x000008, "Wrong alignment on SQGameInstance_GetCurrentLayerId");
static_assert(sizeof(SQGameInstance_GetCurrentLayerId) == 0x000010, "Wrong size on SQGameInstance_GetCurrentLayerId");
static_assert(offsetof(SQGameInstance_GetCurrentLayerId, ReturnValue) == 0x000000, "Member 'SQGameInstance_GetCurrentLayerId::ReturnValue' has a wrong offset!");

// Function Squad.SQGameInstance.GetCurrentLevelDisplayName
// 0x0010 (0x0010 - 0x0000)
struct SQGameInstance_GetCurrentLevelDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameInstance_GetCurrentLevelDisplayName) == 0x000008, "Wrong alignment on SQGameInstance_GetCurrentLevelDisplayName");
static_assert(sizeof(SQGameInstance_GetCurrentLevelDisplayName) == 0x000010, "Wrong size on SQGameInstance_GetCurrentLevelDisplayName");
static_assert(offsetof(SQGameInstance_GetCurrentLevelDisplayName, ReturnValue) == 0x000000, "Member 'SQGameInstance_GetCurrentLevelDisplayName::ReturnValue' has a wrong offset!");

// Function Squad.SQGameInstance.GetCurrentLevelId
// 0x0010 (0x0010 - 0x0000)
struct SQGameInstance_GetCurrentLevelId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameInstance_GetCurrentLevelId) == 0x000008, "Wrong alignment on SQGameInstance_GetCurrentLevelId");
static_assert(sizeof(SQGameInstance_GetCurrentLevelId) == 0x000010, "Wrong size on SQGameInstance_GetCurrentLevelId");
static_assert(offsetof(SQGameInstance_GetCurrentLevelId, ReturnValue) == 0x000000, "Member 'SQGameInstance_GetCurrentLevelId::ReturnValue' has a wrong offset!");

// Function Squad.SQGameInstance.GetMenuMap
// 0x0010 (0x0010 - 0x0000)
struct SQGameInstance_GetMenuMap final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameInstance_GetMenuMap) == 0x000008, "Wrong alignment on SQGameInstance_GetMenuMap");
static_assert(sizeof(SQGameInstance_GetMenuMap) == 0x000010, "Wrong size on SQGameInstance_GetMenuMap");
static_assert(offsetof(SQGameInstance_GetMenuMap, ReturnValue) == 0x000000, "Member 'SQGameInstance_GetMenuMap::ReturnValue' has a wrong offset!");

// Function Squad.SQGameInstance.GetNextLayerDisplayName
// 0x0010 (0x0010 - 0x0000)
struct SQGameInstance_GetNextLayerDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameInstance_GetNextLayerDisplayName) == 0x000008, "Wrong alignment on SQGameInstance_GetNextLayerDisplayName");
static_assert(sizeof(SQGameInstance_GetNextLayerDisplayName) == 0x000010, "Wrong size on SQGameInstance_GetNextLayerDisplayName");
static_assert(offsetof(SQGameInstance_GetNextLayerDisplayName, ReturnValue) == 0x000000, "Member 'SQGameInstance_GetNextLayerDisplayName::ReturnValue' has a wrong offset!");

// Function Squad.SQGameInstance.GetNextLayerId
// 0x0010 (0x0010 - 0x0000)
struct SQGameInstance_GetNextLayerId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameInstance_GetNextLayerId) == 0x000008, "Wrong alignment on SQGameInstance_GetNextLayerId");
static_assert(sizeof(SQGameInstance_GetNextLayerId) == 0x000010, "Wrong size on SQGameInstance_GetNextLayerId");
static_assert(offsetof(SQGameInstance_GetNextLayerId, ReturnValue) == 0x000000, "Member 'SQGameInstance_GetNextLayerId::ReturnValue' has a wrong offset!");

// Function Squad.SQGameInstance.GetNextLevelDisplayName
// 0x0010 (0x0010 - 0x0000)
struct SQGameInstance_GetNextLevelDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameInstance_GetNextLevelDisplayName) == 0x000008, "Wrong alignment on SQGameInstance_GetNextLevelDisplayName");
static_assert(sizeof(SQGameInstance_GetNextLevelDisplayName) == 0x000010, "Wrong size on SQGameInstance_GetNextLevelDisplayName");
static_assert(offsetof(SQGameInstance_GetNextLevelDisplayName, ReturnValue) == 0x000000, "Member 'SQGameInstance_GetNextLevelDisplayName::ReturnValue' has a wrong offset!");

// Function Squad.SQGameInstance.GetServerSettings
// 0x02E8 (0x02E8 - 0x0000)
struct SQGameInstance_GetServerSettings final
{
public:
	struct FSQServerSettings                      ReturnValue;                                       // 0x0000(0x02E8)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameInstance_GetServerSettings) == 0x000008, "Wrong alignment on SQGameInstance_GetServerSettings");
static_assert(sizeof(SQGameInstance_GetServerSettings) == 0x0002E8, "Wrong size on SQGameInstance_GetServerSettings");
static_assert(offsetof(SQGameInstance_GetServerSettings, ReturnValue) == 0x000000, "Member 'SQGameInstance_GetServerSettings::ReturnValue' has a wrong offset!");

// Function Squad.SQGameInstance.GetServerTagManager
// 0x0008 (0x0008 - 0x0000)
struct SQGameInstance_GetServerTagManager final
{
public:
	class USQServerTagManager*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameInstance_GetServerTagManager) == 0x000008, "Wrong alignment on SQGameInstance_GetServerTagManager");
static_assert(sizeof(SQGameInstance_GetServerTagManager) == 0x000008, "Wrong size on SQGameInstance_GetServerTagManager");
static_assert(offsetof(SQGameInstance_GetServerTagManager, ReturnValue) == 0x000000, "Member 'SQGameInstance_GetServerTagManager::ReturnValue' has a wrong offset!");

// Function Squad.SQGameInstance.NeedToVoteForNextLevel
// 0x0001 (0x0001 - 0x0000)
struct SQGameInstance_NeedToVoteForNextLevel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameInstance_NeedToVoteForNextLevel) == 0x000001, "Wrong alignment on SQGameInstance_NeedToVoteForNextLevel");
static_assert(sizeof(SQGameInstance_NeedToVoteForNextLevel) == 0x000001, "Wrong size on SQGameInstance_NeedToVoteForNextLevel");
static_assert(offsetof(SQGameInstance_NeedToVoteForNextLevel, ReturnValue) == 0x000000, "Member 'SQGameInstance_NeedToVoteForNextLevel::ReturnValue' has a wrong offset!");

// Function Squad.SQGameInstance.TryGetLayersInRotationFor
// 0x0020 (0x0020 - 0x0000)
struct SQGameInstance_TryGetLayersInRotationFor final
{
public:
	class USQLevel*                               InLevel;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USQLayer*>                       OutLayers;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA8[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameInstance_TryGetLayersInRotationFor) == 0x000008, "Wrong alignment on SQGameInstance_TryGetLayersInRotationFor");
static_assert(sizeof(SQGameInstance_TryGetLayersInRotationFor) == 0x000020, "Wrong size on SQGameInstance_TryGetLayersInRotationFor");
static_assert(offsetof(SQGameInstance_TryGetLayersInRotationFor, InLevel) == 0x000000, "Member 'SQGameInstance_TryGetLayersInRotationFor::InLevel' has a wrong offset!");
static_assert(offsetof(SQGameInstance_TryGetLayersInRotationFor, OutLayers) == 0x000008, "Member 'SQGameInstance_TryGetLayersInRotationFor::OutLayers' has a wrong offset!");
static_assert(offsetof(SQGameInstance_TryGetLayersInRotationFor, ReturnValue) == 0x000018, "Member 'SQGameInstance_TryGetLayersInRotationFor::ReturnValue' has a wrong offset!");

// Function Squad.SQTeam.GetNatoStringOrSquadString
// 0x0018 (0x0018 - 0x0000)
struct SQTeam_GetNatoStringOrSquadString final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FAB[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeam_GetNatoStringOrSquadString) == 0x000008, "Wrong alignment on SQTeam_GetNatoStringOrSquadString");
static_assert(sizeof(SQTeam_GetNatoStringOrSquadString) == 0x000018, "Wrong size on SQTeam_GetNatoStringOrSquadString");
static_assert(offsetof(SQTeam_GetNatoStringOrSquadString, Idx) == 0x000000, "Member 'SQTeam_GetNatoStringOrSquadString::Idx' has a wrong offset!");
static_assert(offsetof(SQTeam_GetNatoStringOrSquadString, ReturnValue) == 0x000008, "Member 'SQTeam_GetNatoStringOrSquadString::ReturnValue' has a wrong offset!");

// Function Squad.SQTeam.ApplySlomoFactor
// 0x0004 (0x0004 - 0x0000)
struct SQTeam_ApplySlomoFactor final
{
public:
	float                                         TimeDilationFactor;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeam_ApplySlomoFactor) == 0x000004, "Wrong alignment on SQTeam_ApplySlomoFactor");
static_assert(sizeof(SQTeam_ApplySlomoFactor) == 0x000004, "Wrong size on SQTeam_ApplySlomoFactor");
static_assert(offsetof(SQTeam_ApplySlomoFactor, TimeDilationFactor) == 0x000000, "Member 'SQTeam_ApplySlomoFactor::TimeDilationFactor' has a wrong offset!");

// Function Squad.SQTeam.Release_Action
// 0x0008 (0x0008 - 0x0000)
struct SQTeam_Release_Action final
{
public:
	class FName                                   SettingId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeam_Release_Action) == 0x000004, "Wrong alignment on SQTeam_Release_Action");
static_assert(sizeof(SQTeam_Release_Action) == 0x000008, "Wrong size on SQTeam_Release_Action");
static_assert(offsetof(SQTeam_Release_Action, SettingId) == 0x000000, "Member 'SQTeam_Release_Action::SettingId' has a wrong offset!");

// Function Squad.SQTeam.Release_Deployable
// 0x0008 (0x0008 - 0x0000)
struct SQTeam_Release_Deployable final
{
public:
	class FName                                   SettingId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeam_Release_Deployable) == 0x000004, "Wrong alignment on SQTeam_Release_Deployable");
static_assert(sizeof(SQTeam_Release_Deployable) == 0x000008, "Wrong size on SQTeam_Release_Deployable");
static_assert(offsetof(SQTeam_Release_Deployable, SettingId) == 0x000000, "Member 'SQTeam_Release_Deployable::SettingId' has a wrong offset!");

// Function Squad.SQTeam.Release_Role
// 0x0008 (0x0008 - 0x0000)
struct SQTeam_Release_Role final
{
public:
	class FName                                   SettingId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeam_Release_Role) == 0x000004, "Wrong alignment on SQTeam_Release_Role");
static_assert(sizeof(SQTeam_Release_Role) == 0x000008, "Wrong size on SQTeam_Release_Role");
static_assert(offsetof(SQTeam_Release_Role, SettingId) == 0x000000, "Member 'SQTeam_Release_Role::SettingId' has a wrong offset!");

// Function Squad.SQTeam.Release_Vehicle
// 0x000C (0x000C - 0x0000)
struct SQTeam_Release_Vehicle final
{
public:
	class FName                                   SettingId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param_Index;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeam_Release_Vehicle) == 0x000004, "Wrong alignment on SQTeam_Release_Vehicle");
static_assert(sizeof(SQTeam_Release_Vehicle) == 0x00000C, "Wrong size on SQTeam_Release_Vehicle");
static_assert(offsetof(SQTeam_Release_Vehicle, SettingId) == 0x000000, "Member 'SQTeam_Release_Vehicle::SettingId' has a wrong offset!");
static_assert(offsetof(SQTeam_Release_Vehicle, Param_Index) == 0x000008, "Member 'SQTeam_Release_Vehicle::Param_Index' has a wrong offset!");

// Function Squad.SQTeam.Request_Player_Action
// 0x0030 (0x0030 - 0x0000)
struct SQTeam_Request_Player_Action final
{
public:
	class FName                                   ActionId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerController*                    InPlayer;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQActionSettings*                      OutSetting;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    OutUnavailabilityReason;                           // 0x0018(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FAC[0x7];                                      // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQTeam_Request_Player_Action) == 0x000008, "Wrong alignment on SQTeam_Request_Player_Action");
static_assert(sizeof(SQTeam_Request_Player_Action) == 0x000030, "Wrong size on SQTeam_Request_Player_Action");
static_assert(offsetof(SQTeam_Request_Player_Action, ActionId) == 0x000000, "Member 'SQTeam_Request_Player_Action::ActionId' has a wrong offset!");
static_assert(offsetof(SQTeam_Request_Player_Action, InPlayer) == 0x000008, "Member 'SQTeam_Request_Player_Action::InPlayer' has a wrong offset!");
static_assert(offsetof(SQTeam_Request_Player_Action, OutSetting) == 0x000010, "Member 'SQTeam_Request_Player_Action::OutSetting' has a wrong offset!");
static_assert(offsetof(SQTeam_Request_Player_Action, OutUnavailabilityReason) == 0x000018, "Member 'SQTeam_Request_Player_Action::OutUnavailabilityReason' has a wrong offset!");
static_assert(offsetof(SQTeam_Request_Player_Action, ReturnValue) == 0x000028, "Member 'SQTeam_Request_Player_Action::ReturnValue' has a wrong offset!");

// Function Squad.SQTeam.Request_Player_Deployable_Refund
// 0x0018 (0x0018 - 0x0000)
struct SQTeam_Request_Player_Deployable_Refund final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQDeployable*                          InDeployable;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FAD[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQTeam_Request_Player_Deployable_Refund) == 0x000008, "Wrong alignment on SQTeam_Request_Player_Deployable_Refund");
static_assert(sizeof(SQTeam_Request_Player_Deployable_Refund) == 0x000018, "Wrong size on SQTeam_Request_Player_Deployable_Refund");
static_assert(offsetof(SQTeam_Request_Player_Deployable_Refund, InPlayer) == 0x000000, "Member 'SQTeam_Request_Player_Deployable_Refund::InPlayer' has a wrong offset!");
static_assert(offsetof(SQTeam_Request_Player_Deployable_Refund, InDeployable) == 0x000008, "Member 'SQTeam_Request_Player_Deployable_Refund::InDeployable' has a wrong offset!");
static_assert(offsetof(SQTeam_Request_Player_Deployable_Refund, ReturnValue) == 0x000010, "Member 'SQTeam_Request_Player_Deployable_Refund::ReturnValue' has a wrong offset!");

// Function Squad.SQTeam.Request_Player_Role
// 0x0030 (0x0030 - 0x0000)
struct SQTeam_Request_Player_Role final
{
public:
	class FName                                   RoleId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerController*                    InPlayer;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQRoleSettings*                        OutSetting;                                        // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    OutUnavailabilityReason;                           // 0x0018(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FAE[0x7];                                      // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQTeam_Request_Player_Role) == 0x000008, "Wrong alignment on SQTeam_Request_Player_Role");
static_assert(sizeof(SQTeam_Request_Player_Role) == 0x000030, "Wrong size on SQTeam_Request_Player_Role");
static_assert(offsetof(SQTeam_Request_Player_Role, RoleId) == 0x000000, "Member 'SQTeam_Request_Player_Role::RoleId' has a wrong offset!");
static_assert(offsetof(SQTeam_Request_Player_Role, InPlayer) == 0x000008, "Member 'SQTeam_Request_Player_Role::InPlayer' has a wrong offset!");
static_assert(offsetof(SQTeam_Request_Player_Role, OutSetting) == 0x000010, "Member 'SQTeam_Request_Player_Role::OutSetting' has a wrong offset!");
static_assert(offsetof(SQTeam_Request_Player_Role, OutUnavailabilityReason) == 0x000018, "Member 'SQTeam_Request_Player_Role::OutUnavailabilityReason' has a wrong offset!");
static_assert(offsetof(SQTeam_Request_Player_Role, ReturnValue) == 0x000028, "Member 'SQTeam_Request_Player_Role::ReturnValue' has a wrong offset!");

// Function Squad.SQTeam.Request_Player_Role_Rearm
// 0x0040 (0x0040 - 0x0000)
struct SQTeam_Request_Player_Role_Rearm final
{
public:
	class FName                                   RoleId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerController*                    InPlayer;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ISQRearmSource>        InRearmSource;                                     // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class USQRoleSettings*                        OutSetting;                                        // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    OutUnavailabilityReason;                           // 0x0028(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FAF[0x7];                                      // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQTeam_Request_Player_Role_Rearm) == 0x000008, "Wrong alignment on SQTeam_Request_Player_Role_Rearm");
static_assert(sizeof(SQTeam_Request_Player_Role_Rearm) == 0x000040, "Wrong size on SQTeam_Request_Player_Role_Rearm");
static_assert(offsetof(SQTeam_Request_Player_Role_Rearm, RoleId) == 0x000000, "Member 'SQTeam_Request_Player_Role_Rearm::RoleId' has a wrong offset!");
static_assert(offsetof(SQTeam_Request_Player_Role_Rearm, InPlayer) == 0x000008, "Member 'SQTeam_Request_Player_Role_Rearm::InPlayer' has a wrong offset!");
static_assert(offsetof(SQTeam_Request_Player_Role_Rearm, InRearmSource) == 0x000010, "Member 'SQTeam_Request_Player_Role_Rearm::InRearmSource' has a wrong offset!");
static_assert(offsetof(SQTeam_Request_Player_Role_Rearm, OutSetting) == 0x000020, "Member 'SQTeam_Request_Player_Role_Rearm::OutSetting' has a wrong offset!");
static_assert(offsetof(SQTeam_Request_Player_Role_Rearm, OutUnavailabilityReason) == 0x000028, "Member 'SQTeam_Request_Player_Role_Rearm::OutUnavailabilityReason' has a wrong offset!");
static_assert(offsetof(SQTeam_Request_Player_Role_Rearm, ReturnValue) == 0x000038, "Member 'SQTeam_Request_Player_Role_Rearm::ReturnValue' has a wrong offset!");

// Function Squad.SQTeam.Request_Player_Vehicle
// 0x0030 (0x0030 - 0x0000)
struct SQTeam_Request_Player_Vehicle final
{
public:
	class FName                                   VehicleId;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerController*                    InPlayer;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQVehicleSettings*                     OutSetting;                                        // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    OutUnavailabilityReason;                           // 0x0018(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB0[0x7];                                      // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQTeam_Request_Player_Vehicle) == 0x000008, "Wrong alignment on SQTeam_Request_Player_Vehicle");
static_assert(sizeof(SQTeam_Request_Player_Vehicle) == 0x000030, "Wrong size on SQTeam_Request_Player_Vehicle");
static_assert(offsetof(SQTeam_Request_Player_Vehicle, VehicleId) == 0x000000, "Member 'SQTeam_Request_Player_Vehicle::VehicleId' has a wrong offset!");
static_assert(offsetof(SQTeam_Request_Player_Vehicle, InPlayer) == 0x000008, "Member 'SQTeam_Request_Player_Vehicle::InPlayer' has a wrong offset!");
static_assert(offsetof(SQTeam_Request_Player_Vehicle, OutSetting) == 0x000010, "Member 'SQTeam_Request_Player_Vehicle::OutSetting' has a wrong offset!");
static_assert(offsetof(SQTeam_Request_Player_Vehicle, OutUnavailabilityReason) == 0x000018, "Member 'SQTeam_Request_Player_Vehicle::OutUnavailabilityReason' has a wrong offset!");
static_assert(offsetof(SQTeam_Request_Player_Vehicle, ReturnValue) == 0x000028, "Member 'SQTeam_Request_Player_Vehicle::ReturnValue' has a wrong offset!");

// Function Squad.SQTeam.Request_Team_Deployable
// 0x0058 (0x0058 - 0x0000)
struct SQTeam_Request_Team_Deployable final
{
public:
	struct FSQAvailabilityState_Deployable        DeployableStatus;                                  // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB1[0x7];                                      // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQTeam_Request_Team_Deployable) == 0x000008, "Wrong alignment on SQTeam_Request_Team_Deployable");
static_assert(sizeof(SQTeam_Request_Team_Deployable) == 0x000058, "Wrong size on SQTeam_Request_Team_Deployable");
static_assert(offsetof(SQTeam_Request_Team_Deployable, DeployableStatus) == 0x000000, "Member 'SQTeam_Request_Team_Deployable::DeployableStatus' has a wrong offset!");
static_assert(offsetof(SQTeam_Request_Team_Deployable, ReturnValue) == 0x000050, "Member 'SQTeam_Request_Team_Deployable::ReturnValue' has a wrong offset!");

// Function Squad.SQTeam.Request_Team_Vehicle
// 0x0058 (0x0058 - 0x0000)
struct SQTeam_Request_Team_Vehicle final
{
public:
	struct FSQAvailabilityState_Vehicle           VehicleStatus;                                     // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB2[0x7];                                      // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQTeam_Request_Team_Vehicle) == 0x000008, "Wrong alignment on SQTeam_Request_Team_Vehicle");
static_assert(sizeof(SQTeam_Request_Team_Vehicle) == 0x000058, "Wrong size on SQTeam_Request_Team_Vehicle");
static_assert(offsetof(SQTeam_Request_Team_Vehicle, VehicleStatus) == 0x000000, "Member 'SQTeam_Request_Team_Vehicle::VehicleStatus' has a wrong offset!");
static_assert(offsetof(SQTeam_Request_Team_Vehicle, ReturnValue) == 0x000050, "Member 'SQTeam_Request_Team_Vehicle::ReturnValue' has a wrong offset!");

// Function Squad.SQTeam.SetFactionSetup
// 0x0008 (0x0008 - 0x0000)
struct SQTeam_SetFactionSetup final
{
public:
	class USQFactionSetup*                        InFactionSetup;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeam_SetFactionSetup) == 0x000008, "Wrong alignment on SQTeam_SetFactionSetup");
static_assert(sizeof(SQTeam_SetFactionSetup) == 0x000008, "Wrong size on SQTeam_SetFactionSetup");
static_assert(offsetof(SQTeam_SetFactionSetup, InFactionSetup) == 0x000000, "Member 'SQTeam_SetFactionSetup::InFactionSetup' has a wrong offset!");

// Function Squad.SQTeam.SetTeamConfig
// 0x0008 (0x0008 - 0x0000)
struct SQTeam_SetTeamConfig final
{
public:
	class USQLayerTeamConfig*                     InLayerTeamConfig;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeam_SetTeamConfig) == 0x000008, "Wrong alignment on SQTeam_SetTeamConfig");
static_assert(sizeof(SQTeam_SetTeamConfig) == 0x000008, "Wrong size on SQTeam_SetTeamConfig");
static_assert(offsetof(SQTeam_SetTeamConfig, InLayerTeamConfig) == 0x000000, "Member 'SQTeam_SetTeamConfig::InLayerTeamConfig' has a wrong offset!");

// Function Squad.SQTeam.GetDefaultRole
// 0x0008 (0x0008 - 0x0000)
struct SQTeam_GetDefaultRole final
{
public:
	class USQRoleSettings*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeam_GetDefaultRole) == 0x000008, "Wrong alignment on SQTeam_GetDefaultRole");
static_assert(sizeof(SQTeam_GetDefaultRole) == 0x000008, "Wrong size on SQTeam_GetDefaultRole");
static_assert(offsetof(SQTeam_GetDefaultRole, ReturnValue) == 0x000000, "Member 'SQTeam_GetDefaultRole::ReturnValue' has a wrong offset!");

// Function Squad.SQTeam.GetDefaultSquadLeaderRole
// 0x0008 (0x0008 - 0x0000)
struct SQTeam_GetDefaultSquadLeaderRole final
{
public:
	class USQRoleSettings*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeam_GetDefaultSquadLeaderRole) == 0x000008, "Wrong alignment on SQTeam_GetDefaultSquadLeaderRole");
static_assert(sizeof(SQTeam_GetDefaultSquadLeaderRole) == 0x000008, "Wrong size on SQTeam_GetDefaultSquadLeaderRole");
static_assert(offsetof(SQTeam_GetDefaultSquadLeaderRole, ReturnValue) == 0x000000, "Member 'SQTeam_GetDefaultSquadLeaderRole::ReturnValue' has a wrong offset!");

// Function Squad.SQTeam.GetFaction
// 0x0008 (0x0008 - 0x0000)
struct SQTeam_GetFaction final
{
public:
	class USQFaction*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeam_GetFaction) == 0x000008, "Wrong alignment on SQTeam_GetFaction");
static_assert(sizeof(SQTeam_GetFaction) == 0x000008, "Wrong size on SQTeam_GetFaction");
static_assert(offsetof(SQTeam_GetFaction, ReturnValue) == 0x000000, "Member 'SQTeam_GetFaction::ReturnValue' has a wrong offset!");

// Function Squad.SQTeam.GetFactionDisplayName
// 0x0010 (0x0010 - 0x0000)
struct SQTeam_GetFactionDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeam_GetFactionDisplayName) == 0x000008, "Wrong alignment on SQTeam_GetFactionDisplayName");
static_assert(sizeof(SQTeam_GetFactionDisplayName) == 0x000010, "Wrong size on SQTeam_GetFactionDisplayName");
static_assert(offsetof(SQTeam_GetFactionDisplayName, ReturnValue) == 0x000000, "Member 'SQTeam_GetFactionDisplayName::ReturnValue' has a wrong offset!");

// Function Squad.SQTeam.GetFactionId
// 0x0008 (0x0008 - 0x0000)
struct SQTeam_GetFactionId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeam_GetFactionId) == 0x000004, "Wrong alignment on SQTeam_GetFactionId");
static_assert(sizeof(SQTeam_GetFactionId) == 0x000008, "Wrong size on SQTeam_GetFactionId");
static_assert(offsetof(SQTeam_GetFactionId, ReturnValue) == 0x000000, "Member 'SQTeam_GetFactionId::ReturnValue' has a wrong offset!");

// Function Squad.SQTeam.GetFactionSetup
// 0x0008 (0x0008 - 0x0000)
struct SQTeam_GetFactionSetup final
{
public:
	class USQFactionSetup*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeam_GetFactionSetup) == 0x000008, "Wrong alignment on SQTeam_GetFactionSetup");
static_assert(sizeof(SQTeam_GetFactionSetup) == 0x000008, "Wrong size on SQTeam_GetFactionSetup");
static_assert(offsetof(SQTeam_GetFactionSetup, ReturnValue) == 0x000000, "Member 'SQTeam_GetFactionSetup::ReturnValue' has a wrong offset!");

// Function Squad.SQTeam.GetFactionSetupDisplayName
// 0x0010 (0x0010 - 0x0000)
struct SQTeam_GetFactionSetupDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeam_GetFactionSetupDisplayName) == 0x000008, "Wrong alignment on SQTeam_GetFactionSetupDisplayName");
static_assert(sizeof(SQTeam_GetFactionSetupDisplayName) == 0x000010, "Wrong size on SQTeam_GetFactionSetupDisplayName");
static_assert(offsetof(SQTeam_GetFactionSetupDisplayName, ReturnValue) == 0x000000, "Member 'SQTeam_GetFactionSetupDisplayName::ReturnValue' has a wrong offset!");

// Function Squad.SQTeam.GetFactionSetupId
// 0x0008 (0x0008 - 0x0000)
struct SQTeam_GetFactionSetupId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeam_GetFactionSetupId) == 0x000004, "Wrong alignment on SQTeam_GetFactionSetupId");
static_assert(sizeof(SQTeam_GetFactionSetupId) == 0x000008, "Wrong size on SQTeam_GetFactionSetupId");
static_assert(offsetof(SQTeam_GetFactionSetupId, ReturnValue) == 0x000000, "Member 'SQTeam_GetFactionSetupId::ReturnValue' has a wrong offset!");

// Function Squad.SQTeam.GetLeaveSquadRole
// 0x0008 (0x0008 - 0x0000)
struct SQTeam_GetLeaveSquadRole final
{
public:
	class USQRoleSettings*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeam_GetLeaveSquadRole) == 0x000008, "Wrong alignment on SQTeam_GetLeaveSquadRole");
static_assert(sizeof(SQTeam_GetLeaveSquadRole) == 0x000008, "Wrong size on SQTeam_GetLeaveSquadRole");
static_assert(offsetof(SQTeam_GetLeaveSquadRole, ReturnValue) == 0x000000, "Member 'SQTeam_GetLeaveSquadRole::ReturnValue' has a wrong offset!");

// Function Squad.SQTeam.GetPlayerCount
// 0x0004 (0x0004 - 0x0000)
struct SQTeam_GetPlayerCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeam_GetPlayerCount) == 0x000004, "Wrong alignment on SQTeam_GetPlayerCount");
static_assert(sizeof(SQTeam_GetPlayerCount) == 0x000004, "Wrong size on SQTeam_GetPlayerCount");
static_assert(offsetof(SQTeam_GetPlayerCount, ReturnValue) == 0x000000, "Member 'SQTeam_GetPlayerCount::ReturnValue' has a wrong offset!");

// Function Squad.SQTeam.GetTeamId
// 0x0004 (0x0004 - 0x0000)
struct SQTeam_GetTeamId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeam_GetTeamId) == 0x000004, "Wrong alignment on SQTeam_GetTeamId");
static_assert(sizeof(SQTeam_GetTeamId) == 0x000004, "Wrong size on SQTeam_GetTeamId");
static_assert(offsetof(SQTeam_GetTeamId, ReturnValue) == 0x000000, "Member 'SQTeam_GetTeamId::ReturnValue' has a wrong offset!");

// Function Squad.SQTeam.HasFactionSetup
// 0x0001 (0x0001 - 0x0000)
struct SQTeam_HasFactionSetup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeam_HasFactionSetup) == 0x000001, "Wrong alignment on SQTeam_HasFactionSetup");
static_assert(sizeof(SQTeam_HasFactionSetup) == 0x000001, "Wrong size on SQTeam_HasFactionSetup");
static_assert(offsetof(SQTeam_HasFactionSetup, ReturnValue) == 0x000000, "Member 'SQTeam_HasFactionSetup::ReturnValue' has a wrong offset!");

// Function Squad.SQTeam.IsConfigured
// 0x0001 (0x0001 - 0x0000)
struct SQTeam_IsConfigured final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeam_IsConfigured) == 0x000001, "Wrong alignment on SQTeam_IsConfigured");
static_assert(sizeof(SQTeam_IsConfigured) == 0x000001, "Wrong size on SQTeam_IsConfigured");
static_assert(offsetof(SQTeam_IsConfigured, ReturnValue) == 0x000000, "Member 'SQTeam_IsConfigured::ReturnValue' has a wrong offset!");

// Function Squad.SQTeam.TryGetFactionDisplayName
// 0x0020 (0x0020 - 0x0000)
struct SQTeam_TryGetFactionDisplayName final
{
public:
	class FText                                   OutDisplayName;                                    // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB3[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQTeam_TryGetFactionDisplayName) == 0x000008, "Wrong alignment on SQTeam_TryGetFactionDisplayName");
static_assert(sizeof(SQTeam_TryGetFactionDisplayName) == 0x000020, "Wrong size on SQTeam_TryGetFactionDisplayName");
static_assert(offsetof(SQTeam_TryGetFactionDisplayName, OutDisplayName) == 0x000000, "Member 'SQTeam_TryGetFactionDisplayName::OutDisplayName' has a wrong offset!");
static_assert(offsetof(SQTeam_TryGetFactionDisplayName, ReturnValue) == 0x000018, "Member 'SQTeam_TryGetFactionDisplayName::ReturnValue' has a wrong offset!");

// Function Squad.SQTeam.TryGetFactionSetupDisplayName
// 0x0020 (0x0020 - 0x0000)
struct SQTeam_TryGetFactionSetupDisplayName final
{
public:
	class FText                                   OutDisplayName;                                    // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB4[0x7];                                      // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQTeam_TryGetFactionSetupDisplayName) == 0x000008, "Wrong alignment on SQTeam_TryGetFactionSetupDisplayName");
static_assert(sizeof(SQTeam_TryGetFactionSetupDisplayName) == 0x000020, "Wrong size on SQTeam_TryGetFactionSetupDisplayName");
static_assert(offsetof(SQTeam_TryGetFactionSetupDisplayName, OutDisplayName) == 0x000000, "Member 'SQTeam_TryGetFactionSetupDisplayName::OutDisplayName' has a wrong offset!");
static_assert(offsetof(SQTeam_TryGetFactionSetupDisplayName, ReturnValue) == 0x000018, "Member 'SQTeam_TryGetFactionSetupDisplayName::ReturnValue' has a wrong offset!");

// Function Squad.SQDeployable.BeginDeath
// 0x0028 (0x0028 - 0x0000)
struct SQDeployable_BeginDeath final
{
public:
	float                                         KillingDamage;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC7[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           DamageEvent;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            Killer;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployable_BeginDeath) == 0x000008, "Wrong alignment on SQDeployable_BeginDeath");
static_assert(sizeof(SQDeployable_BeginDeath) == 0x000028, "Wrong size on SQDeployable_BeginDeath");
static_assert(offsetof(SQDeployable_BeginDeath, KillingDamage) == 0x000000, "Member 'SQDeployable_BeginDeath::KillingDamage' has a wrong offset!");
static_assert(offsetof(SQDeployable_BeginDeath, DamageEvent) == 0x000008, "Member 'SQDeployable_BeginDeath::DamageEvent' has a wrong offset!");
static_assert(offsetof(SQDeployable_BeginDeath, Killer) == 0x000018, "Member 'SQDeployable_BeginDeath::Killer' has a wrong offset!");
static_assert(offsetof(SQDeployable_BeginDeath, DamageCauser) == 0x000020, "Member 'SQDeployable_BeginDeath::DamageCauser' has a wrong offset!");

// Function Squad.SQDeployable.BP_ExtraTrackDeployableRules
// 0x0010 (0x0010 - 0x0000)
struct SQDeployable_BP_ExtraTrackDeployableRules final
{
public:
	class ASQPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeSelf;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTrackDeployableResult                      ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC8[0x6];                                      // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQDeployable_BP_ExtraTrackDeployableRules) == 0x000008, "Wrong alignment on SQDeployable_BP_ExtraTrackDeployableRules");
static_assert(sizeof(SQDeployable_BP_ExtraTrackDeployableRules) == 0x000010, "Wrong size on SQDeployable_BP_ExtraTrackDeployableRules");
static_assert(offsetof(SQDeployable_BP_ExtraTrackDeployableRules, PlayerState) == 0x000000, "Member 'SQDeployable_BP_ExtraTrackDeployableRules::PlayerState' has a wrong offset!");
static_assert(offsetof(SQDeployable_BP_ExtraTrackDeployableRules, bIncludeSelf) == 0x000008, "Member 'SQDeployable_BP_ExtraTrackDeployableRules::bIncludeSelf' has a wrong offset!");
static_assert(offsetof(SQDeployable_BP_ExtraTrackDeployableRules, ReturnValue) == 0x000009, "Member 'SQDeployable_BP_ExtraTrackDeployableRules::ReturnValue' has a wrong offset!");

// Function Squad.SQDeployable.BP_OnStateChange
// 0x0001 (0x0001 - 0x0000)
struct SQDeployable_BP_OnStateChange final
{
public:
	ESQBuildState                                 OldBuildState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployable_BP_OnStateChange) == 0x000001, "Wrong alignment on SQDeployable_BP_OnStateChange");
static_assert(sizeof(SQDeployable_BP_OnStateChange) == 0x000001, "Wrong size on SQDeployable_BP_OnStateChange");
static_assert(offsetof(SQDeployable_BP_OnStateChange, OldBuildState) == 0x000000, "Member 'SQDeployable_BP_OnStateChange::OldBuildState' has a wrong offset!");

// Function Squad.SQDeployable.BP_OnStateChangeClient
// 0x0001 (0x0001 - 0x0000)
struct SQDeployable_BP_OnStateChangeClient final
{
public:
	ESQBuildState                                 OldBuildState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployable_BP_OnStateChangeClient) == 0x000001, "Wrong alignment on SQDeployable_BP_OnStateChangeClient");
static_assert(sizeof(SQDeployable_BP_OnStateChangeClient) == 0x000001, "Wrong size on SQDeployable_BP_OnStateChangeClient");
static_assert(offsetof(SQDeployable_BP_OnStateChangeClient, OldBuildState) == 0x000000, "Member 'SQDeployable_BP_OnStateChangeClient::OldBuildState' has a wrong offset!");

// Function Squad.SQDeployable.BPOnDeath
// 0x0028 (0x0028 - 0x0000)
struct SQDeployable_BPOnDeath final
{
public:
	float                                         KillingDamage;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC9[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           DamageEvent;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            Killer;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployable_BPOnDeath) == 0x000008, "Wrong alignment on SQDeployable_BPOnDeath");
static_assert(sizeof(SQDeployable_BPOnDeath) == 0x000028, "Wrong size on SQDeployable_BPOnDeath");
static_assert(offsetof(SQDeployable_BPOnDeath, KillingDamage) == 0x000000, "Member 'SQDeployable_BPOnDeath::KillingDamage' has a wrong offset!");
static_assert(offsetof(SQDeployable_BPOnDeath, DamageEvent) == 0x000008, "Member 'SQDeployable_BPOnDeath::DamageEvent' has a wrong offset!");
static_assert(offsetof(SQDeployable_BPOnDeath, Killer) == 0x000018, "Member 'SQDeployable_BPOnDeath::Killer' has a wrong offset!");
static_assert(offsetof(SQDeployable_BPOnDeath, DamageCauser) == 0x000020, "Member 'SQDeployable_BPOnDeath::DamageCauser' has a wrong offset!");

// Function Squad.SQDeployable.ConstructionHit
// 0x0018 (0x0018 - 0x0000)
struct SQDeployable_ConstructionHit final
{
public:
	class ASQSoldier*                             Activator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            Inst;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Amount;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FCA[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQDeployable_ConstructionHit) == 0x000008, "Wrong alignment on SQDeployable_ConstructionHit");
static_assert(sizeof(SQDeployable_ConstructionHit) == 0x000018, "Wrong size on SQDeployable_ConstructionHit");
static_assert(offsetof(SQDeployable_ConstructionHit, Activator) == 0x000000, "Member 'SQDeployable_ConstructionHit::Activator' has a wrong offset!");
static_assert(offsetof(SQDeployable_ConstructionHit, Inst) == 0x000008, "Member 'SQDeployable_ConstructionHit::Inst' has a wrong offset!");
static_assert(offsetof(SQDeployable_ConstructionHit, Amount) == 0x000010, "Member 'SQDeployable_ConstructionHit::Amount' has a wrong offset!");

// Function Squad.SQDeployable.GetFailedSpawnReasonText
// 0x0020 (0x0020 - 0x0000)
struct SQDeployable_GetFailedSpawnReasonText final
{
public:
	ESQInvalidPlacementReason                     Reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FCB[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployable_GetFailedSpawnReasonText) == 0x000008, "Wrong alignment on SQDeployable_GetFailedSpawnReasonText");
static_assert(sizeof(SQDeployable_GetFailedSpawnReasonText) == 0x000020, "Wrong size on SQDeployable_GetFailedSpawnReasonText");
static_assert(offsetof(SQDeployable_GetFailedSpawnReasonText, Reason) == 0x000000, "Member 'SQDeployable_GetFailedSpawnReasonText::Reason' has a wrong offset!");
static_assert(offsetof(SQDeployable_GetFailedSpawnReasonText, ReturnValue) == 0x000008, "Member 'SQDeployable_GetFailedSpawnReasonText::ReturnValue' has a wrong offset!");

// Function Squad.SQDeployable.GetNearestFOB
// 0x0010 (0x0010 - 0x0000)
struct SQDeployable_GetNearestFOB final
{
public:
	bool                                          bIsFriendly;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FCC[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQForwardBase*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployable_GetNearestFOB) == 0x000008, "Wrong alignment on SQDeployable_GetNearestFOB");
static_assert(sizeof(SQDeployable_GetNearestFOB) == 0x000010, "Wrong size on SQDeployable_GetNearestFOB");
static_assert(offsetof(SQDeployable_GetNearestFOB, bIsFriendly) == 0x000000, "Member 'SQDeployable_GetNearestFOB::bIsFriendly' has a wrong offset!");
static_assert(offsetof(SQDeployable_GetNearestFOB, ReturnValue) == 0x000008, "Member 'SQDeployable_GetNearestFOB::ReturnValue' has a wrong offset!");

// Function Squad.SQDeployable.GetTrackDeployableResult
// 0x0010 (0x0010 - 0x0000)
struct SQDeployable_GetTrackDeployableResult final
{
public:
	class ASQPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeSelf;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTrackDeployableResult                      ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FCD[0x6];                                      // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQDeployable_GetTrackDeployableResult) == 0x000008, "Wrong alignment on SQDeployable_GetTrackDeployableResult");
static_assert(sizeof(SQDeployable_GetTrackDeployableResult) == 0x000010, "Wrong size on SQDeployable_GetTrackDeployableResult");
static_assert(offsetof(SQDeployable_GetTrackDeployableResult, PlayerState) == 0x000000, "Member 'SQDeployable_GetTrackDeployableResult::PlayerState' has a wrong offset!");
static_assert(offsetof(SQDeployable_GetTrackDeployableResult, bIncludeSelf) == 0x000008, "Member 'SQDeployable_GetTrackDeployableResult::bIncludeSelf' has a wrong offset!");
static_assert(offsetof(SQDeployable_GetTrackDeployableResult, ReturnValue) == 0x000009, "Member 'SQDeployable_GetTrackDeployableResult::ReturnValue' has a wrong offset!");

// Function Squad.SQDeployable.GoToBuildState
// 0x0001 (0x0001 - 0x0000)
struct SQDeployable_GoToBuildState final
{
public:
	ESQBuildState                                 InBuildState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployable_GoToBuildState) == 0x000001, "Wrong alignment on SQDeployable_GoToBuildState");
static_assert(sizeof(SQDeployable_GoToBuildState) == 0x000001, "Wrong size on SQDeployable_GoToBuildState");
static_assert(offsetof(SQDeployable_GoToBuildState, InBuildState) == 0x000000, "Member 'SQDeployable_GoToBuildState::InBuildState' has a wrong offset!");

// Function Squad.SQDeployable.IsDeployableEmpty
// 0x0001 (0x0001 - 0x0000)
struct SQDeployable_IsDeployableEmpty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployable_IsDeployableEmpty) == 0x000001, "Wrong alignment on SQDeployable_IsDeployableEmpty");
static_assert(sizeof(SQDeployable_IsDeployableEmpty) == 0x000001, "Wrong size on SQDeployable_IsDeployableEmpty");
static_assert(offsetof(SQDeployable_IsDeployableEmpty, ReturnValue) == 0x000000, "Member 'SQDeployable_IsDeployableEmpty::ReturnValue' has a wrong offset!");

// Function Squad.SQDeployable.IsValidPlacement
// 0x0002 (0x0002 - 0x0000)
struct SQDeployable_IsValidPlacement final
{
public:
	ESQInvalidPlacementReason                     Reason;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployable_IsValidPlacement) == 0x000001, "Wrong alignment on SQDeployable_IsValidPlacement");
static_assert(sizeof(SQDeployable_IsValidPlacement) == 0x000002, "Wrong size on SQDeployable_IsValidPlacement");
static_assert(offsetof(SQDeployable_IsValidPlacement, Reason) == 0x000000, "Member 'SQDeployable_IsValidPlacement::Reason' has a wrong offset!");
static_assert(offsetof(SQDeployable_IsValidPlacement, ReturnValue) == 0x000001, "Member 'SQDeployable_IsValidPlacement::ReturnValue' has a wrong offset!");

// Function Squad.SQDeployable.MulticastPlayDamageEffects
// 0x0018 (0x0018 - 0x0000)
struct SQDeployable_MulticastPlayDamageEffects final
{
public:
	TSubclassOf<class UDamageType>                DamageTypeClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpactLocationZeroBased;                           // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQBuildState                                 OldBuildState;                                     // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQBuildState                                 NewBuildState;                                     // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FCE[0x2];                                      // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQDeployable_MulticastPlayDamageEffects) == 0x000008, "Wrong alignment on SQDeployable_MulticastPlayDamageEffects");
static_assert(sizeof(SQDeployable_MulticastPlayDamageEffects) == 0x000018, "Wrong size on SQDeployable_MulticastPlayDamageEffects");
static_assert(offsetof(SQDeployable_MulticastPlayDamageEffects, DamageTypeClass) == 0x000000, "Member 'SQDeployable_MulticastPlayDamageEffects::DamageTypeClass' has a wrong offset!");
static_assert(offsetof(SQDeployable_MulticastPlayDamageEffects, ImpactLocationZeroBased) == 0x000008, "Member 'SQDeployable_MulticastPlayDamageEffects::ImpactLocationZeroBased' has a wrong offset!");
static_assert(offsetof(SQDeployable_MulticastPlayDamageEffects, OldBuildState) == 0x000014, "Member 'SQDeployable_MulticastPlayDamageEffects::OldBuildState' has a wrong offset!");
static_assert(offsetof(SQDeployable_MulticastPlayDamageEffects, NewBuildState) == 0x000015, "Member 'SQDeployable_MulticastPlayDamageEffects::NewBuildState' has a wrong offset!");

// Function Squad.SQDeployable.OnAttachedActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct SQDeployable_OnAttachedActorDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployable_OnAttachedActorDestroyed) == 0x000008, "Wrong alignment on SQDeployable_OnAttachedActorDestroyed");
static_assert(sizeof(SQDeployable_OnAttachedActorDestroyed) == 0x000008, "Wrong size on SQDeployable_OnAttachedActorDestroyed");
static_assert(offsetof(SQDeployable_OnAttachedActorDestroyed, DestroyedActor) == 0x000000, "Member 'SQDeployable_OnAttachedActorDestroyed::DestroyedActor' has a wrong offset!");

// Function Squad.SQDeployable.OnRep_BuildState
// 0x0001 (0x0001 - 0x0000)
struct SQDeployable_OnRep_BuildState final
{
public:
	ESQBuildState                                 OldBuildState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployable_OnRep_BuildState) == 0x000001, "Wrong alignment on SQDeployable_OnRep_BuildState");
static_assert(sizeof(SQDeployable_OnRep_BuildState) == 0x000001, "Wrong size on SQDeployable_OnRep_BuildState");
static_assert(offsetof(SQDeployable_OnRep_BuildState, OldBuildState) == 0x000000, "Member 'SQDeployable_OnRep_BuildState::OldBuildState' has a wrong offset!");

// Function Squad.SQDeployable.OnStateChangeClient
// 0x0001 (0x0001 - 0x0000)
struct SQDeployable_OnStateChangeClient final
{
public:
	ESQBuildState                                 OldBuildState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployable_OnStateChangeClient) == 0x000001, "Wrong alignment on SQDeployable_OnStateChangeClient");
static_assert(sizeof(SQDeployable_OnStateChangeClient) == 0x000001, "Wrong size on SQDeployable_OnStateChangeClient");
static_assert(offsetof(SQDeployable_OnStateChangeClient, OldBuildState) == 0x000000, "Member 'SQDeployable_OnStateChangeClient::OldBuildState' has a wrong offset!");

// Function Squad.SQDeployable.PlayStateChangeEffects
// 0x0001 (0x0001 - 0x0000)
struct SQDeployable_PlayStateChangeEffects final
{
public:
	ESQBuildState                                 OldBuildState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployable_PlayStateChangeEffects) == 0x000001, "Wrong alignment on SQDeployable_PlayStateChangeEffects");
static_assert(sizeof(SQDeployable_PlayStateChangeEffects) == 0x000001, "Wrong size on SQDeployable_PlayStateChangeEffects");
static_assert(offsetof(SQDeployable_PlayStateChangeEffects, OldBuildState) == 0x000000, "Member 'SQDeployable_PlayStateChangeEffects::OldBuildState' has a wrong offset!");

// Function Squad.SQDeployable.PostModifyHealth
// 0x0018 (0x0018 - 0x0000)
struct SQDeployable_PostModifyHealth final
{
public:
	float                                         DeltaHealth;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FCF[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            Inst;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCausedByDamage;                                   // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD0[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQDeployable_PostModifyHealth) == 0x000008, "Wrong alignment on SQDeployable_PostModifyHealth");
static_assert(sizeof(SQDeployable_PostModifyHealth) == 0x000018, "Wrong size on SQDeployable_PostModifyHealth");
static_assert(offsetof(SQDeployable_PostModifyHealth, DeltaHealth) == 0x000000, "Member 'SQDeployable_PostModifyHealth::DeltaHealth' has a wrong offset!");
static_assert(offsetof(SQDeployable_PostModifyHealth, Inst) == 0x000008, "Member 'SQDeployable_PostModifyHealth::Inst' has a wrong offset!");
static_assert(offsetof(SQDeployable_PostModifyHealth, bCausedByDamage) == 0x000010, "Member 'SQDeployable_PostModifyHealth::bCausedByDamage' has a wrong offset!");

// Function Squad.SQDeployable.PreModifyHealth
// 0x0018 (0x0018 - 0x0000)
struct SQDeployable_PreModifyHealth final
{
public:
	float                                         DeltaHealth;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD1[0x4];                                      // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            Inst;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCausedByDamage;                                   // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD2[0x3];                                      // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployable_PreModifyHealth) == 0x000008, "Wrong alignment on SQDeployable_PreModifyHealth");
static_assert(sizeof(SQDeployable_PreModifyHealth) == 0x000018, "Wrong size on SQDeployable_PreModifyHealth");
static_assert(offsetof(SQDeployable_PreModifyHealth, DeltaHealth) == 0x000000, "Member 'SQDeployable_PreModifyHealth::DeltaHealth' has a wrong offset!");
static_assert(offsetof(SQDeployable_PreModifyHealth, Inst) == 0x000008, "Member 'SQDeployable_PreModifyHealth::Inst' has a wrong offset!");
static_assert(offsetof(SQDeployable_PreModifyHealth, bCausedByDamage) == 0x000010, "Member 'SQDeployable_PreModifyHealth::bCausedByDamage' has a wrong offset!");
static_assert(offsetof(SQDeployable_PreModifyHealth, ReturnValue) == 0x000014, "Member 'SQDeployable_PreModifyHealth::ReturnValue' has a wrong offset!");

// Function Squad.SQDeployable.SetTeam
// 0x0004 (0x0004 - 0x0000)
struct SQDeployable_SetTeam final
{
public:
	int32                                         Param_Team;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployable_SetTeam) == 0x000004, "Wrong alignment on SQDeployable_SetTeam");
static_assert(sizeof(SQDeployable_SetTeam) == 0x000004, "Wrong size on SQDeployable_SetTeam");
static_assert(offsetof(SQDeployable_SetTeam, Param_Team) == 0x000000, "Member 'SQDeployable_SetTeam::Param_Team' has a wrong offset!");

// Function Squad.SQDeployable.GetBuildState
// 0x0001 (0x0001 - 0x0000)
struct SQDeployable_GetBuildState final
{
public:
	ESQBuildState                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployable_GetBuildState) == 0x000001, "Wrong alignment on SQDeployable_GetBuildState");
static_assert(sizeof(SQDeployable_GetBuildState) == 0x000001, "Wrong size on SQDeployable_GetBuildState");
static_assert(offsetof(SQDeployable_GetBuildState, ReturnValue) == 0x000000, "Member 'SQDeployable_GetBuildState::ReturnValue' has a wrong offset!");

// Function Squad.SQDeployable.IsGhost
// 0x0001 (0x0001 - 0x0000)
struct SQDeployable_IsGhost final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployable_IsGhost) == 0x000001, "Wrong alignment on SQDeployable_IsGhost");
static_assert(sizeof(SQDeployable_IsGhost) == 0x000001, "Wrong size on SQDeployable_IsGhost");
static_assert(offsetof(SQDeployable_IsGhost, ReturnValue) == 0x000000, "Member 'SQDeployable_IsGhost::ReturnValue' has a wrong offset!");

// Function Squad.SQForwardBase.BP_OnDeployableAdded
// 0x0008 (0x0008 - 0x0000)
struct SQForwardBase_BP_OnDeployableAdded final
{
public:
	class ASQDeployable*                          InDeployable;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForwardBase_BP_OnDeployableAdded) == 0x000008, "Wrong alignment on SQForwardBase_BP_OnDeployableAdded");
static_assert(sizeof(SQForwardBase_BP_OnDeployableAdded) == 0x000008, "Wrong size on SQForwardBase_BP_OnDeployableAdded");
static_assert(offsetof(SQForwardBase_BP_OnDeployableAdded, InDeployable) == 0x000000, "Member 'SQForwardBase_BP_OnDeployableAdded::InDeployable' has a wrong offset!");

// Function Squad.SQForwardBase.BP_OnDeployableRemoved
// 0x0008 (0x0008 - 0x0000)
struct SQForwardBase_BP_OnDeployableRemoved final
{
public:
	class ASQDeployable*                          InDeployable;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForwardBase_BP_OnDeployableRemoved) == 0x000008, "Wrong alignment on SQForwardBase_BP_OnDeployableRemoved");
static_assert(sizeof(SQForwardBase_BP_OnDeployableRemoved) == 0x000008, "Wrong size on SQForwardBase_BP_OnDeployableRemoved");
static_assert(offsetof(SQForwardBase_BP_OnDeployableRemoved, InDeployable) == 0x000000, "Member 'SQForwardBase_BP_OnDeployableRemoved::InDeployable' has a wrong offset!");

// Function Squad.SQForwardBase.BPOverrun
// 0x0001 (0x0001 - 0x0000)
struct SQForwardBase_BPOverrun final
{
public:
	bool                                          bFriendly;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForwardBase_BPOverrun) == 0x000001, "Wrong alignment on SQForwardBase_BPOverrun");
static_assert(sizeof(SQForwardBase_BPOverrun) == 0x000001, "Wrong size on SQForwardBase_BPOverrun");
static_assert(offsetof(SQForwardBase_BPOverrun, bFriendly) == 0x000000, "Member 'SQForwardBase_BPOverrun::bFriendly' has a wrong offset!");

// Function Squad.SQForwardBase.BPPostTicketTick
// 0x0004 (0x0004 - 0x0000)
struct SQForwardBase_BPPostTicketTick final
{
public:
	float                                         Difference;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForwardBase_BPPostTicketTick) == 0x000004, "Wrong alignment on SQForwardBase_BPPostTicketTick");
static_assert(sizeof(SQForwardBase_BPPostTicketTick) == 0x000004, "Wrong size on SQForwardBase_BPPostTicketTick");
static_assert(offsetof(SQForwardBase_BPPostTicketTick, Difference) == 0x000000, "Member 'SQForwardBase_BPPostTicketTick::Difference' has a wrong offset!");

// Function Squad.SQForwardBase.CheckDeploymentRules
// 0x0001 (0x0001 - 0x0000)
struct SQForwardBase_CheckDeploymentRules final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForwardBase_CheckDeploymentRules) == 0x000001, "Wrong alignment on SQForwardBase_CheckDeploymentRules");
static_assert(sizeof(SQForwardBase_CheckDeploymentRules) == 0x000001, "Wrong size on SQForwardBase_CheckDeploymentRules");
static_assert(offsetof(SQForwardBase_CheckDeploymentRules, ReturnValue) == 0x000000, "Member 'SQForwardBase_CheckDeploymentRules::ReturnValue' has a wrong offset!");

// Function Squad.SQForwardBase.ConsumeConstructionPoints
// 0x0008 (0x0008 - 0x0000)
struct SQForwardBase_ConsumeConstructionPoints final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FDD[0x3];                                      // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQForwardBase_ConsumeConstructionPoints) == 0x000004, "Wrong alignment on SQForwardBase_ConsumeConstructionPoints");
static_assert(sizeof(SQForwardBase_ConsumeConstructionPoints) == 0x000008, "Wrong size on SQForwardBase_ConsumeConstructionPoints");
static_assert(offsetof(SQForwardBase_ConsumeConstructionPoints, Amount) == 0x000000, "Member 'SQForwardBase_ConsumeConstructionPoints::Amount' has a wrong offset!");
static_assert(offsetof(SQForwardBase_ConsumeConstructionPoints, ReturnValue) == 0x000004, "Member 'SQForwardBase_ConsumeConstructionPoints::ReturnValue' has a wrong offset!");

// Function Squad.SQForwardBase.ConsumeFOBAmmo
// 0x0008 (0x0008 - 0x0000)
struct SQForwardBase_ConsumeFOBAmmo final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FDE[0x3];                                      // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQForwardBase_ConsumeFOBAmmo) == 0x000004, "Wrong alignment on SQForwardBase_ConsumeFOBAmmo");
static_assert(sizeof(SQForwardBase_ConsumeFOBAmmo) == 0x000008, "Wrong size on SQForwardBase_ConsumeFOBAmmo");
static_assert(offsetof(SQForwardBase_ConsumeFOBAmmo, Amount) == 0x000000, "Member 'SQForwardBase_ConsumeFOBAmmo::Amount' has a wrong offset!");
static_assert(offsetof(SQForwardBase_ConsumeFOBAmmo, ReturnValue) == 0x000004, "Member 'SQForwardBase_ConsumeFOBAmmo::ReturnValue' has a wrong offset!");

// Function Squad.SQForwardBase.CreateSpawnPointOnFob
// 0x0008 (0x0008 - 0x0000)
struct SQForwardBase_CreateSpawnPointOnFob final
{
public:
	class ASQGameSpawn*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForwardBase_CreateSpawnPointOnFob) == 0x000008, "Wrong alignment on SQForwardBase_CreateSpawnPointOnFob");
static_assert(sizeof(SQForwardBase_CreateSpawnPointOnFob) == 0x000008, "Wrong size on SQForwardBase_CreateSpawnPointOnFob");
static_assert(offsetof(SQForwardBase_CreateSpawnPointOnFob, ReturnValue) == 0x000000, "Member 'SQForwardBase_CreateSpawnPointOnFob::ReturnValue' has a wrong offset!");

// Function Squad.SQForwardBase.CreateSpawnPointSeperately
// 0x0018 (0x0018 - 0x0000)
struct SQForwardBase_CreateSpawnPointSeperately final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FDF[0x4];                                      // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQGameSpawn*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForwardBase_CreateSpawnPointSeperately) == 0x000008, "Wrong alignment on SQForwardBase_CreateSpawnPointSeperately");
static_assert(sizeof(SQForwardBase_CreateSpawnPointSeperately) == 0x000018, "Wrong size on SQForwardBase_CreateSpawnPointSeperately");
static_assert(offsetof(SQForwardBase_CreateSpawnPointSeperately, Location) == 0x000000, "Member 'SQForwardBase_CreateSpawnPointSeperately::Location' has a wrong offset!");
static_assert(offsetof(SQForwardBase_CreateSpawnPointSeperately, ReturnValue) == 0x000010, "Member 'SQForwardBase_CreateSpawnPointSeperately::ReturnValue' has a wrong offset!");

// Function Squad.SQForwardBase.HasConstructionPointsFor
// 0x0008 (0x0008 - 0x0000)
struct SQForwardBase_HasConstructionPointsFor final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FE0[0x3];                                      // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQForwardBase_HasConstructionPointsFor) == 0x000004, "Wrong alignment on SQForwardBase_HasConstructionPointsFor");
static_assert(sizeof(SQForwardBase_HasConstructionPointsFor) == 0x000008, "Wrong size on SQForwardBase_HasConstructionPointsFor");
static_assert(offsetof(SQForwardBase_HasConstructionPointsFor, Amount) == 0x000000, "Member 'SQForwardBase_HasConstructionPointsFor::Amount' has a wrong offset!");
static_assert(offsetof(SQForwardBase_HasConstructionPointsFor, ReturnValue) == 0x000004, "Member 'SQForwardBase_HasConstructionPointsFor::ReturnValue' has a wrong offset!");

// Function Squad.SQForwardBase.OnRep_IsBleedingChanged
// 0x0001 (0x0001 - 0x0000)
struct SQForwardBase_OnRep_IsBleedingChanged final
{
public:
	bool                                          bPrevIsBleeding;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForwardBase_OnRep_IsBleedingChanged) == 0x000001, "Wrong alignment on SQForwardBase_OnRep_IsBleedingChanged");
static_assert(sizeof(SQForwardBase_OnRep_IsBleedingChanged) == 0x000001, "Wrong size on SQForwardBase_OnRep_IsBleedingChanged");
static_assert(offsetof(SQForwardBase_OnRep_IsBleedingChanged, bPrevIsBleeding) == 0x000000, "Member 'SQForwardBase_OnRep_IsBleedingChanged::bPrevIsBleeding' has a wrong offset!");

// Function Squad.SQForwardBase.OnSpawningActivatedTimestampChanged
// 0x0008 (0x0008 - 0x0000)
struct SQForwardBase_OnSpawningActivatedTimestampChanged final
{
public:
	class ASQGameSpawn*                           SpawnPoint;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForwardBase_OnSpawningActivatedTimestampChanged) == 0x000008, "Wrong alignment on SQForwardBase_OnSpawningActivatedTimestampChanged");
static_assert(sizeof(SQForwardBase_OnSpawningActivatedTimestampChanged) == 0x000008, "Wrong size on SQForwardBase_OnSpawningActivatedTimestampChanged");
static_assert(offsetof(SQForwardBase_OnSpawningActivatedTimestampChanged, SpawnPoint) == 0x000000, "Member 'SQForwardBase_OnSpawningActivatedTimestampChanged::SpawnPoint' has a wrong offset!");

// Function Squad.SQForwardBase.OnSpawningEnabledChanged
// 0x0008 (0x0008 - 0x0000)
struct SQForwardBase_OnSpawningEnabledChanged final
{
public:
	class ASQGameSpawn*                           SpawnPoint;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForwardBase_OnSpawningEnabledChanged) == 0x000008, "Wrong alignment on SQForwardBase_OnSpawningEnabledChanged");
static_assert(sizeof(SQForwardBase_OnSpawningEnabledChanged) == 0x000008, "Wrong size on SQForwardBase_OnSpawningEnabledChanged");
static_assert(offsetof(SQForwardBase_OnSpawningEnabledChanged, SpawnPoint) == 0x000000, "Member 'SQForwardBase_OnSpawningEnabledChanged::SpawnPoint' has a wrong offset!");

// Function Squad.SQForwardBase.OnSpawnPointDestroyed
// 0x0008 (0x0008 - 0x0000)
struct SQForwardBase_OnSpawnPointDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForwardBase_OnSpawnPointDestroyed) == 0x000008, "Wrong alignment on SQForwardBase_OnSpawnPointDestroyed");
static_assert(sizeof(SQForwardBase_OnSpawnPointDestroyed) == 0x000008, "Wrong size on SQForwardBase_OnSpawnPointDestroyed");
static_assert(offsetof(SQForwardBase_OnSpawnPointDestroyed, DestroyedActor) == 0x000000, "Member 'SQForwardBase_OnSpawnPointDestroyed::DestroyedActor' has a wrong offset!");

// Function Squad.SQForwardBase.OnSpawnSiegedStateChanged
// 0x0008 (0x0008 - 0x0000)
struct SQForwardBase_OnSpawnSiegedStateChanged final
{
public:
	class ASQGameSpawn*                           SpawnPoint;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForwardBase_OnSpawnSiegedStateChanged) == 0x000008, "Wrong alignment on SQForwardBase_OnSpawnSiegedStateChanged");
static_assert(sizeof(SQForwardBase_OnSpawnSiegedStateChanged) == 0x000008, "Wrong size on SQForwardBase_OnSpawnSiegedStateChanged");
static_assert(offsetof(SQForwardBase_OnSpawnSiegedStateChanged, SpawnPoint) == 0x000000, "Member 'SQForwardBase_OnSpawnSiegedStateChanged::SpawnPoint' has a wrong offset!");

// Function Squad.SQForwardBase.OnTrackedDeployableDestroyed
// 0x0008 (0x0008 - 0x0000)
struct SQForwardBase_OnTrackedDeployableDestroyed final
{
public:
	class ASQDeployable*                          Deployable;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForwardBase_OnTrackedDeployableDestroyed) == 0x000008, "Wrong alignment on SQForwardBase_OnTrackedDeployableDestroyed");
static_assert(sizeof(SQForwardBase_OnTrackedDeployableDestroyed) == 0x000008, "Wrong size on SQForwardBase_OnTrackedDeployableDestroyed");
static_assert(offsetof(SQForwardBase_OnTrackedDeployableDestroyed, Deployable) == 0x000000, "Member 'SQForwardBase_OnTrackedDeployableDestroyed::Deployable' has a wrong offset!");

// Function Squad.SQForwardBase.Overrun
// 0x0001 (0x0001 - 0x0000)
struct SQForwardBase_Overrun final
{
public:
	bool                                          bFriendly;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForwardBase_Overrun) == 0x000001, "Wrong alignment on SQForwardBase_Overrun");
static_assert(sizeof(SQForwardBase_Overrun) == 0x000001, "Wrong size on SQForwardBase_Overrun");
static_assert(offsetof(SQForwardBase_Overrun, bFriendly) == 0x000000, "Member 'SQForwardBase_Overrun::bFriendly' has a wrong offset!");

// Function Squad.SQForwardBase.SetActivateDelay
// 0x0004 (0x0004 - 0x0000)
struct SQForwardBase_SetActivateDelay final
{
public:
	float                                         DelaySeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForwardBase_SetActivateDelay) == 0x000004, "Wrong alignment on SQForwardBase_SetActivateDelay");
static_assert(sizeof(SQForwardBase_SetActivateDelay) == 0x000004, "Wrong size on SQForwardBase_SetActivateDelay");
static_assert(offsetof(SQForwardBase_SetActivateDelay, DelaySeconds) == 0x000000, "Member 'SQForwardBase_SetActivateDelay::DelaySeconds' has a wrong offset!");

// Function Squad.SQForwardBase.SetAmmo
// 0x0004 (0x0004 - 0x0000)
struct SQForwardBase_SetAmmo final
{
public:
	float                                         NewAmmo;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForwardBase_SetAmmo) == 0x000004, "Wrong alignment on SQForwardBase_SetAmmo");
static_assert(sizeof(SQForwardBase_SetAmmo) == 0x000004, "Wrong size on SQForwardBase_SetAmmo");
static_assert(offsetof(SQForwardBase_SetAmmo, NewAmmo) == 0x000000, "Member 'SQForwardBase_SetAmmo::NewAmmo' has a wrong offset!");

// Function Squad.SQForwardBase.SetBleedState
// 0x0001 (0x0001 - 0x0000)
struct SQForwardBase_SetBleedState final
{
public:
	bool                                          bNewIsBleeding;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForwardBase_SetBleedState) == 0x000001, "Wrong alignment on SQForwardBase_SetBleedState");
static_assert(sizeof(SQForwardBase_SetBleedState) == 0x000001, "Wrong size on SQForwardBase_SetBleedState");
static_assert(offsetof(SQForwardBase_SetBleedState, bNewIsBleeding) == 0x000000, "Member 'SQForwardBase_SetBleedState::bNewIsBleeding' has a wrong offset!");

// Function Squad.SQForwardBase.SetConstructionPoints
// 0x0004 (0x0004 - 0x0000)
struct SQForwardBase_SetConstructionPoints final
{
public:
	float                                         NewConstructionPoints;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForwardBase_SetConstructionPoints) == 0x000004, "Wrong alignment on SQForwardBase_SetConstructionPoints");
static_assert(sizeof(SQForwardBase_SetConstructionPoints) == 0x000004, "Wrong size on SQForwardBase_SetConstructionPoints");
static_assert(offsetof(SQForwardBase_SetConstructionPoints, NewConstructionPoints) == 0x000000, "Member 'SQForwardBase_SetConstructionPoints::NewConstructionPoints' has a wrong offset!");

// Function Squad.SQForwardBase.SetSieged
// 0x0001 (0x0001 - 0x0000)
struct SQForwardBase_SetSieged final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForwardBase_SetSieged) == 0x000001, "Wrong alignment on SQForwardBase_SetSieged");
static_assert(sizeof(SQForwardBase_SetSieged) == 0x000001, "Wrong size on SQForwardBase_SetSieged");
static_assert(offsetof(SQForwardBase_SetSieged, bValue) == 0x000000, "Member 'SQForwardBase_SetSieged::bValue' has a wrong offset!");

// Function Squad.SQForwardBase.SetSpawnPointsEnabled
// 0x0001 (0x0001 - 0x0000)
struct SQForwardBase_SetSpawnPointsEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForwardBase_SetSpawnPointsEnabled) == 0x000001, "Wrong alignment on SQForwardBase_SetSpawnPointsEnabled");
static_assert(sizeof(SQForwardBase_SetSpawnPointsEnabled) == 0x000001, "Wrong size on SQForwardBase_SetSpawnPointsEnabled");
static_assert(offsetof(SQForwardBase_SetSpawnPointsEnabled, bEnabled) == 0x000000, "Member 'SQForwardBase_SetSpawnPointsEnabled::bEnabled' has a wrong offset!");

// Function Squad.SQForwardBase.TrackDeployable
// 0x0008 (0x0008 - 0x0000)
struct SQForwardBase_TrackDeployable final
{
public:
	class ASQDeployable*                          Deployable;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForwardBase_TrackDeployable) == 0x000008, "Wrong alignment on SQForwardBase_TrackDeployable");
static_assert(sizeof(SQForwardBase_TrackDeployable) == 0x000008, "Wrong size on SQForwardBase_TrackDeployable");
static_assert(offsetof(SQForwardBase_TrackDeployable, Deployable) == 0x000000, "Member 'SQForwardBase_TrackDeployable::Deployable' has a wrong offset!");

// Function Squad.SQForwardBase.GetActivatedSpawnDelay
// 0x0008 (0x0008 - 0x0000)
struct SQForwardBase_GetActivatedSpawnDelay final
{
public:
	bool                                          BMax;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FE1[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForwardBase_GetActivatedSpawnDelay) == 0x000004, "Wrong alignment on SQForwardBase_GetActivatedSpawnDelay");
static_assert(sizeof(SQForwardBase_GetActivatedSpawnDelay) == 0x000008, "Wrong size on SQForwardBase_GetActivatedSpawnDelay");
static_assert(offsetof(SQForwardBase_GetActivatedSpawnDelay, BMax) == 0x000000, "Member 'SQForwardBase_GetActivatedSpawnDelay::BMax' has a wrong offset!");
static_assert(offsetof(SQForwardBase_GetActivatedSpawnDelay, ReturnValue) == 0x000004, "Member 'SQForwardBase_GetActivatedSpawnDelay::ReturnValue' has a wrong offset!");

// Function Squad.SQForwardBase.GetActivatedTimeStamp
// 0x0008 (0x0008 - 0x0000)
struct SQForwardBase_GetActivatedTimeStamp final
{
public:
	bool                                          BMax;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FE2[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForwardBase_GetActivatedTimeStamp) == 0x000004, "Wrong alignment on SQForwardBase_GetActivatedTimeStamp");
static_assert(sizeof(SQForwardBase_GetActivatedTimeStamp) == 0x000008, "Wrong size on SQForwardBase_GetActivatedTimeStamp");
static_assert(offsetof(SQForwardBase_GetActivatedTimeStamp, BMax) == 0x000000, "Member 'SQForwardBase_GetActivatedTimeStamp::BMax' has a wrong offset!");
static_assert(offsetof(SQForwardBase_GetActivatedTimeStamp, ReturnValue) == 0x000004, "Member 'SQForwardBase_GetActivatedTimeStamp::ReturnValue' has a wrong offset!");

// Function Squad.SQForwardBase.GetClientRemainingActivatingTime
// 0x0004 (0x0004 - 0x0000)
struct SQForwardBase_GetClientRemainingActivatingTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForwardBase_GetClientRemainingActivatingTime) == 0x000004, "Wrong alignment on SQForwardBase_GetClientRemainingActivatingTime");
static_assert(sizeof(SQForwardBase_GetClientRemainingActivatingTime) == 0x000004, "Wrong size on SQForwardBase_GetClientRemainingActivatingTime");
static_assert(offsetof(SQForwardBase_GetClientRemainingActivatingTime, ReturnValue) == 0x000000, "Member 'SQForwardBase_GetClientRemainingActivatingTime::ReturnValue' has a wrong offset!");

// Function Squad.SQForwardBase.GetNumActivatedSpawnPoints
// 0x0004 (0x0004 - 0x0000)
struct SQForwardBase_GetNumActivatedSpawnPoints final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForwardBase_GetNumActivatedSpawnPoints) == 0x000004, "Wrong alignment on SQForwardBase_GetNumActivatedSpawnPoints");
static_assert(sizeof(SQForwardBase_GetNumActivatedSpawnPoints) == 0x000004, "Wrong size on SQForwardBase_GetNumActivatedSpawnPoints");
static_assert(offsetof(SQForwardBase_GetNumActivatedSpawnPoints, ReturnValue) == 0x000000, "Member 'SQForwardBase_GetNumActivatedSpawnPoints::ReturnValue' has a wrong offset!");

// Function Squad.SQForwardBase.GetRemainingActivatingTime
// 0x0008 (0x0008 - 0x0000)
struct SQForwardBase_GetRemainingActivatingTime final
{
public:
	bool                                          BMax;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FE3[0x3];                                      // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForwardBase_GetRemainingActivatingTime) == 0x000004, "Wrong alignment on SQForwardBase_GetRemainingActivatingTime");
static_assert(sizeof(SQForwardBase_GetRemainingActivatingTime) == 0x000008, "Wrong size on SQForwardBase_GetRemainingActivatingTime");
static_assert(offsetof(SQForwardBase_GetRemainingActivatingTime, BMax) == 0x000000, "Member 'SQForwardBase_GetRemainingActivatingTime::BMax' has a wrong offset!");
static_assert(offsetof(SQForwardBase_GetRemainingActivatingTime, ReturnValue) == 0x000004, "Member 'SQForwardBase_GetRemainingActivatingTime::ReturnValue' has a wrong offset!");

// Function Squad.SQForwardBase.GetSpawnPointsEnabled
// 0x0001 (0x0001 - 0x0000)
struct SQForwardBase_GetSpawnPointsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForwardBase_GetSpawnPointsEnabled) == 0x000001, "Wrong alignment on SQForwardBase_GetSpawnPointsEnabled");
static_assert(sizeof(SQForwardBase_GetSpawnPointsEnabled) == 0x000001, "Wrong size on SQForwardBase_GetSpawnPointsEnabled");
static_assert(offsetof(SQForwardBase_GetSpawnPointsEnabled, ReturnValue) == 0x000000, "Member 'SQForwardBase_GetSpawnPointsEnabled::ReturnValue' has a wrong offset!");

// Function Squad.SQForwardBase.HasAmmoFor
// 0x0008 (0x0008 - 0x0000)
struct SQForwardBase_HasAmmoFor final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FE4[0x3];                                      // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQForwardBase_HasAmmoFor) == 0x000004, "Wrong alignment on SQForwardBase_HasAmmoFor");
static_assert(sizeof(SQForwardBase_HasAmmoFor) == 0x000008, "Wrong size on SQForwardBase_HasAmmoFor");
static_assert(offsetof(SQForwardBase_HasAmmoFor, Amount) == 0x000000, "Member 'SQForwardBase_HasAmmoFor::Amount' has a wrong offset!");
static_assert(offsetof(SQForwardBase_HasAmmoFor, ReturnValue) == 0x000004, "Member 'SQForwardBase_HasAmmoFor::ReturnValue' has a wrong offset!");

// Function Squad.SQCommanderManager.CalculateCategoryCurrentRemainingTime
// 0x0018 (0x0018 - 0x0000)
struct SQCommanderManager_CalculateCategoryCurrentRemainingTime final
{
public:
	uint8                                         CommandOptionType;                                 // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FE8[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class ASQCommanderState*                SQCommanderState;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FE9[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQCommanderManager_CalculateCategoryCurrentRemainingTime) == 0x000008, "Wrong alignment on SQCommanderManager_CalculateCategoryCurrentRemainingTime");
static_assert(sizeof(SQCommanderManager_CalculateCategoryCurrentRemainingTime) == 0x000018, "Wrong size on SQCommanderManager_CalculateCategoryCurrentRemainingTime");
static_assert(offsetof(SQCommanderManager_CalculateCategoryCurrentRemainingTime, CommandOptionType) == 0x000000, "Member 'SQCommanderManager_CalculateCategoryCurrentRemainingTime::CommandOptionType' has a wrong offset!");
static_assert(offsetof(SQCommanderManager_CalculateCategoryCurrentRemainingTime, SQCommanderState) == 0x000008, "Member 'SQCommanderManager_CalculateCategoryCurrentRemainingTime::SQCommanderState' has a wrong offset!");
static_assert(offsetof(SQCommanderManager_CalculateCategoryCurrentRemainingTime, ReturnValue) == 0x000010, "Member 'SQCommanderManager_CalculateCategoryCurrentRemainingTime::ReturnValue' has a wrong offset!");

// Function Squad.SQCommanderManager.CalculateCategoryLocked
// 0x0018 (0x0018 - 0x0000)
struct SQCommanderManager_CalculateCategoryLocked final
{
public:
	uint8                                         CommandOptionType;                                 // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FEA[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class ASQCommanderState*                SQCommanderState;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FEB[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQCommanderManager_CalculateCategoryLocked) == 0x000008, "Wrong alignment on SQCommanderManager_CalculateCategoryLocked");
static_assert(sizeof(SQCommanderManager_CalculateCategoryLocked) == 0x000018, "Wrong size on SQCommanderManager_CalculateCategoryLocked");
static_assert(offsetof(SQCommanderManager_CalculateCategoryLocked, CommandOptionType) == 0x000000, "Member 'SQCommanderManager_CalculateCategoryLocked::CommandOptionType' has a wrong offset!");
static_assert(offsetof(SQCommanderManager_CalculateCategoryLocked, SQCommanderState) == 0x000008, "Member 'SQCommanderManager_CalculateCategoryLocked::SQCommanderState' has a wrong offset!");
static_assert(offsetof(SQCommanderManager_CalculateCategoryLocked, ReturnValue) == 0x000010, "Member 'SQCommanderManager_CalculateCategoryLocked::ReturnValue' has a wrong offset!");

// Function Squad.SQCommanderManager.CalculateCategoryPercentRemainingTime
// 0x0018 (0x0018 - 0x0000)
struct SQCommanderManager_CalculateCategoryPercentRemainingTime final
{
public:
	uint8                                         CommandOptionType;                                 // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FEC[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class ASQCommanderState*                SQCommanderState;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FED[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQCommanderManager_CalculateCategoryPercentRemainingTime) == 0x000008, "Wrong alignment on SQCommanderManager_CalculateCategoryPercentRemainingTime");
static_assert(sizeof(SQCommanderManager_CalculateCategoryPercentRemainingTime) == 0x000018, "Wrong size on SQCommanderManager_CalculateCategoryPercentRemainingTime");
static_assert(offsetof(SQCommanderManager_CalculateCategoryPercentRemainingTime, CommandOptionType) == 0x000000, "Member 'SQCommanderManager_CalculateCategoryPercentRemainingTime::CommandOptionType' has a wrong offset!");
static_assert(offsetof(SQCommanderManager_CalculateCategoryPercentRemainingTime, SQCommanderState) == 0x000008, "Member 'SQCommanderManager_CalculateCategoryPercentRemainingTime::SQCommanderState' has a wrong offset!");
static_assert(offsetof(SQCommanderManager_CalculateCategoryPercentRemainingTime, ReturnValue) == 0x000010, "Member 'SQCommanderManager_CalculateCategoryPercentRemainingTime::ReturnValue' has a wrong offset!");

// Function Squad.SQCommanderManager.CalculateState
// 0x0018 (0x0018 - 0x0000)
struct SQCommanderManager_CalculateState final
{
public:
	TSubclassOf<class USQGridData_CommandOption>  CommandOption;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASQCommanderState*                SQCommanderState;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQCommandOptionState                         ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FEE[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQCommanderManager_CalculateState) == 0x000008, "Wrong alignment on SQCommanderManager_CalculateState");
static_assert(sizeof(SQCommanderManager_CalculateState) == 0x000018, "Wrong size on SQCommanderManager_CalculateState");
static_assert(offsetof(SQCommanderManager_CalculateState, CommandOption) == 0x000000, "Member 'SQCommanderManager_CalculateState::CommandOption' has a wrong offset!");
static_assert(offsetof(SQCommanderManager_CalculateState, SQCommanderState) == 0x000008, "Member 'SQCommanderManager_CalculateState::SQCommanderState' has a wrong offset!");
static_assert(offsetof(SQCommanderManager_CalculateState, ReturnValue) == 0x000010, "Member 'SQCommanderManager_CalculateState::ReturnValue' has a wrong offset!");

// Function Squad.SQCommanderManager.CalculateStatePercentTimeRemaining
// 0x0018 (0x0018 - 0x0000)
struct SQCommanderManager_CalculateStatePercentTimeRemaining final
{
public:
	TSubclassOf<class USQGridData_CommandOption>  CommandOption;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASQCommanderState*                SQCommanderState;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQCommandOptionState                         CommandOptionState;                                // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FEF[0x3];                                      // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCommanderManager_CalculateStatePercentTimeRemaining) == 0x000008, "Wrong alignment on SQCommanderManager_CalculateStatePercentTimeRemaining");
static_assert(sizeof(SQCommanderManager_CalculateStatePercentTimeRemaining) == 0x000018, "Wrong size on SQCommanderManager_CalculateStatePercentTimeRemaining");
static_assert(offsetof(SQCommanderManager_CalculateStatePercentTimeRemaining, CommandOption) == 0x000000, "Member 'SQCommanderManager_CalculateStatePercentTimeRemaining::CommandOption' has a wrong offset!");
static_assert(offsetof(SQCommanderManager_CalculateStatePercentTimeRemaining, SQCommanderState) == 0x000008, "Member 'SQCommanderManager_CalculateStatePercentTimeRemaining::SQCommanderState' has a wrong offset!");
static_assert(offsetof(SQCommanderManager_CalculateStatePercentTimeRemaining, CommandOptionState) == 0x000010, "Member 'SQCommanderManager_CalculateStatePercentTimeRemaining::CommandOptionState' has a wrong offset!");
static_assert(offsetof(SQCommanderManager_CalculateStatePercentTimeRemaining, ReturnValue) == 0x000014, "Member 'SQCommanderManager_CalculateStatePercentTimeRemaining::ReturnValue' has a wrong offset!");

// Function Squad.SQCommanderManager.CalculateStateTimeRemaining
// 0x0018 (0x0018 - 0x0000)
struct SQCommanderManager_CalculateStateTimeRemaining final
{
public:
	TSubclassOf<class USQGridData_CommandOption>  CommandOption;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASQCommanderState*                SQCommanderState;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQCommandOptionState                         CommandOptionState;                                // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FF0[0x3];                                      // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCommanderManager_CalculateStateTimeRemaining) == 0x000008, "Wrong alignment on SQCommanderManager_CalculateStateTimeRemaining");
static_assert(sizeof(SQCommanderManager_CalculateStateTimeRemaining) == 0x000018, "Wrong size on SQCommanderManager_CalculateStateTimeRemaining");
static_assert(offsetof(SQCommanderManager_CalculateStateTimeRemaining, CommandOption) == 0x000000, "Member 'SQCommanderManager_CalculateStateTimeRemaining::CommandOption' has a wrong offset!");
static_assert(offsetof(SQCommanderManager_CalculateStateTimeRemaining, SQCommanderState) == 0x000008, "Member 'SQCommanderManager_CalculateStateTimeRemaining::SQCommanderState' has a wrong offset!");
static_assert(offsetof(SQCommanderManager_CalculateStateTimeRemaining, CommandOptionState) == 0x000010, "Member 'SQCommanderManager_CalculateStateTimeRemaining::CommandOptionState' has a wrong offset!");
static_assert(offsetof(SQCommanderManager_CalculateStateTimeRemaining, ReturnValue) == 0x000014, "Member 'SQCommanderManager_CalculateStateTimeRemaining::ReturnValue' has a wrong offset!");

// Function Squad.SQCommanderManager.CalculateTotalTimeRemaining
// 0x0018 (0x0018 - 0x0000)
struct SQCommanderManager_CalculateTotalTimeRemaining final
{
public:
	TSubclassOf<class USQGridData_CommandOption>  CommandOption;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASQCommanderState*                SQCommanderState;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FF1[0x4];                                      // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQCommanderManager_CalculateTotalTimeRemaining) == 0x000008, "Wrong alignment on SQCommanderManager_CalculateTotalTimeRemaining");
static_assert(sizeof(SQCommanderManager_CalculateTotalTimeRemaining) == 0x000018, "Wrong size on SQCommanderManager_CalculateTotalTimeRemaining");
static_assert(offsetof(SQCommanderManager_CalculateTotalTimeRemaining, CommandOption) == 0x000000, "Member 'SQCommanderManager_CalculateTotalTimeRemaining::CommandOption' has a wrong offset!");
static_assert(offsetof(SQCommanderManager_CalculateTotalTimeRemaining, SQCommanderState) == 0x000008, "Member 'SQCommanderManager_CalculateTotalTimeRemaining::SQCommanderState' has a wrong offset!");
static_assert(offsetof(SQCommanderManager_CalculateTotalTimeRemaining, ReturnValue) == 0x000010, "Member 'SQCommanderManager_CalculateTotalTimeRemaining::ReturnValue' has a wrong offset!");

// Function Squad.SQCommanderManager.CanUseAction
// 0x0018 (0x0018 - 0x0000)
struct SQCommanderManager_CanUseAction final
{
public:
	TSubclassOf<class USQGridData_CommandOption>  CommandOption;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASQCommanderState*                SQCommanderState;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FF2[0x7];                                      // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQCommanderManager_CanUseAction) == 0x000008, "Wrong alignment on SQCommanderManager_CanUseAction");
static_assert(sizeof(SQCommanderManager_CanUseAction) == 0x000018, "Wrong size on SQCommanderManager_CanUseAction");
static_assert(offsetof(SQCommanderManager_CanUseAction, CommandOption) == 0x000000, "Member 'SQCommanderManager_CanUseAction::CommandOption' has a wrong offset!");
static_assert(offsetof(SQCommanderManager_CanUseAction, SQCommanderState) == 0x000008, "Member 'SQCommanderManager_CanUseAction::SQCommanderState' has a wrong offset!");
static_assert(offsetof(SQCommanderManager_CanUseAction, ReturnValue) == 0x000010, "Member 'SQCommanderManager_CanUseAction::ReturnValue' has a wrong offset!");

// Function Squad.SQCommanderManager.GetInterval
// 0x0028 (0x0028 - 0x0000)
struct SQCommanderManager_GetInterval final
{
public:
	TSubclassOf<class USQGridData_CommandOption>  CommandOption;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASQCommanderState*                SQCommanderState;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQCommandActionData                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCommanderManager_GetInterval) == 0x000008, "Wrong alignment on SQCommanderManager_GetInterval");
static_assert(sizeof(SQCommanderManager_GetInterval) == 0x000028, "Wrong size on SQCommanderManager_GetInterval");
static_assert(offsetof(SQCommanderManager_GetInterval, CommandOption) == 0x000000, "Member 'SQCommanderManager_GetInterval::CommandOption' has a wrong offset!");
static_assert(offsetof(SQCommanderManager_GetInterval, SQCommanderState) == 0x000008, "Member 'SQCommanderManager_GetInterval::SQCommanderState' has a wrong offset!");
static_assert(offsetof(SQCommanderManager_GetInterval, ReturnValue) == 0x000010, "Member 'SQCommanderManager_GetInterval::ReturnValue' has a wrong offset!");

// DelegateFunction Squad.SQCommanderManager.CommanderChangedDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct SQCommanderManager_CommanderChangedDelegate__DelegateSignature final
{
public:
	class ASQPlayerState*                         OldCommander;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCommanderManager_CommanderChangedDelegate__DelegateSignature) == 0x000008, "Wrong alignment on SQCommanderManager_CommanderChangedDelegate__DelegateSignature");
static_assert(sizeof(SQCommanderManager_CommanderChangedDelegate__DelegateSignature) == 0x000008, "Wrong size on SQCommanderManager_CommanderChangedDelegate__DelegateSignature");
static_assert(offsetof(SQCommanderManager_CommanderChangedDelegate__DelegateSignature, OldCommander) == 0x000000, "Member 'SQCommanderManager_CommanderChangedDelegate__DelegateSignature::OldCommander' has a wrong offset!");

// Function Squad.SQCommanderState.GetActionsEnabled
// 0x0001 (0x0001 - 0x0000)
struct SQCommanderState_GetActionsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCommanderState_GetActionsEnabled) == 0x000001, "Wrong alignment on SQCommanderState_GetActionsEnabled");
static_assert(sizeof(SQCommanderState_GetActionsEnabled) == 0x000001, "Wrong size on SQCommanderState_GetActionsEnabled");
static_assert(offsetof(SQCommanderState_GetActionsEnabled, ReturnValue) == 0x000000, "Member 'SQCommanderState_GetActionsEnabled::ReturnValue' has a wrong offset!");

// Function Squad.SQCommanderState.GetCommandActions
// 0x0010 (0x0010 - 0x0000)
struct SQCommanderState_GetCommandActions final
{
public:
	TArray<TSubclassOf<class USQGridData_CommandOption>> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCommanderState_GetCommandActions) == 0x000008, "Wrong alignment on SQCommanderState_GetCommandActions");
static_assert(sizeof(SQCommanderState_GetCommandActions) == 0x000010, "Wrong size on SQCommanderState_GetCommandActions");
static_assert(offsetof(SQCommanderState_GetCommandActions, ReturnValue) == 0x000000, "Member 'SQCommanderState_GetCommandActions::ReturnValue' has a wrong offset!");

// Function Squad.SQCommanderState.GetCommandActionsById
// 0x0018 (0x0018 - 0x0000)
struct SQCommanderState_GetCommandActionsById final
{
public:
	uint8                                         ID;                                                // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FF9[0x7];                                      // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class USQGridData_CommandOption>> ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCommanderState_GetCommandActionsById) == 0x000008, "Wrong alignment on SQCommanderState_GetCommandActionsById");
static_assert(sizeof(SQCommanderState_GetCommandActionsById) == 0x000018, "Wrong size on SQCommanderState_GetCommandActionsById");
static_assert(offsetof(SQCommanderState_GetCommandActionsById, ID) == 0x000000, "Member 'SQCommanderState_GetCommandActionsById::ID' has a wrong offset!");
static_assert(offsetof(SQCommanderState_GetCommandActionsById, ReturnValue) == 0x000008, "Member 'SQCommanderState_GetCommandActionsById::ReturnValue' has a wrong offset!");

// Function Squad.SQCommanderState.OnRep_CurrentCommander
// 0x0008 (0x0008 - 0x0000)
struct SQCommanderState_OnRep_CurrentCommander final
{
public:
	class ASQPlayerState*                         OldCommander;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCommanderState_OnRep_CurrentCommander) == 0x000008, "Wrong alignment on SQCommanderState_OnRep_CurrentCommander");
static_assert(sizeof(SQCommanderState_OnRep_CurrentCommander) == 0x000008, "Wrong size on SQCommanderState_OnRep_CurrentCommander");
static_assert(offsetof(SQCommanderState_OnRep_CurrentCommander, OldCommander) == 0x000000, "Member 'SQCommanderState_OnRep_CurrentCommander::OldCommander' has a wrong offset!");

// Function Squad.SQCommanderState.GetCurrentCommander
// 0x0008 (0x0008 - 0x0000)
struct SQCommanderState_GetCurrentCommander final
{
public:
	class ASQPlayerState*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCommanderState_GetCurrentCommander) == 0x000008, "Wrong alignment on SQCommanderState_GetCurrentCommander");
static_assert(sizeof(SQCommanderState_GetCurrentCommander) == 0x000008, "Wrong size on SQCommanderState_GetCurrentCommander");
static_assert(offsetof(SQCommanderState_GetCurrentCommander, ReturnValue) == 0x000000, "Member 'SQCommanderState_GetCurrentCommander::ReturnValue' has a wrong offset!");

// Function Squad.SQCommanderState.IsCommanderActionAllowed
// 0x0010 (0x0010 - 0x0000)
struct SQCommanderState_IsCommanderActionAllowed final
{
public:
	TSubclassOf<class USQGridData_CommandOption>  CommandOption;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FFA[0x7];                                      // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQCommanderState_IsCommanderActionAllowed) == 0x000008, "Wrong alignment on SQCommanderState_IsCommanderActionAllowed");
static_assert(sizeof(SQCommanderState_IsCommanderActionAllowed) == 0x000010, "Wrong size on SQCommanderState_IsCommanderActionAllowed");
static_assert(offsetof(SQCommanderState_IsCommanderActionAllowed, CommandOption) == 0x000000, "Member 'SQCommanderState_IsCommanderActionAllowed::CommandOption' has a wrong offset!");
static_assert(offsetof(SQCommanderState_IsCommanderActionAllowed, ReturnValue) == 0x000008, "Member 'SQCommanderState_IsCommanderActionAllowed::ReturnValue' has a wrong offset!");

// Function Squad.SQCommanderVotingWidget.OnVotingTimeChanged
// 0x0004 (0x0004 - 0x0000)
struct SQCommanderVotingWidget_OnVotingTimeChanged final
{
public:
	float                                         Seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCommanderVotingWidget_OnVotingTimeChanged) == 0x000004, "Wrong alignment on SQCommanderVotingWidget_OnVotingTimeChanged");
static_assert(sizeof(SQCommanderVotingWidget_OnVotingTimeChanged) == 0x000004, "Wrong size on SQCommanderVotingWidget_OnVotingTimeChanged");
static_assert(offsetof(SQCommanderVotingWidget_OnVotingTimeChanged, Seconds) == 0x000000, "Member 'SQCommanderVotingWidget_OnVotingTimeChanged::Seconds' has a wrong offset!");

// Function Squad.SQCompassMarker.UpdateState
// 0x0008 (0x0008 - 0x0000)
struct SQCompassMarker_UpdateState final
{
public:
	float                                         InScale;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowIcon;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1003[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQCompassMarker_UpdateState) == 0x000004, "Wrong alignment on SQCompassMarker_UpdateState");
static_assert(sizeof(SQCompassMarker_UpdateState) == 0x000008, "Wrong size on SQCompassMarker_UpdateState");
static_assert(offsetof(SQCompassMarker_UpdateState, InScale) == 0x000000, "Member 'SQCompassMarker_UpdateState::InScale' has a wrong offset!");
static_assert(offsetof(SQCompassMarker_UpdateState, bShowIcon) == 0x000004, "Member 'SQCompassMarker_UpdateState::bShowIcon' has a wrong offset!");

// Function Squad.SQCompassMK2.CreateNewCompassMarker
// 0x00C8 (0x00C8 - 0x0000)
struct SQCompassMK2_CreateNewCompassMarker final
{
public:
	struct FSQMapMarkerVisualData                 MapMarkerVisualData;                               // 0x0000(0x00C8)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCompassMK2_CreateNewCompassMarker) == 0x000008, "Wrong alignment on SQCompassMK2_CreateNewCompassMarker");
static_assert(sizeof(SQCompassMK2_CreateNewCompassMarker) == 0x0000C8, "Wrong size on SQCompassMK2_CreateNewCompassMarker");
static_assert(offsetof(SQCompassMK2_CreateNewCompassMarker, MapMarkerVisualData) == 0x000000, "Member 'SQCompassMK2_CreateNewCompassMarker::MapMarkerVisualData' has a wrong offset!");

// Function Squad.SQCompassMK2.CreateNewMarker
// 0x0010 (0x0010 - 0x0000)
struct SQCompassMK2_CreateNewMarker final
{
public:
	int32                                         SquadId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1008[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQMapMarker*                           Marker;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCompassMK2_CreateNewMarker) == 0x000008, "Wrong alignment on SQCompassMK2_CreateNewMarker");
static_assert(sizeof(SQCompassMK2_CreateNewMarker) == 0x000010, "Wrong size on SQCompassMK2_CreateNewMarker");
static_assert(offsetof(SQCompassMK2_CreateNewMarker, SquadId) == 0x000000, "Member 'SQCompassMK2_CreateNewMarker::SquadId' has a wrong offset!");
static_assert(offsetof(SQCompassMK2_CreateNewMarker, Marker) == 0x000008, "Member 'SQCompassMK2_CreateNewMarker::Marker' has a wrong offset!");

// Function Squad.SQCompassMK2.CreateSquadMateWidget
// 0x0008 (0x0008 - 0x0000)
struct SQCompassMK2_CreateSquadMateWidget final
{
public:
	class ASQPlayerState*                         SquadMate;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCompassMK2_CreateSquadMateWidget) == 0x000008, "Wrong alignment on SQCompassMK2_CreateSquadMateWidget");
static_assert(sizeof(SQCompassMK2_CreateSquadMateWidget) == 0x000008, "Wrong size on SQCompassMK2_CreateSquadMateWidget");
static_assert(offsetof(SQCompassMK2_CreateSquadMateWidget, SquadMate) == 0x000000, "Member 'SQCompassMK2_CreateSquadMateWidget::SquadMate' has a wrong offset!");

// Function Squad.SQCompassMK2.PlayerJoinedSquad
// 0x0010 (0x0010 - 0x0000)
struct SQCompassMK2_PlayerJoinedSquad final
{
public:
	class ASQSquadState*                          Squad;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerState*                         PlayerState;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCompassMK2_PlayerJoinedSquad) == 0x000008, "Wrong alignment on SQCompassMK2_PlayerJoinedSquad");
static_assert(sizeof(SQCompassMK2_PlayerJoinedSquad) == 0x000010, "Wrong size on SQCompassMK2_PlayerJoinedSquad");
static_assert(offsetof(SQCompassMK2_PlayerJoinedSquad, Squad) == 0x000000, "Member 'SQCompassMK2_PlayerJoinedSquad::Squad' has a wrong offset!");
static_assert(offsetof(SQCompassMK2_PlayerJoinedSquad, PlayerState) == 0x000008, "Member 'SQCompassMK2_PlayerJoinedSquad::PlayerState' has a wrong offset!");

// Function Squad.SQCompassMK2.PlayerLeftSquad
// 0x0010 (0x0010 - 0x0000)
struct SQCompassMK2_PlayerLeftSquad final
{
public:
	class ASQSquadState*                          Squad;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerState*                         PlayerState;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCompassMK2_PlayerLeftSquad) == 0x000008, "Wrong alignment on SQCompassMK2_PlayerLeftSquad");
static_assert(sizeof(SQCompassMK2_PlayerLeftSquad) == 0x000010, "Wrong size on SQCompassMK2_PlayerLeftSquad");
static_assert(offsetof(SQCompassMK2_PlayerLeftSquad, Squad) == 0x000000, "Member 'SQCompassMK2_PlayerLeftSquad::Squad' has a wrong offset!");
static_assert(offsetof(SQCompassMK2_PlayerLeftSquad, PlayerState) == 0x000008, "Member 'SQCompassMK2_PlayerLeftSquad::PlayerState' has a wrong offset!");

// Function Squad.SQCompassMK2.RemoveCompassMarker
// 0x0001 (0x0001 - 0x0000)
struct SQCompassMK2_RemoveCompassMarker final
{
public:
	uint8                                         ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCompassMK2_RemoveCompassMarker) == 0x000001, "Wrong alignment on SQCompassMK2_RemoveCompassMarker");
static_assert(sizeof(SQCompassMK2_RemoveCompassMarker) == 0x000001, "Wrong size on SQCompassMK2_RemoveCompassMarker");
static_assert(offsetof(SQCompassMK2_RemoveCompassMarker, ID) == 0x000000, "Member 'SQCompassMK2_RemoveCompassMarker::ID' has a wrong offset!");

// Function Squad.SQCompassMK2.RemoveMarker
// 0x0008 (0x0008 - 0x0000)
struct SQCompassMK2_RemoveMarker final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCompassMK2_RemoveMarker) == 0x000008, "Wrong alignment on SQCompassMK2_RemoveMarker");
static_assert(sizeof(SQCompassMK2_RemoveMarker) == 0x000008, "Wrong size on SQCompassMK2_RemoveMarker");
static_assert(offsetof(SQCompassMK2_RemoveMarker, DestroyedActor) == 0x000000, "Member 'SQCompassMK2_RemoveMarker::DestroyedActor' has a wrong offset!");

// Function Squad.SQCompassMK2.SquadChangedHandler
// 0x0018 (0x0018 - 0x0000)
struct SQCompassMK2_SquadChangedHandler final
{
public:
	class ASQSquadState*                          NewSquad;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQSquadState*                          OldSquad;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerState*                         Player;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCompassMK2_SquadChangedHandler) == 0x000008, "Wrong alignment on SQCompassMK2_SquadChangedHandler");
static_assert(sizeof(SQCompassMK2_SquadChangedHandler) == 0x000018, "Wrong size on SQCompassMK2_SquadChangedHandler");
static_assert(offsetof(SQCompassMK2_SquadChangedHandler, NewSquad) == 0x000000, "Member 'SQCompassMK2_SquadChangedHandler::NewSquad' has a wrong offset!");
static_assert(offsetof(SQCompassMK2_SquadChangedHandler, OldSquad) == 0x000008, "Member 'SQCompassMK2_SquadChangedHandler::OldSquad' has a wrong offset!");
static_assert(offsetof(SQCompassMK2_SquadChangedHandler, Player) == 0x000010, "Member 'SQCompassMK2_SquadChangedHandler::Player' has a wrong offset!");

// Function Squad.SQCompassMK2.UpdatePlayerWidgetTransform
// 0x0020 (0x0020 - 0x0000)
struct SQCompassMK2_UpdatePlayerWidgetTransform final
{
public:
	bool                                          bShowIcon;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1009[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQSoldier*                             SoldierRef;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQCompassPlayer*                       WidgetRef;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_100A[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQCompassMK2_UpdatePlayerWidgetTransform) == 0x000008, "Wrong alignment on SQCompassMK2_UpdatePlayerWidgetTransform");
static_assert(sizeof(SQCompassMK2_UpdatePlayerWidgetTransform) == 0x000020, "Wrong size on SQCompassMK2_UpdatePlayerWidgetTransform");
static_assert(offsetof(SQCompassMK2_UpdatePlayerWidgetTransform, bShowIcon) == 0x000000, "Member 'SQCompassMK2_UpdatePlayerWidgetTransform::bShowIcon' has a wrong offset!");
static_assert(offsetof(SQCompassMK2_UpdatePlayerWidgetTransform, SoldierRef) == 0x000008, "Member 'SQCompassMK2_UpdatePlayerWidgetTransform::SoldierRef' has a wrong offset!");
static_assert(offsetof(SQCompassMK2_UpdatePlayerWidgetTransform, WidgetRef) == 0x000010, "Member 'SQCompassMK2_UpdatePlayerWidgetTransform::WidgetRef' has a wrong offset!");
static_assert(offsetof(SQCompassMK2_UpdatePlayerWidgetTransform, ReturnValue) == 0x000018, "Member 'SQCompassMK2_UpdatePlayerWidgetTransform::ReturnValue' has a wrong offset!");

// Function Squad.SQGameCommandComponent.HandleVoteResult_Vote
// 0x0020 (0x0020 - 0x0000)
struct SQGameCommandComponent_HandleVoteResult_Vote final
{
public:
	class USQVoteSession*                         VoteSession;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQChoice                              Winner;                                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameCommandComponent_HandleVoteResult_Vote) == 0x000008, "Wrong alignment on SQGameCommandComponent_HandleVoteResult_Vote");
static_assert(sizeof(SQGameCommandComponent_HandleVoteResult_Vote) == 0x000020, "Wrong size on SQGameCommandComponent_HandleVoteResult_Vote");
static_assert(offsetof(SQGameCommandComponent_HandleVoteResult_Vote, VoteSession) == 0x000000, "Member 'SQGameCommandComponent_HandleVoteResult_Vote::VoteSession' has a wrong offset!");
static_assert(offsetof(SQGameCommandComponent_HandleVoteResult_Vote, Winner) == 0x000008, "Member 'SQGameCommandComponent_HandleVoteResult_Vote::Winner' has a wrong offset!");

// Function Squad.SQCompassPlayer.UpdateState
// 0x0010 (0x0010 - 0x0000)
struct SQCompassPlayer_UpdateState final
{
public:
	float                                         InScale;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowIcon;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_100C[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HealthStateIndex;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMedic;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSL;                                             // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOwnderMedic;                                    // 0x000E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_100D[0x1];                                     // 0x000F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQCompassPlayer_UpdateState) == 0x000004, "Wrong alignment on SQCompassPlayer_UpdateState");
static_assert(sizeof(SQCompassPlayer_UpdateState) == 0x000010, "Wrong size on SQCompassPlayer_UpdateState");
static_assert(offsetof(SQCompassPlayer_UpdateState, InScale) == 0x000000, "Member 'SQCompassPlayer_UpdateState::InScale' has a wrong offset!");
static_assert(offsetof(SQCompassPlayer_UpdateState, bShowIcon) == 0x000004, "Member 'SQCompassPlayer_UpdateState::bShowIcon' has a wrong offset!");
static_assert(offsetof(SQCompassPlayer_UpdateState, HealthStateIndex) == 0x000008, "Member 'SQCompassPlayer_UpdateState::HealthStateIndex' has a wrong offset!");
static_assert(offsetof(SQCompassPlayer_UpdateState, bIsMedic) == 0x00000C, "Member 'SQCompassPlayer_UpdateState::bIsMedic' has a wrong offset!");
static_assert(offsetof(SQCompassPlayer_UpdateState, bIsSL) == 0x00000D, "Member 'SQCompassPlayer_UpdateState::bIsSL' has a wrong offset!");
static_assert(offsetof(SQCompassPlayer_UpdateState, bIsOwnderMedic) == 0x00000E, "Member 'SQCompassPlayer_UpdateState::bIsOwnderMedic' has a wrong offset!");

// Function Squad.SQGameSession.GetLastLoginError
// 0x0010 (0x0010 - 0x0000)
struct SQGameSession_GetLastLoginError final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSession_GetLastLoginError) == 0x000008, "Wrong alignment on SQGameSession_GetLastLoginError");
static_assert(sizeof(SQGameSession_GetLastLoginError) == 0x000010, "Wrong size on SQGameSession_GetLastLoginError");
static_assert(offsetof(SQGameSession_GetLastLoginError, ReturnValue) == 0x000000, "Member 'SQGameSession_GetLastLoginError::ReturnValue' has a wrong offset!");

// Function Squad.SQGameSession.IsLoggedIn
// 0x0001 (0x0001 - 0x0000)
struct SQGameSession_IsLoggedIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSession_IsLoggedIn) == 0x000001, "Wrong alignment on SQGameSession_IsLoggedIn");
static_assert(sizeof(SQGameSession_IsLoggedIn) == 0x000001, "Wrong size on SQGameSession_IsLoggedIn");
static_assert(offsetof(SQGameSession_IsLoggedIn, ReturnValue) == 0x000000, "Member 'SQGameSession_IsLoggedIn::ReturnValue' has a wrong offset!");

// Function Squad.SQGameSession.IsLoginBusy
// 0x0001 (0x0001 - 0x0000)
struct SQGameSession_IsLoginBusy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSession_IsLoginBusy) == 0x000001, "Wrong alignment on SQGameSession_IsLoginBusy");
static_assert(sizeof(SQGameSession_IsLoginBusy) == 0x000001, "Wrong size on SQGameSession_IsLoginBusy");
static_assert(offsetof(SQGameSession_IsLoginBusy, ReturnValue) == 0x000000, "Member 'SQGameSession_IsLoginBusy::ReturnValue' has a wrong offset!");

// Function Squad.SQGameSession.Login
// 0x0028 (0x0028 - 0x0000)
struct SQGameSession_Login final
{
public:
	class FString                                 LoginName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InPassword;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1017[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameSession_Login) == 0x000008, "Wrong alignment on SQGameSession_Login");
static_assert(sizeof(SQGameSession_Login) == 0x000028, "Wrong size on SQGameSession_Login");
static_assert(offsetof(SQGameSession_Login, LoginName) == 0x000000, "Member 'SQGameSession_Login::LoginName' has a wrong offset!");
static_assert(offsetof(SQGameSession_Login, InPassword) == 0x000010, "Member 'SQGameSession_Login::InPassword' has a wrong offset!");
static_assert(offsetof(SQGameSession_Login, ReturnValue) == 0x000020, "Member 'SQGameSession_Login::ReturnValue' has a wrong offset!");

// Function Squad.SQGameSession.Logout
// 0x0001 (0x0001 - 0x0000)
struct SQGameSession_Logout final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSession_Logout) == 0x000001, "Wrong alignment on SQGameSession_Logout");
static_assert(sizeof(SQGameSession_Logout) == 0x000001, "Wrong size on SQGameSession_Logout");
static_assert(offsetof(SQGameSession_Logout, ReturnValue) == 0x000000, "Member 'SQGameSession_Logout::ReturnValue' has a wrong offset!");

// Function Squad.SQGameSession.OnServerLicenseValidated
// 0x0001 (0x0001 - 0x0000)
struct SQGameSession_OnServerLicenseValidated final
{
public:
	bool                                          bIsValidLicense;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSession_OnServerLicenseValidated) == 0x000001, "Wrong alignment on SQGameSession_OnServerLicenseValidated");
static_assert(sizeof(SQGameSession_OnServerLicenseValidated) == 0x000001, "Wrong size on SQGameSession_OnServerLicenseValidated");
static_assert(offsetof(SQGameSession_OnServerLicenseValidated, bIsValidLicense) == 0x000000, "Member 'SQGameSession_OnServerLicenseValidated::bIsValidLicense' has a wrong offset!");

// Function Squad.SQGameSession.SetMaxNumPlayers
// 0x0008 (0x0008 - 0x0000)
struct SQGameSession_SetMaxNumPlayers final
{
public:
	int32                                         NumPlayers;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreRestrictions;                               // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1018[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameSession_SetMaxNumPlayers) == 0x000004, "Wrong alignment on SQGameSession_SetMaxNumPlayers");
static_assert(sizeof(SQGameSession_SetMaxNumPlayers) == 0x000008, "Wrong size on SQGameSession_SetMaxNumPlayers");
static_assert(offsetof(SQGameSession_SetMaxNumPlayers, NumPlayers) == 0x000000, "Member 'SQGameSession_SetMaxNumPlayers::NumPlayers' has a wrong offset!");
static_assert(offsetof(SQGameSession_SetMaxNumPlayers, bIgnoreRestrictions) == 0x000004, "Member 'SQGameSession_SetMaxNumPlayers::bIgnoreRestrictions' has a wrong offset!");

// Function Squad.SQGameSession.SetNumReservedSlots
// 0x0004 (0x0004 - 0x0000)
struct SQGameSession_SetNumReservedSlots final
{
public:
	int32                                         NumReserved;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSession_SetNumReservedSlots) == 0x000004, "Wrong alignment on SQGameSession_SetNumReservedSlots");
static_assert(sizeof(SQGameSession_SetNumReservedSlots) == 0x000004, "Wrong size on SQGameSession_SetNumReservedSlots");
static_assert(offsetof(SQGameSession_SetNumReservedSlots, NumReserved) == 0x000000, "Member 'SQGameSession_SetNumReservedSlots::NumReserved' has a wrong offset!");

// Function Squad.SQGameSession.SetPublicQueueLimit
// 0x0008 (0x0008 - 0x0000)
struct SQGameSession_SetPublicQueueLimit final
{
public:
	int64                                         PublicQueueLimit;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSession_SetPublicQueueLimit) == 0x000008, "Wrong alignment on SQGameSession_SetPublicQueueLimit");
static_assert(sizeof(SQGameSession_SetPublicQueueLimit) == 0x000008, "Wrong size on SQGameSession_SetPublicQueueLimit");
static_assert(offsetof(SQGameSession_SetPublicQueueLimit, PublicQueueLimit) == 0x000000, "Member 'SQGameSession_SetPublicQueueLimit::PublicQueueLimit' has a wrong offset!");

// Function Squad.SQGameSession.SetServerPassword
// 0x0010 (0x0010 - 0x0000)
struct SQGameSession_SetServerPassword final
{
public:
	class FString                                 ServerPassword;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSession_SetServerPassword) == 0x000008, "Wrong alignment on SQGameSession_SetServerPassword");
static_assert(sizeof(SQGameSession_SetServerPassword) == 0x000010, "Wrong size on SQGameSession_SetServerPassword");
static_assert(offsetof(SQGameSession_SetServerPassword, ServerPassword) == 0x000000, "Member 'SQGameSession_SetServerPassword::ServerPassword' has a wrong offset!");

// Function Squad.SQGameSession.GetSquadConfig
// 0x0008 (0x0008 - 0x0000)
struct SQGameSession_GetSquadConfig final
{
public:
	class USQConfig*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSession_GetSquadConfig) == 0x000008, "Wrong alignment on SQGameSession_GetSquadConfig");
static_assert(sizeof(SQGameSession_GetSquadConfig) == 0x000008, "Wrong size on SQGameSession_GetSquadConfig");
static_assert(offsetof(SQGameSession_GetSquadConfig, ReturnValue) == 0x000000, "Member 'SQGameSession_GetSquadConfig::ReturnValue' has a wrong offset!");

// Function Squad.SQCoreStateComponent.OnConnectionCreate
// 0x0008 (0x0008 - 0x0000)
struct SQCoreStateComponent_OnConnectionCreate final
{
public:
	class USQCoreStateConnection*                 Connection;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCoreStateComponent_OnConnectionCreate) == 0x000008, "Wrong alignment on SQCoreStateComponent_OnConnectionCreate");
static_assert(sizeof(SQCoreStateComponent_OnConnectionCreate) == 0x000008, "Wrong size on SQCoreStateComponent_OnConnectionCreate");
static_assert(offsetof(SQCoreStateComponent_OnConnectionCreate, Connection) == 0x000000, "Member 'SQCoreStateComponent_OnConnectionCreate::Connection' has a wrong offset!");

// Function Squad.SQCoreStateComponent.OnRep_DataObject
// 0x0008 (0x0008 - 0x0000)
struct SQCoreStateComponent_OnRep_DataObject final
{
public:
	class USQCoreStateData*                       PrevDataObject;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCoreStateComponent_OnRep_DataObject) == 0x000008, "Wrong alignment on SQCoreStateComponent_OnRep_DataObject");
static_assert(sizeof(SQCoreStateComponent_OnRep_DataObject) == 0x000008, "Wrong size on SQCoreStateComponent_OnRep_DataObject");
static_assert(offsetof(SQCoreStateComponent_OnRep_DataObject, PrevDataObject) == 0x000000, "Member 'SQCoreStateComponent_OnRep_DataObject::PrevDataObject' has a wrong offset!");

// Function Squad.SQCoreStateComponent.ServerSetIsVisible
// 0x0001 (0x0001 - 0x0000)
struct SQCoreStateComponent_ServerSetIsVisible final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCoreStateComponent_ServerSetIsVisible) == 0x000001, "Wrong alignment on SQCoreStateComponent_ServerSetIsVisible");
static_assert(sizeof(SQCoreStateComponent_ServerSetIsVisible) == 0x000001, "Wrong size on SQCoreStateComponent_ServerSetIsVisible");
static_assert(offsetof(SQCoreStateComponent_ServerSetIsVisible, bValue) == 0x000000, "Member 'SQCoreStateComponent_ServerSetIsVisible::bValue' has a wrong offset!");

// Function Squad.SQCoreStateComponent.GetId
// 0x0002 (0x0002 - 0x0000)
struct SQCoreStateComponent_GetId final
{
public:
	struct FSQCoreStateId                         ReturnValue;                                       // 0x0000(0x0002)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCoreStateComponent_GetId) == 0x000002, "Wrong alignment on SQCoreStateComponent_GetId");
static_assert(sizeof(SQCoreStateComponent_GetId) == 0x000002, "Wrong size on SQCoreStateComponent_GetId");
static_assert(offsetof(SQCoreStateComponent_GetId, ReturnValue) == 0x000000, "Member 'SQCoreStateComponent_GetId::ReturnValue' has a wrong offset!");

// Function Squad.SQCoreStateConnection.OnComponentObtainedId
// 0x0008 (0x0008 - 0x0000)
struct SQCoreStateConnection_OnComponentObtainedId final
{
public:
	class USQCoreStateComponent*                  Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCoreStateConnection_OnComponentObtainedId) == 0x000008, "Wrong alignment on SQCoreStateConnection_OnComponentObtainedId");
static_assert(sizeof(SQCoreStateConnection_OnComponentObtainedId) == 0x000008, "Wrong size on SQCoreStateConnection_OnComponentObtainedId");
static_assert(offsetof(SQCoreStateConnection_OnComponentObtainedId, Component) == 0x000000, "Member 'SQCoreStateConnection_OnComponentObtainedId::Component' has a wrong offset!");

// Function Squad.SQGraphVisualizerComponent.DrawLink
// 0x0018 (0x0018 - 0x0000)
struct SQGraphVisualizerComponent_DrawLink final
{
public:
	const class USQGraphNodeComponent*            NodeA;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USQGraphNodeComponent*            NodeB;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 LinkColor;                                         // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101D[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGraphVisualizerComponent_DrawLink) == 0x000008, "Wrong alignment on SQGraphVisualizerComponent_DrawLink");
static_assert(sizeof(SQGraphVisualizerComponent_DrawLink) == 0x000018, "Wrong size on SQGraphVisualizerComponent_DrawLink");
static_assert(offsetof(SQGraphVisualizerComponent_DrawLink, NodeA) == 0x000000, "Member 'SQGraphVisualizerComponent_DrawLink::NodeA' has a wrong offset!");
static_assert(offsetof(SQGraphVisualizerComponent_DrawLink, NodeB) == 0x000008, "Member 'SQGraphVisualizerComponent_DrawLink::NodeB' has a wrong offset!");
static_assert(offsetof(SQGraphVisualizerComponent_DrawLink, LinkColor) == 0x000010, "Member 'SQGraphVisualizerComponent_DrawLink::LinkColor' has a wrong offset!");

// Function Squad.SQGraphVisualizerComponent.DrawNode
// 0x0010 (0x0010 - 0x0000)
struct SQGraphVisualizerComponent_DrawNode final
{
public:
	class USQGraphNodeComponent*                  Node;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101E[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGraphVisualizerComponent_DrawNode) == 0x000008, "Wrong alignment on SQGraphVisualizerComponent_DrawNode");
static_assert(sizeof(SQGraphVisualizerComponent_DrawNode) == 0x000010, "Wrong size on SQGraphVisualizerComponent_DrawNode");
static_assert(offsetof(SQGraphVisualizerComponent_DrawNode, Node) == 0x000000, "Member 'SQGraphVisualizerComponent_DrawNode::Node' has a wrong offset!");
static_assert(offsetof(SQGraphVisualizerComponent_DrawNode, Color) == 0x000008, "Member 'SQGraphVisualizerComponent_DrawNode::Color' has a wrong offset!");

// Function Squad.SQGameUserSettings.EnumToString
// 0x0018 (0x0018 - 0x0000)
struct SQGameUserSettings_EnumToString final
{
public:
	EUpscaleMode                                  InUpscaleMode;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1038[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_EnumToString) == 0x000008, "Wrong alignment on SQGameUserSettings_EnumToString");
static_assert(sizeof(SQGameUserSettings_EnumToString) == 0x000018, "Wrong size on SQGameUserSettings_EnumToString");
static_assert(offsetof(SQGameUserSettings_EnumToString, InUpscaleMode) == 0x000000, "Member 'SQGameUserSettings_EnumToString::InUpscaleMode' has a wrong offset!");
static_assert(offsetof(SQGameUserSettings_EnumToString, ReturnValue) == 0x000008, "Member 'SQGameUserSettings_EnumToString::ReturnValue' has a wrong offset!");

// Function Squad.SQGameUserSettings.GetFloatFromConfig
// 0x0030 (0x0030 - 0x0000)
struct SQGameUserSettings_GetFloatFromConfig final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1039[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CVar;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_103A[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameUserSettings_GetFloatFromConfig) == 0x000008, "Wrong alignment on SQGameUserSettings_GetFloatFromConfig");
static_assert(sizeof(SQGameUserSettings_GetFloatFromConfig) == 0x000030, "Wrong size on SQGameUserSettings_GetFloatFromConfig");
static_assert(offsetof(SQGameUserSettings_GetFloatFromConfig, SectionName) == 0x000000, "Member 'SQGameUserSettings_GetFloatFromConfig::SectionName' has a wrong offset!");
static_assert(offsetof(SQGameUserSettings_GetFloatFromConfig, Level) == 0x000010, "Member 'SQGameUserSettings_GetFloatFromConfig::Level' has a wrong offset!");
static_assert(offsetof(SQGameUserSettings_GetFloatFromConfig, CVar) == 0x000018, "Member 'SQGameUserSettings_GetFloatFromConfig::CVar' has a wrong offset!");
static_assert(offsetof(SQGameUserSettings_GetFloatFromConfig, ReturnValue) == 0x000028, "Member 'SQGameUserSettings_GetFloatFromConfig::ReturnValue' has a wrong offset!");

// Function Squad.SQGameUserSettings.GetInt32FromConfig
// 0x0030 (0x0030 - 0x0000)
struct SQGameUserSettings_GetInt32FromConfig final
{
public:
	class FString                                 SectionName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_103B[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CVar;                                              // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_103C[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameUserSettings_GetInt32FromConfig) == 0x000008, "Wrong alignment on SQGameUserSettings_GetInt32FromConfig");
static_assert(sizeof(SQGameUserSettings_GetInt32FromConfig) == 0x000030, "Wrong size on SQGameUserSettings_GetInt32FromConfig");
static_assert(offsetof(SQGameUserSettings_GetInt32FromConfig, SectionName) == 0x000000, "Member 'SQGameUserSettings_GetInt32FromConfig::SectionName' has a wrong offset!");
static_assert(offsetof(SQGameUserSettings_GetInt32FromConfig, Level) == 0x000010, "Member 'SQGameUserSettings_GetInt32FromConfig::Level' has a wrong offset!");
static_assert(offsetof(SQGameUserSettings_GetInt32FromConfig, CVar) == 0x000018, "Member 'SQGameUserSettings_GetInt32FromConfig::CVar' has a wrong offset!");
static_assert(offsetof(SQGameUserSettings_GetInt32FromConfig, ReturnValue) == 0x000028, "Member 'SQGameUserSettings_GetInt32FromConfig::ReturnValue' has a wrong offset!");

// Function Squad.SQGameUserSettings.ReadFloatSetting
// 0x0048 (0x0048 - 0x0000)
struct SQGameUserSettings_ReadFloatSetting final
{
public:
	struct FSQFloatCVarSetting                    InSetting;                                         // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_103D[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameUserSettings_ReadFloatSetting) == 0x000008, "Wrong alignment on SQGameUserSettings_ReadFloatSetting");
static_assert(sizeof(SQGameUserSettings_ReadFloatSetting) == 0x000048, "Wrong size on SQGameUserSettings_ReadFloatSetting");
static_assert(offsetof(SQGameUserSettings_ReadFloatSetting, InSetting) == 0x000000, "Member 'SQGameUserSettings_ReadFloatSetting::InSetting' has a wrong offset!");
static_assert(offsetof(SQGameUserSettings_ReadFloatSetting, ReturnValue) == 0x000040, "Member 'SQGameUserSettings_ReadFloatSetting::ReturnValue' has a wrong offset!");

// Function Squad.SQGameUserSettings.ReadIntSetting
// 0x0048 (0x0048 - 0x0000)
struct SQGameUserSettings_ReadIntSetting final
{
public:
	struct FSQInt32CVarSetting                    InSetting;                                         // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_103E[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameUserSettings_ReadIntSetting) == 0x000008, "Wrong alignment on SQGameUserSettings_ReadIntSetting");
static_assert(sizeof(SQGameUserSettings_ReadIntSetting) == 0x000048, "Wrong size on SQGameUserSettings_ReadIntSetting");
static_assert(offsetof(SQGameUserSettings_ReadIntSetting, InSetting) == 0x000000, "Member 'SQGameUserSettings_ReadIntSetting::InSetting' has a wrong offset!");
static_assert(offsetof(SQGameUserSettings_ReadIntSetting, ReturnValue) == 0x000040, "Member 'SQGameUserSettings_ReadIntSetting::ReturnValue' has a wrong offset!");

// Function Squad.SQGameUserSettings.BenchmarkGraphicsSettings
// 0x0001 (0x0001 - 0x0000)
struct SQGameUserSettings_BenchmarkGraphicsSettings final
{
public:
	bool                                          bApplyPostBenchmark;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_BenchmarkGraphicsSettings) == 0x000001, "Wrong alignment on SQGameUserSettings_BenchmarkGraphicsSettings");
static_assert(sizeof(SQGameUserSettings_BenchmarkGraphicsSettings) == 0x000001, "Wrong size on SQGameUserSettings_BenchmarkGraphicsSettings");
static_assert(offsetof(SQGameUserSettings_BenchmarkGraphicsSettings, bApplyPostBenchmark) == 0x000000, "Member 'SQGameUserSettings_BenchmarkGraphicsSettings::bApplyPostBenchmark' has a wrong offset!");

// Function Squad.SQGameUserSettings.BlueprintApplySettings
// 0x0001 (0x0001 - 0x0000)
struct SQGameUserSettings_BlueprintApplySettings final
{
public:
	bool                                          bCheckForCommandLineOverrides;                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_BlueprintApplySettings) == 0x000001, "Wrong alignment on SQGameUserSettings_BlueprintApplySettings");
static_assert(sizeof(SQGameUserSettings_BlueprintApplySettings) == 0x000001, "Wrong size on SQGameUserSettings_BlueprintApplySettings");
static_assert(offsetof(SQGameUserSettings_BlueprintApplySettings, bCheckForCommandLineOverrides) == 0x000000, "Member 'SQGameUserSettings_BlueprintApplySettings::bCheckForCommandLineOverrides' has a wrong offset!");

// Function Squad.SQGameUserSettings.BlueprintGetBasicGraphicsSettings
// 0x0010 (0x0010 - 0x0000)
struct SQGameUserSettings_BlueprintGetBasicGraphicsSettings final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_BlueprintGetBasicGraphicsSettings) == 0x000008, "Wrong alignment on SQGameUserSettings_BlueprintGetBasicGraphicsSettings");
static_assert(sizeof(SQGameUserSettings_BlueprintGetBasicGraphicsSettings) == 0x000010, "Wrong size on SQGameUserSettings_BlueprintGetBasicGraphicsSettings");
static_assert(offsetof(SQGameUserSettings_BlueprintGetBasicGraphicsSettings, ReturnValue) == 0x000000, "Member 'SQGameUserSettings_BlueprintGetBasicGraphicsSettings::ReturnValue' has a wrong offset!");

// Function Squad.SQGameUserSettings.BlueprintGetFullscreenMode
// 0x0004 (0x0004 - 0x0000)
struct SQGameUserSettings_BlueprintGetFullscreenMode final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_BlueprintGetFullscreenMode) == 0x000004, "Wrong alignment on SQGameUserSettings_BlueprintGetFullscreenMode");
static_assert(sizeof(SQGameUserSettings_BlueprintGetFullscreenMode) == 0x000004, "Wrong size on SQGameUserSettings_BlueprintGetFullscreenMode");
static_assert(offsetof(SQGameUserSettings_BlueprintGetFullscreenMode, ReturnValue) == 0x000000, "Member 'SQGameUserSettings_BlueprintGetFullscreenMode::ReturnValue' has a wrong offset!");

// Function Squad.SQGameUserSettings.BlueprintGetScreenResolution
// 0x0008 (0x0008 - 0x0000)
struct SQGameUserSettings_BlueprintGetScreenResolution final
{
public:
	struct FIntPoint                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_BlueprintGetScreenResolution) == 0x000004, "Wrong alignment on SQGameUserSettings_BlueprintGetScreenResolution");
static_assert(sizeof(SQGameUserSettings_BlueprintGetScreenResolution) == 0x000008, "Wrong size on SQGameUserSettings_BlueprintGetScreenResolution");
static_assert(offsetof(SQGameUserSettings_BlueprintGetScreenResolution, ReturnValue) == 0x000000, "Member 'SQGameUserSettings_BlueprintGetScreenResolution::ReturnValue' has a wrong offset!");

// Function Squad.SQGameUserSettings.BlueprintGetVSync
// 0x0001 (0x0001 - 0x0000)
struct SQGameUserSettings_BlueprintGetVSync final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_BlueprintGetVSync) == 0x000001, "Wrong alignment on SQGameUserSettings_BlueprintGetVSync");
static_assert(sizeof(SQGameUserSettings_BlueprintGetVSync) == 0x000001, "Wrong size on SQGameUserSettings_BlueprintGetVSync");
static_assert(offsetof(SQGameUserSettings_BlueprintGetVSync, ReturnValue) == 0x000000, "Member 'SQGameUserSettings_BlueprintGetVSync::ReturnValue' has a wrong offset!");

// Function Squad.SQGameUserSettings.BlueprintSetFullscreenMode
// 0x0004 (0x0004 - 0x0000)
struct SQGameUserSettings_BlueprintSetFullscreenMode final
{
public:
	int32                                         InFullscreenMode;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_BlueprintSetFullscreenMode) == 0x000004, "Wrong alignment on SQGameUserSettings_BlueprintSetFullscreenMode");
static_assert(sizeof(SQGameUserSettings_BlueprintSetFullscreenMode) == 0x000004, "Wrong size on SQGameUserSettings_BlueprintSetFullscreenMode");
static_assert(offsetof(SQGameUserSettings_BlueprintSetFullscreenMode, InFullscreenMode) == 0x000000, "Member 'SQGameUserSettings_BlueprintSetFullscreenMode::InFullscreenMode' has a wrong offset!");

// Function Squad.SQGameUserSettings.BlueprintSetPoolSize
// 0x0004 (0x0004 - 0x0000)
struct SQGameUserSettings_BlueprintSetPoolSize final
{
public:
	int32                                         InTextureQuality;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_BlueprintSetPoolSize) == 0x000004, "Wrong alignment on SQGameUserSettings_BlueprintSetPoolSize");
static_assert(sizeof(SQGameUserSettings_BlueprintSetPoolSize) == 0x000004, "Wrong size on SQGameUserSettings_BlueprintSetPoolSize");
static_assert(offsetof(SQGameUserSettings_BlueprintSetPoolSize, InTextureQuality) == 0x000000, "Member 'SQGameUserSettings_BlueprintSetPoolSize::InTextureQuality' has a wrong offset!");

// Function Squad.SQGameUserSettings.BlueprintSetScreenResolution
// 0x0008 (0x0008 - 0x0000)
struct SQGameUserSettings_BlueprintSetScreenResolution final
{
public:
	struct FIntPoint                              Resolution;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_BlueprintSetScreenResolution) == 0x000004, "Wrong alignment on SQGameUserSettings_BlueprintSetScreenResolution");
static_assert(sizeof(SQGameUserSettings_BlueprintSetScreenResolution) == 0x000008, "Wrong size on SQGameUserSettings_BlueprintSetScreenResolution");
static_assert(offsetof(SQGameUserSettings_BlueprintSetScreenResolution, Resolution) == 0x000000, "Member 'SQGameUserSettings_BlueprintSetScreenResolution::Resolution' has a wrong offset!");

// Function Squad.SQGameUserSettings.BlueprintSetVSync
// 0x0001 (0x0001 - 0x0000)
struct SQGameUserSettings_BlueprintSetVSync final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_BlueprintSetVSync) == 0x000001, "Wrong alignment on SQGameUserSettings_BlueprintSetVSync");
static_assert(sizeof(SQGameUserSettings_BlueprintSetVSync) == 0x000001, "Wrong size on SQGameUserSettings_BlueprintSetVSync");
static_assert(offsetof(SQGameUserSettings_BlueprintSetVSync, bEnable) == 0x000000, "Member 'SQGameUserSettings_BlueprintSetVSync::bEnable' has a wrong offset!");

// Function Squad.SQGameUserSettings.ChangeFloatSetting
// 0x0048 (0x0048 - 0x0000)
struct SQGameUserSettings_ChangeFloatSetting final
{
public:
	struct FSQFloatCVarSetting                    InSetting;                                         // 0x0000(0x0040)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_103F[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameUserSettings_ChangeFloatSetting) == 0x000008, "Wrong alignment on SQGameUserSettings_ChangeFloatSetting");
static_assert(sizeof(SQGameUserSettings_ChangeFloatSetting) == 0x000048, "Wrong size on SQGameUserSettings_ChangeFloatSetting");
static_assert(offsetof(SQGameUserSettings_ChangeFloatSetting, InSetting) == 0x000000, "Member 'SQGameUserSettings_ChangeFloatSetting::InSetting' has a wrong offset!");
static_assert(offsetof(SQGameUserSettings_ChangeFloatSetting, Value) == 0x000040, "Member 'SQGameUserSettings_ChangeFloatSetting::Value' has a wrong offset!");

// Function Squad.SQGameUserSettings.ChangeIntSetting
// 0x0048 (0x0048 - 0x0000)
struct SQGameUserSettings_ChangeIntSetting final
{
public:
	struct FSQInt32CVarSetting                    InSetting;                                         // 0x0000(0x0040)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1040[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameUserSettings_ChangeIntSetting) == 0x000008, "Wrong alignment on SQGameUserSettings_ChangeIntSetting");
static_assert(sizeof(SQGameUserSettings_ChangeIntSetting) == 0x000048, "Wrong size on SQGameUserSettings_ChangeIntSetting");
static_assert(offsetof(SQGameUserSettings_ChangeIntSetting, InSetting) == 0x000000, "Member 'SQGameUserSettings_ChangeIntSetting::InSetting' has a wrong offset!");
static_assert(offsetof(SQGameUserSettings_ChangeIntSetting, Value) == 0x000040, "Member 'SQGameUserSettings_ChangeIntSetting::Value' has a wrong offset!");

// Function Squad.SQGameUserSettings.ChangeSetting
// 0x0050 (0x0050 - 0x0000)
struct SQGameUserSettings_ChangeSetting final
{
public:
	struct FSQCVarSetting                         InSetting;                                         // 0x0000(0x0040)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_ChangeSetting) == 0x000008, "Wrong alignment on SQGameUserSettings_ChangeSetting");
static_assert(sizeof(SQGameUserSettings_ChangeSetting) == 0x000050, "Wrong size on SQGameUserSettings_ChangeSetting");
static_assert(offsetof(SQGameUserSettings_ChangeSetting, InSetting) == 0x000000, "Member 'SQGameUserSettings_ChangeSetting::InSetting' has a wrong offset!");
static_assert(offsetof(SQGameUserSettings_ChangeSetting, Value) == 0x000040, "Member 'SQGameUserSettings_ChangeSetting::Value' has a wrong offset!");

// Function Squad.SQGameUserSettings.ChangeSettingOfName
// 0x0018 (0x0018 - 0x0000)
struct SQGameUserSettings_ChangeSettingOfName final
{
public:
	class FName                                   CVarSettingName;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_ChangeSettingOfName) == 0x000008, "Wrong alignment on SQGameUserSettings_ChangeSettingOfName");
static_assert(sizeof(SQGameUserSettings_ChangeSettingOfName) == 0x000018, "Wrong size on SQGameUserSettings_ChangeSettingOfName");
static_assert(offsetof(SQGameUserSettings_ChangeSettingOfName, CVarSettingName) == 0x000000, "Member 'SQGameUserSettings_ChangeSettingOfName::CVarSettingName' has a wrong offset!");
static_assert(offsetof(SQGameUserSettings_ChangeSettingOfName, Value) == 0x000008, "Member 'SQGameUserSettings_ChangeSettingOfName::Value' has a wrong offset!");

// Function Squad.SQGameUserSettings.DeleteKeybindsBackup
// 0x0018 (0x0018 - 0x0000)
struct SQGameUserSettings_DeleteKeybindsBackup final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1041[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameUserSettings_DeleteKeybindsBackup) == 0x000008, "Wrong alignment on SQGameUserSettings_DeleteKeybindsBackup");
static_assert(sizeof(SQGameUserSettings_DeleteKeybindsBackup) == 0x000018, "Wrong size on SQGameUserSettings_DeleteKeybindsBackup");
static_assert(offsetof(SQGameUserSettings_DeleteKeybindsBackup, Filename) == 0x000000, "Member 'SQGameUserSettings_DeleteKeybindsBackup::Filename' has a wrong offset!");
static_assert(offsetof(SQGameUserSettings_DeleteKeybindsBackup, ReturnValue) == 0x000010, "Member 'SQGameUserSettings_DeleteKeybindsBackup::ReturnValue' has a wrong offset!");

// Function Squad.SQGameUserSettings.GetActiveAudioInputDevice
// 0x0010 (0x0010 - 0x0000)
struct SQGameUserSettings_GetActiveAudioInputDevice final
{
public:
	class FString                                 OutCurrentDevice;                                  // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_GetActiveAudioInputDevice) == 0x000008, "Wrong alignment on SQGameUserSettings_GetActiveAudioInputDevice");
static_assert(sizeof(SQGameUserSettings_GetActiveAudioInputDevice) == 0x000010, "Wrong size on SQGameUserSettings_GetActiveAudioInputDevice");
static_assert(offsetof(SQGameUserSettings_GetActiveAudioInputDevice, OutCurrentDevice) == 0x000000, "Member 'SQGameUserSettings_GetActiveAudioInputDevice::OutCurrentDevice' has a wrong offset!");

// Function Squad.SQGameUserSettings.GetAvailableAudioOutputDevice
// 0x0020 (0x0020 - 0x0000)
struct SQGameUserSettings_GetAvailableAudioOutputDevice final
{
public:
	TArray<class FString>                         OutAvailableDevice;                                // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 OutCurrentDevice;                                  // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_GetAvailableAudioOutputDevice) == 0x000008, "Wrong alignment on SQGameUserSettings_GetAvailableAudioOutputDevice");
static_assert(sizeof(SQGameUserSettings_GetAvailableAudioOutputDevice) == 0x000020, "Wrong size on SQGameUserSettings_GetAvailableAudioOutputDevice");
static_assert(offsetof(SQGameUserSettings_GetAvailableAudioOutputDevice, OutAvailableDevice) == 0x000000, "Member 'SQGameUserSettings_GetAvailableAudioOutputDevice::OutAvailableDevice' has a wrong offset!");
static_assert(offsetof(SQGameUserSettings_GetAvailableAudioOutputDevice, OutCurrentDevice) == 0x000010, "Member 'SQGameUserSettings_GetAvailableAudioOutputDevice::OutCurrentDevice' has a wrong offset!");

// Function Squad.SQGameUserSettings.GetEmoteAtIndex
// 0x0030 (0x0030 - 0x0000)
struct SQGameUserSettings_GetEmoteAtIndex final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1042[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USQEmotesData>           ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_GetEmoteAtIndex) == 0x000008, "Wrong alignment on SQGameUserSettings_GetEmoteAtIndex");
static_assert(sizeof(SQGameUserSettings_GetEmoteAtIndex) == 0x000030, "Wrong size on SQGameUserSettings_GetEmoteAtIndex");
static_assert(offsetof(SQGameUserSettings_GetEmoteAtIndex, Param_Index) == 0x000000, "Member 'SQGameUserSettings_GetEmoteAtIndex::Param_Index' has a wrong offset!");
static_assert(offsetof(SQGameUserSettings_GetEmoteAtIndex, ReturnValue) == 0x000008, "Member 'SQGameUserSettings_GetEmoteAtIndex::ReturnValue' has a wrong offset!");

// Function Squad.SQGameUserSettings.GetJoyConfig
// 0x0014 (0x0014 - 0x0000)
struct SQGameUserSettings_GetJoyConfig final
{
public:
	ESQJoyStickControls                           Control;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1043[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQJoyStickConfig                      ReturnValue;                                       // 0x0004(0x0010)(ConstParm, Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_GetJoyConfig) == 0x000004, "Wrong alignment on SQGameUserSettings_GetJoyConfig");
static_assert(sizeof(SQGameUserSettings_GetJoyConfig) == 0x000014, "Wrong size on SQGameUserSettings_GetJoyConfig");
static_assert(offsetof(SQGameUserSettings_GetJoyConfig, Control) == 0x000000, "Member 'SQGameUserSettings_GetJoyConfig::Control' has a wrong offset!");
static_assert(offsetof(SQGameUserSettings_GetJoyConfig, ReturnValue) == 0x000004, "Member 'SQGameUserSettings_GetJoyConfig::ReturnValue' has a wrong offset!");

// Function Squad.SQGameUserSettings.GetQualityFromLastBenchmark
// 0x0004 (0x0004 - 0x0000)
struct SQGameUserSettings_GetQualityFromLastBenchmark final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_GetQualityFromLastBenchmark) == 0x000004, "Wrong alignment on SQGameUserSettings_GetQualityFromLastBenchmark");
static_assert(sizeof(SQGameUserSettings_GetQualityFromLastBenchmark) == 0x000004, "Wrong size on SQGameUserSettings_GetQualityFromLastBenchmark");
static_assert(offsetof(SQGameUserSettings_GetQualityFromLastBenchmark, ReturnValue) == 0x000000, "Member 'SQGameUserSettings_GetQualityFromLastBenchmark::ReturnValue' has a wrong offset!");

// Function Squad.SQGameUserSettings.GetTexturePoolSize
// 0x0004 (0x0004 - 0x0000)
struct SQGameUserSettings_GetTexturePoolSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_GetTexturePoolSize) == 0x000004, "Wrong alignment on SQGameUserSettings_GetTexturePoolSize");
static_assert(sizeof(SQGameUserSettings_GetTexturePoolSize) == 0x000004, "Wrong size on SQGameUserSettings_GetTexturePoolSize");
static_assert(offsetof(SQGameUserSettings_GetTexturePoolSize, ReturnValue) == 0x000000, "Member 'SQGameUserSettings_GetTexturePoolSize::ReturnValue' has a wrong offset!");

// Function Squad.SQGameUserSettings.GetTexturePoolUsage
// 0x0004 (0x0004 - 0x0000)
struct SQGameUserSettings_GetTexturePoolUsage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_GetTexturePoolUsage) == 0x000004, "Wrong alignment on SQGameUserSettings_GetTexturePoolUsage");
static_assert(sizeof(SQGameUserSettings_GetTexturePoolUsage) == 0x000004, "Wrong size on SQGameUserSettings_GetTexturePoolUsage");
static_assert(offsetof(SQGameUserSettings_GetTexturePoolUsage, ReturnValue) == 0x000000, "Member 'SQGameUserSettings_GetTexturePoolUsage::ReturnValue' has a wrong offset!");

// Function Squad.SQGameUserSettings.GetTotalVRAMCapacity
// 0x0004 (0x0004 - 0x0000)
struct SQGameUserSettings_GetTotalVRAMCapacity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_GetTotalVRAMCapacity) == 0x000004, "Wrong alignment on SQGameUserSettings_GetTotalVRAMCapacity");
static_assert(sizeof(SQGameUserSettings_GetTotalVRAMCapacity) == 0x000004, "Wrong size on SQGameUserSettings_GetTotalVRAMCapacity");
static_assert(offsetof(SQGameUserSettings_GetTotalVRAMCapacity, ReturnValue) == 0x000000, "Member 'SQGameUserSettings_GetTotalVRAMCapacity::ReturnValue' has a wrong offset!");

// Function Squad.SQGameUserSettings.GetUpscaleMode
// 0x0001 (0x0001 - 0x0000)
struct SQGameUserSettings_GetUpscaleMode final
{
public:
	EUpscaleMode                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_GetUpscaleMode) == 0x000001, "Wrong alignment on SQGameUserSettings_GetUpscaleMode");
static_assert(sizeof(SQGameUserSettings_GetUpscaleMode) == 0x000001, "Wrong size on SQGameUserSettings_GetUpscaleMode");
static_assert(offsetof(SQGameUserSettings_GetUpscaleMode, ReturnValue) == 0x000000, "Member 'SQGameUserSettings_GetUpscaleMode::ReturnValue' has a wrong offset!");

// Function Squad.SQGameUserSettings.IsDLSSGFeatureEnabled
// 0x0001 (0x0001 - 0x0000)
struct SQGameUserSettings_IsDLSSGFeatureEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_IsDLSSGFeatureEnabled) == 0x000001, "Wrong alignment on SQGameUserSettings_IsDLSSGFeatureEnabled");
static_assert(sizeof(SQGameUserSettings_IsDLSSGFeatureEnabled) == 0x000001, "Wrong size on SQGameUserSettings_IsDLSSGFeatureEnabled");
static_assert(offsetof(SQGameUserSettings_IsDLSSGFeatureEnabled, ReturnValue) == 0x000000, "Member 'SQGameUserSettings_IsDLSSGFeatureEnabled::ReturnValue' has a wrong offset!");

// Function Squad.SQGameUserSettings.IsSteamItemEnabled
// 0x0008 (0x0008 - 0x0000)
struct SQGameUserSettings_IsSteamItemEnabled final
{
public:
	int32                                         ItemId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1044[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameUserSettings_IsSteamItemEnabled) == 0x000004, "Wrong alignment on SQGameUserSettings_IsSteamItemEnabled");
static_assert(sizeof(SQGameUserSettings_IsSteamItemEnabled) == 0x000008, "Wrong size on SQGameUserSettings_IsSteamItemEnabled");
static_assert(offsetof(SQGameUserSettings_IsSteamItemEnabled, ItemId) == 0x000000, "Member 'SQGameUserSettings_IsSteamItemEnabled::ItemId' has a wrong offset!");
static_assert(offsetof(SQGameUserSettings_IsSteamItemEnabled, ReturnValue) == 0x000004, "Member 'SQGameUserSettings_IsSteamItemEnabled::ReturnValue' has a wrong offset!");

// Function Squad.SQGameUserSettings.IsUsingCustomSettings
// 0x0001 (0x0001 - 0x0000)
struct SQGameUserSettings_IsUsingCustomSettings final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_IsUsingCustomSettings) == 0x000001, "Wrong alignment on SQGameUserSettings_IsUsingCustomSettings");
static_assert(sizeof(SQGameUserSettings_IsUsingCustomSettings) == 0x000001, "Wrong size on SQGameUserSettings_IsUsingCustomSettings");
static_assert(offsetof(SQGameUserSettings_IsUsingCustomSettings, ReturnValue) == 0x000000, "Member 'SQGameUserSettings_IsUsingCustomSettings::ReturnValue' has a wrong offset!");

// Function Squad.SQGameUserSettings.LoadBackupKeyBinds
// 0x0018 (0x0018 - 0x0000)
struct SQGameUserSettings_LoadBackupKeyBinds final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1045[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameUserSettings_LoadBackupKeyBinds) == 0x000008, "Wrong alignment on SQGameUserSettings_LoadBackupKeyBinds");
static_assert(sizeof(SQGameUserSettings_LoadBackupKeyBinds) == 0x000018, "Wrong size on SQGameUserSettings_LoadBackupKeyBinds");
static_assert(offsetof(SQGameUserSettings_LoadBackupKeyBinds, Filename) == 0x000000, "Member 'SQGameUserSettings_LoadBackupKeyBinds::Filename' has a wrong offset!");
static_assert(offsetof(SQGameUserSettings_LoadBackupKeyBinds, ReturnValue) == 0x000010, "Member 'SQGameUserSettings_LoadBackupKeyBinds::ReturnValue' has a wrong offset!");

// Function Squad.SQGameUserSettings.OverrideTemporalFrameWeight
// 0x0008 (0x0008 - 0x0000)
struct SQGameUserSettings_OverrideTemporalFrameWeight final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1046[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameUserSettings_OverrideTemporalFrameWeight) == 0x000004, "Wrong alignment on SQGameUserSettings_OverrideTemporalFrameWeight");
static_assert(sizeof(SQGameUserSettings_OverrideTemporalFrameWeight) == 0x000008, "Wrong size on SQGameUserSettings_OverrideTemporalFrameWeight");
static_assert(offsetof(SQGameUserSettings_OverrideTemporalFrameWeight, Value) == 0x000000, "Member 'SQGameUserSettings_OverrideTemporalFrameWeight::Value' has a wrong offset!");
static_assert(offsetof(SQGameUserSettings_OverrideTemporalFrameWeight, bOverride) == 0x000004, "Member 'SQGameUserSettings_OverrideTemporalFrameWeight::bOverride' has a wrong offset!");

// Function Squad.SQGameUserSettings.ReadCVarSetting
// 0x0018 (0x0018 - 0x0000)
struct SQGameUserSettings_ReadCVarSetting final
{
public:
	class FName                                   CVarSettingName;                                   // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_ReadCVarSetting) == 0x000008, "Wrong alignment on SQGameUserSettings_ReadCVarSetting");
static_assert(sizeof(SQGameUserSettings_ReadCVarSetting) == 0x000018, "Wrong size on SQGameUserSettings_ReadCVarSetting");
static_assert(offsetof(SQGameUserSettings_ReadCVarSetting, CVarSettingName) == 0x000000, "Member 'SQGameUserSettings_ReadCVarSetting::CVarSettingName' has a wrong offset!");
static_assert(offsetof(SQGameUserSettings_ReadCVarSetting, ReturnValue) == 0x000008, "Member 'SQGameUserSettings_ReadCVarSetting::ReturnValue' has a wrong offset!");

// Function Squad.SQGameUserSettings.SaveBackupKeyBinds
// 0x0018 (0x0018 - 0x0000)
struct SQGameUserSettings_SaveBackupKeyBinds final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1047[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameUserSettings_SaveBackupKeyBinds) == 0x000008, "Wrong alignment on SQGameUserSettings_SaveBackupKeyBinds");
static_assert(sizeof(SQGameUserSettings_SaveBackupKeyBinds) == 0x000018, "Wrong size on SQGameUserSettings_SaveBackupKeyBinds");
static_assert(offsetof(SQGameUserSettings_SaveBackupKeyBinds, Filename) == 0x000000, "Member 'SQGameUserSettings_SaveBackupKeyBinds::Filename' has a wrong offset!");
static_assert(offsetof(SQGameUserSettings_SaveBackupKeyBinds, ReturnValue) == 0x000010, "Member 'SQGameUserSettings_SaveBackupKeyBinds::ReturnValue' has a wrong offset!");

// Function Squad.SQGameUserSettings.SetActiveAudioInputDevice
// 0x0010 (0x0010 - 0x0000)
struct SQGameUserSettings_SetActiveAudioInputDevice final
{
public:
	class FString                                 InDevice;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_SetActiveAudioInputDevice) == 0x000008, "Wrong alignment on SQGameUserSettings_SetActiveAudioInputDevice");
static_assert(sizeof(SQGameUserSettings_SetActiveAudioInputDevice) == 0x000010, "Wrong size on SQGameUserSettings_SetActiveAudioInputDevice");
static_assert(offsetof(SQGameUserSettings_SetActiveAudioInputDevice, InDevice) == 0x000000, "Member 'SQGameUserSettings_SetActiveAudioInputDevice::InDevice' has a wrong offset!");

// Function Squad.SQGameUserSettings.SetActiveAudioOutputDevice
// 0x0010 (0x0010 - 0x0000)
struct SQGameUserSettings_SetActiveAudioOutputDevice final
{
public:
	class FString                                 InDevice;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_SetActiveAudioOutputDevice) == 0x000008, "Wrong alignment on SQGameUserSettings_SetActiveAudioOutputDevice");
static_assert(sizeof(SQGameUserSettings_SetActiveAudioOutputDevice) == 0x000010, "Wrong size on SQGameUserSettings_SetActiveAudioOutputDevice");
static_assert(offsetof(SQGameUserSettings_SetActiveAudioOutputDevice, InDevice) == 0x000000, "Member 'SQGameUserSettings_SetActiveAudioOutputDevice::InDevice' has a wrong offset!");

// Function Squad.SQGameUserSettings.SetDLSSFrameGenerationMode
// 0x0001 (0x0001 - 0x0000)
struct SQGameUserSettings_SetDLSSFrameGenerationMode final
{
public:
	EUStreamlineDLSSGMode                         DLSSGMode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_SetDLSSFrameGenerationMode) == 0x000001, "Wrong alignment on SQGameUserSettings_SetDLSSFrameGenerationMode");
static_assert(sizeof(SQGameUserSettings_SetDLSSFrameGenerationMode) == 0x000001, "Wrong size on SQGameUserSettings_SetDLSSFrameGenerationMode");
static_assert(offsetof(SQGameUserSettings_SetDLSSFrameGenerationMode, DLSSGMode) == 0x000000, "Member 'SQGameUserSettings_SetDLSSFrameGenerationMode::DLSSGMode' has a wrong offset!");

// Function Squad.SQGameUserSettings.SetDLSSMode
// 0x0001 (0x0001 - 0x0000)
struct SQGameUserSettings_SetDLSSMode final
{
public:
	EUDLSSMode                                    Param_DLSSMode;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_SetDLSSMode) == 0x000001, "Wrong alignment on SQGameUserSettings_SetDLSSMode");
static_assert(sizeof(SQGameUserSettings_SetDLSSMode) == 0x000001, "Wrong size on SQGameUserSettings_SetDLSSMode");
static_assert(offsetof(SQGameUserSettings_SetDLSSMode, Param_DLSSMode) == 0x000000, "Member 'SQGameUserSettings_SetDLSSMode::Param_DLSSMode' has a wrong offset!");

// Function Squad.SQGameUserSettings.SetDLSSSharpness
// 0x0004 (0x0004 - 0x0000)
struct SQGameUserSettings_SetDLSSSharpness final
{
public:
	float                                         Sharpness;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_SetDLSSSharpness) == 0x000004, "Wrong alignment on SQGameUserSettings_SetDLSSSharpness");
static_assert(sizeof(SQGameUserSettings_SetDLSSSharpness) == 0x000004, "Wrong size on SQGameUserSettings_SetDLSSSharpness");
static_assert(offsetof(SQGameUserSettings_SetDLSSSharpness, Sharpness) == 0x000000, "Member 'SQGameUserSettings_SetDLSSSharpness::Sharpness' has a wrong offset!");

// Function Squad.SQGameUserSettings.SetEffectsQuality
// 0x0004 (0x0004 - 0x0000)
struct SQGameUserSettings_SetEffectsQuality final
{
public:
	int32                                         Param_EffectsQuality;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_SetEffectsQuality) == 0x000004, "Wrong alignment on SQGameUserSettings_SetEffectsQuality");
static_assert(sizeof(SQGameUserSettings_SetEffectsQuality) == 0x000004, "Wrong size on SQGameUserSettings_SetEffectsQuality");
static_assert(offsetof(SQGameUserSettings_SetEffectsQuality, Param_EffectsQuality) == 0x000000, "Member 'SQGameUserSettings_SetEffectsQuality::Param_EffectsQuality' has a wrong offset!");

// Function Squad.SQGameUserSettings.SetGraphicsQuality
// 0x0004 (0x0004 - 0x0000)
struct SQGameUserSettings_SetGraphicsQuality final
{
public:
	int32                                         InGraphicsQuality;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_SetGraphicsQuality) == 0x000004, "Wrong alignment on SQGameUserSettings_SetGraphicsQuality");
static_assert(sizeof(SQGameUserSettings_SetGraphicsQuality) == 0x000004, "Wrong size on SQGameUserSettings_SetGraphicsQuality");
static_assert(offsetof(SQGameUserSettings_SetGraphicsQuality, InGraphicsQuality) == 0x000000, "Member 'SQGameUserSettings_SetGraphicsQuality::InGraphicsQuality' has a wrong offset!");

// Function Squad.SQGameUserSettings.SetJoyConfig
// 0x0014 (0x0014 - 0x0000)
struct SQGameUserSettings_SetJoyConfig final
{
public:
	ESQJoyStickControls                           Control;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1048[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQJoyStickConfig                      Config;                                            // 0x0004(0x0010)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_SetJoyConfig) == 0x000004, "Wrong alignment on SQGameUserSettings_SetJoyConfig");
static_assert(sizeof(SQGameUserSettings_SetJoyConfig) == 0x000014, "Wrong size on SQGameUserSettings_SetJoyConfig");
static_assert(offsetof(SQGameUserSettings_SetJoyConfig, Control) == 0x000000, "Member 'SQGameUserSettings_SetJoyConfig::Control' has a wrong offset!");
static_assert(offsetof(SQGameUserSettings_SetJoyConfig, Config) == 0x000004, "Member 'SQGameUserSettings_SetJoyConfig::Config' has a wrong offset!");

// Function Squad.SQGameUserSettings.SetMenuFrameRateLimit
// 0x0004 (0x0004 - 0x0000)
struct SQGameUserSettings_SetMenuFrameRateLimit final
{
public:
	float                                         NewLimit;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_SetMenuFrameRateLimit) == 0x000004, "Wrong alignment on SQGameUserSettings_SetMenuFrameRateLimit");
static_assert(sizeof(SQGameUserSettings_SetMenuFrameRateLimit) == 0x000004, "Wrong size on SQGameUserSettings_SetMenuFrameRateLimit");
static_assert(offsetof(SQGameUserSettings_SetMenuFrameRateLimit, NewLimit) == 0x000000, "Member 'SQGameUserSettings_SetMenuFrameRateLimit::NewLimit' has a wrong offset!");

// Function Squad.SQGameUserSettings.SetPostProcessQuality
// 0x0004 (0x0004 - 0x0000)
struct SQGameUserSettings_SetPostProcessQuality final
{
public:
	int32                                         InPostProcessQuality;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_SetPostProcessQuality) == 0x000004, "Wrong alignment on SQGameUserSettings_SetPostProcessQuality");
static_assert(sizeof(SQGameUserSettings_SetPostProcessQuality) == 0x000004, "Wrong size on SQGameUserSettings_SetPostProcessQuality");
static_assert(offsetof(SQGameUserSettings_SetPostProcessQuality, InPostProcessQuality) == 0x000000, "Member 'SQGameUserSettings_SetPostProcessQuality::InPostProcessQuality' has a wrong offset!");

// Function Squad.SQGameUserSettings.SetReflexMode
// 0x0001 (0x0001 - 0x0000)
struct SQGameUserSettings_SetReflexMode final
{
public:
	EUStreamlineReflexMode                        InReflexMode;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_SetReflexMode) == 0x000001, "Wrong alignment on SQGameUserSettings_SetReflexMode");
static_assert(sizeof(SQGameUserSettings_SetReflexMode) == 0x000001, "Wrong size on SQGameUserSettings_SetReflexMode");
static_assert(offsetof(SQGameUserSettings_SetReflexMode, InReflexMode) == 0x000000, "Member 'SQGameUserSettings_SetReflexMode::InReflexMode' has a wrong offset!");

// Function Squad.SQGameUserSettings.SetResolutionQuality
// 0x0004 (0x0004 - 0x0000)
struct SQGameUserSettings_SetResolutionQuality final
{
public:
	int32                                         Param_ResolutionQuality;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_SetResolutionQuality) == 0x000004, "Wrong alignment on SQGameUserSettings_SetResolutionQuality");
static_assert(sizeof(SQGameUserSettings_SetResolutionQuality) == 0x000004, "Wrong size on SQGameUserSettings_SetResolutionQuality");
static_assert(offsetof(SQGameUserSettings_SetResolutionQuality, Param_ResolutionQuality) == 0x000000, "Member 'SQGameUserSettings_SetResolutionQuality::Param_ResolutionQuality' has a wrong offset!");

// Function Squad.SQGameUserSettings.SetScopeClarity
// 0x0004 (0x0004 - 0x0000)
struct SQGameUserSettings_SetScopeClarity final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_SetScopeClarity) == 0x000004, "Wrong alignment on SQGameUserSettings_SetScopeClarity");
static_assert(sizeof(SQGameUserSettings_SetScopeClarity) == 0x000004, "Wrong size on SQGameUserSettings_SetScopeClarity");
static_assert(offsetof(SQGameUserSettings_SetScopeClarity, Value) == 0x000000, "Member 'SQGameUserSettings_SetScopeClarity::Value' has a wrong offset!");

// Function Squad.SQGameUserSettings.SetScopeResolutionScale
// 0x0004 (0x0004 - 0x0000)
struct SQGameUserSettings_SetScopeResolutionScale final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_SetScopeResolutionScale) == 0x000004, "Wrong alignment on SQGameUserSettings_SetScopeResolutionScale");
static_assert(sizeof(SQGameUserSettings_SetScopeResolutionScale) == 0x000004, "Wrong size on SQGameUserSettings_SetScopeResolutionScale");
static_assert(offsetof(SQGameUserSettings_SetScopeResolutionScale, Value) == 0x000000, "Member 'SQGameUserSettings_SetScopeResolutionScale::Value' has a wrong offset!");

// Function Squad.SQGameUserSettings.SetScopeUpdateRate
// 0x0004 (0x0004 - 0x0000)
struct SQGameUserSettings_SetScopeUpdateRate final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_SetScopeUpdateRate) == 0x000004, "Wrong alignment on SQGameUserSettings_SetScopeUpdateRate");
static_assert(sizeof(SQGameUserSettings_SetScopeUpdateRate) == 0x000004, "Wrong size on SQGameUserSettings_SetScopeUpdateRate");
static_assert(offsetof(SQGameUserSettings_SetScopeUpdateRate, Value) == 0x000000, "Member 'SQGameUserSettings_SetScopeUpdateRate::Value' has a wrong offset!");

// Function Squad.SQGameUserSettings.SetSteamItemEnabled
// 0x0008 (0x0008 - 0x0000)
struct SQGameUserSettings_SetSteamItemEnabled final
{
public:
	int32                                         ItemId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1049[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameUserSettings_SetSteamItemEnabled) == 0x000004, "Wrong alignment on SQGameUserSettings_SetSteamItemEnabled");
static_assert(sizeof(SQGameUserSettings_SetSteamItemEnabled) == 0x000008, "Wrong size on SQGameUserSettings_SetSteamItemEnabled");
static_assert(offsetof(SQGameUserSettings_SetSteamItemEnabled, ItemId) == 0x000000, "Member 'SQGameUserSettings_SetSteamItemEnabled::ItemId' has a wrong offset!");
static_assert(offsetof(SQGameUserSettings_SetSteamItemEnabled, bEnabled) == 0x000004, "Member 'SQGameUserSettings_SetSteamItemEnabled::bEnabled' has a wrong offset!");

// Function Squad.SQGameUserSettings.SetUpscaleMode
// 0x0001 (0x0001 - 0x0000)
struct SQGameUserSettings_SetUpscaleMode final
{
public:
	EUpscaleMode                                  InUpscaleMode;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_SetUpscaleMode) == 0x000001, "Wrong alignment on SQGameUserSettings_SetUpscaleMode");
static_assert(sizeof(SQGameUserSettings_SetUpscaleMode) == 0x000001, "Wrong size on SQGameUserSettings_SetUpscaleMode");
static_assert(offsetof(SQGameUserSettings_SetUpscaleMode, InUpscaleMode) == 0x000000, "Member 'SQGameUserSettings_SetUpscaleMode::InUpscaleMode' has a wrong offset!");

// Function Squad.SQGameUserSettings.SetUseDX12
// 0x0001 (0x0001 - 0x0000)
struct SQGameUserSettings_SetUseDX12 final
{
public:
	bool                                          bUse;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_SetUseDX12) == 0x000001, "Wrong alignment on SQGameUserSettings_SetUseDX12");
static_assert(sizeof(SQGameUserSettings_SetUseDX12) == 0x000001, "Wrong size on SQGameUserSettings_SetUseDX12");
static_assert(offsetof(SQGameUserSettings_SetUseDX12, bUse) == 0x000000, "Member 'SQGameUserSettings_SetUseDX12::bUse' has a wrong offset!");

// Function Squad.SQGameUserSettings.SetXeSSQuality
// 0x0004 (0x0004 - 0x0000)
struct SQGameUserSettings_SetXeSSQuality final
{
public:
	int32                                         InXeSSQuality;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_SetXeSSQuality) == 0x000004, "Wrong alignment on SQGameUserSettings_SetXeSSQuality");
static_assert(sizeof(SQGameUserSettings_SetXeSSQuality) == 0x000004, "Wrong size on SQGameUserSettings_SetXeSSQuality");
static_assert(offsetof(SQGameUserSettings_SetXeSSQuality, InXeSSQuality) == 0x000000, "Member 'SQGameUserSettings_SetXeSSQuality::InXeSSQuality' has a wrong offset!");

// Function Squad.SQGameUserSettings.ToggleAntiAliasingMode
// 0x0001 (0x0001 - 0x0000)
struct SQGameUserSettings_ToggleAntiAliasingMode final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_ToggleAntiAliasingMode) == 0x000001, "Wrong alignment on SQGameUserSettings_ToggleAntiAliasingMode");
static_assert(sizeof(SQGameUserSettings_ToggleAntiAliasingMode) == 0x000001, "Wrong size on SQGameUserSettings_ToggleAntiAliasingMode");
static_assert(offsetof(SQGameUserSettings_ToggleAntiAliasingMode, bEnable) == 0x000000, "Member 'SQGameUserSettings_ToggleAntiAliasingMode::bEnable' has a wrong offset!");

// Function Squad.SQGameUserSettings.ToggleDLSSDependantSettings
// 0x0001 (0x0001 - 0x0000)
struct SQGameUserSettings_ToggleDLSSDependantSettings final
{
public:
	bool                                          bDLSSEnabled;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_ToggleDLSSDependantSettings) == 0x000001, "Wrong alignment on SQGameUserSettings_ToggleDLSSDependantSettings");
static_assert(sizeof(SQGameUserSettings_ToggleDLSSDependantSettings) == 0x000001, "Wrong size on SQGameUserSettings_ToggleDLSSDependantSettings");
static_assert(offsetof(SQGameUserSettings_ToggleDLSSDependantSettings, bDLSSEnabled) == 0x000000, "Member 'SQGameUserSettings_ToggleDLSSDependantSettings::bDLSSEnabled' has a wrong offset!");

// Function Squad.SQGameUserSettings.ToggleFSR2
// 0x0001 (0x0001 - 0x0000)
struct SQGameUserSettings_ToggleFSR2 final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_ToggleFSR2) == 0x000001, "Wrong alignment on SQGameUserSettings_ToggleFSR2");
static_assert(sizeof(SQGameUserSettings_ToggleFSR2) == 0x000001, "Wrong size on SQGameUserSettings_ToggleFSR2");
static_assert(offsetof(SQGameUserSettings_ToggleFSR2, bEnable) == 0x000000, "Member 'SQGameUserSettings_ToggleFSR2::bEnable' has a wrong offset!");

// Function Squad.SQGameUserSettings.ToggleStreamerModeEnabledForLevel
// 0x0001 (0x0001 - 0x0000)
struct SQGameUserSettings_ToggleStreamerModeEnabledForLevel final
{
public:
	ESQStreamerModeLevel                          Level;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_ToggleStreamerModeEnabledForLevel) == 0x000001, "Wrong alignment on SQGameUserSettings_ToggleStreamerModeEnabledForLevel");
static_assert(sizeof(SQGameUserSettings_ToggleStreamerModeEnabledForLevel) == 0x000001, "Wrong size on SQGameUserSettings_ToggleStreamerModeEnabledForLevel");
static_assert(offsetof(SQGameUserSettings_ToggleStreamerModeEnabledForLevel, Level) == 0x000000, "Member 'SQGameUserSettings_ToggleStreamerModeEnabledForLevel::Level' has a wrong offset!");

// Function Squad.SQGameUserSettings.ToggleXeSS
// 0x0001 (0x0001 - 0x0000)
struct SQGameUserSettings_ToggleXeSS final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_ToggleXeSS) == 0x000001, "Wrong alignment on SQGameUserSettings_ToggleXeSS");
static_assert(sizeof(SQGameUserSettings_ToggleXeSS) == 0x000001, "Wrong size on SQGameUserSettings_ToggleXeSS");
static_assert(offsetof(SQGameUserSettings_ToggleXeSS, bEnable) == 0x000000, "Member 'SQGameUserSettings_ToggleXeSS::bEnable' has a wrong offset!");

// Function Squad.SQGameUserSettings.GetIsUsingDX12
// 0x0001 (0x0001 - 0x0000)
struct SQGameUserSettings_GetIsUsingDX12 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_GetIsUsingDX12) == 0x000001, "Wrong alignment on SQGameUserSettings_GetIsUsingDX12");
static_assert(sizeof(SQGameUserSettings_GetIsUsingDX12) == 0x000001, "Wrong size on SQGameUserSettings_GetIsUsingDX12");
static_assert(offsetof(SQGameUserSettings_GetIsUsingDX12, ReturnValue) == 0x000000, "Member 'SQGameUserSettings_GetIsUsingDX12::ReturnValue' has a wrong offset!");

// Function Squad.SQGameUserSettings.GetMenuFrameRateLimit
// 0x0004 (0x0004 - 0x0000)
struct SQGameUserSettings_GetMenuFrameRateLimit final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_GetMenuFrameRateLimit) == 0x000004, "Wrong alignment on SQGameUserSettings_GetMenuFrameRateLimit");
static_assert(sizeof(SQGameUserSettings_GetMenuFrameRateLimit) == 0x000004, "Wrong size on SQGameUserSettings_GetMenuFrameRateLimit");
static_assert(offsetof(SQGameUserSettings_GetMenuFrameRateLimit, ReturnValue) == 0x000000, "Member 'SQGameUserSettings_GetMenuFrameRateLimit::ReturnValue' has a wrong offset!");

// Function Squad.SQGameUserSettings.GetStreamerModeEnabledForLevel
// 0x0002 (0x0002 - 0x0000)
struct SQGameUserSettings_GetStreamerModeEnabledForLevel final
{
public:
	ESQStreamerModeLevel                          Level;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_GetStreamerModeEnabledForLevel) == 0x000001, "Wrong alignment on SQGameUserSettings_GetStreamerModeEnabledForLevel");
static_assert(sizeof(SQGameUserSettings_GetStreamerModeEnabledForLevel) == 0x000002, "Wrong size on SQGameUserSettings_GetStreamerModeEnabledForLevel");
static_assert(offsetof(SQGameUserSettings_GetStreamerModeEnabledForLevel, Level) == 0x000000, "Member 'SQGameUserSettings_GetStreamerModeEnabledForLevel::Level' has a wrong offset!");
static_assert(offsetof(SQGameUserSettings_GetStreamerModeEnabledForLevel, ReturnValue) == 0x000001, "Member 'SQGameUserSettings_GetStreamerModeEnabledForLevel::ReturnValue' has a wrong offset!");

// Function Squad.SQGameUserSettings.GetWeaponModelBlurDisabled
// 0x0001 (0x0001 - 0x0000)
struct SQGameUserSettings_GetWeaponModelBlurDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_GetWeaponModelBlurDisabled) == 0x000001, "Wrong alignment on SQGameUserSettings_GetWeaponModelBlurDisabled");
static_assert(sizeof(SQGameUserSettings_GetWeaponModelBlurDisabled) == 0x000001, "Wrong size on SQGameUserSettings_GetWeaponModelBlurDisabled");
static_assert(offsetof(SQGameUserSettings_GetWeaponModelBlurDisabled, ReturnValue) == 0x000000, "Member 'SQGameUserSettings_GetWeaponModelBlurDisabled::ReturnValue' has a wrong offset!");

// Function Squad.SQGameUserSettings.IsServerFiltersDefault
// 0x0001 (0x0001 - 0x0000)
struct SQGameUserSettings_IsServerFiltersDefault final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_IsServerFiltersDefault) == 0x000001, "Wrong alignment on SQGameUserSettings_IsServerFiltersDefault");
static_assert(sizeof(SQGameUserSettings_IsServerFiltersDefault) == 0x000001, "Wrong size on SQGameUserSettings_IsServerFiltersDefault");
static_assert(offsetof(SQGameUserSettings_IsServerFiltersDefault, ReturnValue) == 0x000000, "Member 'SQGameUserSettings_IsServerFiltersDefault::ReturnValue' has a wrong offset!");

// Function Squad.SQGameUserSettings.ProcessBenchmarkScore
// 0x0020 (0x0020 - 0x0000)
struct SQGameUserSettings_ProcessBenchmarkScore final
{
public:
	int32                                         LastBenchmarkScore;                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104A[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Thresholds;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104B[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameUserSettings_ProcessBenchmarkScore) == 0x000008, "Wrong alignment on SQGameUserSettings_ProcessBenchmarkScore");
static_assert(sizeof(SQGameUserSettings_ProcessBenchmarkScore) == 0x000020, "Wrong size on SQGameUserSettings_ProcessBenchmarkScore");
static_assert(offsetof(SQGameUserSettings_ProcessBenchmarkScore, LastBenchmarkScore) == 0x000000, "Member 'SQGameUserSettings_ProcessBenchmarkScore::LastBenchmarkScore' has a wrong offset!");
static_assert(offsetof(SQGameUserSettings_ProcessBenchmarkScore, Thresholds) == 0x000008, "Member 'SQGameUserSettings_ProcessBenchmarkScore::Thresholds' has a wrong offset!");
static_assert(offsetof(SQGameUserSettings_ProcessBenchmarkScore, ReturnValue) == 0x000018, "Member 'SQGameUserSettings_ProcessBenchmarkScore::ReturnValue' has a wrong offset!");

// Function Squad.SQGameUserSettings.UpdateQualityBasedOnGraphicsQuality
// 0x000C (0x000C - 0x0000)
struct SQGameUserSettings_UpdateQualityBasedOnGraphicsQuality final
{
public:
	int32                                         InBaseQuality;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InGraphicsQuality;                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameUserSettings_UpdateQualityBasedOnGraphicsQuality) == 0x000004, "Wrong alignment on SQGameUserSettings_UpdateQualityBasedOnGraphicsQuality");
static_assert(sizeof(SQGameUserSettings_UpdateQualityBasedOnGraphicsQuality) == 0x00000C, "Wrong size on SQGameUserSettings_UpdateQualityBasedOnGraphicsQuality");
static_assert(offsetof(SQGameUserSettings_UpdateQualityBasedOnGraphicsQuality, InBaseQuality) == 0x000000, "Member 'SQGameUserSettings_UpdateQualityBasedOnGraphicsQuality::InBaseQuality' has a wrong offset!");
static_assert(offsetof(SQGameUserSettings_UpdateQualityBasedOnGraphicsQuality, InGraphicsQuality) == 0x000004, "Member 'SQGameUserSettings_UpdateQualityBasedOnGraphicsQuality::InGraphicsQuality' has a wrong offset!");
static_assert(offsetof(SQGameUserSettings_UpdateQualityBasedOnGraphicsQuality, ReturnValue) == 0x000008, "Member 'SQGameUserSettings_UpdateQualityBasedOnGraphicsQuality::ReturnValue' has a wrong offset!");

// Function Squad.SQCoreStateData.OnListenerCreate
// 0x0008 (0x0008 - 0x0000)
struct SQCoreStateData_OnListenerCreate final
{
public:
	class USQCoreStateListener*                   Listener;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCoreStateData_OnListenerCreate) == 0x000008, "Wrong alignment on SQCoreStateData_OnListenerCreate");
static_assert(sizeof(SQCoreStateData_OnListenerCreate) == 0x000008, "Wrong size on SQCoreStateData_OnListenerCreate");
static_assert(offsetof(SQCoreStateData_OnListenerCreate, Listener) == 0x000000, "Member 'SQCoreStateData_OnListenerCreate::Listener' has a wrong offset!");

// Function Squad.SQCoreStateData.OnWorldCleanup
// 0x0010 (0x0010 - 0x0000)
struct SQCoreStateData_OnWorldCleanup final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSessionEnded;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCleanupResources;                                 // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1051[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQCoreStateData_OnWorldCleanup) == 0x000008, "Wrong alignment on SQCoreStateData_OnWorldCleanup");
static_assert(sizeof(SQCoreStateData_OnWorldCleanup) == 0x000010, "Wrong size on SQCoreStateData_OnWorldCleanup");
static_assert(offsetof(SQCoreStateData_OnWorldCleanup, World) == 0x000000, "Member 'SQCoreStateData_OnWorldCleanup::World' has a wrong offset!");
static_assert(offsetof(SQCoreStateData_OnWorldCleanup, bSessionEnded) == 0x000008, "Member 'SQCoreStateData_OnWorldCleanup::bSessionEnded' has a wrong offset!");
static_assert(offsetof(SQCoreStateData_OnWorldCleanup, bCleanupResources) == 0x000009, "Member 'SQCoreStateData_OnWorldCleanup::bCleanupResources' has a wrong offset!");

// Function Squad.SQGameSpawn.GetRespawnDelay
// 0x0004 (0x0004 - 0x0000)
struct SQGameSpawn_GetRespawnDelay final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSpawn_GetRespawnDelay) == 0x000004, "Wrong alignment on SQGameSpawn_GetRespawnDelay");
static_assert(sizeof(SQGameSpawn_GetRespawnDelay) == 0x000004, "Wrong size on SQGameSpawn_GetRespawnDelay");
static_assert(offsetof(SQGameSpawn_GetRespawnDelay, ReturnValue) == 0x000000, "Member 'SQGameSpawn_GetRespawnDelay::ReturnValue' has a wrong offset!");

// Function Squad.SQGameSpawn.GetSpawnActor
// 0x0008 (0x0008 - 0x0000)
struct SQGameSpawn_GetSpawnActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSpawn_GetSpawnActor) == 0x000008, "Wrong alignment on SQGameSpawn_GetSpawnActor");
static_assert(sizeof(SQGameSpawn_GetSpawnActor) == 0x000008, "Wrong size on SQGameSpawn_GetSpawnActor");
static_assert(offsetof(SQGameSpawn_GetSpawnActor, ReturnValue) == 0x000000, "Member 'SQGameSpawn_GetSpawnActor::ReturnValue' has a wrong offset!");

// Function Squad.SQGameSpawn.GetValidSpawnLocation
// 0x0018 (0x0018 - 0x0000)
struct SQGameSpawn_GetValidSpawnLocation final
{
public:
	class UClass*                                 DefaultPawnClass;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_105D[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameSpawn_GetValidSpawnLocation) == 0x000008, "Wrong alignment on SQGameSpawn_GetValidSpawnLocation");
static_assert(sizeof(SQGameSpawn_GetValidSpawnLocation) == 0x000018, "Wrong size on SQGameSpawn_GetValidSpawnLocation");
static_assert(offsetof(SQGameSpawn_GetValidSpawnLocation, DefaultPawnClass) == 0x000000, "Member 'SQGameSpawn_GetValidSpawnLocation::DefaultPawnClass' has a wrong offset!");
static_assert(offsetof(SQGameSpawn_GetValidSpawnLocation, ReturnValue) == 0x000008, "Member 'SQGameSpawn_GetValidSpawnLocation::ReturnValue' has a wrong offset!");

// Function Squad.SQGameSpawn.GetValidSpawnLocations
// 0x0010 (0x0010 - 0x0000)
struct SQGameSpawn_GetValidSpawnLocations final
{
public:
	TArray<struct FVector>                        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSpawn_GetValidSpawnLocations) == 0x000008, "Wrong alignment on SQGameSpawn_GetValidSpawnLocations");
static_assert(sizeof(SQGameSpawn_GetValidSpawnLocations) == 0x000010, "Wrong size on SQGameSpawn_GetValidSpawnLocations");
static_assert(offsetof(SQGameSpawn_GetValidSpawnLocations, ReturnValue) == 0x000000, "Member 'SQGameSpawn_GetValidSpawnLocations::ReturnValue' has a wrong offset!");

// Function Squad.SQGameSpawn.SetActivatedTimeStamp
// 0x0008 (0x0008 - 0x0000)
struct SQGameSpawn_SetActivatedTimeStamp final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_105E[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameSpawn_SetActivatedTimeStamp) == 0x000004, "Wrong alignment on SQGameSpawn_SetActivatedTimeStamp");
static_assert(sizeof(SQGameSpawn_SetActivatedTimeStamp) == 0x000008, "Wrong size on SQGameSpawn_SetActivatedTimeStamp");
static_assert(offsetof(SQGameSpawn_SetActivatedTimeStamp, Value) == 0x000000, "Member 'SQGameSpawn_SetActivatedTimeStamp::Value' has a wrong offset!");
static_assert(offsetof(SQGameSpawn_SetActivatedTimeStamp, bForce) == 0x000004, "Member 'SQGameSpawn_SetActivatedTimeStamp::bForce' has a wrong offset!");

// Function Squad.SQGameSpawn.SetRespawnIncrease
// 0x0004 (0x0004 - 0x0000)
struct SQGameSpawn_SetRespawnIncrease final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSpawn_SetRespawnIncrease) == 0x000004, "Wrong alignment on SQGameSpawn_SetRespawnIncrease");
static_assert(sizeof(SQGameSpawn_SetRespawnIncrease) == 0x000004, "Wrong size on SQGameSpawn_SetRespawnIncrease");
static_assert(offsetof(SQGameSpawn_SetRespawnIncrease, Value) == 0x000000, "Member 'SQGameSpawn_SetRespawnIncrease::Value' has a wrong offset!");

// Function Squad.SQGameSpawn.SetSieged
// 0x0001 (0x0001 - 0x0000)
struct SQGameSpawn_SetSieged final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSpawn_SetSieged) == 0x000001, "Wrong alignment on SQGameSpawn_SetSieged");
static_assert(sizeof(SQGameSpawn_SetSieged) == 0x000001, "Wrong size on SQGameSpawn_SetSieged");
static_assert(offsetof(SQGameSpawn_SetSieged, bEnabled) == 0x000000, "Member 'SQGameSpawn_SetSieged::bEnabled' has a wrong offset!");

// Function Squad.SQGameSpawn.SetSpawningEnabled
// 0x0001 (0x0001 - 0x0000)
struct SQGameSpawn_SetSpawningEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSpawn_SetSpawningEnabled) == 0x000001, "Wrong alignment on SQGameSpawn_SetSpawningEnabled");
static_assert(sizeof(SQGameSpawn_SetSpawningEnabled) == 0x000001, "Wrong size on SQGameSpawn_SetSpawningEnabled");
static_assert(offsetof(SQGameSpawn_SetSpawningEnabled, bEnabled) == 0x000000, "Member 'SQGameSpawn_SetSpawningEnabled::bEnabled' has a wrong offset!");

// Function Squad.SQGameSpawn.SetTeam
// 0x0001 (0x0001 - 0x0000)
struct SQGameSpawn_SetTeam final
{
public:
	ESQTeam                                       Param_Team;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSpawn_SetTeam) == 0x000001, "Wrong alignment on SQGameSpawn_SetTeam");
static_assert(sizeof(SQGameSpawn_SetTeam) == 0x000001, "Wrong size on SQGameSpawn_SetTeam");
static_assert(offsetof(SQGameSpawn_SetTeam, Param_Team) == 0x000000, "Member 'SQGameSpawn_SetTeam::Param_Team' has a wrong offset!");

// Function Squad.SQGameSpawn.CanSpawn
// 0x0001 (0x0001 - 0x0000)
struct SQGameSpawn_CanSpawn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSpawn_CanSpawn) == 0x000001, "Wrong alignment on SQGameSpawn_CanSpawn");
static_assert(sizeof(SQGameSpawn_CanSpawn) == 0x000001, "Wrong size on SQGameSpawn_CanSpawn");
static_assert(offsetof(SQGameSpawn_CanSpawn, ReturnValue) == 0x000000, "Member 'SQGameSpawn_CanSpawn::ReturnValue' has a wrong offset!");

// Function Squad.SQGameSpawn.GetActivatedState
// 0x0001 (0x0001 - 0x0000)
struct SQGameSpawn_GetActivatedState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSpawn_GetActivatedState) == 0x000001, "Wrong alignment on SQGameSpawn_GetActivatedState");
static_assert(sizeof(SQGameSpawn_GetActivatedState) == 0x000001, "Wrong size on SQGameSpawn_GetActivatedState");
static_assert(offsetof(SQGameSpawn_GetActivatedState, ReturnValue) == 0x000000, "Member 'SQGameSpawn_GetActivatedState::ReturnValue' has a wrong offset!");

// Function Squad.SQGameSpawn.GetActivatedTimeStamp
// 0x0004 (0x0004 - 0x0000)
struct SQGameSpawn_GetActivatedTimeStamp final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSpawn_GetActivatedTimeStamp) == 0x000004, "Wrong alignment on SQGameSpawn_GetActivatedTimeStamp");
static_assert(sizeof(SQGameSpawn_GetActivatedTimeStamp) == 0x000004, "Wrong size on SQGameSpawn_GetActivatedTimeStamp");
static_assert(offsetof(SQGameSpawn_GetActivatedTimeStamp, ReturnValue) == 0x000000, "Member 'SQGameSpawn_GetActivatedTimeStamp::ReturnValue' has a wrong offset!");

// Function Squad.SQGameSpawn.GetRemainingActivatingTime
// 0x0004 (0x0004 - 0x0000)
struct SQGameSpawn_GetRemainingActivatingTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSpawn_GetRemainingActivatingTime) == 0x000004, "Wrong alignment on SQGameSpawn_GetRemainingActivatingTime");
static_assert(sizeof(SQGameSpawn_GetRemainingActivatingTime) == 0x000004, "Wrong size on SQGameSpawn_GetRemainingActivatingTime");
static_assert(offsetof(SQGameSpawn_GetRemainingActivatingTime, ReturnValue) == 0x000000, "Member 'SQGameSpawn_GetRemainingActivatingTime::ReturnValue' has a wrong offset!");

// Function Squad.SQGameSpawn.GetRespawnIncrease
// 0x0004 (0x0004 - 0x0000)
struct SQGameSpawn_GetRespawnIncrease final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSpawn_GetRespawnIncrease) == 0x000004, "Wrong alignment on SQGameSpawn_GetRespawnIncrease");
static_assert(sizeof(SQGameSpawn_GetRespawnIncrease) == 0x000004, "Wrong size on SQGameSpawn_GetRespawnIncrease");
static_assert(offsetof(SQGameSpawn_GetRespawnIncrease, ReturnValue) == 0x000000, "Member 'SQGameSpawn_GetRespawnIncrease::ReturnValue' has a wrong offset!");

// Function Squad.SQGameSpawn.GetSieged
// 0x0001 (0x0001 - 0x0000)
struct SQGameSpawn_GetSieged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSpawn_GetSieged) == 0x000001, "Wrong alignment on SQGameSpawn_GetSieged");
static_assert(sizeof(SQGameSpawn_GetSieged) == 0x000001, "Wrong size on SQGameSpawn_GetSieged");
static_assert(offsetof(SQGameSpawn_GetSieged, ReturnValue) == 0x000000, "Member 'SQGameSpawn_GetSieged::ReturnValue' has a wrong offset!");

// Function Squad.SQGameSpawn.GetSpawningEnabled
// 0x0001 (0x0001 - 0x0000)
struct SQGameSpawn_GetSpawningEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSpawn_GetSpawningEnabled) == 0x000001, "Wrong alignment on SQGameSpawn_GetSpawningEnabled");
static_assert(sizeof(SQGameSpawn_GetSpawningEnabled) == 0x000001, "Wrong size on SQGameSpawn_GetSpawningEnabled");
static_assert(offsetof(SQGameSpawn_GetSpawningEnabled, ReturnValue) == 0x000000, "Member 'SQGameSpawn_GetSpawningEnabled::ReturnValue' has a wrong offset!");

// Function Squad.SQGameSpawn.GetSpawnPointType
// 0x0001 (0x0001 - 0x0000)
struct SQGameSpawn_GetSpawnPointType final
{
public:
	ESQSpawnPointType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSpawn_GetSpawnPointType) == 0x000001, "Wrong alignment on SQGameSpawn_GetSpawnPointType");
static_assert(sizeof(SQGameSpawn_GetSpawnPointType) == 0x000001, "Wrong size on SQGameSpawn_GetSpawnPointType");
static_assert(offsetof(SQGameSpawn_GetSpawnPointType, ReturnValue) == 0x000000, "Member 'SQGameSpawn_GetSpawnPointType::ReturnValue' has a wrong offset!");

// Function Squad.SQGameSpawn.GetTeam
// 0x0001 (0x0001 - 0x0000)
struct SQGameSpawn_GetTeam final
{
public:
	ESQTeam                                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSpawn_GetTeam) == 0x000001, "Wrong alignment on SQGameSpawn_GetTeam");
static_assert(sizeof(SQGameSpawn_GetTeam) == 0x000001, "Wrong size on SQGameSpawn_GetTeam");
static_assert(offsetof(SQGameSpawn_GetTeam, ReturnValue) == 0x000000, "Member 'SQGameSpawn_GetTeam::ReturnValue' has a wrong offset!");

// Function Squad.SQGameSpawn.GetWaveIntervalTime
// 0x0004 (0x0004 - 0x0000)
struct SQGameSpawn_GetWaveIntervalTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSpawn_GetWaveIntervalTime) == 0x000004, "Wrong alignment on SQGameSpawn_GetWaveIntervalTime");
static_assert(sizeof(SQGameSpawn_GetWaveIntervalTime) == 0x000004, "Wrong size on SQGameSpawn_GetWaveIntervalTime");
static_assert(offsetof(SQGameSpawn_GetWaveIntervalTime, ReturnValue) == 0x000000, "Member 'SQGameSpawn_GetWaveIntervalTime::ReturnValue' has a wrong offset!");

// Function Squad.SQGameSpawn.GetWaveSpawnStartTime
// 0x0004 (0x0004 - 0x0000)
struct SQGameSpawn_GetWaveSpawnStartTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSpawn_GetWaveSpawnStartTime) == 0x000004, "Wrong alignment on SQGameSpawn_GetWaveSpawnStartTime");
static_assert(sizeof(SQGameSpawn_GetWaveSpawnStartTime) == 0x000004, "Wrong size on SQGameSpawn_GetWaveSpawnStartTime");
static_assert(offsetof(SQGameSpawn_GetWaveSpawnStartTime, ReturnValue) == 0x000000, "Member 'SQGameSpawn_GetWaveSpawnStartTime::ReturnValue' has a wrong offset!");

// Function Squad.SQGameSpawn.GetWaveTime
// 0x0004 (0x0004 - 0x0000)
struct SQGameSpawn_GetWaveTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSpawn_GetWaveTime) == 0x000004, "Wrong alignment on SQGameSpawn_GetWaveTime");
static_assert(sizeof(SQGameSpawn_GetWaveTime) == 0x000004, "Wrong size on SQGameSpawn_GetWaveTime");
static_assert(offsetof(SQGameSpawn_GetWaveTime, ReturnValue) == 0x000000, "Member 'SQGameSpawn_GetWaveTime::ReturnValue' has a wrong offset!");

// Function Squad.SQGameSpawn.HasValidSpawnLocation
// 0x0001 (0x0001 - 0x0000)
struct SQGameSpawn_HasValidSpawnLocation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSpawn_HasValidSpawnLocation) == 0x000001, "Wrong alignment on SQGameSpawn_HasValidSpawnLocation");
static_assert(sizeof(SQGameSpawn_HasValidSpawnLocation) == 0x000001, "Wrong size on SQGameSpawn_HasValidSpawnLocation");
static_assert(offsetof(SQGameSpawn_HasValidSpawnLocation, ReturnValue) == 0x000000, "Member 'SQGameSpawn_HasValidSpawnLocation::ReturnValue' has a wrong offset!");

// Function Squad.SQGameRallyPoint.GetNumberOfSpawns
// 0x0004 (0x0004 - 0x0000)
struct SQGameRallyPoint_GetNumberOfSpawns final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameRallyPoint_GetNumberOfSpawns) == 0x000004, "Wrong alignment on SQGameRallyPoint_GetNumberOfSpawns");
static_assert(sizeof(SQGameRallyPoint_GetNumberOfSpawns) == 0x000004, "Wrong size on SQGameRallyPoint_GetNumberOfSpawns");
static_assert(offsetof(SQGameRallyPoint_GetNumberOfSpawns, ReturnValue) == 0x000000, "Member 'SQGameRallyPoint_GetNumberOfSpawns::ReturnValue' has a wrong offset!");

// Function Squad.SQCoreStateListener.OnDataCreate
// 0x0008 (0x0008 - 0x0000)
struct SQCoreStateListener_OnDataCreate final
{
public:
	class USQCoreStateData*                       Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCoreStateListener_OnDataCreate) == 0x000008, "Wrong alignment on SQCoreStateListener_OnDataCreate");
static_assert(sizeof(SQCoreStateListener_OnDataCreate) == 0x000008, "Wrong size on SQCoreStateListener_OnDataCreate");
static_assert(offsetof(SQCoreStateListener_OnDataCreate, Data) == 0x000000, "Member 'SQCoreStateListener_OnDataCreate::Data' has a wrong offset!");

// Function Squad.SQCoreStateListener.RefreshVisbility
// 0x0008 (0x0008 - 0x0000)
struct SQCoreStateListener_RefreshVisbility final
{
public:
	const class APlayerController*                PC;                                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCoreStateListener_RefreshVisbility) == 0x000008, "Wrong alignment on SQCoreStateListener_RefreshVisbility");
static_assert(sizeof(SQCoreStateListener_RefreshVisbility) == 0x000008, "Wrong size on SQCoreStateListener_RefreshVisbility");
static_assert(offsetof(SQCoreStateListener_RefreshVisbility, PC) == 0x000000, "Member 'SQCoreStateListener_RefreshVisbility::PC' has a wrong offset!");

// Function Squad.SQCoreStateWidgetFactory.ReceiveSelection
// 0x0010 (0x0010 - 0x0000)
struct SQCoreStateWidgetFactory_ReceiveSelection final
{
public:
	struct FSQCoreStateId                         ComponentId;                                       // 0x0000(0x0002)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQSelectionState                             SelectionState;                                    // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1065[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          SelectionInstigator;                               // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCoreStateWidgetFactory_ReceiveSelection) == 0x000008, "Wrong alignment on SQCoreStateWidgetFactory_ReceiveSelection");
static_assert(sizeof(SQCoreStateWidgetFactory_ReceiveSelection) == 0x000010, "Wrong size on SQCoreStateWidgetFactory_ReceiveSelection");
static_assert(offsetof(SQCoreStateWidgetFactory_ReceiveSelection, ComponentId) == 0x000000, "Member 'SQCoreStateWidgetFactory_ReceiveSelection::ComponentId' has a wrong offset!");
static_assert(offsetof(SQCoreStateWidgetFactory_ReceiveSelection, SelectionState) == 0x000002, "Member 'SQCoreStateWidgetFactory_ReceiveSelection::SelectionState' has a wrong offset!");
static_assert(offsetof(SQCoreStateWidgetFactory_ReceiveSelection, SelectionInstigator) == 0x000008, "Member 'SQCoreStateWidgetFactory_ReceiveSelection::SelectionInstigator' has a wrong offset!");

// Function Squad.SQCoreStateWidgetFactory.UnselectAll
// 0x0008 (0x0008 - 0x0000)
struct SQCoreStateWidgetFactory_UnselectAll final
{
public:
	const class UObject*                          SelectionInstigator;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCoreStateWidgetFactory_UnselectAll) == 0x000008, "Wrong alignment on SQCoreStateWidgetFactory_UnselectAll");
static_assert(sizeof(SQCoreStateWidgetFactory_UnselectAll) == 0x000008, "Wrong size on SQCoreStateWidgetFactory_UnselectAll");
static_assert(offsetof(SQCoreStateWidgetFactory_UnselectAll, SelectionInstigator) == 0x000000, "Member 'SQCoreStateWidgetFactory_UnselectAll::SelectionInstigator' has a wrong offset!");

// Function Squad.SQCoreStateMapComponent.SetRootWidget
// 0x0008 (0x0008 - 0x0000)
struct SQCoreStateMapComponent_SetRootWidget final
{
public:
	class UPanelWidget*                           Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCoreStateMapComponent_SetRootWidget) == 0x000008, "Wrong alignment on SQCoreStateMapComponent_SetRootWidget");
static_assert(sizeof(SQCoreStateMapComponent_SetRootWidget) == 0x000008, "Wrong size on SQCoreStateMapComponent_SetRootWidget");
static_assert(offsetof(SQCoreStateMapComponent_SetRootWidget, Value) == 0x000000, "Member 'SQCoreStateMapComponent_SetRootWidget::Value' has a wrong offset!");

// Function Squad.SQCoreStateMapComponent.SetWidgetScale
// 0x0004 (0x0004 - 0x0000)
struct SQCoreStateMapComponent_SetWidgetScale final
{
public:
	float                                         UniformScale;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCoreStateMapComponent_SetWidgetScale) == 0x000004, "Wrong alignment on SQCoreStateMapComponent_SetWidgetScale");
static_assert(sizeof(SQCoreStateMapComponent_SetWidgetScale) == 0x000004, "Wrong size on SQCoreStateMapComponent_SetWidgetScale");
static_assert(offsetof(SQCoreStateMapComponent_SetWidgetScale, UniformScale) == 0x000000, "Member 'SQCoreStateMapComponent_SetWidgetScale::UniformScale' has a wrong offset!");

// Function Squad.SQCoreStateMapComponent.GetOrderTargetWidgets
// 0x0050 (0x0050 - 0x0000)
struct SQCoreStateMapComponent_GetOrderTargetWidgets final
{
public:
	TMap<int32, struct FSQCoreStateId>            ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCoreStateMapComponent_GetOrderTargetWidgets) == 0x000008, "Wrong alignment on SQCoreStateMapComponent_GetOrderTargetWidgets");
static_assert(sizeof(SQCoreStateMapComponent_GetOrderTargetWidgets) == 0x000050, "Wrong size on SQCoreStateMapComponent_GetOrderTargetWidgets");
static_assert(offsetof(SQCoreStateMapComponent_GetOrderTargetWidgets, ReturnValue) == 0x000000, "Member 'SQCoreStateMapComponent_GetOrderTargetWidgets::ReturnValue' has a wrong offset!");

// Function Squad.SQCoreStateMapComponent.GetWaypointFTWidgets
// 0x0050 (0x0050 - 0x0000)
struct SQCoreStateMapComponent_GetWaypointFTWidgets final
{
public:
	TMap<int32, struct FSQCoreStateId>            ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCoreStateMapComponent_GetWaypointFTWidgets) == 0x000008, "Wrong alignment on SQCoreStateMapComponent_GetWaypointFTWidgets");
static_assert(sizeof(SQCoreStateMapComponent_GetWaypointFTWidgets) == 0x000050, "Wrong size on SQCoreStateMapComponent_GetWaypointFTWidgets");
static_assert(offsetof(SQCoreStateMapComponent_GetWaypointFTWidgets, ReturnValue) == 0x000000, "Member 'SQCoreStateMapComponent_GetWaypointFTWidgets::ReturnValue' has a wrong offset!");

// Function Squad.SQCoreStateMapComponent.GetWaypointWidgets
// 0x0050 (0x0050 - 0x0000)
struct SQCoreStateMapComponent_GetWaypointWidgets final
{
public:
	TMap<int32, struct FSQCoreStateId>            ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCoreStateMapComponent_GetWaypointWidgets) == 0x000008, "Wrong alignment on SQCoreStateMapComponent_GetWaypointWidgets");
static_assert(sizeof(SQCoreStateMapComponent_GetWaypointWidgets) == 0x000050, "Wrong size on SQCoreStateMapComponent_GetWaypointWidgets");
static_assert(offsetof(SQCoreStateMapComponent_GetWaypointWidgets, ReturnValue) == 0x000000, "Member 'SQCoreStateMapComponent_GetWaypointWidgets::ReturnValue' has a wrong offset!");

// Function Squad.SQCoreStateMapComponent.GetWidgetScreenPosition
// 0x000C (0x000C - 0x0000)
struct SQCoreStateMapComponent_GetWidgetScreenPosition final
{
public:
	struct FVector2D                              OutPosition;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQCoreStateId                         ID;                                                // 0x0008(0x0002)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1067[0x1];                                     // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQCoreStateMapComponent_GetWidgetScreenPosition) == 0x000004, "Wrong alignment on SQCoreStateMapComponent_GetWidgetScreenPosition");
static_assert(sizeof(SQCoreStateMapComponent_GetWidgetScreenPosition) == 0x00000C, "Wrong size on SQCoreStateMapComponent_GetWidgetScreenPosition");
static_assert(offsetof(SQCoreStateMapComponent_GetWidgetScreenPosition, OutPosition) == 0x000000, "Member 'SQCoreStateMapComponent_GetWidgetScreenPosition::OutPosition' has a wrong offset!");
static_assert(offsetof(SQCoreStateMapComponent_GetWidgetScreenPosition, ID) == 0x000008, "Member 'SQCoreStateMapComponent_GetWidgetScreenPosition::ID' has a wrong offset!");
static_assert(offsetof(SQCoreStateMapComponent_GetWidgetScreenPosition, ReturnValue) == 0x00000A, "Member 'SQCoreStateMapComponent_GetWidgetScreenPosition::ReturnValue' has a wrong offset!");

// Function Squad.SQCoreStateMapComponent.GetWidgetWorldLocation
// 0x0010 (0x0010 - 0x0000)
struct SQCoreStateMapComponent_GetWidgetWorldLocation final
{
public:
	struct FVector                                OutWorldLocation;                                  // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQCoreStateId                         ID;                                                // 0x000C(0x0002)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000E(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1068[0x1];                                     // 0x000F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQCoreStateMapComponent_GetWidgetWorldLocation) == 0x000004, "Wrong alignment on SQCoreStateMapComponent_GetWidgetWorldLocation");
static_assert(sizeof(SQCoreStateMapComponent_GetWidgetWorldLocation) == 0x000010, "Wrong size on SQCoreStateMapComponent_GetWidgetWorldLocation");
static_assert(offsetof(SQCoreStateMapComponent_GetWidgetWorldLocation, OutWorldLocation) == 0x000000, "Member 'SQCoreStateMapComponent_GetWidgetWorldLocation::OutWorldLocation' has a wrong offset!");
static_assert(offsetof(SQCoreStateMapComponent_GetWidgetWorldLocation, ID) == 0x00000C, "Member 'SQCoreStateMapComponent_GetWidgetWorldLocation::ID' has a wrong offset!");
static_assert(offsetof(SQCoreStateMapComponent_GetWidgetWorldLocation, ReturnValue) == 0x00000E, "Member 'SQCoreStateMapComponent_GetWidgetWorldLocation::ReturnValue' has a wrong offset!");

// Function Squad.SQGrenade.GetAimDirection
// 0x000C (0x000C - 0x0000)
struct SQGrenade_GetAimDirection final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGrenade_GetAimDirection) == 0x000004, "Wrong alignment on SQGrenade_GetAimDirection");
static_assert(sizeof(SQGrenade_GetAimDirection) == 0x00000C, "Wrong size on SQGrenade_GetAimDirection");
static_assert(offsetof(SQGrenade_GetAimDirection, ReturnValue) == 0x000000, "Member 'SQGrenade_GetAimDirection::ReturnValue' has a wrong offset!");

// Function Squad.SQGrenade.GetAimLocation
// 0x000C (0x000C - 0x0000)
struct SQGrenade_GetAimLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGrenade_GetAimLocation) == 0x000004, "Wrong alignment on SQGrenade_GetAimLocation");
static_assert(sizeof(SQGrenade_GetAimLocation) == 0x00000C, "Wrong size on SQGrenade_GetAimLocation");
static_assert(offsetof(SQGrenade_GetAimLocation, ReturnValue) == 0x000000, "Member 'SQGrenade_GetAimLocation::ReturnValue' has a wrong offset!");

// Function Squad.SQGrenade.ServerPrepareThrow
// 0x0001 (0x0001 - 0x0000)
struct SQGrenade_ServerPrepareThrow final
{
public:
	bool                                          bOverhand;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGrenade_ServerPrepareThrow) == 0x000001, "Wrong alignment on SQGrenade_ServerPrepareThrow");
static_assert(sizeof(SQGrenade_ServerPrepareThrow) == 0x000001, "Wrong size on SQGrenade_ServerPrepareThrow");
static_assert(offsetof(SQGrenade_ServerPrepareThrow, bOverhand) == 0x000000, "Member 'SQGrenade_ServerPrepareThrow::bOverhand' has a wrong offset!");

// Function Squad.SQGrenade.ServerReleaseThrow
// 0x0001 (0x0001 - 0x0000)
struct SQGrenade_ServerReleaseThrow final
{
public:
	bool                                          bOverhand;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGrenade_ServerReleaseThrow) == 0x000001, "Wrong alignment on SQGrenade_ServerReleaseThrow");
static_assert(sizeof(SQGrenade_ServerReleaseThrow) == 0x000001, "Wrong size on SQGrenade_ServerReleaseThrow");
static_assert(offsetof(SQGrenade_ServerReleaseThrow, bOverhand) == 0x000000, "Member 'SQGrenade_ServerReleaseThrow::bOverhand' has a wrong offset!");

// Function Squad.SQGrenade.ServerSpawnGrenade
// 0x000C (0x000C - 0x0000)
struct SQGrenade_ServerSpawnGrenade final
{
public:
	struct FVector                                SpawnLocationZeroBased;                            // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGrenade_ServerSpawnGrenade) == 0x000004, "Wrong alignment on SQGrenade_ServerSpawnGrenade");
static_assert(sizeof(SQGrenade_ServerSpawnGrenade) == 0x00000C, "Wrong size on SQGrenade_ServerSpawnGrenade");
static_assert(offsetof(SQGrenade_ServerSpawnGrenade, SpawnLocationZeroBased) == 0x000000, "Member 'SQGrenade_ServerSpawnGrenade::SpawnLocationZeroBased' has a wrong offset!");

// Function Squad.SQGrenade.GetGrenadeStaticInfo
// 0x0008 (0x0008 - 0x0000)
struct SQGrenade_GetGrenadeStaticInfo final
{
public:
	class USQGrenadeStaticInfo*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGrenade_GetGrenadeStaticInfo) == 0x000008, "Wrong alignment on SQGrenade_GetGrenadeStaticInfo");
static_assert(sizeof(SQGrenade_GetGrenadeStaticInfo) == 0x000008, "Wrong size on SQGrenade_GetGrenadeStaticInfo");
static_assert(offsetof(SQGrenade_GetGrenadeStaticInfo, ReturnValue) == 0x000000, "Member 'SQGrenade_GetGrenadeStaticInfo::ReturnValue' has a wrong offset!");

// Function Squad.SQGrenade.GetOwnerSoldier
// 0x0008 (0x0008 - 0x0000)
struct SQGrenade_GetOwnerSoldier final
{
public:
	class ASQSoldier*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGrenade_GetOwnerSoldier) == 0x000008, "Wrong alignment on SQGrenade_GetOwnerSoldier");
static_assert(sizeof(SQGrenade_GetOwnerSoldier) == 0x000008, "Wrong size on SQGrenade_GetOwnerSoldier");
static_assert(offsetof(SQGrenade_GetOwnerSoldier, ReturnValue) == 0x000000, "Member 'SQGrenade_GetOwnerSoldier::ReturnValue' has a wrong offset!");

// Function Squad.RouteSelectorPredicate.Execute
// 0x0030 (0x0030 - 0x0000)
struct RouteSelectorPredicate_Execute final
{
public:
	TArray<class USQGraphNodeComponent*>          LinksLeft;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class USQGraphNodeComponent*>          ChosenLinks;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FRandomStream                          RandStream;                                        // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_106D[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RouteSelectorPredicate_Execute) == 0x000008, "Wrong alignment on RouteSelectorPredicate_Execute");
static_assert(sizeof(RouteSelectorPredicate_Execute) == 0x000030, "Wrong size on RouteSelectorPredicate_Execute");
static_assert(offsetof(RouteSelectorPredicate_Execute, LinksLeft) == 0x000000, "Member 'RouteSelectorPredicate_Execute::LinksLeft' has a wrong offset!");
static_assert(offsetof(RouteSelectorPredicate_Execute, ChosenLinks) == 0x000010, "Member 'RouteSelectorPredicate_Execute::ChosenLinks' has a wrong offset!");
static_assert(offsetof(RouteSelectorPredicate_Execute, RandStream) == 0x000020, "Member 'RouteSelectorPredicate_Execute::RandStream' has a wrong offset!");
static_assert(offsetof(RouteSelectorPredicate_Execute, ReturnValue) == 0x000028, "Member 'RouteSelectorPredicate_Execute::ReturnValue' has a wrong offset!");

// Function Squad.SQCoreStateSquadListComponent.SetRootWidgets
// 0x0018 (0x0018 - 0x0000)
struct SQCoreStateSquadListComponent_SetRootWidgets final
{
public:
	class UPanelWidget*                           InSquadRoot;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPanelWidget*                           InUnassignedRoot;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPanelWidget*                           InCommanderRoot;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCoreStateSquadListComponent_SetRootWidgets) == 0x000008, "Wrong alignment on SQCoreStateSquadListComponent_SetRootWidgets");
static_assert(sizeof(SQCoreStateSquadListComponent_SetRootWidgets) == 0x000018, "Wrong size on SQCoreStateSquadListComponent_SetRootWidgets");
static_assert(offsetof(SQCoreStateSquadListComponent_SetRootWidgets, InSquadRoot) == 0x000000, "Member 'SQCoreStateSquadListComponent_SetRootWidgets::InSquadRoot' has a wrong offset!");
static_assert(offsetof(SQCoreStateSquadListComponent_SetRootWidgets, InUnassignedRoot) == 0x000008, "Member 'SQCoreStateSquadListComponent_SetRootWidgets::InUnassignedRoot' has a wrong offset!");
static_assert(offsetof(SQCoreStateSquadListComponent_SetRootWidgets, InCommanderRoot) == 0x000010, "Member 'SQCoreStateSquadListComponent_SetRootWidgets::InCommanderRoot' has a wrong offset!");

// Function Squad.SQGenericPunchSubsystem.AddGenericCameraPunch
// 0x0100 (0x0100 - 0x0000)
struct SQGenericPunchSubsystem_AddGenericCameraPunch final
{
public:
	struct FSQGenericPunchInput                   CameraRotationData;                                // 0x0000(0x0080)(Parm, NativeAccessSpecifierPublic)
	struct FSQGenericPunchInput                   CameraLocationData;                                // 0x0080(0x0080)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGenericPunchSubsystem_AddGenericCameraPunch) == 0x000010, "Wrong alignment on SQGenericPunchSubsystem_AddGenericCameraPunch");
static_assert(sizeof(SQGenericPunchSubsystem_AddGenericCameraPunch) == 0x000100, "Wrong size on SQGenericPunchSubsystem_AddGenericCameraPunch");
static_assert(offsetof(SQGenericPunchSubsystem_AddGenericCameraPunch, CameraRotationData) == 0x000000, "Member 'SQGenericPunchSubsystem_AddGenericCameraPunch::CameraRotationData' has a wrong offset!");
static_assert(offsetof(SQGenericPunchSubsystem_AddGenericCameraPunch, CameraLocationData) == 0x000080, "Member 'SQGenericPunchSubsystem_AddGenericCameraPunch::CameraLocationData' has a wrong offset!");

// Function Squad.SQGenericPunchSubsystem.AddGenericWeaponPunch
// 0x0180 (0x0180 - 0x0000)
struct SQGenericPunchSubsystem_AddGenericWeaponPunch final
{
public:
	struct FSQGenericPunchInput                   WeaponSwayData;                                    // 0x0000(0x0080)(Parm, NativeAccessSpecifierPublic)
	struct FSQGenericPunchInput                   WeaponAlignmentData;                               // 0x0080(0x0080)(Parm, NativeAccessSpecifierPublic)
	struct FSQGenericPunchInput                   WeaponLocationData;                                // 0x0100(0x0080)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGenericPunchSubsystem_AddGenericWeaponPunch) == 0x000010, "Wrong alignment on SQGenericPunchSubsystem_AddGenericWeaponPunch");
static_assert(sizeof(SQGenericPunchSubsystem_AddGenericWeaponPunch) == 0x000180, "Wrong size on SQGenericPunchSubsystem_AddGenericWeaponPunch");
static_assert(offsetof(SQGenericPunchSubsystem_AddGenericWeaponPunch, WeaponSwayData) == 0x000000, "Member 'SQGenericPunchSubsystem_AddGenericWeaponPunch::WeaponSwayData' has a wrong offset!");
static_assert(offsetof(SQGenericPunchSubsystem_AddGenericWeaponPunch, WeaponAlignmentData) == 0x000080, "Member 'SQGenericPunchSubsystem_AddGenericWeaponPunch::WeaponAlignmentData' has a wrong offset!");
static_assert(offsetof(SQGenericPunchSubsystem_AddGenericWeaponPunch, WeaponLocationData) == 0x000100, "Member 'SQGenericPunchSubsystem_AddGenericWeaponPunch::WeaponLocationData' has a wrong offset!");

// Function Squad.SQGenericPunchSubsystem.ResumePausedPunch
// 0x0008 (0x0008 - 0x0000)
struct SQGenericPunchSubsystem_ResumePausedPunch final
{
public:
	class FName                                   PunchID;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGenericPunchSubsystem_ResumePausedPunch) == 0x000004, "Wrong alignment on SQGenericPunchSubsystem_ResumePausedPunch");
static_assert(sizeof(SQGenericPunchSubsystem_ResumePausedPunch) == 0x000008, "Wrong size on SQGenericPunchSubsystem_ResumePausedPunch");
static_assert(offsetof(SQGenericPunchSubsystem_ResumePausedPunch, PunchID) == 0x000000, "Member 'SQGenericPunchSubsystem_ResumePausedPunch::PunchID' has a wrong offset!");

// Function Squad.SQGenericPunchSubsystem.PunchExistsByID
// 0x000C (0x000C - 0x0000)
struct SQGenericPunchSubsystem_PunchExistsByID final
{
public:
	class FName                                   PunchID;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1071[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGenericPunchSubsystem_PunchExistsByID) == 0x000004, "Wrong alignment on SQGenericPunchSubsystem_PunchExistsByID");
static_assert(sizeof(SQGenericPunchSubsystem_PunchExistsByID) == 0x00000C, "Wrong size on SQGenericPunchSubsystem_PunchExistsByID");
static_assert(offsetof(SQGenericPunchSubsystem_PunchExistsByID, PunchID) == 0x000000, "Member 'SQGenericPunchSubsystem_PunchExistsByID::PunchID' has a wrong offset!");
static_assert(offsetof(SQGenericPunchSubsystem_PunchExistsByID, ReturnValue) == 0x000008, "Member 'SQGenericPunchSubsystem_PunchExistsByID::ReturnValue' has a wrong offset!");

// Function Squad.SQCoreStateSelectionHUB.UnselectAll
// 0x0008 (0x0008 - 0x0000)
struct SQCoreStateSelectionHUB_UnselectAll final
{
public:
	const class UObject*                          SelectionInstigator;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCoreStateSelectionHUB_UnselectAll) == 0x000008, "Wrong alignment on SQCoreStateSelectionHUB_UnselectAll");
static_assert(sizeof(SQCoreStateSelectionHUB_UnselectAll) == 0x000008, "Wrong size on SQCoreStateSelectionHUB_UnselectAll");
static_assert(offsetof(SQCoreStateSelectionHUB_UnselectAll, SelectionInstigator) == 0x000000, "Member 'SQCoreStateSelectionHUB_UnselectAll::SelectionInstigator' has a wrong offset!");

// Function Squad.SQCoreStateSpawnPointsListComponent.SetRootWidgets
// 0x0018 (0x0018 - 0x0000)
struct SQCoreStateSpawnPointsListComponent_SetRootWidgets final
{
public:
	class UGridPanel*                             InBaseRoot;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGridPanel*                             InHABRoot;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGridPanel*                             InRallyRoot;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCoreStateSpawnPointsListComponent_SetRootWidgets) == 0x000008, "Wrong alignment on SQCoreStateSpawnPointsListComponent_SetRootWidgets");
static_assert(sizeof(SQCoreStateSpawnPointsListComponent_SetRootWidgets) == 0x000018, "Wrong size on SQCoreStateSpawnPointsListComponent_SetRootWidgets");
static_assert(offsetof(SQCoreStateSpawnPointsListComponent_SetRootWidgets, InBaseRoot) == 0x000000, "Member 'SQCoreStateSpawnPointsListComponent_SetRootWidgets::InBaseRoot' has a wrong offset!");
static_assert(offsetof(SQCoreStateSpawnPointsListComponent_SetRootWidgets, InHABRoot) == 0x000008, "Member 'SQCoreStateSpawnPointsListComponent_SetRootWidgets::InHABRoot' has a wrong offset!");
static_assert(offsetof(SQCoreStateSpawnPointsListComponent_SetRootWidgets, InRallyRoot) == 0x000010, "Member 'SQCoreStateSpawnPointsListComponent_SetRootWidgets::InRallyRoot' has a wrong offset!");

// Function Squad.SQCoreStateSpawnPointsListWidget.GetSpawnIcon
// 0x0008 (0x0008 - 0x0000)
struct SQCoreStateSpawnPointsListWidget_GetSpawnIcon final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCoreStateSpawnPointsListWidget_GetSpawnIcon) == 0x000008, "Wrong alignment on SQCoreStateSpawnPointsListWidget_GetSpawnIcon");
static_assert(sizeof(SQCoreStateSpawnPointsListWidget_GetSpawnIcon) == 0x000008, "Wrong size on SQCoreStateSpawnPointsListWidget_GetSpawnIcon");
static_assert(offsetof(SQCoreStateSpawnPointsListWidget_GetSpawnIcon, ReturnValue) == 0x000000, "Member 'SQCoreStateSpawnPointsListWidget_GetSpawnIcon::ReturnValue' has a wrong offset!");

// Function Squad.SQGuidanceControllerComponent.GetFirstGuidanceComponent
// 0x0008 (0x0008 - 0x0000)
struct SQGuidanceControllerComponent_GetFirstGuidanceComponent final
{
public:
	class USQGuidanceComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGuidanceControllerComponent_GetFirstGuidanceComponent) == 0x000008, "Wrong alignment on SQGuidanceControllerComponent_GetFirstGuidanceComponent");
static_assert(sizeof(SQGuidanceControllerComponent_GetFirstGuidanceComponent) == 0x000008, "Wrong size on SQGuidanceControllerComponent_GetFirstGuidanceComponent");
static_assert(offsetof(SQGuidanceControllerComponent_GetFirstGuidanceComponent, ReturnValue) == 0x000000, "Member 'SQGuidanceControllerComponent_GetFirstGuidanceComponent::ReturnValue' has a wrong offset!");

// Function Squad.SQGuidanceControllerComponent.OnProjectileSpawned
// 0x0008 (0x0008 - 0x0000)
struct SQGuidanceControllerComponent_OnProjectileSpawned final
{
public:
	class ASQProjectile*                          SpawnedProjectile;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGuidanceControllerComponent_OnProjectileSpawned) == 0x000008, "Wrong alignment on SQGuidanceControllerComponent_OnProjectileSpawned");
static_assert(sizeof(SQGuidanceControllerComponent_OnProjectileSpawned) == 0x000008, "Wrong size on SQGuidanceControllerComponent_OnProjectileSpawned");
static_assert(offsetof(SQGuidanceControllerComponent_OnProjectileSpawned, SpawnedProjectile) == 0x000000, "Member 'SQGuidanceControllerComponent_OnProjectileSpawned::SpawnedProjectile' has a wrong offset!");

// Function Squad.SQGuidanceControllerComponent.PlayConnectionLossEffects
// 0x0001 (0x0001 - 0x0000)
struct SQGuidanceControllerComponent_PlayConnectionLossEffects final
{
public:
	EGuidanceLossReason                           LossReason;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGuidanceControllerComponent_PlayConnectionLossEffects) == 0x000001, "Wrong alignment on SQGuidanceControllerComponent_PlayConnectionLossEffects");
static_assert(sizeof(SQGuidanceControllerComponent_PlayConnectionLossEffects) == 0x000001, "Wrong size on SQGuidanceControllerComponent_PlayConnectionLossEffects");
static_assert(offsetof(SQGuidanceControllerComponent_PlayConnectionLossEffects, LossReason) == 0x000000, "Member 'SQGuidanceControllerComponent_PlayConnectionLossEffects::LossReason' has a wrong offset!");

// Function Squad.SQGuidanceControllerComponent.UnregisterGuidanceComponent
// 0x0010 (0x0010 - 0x0000)
struct SQGuidanceControllerComponent_UnregisterGuidanceComponent final
{
public:
	class USQGuidanceComponent*                   InGuidanceComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuidanceLossReason                           LossReason;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_107E[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGuidanceControllerComponent_UnregisterGuidanceComponent) == 0x000008, "Wrong alignment on SQGuidanceControllerComponent_UnregisterGuidanceComponent");
static_assert(sizeof(SQGuidanceControllerComponent_UnregisterGuidanceComponent) == 0x000010, "Wrong size on SQGuidanceControllerComponent_UnregisterGuidanceComponent");
static_assert(offsetof(SQGuidanceControllerComponent_UnregisterGuidanceComponent, InGuidanceComponent) == 0x000000, "Member 'SQGuidanceControllerComponent_UnregisterGuidanceComponent::InGuidanceComponent' has a wrong offset!");
static_assert(offsetof(SQGuidanceControllerComponent_UnregisterGuidanceComponent, LossReason) == 0x000008, "Member 'SQGuidanceControllerComponent_UnregisterGuidanceComponent::LossReason' has a wrong offset!");

// Function Squad.SQCoreStateSquadItemWidget.GetCachedSQPlayerController
// 0x0008 (0x0008 - 0x0000)
struct SQCoreStateSquadItemWidget_GetCachedSQPlayerController final
{
public:
	class ASQPlayerController*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCoreStateSquadItemWidget_GetCachedSQPlayerController) == 0x000008, "Wrong alignment on SQCoreStateSquadItemWidget_GetCachedSQPlayerController");
static_assert(sizeof(SQCoreStateSquadItemWidget_GetCachedSQPlayerController) == 0x000008, "Wrong size on SQCoreStateSquadItemWidget_GetCachedSQPlayerController");
static_assert(offsetof(SQCoreStateSquadItemWidget_GetCachedSQPlayerController, ReturnValue) == 0x000000, "Member 'SQCoreStateSquadItemWidget_GetCachedSQPlayerController::ReturnValue' has a wrong offset!");

// Function Squad.SQCoreStateSquadItemWidget.OnBanned
// 0x0008 (0x0008 - 0x0000)
struct SQCoreStateSquadItemWidget_OnBanned final
{
public:
	int32                                         Param_SquadId;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BanDuration;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCoreStateSquadItemWidget_OnBanned) == 0x000004, "Wrong alignment on SQCoreStateSquadItemWidget_OnBanned");
static_assert(sizeof(SQCoreStateSquadItemWidget_OnBanned) == 0x000008, "Wrong size on SQCoreStateSquadItemWidget_OnBanned");
static_assert(offsetof(SQCoreStateSquadItemWidget_OnBanned, Param_SquadId) == 0x000000, "Member 'SQCoreStateSquadItemWidget_OnBanned::Param_SquadId' has a wrong offset!");
static_assert(offsetof(SQCoreStateSquadItemWidget_OnBanned, BanDuration) == 0x000004, "Member 'SQCoreStateSquadItemWidget_OnBanned::BanDuration' has a wrong offset!");

// Function Squad.SQCoreStateSquadItemWidget.GetMemberRoot
// 0x0010 (0x0010 - 0x0000)
struct SQCoreStateSquadItemWidget_GetMemberRoot final
{
public:
	int32                                         FireTeamIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1082[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPanelWidget*                           ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCoreStateSquadItemWidget_GetMemberRoot) == 0x000008, "Wrong alignment on SQCoreStateSquadItemWidget_GetMemberRoot");
static_assert(sizeof(SQCoreStateSquadItemWidget_GetMemberRoot) == 0x000010, "Wrong size on SQCoreStateSquadItemWidget_GetMemberRoot");
static_assert(offsetof(SQCoreStateSquadItemWidget_GetMemberRoot, FireTeamIndex) == 0x000000, "Member 'SQCoreStateSquadItemWidget_GetMemberRoot::FireTeamIndex' has a wrong offset!");
static_assert(offsetof(SQCoreStateSquadItemWidget_GetMemberRoot, ReturnValue) == 0x000008, "Member 'SQCoreStateSquadItemWidget_GetMemberRoot::ReturnValue' has a wrong offset!");

// Function Squad.SQProjectile.BlueprintOnImpact
// 0x0088 (0x0088 - 0x0000)
struct SQProjectile_BlueprintOnImpact final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQProjectile_BlueprintOnImpact) == 0x000004, "Wrong alignment on SQProjectile_BlueprintOnImpact");
static_assert(sizeof(SQProjectile_BlueprintOnImpact) == 0x000088, "Wrong size on SQProjectile_BlueprintOnImpact");
static_assert(offsetof(SQProjectile_BlueprintOnImpact, HitResult) == 0x000000, "Member 'SQProjectile_BlueprintOnImpact::HitResult' has a wrong offset!");

// Function Squad.SQProjectile.BPApplyExplosiveDamage
// 0x00A8 (0x00A8 - 0x0000)
struct SQProjectile_BPApplyExplosiveDamage final
{
public:
	struct FHitResult                             LastHitResult;                                     // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0088(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0090(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00A0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1091[0x7];                                     // 0x00A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQProjectile_BPApplyExplosiveDamage) == 0x000008, "Wrong alignment on SQProjectile_BPApplyExplosiveDamage");
static_assert(sizeof(SQProjectile_BPApplyExplosiveDamage) == 0x0000A8, "Wrong size on SQProjectile_BPApplyExplosiveDamage");
static_assert(offsetof(SQProjectile_BPApplyExplosiveDamage, LastHitResult) == 0x000000, "Member 'SQProjectile_BPApplyExplosiveDamage::LastHitResult' has a wrong offset!");
static_assert(offsetof(SQProjectile_BPApplyExplosiveDamage, DamageCauser) == 0x000088, "Member 'SQProjectile_BPApplyExplosiveDamage::DamageCauser' has a wrong offset!");
static_assert(offsetof(SQProjectile_BPApplyExplosiveDamage, IgnoreActors) == 0x000090, "Member 'SQProjectile_BPApplyExplosiveDamage::IgnoreActors' has a wrong offset!");
static_assert(offsetof(SQProjectile_BPApplyExplosiveDamage, ReturnValue) == 0x0000A0, "Member 'SQProjectile_BPApplyExplosiveDamage::ReturnValue' has a wrong offset!");

// Function Squad.SQProjectile.GetDamage
// 0x0004 (0x0004 - 0x0000)
struct SQProjectile_GetDamage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQProjectile_GetDamage) == 0x000004, "Wrong alignment on SQProjectile_GetDamage");
static_assert(sizeof(SQProjectile_GetDamage) == 0x000004, "Wrong size on SQProjectile_GetDamage");
static_assert(offsetof(SQProjectile_GetDamage, ReturnValue) == 0x000000, "Member 'SQProjectile_GetDamage::ReturnValue' has a wrong offset!");

// Function Squad.SQProjectile.GetWeapon
// 0x0008 (0x0008 - 0x0000)
struct SQProjectile_GetWeapon final
{
public:
	class ASQEquipableItem*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQProjectile_GetWeapon) == 0x000008, "Wrong alignment on SQProjectile_GetWeapon");
static_assert(sizeof(SQProjectile_GetWeapon) == 0x000008, "Wrong size on SQProjectile_GetWeapon");
static_assert(offsetof(SQProjectile_GetWeapon, ReturnValue) == 0x000000, "Member 'SQProjectile_GetWeapon::ReturnValue' has a wrong offset!");

// Function Squad.SQProjectile.OnImpact
// 0x00A8 (0x00A8 - 0x0000)
struct SQProjectile_OnImpact final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x001C(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_1092[0x4];                                     // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQProjectile_OnImpact) == 0x000008, "Wrong alignment on SQProjectile_OnImpact");
static_assert(sizeof(SQProjectile_OnImpact) == 0x0000A8, "Wrong size on SQProjectile_OnImpact");
static_assert(offsetof(SQProjectile_OnImpact, SelfActor) == 0x000000, "Member 'SQProjectile_OnImpact::SelfActor' has a wrong offset!");
static_assert(offsetof(SQProjectile_OnImpact, OtherActor) == 0x000008, "Member 'SQProjectile_OnImpact::OtherActor' has a wrong offset!");
static_assert(offsetof(SQProjectile_OnImpact, NormalImpulse) == 0x000010, "Member 'SQProjectile_OnImpact::NormalImpulse' has a wrong offset!");
static_assert(offsetof(SQProjectile_OnImpact, Hit) == 0x00001C, "Member 'SQProjectile_OnImpact::Hit' has a wrong offset!");

// Function Squad.SQProjectile.OnOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct SQProjectile_OnOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1093[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQProjectile_OnOverlap) == 0x000008, "Wrong alignment on SQProjectile_OnOverlap");
static_assert(sizeof(SQProjectile_OnOverlap) == 0x0000A8, "Wrong size on SQProjectile_OnOverlap");
static_assert(offsetof(SQProjectile_OnOverlap, OverlappedComponent) == 0x000000, "Member 'SQProjectile_OnOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SQProjectile_OnOverlap, OtherActor) == 0x000008, "Member 'SQProjectile_OnOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SQProjectile_OnOverlap, OtherComp) == 0x000010, "Member 'SQProjectile_OnOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(SQProjectile_OnOverlap, OtherBodyIndex) == 0x000018, "Member 'SQProjectile_OnOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SQProjectile_OnOverlap, bFromSweep) == 0x00001C, "Member 'SQProjectile_OnOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(SQProjectile_OnOverlap, SweepResult) == 0x000020, "Member 'SQProjectile_OnOverlap::SweepResult' has a wrong offset!");

// Function Squad.SQProjectile.PlayExplosionEffect
// 0x008C (0x008C - 0x0000)
struct SQProjectile_PlayExplosionEffect final
{
public:
	struct FHitResult                             ImpactHit;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1094[0x3];                                     // 0x0089(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQProjectile_PlayExplosionEffect) == 0x000004, "Wrong alignment on SQProjectile_PlayExplosionEffect");
static_assert(sizeof(SQProjectile_PlayExplosionEffect) == 0x00008C, "Wrong size on SQProjectile_PlayExplosionEffect");
static_assert(offsetof(SQProjectile_PlayExplosionEffect, ImpactHit) == 0x000000, "Member 'SQProjectile_PlayExplosionEffect::ImpactHit' has a wrong offset!");
static_assert(offsetof(SQProjectile_PlayExplosionEffect, ReturnValue) == 0x000088, "Member 'SQProjectile_PlayExplosionEffect::ReturnValue' has a wrong offset!");

// Function Squad.SQProjectile.PlayProjectileSound
// 0x0010 (0x0010 - 0x0000)
struct SQProjectile_PlayProjectileSound final
{
public:
	class USoundCue*                              Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQProjectile_PlayProjectileSound) == 0x000008, "Wrong alignment on SQProjectile_PlayProjectileSound");
static_assert(sizeof(SQProjectile_PlayProjectileSound) == 0x000010, "Wrong size on SQProjectile_PlayProjectileSound");
static_assert(offsetof(SQProjectile_PlayProjectileSound, Sound) == 0x000000, "Member 'SQProjectile_PlayProjectileSound::Sound' has a wrong offset!");
static_assert(offsetof(SQProjectile_PlayProjectileSound, ReturnValue) == 0x000008, "Member 'SQProjectile_PlayProjectileSound::ReturnValue' has a wrong offset!");

// Function Squad.SQGrenadeProjectile.PlayThrowableImpactEffect
// 0x008C (0x008C - 0x0000)
struct SQGrenadeProjectile_PlayThrowableImpactEffect final
{
public:
	struct FHitResult                             ImpactHit;                                         // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0088(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1097[0x3];                                     // 0x0089(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGrenadeProjectile_PlayThrowableImpactEffect) == 0x000004, "Wrong alignment on SQGrenadeProjectile_PlayThrowableImpactEffect");
static_assert(sizeof(SQGrenadeProjectile_PlayThrowableImpactEffect) == 0x00008C, "Wrong size on SQGrenadeProjectile_PlayThrowableImpactEffect");
static_assert(offsetof(SQGrenadeProjectile_PlayThrowableImpactEffect, ImpactHit) == 0x000000, "Member 'SQGrenadeProjectile_PlayThrowableImpactEffect::ImpactHit' has a wrong offset!");
static_assert(offsetof(SQGrenadeProjectile_PlayThrowableImpactEffect, ReturnValue) == 0x000088, "Member 'SQGrenadeProjectile_PlayThrowableImpactEffect::ReturnValue' has a wrong offset!");

// Function Squad.SQCountParameterBase.TryGetValueForPlayer
// 0x0010 (0x0010 - 0x0000)
struct SQCountParameterBase_TryGetValueForPlayer final
{
public:
	const class ASQPlayerController*              InPlayer;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutValue;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1099[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQCountParameterBase_TryGetValueForPlayer) == 0x000008, "Wrong alignment on SQCountParameterBase_TryGetValueForPlayer");
static_assert(sizeof(SQCountParameterBase_TryGetValueForPlayer) == 0x000010, "Wrong size on SQCountParameterBase_TryGetValueForPlayer");
static_assert(offsetof(SQCountParameterBase_TryGetValueForPlayer, InPlayer) == 0x000000, "Member 'SQCountParameterBase_TryGetValueForPlayer::InPlayer' has a wrong offset!");
static_assert(offsetof(SQCountParameterBase_TryGetValueForPlayer, OutValue) == 0x000008, "Member 'SQCountParameterBase_TryGetValueForPlayer::OutValue' has a wrong offset!");
static_assert(offsetof(SQCountParameterBase_TryGetValueForPlayer, ReturnValue) == 0x00000C, "Member 'SQCountParameterBase_TryGetValueForPlayer::ReturnValue' has a wrong offset!");

// Function Squad.SQCountParameterBase.TryGetValueForTeam
// 0x0010 (0x0010 - 0x0000)
struct SQCountParameterBase_TryGetValueForTeam final
{
public:
	const class ASQTeam*                          InTeam;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutValue;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109A[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQCountParameterBase_TryGetValueForTeam) == 0x000008, "Wrong alignment on SQCountParameterBase_TryGetValueForTeam");
static_assert(sizeof(SQCountParameterBase_TryGetValueForTeam) == 0x000010, "Wrong size on SQCountParameterBase_TryGetValueForTeam");
static_assert(offsetof(SQCountParameterBase_TryGetValueForTeam, InTeam) == 0x000000, "Member 'SQCountParameterBase_TryGetValueForTeam::InTeam' has a wrong offset!");
static_assert(offsetof(SQCountParameterBase_TryGetValueForTeam, OutValue) == 0x000008, "Member 'SQCountParameterBase_TryGetValueForTeam::OutValue' has a wrong offset!");
static_assert(offsetof(SQCountParameterBase_TryGetValueForTeam, ReturnValue) == 0x00000C, "Member 'SQCountParameterBase_TryGetValueForTeam::ReturnValue' has a wrong offset!");

// Function Squad.RouteCombinerPredicate.Execute
// 0x0020 (0x0020 - 0x0000)
struct RouteCombinerPredicate_Execute final
{
public:
	TArray<struct FSQRoute2>                      NewRoutes;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FSQRoute2>                      Routes;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RouteCombinerPredicate_Execute) == 0x000008, "Wrong alignment on RouteCombinerPredicate_Execute");
static_assert(sizeof(RouteCombinerPredicate_Execute) == 0x000020, "Wrong size on RouteCombinerPredicate_Execute");
static_assert(offsetof(RouteCombinerPredicate_Execute, NewRoutes) == 0x000000, "Member 'RouteCombinerPredicate_Execute::NewRoutes' has a wrong offset!");
static_assert(offsetof(RouteCombinerPredicate_Execute, Routes) == 0x000010, "Member 'RouteCombinerPredicate_Execute::Routes' has a wrong offset!");

// Function Squad.SQCountParameter.TryGetInputValueForPlayer
// 0x0010 (0x0010 - 0x0000)
struct SQCountParameter_TryGetInputValueForPlayer final
{
public:
	const class ASQPlayerController*              InPlayer;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutValue;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109C[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQCountParameter_TryGetInputValueForPlayer) == 0x000008, "Wrong alignment on SQCountParameter_TryGetInputValueForPlayer");
static_assert(sizeof(SQCountParameter_TryGetInputValueForPlayer) == 0x000010, "Wrong size on SQCountParameter_TryGetInputValueForPlayer");
static_assert(offsetof(SQCountParameter_TryGetInputValueForPlayer, InPlayer) == 0x000000, "Member 'SQCountParameter_TryGetInputValueForPlayer::InPlayer' has a wrong offset!");
static_assert(offsetof(SQCountParameter_TryGetInputValueForPlayer, OutValue) == 0x000008, "Member 'SQCountParameter_TryGetInputValueForPlayer::OutValue' has a wrong offset!");
static_assert(offsetof(SQCountParameter_TryGetInputValueForPlayer, ReturnValue) == 0x00000C, "Member 'SQCountParameter_TryGetInputValueForPlayer::ReturnValue' has a wrong offset!");

// Function Squad.SQCountParameter.TryGetInputValueForTeam
// 0x0010 (0x0010 - 0x0000)
struct SQCountParameter_TryGetInputValueForTeam final
{
public:
	const class ASQTeam*                          InTeam;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutValue;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109D[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQCountParameter_TryGetInputValueForTeam) == 0x000008, "Wrong alignment on SQCountParameter_TryGetInputValueForTeam");
static_assert(sizeof(SQCountParameter_TryGetInputValueForTeam) == 0x000010, "Wrong size on SQCountParameter_TryGetInputValueForTeam");
static_assert(offsetof(SQCountParameter_TryGetInputValueForTeam, InTeam) == 0x000000, "Member 'SQCountParameter_TryGetInputValueForTeam::InTeam' has a wrong offset!");
static_assert(offsetof(SQCountParameter_TryGetInputValueForTeam, OutValue) == 0x000008, "Member 'SQCountParameter_TryGetInputValueForTeam::OutValue' has a wrong offset!");
static_assert(offsetof(SQCountParameter_TryGetInputValueForTeam, ReturnValue) == 0x00000C, "Member 'SQCountParameter_TryGetInputValueForTeam::ReturnValue' has a wrong offset!");

// Function Squad.SQCountParameter_Legacy.GetGroupLimit
// 0x0014 (0x0014 - 0x0000)
struct SQCountParameter_Legacy_GetGroupLimit final
{
public:
	struct FSQRoleGroupLimit                      ReturnValue;                                       // 0x0000(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCountParameter_Legacy_GetGroupLimit) == 0x000004, "Wrong alignment on SQCountParameter_Legacy_GetGroupLimit");
static_assert(sizeof(SQCountParameter_Legacy_GetGroupLimit) == 0x000014, "Wrong size on SQCountParameter_Legacy_GetGroupLimit");
static_assert(offsetof(SQCountParameter_Legacy_GetGroupLimit, ReturnValue) == 0x000000, "Member 'SQCountParameter_Legacy_GetGroupLimit::ReturnValue' has a wrong offset!");

// Function Squad.SQCountParameter_Legacy.IsPartOfRoleGroup
// 0x0010 (0x0010 - 0x0000)
struct SQCountParameter_Legacy_IsPartOfRoleGroup final
{
public:
	const class USQRoleSettings*                  InRole;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109F[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQCountParameter_Legacy_IsPartOfRoleGroup) == 0x000008, "Wrong alignment on SQCountParameter_Legacy_IsPartOfRoleGroup");
static_assert(sizeof(SQCountParameter_Legacy_IsPartOfRoleGroup) == 0x000010, "Wrong size on SQCountParameter_Legacy_IsPartOfRoleGroup");
static_assert(offsetof(SQCountParameter_Legacy_IsPartOfRoleGroup, InRole) == 0x000000, "Member 'SQCountParameter_Legacy_IsPartOfRoleGroup::InRole' has a wrong offset!");
static_assert(offsetof(SQCountParameter_Legacy_IsPartOfRoleGroup, ReturnValue) == 0x000008, "Member 'SQCountParameter_Legacy_IsPartOfRoleGroup::ReturnValue' has a wrong offset!");

// Function Squad.SQMapMarkerInputComponent.ServerRequestMapMarker
// 0x0038 (0x0038 - 0x0000)
struct SQMapMarkerInputComponent_ServerRequestMapMarker final
{
public:
	struct FSQMapMarkerGameplayData               MarkerGameplayData;                                // 0x0000(0x0038)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapMarkerInputComponent_ServerRequestMapMarker) == 0x000008, "Wrong alignment on SQMapMarkerInputComponent_ServerRequestMapMarker");
static_assert(sizeof(SQMapMarkerInputComponent_ServerRequestMapMarker) == 0x000038, "Wrong size on SQMapMarkerInputComponent_ServerRequestMapMarker");
static_assert(offsetof(SQMapMarkerInputComponent_ServerRequestMapMarker, MarkerGameplayData) == 0x000000, "Member 'SQMapMarkerInputComponent_ServerRequestMapMarker::MarkerGameplayData' has a wrong offset!");

// Function Squad.SQMapMarkerInputComponent.ServerRequestRemoveMapMarker
// 0x0001 (0x0001 - 0x0000)
struct SQMapMarkerInputComponent_ServerRequestRemoveMapMarker final
{
public:
	uint8                                         ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapMarkerInputComponent_ServerRequestRemoveMapMarker) == 0x000001, "Wrong alignment on SQMapMarkerInputComponent_ServerRequestRemoveMapMarker");
static_assert(sizeof(SQMapMarkerInputComponent_ServerRequestRemoveMapMarker) == 0x000001, "Wrong size on SQMapMarkerInputComponent_ServerRequestRemoveMapMarker");
static_assert(offsetof(SQMapMarkerInputComponent_ServerRequestRemoveMapMarker, ID) == 0x000000, "Member 'SQMapMarkerInputComponent_ServerRequestRemoveMapMarker::ID' has a wrong offset!");

// Function Squad.SQCreateSquadButton.SquadNameTextChanged
// 0x0018 (0x0018 - 0x0000)
struct SQCreateSquadButton_SquadNameTextChanged final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCreateSquadButton_SquadNameTextChanged) == 0x000008, "Wrong alignment on SQCreateSquadButton_SquadNameTextChanged");
static_assert(sizeof(SQCreateSquadButton_SquadNameTextChanged) == 0x000018, "Wrong size on SQCreateSquadButton_SquadNameTextChanged");
static_assert(offsetof(SQCreateSquadButton_SquadNameTextChanged, Text) == 0x000000, "Member 'SQCreateSquadButton_SquadNameTextChanged::Text' has a wrong offset!");

// Function Squad.SQCreateSquadButton.SquadNameTextCommit
// 0x0020 (0x0020 - 0x0000)
struct SQCreateSquadButton_SquadNameTextCommit final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	ETextCommit                                   CommitMethodEnum;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A1[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQCreateSquadButton_SquadNameTextCommit) == 0x000008, "Wrong alignment on SQCreateSquadButton_SquadNameTextCommit");
static_assert(sizeof(SQCreateSquadButton_SquadNameTextCommit) == 0x000020, "Wrong size on SQCreateSquadButton_SquadNameTextCommit");
static_assert(offsetof(SQCreateSquadButton_SquadNameTextCommit, Text) == 0x000000, "Member 'SQCreateSquadButton_SquadNameTextCommit::Text' has a wrong offset!");
static_assert(offsetof(SQCreateSquadButton_SquadNameTextCommit, CommitMethodEnum) == 0x000018, "Member 'SQCreateSquadButton_SquadNameTextCommit::CommitMethodEnum' has a wrong offset!");

// Function Squad.SQCustomizationScreen.CreateEmotesGrid
// 0x0010 (0x0010 - 0x0000)
struct SQCustomizationScreen_CreateEmotesGrid final
{
public:
	class UUniformGridPanel*                      GridParent;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniformSize;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A4[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQCustomizationScreen_CreateEmotesGrid) == 0x000008, "Wrong alignment on SQCustomizationScreen_CreateEmotesGrid");
static_assert(sizeof(SQCustomizationScreen_CreateEmotesGrid) == 0x000010, "Wrong size on SQCustomizationScreen_CreateEmotesGrid");
static_assert(offsetof(SQCustomizationScreen_CreateEmotesGrid, GridParent) == 0x000000, "Member 'SQCustomizationScreen_CreateEmotesGrid::GridParent' has a wrong offset!");
static_assert(offsetof(SQCustomizationScreen_CreateEmotesGrid, UniformSize) == 0x000008, "Member 'SQCustomizationScreen_CreateEmotesGrid::UniformSize' has a wrong offset!");

// Function Squad.SQCustomizationScreen.CreateEmotesGridFromBundle
// 0x0020 (0x0020 - 0x0000)
struct SQCustomizationScreen_CreateEmotesGridFromBundle final
{
public:
	class UUniformGridPanel*                      GridParent;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniformSize;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A5[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UODKBazaarBundle*                       Bundle;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlip;                                             // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A6[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQCustomizationScreen_CreateEmotesGridFromBundle) == 0x000008, "Wrong alignment on SQCustomizationScreen_CreateEmotesGridFromBundle");
static_assert(sizeof(SQCustomizationScreen_CreateEmotesGridFromBundle) == 0x000020, "Wrong size on SQCustomizationScreen_CreateEmotesGridFromBundle");
static_assert(offsetof(SQCustomizationScreen_CreateEmotesGridFromBundle, GridParent) == 0x000000, "Member 'SQCustomizationScreen_CreateEmotesGridFromBundle::GridParent' has a wrong offset!");
static_assert(offsetof(SQCustomizationScreen_CreateEmotesGridFromBundle, UniformSize) == 0x000008, "Member 'SQCustomizationScreen_CreateEmotesGridFromBundle::UniformSize' has a wrong offset!");
static_assert(offsetof(SQCustomizationScreen_CreateEmotesGridFromBundle, Bundle) == 0x000010, "Member 'SQCustomizationScreen_CreateEmotesGridFromBundle::Bundle' has a wrong offset!");
static_assert(offsetof(SQCustomizationScreen_CreateEmotesGridFromBundle, bFlip) == 0x000018, "Member 'SQCustomizationScreen_CreateEmotesGridFromBundle::bFlip' has a wrong offset!");

// Function Squad.SQCustomizationScreen.CreateEmotesList
// 0x0008 (0x0008 - 0x0000)
struct SQCustomizationScreen_CreateEmotesList final
{
public:
	class UListView*                              ListParent;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCustomizationScreen_CreateEmotesList) == 0x000008, "Wrong alignment on SQCustomizationScreen_CreateEmotesList");
static_assert(sizeof(SQCustomizationScreen_CreateEmotesList) == 0x000008, "Wrong size on SQCustomizationScreen_CreateEmotesList");
static_assert(offsetof(SQCustomizationScreen_CreateEmotesList, ListParent) == 0x000000, "Member 'SQCustomizationScreen_CreateEmotesList::ListParent' has a wrong offset!");

// Function Squad.SQCustomizationScreen.CreateFactionGrid
// 0x0010 (0x0010 - 0x0000)
struct SQCustomizationScreen_CreateFactionGrid final
{
public:
	class UUniformGridPanel*                      GridParent;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniformSize;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyShowFactionsWithOwnedSkins;                   // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A7[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQCustomizationScreen_CreateFactionGrid) == 0x000008, "Wrong alignment on SQCustomizationScreen_CreateFactionGrid");
static_assert(sizeof(SQCustomizationScreen_CreateFactionGrid) == 0x000010, "Wrong size on SQCustomizationScreen_CreateFactionGrid");
static_assert(offsetof(SQCustomizationScreen_CreateFactionGrid, GridParent) == 0x000000, "Member 'SQCustomizationScreen_CreateFactionGrid::GridParent' has a wrong offset!");
static_assert(offsetof(SQCustomizationScreen_CreateFactionGrid, UniformSize) == 0x000008, "Member 'SQCustomizationScreen_CreateFactionGrid::UniformSize' has a wrong offset!");
static_assert(offsetof(SQCustomizationScreen_CreateFactionGrid, bOnlyShowFactionsWithOwnedSkins) == 0x00000C, "Member 'SQCustomizationScreen_CreateFactionGrid::bOnlyShowFactionsWithOwnedSkins' has a wrong offset!");

// Function Squad.SQCustomizationScreen.CreateWeaponSkinGrid
// 0x0010 (0x0010 - 0x0000)
struct SQCustomizationScreen_CreateWeaponSkinGrid final
{
public:
	class UUniformGridPanel*                      GridParent;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniformSize;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A8[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQCustomizationScreen_CreateWeaponSkinGrid) == 0x000008, "Wrong alignment on SQCustomizationScreen_CreateWeaponSkinGrid");
static_assert(sizeof(SQCustomizationScreen_CreateWeaponSkinGrid) == 0x000010, "Wrong size on SQCustomizationScreen_CreateWeaponSkinGrid");
static_assert(offsetof(SQCustomizationScreen_CreateWeaponSkinGrid, GridParent) == 0x000000, "Member 'SQCustomizationScreen_CreateWeaponSkinGrid::GridParent' has a wrong offset!");
static_assert(offsetof(SQCustomizationScreen_CreateWeaponSkinGrid, UniformSize) == 0x000008, "Member 'SQCustomizationScreen_CreateWeaponSkinGrid::UniformSize' has a wrong offset!");

// Function Squad.SQCustomizationScreen.CreateWeaponSkinsGridFromBundle
// 0x0020 (0x0020 - 0x0000)
struct SQCustomizationScreen_CreateWeaponSkinsGridFromBundle final
{
public:
	class UUniformGridPanel*                      GridParent;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniformSize;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A9[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UODKBazaarBundle*                       Bundle;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlip;                                             // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10AA[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQCustomizationScreen_CreateWeaponSkinsGridFromBundle) == 0x000008, "Wrong alignment on SQCustomizationScreen_CreateWeaponSkinsGridFromBundle");
static_assert(sizeof(SQCustomizationScreen_CreateWeaponSkinsGridFromBundle) == 0x000020, "Wrong size on SQCustomizationScreen_CreateWeaponSkinsGridFromBundle");
static_assert(offsetof(SQCustomizationScreen_CreateWeaponSkinsGridFromBundle, GridParent) == 0x000000, "Member 'SQCustomizationScreen_CreateWeaponSkinsGridFromBundle::GridParent' has a wrong offset!");
static_assert(offsetof(SQCustomizationScreen_CreateWeaponSkinsGridFromBundle, UniformSize) == 0x000008, "Member 'SQCustomizationScreen_CreateWeaponSkinsGridFromBundle::UniformSize' has a wrong offset!");
static_assert(offsetof(SQCustomizationScreen_CreateWeaponSkinsGridFromBundle, Bundle) == 0x000010, "Member 'SQCustomizationScreen_CreateWeaponSkinsGridFromBundle::Bundle' has a wrong offset!");
static_assert(offsetof(SQCustomizationScreen_CreateWeaponSkinsGridFromBundle, bFlip) == 0x000018, "Member 'SQCustomizationScreen_CreateWeaponSkinsGridFromBundle::bFlip' has a wrong offset!");

// Function Squad.SQCustomizationScreen.CreateWeaponSkinsGridFromFaction
// 0x0018 (0x0018 - 0x0000)
struct SQCustomizationScreen_CreateWeaponSkinsGridFromFaction final
{
public:
	class UUniformGridPanel*                      GridParent;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniformSize;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FactionName;                                       // 0x000C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowOnlyOwned;                                    // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlip;                                             // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10AB[0x2];                                     // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQCustomizationScreen_CreateWeaponSkinsGridFromFaction) == 0x000008, "Wrong alignment on SQCustomizationScreen_CreateWeaponSkinsGridFromFaction");
static_assert(sizeof(SQCustomizationScreen_CreateWeaponSkinsGridFromFaction) == 0x000018, "Wrong size on SQCustomizationScreen_CreateWeaponSkinsGridFromFaction");
static_assert(offsetof(SQCustomizationScreen_CreateWeaponSkinsGridFromFaction, GridParent) == 0x000000, "Member 'SQCustomizationScreen_CreateWeaponSkinsGridFromFaction::GridParent' has a wrong offset!");
static_assert(offsetof(SQCustomizationScreen_CreateWeaponSkinsGridFromFaction, UniformSize) == 0x000008, "Member 'SQCustomizationScreen_CreateWeaponSkinsGridFromFaction::UniformSize' has a wrong offset!");
static_assert(offsetof(SQCustomizationScreen_CreateWeaponSkinsGridFromFaction, FactionName) == 0x00000C, "Member 'SQCustomizationScreen_CreateWeaponSkinsGridFromFaction::FactionName' has a wrong offset!");
static_assert(offsetof(SQCustomizationScreen_CreateWeaponSkinsGridFromFaction, bShowOnlyOwned) == 0x000014, "Member 'SQCustomizationScreen_CreateWeaponSkinsGridFromFaction::bShowOnlyOwned' has a wrong offset!");
static_assert(offsetof(SQCustomizationScreen_CreateWeaponSkinsGridFromFaction, bFlip) == 0x000015, "Member 'SQCustomizationScreen_CreateWeaponSkinsGridFromFaction::bFlip' has a wrong offset!");

// Function Squad.SQCustomizationScreen.GetOwnedEmotesAsWidget
// 0x0010 (0x0010 - 0x0000)
struct SQCustomizationScreen_GetOwnedEmotesAsWidget final
{
public:
	TArray<class USQEmoteItemWidget*>             ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCustomizationScreen_GetOwnedEmotesAsWidget) == 0x000008, "Wrong alignment on SQCustomizationScreen_GetOwnedEmotesAsWidget");
static_assert(sizeof(SQCustomizationScreen_GetOwnedEmotesAsWidget) == 0x000010, "Wrong size on SQCustomizationScreen_GetOwnedEmotesAsWidget");
static_assert(offsetof(SQCustomizationScreen_GetOwnedEmotesAsWidget, ReturnValue) == 0x000000, "Member 'SQCustomizationScreen_GetOwnedEmotesAsWidget::ReturnValue' has a wrong offset!");

// Function Squad.SQCustomizationScreen.OnEmoteHovered
// 0x0008 (0x0008 - 0x0000)
struct SQCustomizationScreen_OnEmoteHovered final
{
public:
	class USQEmotesData*                          EmoteData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCustomizationScreen_OnEmoteHovered) == 0x000008, "Wrong alignment on SQCustomizationScreen_OnEmoteHovered");
static_assert(sizeof(SQCustomizationScreen_OnEmoteHovered) == 0x000008, "Wrong size on SQCustomizationScreen_OnEmoteHovered");
static_assert(offsetof(SQCustomizationScreen_OnEmoteHovered, EmoteData) == 0x000000, "Member 'SQCustomizationScreen_OnEmoteHovered::EmoteData' has a wrong offset!");

// Function Squad.SQCustomizationScreen.OnEmoteSelected
// 0x0008 (0x0008 - 0x0000)
struct SQCustomizationScreen_OnEmoteSelected final
{
public:
	class USQEmotesData*                          EmoteData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCustomizationScreen_OnEmoteSelected) == 0x000008, "Wrong alignment on SQCustomizationScreen_OnEmoteSelected");
static_assert(sizeof(SQCustomizationScreen_OnEmoteSelected) == 0x000008, "Wrong size on SQCustomizationScreen_OnEmoteSelected");
static_assert(offsetof(SQCustomizationScreen_OnEmoteSelected, EmoteData) == 0x000000, "Member 'SQCustomizationScreen_OnEmoteSelected::EmoteData' has a wrong offset!");

// Function Squad.SQCustomizationScreen.OnFactionHovered
// 0x0008 (0x0008 - 0x0000)
struct SQCustomizationScreen_OnFactionHovered final
{
public:
	class FName                                   FactionName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCustomizationScreen_OnFactionHovered) == 0x000004, "Wrong alignment on SQCustomizationScreen_OnFactionHovered");
static_assert(sizeof(SQCustomizationScreen_OnFactionHovered) == 0x000008, "Wrong size on SQCustomizationScreen_OnFactionHovered");
static_assert(offsetof(SQCustomizationScreen_OnFactionHovered, FactionName) == 0x000000, "Member 'SQCustomizationScreen_OnFactionHovered::FactionName' has a wrong offset!");

// Function Squad.SQCustomizationScreen.OnFactionSelected
// 0x0008 (0x0008 - 0x0000)
struct SQCustomizationScreen_OnFactionSelected final
{
public:
	class FName                                   FactionName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCustomizationScreen_OnFactionSelected) == 0x000004, "Wrong alignment on SQCustomizationScreen_OnFactionSelected");
static_assert(sizeof(SQCustomizationScreen_OnFactionSelected) == 0x000008, "Wrong size on SQCustomizationScreen_OnFactionSelected");
static_assert(offsetof(SQCustomizationScreen_OnFactionSelected, FactionName) == 0x000000, "Member 'SQCustomizationScreen_OnFactionSelected::FactionName' has a wrong offset!");

// Function Squad.SQCustomizationScreen.OnPurchaseCompleted
// 0x0010 (0x0010 - 0x0000)
struct SQCustomizationScreen_OnPurchaseCompleted final
{
public:
	struct FODKBazaarPurchaseCompletedData        PurchaseCompletedData;                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCustomizationScreen_OnPurchaseCompleted) == 0x000008, "Wrong alignment on SQCustomizationScreen_OnPurchaseCompleted");
static_assert(sizeof(SQCustomizationScreen_OnPurchaseCompleted) == 0x000010, "Wrong size on SQCustomizationScreen_OnPurchaseCompleted");
static_assert(offsetof(SQCustomizationScreen_OnPurchaseCompleted, PurchaseCompletedData) == 0x000000, "Member 'SQCustomizationScreen_OnPurchaseCompleted::PurchaseCompletedData' has a wrong offset!");

// Function Squad.SQCustomizationScreen.OnWeaponSkinHovered
// 0x0008 (0x0008 - 0x0000)
struct SQCustomizationScreen_OnWeaponSkinHovered final
{
public:
	class USQItemSkinCollection*                  SkinData;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCustomizationScreen_OnWeaponSkinHovered) == 0x000008, "Wrong alignment on SQCustomizationScreen_OnWeaponSkinHovered");
static_assert(sizeof(SQCustomizationScreen_OnWeaponSkinHovered) == 0x000008, "Wrong size on SQCustomizationScreen_OnWeaponSkinHovered");
static_assert(offsetof(SQCustomizationScreen_OnWeaponSkinHovered, SkinData) == 0x000000, "Member 'SQCustomizationScreen_OnWeaponSkinHovered::SkinData' has a wrong offset!");

// Function Squad.SQCustomizationScreen.OnWeaponSkinSelected
// 0x0008 (0x0008 - 0x0000)
struct SQCustomizationScreen_OnWeaponSkinSelected final
{
public:
	class FName                                   SkinName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQCustomizationScreen_OnWeaponSkinSelected) == 0x000004, "Wrong alignment on SQCustomizationScreen_OnWeaponSkinSelected");
static_assert(sizeof(SQCustomizationScreen_OnWeaponSkinSelected) == 0x000008, "Wrong size on SQCustomizationScreen_OnWeaponSkinSelected");
static_assert(offsetof(SQCustomizationScreen_OnWeaponSkinSelected, SkinName) == 0x000000, "Member 'SQCustomizationScreen_OnWeaponSkinSelected::SkinName' has a wrong offset!");

// Function Squad.SQMapIconWidget.IsMarkerVisible
// 0x0001 (0x0001 - 0x0000)
struct SQMapIconWidget_IsMarkerVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapIconWidget_IsMarkerVisible) == 0x000001, "Wrong alignment on SQMapIconWidget_IsMarkerVisible");
static_assert(sizeof(SQMapIconWidget_IsMarkerVisible) == 0x000001, "Wrong size on SQMapIconWidget_IsMarkerVisible");
static_assert(offsetof(SQMapIconWidget_IsMarkerVisible, ReturnValue) == 0x000000, "Member 'SQMapIconWidget_IsMarkerVisible::ReturnValue' has a wrong offset!");

// Function Squad.SQMapIconWidget.GetEnemyColor
// 0x0010 (0x0010 - 0x0000)
struct SQMapIconWidget_GetEnemyColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapIconWidget_GetEnemyColor) == 0x000004, "Wrong alignment on SQMapIconWidget_GetEnemyColor");
static_assert(sizeof(SQMapIconWidget_GetEnemyColor) == 0x000010, "Wrong size on SQMapIconWidget_GetEnemyColor");
static_assert(offsetof(SQMapIconWidget_GetEnemyColor, ReturnValue) == 0x000000, "Member 'SQMapIconWidget_GetEnemyColor::ReturnValue' has a wrong offset!");

// Function Squad.SQMapIconWidget.GetFriendlyColor
// 0x0010 (0x0010 - 0x0000)
struct SQMapIconWidget_GetFriendlyColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapIconWidget_GetFriendlyColor) == 0x000004, "Wrong alignment on SQMapIconWidget_GetFriendlyColor");
static_assert(sizeof(SQMapIconWidget_GetFriendlyColor) == 0x000010, "Wrong size on SQMapIconWidget_GetFriendlyColor");
static_assert(offsetof(SQMapIconWidget_GetFriendlyColor, ReturnValue) == 0x000000, "Member 'SQMapIconWidget_GetFriendlyColor::ReturnValue' has a wrong offset!");

// Function Squad.SQMapIconWidget.GetNeutralColor
// 0x0010 (0x0010 - 0x0000)
struct SQMapIconWidget_GetNeutralColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapIconWidget_GetNeutralColor) == 0x000004, "Wrong alignment on SQMapIconWidget_GetNeutralColor");
static_assert(sizeof(SQMapIconWidget_GetNeutralColor) == 0x000010, "Wrong size on SQMapIconWidget_GetNeutralColor");
static_assert(offsetof(SQMapIconWidget_GetNeutralColor, ReturnValue) == 0x000000, "Member 'SQMapIconWidget_GetNeutralColor::ReturnValue' has a wrong offset!");

// Function Squad.SQMapIconWidget.GetSquadColor
// 0x0010 (0x0010 - 0x0000)
struct SQMapIconWidget_GetSquadColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapIconWidget_GetSquadColor) == 0x000004, "Wrong alignment on SQMapIconWidget_GetSquadColor");
static_assert(sizeof(SQMapIconWidget_GetSquadColor) == 0x000010, "Wrong size on SQMapIconWidget_GetSquadColor");
static_assert(offsetof(SQMapIconWidget_GetSquadColor, ReturnValue) == 0x000000, "Member 'SQMapIconWidget_GetSquadColor::ReturnValue' has a wrong offset!");

// Function Squad.SQMapIconWidget.ShouldMarkerUpdate
// 0x0001 (0x0001 - 0x0000)
struct SQMapIconWidget_ShouldMarkerUpdate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapIconWidget_ShouldMarkerUpdate) == 0x000001, "Wrong alignment on SQMapIconWidget_ShouldMarkerUpdate");
static_assert(sizeof(SQMapIconWidget_ShouldMarkerUpdate) == 0x000001, "Wrong size on SQMapIconWidget_ShouldMarkerUpdate");
static_assert(offsetof(SQMapIconWidget_ShouldMarkerUpdate, ReturnValue) == 0x000000, "Member 'SQMapIconWidget_ShouldMarkerUpdate::ReturnValue' has a wrong offset!");

// Function Squad.SQMapPawnIconWidget.GetWidgetPlayerState
// 0x0008 (0x0008 - 0x0000)
struct SQMapPawnIconWidget_GetWidgetPlayerState final
{
public:
	class ASQPlayerState*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapPawnIconWidget_GetWidgetPlayerState) == 0x000008, "Wrong alignment on SQMapPawnIconWidget_GetWidgetPlayerState");
static_assert(sizeof(SQMapPawnIconWidget_GetWidgetPlayerState) == 0x000008, "Wrong size on SQMapPawnIconWidget_GetWidgetPlayerState");
static_assert(offsetof(SQMapPawnIconWidget_GetWidgetPlayerState, ReturnValue) == 0x000000, "Member 'SQMapPawnIconWidget_GetWidgetPlayerState::ReturnValue' has a wrong offset!");

// Function Squad.SQMapMarkerBase.GetMapMarkerData
// 0x00C8 (0x00C8 - 0x0000)
struct SQMapMarkerBase_GetMapMarkerData final
{
public:
	struct FSQMapMarkerVisualData                 ReturnValue;                                       // 0x0000(0x00C8)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapMarkerBase_GetMapMarkerData) == 0x000008, "Wrong alignment on SQMapMarkerBase_GetMapMarkerData");
static_assert(sizeof(SQMapMarkerBase_GetMapMarkerData) == 0x0000C8, "Wrong size on SQMapMarkerBase_GetMapMarkerData");
static_assert(offsetof(SQMapMarkerBase_GetMapMarkerData, ReturnValue) == 0x000000, "Member 'SQMapMarkerBase_GetMapMarkerData::ReturnValue' has a wrong offset!");

// Function Squad.SQMapMarkerBase.OnScaleChanged
// 0x0004 (0x0004 - 0x0000)
struct SQMapMarkerBase_OnScaleChanged final
{
public:
	float                                         ScaleValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapMarkerBase_OnScaleChanged) == 0x000004, "Wrong alignment on SQMapMarkerBase_OnScaleChanged");
static_assert(sizeof(SQMapMarkerBase_OnScaleChanged) == 0x000004, "Wrong size on SQMapMarkerBase_OnScaleChanged");
static_assert(offsetof(SQMapMarkerBase_OnScaleChanged, ScaleValue) == 0x000000, "Member 'SQMapMarkerBase_OnScaleChanged::ScaleValue' has a wrong offset!");

// Function Squad.SQMapMarkerBase.SetupMapMarker
// 0x0008 (0x0008 - 0x0000)
struct SQMapMarkerBase_SetupMapMarker final
{
public:
	class UCanvasPanelSlot*                       PanelSlot;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapMarkerBase_SetupMapMarker) == 0x000008, "Wrong alignment on SQMapMarkerBase_SetupMapMarker");
static_assert(sizeof(SQMapMarkerBase_SetupMapMarker) == 0x000008, "Wrong size on SQMapMarkerBase_SetupMapMarker");
static_assert(offsetof(SQMapMarkerBase_SetupMapMarker, PanelSlot) == 0x000000, "Member 'SQMapMarkerBase_SetupMapMarker::PanelSlot' has a wrong offset!");

// Function Squad.SQMovementComponentBase.ClientAckGoodMove
// 0x0004 (0x0004 - 0x0000)
struct SQMovementComponentBase_ClientAckGoodMove final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMovementComponentBase_ClientAckGoodMove) == 0x000004, "Wrong alignment on SQMovementComponentBase_ClientAckGoodMove");
static_assert(sizeof(SQMovementComponentBase_ClientAckGoodMove) == 0x000004, "Wrong size on SQMovementComponentBase_ClientAckGoodMove");
static_assert(offsetof(SQMovementComponentBase_ClientAckGoodMove, Timestamp) == 0x000000, "Member 'SQMovementComponentBase_ClientAckGoodMove::Timestamp' has a wrong offset!");

// Function Squad.SQMovementComponentBase.ClientAdjustPosition
// 0x001C (0x001C - 0x0000)
struct SQMovementComponentBase_ClientAdjustPosition final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationZeroBased;                                 // 0x0004(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InVelocity;                                        // 0x0010(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMovementComponentBase_ClientAdjustPosition) == 0x000004, "Wrong alignment on SQMovementComponentBase_ClientAdjustPosition");
static_assert(sizeof(SQMovementComponentBase_ClientAdjustPosition) == 0x00001C, "Wrong size on SQMovementComponentBase_ClientAdjustPosition");
static_assert(offsetof(SQMovementComponentBase_ClientAdjustPosition, Timestamp) == 0x000000, "Member 'SQMovementComponentBase_ClientAdjustPosition::Timestamp' has a wrong offset!");
static_assert(offsetof(SQMovementComponentBase_ClientAdjustPosition, LocationZeroBased) == 0x000004, "Member 'SQMovementComponentBase_ClientAdjustPosition::LocationZeroBased' has a wrong offset!");
static_assert(offsetof(SQMovementComponentBase_ClientAdjustPosition, InVelocity) == 0x000010, "Member 'SQMovementComponentBase_ClientAdjustPosition::InVelocity' has a wrong offset!");

// Function Squad.SQMovementComponentBase.ClientAdjustPositionAndRotation
// 0x0028 (0x0028 - 0x0000)
struct SQMovementComponentBase_ClientAdjustPositionAndRotation final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LocationZeroBased;                                 // 0x0004(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InVelocity;                                        // 0x0010(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x001C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMovementComponentBase_ClientAdjustPositionAndRotation) == 0x000004, "Wrong alignment on SQMovementComponentBase_ClientAdjustPositionAndRotation");
static_assert(sizeof(SQMovementComponentBase_ClientAdjustPositionAndRotation) == 0x000028, "Wrong size on SQMovementComponentBase_ClientAdjustPositionAndRotation");
static_assert(offsetof(SQMovementComponentBase_ClientAdjustPositionAndRotation, Timestamp) == 0x000000, "Member 'SQMovementComponentBase_ClientAdjustPositionAndRotation::Timestamp' has a wrong offset!");
static_assert(offsetof(SQMovementComponentBase_ClientAdjustPositionAndRotation, LocationZeroBased) == 0x000004, "Member 'SQMovementComponentBase_ClientAdjustPositionAndRotation::LocationZeroBased' has a wrong offset!");
static_assert(offsetof(SQMovementComponentBase_ClientAdjustPositionAndRotation, InVelocity) == 0x000010, "Member 'SQMovementComponentBase_ClientAdjustPositionAndRotation::InVelocity' has a wrong offset!");
static_assert(offsetof(SQMovementComponentBase_ClientAdjustPositionAndRotation, Rotation) == 0x00001C, "Member 'SQMovementComponentBase_ClientAdjustPositionAndRotation::Rotation' has a wrong offset!");

// Function Squad.SQMovementComponentBase.ServerMove
// 0x0010 (0x0010 - 0x0000)
struct SQMovementComponentBase_ServerMove final
{
public:
	TArray<uint8>                                 Move;                                              // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMovementComponentBase_ServerMove) == 0x000008, "Wrong alignment on SQMovementComponentBase_ServerMove");
static_assert(sizeof(SQMovementComponentBase_ServerMove) == 0x000010, "Wrong size on SQMovementComponentBase_ServerMove");
static_assert(offsetof(SQMovementComponentBase_ServerMove, Move) == 0x000000, "Member 'SQMovementComponentBase_ServerMove::Move' has a wrong offset!");

// Function Squad.SQMovementComponentBase.ServerMoveDual
// 0x0020 (0x0020 - 0x0000)
struct SQMovementComponentBase_ServerMoveDual final
{
public:
	TArray<uint8>                                 Move1;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Move2;                                             // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMovementComponentBase_ServerMoveDual) == 0x000008, "Wrong alignment on SQMovementComponentBase_ServerMoveDual");
static_assert(sizeof(SQMovementComponentBase_ServerMoveDual) == 0x000020, "Wrong size on SQMovementComponentBase_ServerMoveDual");
static_assert(offsetof(SQMovementComponentBase_ServerMoveDual, Move1) == 0x000000, "Member 'SQMovementComponentBase_ServerMoveDual::Move1' has a wrong offset!");
static_assert(offsetof(SQMovementComponentBase_ServerMoveDual, Move2) == 0x000010, "Member 'SQMovementComponentBase_ServerMoveDual::Move2' has a wrong offset!");

// Function Squad.SQMovementComponentBase.ServerMoveOld
// 0x0010 (0x0010 - 0x0000)
struct SQMovementComponentBase_ServerMoveOld final
{
public:
	TArray<uint8>                                 Move;                                              // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMovementComponentBase_ServerMoveOld) == 0x000008, "Wrong alignment on SQMovementComponentBase_ServerMoveOld");
static_assert(sizeof(SQMovementComponentBase_ServerMoveOld) == 0x000010, "Wrong size on SQMovementComponentBase_ServerMoveOld");
static_assert(offsetof(SQMovementComponentBase_ServerMoveOld, Move) == 0x000000, "Member 'SQMovementComponentBase_ServerMoveOld::Move' has a wrong offset!");

// Function Squad.SQMovementComponentBase.GetCurrentAcceleration
// 0x000C (0x000C - 0x0000)
struct SQMovementComponentBase_GetCurrentAcceleration final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMovementComponentBase_GetCurrentAcceleration) == 0x000004, "Wrong alignment on SQMovementComponentBase_GetCurrentAcceleration");
static_assert(sizeof(SQMovementComponentBase_GetCurrentAcceleration) == 0x00000C, "Wrong size on SQMovementComponentBase_GetCurrentAcceleration");
static_assert(offsetof(SQMovementComponentBase_GetCurrentAcceleration, ReturnValue) == 0x000000, "Member 'SQMovementComponentBase_GetCurrentAcceleration::ReturnValue' has a wrong offset!");

// Function Squad.SQMovementComponentBase.GetCurrentRotationalAcceleration
// 0x000C (0x000C - 0x0000)
struct SQMovementComponentBase_GetCurrentRotationalAcceleration final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMovementComponentBase_GetCurrentRotationalAcceleration) == 0x000004, "Wrong alignment on SQMovementComponentBase_GetCurrentRotationalAcceleration");
static_assert(sizeof(SQMovementComponentBase_GetCurrentRotationalAcceleration) == 0x00000C, "Wrong size on SQMovementComponentBase_GetCurrentRotationalAcceleration");
static_assert(offsetof(SQMovementComponentBase_GetCurrentRotationalAcceleration, ReturnValue) == 0x000000, "Member 'SQMovementComponentBase_GetCurrentRotationalAcceleration::ReturnValue' has a wrong offset!");

// Function Squad.SQMovementComponentBase.GetCurrentRotationalVelocity
// 0x000C (0x000C - 0x0000)
struct SQMovementComponentBase_GetCurrentRotationalVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMovementComponentBase_GetCurrentRotationalVelocity) == 0x000004, "Wrong alignment on SQMovementComponentBase_GetCurrentRotationalVelocity");
static_assert(sizeof(SQMovementComponentBase_GetCurrentRotationalVelocity) == 0x00000C, "Wrong size on SQMovementComponentBase_GetCurrentRotationalVelocity");
static_assert(offsetof(SQMovementComponentBase_GetCurrentRotationalVelocity, ReturnValue) == 0x000000, "Member 'SQMovementComponentBase_GetCurrentRotationalVelocity::ReturnValue' has a wrong offset!");

// Function Squad.SQMovementComponentBase.GetCurrentVelocity
// 0x000C (0x000C - 0x0000)
struct SQMovementComponentBase_GetCurrentVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMovementComponentBase_GetCurrentVelocity) == 0x000004, "Wrong alignment on SQMovementComponentBase_GetCurrentVelocity");
static_assert(sizeof(SQMovementComponentBase_GetCurrentVelocity) == 0x00000C, "Wrong size on SQMovementComponentBase_GetCurrentVelocity");
static_assert(offsetof(SQMovementComponentBase_GetCurrentVelocity, ReturnValue) == 0x000000, "Member 'SQMovementComponentBase_GetCurrentVelocity::ReturnValue' has a wrong offset!");

// Function Squad.SQMovementComponentBase.IsLocallyControlledComponent
// 0x0001 (0x0001 - 0x0000)
struct SQMovementComponentBase_IsLocallyControlledComponent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMovementComponentBase_IsLocallyControlledComponent) == 0x000001, "Wrong alignment on SQMovementComponentBase_IsLocallyControlledComponent");
static_assert(sizeof(SQMovementComponentBase_IsLocallyControlledComponent) == 0x000001, "Wrong size on SQMovementComponentBase_IsLocallyControlledComponent");
static_assert(offsetof(SQMovementComponentBase_IsLocallyControlledComponent, ReturnValue) == 0x000000, "Member 'SQMovementComponentBase_IsLocallyControlledComponent::ReturnValue' has a wrong offset!");

// Function Squad.SQMovementComponentBase.IsServerComponent
// 0x0001 (0x0001 - 0x0000)
struct SQMovementComponentBase_IsServerComponent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMovementComponentBase_IsServerComponent) == 0x000001, "Wrong alignment on SQMovementComponentBase_IsServerComponent");
static_assert(sizeof(SQMovementComponentBase_IsServerComponent) == 0x000001, "Wrong size on SQMovementComponentBase_IsServerComponent");
static_assert(offsetof(SQMovementComponentBase_IsServerComponent, ReturnValue) == 0x000000, "Member 'SQMovementComponentBase_IsServerComponent::ReturnValue' has a wrong offset!");

// Function Squad.SQMovementComponentBase.IsSimulatedProxy
// 0x0001 (0x0001 - 0x0000)
struct SQMovementComponentBase_IsSimulatedProxy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMovementComponentBase_IsSimulatedProxy) == 0x000001, "Wrong alignment on SQMovementComponentBase_IsSimulatedProxy");
static_assert(sizeof(SQMovementComponentBase_IsSimulatedProxy) == 0x000001, "Wrong size on SQMovementComponentBase_IsSimulatedProxy");
static_assert(offsetof(SQMovementComponentBase_IsSimulatedProxy, ReturnValue) == 0x000000, "Member 'SQMovementComponentBase_IsSimulatedProxy::ReturnValue' has a wrong offset!");

// Function Squad.SQDataGatheringComponent.RecordHeatMap
// 0x0030 (0x0030 - 0x0000)
struct SQDataGatheringComponent_RecordHeatMap final
{
public:
	float                                         XStepSize;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YStepSize;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightOffset;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordRawValues;                                  // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10B7[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PositionWaitTime;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawRotationAngle;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchRotationAngle;                                // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10B8[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Filename;                                          // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDataGatheringComponent_RecordHeatMap) == 0x000008, "Wrong alignment on SQDataGatheringComponent_RecordHeatMap");
static_assert(sizeof(SQDataGatheringComponent_RecordHeatMap) == 0x000030, "Wrong size on SQDataGatheringComponent_RecordHeatMap");
static_assert(offsetof(SQDataGatheringComponent_RecordHeatMap, XStepSize) == 0x000000, "Member 'SQDataGatheringComponent_RecordHeatMap::XStepSize' has a wrong offset!");
static_assert(offsetof(SQDataGatheringComponent_RecordHeatMap, YStepSize) == 0x000004, "Member 'SQDataGatheringComponent_RecordHeatMap::YStepSize' has a wrong offset!");
static_assert(offsetof(SQDataGatheringComponent_RecordHeatMap, HeightOffset) == 0x000008, "Member 'SQDataGatheringComponent_RecordHeatMap::HeightOffset' has a wrong offset!");
static_assert(offsetof(SQDataGatheringComponent_RecordHeatMap, bRecordRawValues) == 0x00000C, "Member 'SQDataGatheringComponent_RecordHeatMap::bRecordRawValues' has a wrong offset!");
static_assert(offsetof(SQDataGatheringComponent_RecordHeatMap, PositionWaitTime) == 0x000010, "Member 'SQDataGatheringComponent_RecordHeatMap::PositionWaitTime' has a wrong offset!");
static_assert(offsetof(SQDataGatheringComponent_RecordHeatMap, YawRotationAngle) == 0x000014, "Member 'SQDataGatheringComponent_RecordHeatMap::YawRotationAngle' has a wrong offset!");
static_assert(offsetof(SQDataGatheringComponent_RecordHeatMap, PitchRotationAngle) == 0x000018, "Member 'SQDataGatheringComponent_RecordHeatMap::PitchRotationAngle' has a wrong offset!");
static_assert(offsetof(SQDataGatheringComponent_RecordHeatMap, Filename) == 0x000020, "Member 'SQDataGatheringComponent_RecordHeatMap::Filename' has a wrong offset!");

// Function Squad.SQDataGatheringComponent.RunMultiMapHeatMap
// 0x0010 (0x0010 - 0x0000)
struct SQDataGatheringComponent_RunMultiMapHeatMap final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDataGatheringComponent_RunMultiMapHeatMap) == 0x000008, "Wrong alignment on SQDataGatheringComponent_RunMultiMapHeatMap");
static_assert(sizeof(SQDataGatheringComponent_RunMultiMapHeatMap) == 0x000010, "Wrong size on SQDataGatheringComponent_RunMultiMapHeatMap");
static_assert(offsetof(SQDataGatheringComponent_RunMultiMapHeatMap, Filename) == 0x000000, "Member 'SQDataGatheringComponent_RunMultiMapHeatMap::Filename' has a wrong offset!");

// Function Squad.SQHUD.AddChatMessage
// 0x0038 (0x0038 - 0x0000)
struct SQHUD_AddChatMessage final
{
public:
	class ASQPlayerState*                         Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQChat                                       Channel;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C6[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x001C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MessageLifetimeOverride;                           // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQNotificationTypes                          NotificationType;                                  // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C7[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQHUD_AddChatMessage) == 0x000008, "Wrong alignment on SQHUD_AddChatMessage");
static_assert(sizeof(SQHUD_AddChatMessage) == 0x000038, "Wrong size on SQHUD_AddChatMessage");
static_assert(offsetof(SQHUD_AddChatMessage, Player) == 0x000000, "Member 'SQHUD_AddChatMessage::Player' has a wrong offset!");
static_assert(offsetof(SQHUD_AddChatMessage, Message) == 0x000008, "Member 'SQHUD_AddChatMessage::Message' has a wrong offset!");
static_assert(offsetof(SQHUD_AddChatMessage, Channel) == 0x000018, "Member 'SQHUD_AddChatMessage::Channel' has a wrong offset!");
static_assert(offsetof(SQHUD_AddChatMessage, Color) == 0x00001C, "Member 'SQHUD_AddChatMessage::Color' has a wrong offset!");
static_assert(offsetof(SQHUD_AddChatMessage, MessageLifetimeOverride) == 0x00002C, "Member 'SQHUD_AddChatMessage::MessageLifetimeOverride' has a wrong offset!");
static_assert(offsetof(SQHUD_AddChatMessage, NotificationType) == 0x000030, "Member 'SQHUD_AddChatMessage::NotificationType' has a wrong offset!");

// Function Squad.SQHUD.AddChatMessageDefaultColor
// 0x0028 (0x0028 - 0x0000)
struct SQHUD_AddChatMessageDefaultColor final
{
public:
	class ASQPlayerState*                         Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQChat                                       Channel;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C8[0x3];                                     // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MessageLifetimeOverride;                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQNotificationTypes                          NotificationType;                                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C9[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQHUD_AddChatMessageDefaultColor) == 0x000008, "Wrong alignment on SQHUD_AddChatMessageDefaultColor");
static_assert(sizeof(SQHUD_AddChatMessageDefaultColor) == 0x000028, "Wrong size on SQHUD_AddChatMessageDefaultColor");
static_assert(offsetof(SQHUD_AddChatMessageDefaultColor, Player) == 0x000000, "Member 'SQHUD_AddChatMessageDefaultColor::Player' has a wrong offset!");
static_assert(offsetof(SQHUD_AddChatMessageDefaultColor, Message) == 0x000008, "Member 'SQHUD_AddChatMessageDefaultColor::Message' has a wrong offset!");
static_assert(offsetof(SQHUD_AddChatMessageDefaultColor, Channel) == 0x000018, "Member 'SQHUD_AddChatMessageDefaultColor::Channel' has a wrong offset!");
static_assert(offsetof(SQHUD_AddChatMessageDefaultColor, MessageLifetimeOverride) == 0x00001C, "Member 'SQHUD_AddChatMessageDefaultColor::MessageLifetimeOverride' has a wrong offset!");
static_assert(offsetof(SQHUD_AddChatMessageDefaultColor, NotificationType) == 0x000020, "Member 'SQHUD_AddChatMessageDefaultColor::NotificationType' has a wrong offset!");

// Function Squad.SQHUD.AddInputStackState
// 0x0040 (0x0040 - 0x0000)
struct SQHUD_AddInputStackState final
{
public:
	struct FSQInputState                          NewState;                                          // 0x0000(0x0020)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FSQInputState                          ReturnValue;                                       // 0x0020(0x0020)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_AddInputStackState) == 0x000008, "Wrong alignment on SQHUD_AddInputStackState");
static_assert(sizeof(SQHUD_AddInputStackState) == 0x000040, "Wrong size on SQHUD_AddInputStackState");
static_assert(offsetof(SQHUD_AddInputStackState, NewState) == 0x000000, "Member 'SQHUD_AddInputStackState::NewState' has a wrong offset!");
static_assert(offsetof(SQHUD_AddInputStackState, ReturnValue) == 0x000020, "Member 'SQHUD_AddInputStackState::ReturnValue' has a wrong offset!");

// Function Squad.SQHUD.AddLineOfSightActor
// 0x0008 (0x0008 - 0x0000)
struct SQHUD_AddLineOfSightActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_AddLineOfSightActor) == 0x000008, "Wrong alignment on SQHUD_AddLineOfSightActor");
static_assert(sizeof(SQHUD_AddLineOfSightActor) == 0x000008, "Wrong size on SQHUD_AddLineOfSightActor");
static_assert(offsetof(SQHUD_AddLineOfSightActor, Actor) == 0x000000, "Member 'SQHUD_AddLineOfSightActor::Actor' has a wrong offset!");

// Function Squad.SQHUD.AddSystemMessage
// 0x0028 (0x0028 - 0x0000)
struct SQHUD_AddSystemMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MessageLifetimeOverride;                           // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQNotificationTypes                          NotificationType;                                  // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10CA[0x3];                                     // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQHUD_AddSystemMessage) == 0x000008, "Wrong alignment on SQHUD_AddSystemMessage");
static_assert(sizeof(SQHUD_AddSystemMessage) == 0x000028, "Wrong size on SQHUD_AddSystemMessage");
static_assert(offsetof(SQHUD_AddSystemMessage, Message) == 0x000000, "Member 'SQHUD_AddSystemMessage::Message' has a wrong offset!");
static_assert(offsetof(SQHUD_AddSystemMessage, Color) == 0x000010, "Member 'SQHUD_AddSystemMessage::Color' has a wrong offset!");
static_assert(offsetof(SQHUD_AddSystemMessage, MessageLifetimeOverride) == 0x000020, "Member 'SQHUD_AddSystemMessage::MessageLifetimeOverride' has a wrong offset!");
static_assert(offsetof(SQHUD_AddSystemMessage, NotificationType) == 0x000024, "Member 'SQHUD_AddSystemMessage::NotificationType' has a wrong offset!");

// Function Squad.SQHUD.BlueprintNotifyHit
// 0x0020 (0x0020 - 0x0000)
struct SQHUD_BlueprintNotifyHit final
{
public:
	float                                         DamageTaken;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10CB[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           DamageEvent;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class APawn*                                  PawnInstigator;                                    // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_BlueprintNotifyHit) == 0x000008, "Wrong alignment on SQHUD_BlueprintNotifyHit");
static_assert(sizeof(SQHUD_BlueprintNotifyHit) == 0x000020, "Wrong size on SQHUD_BlueprintNotifyHit");
static_assert(offsetof(SQHUD_BlueprintNotifyHit, DamageTaken) == 0x000000, "Member 'SQHUD_BlueprintNotifyHit::DamageTaken' has a wrong offset!");
static_assert(offsetof(SQHUD_BlueprintNotifyHit, DamageEvent) == 0x000008, "Member 'SQHUD_BlueprintNotifyHit::DamageEvent' has a wrong offset!");
static_assert(offsetof(SQHUD_BlueprintNotifyHit, PawnInstigator) == 0x000018, "Member 'SQHUD_BlueprintNotifyHit::PawnInstigator' has a wrong offset!");

// Function Squad.SQHUD.BPOnSetHudWidgetsEnabled
// 0x0001 (0x0001 - 0x0000)
struct SQHUD_BPOnSetHudWidgetsEnabled final
{
public:
	bool                                          bEnabled;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_BPOnSetHudWidgetsEnabled) == 0x000001, "Wrong alignment on SQHUD_BPOnSetHudWidgetsEnabled");
static_assert(sizeof(SQHUD_BPOnSetHudWidgetsEnabled) == 0x000001, "Wrong size on SQHUD_BPOnSetHudWidgetsEnabled");
static_assert(offsetof(SQHUD_BPOnSetHudWidgetsEnabled, bEnabled) == 0x000000, "Member 'SQHUD_BPOnSetHudWidgetsEnabled::bEnabled' has a wrong offset!");

// Function Squad.SQHUD.BPOnUsableVisible
// 0x0010 (0x0010 - 0x0000)
struct SQHUD_BPOnUsableVisible final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVisible;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10CC[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQHUD_BPOnUsableVisible) == 0x000008, "Wrong alignment on SQHUD_BPOnUsableVisible");
static_assert(sizeof(SQHUD_BPOnUsableVisible) == 0x000010, "Wrong size on SQHUD_BPOnUsableVisible");
static_assert(offsetof(SQHUD_BPOnUsableVisible, Actor) == 0x000000, "Member 'SQHUD_BPOnUsableVisible::Actor' has a wrong offset!");
static_assert(offsetof(SQHUD_BPOnUsableVisible, bIsVisible) == 0x000008, "Member 'SQHUD_BPOnUsableVisible::bIsVisible' has a wrong offset!");

// Function Squad.SQHUD.DisplayAmmoBagOverlay
// 0x0010 (0x0010 - 0x0000)
struct SQHUD_DisplayAmmoBagOverlay final
{
public:
	class ASQDeployableAmmoBag*                   Ammobag;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanPickup;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10CD[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQHUD_DisplayAmmoBagOverlay) == 0x000008, "Wrong alignment on SQHUD_DisplayAmmoBagOverlay");
static_assert(sizeof(SQHUD_DisplayAmmoBagOverlay) == 0x000010, "Wrong size on SQHUD_DisplayAmmoBagOverlay");
static_assert(offsetof(SQHUD_DisplayAmmoBagOverlay, Ammobag) == 0x000000, "Member 'SQHUD_DisplayAmmoBagOverlay::Ammobag' has a wrong offset!");
static_assert(offsetof(SQHUD_DisplayAmmoBagOverlay, bCanPickup) == 0x000008, "Member 'SQHUD_DisplayAmmoBagOverlay::bCanPickup' has a wrong offset!");

// Function Squad.SQHUD.DisplayDeployableInteractableOverlay
// 0x0010 (0x0010 - 0x0000)
struct SQHUD_DisplayDeployableInteractableOverlay final
{
public:
	class ASQDeployableInteractable*              Ammobag;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanPickup;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10CE[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQHUD_DisplayDeployableInteractableOverlay) == 0x000008, "Wrong alignment on SQHUD_DisplayDeployableInteractableOverlay");
static_assert(sizeof(SQHUD_DisplayDeployableInteractableOverlay) == 0x000010, "Wrong size on SQHUD_DisplayDeployableInteractableOverlay");
static_assert(offsetof(SQHUD_DisplayDeployableInteractableOverlay, Ammobag) == 0x000000, "Member 'SQHUD_DisplayDeployableInteractableOverlay::Ammobag' has a wrong offset!");
static_assert(offsetof(SQHUD_DisplayDeployableInteractableOverlay, bCanPickup) == 0x000008, "Member 'SQHUD_DisplayDeployableInteractableOverlay::bCanPickup' has a wrong offset!");

// Function Squad.SQHUD.DrawChatMessages
// 0x0088 (0x0088 - 0x0000)
struct SQHUD_DrawChatMessages final
{
public:
	struct FSQMessageBoxInfo                      ChatBox;                                           // 0x0000(0x0080)(Parm, OutParm, NativeAccessSpecifierPublic)
	float                                         PosX;                                              // 0x0080(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosY;                                              // 0x0084(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_DrawChatMessages) == 0x000008, "Wrong alignment on SQHUD_DrawChatMessages");
static_assert(sizeof(SQHUD_DrawChatMessages) == 0x000088, "Wrong size on SQHUD_DrawChatMessages");
static_assert(offsetof(SQHUD_DrawChatMessages, ChatBox) == 0x000000, "Member 'SQHUD_DrawChatMessages::ChatBox' has a wrong offset!");
static_assert(offsetof(SQHUD_DrawChatMessages, PosX) == 0x000080, "Member 'SQHUD_DrawChatMessages::PosX' has a wrong offset!");
static_assert(offsetof(SQHUD_DrawChatMessages, PosY) == 0x000084, "Member 'SQHUD_DrawChatMessages::PosY' has a wrong offset!");

// Function Squad.SQHUD.DrawString
// 0x00B8 (0x00B8 - 0x0000)
struct SQHUD_DrawString final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10CF[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosX;                                              // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosY;                                              // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQMessageBoxInfo                      Info;                                              // 0x0030(0x0080)(Parm, NativeAccessSpecifierPublic)
	ESQTextHorizontalAlignment                    HorizontalAlignment;                               // 0x00B0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTextVerticalAlignment                      VerticalAlignment;                                 // 0x00B1(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D0[0x2];                                     // 0x00B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x00B4(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_DrawString) == 0x000008, "Wrong alignment on SQHUD_DrawString");
static_assert(sizeof(SQHUD_DrawString) == 0x0000B8, "Wrong size on SQHUD_DrawString");
static_assert(offsetof(SQHUD_DrawString, Param_Index) == 0x000000, "Member 'SQHUD_DrawString::Param_Index' has a wrong offset!");
static_assert(offsetof(SQHUD_DrawString, Text) == 0x000008, "Member 'SQHUD_DrawString::Text' has a wrong offset!");
static_assert(offsetof(SQHUD_DrawString, PosX) == 0x000018, "Member 'SQHUD_DrawString::PosX' has a wrong offset!");
static_assert(offsetof(SQHUD_DrawString, PosY) == 0x00001C, "Member 'SQHUD_DrawString::PosY' has a wrong offset!");
static_assert(offsetof(SQHUD_DrawString, Color) == 0x000020, "Member 'SQHUD_DrawString::Color' has a wrong offset!");
static_assert(offsetof(SQHUD_DrawString, Info) == 0x000030, "Member 'SQHUD_DrawString::Info' has a wrong offset!");
static_assert(offsetof(SQHUD_DrawString, HorizontalAlignment) == 0x0000B0, "Member 'SQHUD_DrawString::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(SQHUD_DrawString, VerticalAlignment) == 0x0000B1, "Member 'SQHUD_DrawString::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(SQHUD_DrawString, ReturnValue) == 0x0000B4, "Member 'SQHUD_DrawString::ReturnValue' has a wrong offset!");

// Function Squad.SQHUD.DrawSystemMessages
// 0x0008 (0x0008 - 0x0000)
struct SQHUD_DrawSystemMessages final
{
public:
	float                                         PosX;                                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosY;                                              // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_DrawSystemMessages) == 0x000004, "Wrong alignment on SQHUD_DrawSystemMessages");
static_assert(sizeof(SQHUD_DrawSystemMessages) == 0x000008, "Wrong size on SQHUD_DrawSystemMessages");
static_assert(offsetof(SQHUD_DrawSystemMessages, PosX) == 0x000000, "Member 'SQHUD_DrawSystemMessages::PosX' has a wrong offset!");
static_assert(offsetof(SQHUD_DrawSystemMessages, PosY) == 0x000004, "Member 'SQHUD_DrawSystemMessages::PosY' has a wrong offset!");

// Function Squad.SQHUD.GetCanvas
// 0x0008 (0x0008 - 0x0000)
struct SQHUD_GetCanvas final
{
public:
	class UCanvas*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_GetCanvas) == 0x000008, "Wrong alignment on SQHUD_GetCanvas");
static_assert(sizeof(SQHUD_GetCanvas) == 0x000008, "Wrong size on SQHUD_GetCanvas");
static_assert(offsetof(SQHUD_GetCanvas, ReturnValue) == 0x000000, "Member 'SQHUD_GetCanvas::ReturnValue' has a wrong offset!");

// Function Squad.SQHUD.GetEnemyColor
// 0x0010 (0x0010 - 0x0000)
struct SQHUD_GetEnemyColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_GetEnemyColor) == 0x000004, "Wrong alignment on SQHUD_GetEnemyColor");
static_assert(sizeof(SQHUD_GetEnemyColor) == 0x000010, "Wrong size on SQHUD_GetEnemyColor");
static_assert(offsetof(SQHUD_GetEnemyColor, ReturnValue) == 0x000000, "Member 'SQHUD_GetEnemyColor::ReturnValue' has a wrong offset!");

// Function Squad.SQHUD.GetFireTeamColor
// 0x0010 (0x0010 - 0x0000)
struct SQHUD_GetFireTeamColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_GetFireTeamColor) == 0x000004, "Wrong alignment on SQHUD_GetFireTeamColor");
static_assert(sizeof(SQHUD_GetFireTeamColor) == 0x000010, "Wrong size on SQHUD_GetFireTeamColor");
static_assert(offsetof(SQHUD_GetFireTeamColor, ReturnValue) == 0x000000, "Member 'SQHUD_GetFireTeamColor::ReturnValue' has a wrong offset!");

// Function Squad.SQHUD.GetRemoteTalkers
// 0x0010 (0x0010 - 0x0000)
struct SQHUD_GetRemoteTalkers final
{
public:
	TArray<struct FSQRemoteTalkerDisplayInfo>     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_GetRemoteTalkers) == 0x000008, "Wrong alignment on SQHUD_GetRemoteTalkers");
static_assert(sizeof(SQHUD_GetRemoteTalkers) == 0x000010, "Wrong size on SQHUD_GetRemoteTalkers");
static_assert(offsetof(SQHUD_GetRemoteTalkers, ReturnValue) == 0x000000, "Member 'SQHUD_GetRemoteTalkers::ReturnValue' has a wrong offset!");

// Function Squad.SQHUD.GetScaleUI
// 0x0004 (0x0004 - 0x0000)
struct SQHUD_GetScaleUI final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_GetScaleUI) == 0x000004, "Wrong alignment on SQHUD_GetScaleUI");
static_assert(sizeof(SQHUD_GetScaleUI) == 0x000004, "Wrong size on SQHUD_GetScaleUI");
static_assert(offsetof(SQHUD_GetScaleUI, ReturnValue) == 0x000000, "Member 'SQHUD_GetScaleUI::ReturnValue' has a wrong offset!");

// Function Squad.SQHUD.GetSquadColor
// 0x0010 (0x0010 - 0x0000)
struct SQHUD_GetSquadColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_GetSquadColor) == 0x000004, "Wrong alignment on SQHUD_GetSquadColor");
static_assert(sizeof(SQHUD_GetSquadColor) == 0x000010, "Wrong size on SQHUD_GetSquadColor");
static_assert(offsetof(SQHUD_GetSquadColor, ReturnValue) == 0x000000, "Member 'SQHUD_GetSquadColor::ReturnValue' has a wrong offset!");

// Function Squad.SQHUD.GetSystemMessagesColor
// 0x0010 (0x0010 - 0x0000)
struct SQHUD_GetSystemMessagesColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_GetSystemMessagesColor) == 0x000004, "Wrong alignment on SQHUD_GetSystemMessagesColor");
static_assert(sizeof(SQHUD_GetSystemMessagesColor) == 0x000010, "Wrong size on SQHUD_GetSystemMessagesColor");
static_assert(offsetof(SQHUD_GetSystemMessagesColor, ReturnValue) == 0x000000, "Member 'SQHUD_GetSystemMessagesColor::ReturnValue' has a wrong offset!");

// Function Squad.SQHUD.GetTeamColor
// 0x0010 (0x0010 - 0x0000)
struct SQHUD_GetTeamColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_GetTeamColor) == 0x000004, "Wrong alignment on SQHUD_GetTeamColor");
static_assert(sizeof(SQHUD_GetTeamColor) == 0x000010, "Wrong size on SQHUD_GetTeamColor");
static_assert(offsetof(SQHUD_GetTeamColor, ReturnValue) == 0x000000, "Member 'SQHUD_GetTeamColor::ReturnValue' has a wrong offset!");

// Function Squad.SQHUD.HideAmmoBagOverlay
// 0x0008 (0x0008 - 0x0000)
struct SQHUD_HideAmmoBagOverlay final
{
public:
	class ASQDeployableAmmoBag*                   Ammobag;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_HideAmmoBagOverlay) == 0x000008, "Wrong alignment on SQHUD_HideAmmoBagOverlay");
static_assert(sizeof(SQHUD_HideAmmoBagOverlay) == 0x000008, "Wrong size on SQHUD_HideAmmoBagOverlay");
static_assert(offsetof(SQHUD_HideAmmoBagOverlay, Ammobag) == 0x000000, "Member 'SQHUD_HideAmmoBagOverlay::Ammobag' has a wrong offset!");

// Function Squad.SQHUD.HideDeployableInteractableOverlay
// 0x0008 (0x0008 - 0x0000)
struct SQHUD_HideDeployableInteractableOverlay final
{
public:
	class ASQDeployableInteractable*              Ammobag;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_HideDeployableInteractableOverlay) == 0x000008, "Wrong alignment on SQHUD_HideDeployableInteractableOverlay");
static_assert(sizeof(SQHUD_HideDeployableInteractableOverlay) == 0x000008, "Wrong size on SQHUD_HideDeployableInteractableOverlay");
static_assert(offsetof(SQHUD_HideDeployableInteractableOverlay, Ammobag) == 0x000000, "Member 'SQHUD_HideDeployableInteractableOverlay::Ammobag' has a wrong offset!");

// Function Squad.SQHUD.IncrementMapZoomLevel
// 0x0010 (0x0010 - 0x0000)
struct SQHUD_IncrementMapZoomLevel final
{
public:
	float                                         CurrentMapZoom;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D1[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_IncrementMapZoomLevel) == 0x000004, "Wrong alignment on SQHUD_IncrementMapZoomLevel");
static_assert(sizeof(SQHUD_IncrementMapZoomLevel) == 0x000010, "Wrong size on SQHUD_IncrementMapZoomLevel");
static_assert(offsetof(SQHUD_IncrementMapZoomLevel, CurrentMapZoom) == 0x000000, "Member 'SQHUD_IncrementMapZoomLevel::CurrentMapZoom' has a wrong offset!");
static_assert(offsetof(SQHUD_IncrementMapZoomLevel, Amount) == 0x000004, "Member 'SQHUD_IncrementMapZoomLevel::Amount' has a wrong offset!");
static_assert(offsetof(SQHUD_IncrementMapZoomLevel, bLoop) == 0x000008, "Member 'SQHUD_IncrementMapZoomLevel::bLoop' has a wrong offset!");
static_assert(offsetof(SQHUD_IncrementMapZoomLevel, ReturnValue) == 0x00000C, "Member 'SQHUD_IncrementMapZoomLevel::ReturnValue' has a wrong offset!");

// DelegateFunction Squad.SQHUD.OnReceiveChatEvent__DelegateSignature
// 0x0038 (0x0038 - 0x0000)
struct SQHUD_OnReceiveChatEvent__DelegateSignature final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQChat                                       Channel;                                           // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D2[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x0024(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQNotificationTypes                          NotificationType;                                  // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D3[0x3];                                     // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQHUD_OnReceiveChatEvent__DelegateSignature) == 0x000008, "Wrong alignment on SQHUD_OnReceiveChatEvent__DelegateSignature");
static_assert(sizeof(SQHUD_OnReceiveChatEvent__DelegateSignature) == 0x000038, "Wrong size on SQHUD_OnReceiveChatEvent__DelegateSignature");
static_assert(offsetof(SQHUD_OnReceiveChatEvent__DelegateSignature, PlayerName) == 0x000000, "Member 'SQHUD_OnReceiveChatEvent__DelegateSignature::PlayerName' has a wrong offset!");
static_assert(offsetof(SQHUD_OnReceiveChatEvent__DelegateSignature, Message) == 0x000010, "Member 'SQHUD_OnReceiveChatEvent__DelegateSignature::Message' has a wrong offset!");
static_assert(offsetof(SQHUD_OnReceiveChatEvent__DelegateSignature, Channel) == 0x000020, "Member 'SQHUD_OnReceiveChatEvent__DelegateSignature::Channel' has a wrong offset!");
static_assert(offsetof(SQHUD_OnReceiveChatEvent__DelegateSignature, Color) == 0x000024, "Member 'SQHUD_OnReceiveChatEvent__DelegateSignature::Color' has a wrong offset!");
static_assert(offsetof(SQHUD_OnReceiveChatEvent__DelegateSignature, NotificationType) == 0x000034, "Member 'SQHUD_OnReceiveChatEvent__DelegateSignature::NotificationType' has a wrong offset!");

// Function Squad.SQHUD.RemoveInputStackState
// 0x0040 (0x0040 - 0x0000)
struct SQHUD_RemoveInputStackState final
{
public:
	struct FSQInputState                          OldState;                                          // 0x0000(0x0020)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FSQInputState                          ReturnValue;                                       // 0x0020(0x0020)(Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_RemoveInputStackState) == 0x000008, "Wrong alignment on SQHUD_RemoveInputStackState");
static_assert(sizeof(SQHUD_RemoveInputStackState) == 0x000040, "Wrong size on SQHUD_RemoveInputStackState");
static_assert(offsetof(SQHUD_RemoveInputStackState, OldState) == 0x000000, "Member 'SQHUD_RemoveInputStackState::OldState' has a wrong offset!");
static_assert(offsetof(SQHUD_RemoveInputStackState, ReturnValue) == 0x000020, "Member 'SQHUD_RemoveInputStackState::ReturnValue' has a wrong offset!");

// Function Squad.SQHUD.RemoveLineOfSightActor
// 0x0008 (0x0008 - 0x0000)
struct SQHUD_RemoveLineOfSightActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_RemoveLineOfSightActor) == 0x000008, "Wrong alignment on SQHUD_RemoveLineOfSightActor");
static_assert(sizeof(SQHUD_RemoveLineOfSightActor) == 0x000008, "Wrong size on SQHUD_RemoveLineOfSightActor");
static_assert(offsetof(SQHUD_RemoveLineOfSightActor, Actor) == 0x000000, "Member 'SQHUD_RemoveLineOfSightActor::Actor' has a wrong offset!");

// Function Squad.SQHUD.SetHudWidgetsEnabled
// 0x0001 (0x0001 - 0x0000)
struct SQHUD_SetHudWidgetsEnabled final
{
public:
	bool                                          bValue;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_SetHudWidgetsEnabled) == 0x000001, "Wrong alignment on SQHUD_SetHudWidgetsEnabled");
static_assert(sizeof(SQHUD_SetHudWidgetsEnabled) == 0x000001, "Wrong size on SQHUD_SetHudWidgetsEnabled");
static_assert(offsetof(SQHUD_SetHudWidgetsEnabled, bValue) == 0x000000, "Member 'SQHUD_SetHudWidgetsEnabled::bValue' has a wrong offset!");

// Function Squad.SQHUD.ShowMarkerOnHUD
// 0x00C8 (0x00C8 - 0x0000)
struct SQHUD_ShowMarkerOnHUD final
{
public:
	struct FSQMapMarkerVisualData                 MapMarkerVisualData;                               // 0x0000(0x00C8)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_ShowMarkerOnHUD) == 0x000008, "Wrong alignment on SQHUD_ShowMarkerOnHUD");
static_assert(sizeof(SQHUD_ShowMarkerOnHUD) == 0x0000C8, "Wrong size on SQHUD_ShowMarkerOnHUD");
static_assert(offsetof(SQHUD_ShowMarkerOnHUD, MapMarkerVisualData) == 0x000000, "Member 'SQHUD_ShowMarkerOnHUD::MapMarkerVisualData' has a wrong offset!");

// Function Squad.SQHUD.ShowScoreboard
// 0x0001 (0x0001 - 0x0000)
struct SQHUD_ShowScoreboard final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_ShowScoreboard) == 0x000001, "Wrong alignment on SQHUD_ShowScoreboard");
static_assert(sizeof(SQHUD_ShowScoreboard) == 0x000001, "Wrong size on SQHUD_ShowScoreboard");
static_assert(offsetof(SQHUD_ShowScoreboard, bEnable) == 0x000000, "Member 'SQHUD_ShowScoreboard::bEnable' has a wrong offset!");

// Function Squad.SQHUD.VehicleChangeZoomOverlay
// 0x0004 (0x0004 - 0x0000)
struct SQHUD_VehicleChangeZoomOverlay final
{
public:
	int32                                         NewZoomOverlayIndex;                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_VehicleChangeZoomOverlay) == 0x000004, "Wrong alignment on SQHUD_VehicleChangeZoomOverlay");
static_assert(sizeof(SQHUD_VehicleChangeZoomOverlay) == 0x000004, "Wrong size on SQHUD_VehicleChangeZoomOverlay");
static_assert(offsetof(SQHUD_VehicleChangeZoomOverlay, NewZoomOverlayIndex) == 0x000000, "Member 'SQHUD_VehicleChangeZoomOverlay::NewZoomOverlayIndex' has a wrong offset!");

// Function Squad.SQHUD.VehicleCreateOverlay
// 0x0008 (0x0008 - 0x0000)
struct SQHUD_VehicleCreateOverlay final
{
public:
	TSubclassOf<class USQVehicleViewWidget>       WidgetClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_VehicleCreateOverlay) == 0x000008, "Wrong alignment on SQHUD_VehicleCreateOverlay");
static_assert(sizeof(SQHUD_VehicleCreateOverlay) == 0x000008, "Wrong size on SQHUD_VehicleCreateOverlay");
static_assert(offsetof(SQHUD_VehicleCreateOverlay, WidgetClass) == 0x000000, "Member 'SQHUD_VehicleCreateOverlay::WidgetClass' has a wrong offset!");

// Function Squad.SQHUD.VehicleRemoveOverlay
// 0x0008 (0x0008 - 0x0000)
struct SQHUD_VehicleRemoveOverlay final
{
public:
	TSubclassOf<class USQVehicleViewWidget>       WidgetClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_VehicleRemoveOverlay) == 0x000008, "Wrong alignment on SQHUD_VehicleRemoveOverlay");
static_assert(sizeof(SQHUD_VehicleRemoveOverlay) == 0x000008, "Wrong size on SQHUD_VehicleRemoveOverlay");
static_assert(offsetof(SQHUD_VehicleRemoveOverlay, WidgetClass) == 0x000000, "Member 'SQHUD_VehicleRemoveOverlay::WidgetClass' has a wrong offset!");

// Function Squad.SQHUD.WorldOriginUpdated
// 0x0020 (0x0020 - 0x0000)
struct SQHUD_WorldOriginUpdated final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             Old;                                               // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             New;                                               // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_WorldOriginUpdated) == 0x000008, "Wrong alignment on SQHUD_WorldOriginUpdated");
static_assert(sizeof(SQHUD_WorldOriginUpdated) == 0x000020, "Wrong size on SQHUD_WorldOriginUpdated");
static_assert(offsetof(SQHUD_WorldOriginUpdated, World) == 0x000000, "Member 'SQHUD_WorldOriginUpdated::World' has a wrong offset!");
static_assert(offsetof(SQHUD_WorldOriginUpdated, Old) == 0x000008, "Member 'SQHUD_WorldOriginUpdated::Old' has a wrong offset!");
static_assert(offsetof(SQHUD_WorldOriginUpdated, New) == 0x000014, "Member 'SQHUD_WorldOriginUpdated::New' has a wrong offset!");

// Function Squad.SQHUD.GetMouseScreenSpacePosition
// 0x000C (0x000C - 0x0000)
struct SQHUD_GetMouseScreenSpacePosition final
{
public:
	struct FIntPoint                              OutPosition;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D4[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQHUD_GetMouseScreenSpacePosition) == 0x000004, "Wrong alignment on SQHUD_GetMouseScreenSpacePosition");
static_assert(sizeof(SQHUD_GetMouseScreenSpacePosition) == 0x00000C, "Wrong size on SQHUD_GetMouseScreenSpacePosition");
static_assert(offsetof(SQHUD_GetMouseScreenSpacePosition, OutPosition) == 0x000000, "Member 'SQHUD_GetMouseScreenSpacePosition::OutPosition' has a wrong offset!");
static_assert(offsetof(SQHUD_GetMouseScreenSpacePosition, ReturnValue) == 0x000008, "Member 'SQHUD_GetMouseScreenSpacePosition::ReturnValue' has a wrong offset!");

// Function Squad.SQHUD.GetOtherPlayerColor
// 0x0018 (0x0018 - 0x0000)
struct SQHUD_GetOtherPlayerColor final
{
public:
	class ASQPlayerState*                         OtherPlayer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_GetOtherPlayerColor) == 0x000008, "Wrong alignment on SQHUD_GetOtherPlayerColor");
static_assert(sizeof(SQHUD_GetOtherPlayerColor) == 0x000018, "Wrong size on SQHUD_GetOtherPlayerColor");
static_assert(offsetof(SQHUD_GetOtherPlayerColor, OtherPlayer) == 0x000000, "Member 'SQHUD_GetOtherPlayerColor::OtherPlayer' has a wrong offset!");
static_assert(offsetof(SQHUD_GetOtherPlayerColor, ReturnValue) == 0x000008, "Member 'SQHUD_GetOtherPlayerColor::ReturnValue' has a wrong offset!");

// Function Squad.SQHUD.GetOwnerSpeakerState
// 0x0001 (0x0001 - 0x0000)
struct SQHUD_GetOwnerSpeakerState final
{
public:
	ESQVoiceChannel                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_GetOwnerSpeakerState) == 0x000001, "Wrong alignment on SQHUD_GetOwnerSpeakerState");
static_assert(sizeof(SQHUD_GetOwnerSpeakerState) == 0x000001, "Wrong size on SQHUD_GetOwnerSpeakerState");
static_assert(offsetof(SQHUD_GetOwnerSpeakerState, ReturnValue) == 0x000000, "Member 'SQHUD_GetOwnerSpeakerState::ReturnValue' has a wrong offset!");

// Function Squad.SQHUD.GetStartingMapZoom
// 0x0004 (0x0004 - 0x0000)
struct SQHUD_GetStartingMapZoom final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_GetStartingMapZoom) == 0x000004, "Wrong alignment on SQHUD_GetStartingMapZoom");
static_assert(sizeof(SQHUD_GetStartingMapZoom) == 0x000004, "Wrong size on SQHUD_GetStartingMapZoom");
static_assert(offsetof(SQHUD_GetStartingMapZoom, ReturnValue) == 0x000000, "Member 'SQHUD_GetStartingMapZoom::ReturnValue' has a wrong offset!");

// Function Squad.SQHUD.GetTeamBasedColor
// 0x0014 (0x0014 - 0x0000)
struct SQHUD_GetTeamBasedColor final
{
public:
	ESQTeam                                       InTeam;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D5[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_GetTeamBasedColor) == 0x000004, "Wrong alignment on SQHUD_GetTeamBasedColor");
static_assert(sizeof(SQHUD_GetTeamBasedColor) == 0x000014, "Wrong size on SQHUD_GetTeamBasedColor");
static_assert(offsetof(SQHUD_GetTeamBasedColor, InTeam) == 0x000000, "Member 'SQHUD_GetTeamBasedColor::InTeam' has a wrong offset!");
static_assert(offsetof(SQHUD_GetTeamBasedColor, ReturnValue) == 0x000004, "Member 'SQHUD_GetTeamBasedColor::ReturnValue' has a wrong offset!");

// Function Squad.SQHUD.HudWidgetsEnabled
// 0x0001 (0x0001 - 0x0000)
struct SQHUD_HudWidgetsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_HudWidgetsEnabled) == 0x000001, "Wrong alignment on SQHUD_HudWidgetsEnabled");
static_assert(sizeof(SQHUD_HudWidgetsEnabled) == 0x000001, "Wrong size on SQHUD_HudWidgetsEnabled");
static_assert(offsetof(SQHUD_HudWidgetsEnabled, ReturnValue) == 0x000000, "Member 'SQHUD_HudWidgetsEnabled::ReturnValue' has a wrong offset!");

// Function Squad.SQHUD.IsScoreboardVisible
// 0x0001 (0x0001 - 0x0000)
struct SQHUD_IsScoreboardVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_IsScoreboardVisible) == 0x000001, "Wrong alignment on SQHUD_IsScoreboardVisible");
static_assert(sizeof(SQHUD_IsScoreboardVisible) == 0x000001, "Wrong size on SQHUD_IsScoreboardVisible");
static_assert(offsetof(SQHUD_IsScoreboardVisible, ReturnValue) == 0x000000, "Member 'SQHUD_IsScoreboardVisible::ReturnValue' has a wrong offset!");

// Function Squad.SQHUD.ShouldOffsetSpawnText
// 0x0001 (0x0001 - 0x0000)
struct SQHUD_ShouldOffsetSpawnText final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUD_ShouldOffsetSpawnText) == 0x000001, "Wrong alignment on SQHUD_ShouldOffsetSpawnText");
static_assert(sizeof(SQHUD_ShouldOffsetSpawnText) == 0x000001, "Wrong size on SQHUD_ShouldOffsetSpawnText");
static_assert(offsetof(SQHUD_ShouldOffsetSpawnText, ReturnValue) == 0x000000, "Member 'SQHUD_ShouldOffsetSpawnText::ReturnValue' has a wrong offset!");

// Function Squad.SQDataSettings.GetDataSettings
// 0x0008 (0x0008 - 0x0000)
struct SQDataSettings_GetDataSettings final
{
public:
	class USQDataSettings*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDataSettings_GetDataSettings) == 0x000008, "Wrong alignment on SQDataSettings_GetDataSettings");
static_assert(sizeof(SQDataSettings_GetDataSettings) == 0x000008, "Wrong size on SQDataSettings_GetDataSettings");
static_assert(offsetof(SQDataSettings_GetDataSettings, ReturnValue) == 0x000000, "Member 'SQDataSettings_GetDataSettings::ReturnValue' has a wrong offset!");

// Function Squad.SQDataSettings.UseVote
// 0x0001 (0x0001 - 0x0000)
struct SQDataSettings_UseVote final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDataSettings_UseVote) == 0x000001, "Wrong alignment on SQDataSettings_UseVote");
static_assert(sizeof(SQDataSettings_UseVote) == 0x000001, "Wrong size on SQDataSettings_UseVote");
static_assert(offsetof(SQDataSettings_UseVote, ReturnValue) == 0x000000, "Member 'SQDataSettings_UseVote::ReturnValue' has a wrong offset!");

// Function Squad.SQHelicopterCollisionDamage.HandleImpact
// 0x0098 (0x0098 - 0x0000)
struct SQHelicopterCollisionDamage_HandleImpact final
{
public:
	struct FHitResult                             Impact;                                            // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         TimeSlice;                                         // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MoveDelta;                                         // 0x008C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHelicopterCollisionDamage_HandleImpact) == 0x000004, "Wrong alignment on SQHelicopterCollisionDamage_HandleImpact");
static_assert(sizeof(SQHelicopterCollisionDamage_HandleImpact) == 0x000098, "Wrong size on SQHelicopterCollisionDamage_HandleImpact");
static_assert(offsetof(SQHelicopterCollisionDamage_HandleImpact, Impact) == 0x000000, "Member 'SQHelicopterCollisionDamage_HandleImpact::Impact' has a wrong offset!");
static_assert(offsetof(SQHelicopterCollisionDamage_HandleImpact, TimeSlice) == 0x000088, "Member 'SQHelicopterCollisionDamage_HandleImpact::TimeSlice' has a wrong offset!");
static_assert(offsetof(SQHelicopterCollisionDamage_HandleImpact, MoveDelta) == 0x00008C, "Member 'SQHelicopterCollisionDamage_HandleImpact::MoveDelta' has a wrong offset!");

// Function Squad.SQDeployableAmmoBag.BP_PickedUp
// 0x0008 (0x0008 - 0x0000)
struct SQDeployableAmmoBag_BP_PickedUp final
{
public:
	class ASQEquipableItem*                       EquippableAmmoBag;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployableAmmoBag_BP_PickedUp) == 0x000008, "Wrong alignment on SQDeployableAmmoBag_BP_PickedUp");
static_assert(sizeof(SQDeployableAmmoBag_BP_PickedUp) == 0x000008, "Wrong size on SQDeployableAmmoBag_BP_PickedUp");
static_assert(offsetof(SQDeployableAmmoBag_BP_PickedUp, EquippableAmmoBag) == 0x000000, "Member 'SQDeployableAmmoBag_BP_PickedUp::EquippableAmmoBag' has a wrong offset!");

// Function Squad.SQDeployableChildActorComponent.OnDeployableStateChange
// 0x0001 (0x0001 - 0x0000)
struct SQDeployableChildActorComponent_OnDeployableStateChange final
{
public:
	ESQBuildState                                 BuildState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployableChildActorComponent_OnDeployableStateChange) == 0x000001, "Wrong alignment on SQDeployableChildActorComponent_OnDeployableStateChange");
static_assert(sizeof(SQDeployableChildActorComponent_OnDeployableStateChange) == 0x000001, "Wrong size on SQDeployableChildActorComponent_OnDeployableStateChange");
static_assert(offsetof(SQDeployableChildActorComponent_OnDeployableStateChange, BuildState) == 0x000000, "Member 'SQDeployableChildActorComponent_OnDeployableStateChange::BuildState' has a wrong offset!");

// Function Squad.SQServerListItemWidget.GetServerURL
// 0x0010 (0x0010 - 0x0000)
struct SQServerListItemWidget_GetServerURL final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQServerListItemWidget_GetServerURL) == 0x000008, "Wrong alignment on SQServerListItemWidget_GetServerURL");
static_assert(sizeof(SQServerListItemWidget_GetServerURL) == 0x000010, "Wrong size on SQServerListItemWidget_GetServerURL");
static_assert(offsetof(SQServerListItemWidget_GetServerURL, ReturnValue) == 0x000000, "Member 'SQServerListItemWidget_GetServerURL::ReturnValue' has a wrong offset!");

// Function Squad.SQServerListItemWidget.ServerConnectionCheckUpdate
// 0x0008 (0x0008 - 0x0000)
struct SQServerListItemWidget_ServerConnectionCheckUpdate final
{
public:
	struct FSQConnectionCheckResponse             UpdateResponse;                                    // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQServerListItemWidget_ServerConnectionCheckUpdate) == 0x000004, "Wrong alignment on SQServerListItemWidget_ServerConnectionCheckUpdate");
static_assert(sizeof(SQServerListItemWidget_ServerConnectionCheckUpdate) == 0x000008, "Wrong size on SQServerListItemWidget_ServerConnectionCheckUpdate");
static_assert(offsetof(SQServerListItemWidget_ServerConnectionCheckUpdate, UpdateResponse) == 0x000000, "Member 'SQServerListItemWidget_ServerConnectionCheckUpdate::UpdateResponse' has a wrong offset!");

// Function Squad.SQServerListItemWidget.SetSession
// 0x0108 (0x0108 - 0x0000)
struct SQServerListItemWidget_SetSession final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQServerListItemWidget_SetSession) == 0x000008, "Wrong alignment on SQServerListItemWidget_SetSession");
static_assert(sizeof(SQServerListItemWidget_SetSession) == 0x000108, "Wrong size on SQServerListItemWidget_SetSession");
static_assert(offsetof(SQServerListItemWidget_SetSession, Result) == 0x000000, "Member 'SQServerListItemWidget_SetSession::Result' has a wrong offset!");

// Function Squad.SQServerListItemWidget.GetServerName
// 0x0118 (0x0118 - 0x0000)
struct SQServerListItemWidget_GetServerName final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0108(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQServerListItemWidget_GetServerName) == 0x000008, "Wrong alignment on SQServerListItemWidget_GetServerName");
static_assert(sizeof(SQServerListItemWidget_GetServerName) == 0x000118, "Wrong size on SQServerListItemWidget_GetServerName");
static_assert(offsetof(SQServerListItemWidget_GetServerName, Result) == 0x000000, "Member 'SQServerListItemWidget_GetServerName::Result' has a wrong offset!");
static_assert(offsetof(SQServerListItemWidget_GetServerName, ReturnValue) == 0x000108, "Member 'SQServerListItemWidget_GetServerName::ReturnValue' has a wrong offset!");

// Function Squad.SQDeployableInteractable.BP_PickedUp
// 0x0008 (0x0008 - 0x0000)
struct SQDeployableInteractable_BP_PickedUp final
{
public:
	class ASQEquipableItem*                       EquippableDeployableInteractable;                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployableInteractable_BP_PickedUp) == 0x000008, "Wrong alignment on SQDeployableInteractable_BP_PickedUp");
static_assert(sizeof(SQDeployableInteractable_BP_PickedUp) == 0x000008, "Wrong size on SQDeployableInteractable_BP_PickedUp");
static_assert(offsetof(SQDeployableInteractable_BP_PickedUp, EquippableDeployableInteractable) == 0x000000, "Member 'SQDeployableInteractable_BP_PickedUp::EquippableDeployableInteractable' has a wrong offset!");

// Function Squad.SQObjectiveRuleset.ClearAndGenerateMarkersForTeam
// 0x0001 (0x0001 - 0x0000)
struct SQObjectiveRuleset_ClearAndGenerateMarkersForTeam final
{
public:
	ESQTeam                                       Team;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQObjectiveRuleset_ClearAndGenerateMarkersForTeam) == 0x000001, "Wrong alignment on SQObjectiveRuleset_ClearAndGenerateMarkersForTeam");
static_assert(sizeof(SQObjectiveRuleset_ClearAndGenerateMarkersForTeam) == 0x000001, "Wrong size on SQObjectiveRuleset_ClearAndGenerateMarkersForTeam");
static_assert(offsetof(SQObjectiveRuleset_ClearAndGenerateMarkersForTeam, Team) == 0x000000, "Member 'SQObjectiveRuleset_ClearAndGenerateMarkersForTeam::Team' has a wrong offset!");

// Function Squad.SQObjectiveRuleset.DelayShowNewObjectives
// 0x0004 (0x0004 - 0x0000)
struct SQObjectiveRuleset_DelayShowNewObjectives final
{
public:
	float                                         InDelay;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQObjectiveRuleset_DelayShowNewObjectives) == 0x000004, "Wrong alignment on SQObjectiveRuleset_DelayShowNewObjectives");
static_assert(sizeof(SQObjectiveRuleset_DelayShowNewObjectives) == 0x000004, "Wrong size on SQObjectiveRuleset_DelayShowNewObjectives");
static_assert(offsetof(SQObjectiveRuleset_DelayShowNewObjectives, InDelay) == 0x000000, "Member 'SQObjectiveRuleset_DelayShowNewObjectives::InDelay' has a wrong offset!");

// Function Squad.SQObjectiveRuleset.GenerateMarkersForTeam
// 0x0001 (0x0001 - 0x0000)
struct SQObjectiveRuleset_GenerateMarkersForTeam final
{
public:
	ESQTeam                                       Team;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQObjectiveRuleset_GenerateMarkersForTeam) == 0x000001, "Wrong alignment on SQObjectiveRuleset_GenerateMarkersForTeam");
static_assert(sizeof(SQObjectiveRuleset_GenerateMarkersForTeam) == 0x000001, "Wrong size on SQObjectiveRuleset_GenerateMarkersForTeam");
static_assert(offsetof(SQObjectiveRuleset_GenerateMarkersForTeam, Team) == 0x000000, "Member 'SQObjectiveRuleset_GenerateMarkersForTeam::Team' has a wrong offset!");

// Function Squad.SQObjectiveRuleset.OnObjectiveMet
// 0x0008 (0x0008 - 0x0000)
struct SQObjectiveRuleset_OnObjectiveMet final
{
public:
	class ASQObjective*                           ObjectiveMet;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQObjectiveRuleset_OnObjectiveMet) == 0x000008, "Wrong alignment on SQObjectiveRuleset_OnObjectiveMet");
static_assert(sizeof(SQObjectiveRuleset_OnObjectiveMet) == 0x000008, "Wrong size on SQObjectiveRuleset_OnObjectiveMet");
static_assert(offsetof(SQObjectiveRuleset_OnObjectiveMet, ObjectiveMet) == 0x000000, "Member 'SQObjectiveRuleset_OnObjectiveMet::ObjectiveMet' has a wrong offset!");

// Function Squad.SQObjectiveRuleset.OnObjectiveShown
// 0x0008 (0x0008 - 0x0000)
struct SQObjectiveRuleset_OnObjectiveShown final
{
public:
	class ASQObjective*                           ObjectiveShown;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQObjectiveRuleset_OnObjectiveShown) == 0x000008, "Wrong alignment on SQObjectiveRuleset_OnObjectiveShown");
static_assert(sizeof(SQObjectiveRuleset_OnObjectiveShown) == 0x000008, "Wrong size on SQObjectiveRuleset_OnObjectiveShown");
static_assert(offsetof(SQObjectiveRuleset_OnObjectiveShown, ObjectiveShown) == 0x000000, "Member 'SQObjectiveRuleset_OnObjectiveShown::ObjectiveShown' has a wrong offset!");

// Function Squad.SQObjectiveRuleset.ShowNewObjectives
// 0x0010 (0x0010 - 0x0000)
struct SQObjectiveRuleset_ShowNewObjectives final
{
public:
	TArray<class ASQObjective*>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQObjectiveRuleset_ShowNewObjectives) == 0x000008, "Wrong alignment on SQObjectiveRuleset_ShowNewObjectives");
static_assert(sizeof(SQObjectiveRuleset_ShowNewObjectives) == 0x000010, "Wrong size on SQObjectiveRuleset_ShowNewObjectives");
static_assert(offsetof(SQObjectiveRuleset_ShowNewObjectives, ReturnValue) == 0x000000, "Member 'SQObjectiveRuleset_ShowNewObjectives::ReturnValue' has a wrong offset!");

// Function Squad.SQObjectiveRuleset.RandomlySelectDistantUnusedObjectiveLocation
// 0x0040 (0x0040 - 0x0000)
struct SQObjectiveRuleset_RandomlySelectDistantUnusedObjectiveLocation final
{
public:
	struct FTransform                             OutTransform;                                      // 0x0000(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10E6[0xF];                                     // 0x0031(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQObjectiveRuleset_RandomlySelectDistantUnusedObjectiveLocation) == 0x000010, "Wrong alignment on SQObjectiveRuleset_RandomlySelectDistantUnusedObjectiveLocation");
static_assert(sizeof(SQObjectiveRuleset_RandomlySelectDistantUnusedObjectiveLocation) == 0x000040, "Wrong size on SQObjectiveRuleset_RandomlySelectDistantUnusedObjectiveLocation");
static_assert(offsetof(SQObjectiveRuleset_RandomlySelectDistantUnusedObjectiveLocation, OutTransform) == 0x000000, "Member 'SQObjectiveRuleset_RandomlySelectDistantUnusedObjectiveLocation::OutTransform' has a wrong offset!");
static_assert(offsetof(SQObjectiveRuleset_RandomlySelectDistantUnusedObjectiveLocation, ReturnValue) == 0x000030, "Member 'SQObjectiveRuleset_RandomlySelectDistantUnusedObjectiveLocation::ReturnValue' has a wrong offset!");

// Function Squad.SQObjectiveRuleset.RandomlySelectUnusedObjectiveLocation
// 0x0040 (0x0040 - 0x0000)
struct SQObjectiveRuleset_RandomlySelectUnusedObjectiveLocation final
{
public:
	struct FTransform                             OutTransform;                                      // 0x0000(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10E7[0xF];                                     // 0x0031(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQObjectiveRuleset_RandomlySelectUnusedObjectiveLocation) == 0x000010, "Wrong alignment on SQObjectiveRuleset_RandomlySelectUnusedObjectiveLocation");
static_assert(sizeof(SQObjectiveRuleset_RandomlySelectUnusedObjectiveLocation) == 0x000040, "Wrong size on SQObjectiveRuleset_RandomlySelectUnusedObjectiveLocation");
static_assert(offsetof(SQObjectiveRuleset_RandomlySelectUnusedObjectiveLocation, OutTransform) == 0x000000, "Member 'SQObjectiveRuleset_RandomlySelectUnusedObjectiveLocation::OutTransform' has a wrong offset!");
static_assert(offsetof(SQObjectiveRuleset_RandomlySelectUnusedObjectiveLocation, ReturnValue) == 0x000030, "Member 'SQObjectiveRuleset_RandomlySelectUnusedObjectiveLocation::ReturnValue' has a wrong offset!");

// Function Squad.SQInsurgencyRuleset.GetNumberOfPlayersOnServer
// 0x0004 (0x0004 - 0x0000)
struct SQInsurgencyRuleset_GetNumberOfPlayersOnServer final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQInsurgencyRuleset_GetNumberOfPlayersOnServer) == 0x000004, "Wrong alignment on SQInsurgencyRuleset_GetNumberOfPlayersOnServer");
static_assert(sizeof(SQInsurgencyRuleset_GetNumberOfPlayersOnServer) == 0x000004, "Wrong size on SQInsurgencyRuleset_GetNumberOfPlayersOnServer");
static_assert(offsetof(SQInsurgencyRuleset_GetNumberOfPlayersOnServer, ReturnValue) == 0x000000, "Member 'SQInsurgencyRuleset_GetNumberOfPlayersOnServer::ReturnValue' has a wrong offset!");

// Function Squad.SQInsurgencyRuleset.NotifyCoalitionOfCaches
// 0x0010 (0x0010 - 0x0000)
struct SQInsurgencyRuleset_NotifyCoalitionOfCaches final
{
public:
	TArray<class ASQObjective*>                   NewCaches;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQInsurgencyRuleset_NotifyCoalitionOfCaches) == 0x000008, "Wrong alignment on SQInsurgencyRuleset_NotifyCoalitionOfCaches");
static_assert(sizeof(SQInsurgencyRuleset_NotifyCoalitionOfCaches) == 0x000010, "Wrong size on SQInsurgencyRuleset_NotifyCoalitionOfCaches");
static_assert(offsetof(SQInsurgencyRuleset_NotifyCoalitionOfCaches, NewCaches) == 0x000000, "Member 'SQInsurgencyRuleset_NotifyCoalitionOfCaches::NewCaches' has a wrong offset!");

// Function Squad.SQWeapon.BlueprintOnFire
// 0x000C (0x000C - 0x0000)
struct SQWeapon_BlueprintOnFire final
{
public:
	struct FVector                                Origin;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_BlueprintOnFire) == 0x000004, "Wrong alignment on SQWeapon_BlueprintOnFire");
static_assert(sizeof(SQWeapon_BlueprintOnFire) == 0x00000C, "Wrong size on SQWeapon_BlueprintOnFire");
static_assert(offsetof(SQWeapon_BlueprintOnFire, Origin) == 0x000000, "Member 'SQWeapon_BlueprintOnFire::Origin' has a wrong offset!");

// Function Squad.SQWeapon.BlueprintOnZoom
// 0x0001 (0x0001 - 0x0000)
struct SQWeapon_BlueprintOnZoom final
{
public:
	bool                                          bNewZoom;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_BlueprintOnZoom) == 0x000001, "Wrong alignment on SQWeapon_BlueprintOnZoom");
static_assert(sizeof(SQWeapon_BlueprintOnZoom) == 0x000001, "Wrong size on SQWeapon_BlueprintOnZoom");
static_assert(offsetof(SQWeapon_BlueprintOnZoom, bNewZoom) == 0x000000, "Member 'SQWeapon_BlueprintOnZoom::bNewZoom' has a wrong offset!");

// Function Squad.SQWeapon.ModifyZeroing
// 0x0001 (0x0001 - 0x0000)
struct SQWeapon_ModifyZeroing final
{
public:
	bool                                          bIncrease;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_ModifyZeroing) == 0x000001, "Wrong alignment on SQWeapon_ModifyZeroing");
static_assert(sizeof(SQWeapon_ModifyZeroing) == 0x000001, "Wrong size on SQWeapon_ModifyZeroing");
static_assert(offsetof(SQWeapon_ModifyZeroing, bIncrease) == 0x000000, "Member 'SQWeapon_ModifyZeroing::bIncrease' has a wrong offset!");

// Function Squad.SQWeapon.MulticastFireMultipleProjectileEffects
// 0x0040 (0x0040 - 0x0000)
struct SQWeapon_MulticastFireMultipleProjectileEffects final
{
public:
	TArray<struct FSQPenetrationProxy>            HitResultsZeroBased;                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FSQShotInfo                            ShotInfoZeroBased;                                 // 0x0010(0x002C)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsRayTracedShot;                                  // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsManuallyCalled;                                 // 0x003D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10F9[0x2];                                     // 0x003E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQWeapon_MulticastFireMultipleProjectileEffects) == 0x000008, "Wrong alignment on SQWeapon_MulticastFireMultipleProjectileEffects");
static_assert(sizeof(SQWeapon_MulticastFireMultipleProjectileEffects) == 0x000040, "Wrong size on SQWeapon_MulticastFireMultipleProjectileEffects");
static_assert(offsetof(SQWeapon_MulticastFireMultipleProjectileEffects, HitResultsZeroBased) == 0x000000, "Member 'SQWeapon_MulticastFireMultipleProjectileEffects::HitResultsZeroBased' has a wrong offset!");
static_assert(offsetof(SQWeapon_MulticastFireMultipleProjectileEffects, ShotInfoZeroBased) == 0x000010, "Member 'SQWeapon_MulticastFireMultipleProjectileEffects::ShotInfoZeroBased' has a wrong offset!");
static_assert(offsetof(SQWeapon_MulticastFireMultipleProjectileEffects, bIsRayTracedShot) == 0x00003C, "Member 'SQWeapon_MulticastFireMultipleProjectileEffects::bIsRayTracedShot' has a wrong offset!");
static_assert(offsetof(SQWeapon_MulticastFireMultipleProjectileEffects, bIsManuallyCalled) == 0x00003D, "Member 'SQWeapon_MulticastFireMultipleProjectileEffects::bIsManuallyCalled' has a wrong offset!");

// Function Squad.SQWeapon.MulticastFireProjectile
// 0x0018 (0x0018 - 0x0000)
struct SQWeapon_MulticastFireProjectile final
{
public:
	struct FVector                                OriginZeroBased;                                   // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              ShootDir;                                          // 0x000C(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_MulticastFireProjectile) == 0x000004, "Wrong alignment on SQWeapon_MulticastFireProjectile");
static_assert(sizeof(SQWeapon_MulticastFireProjectile) == 0x000018, "Wrong size on SQWeapon_MulticastFireProjectile");
static_assert(offsetof(SQWeapon_MulticastFireProjectile, OriginZeroBased) == 0x000000, "Member 'SQWeapon_MulticastFireProjectile::OriginZeroBased' has a wrong offset!");
static_assert(offsetof(SQWeapon_MulticastFireProjectile, ShootDir) == 0x00000C, "Member 'SQWeapon_MulticastFireProjectile::ShootDir' has a wrong offset!");

// Function Squad.SQWeapon.MulticastFireProjectileWithId
// 0x0020 (0x0020 - 0x0000)
struct SQWeapon_MulticastFireProjectileWithId final
{
public:
	struct FVector                                OriginZeroBased;                                   // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantizeNormal              ShootDir;                                          // 0x000C(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        UniqueProjectileId;                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_MulticastFireProjectileWithId) == 0x000008, "Wrong alignment on SQWeapon_MulticastFireProjectileWithId");
static_assert(sizeof(SQWeapon_MulticastFireProjectileWithId) == 0x000020, "Wrong size on SQWeapon_MulticastFireProjectileWithId");
static_assert(offsetof(SQWeapon_MulticastFireProjectileWithId, OriginZeroBased) == 0x000000, "Member 'SQWeapon_MulticastFireProjectileWithId::OriginZeroBased' has a wrong offset!");
static_assert(offsetof(SQWeapon_MulticastFireProjectileWithId, ShootDir) == 0x00000C, "Member 'SQWeapon_MulticastFireProjectileWithId::ShootDir' has a wrong offset!");
static_assert(offsetof(SQWeapon_MulticastFireProjectileWithId, UniqueProjectileId) == 0x000018, "Member 'SQWeapon_MulticastFireProjectileWithId::UniqueProjectileId' has a wrong offset!");

// Function Squad.SQWeapon.OnPawnOwnerChanged
// 0x0008 (0x0008 - 0x0000)
struct SQWeapon_OnPawnOwnerChanged final
{
public:
	class APawn*                                  NewPawnOwner;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_OnPawnOwnerChanged) == 0x000008, "Wrong alignment on SQWeapon_OnPawnOwnerChanged");
static_assert(sizeof(SQWeapon_OnPawnOwnerChanged) == 0x000008, "Wrong size on SQWeapon_OnPawnOwnerChanged");
static_assert(offsetof(SQWeapon_OnPawnOwnerChanged, NewPawnOwner) == 0x000000, "Member 'SQWeapon_OnPawnOwnerChanged::NewPawnOwner' has a wrong offset!");

// Function Squad.SQWeapon.OnRep_AimingDownSights
// 0x0001 (0x0001 - 0x0000)
struct SQWeapon_OnRep_AimingDownSights final
{
public:
	bool                                          bPrevAimingDownSights;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_OnRep_AimingDownSights) == 0x000001, "Wrong alignment on SQWeapon_OnRep_AimingDownSights");
static_assert(sizeof(SQWeapon_OnRep_AimingDownSights) == 0x000001, "Wrong size on SQWeapon_OnRep_AimingDownSights");
static_assert(offsetof(SQWeapon_OnRep_AimingDownSights, bPrevAimingDownSights) == 0x000000, "Member 'SQWeapon_OnRep_AimingDownSights::bPrevAimingDownSights' has a wrong offset!");

// Function Squad.SQWeapon.OnRep_Magazines
// 0x0010 (0x0010 - 0x0000)
struct SQWeapon_OnRep_Magazines final
{
public:
	TArray<struct FSQMagazineData>                OldMagazines;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_OnRep_Magazines) == 0x000008, "Wrong alignment on SQWeapon_OnRep_Magazines");
static_assert(sizeof(SQWeapon_OnRep_Magazines) == 0x000010, "Wrong size on SQWeapon_OnRep_Magazines");
static_assert(offsetof(SQWeapon_OnRep_Magazines, OldMagazines) == 0x000000, "Member 'SQWeapon_OnRep_Magazines::OldMagazines' has a wrong offset!");

// Function Squad.SQWeapon.PlayFiringSound
// 0x0018 (0x0018 - 0x0000)
struct SQWeapon_PlayFiringSound final
{
public:
	class USoundBase*                             Sound1p;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound3p;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_PlayFiringSound) == 0x000008, "Wrong alignment on SQWeapon_PlayFiringSound");
static_assert(sizeof(SQWeapon_PlayFiringSound) == 0x000018, "Wrong size on SQWeapon_PlayFiringSound");
static_assert(offsetof(SQWeapon_PlayFiringSound, Sound1p) == 0x000000, "Member 'SQWeapon_PlayFiringSound::Sound1p' has a wrong offset!");
static_assert(offsetof(SQWeapon_PlayFiringSound, Sound3p) == 0x000008, "Member 'SQWeapon_PlayFiringSound::Sound3p' has a wrong offset!");
static_assert(offsetof(SQWeapon_PlayFiringSound, SocketName) == 0x000010, "Member 'SQWeapon_PlayFiringSound::SocketName' has a wrong offset!");

// Function Squad.SQWeapon.PlayImpactEffect
// 0x00B0 (0x00B0 - 0x0000)
struct SQWeapon_PlayImpactEffect final
{
public:
	struct FSQPenetrationTrace                    PenetrationHitInputZeroBased;                      // 0x0000(0x00AC)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bIsProjectileTracer;                               // 0x00AC(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10FA[0x3];                                     // 0x00AD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQWeapon_PlayImpactEffect) == 0x000004, "Wrong alignment on SQWeapon_PlayImpactEffect");
static_assert(sizeof(SQWeapon_PlayImpactEffect) == 0x0000B0, "Wrong size on SQWeapon_PlayImpactEffect");
static_assert(offsetof(SQWeapon_PlayImpactEffect, PenetrationHitInputZeroBased) == 0x000000, "Member 'SQWeapon_PlayImpactEffect::PenetrationHitInputZeroBased' has a wrong offset!");
static_assert(offsetof(SQWeapon_PlayImpactEffect, bIsProjectileTracer) == 0x0000AC, "Member 'SQWeapon_PlayImpactEffect::bIsProjectileTracer' has a wrong offset!");

// Function Squad.SQWeapon.ServerFireProjectile
// 0x002C (0x002C - 0x0000)
struct SQWeapon_ServerFireProjectile final
{
public:
	struct FSQShotInfo                            ShotInfoZeroBased;                                 // 0x0000(0x002C)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_ServerFireProjectile) == 0x000004, "Wrong alignment on SQWeapon_ServerFireProjectile");
static_assert(sizeof(SQWeapon_ServerFireProjectile) == 0x00002C, "Wrong size on SQWeapon_ServerFireProjectile");
static_assert(offsetof(SQWeapon_ServerFireProjectile, ShotInfoZeroBased) == 0x000000, "Member 'SQWeapon_ServerFireProjectile::ShotInfoZeroBased' has a wrong offset!");

// Function Squad.SQWeapon.ServerFireProjectileWithId
// 0x0038 (0x0038 - 0x0000)
struct SQWeapon_ServerFireProjectileWithId final
{
public:
	struct FSQShotInfo                            ShotInfoZeroBased;                                 // 0x0000(0x002C)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10FB[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	uint64                                        UniqueProjectileId;                                // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_ServerFireProjectileWithId) == 0x000008, "Wrong alignment on SQWeapon_ServerFireProjectileWithId");
static_assert(sizeof(SQWeapon_ServerFireProjectileWithId) == 0x000038, "Wrong size on SQWeapon_ServerFireProjectileWithId");
static_assert(offsetof(SQWeapon_ServerFireProjectileWithId, ShotInfoZeroBased) == 0x000000, "Member 'SQWeapon_ServerFireProjectileWithId::ShotInfoZeroBased' has a wrong offset!");
static_assert(offsetof(SQWeapon_ServerFireProjectileWithId, UniqueProjectileId) == 0x000030, "Member 'SQWeapon_ServerFireProjectileWithId::UniqueProjectileId' has a wrong offset!");

// Function Squad.SQWeapon.ServerNotifyFireAndMiss
// 0x00B8 (0x00B8 - 0x0000)
struct SQWeapon_ServerNotifyFireAndMiss final
{
public:
	struct FSQShotInfo                            ShotInfoZeroBased;                                 // 0x0000(0x002C)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResultZeroBased;                                // 0x002C(0x0088)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bIsRayTracedShot;                                  // 0x00B4(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10FC[0x3];                                     // 0x00B5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQWeapon_ServerNotifyFireAndMiss) == 0x000004, "Wrong alignment on SQWeapon_ServerNotifyFireAndMiss");
static_assert(sizeof(SQWeapon_ServerNotifyFireAndMiss) == 0x0000B8, "Wrong size on SQWeapon_ServerNotifyFireAndMiss");
static_assert(offsetof(SQWeapon_ServerNotifyFireAndMiss, ShotInfoZeroBased) == 0x000000, "Member 'SQWeapon_ServerNotifyFireAndMiss::ShotInfoZeroBased' has a wrong offset!");
static_assert(offsetof(SQWeapon_ServerNotifyFireAndMiss, HitResultZeroBased) == 0x00002C, "Member 'SQWeapon_ServerNotifyFireAndMiss::HitResultZeroBased' has a wrong offset!");
static_assert(offsetof(SQWeapon_ServerNotifyFireAndMiss, bIsRayTracedShot) == 0x0000B4, "Member 'SQWeapon_ServerNotifyFireAndMiss::bIsRayTracedShot' has a wrong offset!");

// Function Squad.SQWeapon.ServerNotifyHit
// 0x0048 (0x0048 - 0x0000)
struct SQWeapon_ServerNotifyHit final
{
public:
	struct FSQShotInfo                            ShotInfoZeroBased;                                 // 0x0000(0x002C)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10FD[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQPenetrationTrace>            TargetsZeroBased;                                  // 0x0030(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bIsRayTracedShot;                                  // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsManuallyCalled;                                 // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10FE[0x6];                                     // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQWeapon_ServerNotifyHit) == 0x000008, "Wrong alignment on SQWeapon_ServerNotifyHit");
static_assert(sizeof(SQWeapon_ServerNotifyHit) == 0x000048, "Wrong size on SQWeapon_ServerNotifyHit");
static_assert(offsetof(SQWeapon_ServerNotifyHit, ShotInfoZeroBased) == 0x000000, "Member 'SQWeapon_ServerNotifyHit::ShotInfoZeroBased' has a wrong offset!");
static_assert(offsetof(SQWeapon_ServerNotifyHit, TargetsZeroBased) == 0x000030, "Member 'SQWeapon_ServerNotifyHit::TargetsZeroBased' has a wrong offset!");
static_assert(offsetof(SQWeapon_ServerNotifyHit, bIsRayTracedShot) == 0x000040, "Member 'SQWeapon_ServerNotifyHit::bIsRayTracedShot' has a wrong offset!");
static_assert(offsetof(SQWeapon_ServerNotifyHit, bIsManuallyCalled) == 0x000041, "Member 'SQWeapon_ServerNotifyHit::bIsManuallyCalled' has a wrong offset!");

// Function Squad.SQWeapon.ServerSetCurrentFireMode
// 0x0004 (0x0004 - 0x0000)
struct SQWeapon_ServerSetCurrentFireMode final
{
public:
	int32                                         NewCurrentFireMode;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_ServerSetCurrentFireMode) == 0x000004, "Wrong alignment on SQWeapon_ServerSetCurrentFireMode");
static_assert(sizeof(SQWeapon_ServerSetCurrentFireMode) == 0x000004, "Wrong size on SQWeapon_ServerSetCurrentFireMode");
static_assert(offsetof(SQWeapon_ServerSetCurrentFireMode, NewCurrentFireMode) == 0x000000, "Member 'SQWeapon_ServerSetCurrentFireMode::NewCurrentFireMode' has a wrong offset!");

// Function Squad.SQWeapon.ServerSetIsAimingDownSights
// 0x0001 (0x0001 - 0x0000)
struct SQWeapon_ServerSetIsAimingDownSights final
{
public:
	bool                                          bIsAimingDownSights;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_ServerSetIsAimingDownSights) == 0x000001, "Wrong alignment on SQWeapon_ServerSetIsAimingDownSights");
static_assert(sizeof(SQWeapon_ServerSetIsAimingDownSights) == 0x000001, "Wrong size on SQWeapon_ServerSetIsAimingDownSights");
static_assert(offsetof(SQWeapon_ServerSetIsAimingDownSights, bIsAimingDownSights) == 0x000000, "Member 'SQWeapon_ServerSetIsAimingDownSights::bIsAimingDownSights' has a wrong offset!");

// Function Squad.SQWeapon.SetZoom
// 0x0002 (0x0002 - 0x0000)
struct SQWeapon_SetZoom final
{
public:
	bool                                          bNewZoom;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForce;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_SetZoom) == 0x000001, "Wrong alignment on SQWeapon_SetZoom");
static_assert(sizeof(SQWeapon_SetZoom) == 0x000002, "Wrong size on SQWeapon_SetZoom");
static_assert(offsetof(SQWeapon_SetZoom, bNewZoom) == 0x000000, "Member 'SQWeapon_SetZoom::bNewZoom' has a wrong offset!");
static_assert(offsetof(SQWeapon_SetZoom, bForce) == 0x000001, "Member 'SQWeapon_SetZoom::bForce' has a wrong offset!");

// Function Squad.SQWeapon.UpdateVariableADSBipod
// 0x0001 (0x0001 - 0x0000)
struct SQWeapon_UpdateVariableADSBipod final
{
public:
	bool                                          bIsBipod;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_UpdateVariableADSBipod) == 0x000001, "Wrong alignment on SQWeapon_UpdateVariableADSBipod");
static_assert(sizeof(SQWeapon_UpdateVariableADSBipod) == 0x000001, "Wrong size on SQWeapon_UpdateVariableADSBipod");
static_assert(offsetof(SQWeapon_UpdateVariableADSBipod, bIsBipod) == 0x000000, "Member 'SQWeapon_UpdateVariableADSBipod::bIsBipod' has a wrong offset!");

// Function Squad.SQWeapon.UpdateVariableADSStance
// 0x0001 (0x0001 - 0x0000)
struct SQWeapon_UpdateVariableADSStance final
{
public:
	ESQStance                                     Stance;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_UpdateVariableADSStance) == 0x000001, "Wrong alignment on SQWeapon_UpdateVariableADSStance");
static_assert(sizeof(SQWeapon_UpdateVariableADSStance) == 0x000001, "Wrong size on SQWeapon_UpdateVariableADSStance");
static_assert(offsetof(SQWeapon_UpdateVariableADSStance, Stance) == 0x000000, "Member 'SQWeapon_UpdateVariableADSStance::Stance' has a wrong offset!");

// Function Squad.SQWeapon.CanToggleFiremode
// 0x0001 (0x0001 - 0x0000)
struct SQWeapon_CanToggleFiremode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_CanToggleFiremode) == 0x000001, "Wrong alignment on SQWeapon_CanToggleFiremode");
static_assert(sizeof(SQWeapon_CanToggleFiremode) == 0x000001, "Wrong size on SQWeapon_CanToggleFiremode");
static_assert(offsetof(SQWeapon_CanToggleFiremode, ReturnValue) == 0x000000, "Member 'SQWeapon_CanToggleFiremode::ReturnValue' has a wrong offset!");

// Function Squad.SQWeapon.GetAimDirection
// 0x000C (0x000C - 0x0000)
struct SQWeapon_GetAimDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_GetAimDirection) == 0x000004, "Wrong alignment on SQWeapon_GetAimDirection");
static_assert(sizeof(SQWeapon_GetAimDirection) == 0x00000C, "Wrong size on SQWeapon_GetAimDirection");
static_assert(offsetof(SQWeapon_GetAimDirection, ReturnValue) == 0x000000, "Member 'SQWeapon_GetAimDirection::ReturnValue' has a wrong offset!");

// Function Squad.SQWeapon.GetAimLocation
// 0x000C (0x000C - 0x0000)
struct SQWeapon_GetAimLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_GetAimLocation) == 0x000004, "Wrong alignment on SQWeapon_GetAimLocation");
static_assert(sizeof(SQWeapon_GetAimLocation) == 0x00000C, "Wrong size on SQWeapon_GetAimLocation");
static_assert(offsetof(SQWeapon_GetAimLocation, ReturnValue) == 0x000000, "Member 'SQWeapon_GetAimLocation::ReturnValue' has a wrong offset!");

// Function Squad.SQWeapon.GetCurrentMOA
// 0x0004 (0x0004 - 0x0000)
struct SQWeapon_GetCurrentMOA final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_GetCurrentMOA) == 0x000004, "Wrong alignment on SQWeapon_GetCurrentMOA");
static_assert(sizeof(SQWeapon_GetCurrentMOA) == 0x000004, "Wrong size on SQWeapon_GetCurrentMOA");
static_assert(offsetof(SQWeapon_GetCurrentMOA, ReturnValue) == 0x000000, "Member 'SQWeapon_GetCurrentMOA::ReturnValue' has a wrong offset!");

// Function Squad.SQWeapon.GetMOAAdjustedAimDirection
// 0x0018 (0x0018 - 0x0000)
struct SQWeapon_GetMOAAdjustedAimDirection final
{
public:
	struct FVector                                AimDirection;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_GetMOAAdjustedAimDirection) == 0x000004, "Wrong alignment on SQWeapon_GetMOAAdjustedAimDirection");
static_assert(sizeof(SQWeapon_GetMOAAdjustedAimDirection) == 0x000018, "Wrong size on SQWeapon_GetMOAAdjustedAimDirection");
static_assert(offsetof(SQWeapon_GetMOAAdjustedAimDirection, AimDirection) == 0x000000, "Member 'SQWeapon_GetMOAAdjustedAimDirection::AimDirection' has a wrong offset!");
static_assert(offsetof(SQWeapon_GetMOAAdjustedAimDirection, ReturnValue) == 0x00000C, "Member 'SQWeapon_GetMOAAdjustedAimDirection::ReturnValue' has a wrong offset!");

// Function Squad.SQWeapon.GetMOAAdjustedAimDirectionFromRotator
// 0x0018 (0x0018 - 0x0000)
struct SQWeapon_GetMOAAdjustedAimDirectionFromRotator final
{
public:
	struct FRotator                               AimDirection;                                      // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_GetMOAAdjustedAimDirectionFromRotator) == 0x000004, "Wrong alignment on SQWeapon_GetMOAAdjustedAimDirectionFromRotator");
static_assert(sizeof(SQWeapon_GetMOAAdjustedAimDirectionFromRotator) == 0x000018, "Wrong size on SQWeapon_GetMOAAdjustedAimDirectionFromRotator");
static_assert(offsetof(SQWeapon_GetMOAAdjustedAimDirectionFromRotator, AimDirection) == 0x000000, "Member 'SQWeapon_GetMOAAdjustedAimDirectionFromRotator::AimDirection' has a wrong offset!");
static_assert(offsetof(SQWeapon_GetMOAAdjustedAimDirectionFromRotator, ReturnValue) == 0x00000C, "Member 'SQWeapon_GetMOAAdjustedAimDirectionFromRotator::ReturnValue' has a wrong offset!");

// Function Squad.SQWeapon.GetProjectileSpawnTransform
// 0x0030 (0x0030 - 0x0000)
struct SQWeapon_GetProjectileSpawnTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_GetProjectileSpawnTransform) == 0x000010, "Wrong alignment on SQWeapon_GetProjectileSpawnTransform");
static_assert(sizeof(SQWeapon_GetProjectileSpawnTransform) == 0x000030, "Wrong size on SQWeapon_GetProjectileSpawnTransform");
static_assert(offsetof(SQWeapon_GetProjectileSpawnTransform, ReturnValue) == 0x000000, "Member 'SQWeapon_GetProjectileSpawnTransform::ReturnValue' has a wrong offset!");

// Function Squad.SQWeapon.GetWeaponStaticInfo
// 0x0008 (0x0008 - 0x0000)
struct SQWeapon_GetWeaponStaticInfo final
{
public:
	class USQWeaponStaticInfo*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_GetWeaponStaticInfo) == 0x000008, "Wrong alignment on SQWeapon_GetWeaponStaticInfo");
static_assert(sizeof(SQWeapon_GetWeaponStaticInfo) == 0x000008, "Wrong size on SQWeapon_GetWeaponStaticInfo");
static_assert(offsetof(SQWeapon_GetWeaponStaticInfo, ReturnValue) == 0x000000, "Member 'SQWeapon_GetWeaponStaticInfo::ReturnValue' has a wrong offset!");

// Function Squad.SQWeapon.GetZoomProgress
// 0x0008 (0x0008 - 0x0000)
struct SQWeapon_GetZoomProgress final
{
public:
	bool                                          bJustToggledZoom;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10FF[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_GetZoomProgress) == 0x000004, "Wrong alignment on SQWeapon_GetZoomProgress");
static_assert(sizeof(SQWeapon_GetZoomProgress) == 0x000008, "Wrong size on SQWeapon_GetZoomProgress");
static_assert(offsetof(SQWeapon_GetZoomProgress, bJustToggledZoom) == 0x000000, "Member 'SQWeapon_GetZoomProgress::bJustToggledZoom' has a wrong offset!");
static_assert(offsetof(SQWeapon_GetZoomProgress, ReturnValue) == 0x000004, "Member 'SQWeapon_GetZoomProgress::ReturnValue' has a wrong offset!");

// Function Squad.SQWeapon.IsAimingDownSights
// 0x0001 (0x0001 - 0x0000)
struct SQWeapon_IsAimingDownSights final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_IsAimingDownSights) == 0x000001, "Wrong alignment on SQWeapon_IsAimingDownSights");
static_assert(sizeof(SQWeapon_IsAimingDownSights) == 0x000001, "Wrong size on SQWeapon_IsAimingDownSights");
static_assert(offsetof(SQWeapon_IsAimingDownSights, ReturnValue) == 0x000000, "Member 'SQWeapon_IsAimingDownSights::ReturnValue' has a wrong offset!");

// Function Squad.SQWeapon.IsFullyZoomed
// 0x0001 (0x0001 - 0x0000)
struct SQWeapon_IsFullyZoomed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_IsFullyZoomed) == 0x000001, "Wrong alignment on SQWeapon_IsFullyZoomed");
static_assert(sizeof(SQWeapon_IsFullyZoomed) == 0x000001, "Wrong size on SQWeapon_IsFullyZoomed");
static_assert(offsetof(SQWeapon_IsFullyZoomed, ReturnValue) == 0x000000, "Member 'SQWeapon_IsFullyZoomed::ReturnValue' has a wrong offset!");

// Function Squad.SQWeapon.IsPendingFire
// 0x0001 (0x0001 - 0x0000)
struct SQWeapon_IsPendingFire final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_IsPendingFire) == 0x000001, "Wrong alignment on SQWeapon_IsPendingFire");
static_assert(sizeof(SQWeapon_IsPendingFire) == 0x000001, "Wrong size on SQWeapon_IsPendingFire");
static_assert(offsetof(SQWeapon_IsPendingFire, ReturnValue) == 0x000000, "Member 'SQWeapon_IsPendingFire::ReturnValue' has a wrong offset!");

// Function Squad.SQWeapon.IsPullingTrigger
// 0x0001 (0x0001 - 0x0000)
struct SQWeapon_IsPullingTrigger final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_IsPullingTrigger) == 0x000001, "Wrong alignment on SQWeapon_IsPullingTrigger");
static_assert(sizeof(SQWeapon_IsPullingTrigger) == 0x000001, "Wrong size on SQWeapon_IsPullingTrigger");
static_assert(offsetof(SQWeapon_IsPullingTrigger, ReturnValue) == 0x000000, "Member 'SQWeapon_IsPullingTrigger::ReturnValue' has a wrong offset!");

// Function Squad.SQWeapon.IsReloading
// 0x0001 (0x0001 - 0x0000)
struct SQWeapon_IsReloading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_IsReloading) == 0x000001, "Wrong alignment on SQWeapon_IsReloading");
static_assert(sizeof(SQWeapon_IsReloading) == 0x000001, "Wrong size on SQWeapon_IsReloading");
static_assert(offsetof(SQWeapon_IsReloading, ReturnValue) == 0x000000, "Member 'SQWeapon_IsReloading::ReturnValue' has a wrong offset!");

// Function Squad.SQWeapon.IsZoomed
// 0x0001 (0x0001 - 0x0000)
struct SQWeapon_IsZoomed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_IsZoomed) == 0x000001, "Wrong alignment on SQWeapon_IsZoomed");
static_assert(sizeof(SQWeapon_IsZoomed) == 0x000001, "Wrong size on SQWeapon_IsZoomed");
static_assert(offsetof(SQWeapon_IsZoomed, ReturnValue) == 0x000000, "Member 'SQWeapon_IsZoomed::ReturnValue' has a wrong offset!");

// Function Squad.SQWeapon.MagazineHasAmmo
// 0x0001 (0x0001 - 0x0000)
struct SQWeapon_MagazineHasAmmo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_MagazineHasAmmo) == 0x000001, "Wrong alignment on SQWeapon_MagazineHasAmmo");
static_assert(sizeof(SQWeapon_MagazineHasAmmo) == 0x000001, "Wrong size on SQWeapon_MagazineHasAmmo");
static_assert(offsetof(SQWeapon_MagazineHasAmmo, ReturnValue) == 0x000000, "Member 'SQWeapon_MagazineHasAmmo::ReturnValue' has a wrong offset!");

// Function Squad.SQProgressWidget.BPOnTimerProgress
// 0x0004 (0x0004 - 0x0000)
struct SQProgressWidget_BPOnTimerProgress final
{
public:
	float                                         RemainingPct;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQProgressWidget_BPOnTimerProgress) == 0x000004, "Wrong alignment on SQProgressWidget_BPOnTimerProgress");
static_assert(sizeof(SQProgressWidget_BPOnTimerProgress) == 0x000004, "Wrong size on SQProgressWidget_BPOnTimerProgress");
static_assert(offsetof(SQProgressWidget_BPOnTimerProgress, RemainingPct) == 0x000000, "Member 'SQProgressWidget_BPOnTimerProgress::RemainingPct' has a wrong offset!");

// Function Squad.SQProgressWidget.ResumeTimerFromTime
// 0x0004 (0x0004 - 0x0000)
struct SQProgressWidget_ResumeTimerFromTime final
{
public:
	float                                         TimerStartedAt;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQProgressWidget_ResumeTimerFromTime) == 0x000004, "Wrong alignment on SQProgressWidget_ResumeTimerFromTime");
static_assert(sizeof(SQProgressWidget_ResumeTimerFromTime) == 0x000004, "Wrong size on SQProgressWidget_ResumeTimerFromTime");
static_assert(offsetof(SQProgressWidget_ResumeTimerFromTime, TimerStartedAt) == 0x000000, "Member 'SQProgressWidget_ResumeTimerFromTime::TimerStartedAt' has a wrong offset!");

// Function Squad.SQDeployableVehicle.IsCurrentWeaponInputEnabled
// 0x0001 (0x0001 - 0x0000)
struct SQDeployableVehicle_IsCurrentWeaponInputEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployableVehicle_IsCurrentWeaponInputEnabled) == 0x000001, "Wrong alignment on SQDeployableVehicle_IsCurrentWeaponInputEnabled");
static_assert(sizeof(SQDeployableVehicle_IsCurrentWeaponInputEnabled) == 0x000001, "Wrong size on SQDeployableVehicle_IsCurrentWeaponInputEnabled");
static_assert(offsetof(SQDeployableVehicle_IsCurrentWeaponInputEnabled, ReturnValue) == 0x000000, "Member 'SQDeployableVehicle_IsCurrentWeaponInputEnabled::ReturnValue' has a wrong offset!");

// Function Squad.SQDeployableVehicle.LookUp
// 0x0004 (0x0004 - 0x0000)
struct SQDeployableVehicle_LookUp final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployableVehicle_LookUp) == 0x000004, "Wrong alignment on SQDeployableVehicle_LookUp");
static_assert(sizeof(SQDeployableVehicle_LookUp) == 0x000004, "Wrong size on SQDeployableVehicle_LookUp");
static_assert(offsetof(SQDeployableVehicle_LookUp, Rate) == 0x000000, "Member 'SQDeployableVehicle_LookUp::Rate' has a wrong offset!");

// Function Squad.SQDeployableVehicle.LookUpAtRate
// 0x0004 (0x0004 - 0x0000)
struct SQDeployableVehicle_LookUpAtRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployableVehicle_LookUpAtRate) == 0x000004, "Wrong alignment on SQDeployableVehicle_LookUpAtRate");
static_assert(sizeof(SQDeployableVehicle_LookUpAtRate) == 0x000004, "Wrong size on SQDeployableVehicle_LookUpAtRate");
static_assert(offsetof(SQDeployableVehicle_LookUpAtRate, Rate) == 0x000000, "Member 'SQDeployableVehicle_LookUpAtRate::Rate' has a wrong offset!");

// Function Squad.SQDeployableVehicle.Turn
// 0x0004 (0x0004 - 0x0000)
struct SQDeployableVehicle_Turn final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployableVehicle_Turn) == 0x000004, "Wrong alignment on SQDeployableVehicle_Turn");
static_assert(sizeof(SQDeployableVehicle_Turn) == 0x000004, "Wrong size on SQDeployableVehicle_Turn");
static_assert(offsetof(SQDeployableVehicle_Turn, Rate) == 0x000000, "Member 'SQDeployableVehicle_Turn::Rate' has a wrong offset!");

// Function Squad.SQDeployableVehicle.TurnAtRate
// 0x0004 (0x0004 - 0x0000)
struct SQDeployableVehicle_TurnAtRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployableVehicle_TurnAtRate) == 0x000004, "Wrong alignment on SQDeployableVehicle_TurnAtRate");
static_assert(sizeof(SQDeployableVehicle_TurnAtRate) == 0x000004, "Wrong size on SQDeployableVehicle_TurnAtRate");
static_assert(offsetof(SQDeployableVehicle_TurnAtRate, Rate) == 0x000000, "Member 'SQDeployableVehicle_TurnAtRate::Rate' has a wrong offset!");

// Function Squad.SQDeployableVehicle.GetOwnerDeployable
// 0x0008 (0x0008 - 0x0000)
struct SQDeployableVehicle_GetOwnerDeployable final
{
public:
	class ASQDeployable*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployableVehicle_GetOwnerDeployable) == 0x000008, "Wrong alignment on SQDeployableVehicle_GetOwnerDeployable");
static_assert(sizeof(SQDeployableVehicle_GetOwnerDeployable) == 0x000008, "Wrong size on SQDeployableVehicle_GetOwnerDeployable");
static_assert(offsetof(SQDeployableVehicle_GetOwnerDeployable, ReturnValue) == 0x000000, "Member 'SQDeployableVehicle_GetOwnerDeployable::ReturnValue' has a wrong offset!");

// Function Squad.SQServerTagManager.GetPreferencesTags
// 0x0010 (0x0010 - 0x0000)
struct SQServerTagManager_GetPreferencesTags final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQServerTagManager_GetPreferencesTags) == 0x000008, "Wrong alignment on SQServerTagManager_GetPreferencesTags");
static_assert(sizeof(SQServerTagManager_GetPreferencesTags) == 0x000010, "Wrong size on SQServerTagManager_GetPreferencesTags");
static_assert(offsetof(SQServerTagManager_GetPreferencesTags, ReturnValue) == 0x000000, "Member 'SQServerTagManager_GetPreferencesTags::ReturnValue' has a wrong offset!");

// Function Squad.SQServerTagManager.GetServerTags
// 0x0118 (0x0118 - 0x0000)
struct SQServerTagManager_GetServerTags final
{
public:
	struct FBlueprintSessionResult                ServerSearchResult;                                // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FSQServerTag>                   ReturnValue;                                       // 0x0108(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQServerTagManager_GetServerTags) == 0x000008, "Wrong alignment on SQServerTagManager_GetServerTags");
static_assert(sizeof(SQServerTagManager_GetServerTags) == 0x000118, "Wrong size on SQServerTagManager_GetServerTags");
static_assert(offsetof(SQServerTagManager_GetServerTags, ServerSearchResult) == 0x000000, "Member 'SQServerTagManager_GetServerTags::ServerSearchResult' has a wrong offset!");
static_assert(offsetof(SQServerTagManager_GetServerTags, ReturnValue) == 0x000108, "Member 'SQServerTagManager_GetServerTags::ReturnValue' has a wrong offset!");

// Function Squad.SQServerTagManager.SetFilterByBitMask
// 0x0008 (0x0008 - 0x0000)
struct SQServerTagManager_SetFilterByBitMask final
{
public:
	ESQTagType                                    Section;                                           // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1105[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BitMask;                                           // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQServerTagManager_SetFilterByBitMask) == 0x000004, "Wrong alignment on SQServerTagManager_SetFilterByBitMask");
static_assert(sizeof(SQServerTagManager_SetFilterByBitMask) == 0x000008, "Wrong size on SQServerTagManager_SetFilterByBitMask");
static_assert(offsetof(SQServerTagManager_SetFilterByBitMask, Section) == 0x000000, "Member 'SQServerTagManager_SetFilterByBitMask::Section' has a wrong offset!");
static_assert(offsetof(SQServerTagManager_SetFilterByBitMask, BitMask) == 0x000004, "Member 'SQServerTagManager_SetFilterByBitMask::BitMask' has a wrong offset!");

// Function Squad.SQServerTagManager.SetSearchFilter
// 0x0018 (0x0018 - 0x0000)
struct SQServerTagManager_SetSearchFilter final
{
public:
	TArray<class FName>                           Tags;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1106[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQServerTagManager_SetSearchFilter) == 0x000008, "Wrong alignment on SQServerTagManager_SetSearchFilter");
static_assert(sizeof(SQServerTagManager_SetSearchFilter) == 0x000018, "Wrong size on SQServerTagManager_SetSearchFilter");
static_assert(offsetof(SQServerTagManager_SetSearchFilter, Tags) == 0x000000, "Member 'SQServerTagManager_SetSearchFilter::Tags' has a wrong offset!");
static_assert(offsetof(SQServerTagManager_SetSearchFilter, ReturnValue) == 0x000010, "Member 'SQServerTagManager_SetSearchFilter::ReturnValue' has a wrong offset!");

// Function Squad.SQServerTagManager.GetAllFiltersInSection
// 0x0058 (0x0058 - 0x0000)
struct SQServerTagManager_GetAllFiltersInSection final
{
public:
	ESQTagType                                    Section;                                           // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1107[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FSQServerTag>        ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQServerTagManager_GetAllFiltersInSection) == 0x000008, "Wrong alignment on SQServerTagManager_GetAllFiltersInSection");
static_assert(sizeof(SQServerTagManager_GetAllFiltersInSection) == 0x000058, "Wrong size on SQServerTagManager_GetAllFiltersInSection");
static_assert(offsetof(SQServerTagManager_GetAllFiltersInSection, Section) == 0x000000, "Member 'SQServerTagManager_GetAllFiltersInSection::Section' has a wrong offset!");
static_assert(offsetof(SQServerTagManager_GetAllFiltersInSection, ReturnValue) == 0x000008, "Member 'SQServerTagManager_GetAllFiltersInSection::ReturnValue' has a wrong offset!");

// Function Squad.SQServerTagManager.GetFiltersBits
// 0x0008 (0x0008 - 0x0000)
struct SQServerTagManager_GetFiltersBits final
{
public:
	ESQTagType                                    Section;                                           // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1108[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQServerTagManager_GetFiltersBits) == 0x000004, "Wrong alignment on SQServerTagManager_GetFiltersBits");
static_assert(sizeof(SQServerTagManager_GetFiltersBits) == 0x000008, "Wrong size on SQServerTagManager_GetFiltersBits");
static_assert(offsetof(SQServerTagManager_GetFiltersBits, Section) == 0x000000, "Member 'SQServerTagManager_GetFiltersBits::Section' has a wrong offset!");
static_assert(offsetof(SQServerTagManager_GetFiltersBits, ReturnValue) == 0x000004, "Member 'SQServerTagManager_GetFiltersBits::ReturnValue' has a wrong offset!");

// Function Squad.SQServerTagManager.GetTagSettings
// 0x0050 (0x0050 - 0x0000)
struct SQServerTagManager_GetTagSettings final
{
public:
	TMap<ESQTagType, class FName>                 ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQServerTagManager_GetTagSettings) == 0x000008, "Wrong alignment on SQServerTagManager_GetTagSettings");
static_assert(sizeof(SQServerTagManager_GetTagSettings) == 0x000050, "Wrong size on SQServerTagManager_GetTagSettings");
static_assert(offsetof(SQServerTagManager_GetTagSettings, ReturnValue) == 0x000000, "Member 'SQServerTagManager_GetTagSettings::ReturnValue' has a wrong offset!");

// Function Squad.SQServerTagManager.IsFilteringEnabled
// 0x0001 (0x0001 - 0x0000)
struct SQServerTagManager_IsFilteringEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQServerTagManager_IsFilteringEnabled) == 0x000001, "Wrong alignment on SQServerTagManager_IsFilteringEnabled");
static_assert(sizeof(SQServerTagManager_IsFilteringEnabled) == 0x000001, "Wrong size on SQServerTagManager_IsFilteringEnabled");
static_assert(offsetof(SQServerTagManager_IsFilteringEnabled, ReturnValue) == 0x000000, "Member 'SQServerTagManager_IsFilteringEnabled::ReturnValue' has a wrong offset!");

// Function Squad.SQDeployableSettings.TryGetDeployableWithLayer
// 0x0038 (0x0038 - 0x0000)
struct SQDeployableSettings_TryGetDeployableWithLayer final
{
public:
	const class USQLayer*                         InLayer;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   OutDeployable;                                     // 0x0008(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_110A[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQDeployableSettings_TryGetDeployableWithLayer) == 0x000008, "Wrong alignment on SQDeployableSettings_TryGetDeployableWithLayer");
static_assert(sizeof(SQDeployableSettings_TryGetDeployableWithLayer) == 0x000038, "Wrong size on SQDeployableSettings_TryGetDeployableWithLayer");
static_assert(offsetof(SQDeployableSettings_TryGetDeployableWithLayer, InLayer) == 0x000000, "Member 'SQDeployableSettings_TryGetDeployableWithLayer::InLayer' has a wrong offset!");
static_assert(offsetof(SQDeployableSettings_TryGetDeployableWithLayer, OutDeployable) == 0x000008, "Member 'SQDeployableSettings_TryGetDeployableWithLayer::OutDeployable' has a wrong offset!");
static_assert(offsetof(SQDeployableSettings_TryGetDeployableWithLayer, ReturnValue) == 0x000030, "Member 'SQDeployableSettings_TryGetDeployableWithLayer::ReturnValue' has a wrong offset!");

// Function Squad.SQSpawner.ComputeSpawnPosition
// 0x0001 (0x0001 - 0x0000)
struct SQSpawner_ComputeSpawnPosition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSpawner_ComputeSpawnPosition) == 0x000001, "Wrong alignment on SQSpawner_ComputeSpawnPosition");
static_assert(sizeof(SQSpawner_ComputeSpawnPosition) == 0x000001, "Wrong size on SQSpawner_ComputeSpawnPosition");
static_assert(offsetof(SQSpawner_ComputeSpawnPosition, ReturnValue) == 0x000000, "Member 'SQSpawner_ComputeSpawnPosition::ReturnValue' has a wrong offset!");

// Function Squad.SQSpawner.SetTeam
// 0x0001 (0x0001 - 0x0000)
struct SQSpawner_SetTeam final
{
public:
	ESQTeam                                       NewTeam;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSpawner_SetTeam) == 0x000001, "Wrong alignment on SQSpawner_SetTeam");
static_assert(sizeof(SQSpawner_SetTeam) == 0x000001, "Wrong size on SQSpawner_SetTeam");
static_assert(offsetof(SQSpawner_SetTeam, NewTeam) == 0x000000, "Member 'SQSpawner_SetTeam::NewTeam' has a wrong offset!");

// Function Squad.SQSpawner.TrySpawn
// 0x0001 (0x0001 - 0x0000)
struct SQSpawner_TrySpawn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSpawner_TrySpawn) == 0x000001, "Wrong alignment on SQSpawner_TrySpawn");
static_assert(sizeof(SQSpawner_TrySpawn) == 0x000001, "Wrong size on SQSpawner_TrySpawn");
static_assert(offsetof(SQSpawner_TrySpawn, ReturnValue) == 0x000000, "Member 'SQSpawner_TrySpawn::ReturnValue' has a wrong offset!");

// Function Squad.SQSpawner.ComputeInitialSpawnerDelay
// 0x0008 (0x0008 - 0x0000)
struct SQSpawner_ComputeInitialSpawnerDelay final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSpawner_ComputeInitialSpawnerDelay) == 0x000008, "Wrong alignment on SQSpawner_ComputeInitialSpawnerDelay");
static_assert(sizeof(SQSpawner_ComputeInitialSpawnerDelay) == 0x000008, "Wrong size on SQSpawner_ComputeInitialSpawnerDelay");
static_assert(offsetof(SQSpawner_ComputeInitialSpawnerDelay, ReturnValue) == 0x000000, "Member 'SQSpawner_ComputeInitialSpawnerDelay::ReturnValue' has a wrong offset!");

// Function Squad.SQSpawner.ComputeSpawnerDelay
// 0x0008 (0x0008 - 0x0000)
struct SQSpawner_ComputeSpawnerDelay final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSpawner_ComputeSpawnerDelay) == 0x000008, "Wrong alignment on SQSpawner_ComputeSpawnerDelay");
static_assert(sizeof(SQSpawner_ComputeSpawnerDelay) == 0x000008, "Wrong size on SQSpawner_ComputeSpawnerDelay");
static_assert(offsetof(SQSpawner_ComputeSpawnerDelay, ReturnValue) == 0x000000, "Member 'SQSpawner_ComputeSpawnerDelay::ReturnValue' has a wrong offset!");

// Function Squad.SQSpawner.GetSpawnerBound
// 0x000C (0x000C - 0x0000)
struct SQSpawner_GetSpawnerBound final
{
public:
	struct FVector                                OutBounds;                                         // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSpawner_GetSpawnerBound) == 0x000004, "Wrong alignment on SQSpawner_GetSpawnerBound");
static_assert(sizeof(SQSpawner_GetSpawnerBound) == 0x00000C, "Wrong size on SQSpawner_GetSpawnerBound");
static_assert(offsetof(SQSpawner_GetSpawnerBound, OutBounds) == 0x000000, "Member 'SQSpawner_GetSpawnerBound::OutBounds' has a wrong offset!");

// Function Squad.SQSpawner.GetTeam
// 0x0001 (0x0001 - 0x0000)
struct SQSpawner_GetTeam final
{
public:
	ESQTeam                                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSpawner_GetTeam) == 0x000001, "Wrong alignment on SQSpawner_GetTeam");
static_assert(sizeof(SQSpawner_GetTeam) == 0x000001, "Wrong size on SQSpawner_GetTeam");
static_assert(offsetof(SQSpawner_GetTeam, ReturnValue) == 0x000000, "Member 'SQSpawner_GetTeam::ReturnValue' has a wrong offset!");

// Function Squad.SQSpawner.IsConfigurationValid
// 0x0001 (0x0001 - 0x0000)
struct SQSpawner_IsConfigurationValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSpawner_IsConfigurationValid) == 0x000001, "Wrong alignment on SQSpawner_IsConfigurationValid");
static_assert(sizeof(SQSpawner_IsConfigurationValid) == 0x000001, "Wrong size on SQSpawner_IsConfigurationValid");
static_assert(offsetof(SQSpawner_IsConfigurationValid, ReturnValue) == 0x000000, "Member 'SQSpawner_IsConfigurationValid::ReturnValue' has a wrong offset!");

// Function Squad.SQSpawner.IsSpawnerAvailable
// 0x0001 (0x0001 - 0x0000)
struct SQSpawner_IsSpawnerAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSpawner_IsSpawnerAvailable) == 0x000001, "Wrong alignment on SQSpawner_IsSpawnerAvailable");
static_assert(sizeof(SQSpawner_IsSpawnerAvailable) == 0x000001, "Wrong size on SQSpawner_IsSpawnerAvailable");
static_assert(offsetof(SQSpawner_IsSpawnerAvailable, ReturnValue) == 0x000000, "Member 'SQSpawner_IsSpawnerAvailable::ReturnValue' has a wrong offset!");

// Function Squad.SQSpawner.IsSpawnerOverlapped
// 0x0001 (0x0001 - 0x0000)
struct SQSpawner_IsSpawnerOverlapped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSpawner_IsSpawnerOverlapped) == 0x000001, "Wrong alignment on SQSpawner_IsSpawnerOverlapped");
static_assert(sizeof(SQSpawner_IsSpawnerOverlapped) == 0x000001, "Wrong size on SQSpawner_IsSpawnerOverlapped");
static_assert(offsetof(SQSpawner_IsSpawnerOverlapped, ReturnValue) == 0x000000, "Member 'SQSpawner_IsSpawnerOverlapped::ReturnValue' has a wrong offset!");

// Function Squad.SQSpawner.SpawnPositionPostProcess
// 0x00D0 (0x00D0 - 0x0000)
struct SQSpawner_SpawnPositionPostProcess final
{
public:
	struct FHitResult                             HitSpawnPosition;                                  // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                Bounds;                                            // 0x0088(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1110[0xC];                                     // 0x0094(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x00A0(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSpawner_SpawnPositionPostProcess) == 0x000010, "Wrong alignment on SQSpawner_SpawnPositionPostProcess");
static_assert(sizeof(SQSpawner_SpawnPositionPostProcess) == 0x0000D0, "Wrong size on SQSpawner_SpawnPositionPostProcess");
static_assert(offsetof(SQSpawner_SpawnPositionPostProcess, HitSpawnPosition) == 0x000000, "Member 'SQSpawner_SpawnPositionPostProcess::HitSpawnPosition' has a wrong offset!");
static_assert(offsetof(SQSpawner_SpawnPositionPostProcess, Bounds) == 0x000088, "Member 'SQSpawner_SpawnPositionPostProcess::Bounds' has a wrong offset!");
static_assert(offsetof(SQSpawner_SpawnPositionPostProcess, ReturnValue) == 0x0000A0, "Member 'SQSpawner_SpawnPositionPostProcess::ReturnValue' has a wrong offset!");

// Function Squad.SQDeployableSpawner.OnDeployableLoaded
// 0x0030 (0x0030 - 0x0000)
struct SQDeployableSpawner_OnDeployableLoaded final
{
public:
	TSoftClassPtr<class UClass>                   InDeployableReference;                             // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQDeployableSettings*                  InDeployableSettings;                              // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployableSpawner_OnDeployableLoaded) == 0x000008, "Wrong alignment on SQDeployableSpawner_OnDeployableLoaded");
static_assert(sizeof(SQDeployableSpawner_OnDeployableLoaded) == 0x000030, "Wrong size on SQDeployableSpawner_OnDeployableLoaded");
static_assert(offsetof(SQDeployableSpawner_OnDeployableLoaded, InDeployableReference) == 0x000000, "Member 'SQDeployableSpawner_OnDeployableLoaded::InDeployableReference' has a wrong offset!");
static_assert(offsetof(SQDeployableSpawner_OnDeployableLoaded, InDeployableSettings) == 0x000028, "Member 'SQDeployableSpawner_OnDeployableLoaded::InDeployableSettings' has a wrong offset!");

// Function Squad.SQDeployableSpawner.OnDeployableSpawned
// 0x0008 (0x0008 - 0x0000)
struct SQDeployableSpawner_OnDeployableSpawned final
{
public:
	class ASQDeployable*                          OutDeployable;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployableSpawner_OnDeployableSpawned) == 0x000008, "Wrong alignment on SQDeployableSpawner_OnDeployableSpawned");
static_assert(sizeof(SQDeployableSpawner_OnDeployableSpawned) == 0x000008, "Wrong size on SQDeployableSpawner_OnDeployableSpawned");
static_assert(offsetof(SQDeployableSpawner_OnDeployableSpawned, OutDeployable) == 0x000000, "Member 'SQDeployableSpawner_OnDeployableSpawned::OutDeployable' has a wrong offset!");

// Function Squad.SQDeployableSpawner.StartLoadAndSpawnDeployable
// 0x0008 (0x0008 - 0x0000)
struct SQDeployableSpawner_StartLoadAndSpawnDeployable final
{
public:
	class USQDeployableSettings*                  InDeployableSettings;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployableSpawner_StartLoadAndSpawnDeployable) == 0x000008, "Wrong alignment on SQDeployableSpawner_StartLoadAndSpawnDeployable");
static_assert(sizeof(SQDeployableSpawner_StartLoadAndSpawnDeployable) == 0x000008, "Wrong size on SQDeployableSpawner_StartLoadAndSpawnDeployable");
static_assert(offsetof(SQDeployableSpawner_StartLoadAndSpawnDeployable, InDeployableSettings) == 0x000000, "Member 'SQDeployableSpawner_StartLoadAndSpawnDeployable::InDeployableSettings' has a wrong offset!");

// Function Squad.SQDeployableSpawner.CanSpawnDeployable
// 0x0010 (0x0010 - 0x0000)
struct SQDeployableSpawner_CanSpawnDeployable final
{
public:
	const class USQDeployableSettings*            InAvailableDeployable;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1112[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQDeployableSpawner_CanSpawnDeployable) == 0x000008, "Wrong alignment on SQDeployableSpawner_CanSpawnDeployable");
static_assert(sizeof(SQDeployableSpawner_CanSpawnDeployable) == 0x000010, "Wrong size on SQDeployableSpawner_CanSpawnDeployable");
static_assert(offsetof(SQDeployableSpawner_CanSpawnDeployable, InAvailableDeployable) == 0x000000, "Member 'SQDeployableSpawner_CanSpawnDeployable::InAvailableDeployable' has a wrong offset!");
static_assert(offsetof(SQDeployableSpawner_CanSpawnDeployable, ReturnValue) == 0x000008, "Member 'SQDeployableSpawner_CanSpawnDeployable::ReturnValue' has a wrong offset!");

// Function Squad.SQDeployableSpawner.GetDeployablePriority
// 0x0058 (0x0058 - 0x0000)
struct SQDeployableSpawner_GetDeployablePriority final
{
public:
	struct FSQAvailabilityState_Deployable        InAvailableDeployable;                             // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1113[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQDeployableSpawner_GetDeployablePriority) == 0x000008, "Wrong alignment on SQDeployableSpawner_GetDeployablePriority");
static_assert(sizeof(SQDeployableSpawner_GetDeployablePriority) == 0x000058, "Wrong size on SQDeployableSpawner_GetDeployablePriority");
static_assert(offsetof(SQDeployableSpawner_GetDeployablePriority, InAvailableDeployable) == 0x000000, "Member 'SQDeployableSpawner_GetDeployablePriority::InAvailableDeployable' has a wrong offset!");
static_assert(offsetof(SQDeployableSpawner_GetDeployablePriority, ReturnValue) == 0x000050, "Member 'SQDeployableSpawner_GetDeployablePriority::ReturnValue' has a wrong offset!");

// Function Squad.SQDeployableSpawner.GetDeployableReference
// 0x0030 (0x0030 - 0x0000)
struct SQDeployableSpawner_GetDeployableReference final
{
public:
	class USQDeployableSettings*                  InDeployableSettings;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   OutDeployableReference;                            // 0x0008(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployableSpawner_GetDeployableReference) == 0x000008, "Wrong alignment on SQDeployableSpawner_GetDeployableReference");
static_assert(sizeof(SQDeployableSpawner_GetDeployableReference) == 0x000030, "Wrong size on SQDeployableSpawner_GetDeployableReference");
static_assert(offsetof(SQDeployableSpawner_GetDeployableReference, InDeployableSettings) == 0x000000, "Member 'SQDeployableSpawner_GetDeployableReference::InDeployableSettings' has a wrong offset!");
static_assert(offsetof(SQDeployableSpawner_GetDeployableReference, OutDeployableReference) == 0x000008, "Member 'SQDeployableSpawner_GetDeployableReference::OutDeployableReference' has a wrong offset!");

// Function Squad.SQDeployableSpawner.GetDeployableToSpawn
// 0x0068 (0x0068 - 0x0000)
struct SQDeployableSpawner_GetDeployableToSpawn final
{
public:
	TArray<struct FSQAvailabilityState_Deployable> InDeployableAvailabilityStates;                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState_Deployable        OutSelectedDeployable;                             // 0x0010(0x0050)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1114[0x7];                                     // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQDeployableSpawner_GetDeployableToSpawn) == 0x000008, "Wrong alignment on SQDeployableSpawner_GetDeployableToSpawn");
static_assert(sizeof(SQDeployableSpawner_GetDeployableToSpawn) == 0x000068, "Wrong size on SQDeployableSpawner_GetDeployableToSpawn");
static_assert(offsetof(SQDeployableSpawner_GetDeployableToSpawn, InDeployableAvailabilityStates) == 0x000000, "Member 'SQDeployableSpawner_GetDeployableToSpawn::InDeployableAvailabilityStates' has a wrong offset!");
static_assert(offsetof(SQDeployableSpawner_GetDeployableToSpawn, OutSelectedDeployable) == 0x000010, "Member 'SQDeployableSpawner_GetDeployableToSpawn::OutSelectedDeployable' has a wrong offset!");
static_assert(offsetof(SQDeployableSpawner_GetDeployableToSpawn, ReturnValue) == 0x000060, "Member 'SQDeployableSpawner_GetDeployableToSpawn::ReturnValue' has a wrong offset!");

// Function Squad.SQScriptActionExecutor.OnConditionValueUpdated
// 0x0010 (0x0010 - 0x0000)
struct SQScriptActionExecutor_OnConditionValueUpdated final
{
public:
	const class USQScriptCondition*               ConditionObject;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewValue;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1115[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQScriptActionExecutor_OnConditionValueUpdated) == 0x000008, "Wrong alignment on SQScriptActionExecutor_OnConditionValueUpdated");
static_assert(sizeof(SQScriptActionExecutor_OnConditionValueUpdated) == 0x000010, "Wrong size on SQScriptActionExecutor_OnConditionValueUpdated");
static_assert(offsetof(SQScriptActionExecutor_OnConditionValueUpdated, ConditionObject) == 0x000000, "Member 'SQScriptActionExecutor_OnConditionValueUpdated::ConditionObject' has a wrong offset!");
static_assert(offsetof(SQScriptActionExecutor_OnConditionValueUpdated, bNewValue) == 0x000008, "Member 'SQScriptActionExecutor_OnConditionValueUpdated::bNewValue' has a wrong offset!");

// Function Squad.SQDeployableSpawnerSettings.IsDeployableMatching
// 0x0010 (0x0010 - 0x0000)
struct SQDeployableSpawnerSettings_IsDeployableMatching final
{
public:
	const class USQDeployableSettings*            InAvailableDeployable;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1116[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQDeployableSpawnerSettings_IsDeployableMatching) == 0x000008, "Wrong alignment on SQDeployableSpawnerSettings_IsDeployableMatching");
static_assert(sizeof(SQDeployableSpawnerSettings_IsDeployableMatching) == 0x000010, "Wrong size on SQDeployableSpawnerSettings_IsDeployableMatching");
static_assert(offsetof(SQDeployableSpawnerSettings_IsDeployableMatching, InAvailableDeployable) == 0x000000, "Member 'SQDeployableSpawnerSettings_IsDeployableMatching::InAvailableDeployable' has a wrong offset!");
static_assert(offsetof(SQDeployableSpawnerSettings_IsDeployableMatching, ReturnValue) == 0x000008, "Member 'SQDeployableSpawnerSettings_IsDeployableMatching::ReturnValue' has a wrong offset!");

// Function Squad.SQDeployableSpawnerSettings.SelectDeployableToSpawn
// 0x0068 (0x0068 - 0x0000)
struct SQDeployableSpawnerSettings_SelectDeployableToSpawn final
{
public:
	TArray<struct FSQAvailabilityState_Deployable> InDeployables;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState_Deployable        OutSelectDeployable;                               // 0x0010(0x0050)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1117[0x7];                                     // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQDeployableSpawnerSettings_SelectDeployableToSpawn) == 0x000008, "Wrong alignment on SQDeployableSpawnerSettings_SelectDeployableToSpawn");
static_assert(sizeof(SQDeployableSpawnerSettings_SelectDeployableToSpawn) == 0x000068, "Wrong size on SQDeployableSpawnerSettings_SelectDeployableToSpawn");
static_assert(offsetof(SQDeployableSpawnerSettings_SelectDeployableToSpawn, InDeployables) == 0x000000, "Member 'SQDeployableSpawnerSettings_SelectDeployableToSpawn::InDeployables' has a wrong offset!");
static_assert(offsetof(SQDeployableSpawnerSettings_SelectDeployableToSpawn, OutSelectDeployable) == 0x000010, "Member 'SQDeployableSpawnerSettings_SelectDeployableToSpawn::OutSelectDeployable' has a wrong offset!");
static_assert(offsetof(SQDeployableSpawnerSettings_SelectDeployableToSpawn, ReturnValue) == 0x000060, "Member 'SQDeployableSpawnerSettings_SelectDeployableToSpawn::ReturnValue' has a wrong offset!");

// Function Squad.SQDeployableTripodVehicle.SetCurrentMagnificationLevelIndex
// 0x0004 (0x0004 - 0x0000)
struct SQDeployableTripodVehicle_SetCurrentMagnificationLevelIndex final
{
public:
	int32                                         NewMagnificationLevelIndex;                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployableTripodVehicle_SetCurrentMagnificationLevelIndex) == 0x000004, "Wrong alignment on SQDeployableTripodVehicle_SetCurrentMagnificationLevelIndex");
static_assert(sizeof(SQDeployableTripodVehicle_SetCurrentMagnificationLevelIndex) == 0x000004, "Wrong size on SQDeployableTripodVehicle_SetCurrentMagnificationLevelIndex");
static_assert(offsetof(SQDeployableTripodVehicle_SetCurrentMagnificationLevelIndex, NewMagnificationLevelIndex) == 0x000000, "Member 'SQDeployableTripodVehicle_SetCurrentMagnificationLevelIndex::NewMagnificationLevelIndex' has a wrong offset!");

// Function Squad.SQDeployableTripodVehicle.ShouldUseVehicleZoom
// 0x0001 (0x0001 - 0x0000)
struct SQDeployableTripodVehicle_ShouldUseVehicleZoom final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployableTripodVehicle_ShouldUseVehicleZoom) == 0x000001, "Wrong alignment on SQDeployableTripodVehicle_ShouldUseVehicleZoom");
static_assert(sizeof(SQDeployableTripodVehicle_ShouldUseVehicleZoom) == 0x000001, "Wrong size on SQDeployableTripodVehicle_ShouldUseVehicleZoom");
static_assert(offsetof(SQDeployableTripodVehicle_ShouldUseVehicleZoom, ReturnValue) == 0x000000, "Member 'SQDeployableTripodVehicle_ShouldUseVehicleZoom::ReturnValue' has a wrong offset!");

// Function Squad.SQDeployableTripodVehicle.GetMagnificationLevels
// 0x0010 (0x0010 - 0x0000)
struct SQDeployableTripodVehicle_GetMagnificationLevels final
{
public:
	TArray<float>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployableTripodVehicle_GetMagnificationLevels) == 0x000008, "Wrong alignment on SQDeployableTripodVehicle_GetMagnificationLevels");
static_assert(sizeof(SQDeployableTripodVehicle_GetMagnificationLevels) == 0x000010, "Wrong size on SQDeployableTripodVehicle_GetMagnificationLevels");
static_assert(offsetof(SQDeployableTripodVehicle_GetMagnificationLevels, ReturnValue) == 0x000000, "Member 'SQDeployableTripodVehicle_GetMagnificationLevels::ReturnValue' has a wrong offset!");

// Function Squad.SQDeployableTripodVehicle.GetTurretMovementComponent
// 0x0008 (0x0008 - 0x0000)
struct SQDeployableTripodVehicle_GetTurretMovementComponent final
{
public:
	class USQTurretMovementComponent*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeployableTripodVehicle_GetTurretMovementComponent) == 0x000008, "Wrong alignment on SQDeployableTripodVehicle_GetTurretMovementComponent");
static_assert(sizeof(SQDeployableTripodVehicle_GetTurretMovementComponent) == 0x000008, "Wrong size on SQDeployableTripodVehicle_GetTurretMovementComponent");
static_assert(offsetof(SQDeployableTripodVehicle_GetTurretMovementComponent, ReturnValue) == 0x000000, "Member 'SQDeployableTripodVehicle_GetTurretMovementComponent::ReturnValue' has a wrong offset!");

// Function Squad.SQDestroyedVehicle.EnableWreckPhysics
// 0x0001 (0x0001 - 0x0000)
struct SQDestroyedVehicle_EnableWreckPhysics final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDestroyedVehicle_EnableWreckPhysics) == 0x000001, "Wrong alignment on SQDestroyedVehicle_EnableWreckPhysics");
static_assert(sizeof(SQDestroyedVehicle_EnableWreckPhysics) == 0x000001, "Wrong size on SQDestroyedVehicle_EnableWreckPhysics");
static_assert(offsetof(SQDestroyedVehicle_EnableWreckPhysics, bEnable) == 0x000000, "Member 'SQDestroyedVehicle_EnableWreckPhysics::bEnable' has a wrong offset!");

// Function Squad.SQDestroyedVehicle.OnNiagaraVFXComplete
// 0x0008 (0x0008 - 0x0000)
struct SQDestroyedVehicle_OnNiagaraVFXComplete final
{
public:
	class UNiagaraComponent*                      PSystem;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDestroyedVehicle_OnNiagaraVFXComplete) == 0x000008, "Wrong alignment on SQDestroyedVehicle_OnNiagaraVFXComplete");
static_assert(sizeof(SQDestroyedVehicle_OnNiagaraVFXComplete) == 0x000008, "Wrong size on SQDestroyedVehicle_OnNiagaraVFXComplete");
static_assert(offsetof(SQDestroyedVehicle_OnNiagaraVFXComplete, PSystem) == 0x000000, "Member 'SQDestroyedVehicle_OnNiagaraVFXComplete::PSystem' has a wrong offset!");

// Function Squad.SQDestroyedVehicle.OnVFXComplete
// 0x0008 (0x0008 - 0x0000)
struct SQDestroyedVehicle_OnVFXComplete final
{
public:
	class UParticleSystemComponent*               PSystem;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDestroyedVehicle_OnVFXComplete) == 0x000008, "Wrong alignment on SQDestroyedVehicle_OnVFXComplete");
static_assert(sizeof(SQDestroyedVehicle_OnVFXComplete) == 0x000008, "Wrong size on SQDestroyedVehicle_OnVFXComplete");
static_assert(offsetof(SQDestroyedVehicle_OnVFXComplete, PSystem) == 0x000000, "Member 'SQDestroyedVehicle_OnVFXComplete::PSystem' has a wrong offset!");

// Function Squad.SQDestroyedVehicle.ResyncTimeDilationOnNiagaraComponent
// 0x0010 (0x0010 - 0x0000)
struct SQDestroyedVehicle_ResyncTimeDilationOnNiagaraComponent final
{
public:
	class UNiagaraComponent*                      NiagaraComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           TimeDilationResetTimer;                            // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDestroyedVehicle_ResyncTimeDilationOnNiagaraComponent) == 0x000008, "Wrong alignment on SQDestroyedVehicle_ResyncTimeDilationOnNiagaraComponent");
static_assert(sizeof(SQDestroyedVehicle_ResyncTimeDilationOnNiagaraComponent) == 0x000010, "Wrong size on SQDestroyedVehicle_ResyncTimeDilationOnNiagaraComponent");
static_assert(offsetof(SQDestroyedVehicle_ResyncTimeDilationOnNiagaraComponent, NiagaraComponent) == 0x000000, "Member 'SQDestroyedVehicle_ResyncTimeDilationOnNiagaraComponent::NiagaraComponent' has a wrong offset!");
static_assert(offsetof(SQDestroyedVehicle_ResyncTimeDilationOnNiagaraComponent, TimeDilationResetTimer) == 0x000008, "Member 'SQDestroyedVehicle_ResyncTimeDilationOnNiagaraComponent::TimeDilationResetTimer' has a wrong offset!");

// Function Squad.SQDestroyedVehicle.ResyncTimeDilationOnParticleSystemComponent
// 0x0010 (0x0010 - 0x0000)
struct SQDestroyedVehicle_ResyncTimeDilationOnParticleSystemComponent final
{
public:
	class UParticleSystemComponent*               PSCEffect;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           TimeDilationResetTimer;                            // 0x0008(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDestroyedVehicle_ResyncTimeDilationOnParticleSystemComponent) == 0x000008, "Wrong alignment on SQDestroyedVehicle_ResyncTimeDilationOnParticleSystemComponent");
static_assert(sizeof(SQDestroyedVehicle_ResyncTimeDilationOnParticleSystemComponent) == 0x000010, "Wrong size on SQDestroyedVehicle_ResyncTimeDilationOnParticleSystemComponent");
static_assert(offsetof(SQDestroyedVehicle_ResyncTimeDilationOnParticleSystemComponent, PSCEffect) == 0x000000, "Member 'SQDestroyedVehicle_ResyncTimeDilationOnParticleSystemComponent::PSCEffect' has a wrong offset!");
static_assert(offsetof(SQDestroyedVehicle_ResyncTimeDilationOnParticleSystemComponent, TimeDilationResetTimer) == 0x000008, "Member 'SQDestroyedVehicle_ResyncTimeDilationOnParticleSystemComponent::TimeDilationResetTimer' has a wrong offset!");

// Function Squad.SQDestroyedVehicle.SetInitialMovement
// 0x0018 (0x0018 - 0x0000)
struct SQDestroyedVehicle_SetInitialMovement final
{
public:
	struct FVector                                InInitialVelocity;                                 // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InInitialAngularVelocity;                          // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDestroyedVehicle_SetInitialMovement) == 0x000004, "Wrong alignment on SQDestroyedVehicle_SetInitialMovement");
static_assert(sizeof(SQDestroyedVehicle_SetInitialMovement) == 0x000018, "Wrong size on SQDestroyedVehicle_SetInitialMovement");
static_assert(offsetof(SQDestroyedVehicle_SetInitialMovement, InInitialVelocity) == 0x000000, "Member 'SQDestroyedVehicle_SetInitialMovement::InInitialVelocity' has a wrong offset!");
static_assert(offsetof(SQDestroyedVehicle_SetInitialMovement, InInitialAngularVelocity) == 0x00000C, "Member 'SQDestroyedVehicle_SetInitialMovement::InInitialAngularVelocity' has a wrong offset!");

// Function Squad.SQDestroyedVehicle.TransferBurningLastingEffect
// 0x0008 (0x0008 - 0x0000)
struct SQDestroyedVehicle_TransferBurningLastingEffect final
{
public:
	class ASQLastingEffect*                       LastingEffect;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDestroyedVehicle_TransferBurningLastingEffect) == 0x000008, "Wrong alignment on SQDestroyedVehicle_TransferBurningLastingEffect");
static_assert(sizeof(SQDestroyedVehicle_TransferBurningLastingEffect) == 0x000008, "Wrong size on SQDestroyedVehicle_TransferBurningLastingEffect");
static_assert(offsetof(SQDestroyedVehicle_TransferBurningLastingEffect, LastingEffect) == 0x000000, "Member 'SQDestroyedVehicle_TransferBurningLastingEffect::LastingEffect' has a wrong offset!");

// Function Squad.SQLicensedServerManager.IsServerPromoted
// 0x0110 (0x0110 - 0x0000)
struct SQLicensedServerManager_IsServerPromoted final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0108(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1120[0x7];                                     // 0x0109(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQLicensedServerManager_IsServerPromoted) == 0x000008, "Wrong alignment on SQLicensedServerManager_IsServerPromoted");
static_assert(sizeof(SQLicensedServerManager_IsServerPromoted) == 0x000110, "Wrong size on SQLicensedServerManager_IsServerPromoted");
static_assert(offsetof(SQLicensedServerManager_IsServerPromoted, Result) == 0x000000, "Member 'SQLicensedServerManager_IsServerPromoted::Result' has a wrong offset!");
static_assert(offsetof(SQLicensedServerManager_IsServerPromoted, ReturnValue) == 0x000108, "Member 'SQLicensedServerManager_IsServerPromoted::ReturnValue' has a wrong offset!");

// Function Squad.SQDeveloperCameraMan.ActorTrace
// 0x0008 (0x0008 - 0x0000)
struct SQDeveloperCameraMan_ActorTrace final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeveloperCameraMan_ActorTrace) == 0x000008, "Wrong alignment on SQDeveloperCameraMan_ActorTrace");
static_assert(sizeof(SQDeveloperCameraMan_ActorTrace) == 0x000008, "Wrong size on SQDeveloperCameraMan_ActorTrace");
static_assert(offsetof(SQDeveloperCameraMan_ActorTrace, ReturnValue) == 0x000000, "Member 'SQDeveloperCameraMan_ActorTrace::ReturnValue' has a wrong offset!");

// Function Squad.SQDeveloperCameraMan.DamageVehicleComponent
// 0x0028 (0x0028 - 0x0000)
struct SQDeveloperCameraMan_DamageVehicleComponent final
{
public:
	class USQVehicleComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageAmount;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1125[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQDamageModifier>              AllowableDamageTypes;                              // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                DamageType;                                        // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeveloperCameraMan_DamageVehicleComponent) == 0x000008, "Wrong alignment on SQDeveloperCameraMan_DamageVehicleComponent");
static_assert(sizeof(SQDeveloperCameraMan_DamageVehicleComponent) == 0x000028, "Wrong size on SQDeveloperCameraMan_DamageVehicleComponent");
static_assert(offsetof(SQDeveloperCameraMan_DamageVehicleComponent, Component) == 0x000000, "Member 'SQDeveloperCameraMan_DamageVehicleComponent::Component' has a wrong offset!");
static_assert(offsetof(SQDeveloperCameraMan_DamageVehicleComponent, DamageAmount) == 0x000008, "Member 'SQDeveloperCameraMan_DamageVehicleComponent::DamageAmount' has a wrong offset!");
static_assert(offsetof(SQDeveloperCameraMan_DamageVehicleComponent, AllowableDamageTypes) == 0x000010, "Member 'SQDeveloperCameraMan_DamageVehicleComponent::AllowableDamageTypes' has a wrong offset!");
static_assert(offsetof(SQDeveloperCameraMan_DamageVehicleComponent, DamageType) == 0x000020, "Member 'SQDeveloperCameraMan_DamageVehicleComponent::DamageType' has a wrong offset!");

// Function Squad.SQDeveloperCameraMan.GetToolMode
// 0x0001 (0x0001 - 0x0000)
struct SQDeveloperCameraMan_GetToolMode final
{
public:
	EToolMode                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeveloperCameraMan_GetToolMode) == 0x000001, "Wrong alignment on SQDeveloperCameraMan_GetToolMode");
static_assert(sizeof(SQDeveloperCameraMan_GetToolMode) == 0x000001, "Wrong size on SQDeveloperCameraMan_GetToolMode");
static_assert(offsetof(SQDeveloperCameraMan_GetToolMode, ReturnValue) == 0x000000, "Member 'SQDeveloperCameraMan_GetToolMode::ReturnValue' has a wrong offset!");

// Function Squad.SQDeveloperCameraMan.OnActorPlaced
// 0x0008 (0x0008 - 0x0000)
struct SQDeveloperCameraMan_OnActorPlaced final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeveloperCameraMan_OnActorPlaced) == 0x000008, "Wrong alignment on SQDeveloperCameraMan_OnActorPlaced");
static_assert(sizeof(SQDeveloperCameraMan_OnActorPlaced) == 0x000008, "Wrong size on SQDeveloperCameraMan_OnActorPlaced");
static_assert(offsetof(SQDeveloperCameraMan_OnActorPlaced, Actor) == 0x000000, "Member 'SQDeveloperCameraMan_OnActorPlaced::Actor' has a wrong offset!");

// Function Squad.SQDeveloperCameraMan.OnGhostDestroyed
// 0x0008 (0x0008 - 0x0000)
struct SQDeveloperCameraMan_OnGhostDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeveloperCameraMan_OnGhostDestroyed) == 0x000008, "Wrong alignment on SQDeveloperCameraMan_OnGhostDestroyed");
static_assert(sizeof(SQDeveloperCameraMan_OnGhostDestroyed) == 0x000008, "Wrong size on SQDeveloperCameraMan_OnGhostDestroyed");
static_assert(offsetof(SQDeveloperCameraMan_OnGhostDestroyed, DestroyedActor) == 0x000000, "Member 'SQDeveloperCameraMan_OnGhostDestroyed::DestroyedActor' has a wrong offset!");

// Function Squad.SQDeveloperCameraMan.OnStartTrackingTarget
// 0x0008 (0x0008 - 0x0000)
struct SQDeveloperCameraMan_OnStartTrackingTarget final
{
public:
	class AActor*                                 TrackedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeveloperCameraMan_OnStartTrackingTarget) == 0x000008, "Wrong alignment on SQDeveloperCameraMan_OnStartTrackingTarget");
static_assert(sizeof(SQDeveloperCameraMan_OnStartTrackingTarget) == 0x000008, "Wrong size on SQDeveloperCameraMan_OnStartTrackingTarget");
static_assert(offsetof(SQDeveloperCameraMan_OnStartTrackingTarget, TrackedActor) == 0x000000, "Member 'SQDeveloperCameraMan_OnStartTrackingTarget::TrackedActor' has a wrong offset!");

// Function Squad.SQDeveloperCameraMan.ReplaceExistingGhost
// 0x0050 (0x0050 - 0x0000)
struct SQDeveloperCameraMan_ReplaceExistingGhost final
{
public:
	class USQSpawnableItemBase*                   SpawnableItem;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1126[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0030)(ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class ASQSpawnableGhost*                      ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1127[0x8];                                     // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQDeveloperCameraMan_ReplaceExistingGhost) == 0x000010, "Wrong alignment on SQDeveloperCameraMan_ReplaceExistingGhost");
static_assert(sizeof(SQDeveloperCameraMan_ReplaceExistingGhost) == 0x000050, "Wrong size on SQDeveloperCameraMan_ReplaceExistingGhost");
static_assert(offsetof(SQDeveloperCameraMan_ReplaceExistingGhost, SpawnableItem) == 0x000000, "Member 'SQDeveloperCameraMan_ReplaceExistingGhost::SpawnableItem' has a wrong offset!");
static_assert(offsetof(SQDeveloperCameraMan_ReplaceExistingGhost, SpawnTransform) == 0x000010, "Member 'SQDeveloperCameraMan_ReplaceExistingGhost::SpawnTransform' has a wrong offset!");
static_assert(offsetof(SQDeveloperCameraMan_ReplaceExistingGhost, ReturnValue) == 0x000040, "Member 'SQDeveloperCameraMan_ReplaceExistingGhost::ReturnValue' has a wrong offset!");

// Function Squad.SQDeveloperCameraMan.SelectionTrace
// 0x0008 (0x0008 - 0x0000)
struct SQDeveloperCameraMan_SelectionTrace final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeveloperCameraMan_SelectionTrace) == 0x000008, "Wrong alignment on SQDeveloperCameraMan_SelectionTrace");
static_assert(sizeof(SQDeveloperCameraMan_SelectionTrace) == 0x000008, "Wrong size on SQDeveloperCameraMan_SelectionTrace");
static_assert(offsetof(SQDeveloperCameraMan_SelectionTrace, ReturnValue) == 0x000000, "Member 'SQDeveloperCameraMan_SelectionTrace::ReturnValue' has a wrong offset!");

// Function Squad.SQDeveloperCameraMan.SetMouseMode
// 0x0001 (0x0001 - 0x0000)
struct SQDeveloperCameraMan_SetMouseMode final
{
public:
	EMouseMode                                    NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeveloperCameraMan_SetMouseMode) == 0x000001, "Wrong alignment on SQDeveloperCameraMan_SetMouseMode");
static_assert(sizeof(SQDeveloperCameraMan_SetMouseMode) == 0x000001, "Wrong size on SQDeveloperCameraMan_SetMouseMode");
static_assert(offsetof(SQDeveloperCameraMan_SetMouseMode, NewMode) == 0x000000, "Member 'SQDeveloperCameraMan_SetMouseMode::NewMode' has a wrong offset!");

// Function Squad.SQDeveloperCameraMan.SetSoldierRole
// 0x0010 (0x0010 - 0x0000)
struct SQDeveloperCameraMan_SetSoldierRole final
{
public:
	class ASQSoldier*                             Soldier;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQRoleSettings*                        RoleSettings;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeveloperCameraMan_SetSoldierRole) == 0x000008, "Wrong alignment on SQDeveloperCameraMan_SetSoldierRole");
static_assert(sizeof(SQDeveloperCameraMan_SetSoldierRole) == 0x000010, "Wrong size on SQDeveloperCameraMan_SetSoldierRole");
static_assert(offsetof(SQDeveloperCameraMan_SetSoldierRole, Soldier) == 0x000000, "Member 'SQDeveloperCameraMan_SetSoldierRole::Soldier' has a wrong offset!");
static_assert(offsetof(SQDeveloperCameraMan_SetSoldierRole, RoleSettings) == 0x000008, "Member 'SQDeveloperCameraMan_SetSoldierRole::RoleSettings' has a wrong offset!");

// Function Squad.SQDeveloperCameraMan.SetToolMode
// 0x0001 (0x0001 - 0x0000)
struct SQDeveloperCameraMan_SetToolMode final
{
public:
	EToolMode                                     NewMode;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeveloperCameraMan_SetToolMode) == 0x000001, "Wrong alignment on SQDeveloperCameraMan_SetToolMode");
static_assert(sizeof(SQDeveloperCameraMan_SetToolMode) == 0x000001, "Wrong size on SQDeveloperCameraMan_SetToolMode");
static_assert(offsetof(SQDeveloperCameraMan_SetToolMode, NewMode) == 0x000000, "Member 'SQDeveloperCameraMan_SetToolMode::NewMode' has a wrong offset!");

// Function Squad.SQDeveloperCameraMan.SetTrackPlayer
// 0x0008 (0x0008 - 0x0000)
struct SQDeveloperCameraMan_SetTrackPlayer final
{
public:
	class ASQPlayerState*                         TargetPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeveloperCameraMan_SetTrackPlayer) == 0x000008, "Wrong alignment on SQDeveloperCameraMan_SetTrackPlayer");
static_assert(sizeof(SQDeveloperCameraMan_SetTrackPlayer) == 0x000008, "Wrong size on SQDeveloperCameraMan_SetTrackPlayer");
static_assert(offsetof(SQDeveloperCameraMan_SetTrackPlayer, TargetPlayer) == 0x000000, "Member 'SQDeveloperCameraMan_SetTrackPlayer::TargetPlayer' has a wrong offset!");

// Function Squad.SQDeveloperCameraMan.SetTrackTarget
// 0x0008 (0x0008 - 0x0000)
struct SQDeveloperCameraMan_SetTrackTarget final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeveloperCameraMan_SetTrackTarget) == 0x000008, "Wrong alignment on SQDeveloperCameraMan_SetTrackTarget");
static_assert(sizeof(SQDeveloperCameraMan_SetTrackTarget) == 0x000008, "Wrong size on SQDeveloperCameraMan_SetTrackTarget");
static_assert(offsetof(SQDeveloperCameraMan_SetTrackTarget, Target) == 0x000000, "Member 'SQDeveloperCameraMan_SetTrackTarget::Target' has a wrong offset!");

// Function Squad.SQDeveloperCameraMan.SpawnNewDeployable
// 0x0050 (0x0050 - 0x0000)
struct SQDeveloperCameraMan_SpawnNewDeployable final
{
public:
	TSubclassOf<class ASQDeployable>              DeployableClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Team;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQBuildState                                 BuildState;                                        // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1128[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USQDeployableSettings*                  Settings;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1129[0x8];                                     // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0020(0x0030)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeveloperCameraMan_SpawnNewDeployable) == 0x000010, "Wrong alignment on SQDeveloperCameraMan_SpawnNewDeployable");
static_assert(sizeof(SQDeveloperCameraMan_SpawnNewDeployable) == 0x000050, "Wrong size on SQDeveloperCameraMan_SpawnNewDeployable");
static_assert(offsetof(SQDeveloperCameraMan_SpawnNewDeployable, DeployableClass) == 0x000000, "Member 'SQDeveloperCameraMan_SpawnNewDeployable::DeployableClass' has a wrong offset!");
static_assert(offsetof(SQDeveloperCameraMan_SpawnNewDeployable, Team) == 0x000008, "Member 'SQDeveloperCameraMan_SpawnNewDeployable::Team' has a wrong offset!");
static_assert(offsetof(SQDeveloperCameraMan_SpawnNewDeployable, BuildState) == 0x00000C, "Member 'SQDeveloperCameraMan_SpawnNewDeployable::BuildState' has a wrong offset!");
static_assert(offsetof(SQDeveloperCameraMan_SpawnNewDeployable, Settings) == 0x000010, "Member 'SQDeveloperCameraMan_SpawnNewDeployable::Settings' has a wrong offset!");
static_assert(offsetof(SQDeveloperCameraMan_SpawnNewDeployable, Transform) == 0x000020, "Member 'SQDeveloperCameraMan_SpawnNewDeployable::Transform' has a wrong offset!");

// Function Squad.SQDeveloperCameraMan.SpawnNewSoldier
// 0x0050 (0x0050 - 0x0000)
struct SQDeveloperCameraMan_SpawnNewSoldier final
{
public:
	TSubclassOf<class ASQSoldier>                 Param_Class;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQRoleSettings*                        RoleSetting;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTeam                                       Team;                                              // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_112A[0xF];                                     // 0x0011(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0020(0x0030)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeveloperCameraMan_SpawnNewSoldier) == 0x000010, "Wrong alignment on SQDeveloperCameraMan_SpawnNewSoldier");
static_assert(sizeof(SQDeveloperCameraMan_SpawnNewSoldier) == 0x000050, "Wrong size on SQDeveloperCameraMan_SpawnNewSoldier");
static_assert(offsetof(SQDeveloperCameraMan_SpawnNewSoldier, Param_Class) == 0x000000, "Member 'SQDeveloperCameraMan_SpawnNewSoldier::Param_Class' has a wrong offset!");
static_assert(offsetof(SQDeveloperCameraMan_SpawnNewSoldier, RoleSetting) == 0x000008, "Member 'SQDeveloperCameraMan_SpawnNewSoldier::RoleSetting' has a wrong offset!");
static_assert(offsetof(SQDeveloperCameraMan_SpawnNewSoldier, Team) == 0x000010, "Member 'SQDeveloperCameraMan_SpawnNewSoldier::Team' has a wrong offset!");
static_assert(offsetof(SQDeveloperCameraMan_SpawnNewSoldier, Transform) == 0x000020, "Member 'SQDeveloperCameraMan_SpawnNewSoldier::Transform' has a wrong offset!");

// Function Squad.SQDeveloperCameraMan.SpawnNewVehicle
// 0x0050 (0x0050 - 0x0000)
struct SQDeveloperCameraMan_SpawnNewVehicle final
{
public:
	TSubclassOf<class ASQVehicle>                 Param_Class;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQVehicleSettings*                     VehicleSetting;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTeam                                       Team;                                              // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_112B[0xF];                                     // 0x0011(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0020(0x0030)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeveloperCameraMan_SpawnNewVehicle) == 0x000010, "Wrong alignment on SQDeveloperCameraMan_SpawnNewVehicle");
static_assert(sizeof(SQDeveloperCameraMan_SpawnNewVehicle) == 0x000050, "Wrong size on SQDeveloperCameraMan_SpawnNewVehicle");
static_assert(offsetof(SQDeveloperCameraMan_SpawnNewVehicle, Param_Class) == 0x000000, "Member 'SQDeveloperCameraMan_SpawnNewVehicle::Param_Class' has a wrong offset!");
static_assert(offsetof(SQDeveloperCameraMan_SpawnNewVehicle, VehicleSetting) == 0x000008, "Member 'SQDeveloperCameraMan_SpawnNewVehicle::VehicleSetting' has a wrong offset!");
static_assert(offsetof(SQDeveloperCameraMan_SpawnNewVehicle, Team) == 0x000010, "Member 'SQDeveloperCameraMan_SpawnNewVehicle::Team' has a wrong offset!");
static_assert(offsetof(SQDeveloperCameraMan_SpawnNewVehicle, Transform) == 0x000020, "Member 'SQDeveloperCameraMan_SpawnNewVehicle::Transform' has a wrong offset!");

// Function Squad.SQDeveloperCameraMan.CameraTrace
// 0x0088 (0x0088 - 0x0000)
struct SQDeveloperCameraMan_CameraTrace final
{
public:
	struct FHitResult                             ReturnValue;                                       // 0x0000(0x0088)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeveloperCameraMan_CameraTrace) == 0x000004, "Wrong alignment on SQDeveloperCameraMan_CameraTrace");
static_assert(sizeof(SQDeveloperCameraMan_CameraTrace) == 0x000088, "Wrong size on SQDeveloperCameraMan_CameraTrace");
static_assert(offsetof(SQDeveloperCameraMan_CameraTrace, ReturnValue) == 0x000000, "Member 'SQDeveloperCameraMan_CameraTrace::ReturnValue' has a wrong offset!");

// Function Squad.SQDeveloperCameraMan.IsTracking
// 0x0001 (0x0001 - 0x0000)
struct SQDeveloperCameraMan_IsTracking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDeveloperCameraMan_IsTracking) == 0x000001, "Wrong alignment on SQDeveloperCameraMan_IsTracking");
static_assert(sizeof(SQDeveloperCameraMan_IsTracking) == 0x000001, "Wrong size on SQDeveloperCameraMan_IsTracking");
static_assert(offsetof(SQDeveloperCameraMan_IsTracking, ReturnValue) == 0x000000, "Member 'SQDeveloperCameraMan_IsTracking::ReturnValue' has a wrong offset!");

// Function Squad.SQDiplomacyService.GetRelationShip
// 0x0030 (0x0030 - 0x0000)
struct SQDiplomacyService_GetRelationShip final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ISQTeamInterface>      InActorA;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TScriptInterface<class ISQTeamInterface>      InActorB;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	ESQTeamRelationShip                           ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_112C[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQDiplomacyService_GetRelationShip) == 0x000008, "Wrong alignment on SQDiplomacyService_GetRelationShip");
static_assert(sizeof(SQDiplomacyService_GetRelationShip) == 0x000030, "Wrong size on SQDiplomacyService_GetRelationShip");
static_assert(offsetof(SQDiplomacyService_GetRelationShip, WorldContextObject) == 0x000000, "Member 'SQDiplomacyService_GetRelationShip::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetRelationShip, InActorA) == 0x000008, "Member 'SQDiplomacyService_GetRelationShip::InActorA' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetRelationShip, InActorB) == 0x000018, "Member 'SQDiplomacyService_GetRelationShip::InActorB' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetRelationShip, ReturnValue) == 0x000028, "Member 'SQDiplomacyService_GetRelationShip::ReturnValue' has a wrong offset!");

// Function Squad.SQDiplomacyService.GetRelationShipByIds
// 0x0010 (0x0010 - 0x0000)
struct SQDiplomacyService_GetRelationShipByIds final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTeam                                       InTeamIdA;                                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTeam                                       InTeamIdB;                                         // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTeamRelationShip                           ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_112D[0x5];                                     // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQDiplomacyService_GetRelationShipByIds) == 0x000008, "Wrong alignment on SQDiplomacyService_GetRelationShipByIds");
static_assert(sizeof(SQDiplomacyService_GetRelationShipByIds) == 0x000010, "Wrong size on SQDiplomacyService_GetRelationShipByIds");
static_assert(offsetof(SQDiplomacyService_GetRelationShipByIds, WorldContextObject) == 0x000000, "Member 'SQDiplomacyService_GetRelationShipByIds::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetRelationShipByIds, InTeamIdA) == 0x000008, "Member 'SQDiplomacyService_GetRelationShipByIds::InTeamIdA' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetRelationShipByIds, InTeamIdB) == 0x000009, "Member 'SQDiplomacyService_GetRelationShipByIds::InTeamIdB' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetRelationShipByIds, ReturnValue) == 0x00000A, "Member 'SQDiplomacyService_GetRelationShipByIds::ReturnValue' has a wrong offset!");

// Function Squad.SQDiplomacyService.GetRelationShipByIndex
// 0x0018 (0x0018 - 0x0000)
struct SQDiplomacyService_GetRelationShipByIndex final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InTeamIdA;                                         // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InTeamIdB;                                         // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTeamRelationShip                           ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_112E[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQDiplomacyService_GetRelationShipByIndex) == 0x000008, "Wrong alignment on SQDiplomacyService_GetRelationShipByIndex");
static_assert(sizeof(SQDiplomacyService_GetRelationShipByIndex) == 0x000018, "Wrong size on SQDiplomacyService_GetRelationShipByIndex");
static_assert(offsetof(SQDiplomacyService_GetRelationShipByIndex, WorldContextObject) == 0x000000, "Member 'SQDiplomacyService_GetRelationShipByIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetRelationShipByIndex, InTeamIdA) == 0x000008, "Member 'SQDiplomacyService_GetRelationShipByIndex::InTeamIdA' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetRelationShipByIndex, InTeamIdB) == 0x00000C, "Member 'SQDiplomacyService_GetRelationShipByIndex::InTeamIdB' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetRelationShipByIndex, ReturnValue) == 0x000010, "Member 'SQDiplomacyService_GetRelationShipByIndex::ReturnValue' has a wrong offset!");

// Function Squad.SQDiplomacyService.GetRelationShipByTeams
// 0x0018 (0x0018 - 0x0000)
struct SQDiplomacyService_GetRelationShipByTeams final
{
public:
	const class ASQTeam*                          InTeamA;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASQTeam*                          InTeamB;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTeamRelationShip                           ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_112F[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQDiplomacyService_GetRelationShipByTeams) == 0x000008, "Wrong alignment on SQDiplomacyService_GetRelationShipByTeams");
static_assert(sizeof(SQDiplomacyService_GetRelationShipByTeams) == 0x000018, "Wrong size on SQDiplomacyService_GetRelationShipByTeams");
static_assert(offsetof(SQDiplomacyService_GetRelationShipByTeams, InTeamA) == 0x000000, "Member 'SQDiplomacyService_GetRelationShipByTeams::InTeamA' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetRelationShipByTeams, InTeamB) == 0x000008, "Member 'SQDiplomacyService_GetRelationShipByTeams::InTeamB' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetRelationShipByTeams, ReturnValue) == 0x000010, "Member 'SQDiplomacyService_GetRelationShipByTeams::ReturnValue' has a wrong offset!");

// Function Squad.SQDiplomacyService.GetTeamsFromRelationShip
// 0x0038 (0x0038 - 0x0000)
struct SQDiplomacyService_GetTeamsFromRelationShip final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ISQTeamInterface>      InActor;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<ESQTeamRelationShip>                   InRelationShips;                                   // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 OutTeamIds;                                        // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDiplomacyService_GetTeamsFromRelationShip) == 0x000008, "Wrong alignment on SQDiplomacyService_GetTeamsFromRelationShip");
static_assert(sizeof(SQDiplomacyService_GetTeamsFromRelationShip) == 0x000038, "Wrong size on SQDiplomacyService_GetTeamsFromRelationShip");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromRelationShip, WorldContextObject) == 0x000000, "Member 'SQDiplomacyService_GetTeamsFromRelationShip::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromRelationShip, InActor) == 0x000008, "Member 'SQDiplomacyService_GetTeamsFromRelationShip::InActor' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromRelationShip, InRelationShips) == 0x000018, "Member 'SQDiplomacyService_GetTeamsFromRelationShip::InRelationShips' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromRelationShip, OutTeamIds) == 0x000028, "Member 'SQDiplomacyService_GetTeamsFromRelationShip::OutTeamIds' has a wrong offset!");

// Function Squad.SQDiplomacyService.GetTeamsFromRelationShipById
// 0x0030 (0x0030 - 0x0000)
struct SQDiplomacyService_GetTeamsFromRelationShipById final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTeam                                       InTeamId;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1130[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ESQTeamRelationShip>                   InRelationShips;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 OutTeamIds;                                        // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDiplomacyService_GetTeamsFromRelationShipById) == 0x000008, "Wrong alignment on SQDiplomacyService_GetTeamsFromRelationShipById");
static_assert(sizeof(SQDiplomacyService_GetTeamsFromRelationShipById) == 0x000030, "Wrong size on SQDiplomacyService_GetTeamsFromRelationShipById");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromRelationShipById, WorldContextObject) == 0x000000, "Member 'SQDiplomacyService_GetTeamsFromRelationShipById::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromRelationShipById, InTeamId) == 0x000008, "Member 'SQDiplomacyService_GetTeamsFromRelationShipById::InTeamId' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromRelationShipById, InRelationShips) == 0x000010, "Member 'SQDiplomacyService_GetTeamsFromRelationShipById::InRelationShips' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromRelationShipById, OutTeamIds) == 0x000020, "Member 'SQDiplomacyService_GetTeamsFromRelationShipById::OutTeamIds' has a wrong offset!");

// Function Squad.SQDiplomacyService.GetTeamsFromRelationShipByTeam
// 0x0028 (0x0028 - 0x0000)
struct SQDiplomacyService_GetTeamsFromRelationShipByTeam final
{
public:
	const class ASQTeam*                          InTeam;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ESQTeamRelationShip>                   InRelationShips;                                   // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 OutTeamIds;                                        // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDiplomacyService_GetTeamsFromRelationShipByTeam) == 0x000008, "Wrong alignment on SQDiplomacyService_GetTeamsFromRelationShipByTeam");
static_assert(sizeof(SQDiplomacyService_GetTeamsFromRelationShipByTeam) == 0x000028, "Wrong size on SQDiplomacyService_GetTeamsFromRelationShipByTeam");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromRelationShipByTeam, InTeam) == 0x000000, "Member 'SQDiplomacyService_GetTeamsFromRelationShipByTeam::InTeam' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromRelationShipByTeam, InRelationShips) == 0x000008, "Member 'SQDiplomacyService_GetTeamsFromRelationShipByTeam::InRelationShips' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromRelationShipByTeam, OutTeamIds) == 0x000018, "Member 'SQDiplomacyService_GetTeamsFromRelationShipByTeam::OutTeamIds' has a wrong offset!");

// Function Squad.SQDiplomacyService.GetTeamsFromRelationShipSet
// 0x0078 (0x0078 - 0x0000)
struct SQDiplomacyService_GetTeamsFromRelationShipSet final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ISQTeamInterface>      InActor;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TSet<ESQTeamRelationShip>                     InRelationShips;                                   // 0x0018(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 OutTeamIds;                                        // 0x0068(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDiplomacyService_GetTeamsFromRelationShipSet) == 0x000008, "Wrong alignment on SQDiplomacyService_GetTeamsFromRelationShipSet");
static_assert(sizeof(SQDiplomacyService_GetTeamsFromRelationShipSet) == 0x000078, "Wrong size on SQDiplomacyService_GetTeamsFromRelationShipSet");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromRelationShipSet, WorldContextObject) == 0x000000, "Member 'SQDiplomacyService_GetTeamsFromRelationShipSet::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromRelationShipSet, InActor) == 0x000008, "Member 'SQDiplomacyService_GetTeamsFromRelationShipSet::InActor' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromRelationShipSet, InRelationShips) == 0x000018, "Member 'SQDiplomacyService_GetTeamsFromRelationShipSet::InRelationShips' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromRelationShipSet, OutTeamIds) == 0x000068, "Member 'SQDiplomacyService_GetTeamsFromRelationShipSet::OutTeamIds' has a wrong offset!");

// Function Squad.SQDiplomacyService.GetTeamsFromRelationShipSetById
// 0x0070 (0x0070 - 0x0000)
struct SQDiplomacyService_GetTeamsFromRelationShipSetById final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTeam                                       InTeamId;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1131[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<ESQTeamRelationShip>                     InRelationShips;                                   // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 OutTeamIds;                                        // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDiplomacyService_GetTeamsFromRelationShipSetById) == 0x000008, "Wrong alignment on SQDiplomacyService_GetTeamsFromRelationShipSetById");
static_assert(sizeof(SQDiplomacyService_GetTeamsFromRelationShipSetById) == 0x000070, "Wrong size on SQDiplomacyService_GetTeamsFromRelationShipSetById");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromRelationShipSetById, WorldContextObject) == 0x000000, "Member 'SQDiplomacyService_GetTeamsFromRelationShipSetById::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromRelationShipSetById, InTeamId) == 0x000008, "Member 'SQDiplomacyService_GetTeamsFromRelationShipSetById::InTeamId' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromRelationShipSetById, InRelationShips) == 0x000010, "Member 'SQDiplomacyService_GetTeamsFromRelationShipSetById::InRelationShips' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromRelationShipSetById, OutTeamIds) == 0x000060, "Member 'SQDiplomacyService_GetTeamsFromRelationShipSetById::OutTeamIds' has a wrong offset!");

// Function Squad.SQDiplomacyService.GetTeamsFromRelationShipSetByTeam
// 0x0068 (0x0068 - 0x0000)
struct SQDiplomacyService_GetTeamsFromRelationShipSetByTeam final
{
public:
	const class ASQTeam*                          InTeam;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<ESQTeamRelationShip>                     InRelationShips;                                   // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 OutTeamIds;                                        // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDiplomacyService_GetTeamsFromRelationShipSetByTeam) == 0x000008, "Wrong alignment on SQDiplomacyService_GetTeamsFromRelationShipSetByTeam");
static_assert(sizeof(SQDiplomacyService_GetTeamsFromRelationShipSetByTeam) == 0x000068, "Wrong size on SQDiplomacyService_GetTeamsFromRelationShipSetByTeam");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromRelationShipSetByTeam, InTeam) == 0x000000, "Member 'SQDiplomacyService_GetTeamsFromRelationShipSetByTeam::InTeam' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromRelationShipSetByTeam, InRelationShips) == 0x000008, "Member 'SQDiplomacyService_GetTeamsFromRelationShipSetByTeam::InRelationShips' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromRelationShipSetByTeam, OutTeamIds) == 0x000058, "Member 'SQDiplomacyService_GetTeamsFromRelationShipSetByTeam::OutTeamIds' has a wrong offset!");

// Function Squad.SQDiplomacyService.GetTeamsFromSingleRelationShip
// 0x0030 (0x0030 - 0x0000)
struct SQDiplomacyService_GetTeamsFromSingleRelationShip final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ISQTeamInterface>      InActor;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	ESQTeamRelationShip                           InRelationShip;                                    // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1132[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 OutTeamIds;                                        // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDiplomacyService_GetTeamsFromSingleRelationShip) == 0x000008, "Wrong alignment on SQDiplomacyService_GetTeamsFromSingleRelationShip");
static_assert(sizeof(SQDiplomacyService_GetTeamsFromSingleRelationShip) == 0x000030, "Wrong size on SQDiplomacyService_GetTeamsFromSingleRelationShip");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromSingleRelationShip, WorldContextObject) == 0x000000, "Member 'SQDiplomacyService_GetTeamsFromSingleRelationShip::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromSingleRelationShip, InActor) == 0x000008, "Member 'SQDiplomacyService_GetTeamsFromSingleRelationShip::InActor' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromSingleRelationShip, InRelationShip) == 0x000018, "Member 'SQDiplomacyService_GetTeamsFromSingleRelationShip::InRelationShip' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromSingleRelationShip, OutTeamIds) == 0x000020, "Member 'SQDiplomacyService_GetTeamsFromSingleRelationShip::OutTeamIds' has a wrong offset!");

// Function Squad.SQDiplomacyService.GetTeamsFromSingleRelationShipById
// 0x0020 (0x0020 - 0x0000)
struct SQDiplomacyService_GetTeamsFromSingleRelationShipById final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTeam                                       InTeamId;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTeamRelationShip                           InRelationShip;                                    // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1133[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 OutTeamIds;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDiplomacyService_GetTeamsFromSingleRelationShipById) == 0x000008, "Wrong alignment on SQDiplomacyService_GetTeamsFromSingleRelationShipById");
static_assert(sizeof(SQDiplomacyService_GetTeamsFromSingleRelationShipById) == 0x000020, "Wrong size on SQDiplomacyService_GetTeamsFromSingleRelationShipById");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromSingleRelationShipById, WorldContextObject) == 0x000000, "Member 'SQDiplomacyService_GetTeamsFromSingleRelationShipById::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromSingleRelationShipById, InTeamId) == 0x000008, "Member 'SQDiplomacyService_GetTeamsFromSingleRelationShipById::InTeamId' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromSingleRelationShipById, InRelationShip) == 0x000009, "Member 'SQDiplomacyService_GetTeamsFromSingleRelationShipById::InRelationShip' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromSingleRelationShipById, OutTeamIds) == 0x000010, "Member 'SQDiplomacyService_GetTeamsFromSingleRelationShipById::OutTeamIds' has a wrong offset!");

// Function Squad.SQDiplomacyService.GetTeamsFromSingleRelationShipByTeam
// 0x0020 (0x0020 - 0x0000)
struct SQDiplomacyService_GetTeamsFromSingleRelationShipByTeam final
{
public:
	const class ASQTeam*                          InTeam;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTeamRelationShip                           InRelationShip;                                    // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1134[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 OutTeamIds;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDiplomacyService_GetTeamsFromSingleRelationShipByTeam) == 0x000008, "Wrong alignment on SQDiplomacyService_GetTeamsFromSingleRelationShipByTeam");
static_assert(sizeof(SQDiplomacyService_GetTeamsFromSingleRelationShipByTeam) == 0x000020, "Wrong size on SQDiplomacyService_GetTeamsFromSingleRelationShipByTeam");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromSingleRelationShipByTeam, InTeam) == 0x000000, "Member 'SQDiplomacyService_GetTeamsFromSingleRelationShipByTeam::InTeam' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromSingleRelationShipByTeam, InRelationShip) == 0x000008, "Member 'SQDiplomacyService_GetTeamsFromSingleRelationShipByTeam::InRelationShip' has a wrong offset!");
static_assert(offsetof(SQDiplomacyService_GetTeamsFromSingleRelationShipByTeam, OutTeamIds) == 0x000010, "Member 'SQDiplomacyService_GetTeamsFromSingleRelationShipByTeam::OutTeamIds' has a wrong offset!");

// Function Squad.SQRotorsAnimInstance.GetRotationByBoneName
// 0x0014 (0x0014 - 0x0000)
struct SQRotorsAnimInstance_GetRotationByBoneName final
{
public:
	class FName                                   BoneName;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRotorsAnimInstance_GetRotationByBoneName) == 0x000004, "Wrong alignment on SQRotorsAnimInstance_GetRotationByBoneName");
static_assert(sizeof(SQRotorsAnimInstance_GetRotationByBoneName) == 0x000014, "Wrong size on SQRotorsAnimInstance_GetRotationByBoneName");
static_assert(offsetof(SQRotorsAnimInstance_GetRotationByBoneName, BoneName) == 0x000000, "Member 'SQRotorsAnimInstance_GetRotationByBoneName::BoneName' has a wrong offset!");
static_assert(offsetof(SQRotorsAnimInstance_GetRotationByBoneName, ReturnValue) == 0x000008, "Member 'SQRotorsAnimInstance_GetRotationByBoneName::ReturnValue' has a wrong offset!");

// Function Squad.SQPrimaryData.GetLogId
// 0x0010 (0x0010 - 0x0000)
struct SQPrimaryData_GetLogId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPrimaryData_GetLogId) == 0x000008, "Wrong alignment on SQPrimaryData_GetLogId");
static_assert(sizeof(SQPrimaryData_GetLogId) == 0x000010, "Wrong size on SQPrimaryData_GetLogId");
static_assert(offsetof(SQPrimaryData_GetLogId, ReturnValue) == 0x000000, "Member 'SQPrimaryData_GetLogId::ReturnValue' has a wrong offset!");

// Function Squad.SQPrimaryData.GetModID
// 0x0010 (0x0010 - 0x0000)
struct SQPrimaryData_GetModID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPrimaryData_GetModID) == 0x000008, "Wrong alignment on SQPrimaryData_GetModID");
static_assert(sizeof(SQPrimaryData_GetModID) == 0x000010, "Wrong size on SQPrimaryData_GetModID");
static_assert(offsetof(SQPrimaryData_GetModID, ReturnValue) == 0x000000, "Member 'SQPrimaryData_GetModID::ReturnValue' has a wrong offset!");

// Function Squad.SQPrimaryData.GetDisplayName
// 0x0020 (0x0020 - 0x0000)
struct SQPrimaryData_GetDisplayName final
{
public:
	class FText                                   OutDisplayName;                                    // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1138[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPrimaryData_GetDisplayName) == 0x000008, "Wrong alignment on SQPrimaryData_GetDisplayName");
static_assert(sizeof(SQPrimaryData_GetDisplayName) == 0x000020, "Wrong size on SQPrimaryData_GetDisplayName");
static_assert(offsetof(SQPrimaryData_GetDisplayName, OutDisplayName) == 0x000000, "Member 'SQPrimaryData_GetDisplayName::OutDisplayName' has a wrong offset!");
static_assert(offsetof(SQPrimaryData_GetDisplayName, ReturnValue) == 0x000018, "Member 'SQPrimaryData_GetDisplayName::ReturnValue' has a wrong offset!");

// Function Squad.SQPrimaryData.GetId
// 0x0008 (0x0008 - 0x0000)
struct SQPrimaryData_GetId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPrimaryData_GetId) == 0x000004, "Wrong alignment on SQPrimaryData_GetId");
static_assert(sizeof(SQPrimaryData_GetId) == 0x000008, "Wrong size on SQPrimaryData_GetId");
static_assert(offsetof(SQPrimaryData_GetId, ReturnValue) == 0x000000, "Member 'SQPrimaryData_GetId::ReturnValue' has a wrong offset!");

// Function Squad.SQPrimaryData.GetIdAsString
// 0x0010 (0x0010 - 0x0000)
struct SQPrimaryData_GetIdAsString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPrimaryData_GetIdAsString) == 0x000008, "Wrong alignment on SQPrimaryData_GetIdAsString");
static_assert(sizeof(SQPrimaryData_GetIdAsString) == 0x000010, "Wrong size on SQPrimaryData_GetIdAsString");
static_assert(offsetof(SQPrimaryData_GetIdAsString, ReturnValue) == 0x000000, "Member 'SQPrimaryData_GetIdAsString::ReturnValue' has a wrong offset!");

// Function Squad.SQLayer.AddObjectiveLocation
// 0x0028 (0x0028 - 0x0000)
struct SQLayer_AddObjectiveLocation final
{
public:
	struct FSQLayerPOIData                        POI;                                               // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQLayer_AddObjectiveLocation) == 0x000008, "Wrong alignment on SQLayer_AddObjectiveLocation");
static_assert(sizeof(SQLayer_AddObjectiveLocation) == 0x000028, "Wrong size on SQLayer_AddObjectiveLocation");
static_assert(offsetof(SQLayer_AddObjectiveLocation, POI) == 0x000000, "Member 'SQLayer_AddObjectiveLocation::POI' has a wrong offset!");

// Function Squad.SQLayer.CanVoteForFactionConcurrently
// 0x0001 (0x0001 - 0x0000)
struct SQLayer_CanVoteForFactionConcurrently final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQLayer_CanVoteForFactionConcurrently) == 0x000001, "Wrong alignment on SQLayer_CanVoteForFactionConcurrently");
static_assert(sizeof(SQLayer_CanVoteForFactionConcurrently) == 0x000001, "Wrong size on SQLayer_CanVoteForFactionConcurrently");
static_assert(offsetof(SQLayer_CanVoteForFactionConcurrently, ReturnValue) == 0x000000, "Member 'SQLayer_CanVoteForFactionConcurrently::ReturnValue' has a wrong offset!");

// Function Squad.SQLayer.GetCompatibleFactionSetups
// 0x0070 (0x0070 - 0x0000)
struct SQLayer_GetCompatibleFactionSetups final
{
public:
	int32                                         InTeam;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_113C[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class USQFactionSetup*>     InAvailableFactionSetups;                          // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class USQFactionSetup*>                OutCompatibleFactionSetups;                        // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_113D[0x7];                                     // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQLayer_GetCompatibleFactionSetups) == 0x000008, "Wrong alignment on SQLayer_GetCompatibleFactionSetups");
static_assert(sizeof(SQLayer_GetCompatibleFactionSetups) == 0x000070, "Wrong size on SQLayer_GetCompatibleFactionSetups");
static_assert(offsetof(SQLayer_GetCompatibleFactionSetups, InTeam) == 0x000000, "Member 'SQLayer_GetCompatibleFactionSetups::InTeam' has a wrong offset!");
static_assert(offsetof(SQLayer_GetCompatibleFactionSetups, InAvailableFactionSetups) == 0x000008, "Member 'SQLayer_GetCompatibleFactionSetups::InAvailableFactionSetups' has a wrong offset!");
static_assert(offsetof(SQLayer_GetCompatibleFactionSetups, OutCompatibleFactionSetups) == 0x000058, "Member 'SQLayer_GetCompatibleFactionSetups::OutCompatibleFactionSetups' has a wrong offset!");
static_assert(offsetof(SQLayer_GetCompatibleFactionSetups, ReturnValue) == 0x000068, "Member 'SQLayer_GetCompatibleFactionSetups::ReturnValue' has a wrong offset!");

// Function Squad.SQLayer.GetDefaultFactionSetup
// 0x0010 (0x0010 - 0x0000)
struct SQLayer_GetDefaultFactionSetup final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_113E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQFactionSetup*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQLayer_GetDefaultFactionSetup) == 0x000008, "Wrong alignment on SQLayer_GetDefaultFactionSetup");
static_assert(sizeof(SQLayer_GetDefaultFactionSetup) == 0x000010, "Wrong size on SQLayer_GetDefaultFactionSetup");
static_assert(offsetof(SQLayer_GetDefaultFactionSetup, TeamId) == 0x000000, "Member 'SQLayer_GetDefaultFactionSetup::TeamId' has a wrong offset!");
static_assert(offsetof(SQLayer_GetDefaultFactionSetup, ReturnValue) == 0x000008, "Member 'SQLayer_GetDefaultFactionSetup::ReturnValue' has a wrong offset!");

// Function Squad.SQLayer.GetFactionSetupByID
// 0x0018 (0x0018 - 0x0000)
struct SQLayer_GetFactionSetupByID final
{
public:
	class FName                                   FactionID;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamId;                                            // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_113F[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQFactionSetup*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQLayer_GetFactionSetupByID) == 0x000008, "Wrong alignment on SQLayer_GetFactionSetupByID");
static_assert(sizeof(SQLayer_GetFactionSetupByID) == 0x000018, "Wrong size on SQLayer_GetFactionSetupByID");
static_assert(offsetof(SQLayer_GetFactionSetupByID, FactionID) == 0x000000, "Member 'SQLayer_GetFactionSetupByID::FactionID' has a wrong offset!");
static_assert(offsetof(SQLayer_GetFactionSetupByID, TeamId) == 0x000008, "Member 'SQLayer_GetFactionSetupByID::TeamId' has a wrong offset!");
static_assert(offsetof(SQLayer_GetFactionSetupByID, ReturnValue) == 0x000010, "Member 'SQLayer_GetFactionSetupByID::ReturnValue' has a wrong offset!");

// Function Squad.SQLayer.GetFactionSetupByIDType
// 0x0020 (0x0020 - 0x0000)
struct SQLayer_GetFactionSetupByIDType final
{
public:
	class FName                                   FactionID;                                         // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FactionType;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamId;                                            // 0x0010(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1140[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQFactionSetup*                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQLayer_GetFactionSetupByIDType) == 0x000008, "Wrong alignment on SQLayer_GetFactionSetupByIDType");
static_assert(sizeof(SQLayer_GetFactionSetupByIDType) == 0x000020, "Wrong size on SQLayer_GetFactionSetupByIDType");
static_assert(offsetof(SQLayer_GetFactionSetupByIDType, FactionID) == 0x000000, "Member 'SQLayer_GetFactionSetupByIDType::FactionID' has a wrong offset!");
static_assert(offsetof(SQLayer_GetFactionSetupByIDType, FactionType) == 0x000008, "Member 'SQLayer_GetFactionSetupByIDType::FactionType' has a wrong offset!");
static_assert(offsetof(SQLayer_GetFactionSetupByIDType, TeamId) == 0x000010, "Member 'SQLayer_GetFactionSetupByIDType::TeamId' has a wrong offset!");
static_assert(offsetof(SQLayer_GetFactionSetupByIDType, ReturnValue) == 0x000018, "Member 'SQLayer_GetFactionSetupByIDType::ReturnValue' has a wrong offset!");

// Function Squad.SQLayer.GetFobRadiusTableRow
// 0x0010 (0x0010 - 0x0000)
struct SQLayer_GetFobRadiusTableRow final
{
public:
	struct FDataTableRowHandle                    ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQLayer_GetFobRadiusTableRow) == 0x000008, "Wrong alignment on SQLayer_GetFobRadiusTableRow");
static_assert(sizeof(SQLayer_GetFobRadiusTableRow) == 0x000010, "Wrong size on SQLayer_GetFobRadiusTableRow");
static_assert(offsetof(SQLayer_GetFobRadiusTableRow, ReturnValue) == 0x000000, "Member 'SQLayer_GetFobRadiusTableRow::ReturnValue' has a wrong offset!");

// Function Squad.SQLayer.GetGameModeID
// 0x0008 (0x0008 - 0x0000)
struct SQLayer_GetGameModeID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQLayer_GetGameModeID) == 0x000004, "Wrong alignment on SQLayer_GetGameModeID");
static_assert(sizeof(SQLayer_GetGameModeID) == 0x000008, "Wrong size on SQLayer_GetGameModeID");
static_assert(offsetof(SQLayer_GetGameModeID, ReturnValue) == 0x000000, "Member 'SQLayer_GetGameModeID::ReturnValue' has a wrong offset!");

// Function Squad.SQLayer.GetLayerSize
// 0x0008 (0x0008 - 0x0000)
struct SQLayer_GetLayerSize final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQLayer_GetLayerSize) == 0x000004, "Wrong alignment on SQLayer_GetLayerSize");
static_assert(sizeof(SQLayer_GetLayerSize) == 0x000008, "Wrong size on SQLayer_GetLayerSize");
static_assert(offsetof(SQLayer_GetLayerSize, ReturnValue) == 0x000000, "Member 'SQLayer_GetLayerSize::ReturnValue' has a wrong offset!");

// Function Squad.SQLayer.GetMapNames
// 0x0018 (0x0018 - 0x0000)
struct SQLayer_GetMapNames final
{
public:
	TArray<class FString>                         OutMapNames;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1141[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQLayer_GetMapNames) == 0x000008, "Wrong alignment on SQLayer_GetMapNames");
static_assert(sizeof(SQLayer_GetMapNames) == 0x000018, "Wrong size on SQLayer_GetMapNames");
static_assert(offsetof(SQLayer_GetMapNames, OutMapNames) == 0x000000, "Member 'SQLayer_GetMapNames::OutMapNames' has a wrong offset!");
static_assert(offsetof(SQLayer_GetMapNames, ReturnValue) == 0x000010, "Member 'SQLayer_GetMapNames::ReturnValue' has a wrong offset!");

// Function Squad.SQLayer.GetMapPaths
// 0x0018 (0x0018 - 0x0000)
struct SQLayer_GetMapPaths final
{
public:
	TArray<class FString>                         OutMapPaths;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1142[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQLayer_GetMapPaths) == 0x000008, "Wrong alignment on SQLayer_GetMapPaths");
static_assert(sizeof(SQLayer_GetMapPaths) == 0x000018, "Wrong size on SQLayer_GetMapPaths");
static_assert(offsetof(SQLayer_GetMapPaths, OutMapPaths) == 0x000000, "Member 'SQLayer_GetMapPaths::OutMapPaths' has a wrong offset!");
static_assert(offsetof(SQLayer_GetMapPaths, ReturnValue) == 0x000010, "Member 'SQLayer_GetMapPaths::ReturnValue' has a wrong offset!");

// Function Squad.SQLayer.HasFactionSetupChoice
// 0x0028 (0x0028 - 0x0000)
struct SQLayer_HasFactionSetupChoice final
{
public:
	int32                                         InTeam;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1143[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQFactionSetup*                        OutSpecificFaction;                                // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Excluded;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1144[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQLayer_HasFactionSetupChoice) == 0x000008, "Wrong alignment on SQLayer_HasFactionSetupChoice");
static_assert(sizeof(SQLayer_HasFactionSetupChoice) == 0x000028, "Wrong size on SQLayer_HasFactionSetupChoice");
static_assert(offsetof(SQLayer_HasFactionSetupChoice, InTeam) == 0x000000, "Member 'SQLayer_HasFactionSetupChoice::InTeam' has a wrong offset!");
static_assert(offsetof(SQLayer_HasFactionSetupChoice, OutSpecificFaction) == 0x000008, "Member 'SQLayer_HasFactionSetupChoice::OutSpecificFaction' has a wrong offset!");
static_assert(offsetof(SQLayer_HasFactionSetupChoice, Excluded) == 0x000010, "Member 'SQLayer_HasFactionSetupChoice::Excluded' has a wrong offset!");
static_assert(offsetof(SQLayer_HasFactionSetupChoice, ReturnValue) == 0x000020, "Member 'SQLayer_HasFactionSetupChoice::ReturnValue' has a wrong offset!");

// Function Squad.SQLayer.HasMapName
// 0x0018 (0x0018 - 0x0000)
struct SQLayer_HasMapName final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1145[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQLayer_HasMapName) == 0x000008, "Wrong alignment on SQLayer_HasMapName");
static_assert(sizeof(SQLayer_HasMapName) == 0x000018, "Wrong size on SQLayer_HasMapName");
static_assert(offsetof(SQLayer_HasMapName, MapName) == 0x000000, "Member 'SQLayer_HasMapName::MapName' has a wrong offset!");
static_assert(offsetof(SQLayer_HasMapName, ReturnValue) == 0x000010, "Member 'SQLayer_HasMapName::ReturnValue' has a wrong offset!");

// Function Squad.SQLayer.HasMapPath
// 0x0018 (0x0018 - 0x0000)
struct SQLayer_HasMapPath final
{
public:
	class FString                                 MapPath;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1146[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQLayer_HasMapPath) == 0x000008, "Wrong alignment on SQLayer_HasMapPath");
static_assert(sizeof(SQLayer_HasMapPath) == 0x000018, "Wrong size on SQLayer_HasMapPath");
static_assert(offsetof(SQLayer_HasMapPath, MapPath) == 0x000000, "Member 'SQLayer_HasMapPath::MapPath' has a wrong offset!");
static_assert(offsetof(SQLayer_HasMapPath, ReturnValue) == 0x000010, "Member 'SQLayer_HasMapPath::ReturnValue' has a wrong offset!");

// Function Squad.SQLayer.HasTeamConfig
// 0x0008 (0x0008 - 0x0000)
struct SQLayer_HasTeamConfig final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1147[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQLayer_HasTeamConfig) == 0x000004, "Wrong alignment on SQLayer_HasTeamConfig");
static_assert(sizeof(SQLayer_HasTeamConfig) == 0x000008, "Wrong size on SQLayer_HasTeamConfig");
static_assert(offsetof(SQLayer_HasTeamConfig, TeamId) == 0x000000, "Member 'SQLayer_HasTeamConfig::TeamId' has a wrong offset!");
static_assert(offsetof(SQLayer_HasTeamConfig, ReturnValue) == 0x000004, "Member 'SQLayer_HasTeamConfig::ReturnValue' has a wrong offset!");

// Function Squad.SQLayer.TryGetAvailabilityModifierPct
// 0x0018 (0x0018 - 0x0000)
struct SQLayer_TryGetAvailabilityModifierPct final
{
public:
	int32                                         InTeam;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1148[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class USQAvailability*                  InAvailability;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutModifier;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1149[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQLayer_TryGetAvailabilityModifierPct) == 0x000008, "Wrong alignment on SQLayer_TryGetAvailabilityModifierPct");
static_assert(sizeof(SQLayer_TryGetAvailabilityModifierPct) == 0x000018, "Wrong size on SQLayer_TryGetAvailabilityModifierPct");
static_assert(offsetof(SQLayer_TryGetAvailabilityModifierPct, InTeam) == 0x000000, "Member 'SQLayer_TryGetAvailabilityModifierPct::InTeam' has a wrong offset!");
static_assert(offsetof(SQLayer_TryGetAvailabilityModifierPct, InAvailability) == 0x000008, "Member 'SQLayer_TryGetAvailabilityModifierPct::InAvailability' has a wrong offset!");
static_assert(offsetof(SQLayer_TryGetAvailabilityModifierPct, OutModifier) == 0x000010, "Member 'SQLayer_TryGetAvailabilityModifierPct::OutModifier' has a wrong offset!");
static_assert(offsetof(SQLayer_TryGetAvailabilityModifierPct, ReturnValue) == 0x000014, "Member 'SQLayer_TryGetAvailabilityModifierPct::ReturnValue' has a wrong offset!");

// Function Squad.SQLayer.TryGetDisplayName
// 0x0020 (0x0020 - 0x0000)
struct SQLayer_TryGetDisplayName final
{
public:
	class FText                                   OutDisplayName;                                    // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114A[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQLayer_TryGetDisplayName) == 0x000008, "Wrong alignment on SQLayer_TryGetDisplayName");
static_assert(sizeof(SQLayer_TryGetDisplayName) == 0x000020, "Wrong size on SQLayer_TryGetDisplayName");
static_assert(offsetof(SQLayer_TryGetDisplayName, OutDisplayName) == 0x000000, "Member 'SQLayer_TryGetDisplayName::OutDisplayName' has a wrong offset!");
static_assert(offsetof(SQLayer_TryGetDisplayName, ReturnValue) == 0x000018, "Member 'SQLayer_TryGetDisplayName::ReturnValue' has a wrong offset!");

// Function Squad.SQLayer.TryGetGameModeName
// 0x0020 (0x0020 - 0x0000)
struct SQLayer_TryGetGameModeName final
{
public:
	class FText                                   OutGameMode;                                       // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114B[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQLayer_TryGetGameModeName) == 0x000008, "Wrong alignment on SQLayer_TryGetGameModeName");
static_assert(sizeof(SQLayer_TryGetGameModeName) == 0x000020, "Wrong size on SQLayer_TryGetGameModeName");
static_assert(offsetof(SQLayer_TryGetGameModeName, OutGameMode) == 0x000000, "Member 'SQLayer_TryGetGameModeName::OutGameMode' has a wrong offset!");
static_assert(offsetof(SQLayer_TryGetGameModeName, ReturnValue) == 0x000018, "Member 'SQLayer_TryGetGameModeName::ReturnValue' has a wrong offset!");

// Function Squad.SQLayer.TryGetGameModeShortName
// 0x0020 (0x0020 - 0x0000)
struct SQLayer_TryGetGameModeShortName final
{
public:
	class FText                                   OutGameMode;                                       // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114C[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQLayer_TryGetGameModeShortName) == 0x000008, "Wrong alignment on SQLayer_TryGetGameModeShortName");
static_assert(sizeof(SQLayer_TryGetGameModeShortName) == 0x000020, "Wrong size on SQLayer_TryGetGameModeShortName");
static_assert(offsetof(SQLayer_TryGetGameModeShortName, OutGameMode) == 0x000000, "Member 'SQLayer_TryGetGameModeShortName::OutGameMode' has a wrong offset!");
static_assert(offsetof(SQLayer_TryGetGameModeShortName, ReturnValue) == 0x000018, "Member 'SQLayer_TryGetGameModeShortName::ReturnValue' has a wrong offset!");

// Function Squad.SQLayer.TryGetLayerStagingDuration
// 0x0010 (0x0010 - 0x0000)
struct SQLayer_TryGetLayerStagingDuration final
{
public:
	struct FTimespan                              OutDuration;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114D[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQLayer_TryGetLayerStagingDuration) == 0x000008, "Wrong alignment on SQLayer_TryGetLayerStagingDuration");
static_assert(sizeof(SQLayer_TryGetLayerStagingDuration) == 0x000010, "Wrong size on SQLayer_TryGetLayerStagingDuration");
static_assert(offsetof(SQLayer_TryGetLayerStagingDuration, OutDuration) == 0x000000, "Member 'SQLayer_TryGetLayerStagingDuration::OutDuration' has a wrong offset!");
static_assert(offsetof(SQLayer_TryGetLayerStagingDuration, ReturnValue) == 0x000008, "Member 'SQLayer_TryGetLayerStagingDuration::ReturnValue' has a wrong offset!");

// Function Squad.SQLayer.TryGetLoadingMusic
// 0x0010 (0x0010 - 0x0000)
struct SQLayer_TryGetLoadingMusic final
{
public:
	class USoundBase*                             OutLoadingMusic;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114E[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQLayer_TryGetLoadingMusic) == 0x000008, "Wrong alignment on SQLayer_TryGetLoadingMusic");
static_assert(sizeof(SQLayer_TryGetLoadingMusic) == 0x000010, "Wrong size on SQLayer_TryGetLoadingMusic");
static_assert(offsetof(SQLayer_TryGetLoadingMusic, OutLoadingMusic) == 0x000000, "Member 'SQLayer_TryGetLoadingMusic::OutLoadingMusic' has a wrong offset!");
static_assert(offsetof(SQLayer_TryGetLoadingMusic, ReturnValue) == 0x000008, "Member 'SQLayer_TryGetLoadingMusic::ReturnValue' has a wrong offset!");

// Function Squad.SQLayer.TryGetTeamConfig
// 0x0020 (0x0020 - 0x0000)
struct SQLayer_TryGetTeamConfig final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USQLayerTeamConfig>         LayerTeamConfigClass;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQLayerTeamConfig*                     OutTeamConfig;                                     // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1150[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQLayer_TryGetTeamConfig) == 0x000008, "Wrong alignment on SQLayer_TryGetTeamConfig");
static_assert(sizeof(SQLayer_TryGetTeamConfig) == 0x000020, "Wrong size on SQLayer_TryGetTeamConfig");
static_assert(offsetof(SQLayer_TryGetTeamConfig, TeamId) == 0x000000, "Member 'SQLayer_TryGetTeamConfig::TeamId' has a wrong offset!");
static_assert(offsetof(SQLayer_TryGetTeamConfig, LayerTeamConfigClass) == 0x000008, "Member 'SQLayer_TryGetTeamConfig::LayerTeamConfigClass' has a wrong offset!");
static_assert(offsetof(SQLayer_TryGetTeamConfig, OutTeamConfig) == 0x000010, "Member 'SQLayer_TryGetTeamConfig::OutTeamConfig' has a wrong offset!");
static_assert(offsetof(SQLayer_TryGetTeamConfig, ReturnValue) == 0x000018, "Member 'SQLayer_TryGetTeamConfig::ReturnValue' has a wrong offset!");

// Function Squad.SQLayer.ValidateFactions
// 0x0020 (0x0020 - 0x0000)
struct SQLayer_ValidateFactions final
{
public:
	struct FSQLayerSettings                       LayerSettings;                                     // 0x0000(0x0020)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQLayer_ValidateFactions) == 0x000004, "Wrong alignment on SQLayer_ValidateFactions");
static_assert(sizeof(SQLayer_ValidateFactions) == 0x000020, "Wrong size on SQLayer_ValidateFactions");
static_assert(offsetof(SQLayer_ValidateFactions, LayerSettings) == 0x000000, "Member 'SQLayer_ValidateFactions::LayerSettings' has a wrong offset!");

// Function Squad.SQDrawChatWidget.DrawWidget
// 0x0038 (0x0038 - 0x0000)
struct SQDrawChatWidget_DrawWidget final
{
public:
	class USQDrawChatWidget*                      ChatWidget;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPaintContext                          Context;                                           // 0x0008(0x0030)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDrawChatWidget_DrawWidget) == 0x000008, "Wrong alignment on SQDrawChatWidget_DrawWidget");
static_assert(sizeof(SQDrawChatWidget_DrawWidget) == 0x000038, "Wrong size on SQDrawChatWidget_DrawWidget");
static_assert(offsetof(SQDrawChatWidget_DrawWidget, ChatWidget) == 0x000000, "Member 'SQDrawChatWidget_DrawWidget::ChatWidget' has a wrong offset!");
static_assert(offsetof(SQDrawChatWidget_DrawWidget, Context) == 0x000008, "Member 'SQDrawChatWidget_DrawWidget::Context' has a wrong offset!");

// Function Squad.SQVehicleComponent.GetParentVehicle
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleComponent_GetParentVehicle final
{
public:
	class ASQVehicle*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleComponent_GetParentVehicle) == 0x000008, "Wrong alignment on SQVehicleComponent_GetParentVehicle");
static_assert(sizeof(SQVehicleComponent_GetParentVehicle) == 0x000008, "Wrong size on SQVehicleComponent_GetParentVehicle");
static_assert(offsetof(SQVehicleComponent_GetParentVehicle, ReturnValue) == 0x000000, "Member 'SQVehicleComponent_GetParentVehicle::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleComponent.MulticastComponentDestroyed
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleComponent_MulticastComponentDestroyed final
{
public:
	TSubclassOf<class UDamageType>                DamageTypeClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleComponent_MulticastComponentDestroyed) == 0x000008, "Wrong alignment on SQVehicleComponent_MulticastComponentDestroyed");
static_assert(sizeof(SQVehicleComponent_MulticastComponentDestroyed) == 0x000008, "Wrong size on SQVehicleComponent_MulticastComponentDestroyed");
static_assert(offsetof(SQVehicleComponent_MulticastComponentDestroyed, DamageTypeClass) == 0x000000, "Member 'SQVehicleComponent_MulticastComponentDestroyed::DamageTypeClass' has a wrong offset!");

// Function Squad.SQVehicleComponent.OnRep_HealthChanged
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleComponent_OnRep_HealthChanged final
{
public:
	float                                         PreviousHealthValue;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleComponent_OnRep_HealthChanged) == 0x000004, "Wrong alignment on SQVehicleComponent_OnRep_HealthChanged");
static_assert(sizeof(SQVehicleComponent_OnRep_HealthChanged) == 0x000004, "Wrong size on SQVehicleComponent_OnRep_HealthChanged");
static_assert(offsetof(SQVehicleComponent_OnRep_HealthChanged, PreviousHealthValue) == 0x000000, "Member 'SQVehicleComponent_OnRep_HealthChanged::PreviousHealthValue' has a wrong offset!");

// Function Squad.SQVehicleComponent.OnRep_VehicleComponentState
// 0x0001 (0x0001 - 0x0000)
struct SQVehicleComponent_OnRep_VehicleComponentState final
{
public:
	ESQVehicleComponentStates                     PreviousState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleComponent_OnRep_VehicleComponentState) == 0x000001, "Wrong alignment on SQVehicleComponent_OnRep_VehicleComponentState");
static_assert(sizeof(SQVehicleComponent_OnRep_VehicleComponentState) == 0x000001, "Wrong size on SQVehicleComponent_OnRep_VehicleComponentState");
static_assert(offsetof(SQVehicleComponent_OnRep_VehicleComponentState, PreviousState) == 0x000000, "Member 'SQVehicleComponent_OnRep_VehicleComponentState::PreviousState' has a wrong offset!");

// Function Squad.SQVehicleComponent.SetHealth
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleComponent_SetHealth final
{
public:
	float                                         NewHealth;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleComponent_SetHealth) == 0x000004, "Wrong alignment on SQVehicleComponent_SetHealth");
static_assert(sizeof(SQVehicleComponent_SetHealth) == 0x000004, "Wrong size on SQVehicleComponent_SetHealth");
static_assert(offsetof(SQVehicleComponent_SetHealth, NewHealth) == 0x000000, "Member 'SQVehicleComponent_SetHealth::NewHealth' has a wrong offset!");

// Function Squad.SQVehicleComponent.GetHealth
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleComponent_GetHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleComponent_GetHealth) == 0x000004, "Wrong alignment on SQVehicleComponent_GetHealth");
static_assert(sizeof(SQVehicleComponent_GetHealth) == 0x000004, "Wrong size on SQVehicleComponent_GetHealth");
static_assert(offsetof(SQVehicleComponent_GetHealth, ReturnValue) == 0x000000, "Member 'SQVehicleComponent_GetHealth::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleComponent.GetMaximumHealth
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleComponent_GetMaximumHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleComponent_GetMaximumHealth) == 0x000004, "Wrong alignment on SQVehicleComponent_GetMaximumHealth");
static_assert(sizeof(SQVehicleComponent_GetMaximumHealth) == 0x000004, "Wrong size on SQVehicleComponent_GetMaximumHealth");
static_assert(offsetof(SQVehicleComponent_GetMaximumHealth, ReturnValue) == 0x000000, "Member 'SQVehicleComponent_GetMaximumHealth::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleComponent.GetNormalizedHealth
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleComponent_GetNormalizedHealth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleComponent_GetNormalizedHealth) == 0x000004, "Wrong alignment on SQVehicleComponent_GetNormalizedHealth");
static_assert(sizeof(SQVehicleComponent_GetNormalizedHealth) == 0x000004, "Wrong size on SQVehicleComponent_GetNormalizedHealth");
static_assert(offsetof(SQVehicleComponent_GetNormalizedHealth, ReturnValue) == 0x000000, "Member 'SQVehicleComponent_GetNormalizedHealth::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleComponent.GetPreviousVehicleComponentState
// 0x0001 (0x0001 - 0x0000)
struct SQVehicleComponent_GetPreviousVehicleComponentState final
{
public:
	ESQVehicleComponentStates                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleComponent_GetPreviousVehicleComponentState) == 0x000001, "Wrong alignment on SQVehicleComponent_GetPreviousVehicleComponentState");
static_assert(sizeof(SQVehicleComponent_GetPreviousVehicleComponentState) == 0x000001, "Wrong size on SQVehicleComponent_GetPreviousVehicleComponentState");
static_assert(offsetof(SQVehicleComponent_GetPreviousVehicleComponentState, ReturnValue) == 0x000000, "Member 'SQVehicleComponent_GetPreviousVehicleComponentState::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleComponent.GetVehicleComponentState
// 0x0001 (0x0001 - 0x0000)
struct SQVehicleComponent_GetVehicleComponentState final
{
public:
	ESQVehicleComponentStates                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleComponent_GetVehicleComponentState) == 0x000001, "Wrong alignment on SQVehicleComponent_GetVehicleComponentState");
static_assert(sizeof(SQVehicleComponent_GetVehicleComponentState) == 0x000001, "Wrong size on SQVehicleComponent_GetVehicleComponentState");
static_assert(offsetof(SQVehicleComponent_GetVehicleComponentState, ReturnValue) == 0x000000, "Member 'SQVehicleComponent_GetVehicleComponentState::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleComponent.IsDestroyed
// 0x0001 (0x0001 - 0x0000)
struct SQVehicleComponent_IsDestroyed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleComponent_IsDestroyed) == 0x000001, "Wrong alignment on SQVehicleComponent_IsDestroyed");
static_assert(sizeof(SQVehicleComponent_IsDestroyed) == 0x000001, "Wrong size on SQVehicleComponent_IsDestroyed");
static_assert(offsetof(SQVehicleComponent_IsDestroyed, ReturnValue) == 0x000000, "Member 'SQVehicleComponent_IsDestroyed::ReturnValue' has a wrong offset!");

// Function Squad.SQDriveTrainComponent.OnDriveTrainComponentBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct SQDriveTrainComponent_OnDriveTrainComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115B[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQDriveTrainComponent_OnDriveTrainComponentBeginOverlap) == 0x000008, "Wrong alignment on SQDriveTrainComponent_OnDriveTrainComponentBeginOverlap");
static_assert(sizeof(SQDriveTrainComponent_OnDriveTrainComponentBeginOverlap) == 0x0000A8, "Wrong size on SQDriveTrainComponent_OnDriveTrainComponentBeginOverlap");
static_assert(offsetof(SQDriveTrainComponent_OnDriveTrainComponentBeginOverlap, OverlappedComponent) == 0x000000, "Member 'SQDriveTrainComponent_OnDriveTrainComponentBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SQDriveTrainComponent_OnDriveTrainComponentBeginOverlap, OtherActor) == 0x000008, "Member 'SQDriveTrainComponent_OnDriveTrainComponentBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SQDriveTrainComponent_OnDriveTrainComponentBeginOverlap, OtherComp) == 0x000010, "Member 'SQDriveTrainComponent_OnDriveTrainComponentBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(SQDriveTrainComponent_OnDriveTrainComponentBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'SQDriveTrainComponent_OnDriveTrainComponentBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SQDriveTrainComponent_OnDriveTrainComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'SQDriveTrainComponent_OnDriveTrainComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(SQDriveTrainComponent_OnDriveTrainComponentBeginOverlap, SweepResult) == 0x000020, "Member 'SQDriveTrainComponent_OnDriveTrainComponentBeginOverlap::SweepResult' has a wrong offset!");

// Function Squad.SQDriveTrainComponent.OnDriveTrainComponentEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct SQDriveTrainComponent_OnDriveTrainComponentEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115C[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQDriveTrainComponent_OnDriveTrainComponentEndOverlap) == 0x000008, "Wrong alignment on SQDriveTrainComponent_OnDriveTrainComponentEndOverlap");
static_assert(sizeof(SQDriveTrainComponent_OnDriveTrainComponentEndOverlap) == 0x000020, "Wrong size on SQDriveTrainComponent_OnDriveTrainComponentEndOverlap");
static_assert(offsetof(SQDriveTrainComponent_OnDriveTrainComponentEndOverlap, OverlappedComponent) == 0x000000, "Member 'SQDriveTrainComponent_OnDriveTrainComponentEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SQDriveTrainComponent_OnDriveTrainComponentEndOverlap, OtherActor) == 0x000008, "Member 'SQDriveTrainComponent_OnDriveTrainComponentEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SQDriveTrainComponent_OnDriveTrainComponentEndOverlap, OtherComp) == 0x000010, "Member 'SQDriveTrainComponent_OnDriveTrainComponentEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(SQDriveTrainComponent_OnDriveTrainComponentEndOverlap, OtherBodyIndex) == 0x000018, "Member 'SQDriveTrainComponent_OnDriveTrainComponentEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function Squad.SQEditorPlaySettings.GetEditorPlaySettings
// 0x0008 (0x0008 - 0x0000)
struct SQEditorPlaySettings_GetEditorPlaySettings final
{
public:
	class USQEditorPlaySettings*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEditorPlaySettings_GetEditorPlaySettings) == 0x000008, "Wrong alignment on SQEditorPlaySettings_GetEditorPlaySettings");
static_assert(sizeof(SQEditorPlaySettings_GetEditorPlaySettings) == 0x000008, "Wrong size on SQEditorPlaySettings_GetEditorPlaySettings");
static_assert(offsetof(SQEditorPlaySettings_GetEditorPlaySettings, ReturnValue) == 0x000000, "Member 'SQEditorPlaySettings_GetEditorPlaySettings::ReturnValue' has a wrong offset!");

// Function Squad.SQEditorPlaySettings.RemoveCustomOption
// 0x0010 (0x0010 - 0x0000)
struct SQEditorPlaySettings_RemoveCustomOption final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEditorPlaySettings_RemoveCustomOption) == 0x000008, "Wrong alignment on SQEditorPlaySettings_RemoveCustomOption");
static_assert(sizeof(SQEditorPlaySettings_RemoveCustomOption) == 0x000010, "Wrong size on SQEditorPlaySettings_RemoveCustomOption");
static_assert(offsetof(SQEditorPlaySettings_RemoveCustomOption, Key) == 0x000000, "Member 'SQEditorPlaySettings_RemoveCustomOption::Key' has a wrong offset!");

// Function Squad.SQEditorPlaySettings.SetCustomOption
// 0x0020 (0x0020 - 0x0000)
struct SQEditorPlaySettings_SetCustomOption final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEditorPlaySettings_SetCustomOption) == 0x000008, "Wrong alignment on SQEditorPlaySettings_SetCustomOption");
static_assert(sizeof(SQEditorPlaySettings_SetCustomOption) == 0x000020, "Wrong size on SQEditorPlaySettings_SetCustomOption");
static_assert(offsetof(SQEditorPlaySettings_SetCustomOption, Key) == 0x000000, "Member 'SQEditorPlaySettings_SetCustomOption::Key' has a wrong offset!");
static_assert(offsetof(SQEditorPlaySettings_SetCustomOption, Value) == 0x000010, "Member 'SQEditorPlaySettings_SetCustomOption::Value' has a wrong offset!");

// Function Squad.SQEditorPlaySettings.TryGetEditorFactionSetup
// 0x0018 (0x0018 - 0x0000)
struct SQEditorPlaySettings_TryGetEditorFactionSetup final
{
public:
	ESQTeam                                       InTeam;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1160[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQFactionSetup*                        OutFactionSetup;                                   // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1161[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEditorPlaySettings_TryGetEditorFactionSetup) == 0x000008, "Wrong alignment on SQEditorPlaySettings_TryGetEditorFactionSetup");
static_assert(sizeof(SQEditorPlaySettings_TryGetEditorFactionSetup) == 0x000018, "Wrong size on SQEditorPlaySettings_TryGetEditorFactionSetup");
static_assert(offsetof(SQEditorPlaySettings_TryGetEditorFactionSetup, InTeam) == 0x000000, "Member 'SQEditorPlaySettings_TryGetEditorFactionSetup::InTeam' has a wrong offset!");
static_assert(offsetof(SQEditorPlaySettings_TryGetEditorFactionSetup, OutFactionSetup) == 0x000008, "Member 'SQEditorPlaySettings_TryGetEditorFactionSetup::OutFactionSetup' has a wrong offset!");
static_assert(offsetof(SQEditorPlaySettings_TryGetEditorFactionSetup, ReturnValue) == 0x000010, "Member 'SQEditorPlaySettings_TryGetEditorFactionSetup::ReturnValue' has a wrong offset!");

// Function Squad.SQEditorPlaySettings.TryGetEditorSQLayer
// 0x0010 (0x0010 - 0x0000)
struct SQEditorPlaySettings_TryGetEditorSQLayer final
{
public:
	class USQLayer*                               OutEditorLayer;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1162[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEditorPlaySettings_TryGetEditorSQLayer) == 0x000008, "Wrong alignment on SQEditorPlaySettings_TryGetEditorSQLayer");
static_assert(sizeof(SQEditorPlaySettings_TryGetEditorSQLayer) == 0x000010, "Wrong size on SQEditorPlaySettings_TryGetEditorSQLayer");
static_assert(offsetof(SQEditorPlaySettings_TryGetEditorSQLayer, OutEditorLayer) == 0x000000, "Member 'SQEditorPlaySettings_TryGetEditorSQLayer::OutEditorLayer' has a wrong offset!");
static_assert(offsetof(SQEditorPlaySettings_TryGetEditorSQLayer, ReturnValue) == 0x000008, "Member 'SQEditorPlaySettings_TryGetEditorSQLayer::ReturnValue' has a wrong offset!");

// Function Squad.SQEditorPlaySettings.TryGetEditorSQLevel
// 0x0010 (0x0010 - 0x0000)
struct SQEditorPlaySettings_TryGetEditorSQLevel final
{
public:
	class USQLevel*                               OutEditorLevel;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1163[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEditorPlaySettings_TryGetEditorSQLevel) == 0x000008, "Wrong alignment on SQEditorPlaySettings_TryGetEditorSQLevel");
static_assert(sizeof(SQEditorPlaySettings_TryGetEditorSQLevel) == 0x000010, "Wrong size on SQEditorPlaySettings_TryGetEditorSQLevel");
static_assert(offsetof(SQEditorPlaySettings_TryGetEditorSQLevel, OutEditorLevel) == 0x000000, "Member 'SQEditorPlaySettings_TryGetEditorSQLevel::OutEditorLevel' has a wrong offset!");
static_assert(offsetof(SQEditorPlaySettings_TryGetEditorSQLevel, ReturnValue) == 0x000008, "Member 'SQEditorPlaySettings_TryGetEditorSQLevel::ReturnValue' has a wrong offset!");

// Function Squad.SQEditorPlaySettings.HasLayerOverride
// 0x0001 (0x0001 - 0x0000)
struct SQEditorPlaySettings_HasLayerOverride final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEditorPlaySettings_HasLayerOverride) == 0x000001, "Wrong alignment on SQEditorPlaySettings_HasLayerOverride");
static_assert(sizeof(SQEditorPlaySettings_HasLayerOverride) == 0x000001, "Wrong size on SQEditorPlaySettings_HasLayerOverride");
static_assert(offsetof(SQEditorPlaySettings_HasLayerOverride, ReturnValue) == 0x000000, "Member 'SQEditorPlaySettings_HasLayerOverride::ReturnValue' has a wrong offset!");

// Function Squad.SQEmotePlayer.MulticastCancelEmote
// 0x0008 (0x0008 - 0x0000)
struct SQEmotePlayer_MulticastCancelEmote final
{
public:
	class FName                                   EmoteName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEmotePlayer_MulticastCancelEmote) == 0x000004, "Wrong alignment on SQEmotePlayer_MulticastCancelEmote");
static_assert(sizeof(SQEmotePlayer_MulticastCancelEmote) == 0x000008, "Wrong size on SQEmotePlayer_MulticastCancelEmote");
static_assert(offsetof(SQEmotePlayer_MulticastCancelEmote, EmoteName) == 0x000000, "Member 'SQEmotePlayer_MulticastCancelEmote::EmoteName' has a wrong offset!");

// Function Squad.SQEmotePlayer.MulticastPlayEmote
// 0x000C (0x000C - 0x0000)
struct SQEmotePlayer_MulticastPlayEmote final
{
public:
	class FName                                   EmoteName;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        RandomVal;                                         // 0x0008(0x0002)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1166[0x2];                                     // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEmotePlayer_MulticastPlayEmote) == 0x000004, "Wrong alignment on SQEmotePlayer_MulticastPlayEmote");
static_assert(sizeof(SQEmotePlayer_MulticastPlayEmote) == 0x00000C, "Wrong size on SQEmotePlayer_MulticastPlayEmote");
static_assert(offsetof(SQEmotePlayer_MulticastPlayEmote, EmoteName) == 0x000000, "Member 'SQEmotePlayer_MulticastPlayEmote::EmoteName' has a wrong offset!");
static_assert(offsetof(SQEmotePlayer_MulticastPlayEmote, RandomVal) == 0x000008, "Member 'SQEmotePlayer_MulticastPlayEmote::RandomVal' has a wrong offset!");

// Function Squad.SQEmotePlayer.CanPlayEmote
// 0x0010 (0x0010 - 0x0000)
struct SQEmotePlayer_CanPlayEmote final
{
public:
	const class USQEmotesData*                    Emote;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1167[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEmotePlayer_CanPlayEmote) == 0x000008, "Wrong alignment on SQEmotePlayer_CanPlayEmote");
static_assert(sizeof(SQEmotePlayer_CanPlayEmote) == 0x000010, "Wrong size on SQEmotePlayer_CanPlayEmote");
static_assert(offsetof(SQEmotePlayer_CanPlayEmote, Emote) == 0x000000, "Member 'SQEmotePlayer_CanPlayEmote::Emote' has a wrong offset!");
static_assert(offsetof(SQEmotePlayer_CanPlayEmote, ReturnValue) == 0x000008, "Member 'SQEmotePlayer_CanPlayEmote::ReturnValue' has a wrong offset!");

// Function Squad.SQEmotePlayer.CanShowEmotesWheel
// 0x0001 (0x0001 - 0x0000)
struct SQEmotePlayer_CanShowEmotesWheel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEmotePlayer_CanShowEmotesWheel) == 0x000001, "Wrong alignment on SQEmotePlayer_CanShowEmotesWheel");
static_assert(sizeof(SQEmotePlayer_CanShowEmotesWheel) == 0x000001, "Wrong size on SQEmotePlayer_CanShowEmotesWheel");
static_assert(offsetof(SQEmotePlayer_CanShowEmotesWheel, ReturnValue) == 0x000000, "Member 'SQEmotePlayer_CanShowEmotesWheel::ReturnValue' has a wrong offset!");

// Function Squad.SQEmotePlayer.GetRestrictionText
// 0x0018 (0x0018 - 0x0000)
struct SQEmotePlayer_GetRestrictionText final
{
public:
	const class USQEmotesData*                    Emote;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEmotePlayer_GetRestrictionText) == 0x000008, "Wrong alignment on SQEmotePlayer_GetRestrictionText");
static_assert(sizeof(SQEmotePlayer_GetRestrictionText) == 0x000018, "Wrong size on SQEmotePlayer_GetRestrictionText");
static_assert(offsetof(SQEmotePlayer_GetRestrictionText, Emote) == 0x000000, "Member 'SQEmotePlayer_GetRestrictionText::Emote' has a wrong offset!");
static_assert(offsetof(SQEmotePlayer_GetRestrictionText, ReturnValue) == 0x000008, "Member 'SQEmotePlayer_GetRestrictionText::ReturnValue' has a wrong offset!");

// Function Squad.SQEmotePlayer.IsEmotePlaying
// 0x0010 (0x0010 - 0x0000)
struct SQEmotePlayer_IsEmotePlaying final
{
public:
	const class USQEmotesData*                    Emote;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1168[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEmotePlayer_IsEmotePlaying) == 0x000008, "Wrong alignment on SQEmotePlayer_IsEmotePlaying");
static_assert(sizeof(SQEmotePlayer_IsEmotePlaying) == 0x000010, "Wrong size on SQEmotePlayer_IsEmotePlaying");
static_assert(offsetof(SQEmotePlayer_IsEmotePlaying, Emote) == 0x000000, "Member 'SQEmotePlayer_IsEmotePlaying::Emote' has a wrong offset!");
static_assert(offsetof(SQEmotePlayer_IsEmotePlaying, ReturnValue) == 0x000008, "Member 'SQEmotePlayer_IsEmotePlaying::ReturnValue' has a wrong offset!");

// Function Squad.SQLastingEffect.OnActorHitEvent
// 0x00A8 (0x00A8 - 0x0000)
struct SQLastingEffect_OnActorHitEvent final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x001C(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_116D[0x4];                                     // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQLastingEffect_OnActorHitEvent) == 0x000008, "Wrong alignment on SQLastingEffect_OnActorHitEvent");
static_assert(sizeof(SQLastingEffect_OnActorHitEvent) == 0x0000A8, "Wrong size on SQLastingEffect_OnActorHitEvent");
static_assert(offsetof(SQLastingEffect_OnActorHitEvent, SelfActor) == 0x000000, "Member 'SQLastingEffect_OnActorHitEvent::SelfActor' has a wrong offset!");
static_assert(offsetof(SQLastingEffect_OnActorHitEvent, OtherActor) == 0x000008, "Member 'SQLastingEffect_OnActorHitEvent::OtherActor' has a wrong offset!");
static_assert(offsetof(SQLastingEffect_OnActorHitEvent, NormalImpulse) == 0x000010, "Member 'SQLastingEffect_OnActorHitEvent::NormalImpulse' has a wrong offset!");
static_assert(offsetof(SQLastingEffect_OnActorHitEvent, Hit) == 0x00001C, "Member 'SQLastingEffect_OnActorHitEvent::Hit' has a wrong offset!");

// Function Squad.SQLastingEffect.OnDestroyedEvent
// 0x0008 (0x0008 - 0x0000)
struct SQLastingEffect_OnDestroyedEvent final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQLastingEffect_OnDestroyedEvent) == 0x000008, "Wrong alignment on SQLastingEffect_OnDestroyedEvent");
static_assert(sizeof(SQLastingEffect_OnDestroyedEvent) == 0x000008, "Wrong size on SQLastingEffect_OnDestroyedEvent");
static_assert(offsetof(SQLastingEffect_OnDestroyedEvent, DestroyedActor) == 0x000000, "Member 'SQLastingEffect_OnDestroyedEvent::DestroyedActor' has a wrong offset!");

// Function Squad.SQEmoteProp.SetPropData
// 0x0060 (0x0060 - 0x0000)
struct SQEmoteProp_SetPropData final
{
public:
	struct FSQEmotePropData                       InStructInfo;                                      // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEmoteProp_SetPropData) == 0x000008, "Wrong alignment on SQEmoteProp_SetPropData");
static_assert(sizeof(SQEmoteProp_SetPropData) == 0x000060, "Wrong size on SQEmoteProp_SetPropData");
static_assert(offsetof(SQEmoteProp_SetPropData, InStructInfo) == 0x000000, "Member 'SQEmoteProp_SetPropData::InStructInfo' has a wrong offset!");

// Function Squad.SQEmotesData.GetRestrictionsText
// 0x0010 (0x0010 - 0x0000)
struct SQEmotesData_GetRestrictionsText final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEmotesData_GetRestrictionsText) == 0x000008, "Wrong alignment on SQEmotesData_GetRestrictionsText");
static_assert(sizeof(SQEmotesData_GetRestrictionsText) == 0x000010, "Wrong size on SQEmotesData_GetRestrictionsText");
static_assert(offsetof(SQEmotesData_GetRestrictionsText, ReturnValue) == 0x000000, "Member 'SQEmotesData_GetRestrictionsText::ReturnValue' has a wrong offset!");

// Function Squad.SQEmoteItemWidget.IsNew
// 0x0001 (0x0001 - 0x0000)
struct SQEmoteItemWidget_IsNew final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEmoteItemWidget_IsNew) == 0x000001, "Wrong alignment on SQEmoteItemWidget_IsNew");
static_assert(sizeof(SQEmoteItemWidget_IsNew) == 0x000001, "Wrong size on SQEmoteItemWidget_IsNew");
static_assert(offsetof(SQEmoteItemWidget_IsNew, ReturnValue) == 0x000000, "Member 'SQEmoteItemWidget_IsNew::ReturnValue' has a wrong offset!");

// Function Squad.SQEmoteItemWidget.IsOwned
// 0x0001 (0x0001 - 0x0000)
struct SQEmoteItemWidget_IsOwned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEmoteItemWidget_IsOwned) == 0x000001, "Wrong alignment on SQEmoteItemWidget_IsOwned");
static_assert(sizeof(SQEmoteItemWidget_IsOwned) == 0x000001, "Wrong size on SQEmoteItemWidget_IsOwned");
static_assert(offsetof(SQEmoteItemWidget_IsOwned, ReturnValue) == 0x000000, "Member 'SQEmoteItemWidget_IsOwned::ReturnValue' has a wrong offset!");

// Function Squad.SQMap.UpdateTickZoom
// 0x000C (0x000C - 0x0000)
struct SQMap_UpdateTickZoom final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MapCoords;                                         // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMap_UpdateTickZoom) == 0x000004, "Wrong alignment on SQMap_UpdateTickZoom");
static_assert(sizeof(SQMap_UpdateTickZoom) == 0x00000C, "Wrong size on SQMap_UpdateTickZoom");
static_assert(offsetof(SQMap_UpdateTickZoom, DeltaTime) == 0x000000, "Member 'SQMap_UpdateTickZoom::DeltaTime' has a wrong offset!");
static_assert(offsetof(SQMap_UpdateTickZoom, MapCoords) == 0x000004, "Member 'SQMap_UpdateTickZoom::MapCoords' has a wrong offset!");

// Function Squad.SQMap.CalculatePathDistanceAndAngle
// 0x0018 (0x0018 - 0x0000)
struct SQMap_CalculatePathDistanceAndAngle final
{
public:
	struct FVector2D                              PointStart;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PointEnd;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMap_CalculatePathDistanceAndAngle) == 0x000004, "Wrong alignment on SQMap_CalculatePathDistanceAndAngle");
static_assert(sizeof(SQMap_CalculatePathDistanceAndAngle) == 0x000018, "Wrong size on SQMap_CalculatePathDistanceAndAngle");
static_assert(offsetof(SQMap_CalculatePathDistanceAndAngle, PointStart) == 0x000000, "Member 'SQMap_CalculatePathDistanceAndAngle::PointStart' has a wrong offset!");
static_assert(offsetof(SQMap_CalculatePathDistanceAndAngle, PointEnd) == 0x000008, "Member 'SQMap_CalculatePathDistanceAndAngle::PointEnd' has a wrong offset!");
static_assert(offsetof(SQMap_CalculatePathDistanceAndAngle, Distance) == 0x000010, "Member 'SQMap_CalculatePathDistanceAndAngle::Distance' has a wrong offset!");
static_assert(offsetof(SQMap_CalculatePathDistanceAndAngle, Angle) == 0x000014, "Member 'SQMap_CalculatePathDistanceAndAngle::Angle' has a wrong offset!");

// Function Squad.SQMap.GetCurrentTeam
// 0x0004 (0x0004 - 0x0000)
struct SQMap_GetCurrentTeam final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMap_GetCurrentTeam) == 0x000004, "Wrong alignment on SQMap_GetCurrentTeam");
static_assert(sizeof(SQMap_GetCurrentTeam) == 0x000004, "Wrong size on SQMap_GetCurrentTeam");
static_assert(offsetof(SQMap_GetCurrentTeam, ReturnValue) == 0x000000, "Member 'SQMap_GetCurrentTeam::ReturnValue' has a wrong offset!");

// Function Squad.SQMap.GetCursorNormalizedPos
// 0x0008 (0x0008 - 0x0000)
struct SQMap_GetCursorNormalizedPos final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMap_GetCursorNormalizedPos) == 0x000004, "Wrong alignment on SQMap_GetCursorNormalizedPos");
static_assert(sizeof(SQMap_GetCursorNormalizedPos) == 0x000008, "Wrong size on SQMap_GetCursorNormalizedPos");
static_assert(offsetof(SQMap_GetCursorNormalizedPos, ReturnValue) == 0x000000, "Member 'SQMap_GetCursorNormalizedPos::ReturnValue' has a wrong offset!");

// Function Squad.SQMap.GetCursorPos
// 0x0008 (0x0008 - 0x0000)
struct SQMap_GetCursorPos final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMap_GetCursorPos) == 0x000004, "Wrong alignment on SQMap_GetCursorPos");
static_assert(sizeof(SQMap_GetCursorPos) == 0x000008, "Wrong size on SQMap_GetCursorPos");
static_assert(offsetof(SQMap_GetCursorPos, ReturnValue) == 0x000000, "Member 'SQMap_GetCursorPos::ReturnValue' has a wrong offset!");

// Function Squad.SQMap.GetMajorGridSpacingInCM
// 0x0004 (0x0004 - 0x0000)
struct SQMap_GetMajorGridSpacingInCM final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMap_GetMajorGridSpacingInCM) == 0x000004, "Wrong alignment on SQMap_GetMajorGridSpacingInCM");
static_assert(sizeof(SQMap_GetMajorGridSpacingInCM) == 0x000004, "Wrong size on SQMap_GetMajorGridSpacingInCM");
static_assert(offsetof(SQMap_GetMajorGridSpacingInCM, ReturnValue) == 0x000000, "Member 'SQMap_GetMajorGridSpacingInCM::ReturnValue' has a wrong offset!");

// Function Squad.SQMap.GetMapDisplayName
// 0x0018 (0x0018 - 0x0000)
struct SQMap_GetMapDisplayName final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMap_GetMapDisplayName) == 0x000008, "Wrong alignment on SQMap_GetMapDisplayName");
static_assert(sizeof(SQMap_GetMapDisplayName) == 0x000018, "Wrong size on SQMap_GetMapDisplayName");
static_assert(offsetof(SQMap_GetMapDisplayName, ReturnValue) == 0x000000, "Member 'SQMap_GetMapDisplayName::ReturnValue' has a wrong offset!");

// Function Squad.SQMap.IsCursorOverMapPos
// 0x000C (0x000C - 0x0000)
struct SQMap_IsCursorOverMapPos final
{
public:
	bool                                          OutbIsOverMap;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_117F[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMap_IsCursorOverMapPos) == 0x000004, "Wrong alignment on SQMap_IsCursorOverMapPos");
static_assert(sizeof(SQMap_IsCursorOverMapPos) == 0x00000C, "Wrong size on SQMap_IsCursorOverMapPos");
static_assert(offsetof(SQMap_IsCursorOverMapPos, OutbIsOverMap) == 0x000000, "Member 'SQMap_IsCursorOverMapPos::OutbIsOverMap' has a wrong offset!");
static_assert(offsetof(SQMap_IsCursorOverMapPos, ReturnValue) == 0x000004, "Member 'SQMap_IsCursorOverMapPos::ReturnValue' has a wrong offset!");

// Function Squad.SQMap.IsInCameraMan
// 0x0010 (0x0010 - 0x0000)
struct SQMap_IsInCameraMan final
{
public:
	class ASQPlayerController*                    SQPlayerController;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1180[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQMap_IsInCameraMan) == 0x000008, "Wrong alignment on SQMap_IsInCameraMan");
static_assert(sizeof(SQMap_IsInCameraMan) == 0x000010, "Wrong size on SQMap_IsInCameraMan");
static_assert(offsetof(SQMap_IsInCameraMan, SQPlayerController) == 0x000000, "Member 'SQMap_IsInCameraMan::SQPlayerController' has a wrong offset!");
static_assert(offsetof(SQMap_IsInCameraMan, ReturnValue) == 0x000008, "Member 'SQMap_IsInCameraMan::ReturnValue' has a wrong offset!");

// Function Squad.SQMap.IsSquadLeader
// 0x0001 (0x0001 - 0x0000)
struct SQMap_IsSquadLeader final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMap_IsSquadLeader) == 0x000001, "Wrong alignment on SQMap_IsSquadLeader");
static_assert(sizeof(SQMap_IsSquadLeader) == 0x000001, "Wrong size on SQMap_IsSquadLeader");
static_assert(offsetof(SQMap_IsSquadLeader, ReturnValue) == 0x000000, "Member 'SQMap_IsSquadLeader::ReturnValue' has a wrong offset!");

// Function Squad.SQMap.TranslateInverseMapCoords
// 0x0010 (0x0010 - 0x0000)
struct SQMap_TranslateInverseMapCoords final
{
public:
	struct FVector2D                              InCoords;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMap_TranslateInverseMapCoords) == 0x000004, "Wrong alignment on SQMap_TranslateInverseMapCoords");
static_assert(sizeof(SQMap_TranslateInverseMapCoords) == 0x000010, "Wrong size on SQMap_TranslateInverseMapCoords");
static_assert(offsetof(SQMap_TranslateInverseMapCoords, InCoords) == 0x000000, "Member 'SQMap_TranslateInverseMapCoords::InCoords' has a wrong offset!");
static_assert(offsetof(SQMap_TranslateInverseMapCoords, ReturnValue) == 0x000008, "Member 'SQMap_TranslateInverseMapCoords::ReturnValue' has a wrong offset!");

// Function Squad.SQMap.TranslateMapCoords
// 0x0010 (0x0010 - 0x0000)
struct SQMap_TranslateMapCoords final
{
public:
	struct FVector2D                              InCoords;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMap_TranslateMapCoords) == 0x000004, "Wrong alignment on SQMap_TranslateMapCoords");
static_assert(sizeof(SQMap_TranslateMapCoords) == 0x000010, "Wrong size on SQMap_TranslateMapCoords");
static_assert(offsetof(SQMap_TranslateMapCoords, InCoords) == 0x000000, "Member 'SQMap_TranslateMapCoords::InCoords' has a wrong offset!");
static_assert(offsetof(SQMap_TranslateMapCoords, ReturnValue) == 0x000008, "Member 'SQMap_TranslateMapCoords::ReturnValue' has a wrong offset!");

// Function Squad.SQMap.TranslateMapCoordsIsInRange
// 0x0014 (0x0014 - 0x0000)
struct SQMap_TranslateMapCoordsIsInRange final
{
public:
	struct FVector2D                              InCoords;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutbIsInRange;                                     // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1181[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMap_TranslateMapCoordsIsInRange) == 0x000004, "Wrong alignment on SQMap_TranslateMapCoordsIsInRange");
static_assert(sizeof(SQMap_TranslateMapCoordsIsInRange) == 0x000014, "Wrong size on SQMap_TranslateMapCoordsIsInRange");
static_assert(offsetof(SQMap_TranslateMapCoordsIsInRange, InCoords) == 0x000000, "Member 'SQMap_TranslateMapCoordsIsInRange::InCoords' has a wrong offset!");
static_assert(offsetof(SQMap_TranslateMapCoordsIsInRange, OutbIsInRange) == 0x000008, "Member 'SQMap_TranslateMapCoordsIsInRange::OutbIsInRange' has a wrong offset!");
static_assert(offsetof(SQMap_TranslateMapCoordsIsInRange, ReturnValue) == 0x00000C, "Member 'SQMap_TranslateMapCoordsIsInRange::ReturnValue' has a wrong offset!");

// Function Squad.SQMap.TranslateMapPathBorderClamp
// 0x0014 (0x0014 - 0x0000)
struct SQMap_TranslateMapPathBorderClamp final
{
public:
	struct FVector2D                              InCoords;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutbIsClamped;                                     // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1182[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMap_TranslateMapPathBorderClamp) == 0x000004, "Wrong alignment on SQMap_TranslateMapPathBorderClamp");
static_assert(sizeof(SQMap_TranslateMapPathBorderClamp) == 0x000014, "Wrong size on SQMap_TranslateMapPathBorderClamp");
static_assert(offsetof(SQMap_TranslateMapPathBorderClamp, InCoords) == 0x000000, "Member 'SQMap_TranslateMapPathBorderClamp::InCoords' has a wrong offset!");
static_assert(offsetof(SQMap_TranslateMapPathBorderClamp, OutbIsClamped) == 0x000008, "Member 'SQMap_TranslateMapPathBorderClamp::OutbIsClamped' has a wrong offset!");
static_assert(offsetof(SQMap_TranslateMapPathBorderClamp, ReturnValue) == 0x00000C, "Member 'SQMap_TranslateMapPathBorderClamp::ReturnValue' has a wrong offset!");

// Function Squad.SQMap.TranslateMapToWorld
// 0x0014 (0x0014 - 0x0000)
struct SQMap_TranslateMapToWorld final
{
public:
	struct FVector2D                              InCoords;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMap_TranslateMapToWorld) == 0x000004, "Wrong alignment on SQMap_TranslateMapToWorld");
static_assert(sizeof(SQMap_TranslateMapToWorld) == 0x000014, "Wrong size on SQMap_TranslateMapToWorld");
static_assert(offsetof(SQMap_TranslateMapToWorld, InCoords) == 0x000000, "Member 'SQMap_TranslateMapToWorld::InCoords' has a wrong offset!");
static_assert(offsetof(SQMap_TranslateMapToWorld, ReturnValue) == 0x000008, "Member 'SQMap_TranslateMapToWorld::ReturnValue' has a wrong offset!");

// Function Squad.SQMap.TranslateMapToWorldRayTrace
// 0x0014 (0x0014 - 0x0000)
struct SQMap_TranslateMapToWorldRayTrace final
{
public:
	struct FVector2D                              InCoords;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMap_TranslateMapToWorldRayTrace) == 0x000004, "Wrong alignment on SQMap_TranslateMapToWorldRayTrace");
static_assert(sizeof(SQMap_TranslateMapToWorldRayTrace) == 0x000014, "Wrong size on SQMap_TranslateMapToWorldRayTrace");
static_assert(offsetof(SQMap_TranslateMapToWorldRayTrace, InCoords) == 0x000000, "Member 'SQMap_TranslateMapToWorldRayTrace::InCoords' has a wrong offset!");
static_assert(offsetof(SQMap_TranslateMapToWorldRayTrace, ReturnValue) == 0x000008, "Member 'SQMap_TranslateMapToWorldRayTrace::ReturnValue' has a wrong offset!");

// Function Squad.SQMap.TranslateWorldToMapAnchorsDirect
// 0x0014 (0x0014 - 0x0000)
struct SQMap_TranslateWorldToMapAnchorsDirect final
{
public:
	struct FVector                                InWorldCoords;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMap_TranslateWorldToMapAnchorsDirect) == 0x000004, "Wrong alignment on SQMap_TranslateWorldToMapAnchorsDirect");
static_assert(sizeof(SQMap_TranslateWorldToMapAnchorsDirect) == 0x000014, "Wrong size on SQMap_TranslateWorldToMapAnchorsDirect");
static_assert(offsetof(SQMap_TranslateWorldToMapAnchorsDirect, InWorldCoords) == 0x000000, "Member 'SQMap_TranslateWorldToMapAnchorsDirect::InWorldCoords' has a wrong offset!");
static_assert(offsetof(SQMap_TranslateWorldToMapAnchorsDirect, ReturnValue) == 0x00000C, "Member 'SQMap_TranslateWorldToMapAnchorsDirect::ReturnValue' has a wrong offset!");

// Function Squad.SQMap.TranslateWorldToMapZoom
// 0x0018 (0x0018 - 0x0000)
struct SQMap_TranslateWorldToMapZoom final
{
public:
	struct FVector                                InWorldCoords;                                     // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutbIsInRange;                                     // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1183[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMap_TranslateWorldToMapZoom) == 0x000004, "Wrong alignment on SQMap_TranslateWorldToMapZoom");
static_assert(sizeof(SQMap_TranslateWorldToMapZoom) == 0x000018, "Wrong size on SQMap_TranslateWorldToMapZoom");
static_assert(offsetof(SQMap_TranslateWorldToMapZoom, InWorldCoords) == 0x000000, "Member 'SQMap_TranslateWorldToMapZoom::InWorldCoords' has a wrong offset!");
static_assert(offsetof(SQMap_TranslateWorldToMapZoom, OutbIsInRange) == 0x00000C, "Member 'SQMap_TranslateWorldToMapZoom::OutbIsInRange' has a wrong offset!");
static_assert(offsetof(SQMap_TranslateWorldToMapZoom, ReturnValue) == 0x000010, "Member 'SQMap_TranslateWorldToMapZoom::ReturnValue' has a wrong offset!");

// Function Squad.SQEnvironmentInteraction.ApplyFrontProjection
// 0x0001 (0x0001 - 0x0000)
struct SQEnvironmentInteraction_ApplyFrontProjection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEnvironmentInteraction_ApplyFrontProjection) == 0x000001, "Wrong alignment on SQEnvironmentInteraction_ApplyFrontProjection");
static_assert(sizeof(SQEnvironmentInteraction_ApplyFrontProjection) == 0x000001, "Wrong size on SQEnvironmentInteraction_ApplyFrontProjection");
static_assert(offsetof(SQEnvironmentInteraction_ApplyFrontProjection, ReturnValue) == 0x000000, "Member 'SQEnvironmentInteraction_ApplyFrontProjection::ReturnValue' has a wrong offset!");

// Function Squad.SQEnvironmentInteraction.AreBiomeParamsValid
// 0x0001 (0x0001 - 0x0000)
struct SQEnvironmentInteraction_AreBiomeParamsValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEnvironmentInteraction_AreBiomeParamsValid) == 0x000001, "Wrong alignment on SQEnvironmentInteraction_AreBiomeParamsValid");
static_assert(sizeof(SQEnvironmentInteraction_AreBiomeParamsValid) == 0x000001, "Wrong size on SQEnvironmentInteraction_AreBiomeParamsValid");
static_assert(offsetof(SQEnvironmentInteraction_AreBiomeParamsValid, ReturnValue) == 0x000000, "Member 'SQEnvironmentInteraction_AreBiomeParamsValid::ReturnValue' has a wrong offset!");

// Function Squad.SQEnvironmentInteraction.ByteToFloat
// 0x0008 (0x0008 - 0x0000)
struct SQEnvironmentInteraction_ByteToFloat final
{
public:
	uint8                                         Input;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1187[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEnvironmentInteraction_ByteToFloat) == 0x000004, "Wrong alignment on SQEnvironmentInteraction_ByteToFloat");
static_assert(sizeof(SQEnvironmentInteraction_ByteToFloat) == 0x000008, "Wrong size on SQEnvironmentInteraction_ByteToFloat");
static_assert(offsetof(SQEnvironmentInteraction_ByteToFloat, Input) == 0x000000, "Member 'SQEnvironmentInteraction_ByteToFloat::Input' has a wrong offset!");
static_assert(offsetof(SQEnvironmentInteraction_ByteToFloat, ReturnValue) == 0x000004, "Member 'SQEnvironmentInteraction_ByteToFloat::ReturnValue' has a wrong offset!");

// Function Squad.SQEnvironmentInteraction.CanTrace
// 0x0001 (0x0001 - 0x0000)
struct SQEnvironmentInteraction_CanTrace final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEnvironmentInteraction_CanTrace) == 0x000001, "Wrong alignment on SQEnvironmentInteraction_CanTrace");
static_assert(sizeof(SQEnvironmentInteraction_CanTrace) == 0x000001, "Wrong size on SQEnvironmentInteraction_CanTrace");
static_assert(offsetof(SQEnvironmentInteraction_CanTrace, ReturnValue) == 0x000000, "Member 'SQEnvironmentInteraction_CanTrace::ReturnValue' has a wrong offset!");

// Function Squad.SQEnvironmentInteraction.FloatToByte
// 0x0008 (0x0008 - 0x0000)
struct SQEnvironmentInteraction_FloatToByte final
{
public:
	float                                         Input;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1188[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEnvironmentInteraction_FloatToByte) == 0x000004, "Wrong alignment on SQEnvironmentInteraction_FloatToByte");
static_assert(sizeof(SQEnvironmentInteraction_FloatToByte) == 0x000008, "Wrong size on SQEnvironmentInteraction_FloatToByte");
static_assert(offsetof(SQEnvironmentInteraction_FloatToByte, Input) == 0x000000, "Member 'SQEnvironmentInteraction_FloatToByte::Input' has a wrong offset!");
static_assert(offsetof(SQEnvironmentInteraction_FloatToByte, ReturnValue) == 0x000004, "Member 'SQEnvironmentInteraction_FloatToByte::ReturnValue' has a wrong offset!");

// Function Squad.SQEnvironmentInteraction.Initialize
// 0x0001 (0x0001 - 0x0000)
struct SQEnvironmentInteraction_Initialize final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQEnvironmentInteraction_Initialize) == 0x000001, "Wrong alignment on SQEnvironmentInteraction_Initialize");
static_assert(sizeof(SQEnvironmentInteraction_Initialize) == 0x000001, "Wrong size on SQEnvironmentInteraction_Initialize");
static_assert(offsetof(SQEnvironmentInteraction_Initialize, ReturnValue) == 0x000000, "Member 'SQEnvironmentInteraction_Initialize::ReturnValue' has a wrong offset!");

// Function Squad.SQEnvironmentInteraction.UpdateShaderValues
// 0x0008 (0x0008 - 0x0000)
struct SQEnvironmentInteraction_UpdateShaderValues final
{
public:
	float                                         NewStrength;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFront;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1189[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEnvironmentInteraction_UpdateShaderValues) == 0x000004, "Wrong alignment on SQEnvironmentInteraction_UpdateShaderValues");
static_assert(sizeof(SQEnvironmentInteraction_UpdateShaderValues) == 0x000008, "Wrong size on SQEnvironmentInteraction_UpdateShaderValues");
static_assert(offsetof(SQEnvironmentInteraction_UpdateShaderValues, NewStrength) == 0x000000, "Member 'SQEnvironmentInteraction_UpdateShaderValues::NewStrength' has a wrong offset!");
static_assert(offsetof(SQEnvironmentInteraction_UpdateShaderValues, IsFront) == 0x000004, "Member 'SQEnvironmentInteraction_UpdateShaderValues::IsFront' has a wrong offset!");

// Function Squad.SQMapMK2.UpdatePosition
// 0x0008 (0x0008 - 0x0000)
struct SQMapMK2_UpdatePosition final
{
public:
	struct FVector2D                              NewMapCoord;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapMK2_UpdatePosition) == 0x000004, "Wrong alignment on SQMapMK2_UpdatePosition");
static_assert(sizeof(SQMapMK2_UpdatePosition) == 0x000008, "Wrong size on SQMapMK2_UpdatePosition");
static_assert(offsetof(SQMapMK2_UpdatePosition, NewMapCoord) == 0x000000, "Member 'SQMapMK2_UpdatePosition::NewMapCoord' has a wrong offset!");

// Function Squad.SQFaction.TryGetFactionShortName
// 0x0020 (0x0020 - 0x0000)
struct SQFaction_TryGetFactionShortName final
{
public:
	class FText                                   OutName;                                           // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_118A[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQFaction_TryGetFactionShortName) == 0x000008, "Wrong alignment on SQFaction_TryGetFactionShortName");
static_assert(sizeof(SQFaction_TryGetFactionShortName) == 0x000020, "Wrong size on SQFaction_TryGetFactionShortName");
static_assert(offsetof(SQFaction_TryGetFactionShortName, OutName) == 0x000000, "Member 'SQFaction_TryGetFactionShortName::OutName' has a wrong offset!");
static_assert(offsetof(SQFaction_TryGetFactionShortName, ReturnValue) == 0x000018, "Member 'SQFaction_TryGetFactionShortName::ReturnValue' has a wrong offset!");

// Function Squad.SQFaction.TryGetFlagForFullScreen
// 0x0030 (0x0030 - 0x0000)
struct SQFaction_TryGetFlagForFullScreen final
{
public:
	TSoftObjectPtr<class UTexture2D>              OutTexture;                                        // 0x0000(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_118B[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQFaction_TryGetFlagForFullScreen) == 0x000008, "Wrong alignment on SQFaction_TryGetFlagForFullScreen");
static_assert(sizeof(SQFaction_TryGetFlagForFullScreen) == 0x000030, "Wrong size on SQFaction_TryGetFlagForFullScreen");
static_assert(offsetof(SQFaction_TryGetFlagForFullScreen, OutTexture) == 0x000000, "Member 'SQFaction_TryGetFlagForFullScreen::OutTexture' has a wrong offset!");
static_assert(offsetof(SQFaction_TryGetFlagForFullScreen, ReturnValue) == 0x000028, "Member 'SQFaction_TryGetFlagForFullScreen::ReturnValue' has a wrong offset!");

// Function Squad.SQFaction.TryGetFlagForMap
// 0x0030 (0x0030 - 0x0000)
struct SQFaction_TryGetFlagForMap final
{
public:
	TSoftObjectPtr<class UTexture2D>              OutTexture;                                        // 0x0000(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_118C[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQFaction_TryGetFlagForMap) == 0x000008, "Wrong alignment on SQFaction_TryGetFlagForMap");
static_assert(sizeof(SQFaction_TryGetFlagForMap) == 0x000030, "Wrong size on SQFaction_TryGetFlagForMap");
static_assert(offsetof(SQFaction_TryGetFlagForMap, OutTexture) == 0x000000, "Member 'SQFaction_TryGetFlagForMap::OutTexture' has a wrong offset!");
static_assert(offsetof(SQFaction_TryGetFlagForMap, ReturnValue) == 0x000028, "Member 'SQFaction_TryGetFlagForMap::ReturnValue' has a wrong offset!");

// Function Squad.SQFaction.TryGetRallyPointMesh
// 0x0038 (0x0038 - 0x0000)
struct SQFaction_TryGetRallyPointMesh final
{
public:
	class USQLayer*                               Layer;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             OutMesh;                                           // 0x0008(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_118D[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQFaction_TryGetRallyPointMesh) == 0x000008, "Wrong alignment on SQFaction_TryGetRallyPointMesh");
static_assert(sizeof(SQFaction_TryGetRallyPointMesh) == 0x000038, "Wrong size on SQFaction_TryGetRallyPointMesh");
static_assert(offsetof(SQFaction_TryGetRallyPointMesh, Layer) == 0x000000, "Member 'SQFaction_TryGetRallyPointMesh::Layer' has a wrong offset!");
static_assert(offsetof(SQFaction_TryGetRallyPointMesh, OutMesh) == 0x000008, "Member 'SQFaction_TryGetRallyPointMesh::OutMesh' has a wrong offset!");
static_assert(offsetof(SQFaction_TryGetRallyPointMesh, ReturnValue) == 0x000030, "Member 'SQFaction_TryGetRallyPointMesh::ReturnValue' has a wrong offset!");

// Function Squad.SQTeamActor.SetTeam
// 0x0001 (0x0001 - 0x0000)
struct SQTeamActor_SetTeam final
{
public:
	ESQTeam                                       Param_Team;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamActor_SetTeam) == 0x000001, "Wrong alignment on SQTeamActor_SetTeam");
static_assert(sizeof(SQTeamActor_SetTeam) == 0x000001, "Wrong size on SQTeamActor_SetTeam");
static_assert(offsetof(SQTeamActor_SetTeam, Param_Team) == 0x000000, "Member 'SQTeamActor_SetTeam::Param_Team' has a wrong offset!");

// Function Squad.SQTeamActor.GetTeam
// 0x0001 (0x0001 - 0x0000)
struct SQTeamActor_GetTeam final
{
public:
	ESQTeam                                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamActor_GetTeam) == 0x000001, "Wrong alignment on SQTeamActor_GetTeam");
static_assert(sizeof(SQTeamActor_GetTeam) == 0x000001, "Wrong size on SQTeamActor_GetTeam");
static_assert(offsetof(SQTeamActor_GetTeam, ReturnValue) == 0x000000, "Member 'SQTeamActor_GetTeam::ReturnValue' has a wrong offset!");

// Function Squad.SQFactionSetup.CanPlayAgainst
// 0x0010 (0x0010 - 0x0000)
struct SQFactionSetup_CanPlayAgainst final
{
public:
	const class USQFactionSetup*                  OtherFaction;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1193[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQFactionSetup_CanPlayAgainst) == 0x000008, "Wrong alignment on SQFactionSetup_CanPlayAgainst");
static_assert(sizeof(SQFactionSetup_CanPlayAgainst) == 0x000010, "Wrong size on SQFactionSetup_CanPlayAgainst");
static_assert(offsetof(SQFactionSetup_CanPlayAgainst, OtherFaction) == 0x000000, "Member 'SQFactionSetup_CanPlayAgainst::OtherFaction' has a wrong offset!");
static_assert(offsetof(SQFactionSetup_CanPlayAgainst, ReturnValue) == 0x000008, "Member 'SQFactionSetup_CanPlayAgainst::ReturnValue' has a wrong offset!");

// Function Squad.SQFactionSetup.GetFactionTypeName
// 0x0008 (0x0008 - 0x0000)
struct SQFactionSetup_GetFactionTypeName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFactionSetup_GetFactionTypeName) == 0x000004, "Wrong alignment on SQFactionSetup_GetFactionTypeName");
static_assert(sizeof(SQFactionSetup_GetFactionTypeName) == 0x000008, "Wrong size on SQFactionSetup_GetFactionTypeName");
static_assert(offsetof(SQFactionSetup_GetFactionTypeName, ReturnValue) == 0x000000, "Member 'SQFactionSetup_GetFactionTypeName::ReturnValue' has a wrong offset!");

// Function Squad.SQHealingEquipableItem.OnRep_HealedTarget
// 0x0008 (0x0008 - 0x0000)
struct SQHealingEquipableItem_OnRep_HealedTarget final
{
public:
	class ASQSoldier*                             PreviousHealedTarget;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHealingEquipableItem_OnRep_HealedTarget) == 0x000008, "Wrong alignment on SQHealingEquipableItem_OnRep_HealedTarget");
static_assert(sizeof(SQHealingEquipableItem_OnRep_HealedTarget) == 0x000008, "Wrong size on SQHealingEquipableItem_OnRep_HealedTarget");
static_assert(offsetof(SQHealingEquipableItem_OnRep_HealedTarget, PreviousHealedTarget) == 0x000000, "Member 'SQHealingEquipableItem_OnRep_HealedTarget::PreviousHealedTarget' has a wrong offset!");

// Function Squad.SQMapBoundary.CalcKillTimestamp
// 0x0010 (0x0010 - 0x0000)
struct SQMapBoundary_CalcKillTimestamp final
{
public:
	TSubclassOf<class UObject>                    Param_Class;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1197[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQMapBoundary_CalcKillTimestamp) == 0x000008, "Wrong alignment on SQMapBoundary_CalcKillTimestamp");
static_assert(sizeof(SQMapBoundary_CalcKillTimestamp) == 0x000010, "Wrong size on SQMapBoundary_CalcKillTimestamp");
static_assert(offsetof(SQMapBoundary_CalcKillTimestamp, Param_Class) == 0x000000, "Member 'SQMapBoundary_CalcKillTimestamp::Param_Class' has a wrong offset!");
static_assert(offsetof(SQMapBoundary_CalcKillTimestamp, ReturnValue) == 0x000008, "Member 'SQMapBoundary_CalcKillTimestamp::ReturnValue' has a wrong offset!");

// Function Squad.SQMapBoundary.FindKillTime
// 0x0010 (0x0010 - 0x0000)
struct SQMapBoundary_FindKillTime final
{
public:
	TSubclassOf<class UObject>                    Param_Class;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1198[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQMapBoundary_FindKillTime) == 0x000008, "Wrong alignment on SQMapBoundary_FindKillTime");
static_assert(sizeof(SQMapBoundary_FindKillTime) == 0x000010, "Wrong size on SQMapBoundary_FindKillTime");
static_assert(offsetof(SQMapBoundary_FindKillTime, Param_Class) == 0x000000, "Member 'SQMapBoundary_FindKillTime::Param_Class' has a wrong offset!");
static_assert(offsetof(SQMapBoundary_FindKillTime, ReturnValue) == 0x000008, "Member 'SQMapBoundary_FindKillTime::ReturnValue' has a wrong offset!");

// Function Squad.SQWeapon_Effects.InterpRecoil
// 0x0004 (0x0004 - 0x0000)
struct SQWeapon_Effects_InterpRecoil final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeapon_Effects_InterpRecoil) == 0x000004, "Wrong alignment on SQWeapon_Effects_InterpRecoil");
static_assert(sizeof(SQWeapon_Effects_InterpRecoil) == 0x000004, "Wrong size on SQWeapon_Effects_InterpRecoil");
static_assert(offsetof(SQWeapon_Effects_InterpRecoil, Value) == 0x000000, "Member 'SQWeapon_Effects_InterpRecoil::Value' has a wrong offset!");

// Function Squad.SQVehicleWeapon.SoldierEntersVehicle
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleWeapon_SoldierEntersVehicle final
{
public:
	class ASQSoldier*                             Soldier;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleWeapon_SoldierEntersVehicle) == 0x000008, "Wrong alignment on SQVehicleWeapon_SoldierEntersVehicle");
static_assert(sizeof(SQVehicleWeapon_SoldierEntersVehicle) == 0x000008, "Wrong size on SQVehicleWeapon_SoldierEntersVehicle");
static_assert(offsetof(SQVehicleWeapon_SoldierEntersVehicle, Soldier) == 0x000000, "Member 'SQVehicleWeapon_SoldierEntersVehicle::Soldier' has a wrong offset!");

// Function Squad.SQVehicleWeapon.SoldierLeavesVehicle
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleWeapon_SoldierLeavesVehicle final
{
public:
	class ASQSoldier*                             Soldier;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleWeapon_SoldierLeavesVehicle) == 0x000008, "Wrong alignment on SQVehicleWeapon_SoldierLeavesVehicle");
static_assert(sizeof(SQVehicleWeapon_SoldierLeavesVehicle) == 0x000008, "Wrong size on SQVehicleWeapon_SoldierLeavesVehicle");
static_assert(offsetof(SQVehicleWeapon_SoldierLeavesVehicle, Soldier) == 0x000000, "Member 'SQVehicleWeapon_SoldierLeavesVehicle::Soldier' has a wrong offset!");

// Function Squad.SQVehicleWeapon.GetOwnerSeat
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleWeapon_GetOwnerSeat final
{
public:
	class ASQVehicleSeat*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleWeapon_GetOwnerSeat) == 0x000008, "Wrong alignment on SQVehicleWeapon_GetOwnerSeat");
static_assert(sizeof(SQVehicleWeapon_GetOwnerSeat) == 0x000008, "Wrong size on SQVehicleWeapon_GetOwnerSeat");
static_assert(offsetof(SQVehicleWeapon_GetOwnerSeat, ReturnValue) == 0x000000, "Member 'SQVehicleWeapon_GetOwnerSeat::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleWeapon.GetSoldier
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleWeapon_GetSoldier final
{
public:
	class ASQSoldier*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleWeapon_GetSoldier) == 0x000008, "Wrong alignment on SQVehicleWeapon_GetSoldier");
static_assert(sizeof(SQVehicleWeapon_GetSoldier) == 0x000008, "Wrong size on SQVehicleWeapon_GetSoldier");
static_assert(offsetof(SQVehicleWeapon_GetSoldier, ReturnValue) == 0x000000, "Member 'SQVehicleWeapon_GetSoldier::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleWeapon.GetWeaponRotation
// 0x000C (0x000C - 0x0000)
struct SQVehicleWeapon_GetWeaponRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleWeapon_GetWeaponRotation) == 0x000004, "Wrong alignment on SQVehicleWeapon_GetWeaponRotation");
static_assert(sizeof(SQVehicleWeapon_GetWeaponRotation) == 0x00000C, "Wrong size on SQVehicleWeapon_GetWeaponRotation");
static_assert(offsetof(SQVehicleWeapon_GetWeaponRotation, ReturnValue) == 0x000000, "Member 'SQVehicleWeapon_GetWeaponRotation::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleSmokeGenerator.SetupParticleSystem
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleSmokeGenerator_SetupParticleSystem final
{
public:
	class AActor*                                 OwnerActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleSmokeGenerator_SetupParticleSystem) == 0x000008, "Wrong alignment on SQVehicleSmokeGenerator_SetupParticleSystem");
static_assert(sizeof(SQVehicleSmokeGenerator_SetupParticleSystem) == 0x000008, "Wrong size on SQVehicleSmokeGenerator_SetupParticleSystem");
static_assert(offsetof(SQVehicleSmokeGenerator_SetupParticleSystem, OwnerActor) == 0x000000, "Member 'SQVehicleSmokeGenerator_SetupParticleSystem::OwnerActor' has a wrong offset!");

// Function Squad.SQFindSessionsCallbackProxy.GetAnticheatProtected
// 0x0110 (0x0110 - 0x0000)
struct SQFindSessionsCallbackProxy_GetAnticheatProtected final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0108(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A6[0x7];                                     // 0x0109(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQFindSessionsCallbackProxy_GetAnticheatProtected) == 0x000008, "Wrong alignment on SQFindSessionsCallbackProxy_GetAnticheatProtected");
static_assert(sizeof(SQFindSessionsCallbackProxy_GetAnticheatProtected) == 0x000110, "Wrong size on SQFindSessionsCallbackProxy_GetAnticheatProtected");
static_assert(offsetof(SQFindSessionsCallbackProxy_GetAnticheatProtected, Result) == 0x000000, "Member 'SQFindSessionsCallbackProxy_GetAnticheatProtected::Result' has a wrong offset!");
static_assert(offsetof(SQFindSessionsCallbackProxy_GetAnticheatProtected, ReturnValue) == 0x000108, "Member 'SQFindSessionsCallbackProxy_GetAnticheatProtected::ReturnValue' has a wrong offset!");

// Function Squad.SQFindSessionsCallbackProxy.GetCurrentPlayers
// 0x0110 (0x0110 - 0x0000)
struct SQFindSessionsCallbackProxy_GetCurrentPlayers final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0108(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A7[0x4];                                     // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQFindSessionsCallbackProxy_GetCurrentPlayers) == 0x000008, "Wrong alignment on SQFindSessionsCallbackProxy_GetCurrentPlayers");
static_assert(sizeof(SQFindSessionsCallbackProxy_GetCurrentPlayers) == 0x000110, "Wrong size on SQFindSessionsCallbackProxy_GetCurrentPlayers");
static_assert(offsetof(SQFindSessionsCallbackProxy_GetCurrentPlayers, Result) == 0x000000, "Member 'SQFindSessionsCallbackProxy_GetCurrentPlayers::Result' has a wrong offset!");
static_assert(offsetof(SQFindSessionsCallbackProxy_GetCurrentPlayers, ReturnValue) == 0x000108, "Member 'SQFindSessionsCallbackProxy_GetCurrentPlayers::ReturnValue' has a wrong offset!");

// Function Squad.SQFindSessionsCallbackProxy.GetGameMode
// 0x0118 (0x0118 - 0x0000)
struct SQFindSessionsCallbackProxy_GetGameMode final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0108(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFindSessionsCallbackProxy_GetGameMode) == 0x000008, "Wrong alignment on SQFindSessionsCallbackProxy_GetGameMode");
static_assert(sizeof(SQFindSessionsCallbackProxy_GetGameMode) == 0x000118, "Wrong size on SQFindSessionsCallbackProxy_GetGameMode");
static_assert(offsetof(SQFindSessionsCallbackProxy_GetGameMode, Result) == 0x000000, "Member 'SQFindSessionsCallbackProxy_GetGameMode::Result' has a wrong offset!");
static_assert(offsetof(SQFindSessionsCallbackProxy_GetGameMode, ReturnValue) == 0x000108, "Member 'SQFindSessionsCallbackProxy_GetGameMode::ReturnValue' has a wrong offset!");

// Function Squad.SQFindSessionsCallbackProxy.GetGameVersion
// 0x0118 (0x0118 - 0x0000)
struct SQFindSessionsCallbackProxy_GetGameVersion final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0108(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFindSessionsCallbackProxy_GetGameVersion) == 0x000008, "Wrong alignment on SQFindSessionsCallbackProxy_GetGameVersion");
static_assert(sizeof(SQFindSessionsCallbackProxy_GetGameVersion) == 0x000118, "Wrong size on SQFindSessionsCallbackProxy_GetGameVersion");
static_assert(offsetof(SQFindSessionsCallbackProxy_GetGameVersion, Result) == 0x000000, "Member 'SQFindSessionsCallbackProxy_GetGameVersion::Result' has a wrong offset!");
static_assert(offsetof(SQFindSessionsCallbackProxy_GetGameVersion, ReturnValue) == 0x000108, "Member 'SQFindSessionsCallbackProxy_GetGameVersion::ReturnValue' has a wrong offset!");

// Function Squad.SQFindSessionsCallbackProxy.GetLicensedServer
// 0x0118 (0x0118 - 0x0000)
struct SQFindSessionsCallbackProxy_GetLicensedServer final
{
public:
	class UObject*                                Param_WorldContextObject;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlueprintSessionResult                Result;                                            // 0x0008(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A8[0x7];                                     // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQFindSessionsCallbackProxy_GetLicensedServer) == 0x000008, "Wrong alignment on SQFindSessionsCallbackProxy_GetLicensedServer");
static_assert(sizeof(SQFindSessionsCallbackProxy_GetLicensedServer) == 0x000118, "Wrong size on SQFindSessionsCallbackProxy_GetLicensedServer");
static_assert(offsetof(SQFindSessionsCallbackProxy_GetLicensedServer, Param_WorldContextObject) == 0x000000, "Member 'SQFindSessionsCallbackProxy_GetLicensedServer::Param_WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQFindSessionsCallbackProxy_GetLicensedServer, Result) == 0x000008, "Member 'SQFindSessionsCallbackProxy_GetLicensedServer::Result' has a wrong offset!");
static_assert(offsetof(SQFindSessionsCallbackProxy_GetLicensedServer, ReturnValue) == 0x000110, "Member 'SQFindSessionsCallbackProxy_GetLicensedServer::ReturnValue' has a wrong offset!");

// Function Squad.SQFindSessionsCallbackProxy.GetLicenseID
// 0x0118 (0x0118 - 0x0000)
struct SQFindSessionsCallbackProxy_GetLicenseID final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0108(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFindSessionsCallbackProxy_GetLicenseID) == 0x000008, "Wrong alignment on SQFindSessionsCallbackProxy_GetLicenseID");
static_assert(sizeof(SQFindSessionsCallbackProxy_GetLicenseID) == 0x000118, "Wrong size on SQFindSessionsCallbackProxy_GetLicenseID");
static_assert(offsetof(SQFindSessionsCallbackProxy_GetLicenseID, Result) == 0x000000, "Member 'SQFindSessionsCallbackProxy_GetLicenseID::Result' has a wrong offset!");
static_assert(offsetof(SQFindSessionsCallbackProxy_GetLicenseID, ReturnValue) == 0x000108, "Member 'SQFindSessionsCallbackProxy_GetLicenseID::ReturnValue' has a wrong offset!");

// Function Squad.SQFindSessionsCallbackProxy.GetMapName
// 0x0118 (0x0118 - 0x0000)
struct SQFindSessionsCallbackProxy_GetMapName final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0108(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFindSessionsCallbackProxy_GetMapName) == 0x000008, "Wrong alignment on SQFindSessionsCallbackProxy_GetMapName");
static_assert(sizeof(SQFindSessionsCallbackProxy_GetMapName) == 0x000118, "Wrong size on SQFindSessionsCallbackProxy_GetMapName");
static_assert(offsetof(SQFindSessionsCallbackProxy_GetMapName, Result) == 0x000000, "Member 'SQFindSessionsCallbackProxy_GetMapName::Result' has a wrong offset!");
static_assert(offsetof(SQFindSessionsCallbackProxy_GetMapName, ReturnValue) == 0x000108, "Member 'SQFindSessionsCallbackProxy_GetMapName::ReturnValue' has a wrong offset!");

// Function Squad.SQFindSessionsCallbackProxy.GetMatchTimeout
// 0x0110 (0x0110 - 0x0000)
struct SQFindSessionsCallbackProxy_GetMatchTimeout final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0108(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A9[0x4];                                     // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQFindSessionsCallbackProxy_GetMatchTimeout) == 0x000008, "Wrong alignment on SQFindSessionsCallbackProxy_GetMatchTimeout");
static_assert(sizeof(SQFindSessionsCallbackProxy_GetMatchTimeout) == 0x000110, "Wrong size on SQFindSessionsCallbackProxy_GetMatchTimeout");
static_assert(offsetof(SQFindSessionsCallbackProxy_GetMatchTimeout, Result) == 0x000000, "Member 'SQFindSessionsCallbackProxy_GetMatchTimeout::Result' has a wrong offset!");
static_assert(offsetof(SQFindSessionsCallbackProxy_GetMatchTimeout, ReturnValue) == 0x000108, "Member 'SQFindSessionsCallbackProxy_GetMatchTimeout::ReturnValue' has a wrong offset!");

// Function Squad.SQFindSessionsCallbackProxy.GetMaxPlayers
// 0x0110 (0x0110 - 0x0000)
struct SQFindSessionsCallbackProxy_GetMaxPlayers final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0108(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11AA[0x4];                                     // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQFindSessionsCallbackProxy_GetMaxPlayers) == 0x000008, "Wrong alignment on SQFindSessionsCallbackProxy_GetMaxPlayers");
static_assert(sizeof(SQFindSessionsCallbackProxy_GetMaxPlayers) == 0x000110, "Wrong size on SQFindSessionsCallbackProxy_GetMaxPlayers");
static_assert(offsetof(SQFindSessionsCallbackProxy_GetMaxPlayers, Result) == 0x000000, "Member 'SQFindSessionsCallbackProxy_GetMaxPlayers::Result' has a wrong offset!");
static_assert(offsetof(SQFindSessionsCallbackProxy_GetMaxPlayers, ReturnValue) == 0x000108, "Member 'SQFindSessionsCallbackProxy_GetMaxPlayers::ReturnValue' has a wrong offset!");

// Function Squad.SQFindSessionsCallbackProxy.GetPasswordProtected
// 0x0110 (0x0110 - 0x0000)
struct SQFindSessionsCallbackProxy_GetPasswordProtected final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0108(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11AB[0x7];                                     // 0x0109(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQFindSessionsCallbackProxy_GetPasswordProtected) == 0x000008, "Wrong alignment on SQFindSessionsCallbackProxy_GetPasswordProtected");
static_assert(sizeof(SQFindSessionsCallbackProxy_GetPasswordProtected) == 0x000110, "Wrong size on SQFindSessionsCallbackProxy_GetPasswordProtected");
static_assert(offsetof(SQFindSessionsCallbackProxy_GetPasswordProtected, Result) == 0x000000, "Member 'SQFindSessionsCallbackProxy_GetPasswordProtected::Result' has a wrong offset!");
static_assert(offsetof(SQFindSessionsCallbackProxy_GetPasswordProtected, ReturnValue) == 0x000108, "Member 'SQFindSessionsCallbackProxy_GetPasswordProtected::ReturnValue' has a wrong offset!");

// Function Squad.SQFindSessionsCallbackProxy.GetPingInMs
// 0x0110 (0x0110 - 0x0000)
struct SQFindSessionsCallbackProxy_GetPingInMs final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0108(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11AC[0x4];                                     // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQFindSessionsCallbackProxy_GetPingInMs) == 0x000008, "Wrong alignment on SQFindSessionsCallbackProxy_GetPingInMs");
static_assert(sizeof(SQFindSessionsCallbackProxy_GetPingInMs) == 0x000110, "Wrong size on SQFindSessionsCallbackProxy_GetPingInMs");
static_assert(offsetof(SQFindSessionsCallbackProxy_GetPingInMs, Result) == 0x000000, "Member 'SQFindSessionsCallbackProxy_GetPingInMs::Result' has a wrong offset!");
static_assert(offsetof(SQFindSessionsCallbackProxy_GetPingInMs, ReturnValue) == 0x000108, "Member 'SQFindSessionsCallbackProxy_GetPingInMs::ReturnValue' has a wrong offset!");

// Function Squad.SQFindSessionsCallbackProxy.GetReservedSlots
// 0x0110 (0x0110 - 0x0000)
struct SQFindSessionsCallbackProxy_GetReservedSlots final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0108(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11AD[0x4];                                     // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQFindSessionsCallbackProxy_GetReservedSlots) == 0x000008, "Wrong alignment on SQFindSessionsCallbackProxy_GetReservedSlots");
static_assert(sizeof(SQFindSessionsCallbackProxy_GetReservedSlots) == 0x000110, "Wrong size on SQFindSessionsCallbackProxy_GetReservedSlots");
static_assert(offsetof(SQFindSessionsCallbackProxy_GetReservedSlots, Result) == 0x000000, "Member 'SQFindSessionsCallbackProxy_GetReservedSlots::Result' has a wrong offset!");
static_assert(offsetof(SQFindSessionsCallbackProxy_GetReservedSlots, ReturnValue) == 0x000108, "Member 'SQFindSessionsCallbackProxy_GetReservedSlots::ReturnValue' has a wrong offset!");

// Function Squad.SQFindSessionsCallbackProxy.GetSearchKeywords
// 0x0118 (0x0118 - 0x0000)
struct SQFindSessionsCallbackProxy_GetSearchKeywords final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0108(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFindSessionsCallbackProxy_GetSearchKeywords) == 0x000008, "Wrong alignment on SQFindSessionsCallbackProxy_GetSearchKeywords");
static_assert(sizeof(SQFindSessionsCallbackProxy_GetSearchKeywords) == 0x000118, "Wrong size on SQFindSessionsCallbackProxy_GetSearchKeywords");
static_assert(offsetof(SQFindSessionsCallbackProxy_GetSearchKeywords, Result) == 0x000000, "Member 'SQFindSessionsCallbackProxy_GetSearchKeywords::Result' has a wrong offset!");
static_assert(offsetof(SQFindSessionsCallbackProxy_GetSearchKeywords, ReturnValue) == 0x000108, "Member 'SQFindSessionsCallbackProxy_GetSearchKeywords::ReturnValue' has a wrong offset!");

// Function Squad.SQFindSessionsCallbackProxy.GetServerName
// 0x0118 (0x0118 - 0x0000)
struct SQFindSessionsCallbackProxy_GetServerName final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0108(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFindSessionsCallbackProxy_GetServerName) == 0x000008, "Wrong alignment on SQFindSessionsCallbackProxy_GetServerName");
static_assert(sizeof(SQFindSessionsCallbackProxy_GetServerName) == 0x000118, "Wrong size on SQFindSessionsCallbackProxy_GetServerName");
static_assert(offsetof(SQFindSessionsCallbackProxy_GetServerName, Result) == 0x000000, "Member 'SQFindSessionsCallbackProxy_GetServerName::Result' has a wrong offset!");
static_assert(offsetof(SQFindSessionsCallbackProxy_GetServerName, ReturnValue) == 0x000108, "Member 'SQFindSessionsCallbackProxy_GetServerName::ReturnValue' has a wrong offset!");

// Function Squad.SQFindSessionsCallbackProxy.GetSessionFlagStruct
// 0x0110 (0x0110 - 0x0000)
struct SQFindSessionsCallbackProxy_GetSessionFlagStruct final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSQSessionFlagStruct                   ReturnValue;                                       // 0x0108(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFindSessionsCallbackProxy_GetSessionFlagStruct) == 0x000008, "Wrong alignment on SQFindSessionsCallbackProxy_GetSessionFlagStruct");
static_assert(sizeof(SQFindSessionsCallbackProxy_GetSessionFlagStruct) == 0x000110, "Wrong size on SQFindSessionsCallbackProxy_GetSessionFlagStruct");
static_assert(offsetof(SQFindSessionsCallbackProxy_GetSessionFlagStruct, Result) == 0x000000, "Member 'SQFindSessionsCallbackProxy_GetSessionFlagStruct::Result' has a wrong offset!");
static_assert(offsetof(SQFindSessionsCallbackProxy_GetSessionFlagStruct, ReturnValue) == 0x000108, "Member 'SQFindSessionsCallbackProxy_GetSessionFlagStruct::ReturnValue' has a wrong offset!");

// Function Squad.SQFindSessionsCallbackProxy.IsSameServer
// 0x0218 (0x0218 - 0x0000)
struct SQFindSessionsCallbackProxy_IsSameServer final
{
public:
	struct FBlueprintSessionResult                ResultA;                                           // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FBlueprintSessionResult                ResultB;                                           // 0x0108(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0210(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11AE[0x7];                                     // 0x0211(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQFindSessionsCallbackProxy_IsSameServer) == 0x000008, "Wrong alignment on SQFindSessionsCallbackProxy_IsSameServer");
static_assert(sizeof(SQFindSessionsCallbackProxy_IsSameServer) == 0x000218, "Wrong size on SQFindSessionsCallbackProxy_IsSameServer");
static_assert(offsetof(SQFindSessionsCallbackProxy_IsSameServer, ResultA) == 0x000000, "Member 'SQFindSessionsCallbackProxy_IsSameServer::ResultA' has a wrong offset!");
static_assert(offsetof(SQFindSessionsCallbackProxy_IsSameServer, ResultB) == 0x000108, "Member 'SQFindSessionsCallbackProxy_IsSameServer::ResultB' has a wrong offset!");
static_assert(offsetof(SQFindSessionsCallbackProxy_IsSameServer, ReturnValue) == 0x000210, "Member 'SQFindSessionsCallbackProxy_IsSameServer::ReturnValue' has a wrong offset!");

// Function Squad.SQFindSessionsCallbackProxy.OnServerPingResponse
// 0x0110 (0x0110 - 0x0000)
struct SQFindSessionsCallbackProxy_OnServerPingResponse final
{
public:
	struct FBlueprintSessionResult                SessionResult;                                     // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Ping;                                              // 0x0108(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11AF[0x4];                                     // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQFindSessionsCallbackProxy_OnServerPingResponse) == 0x000008, "Wrong alignment on SQFindSessionsCallbackProxy_OnServerPingResponse");
static_assert(sizeof(SQFindSessionsCallbackProxy_OnServerPingResponse) == 0x000110, "Wrong size on SQFindSessionsCallbackProxy_OnServerPingResponse");
static_assert(offsetof(SQFindSessionsCallbackProxy_OnServerPingResponse, SessionResult) == 0x000000, "Member 'SQFindSessionsCallbackProxy_OnServerPingResponse::SessionResult' has a wrong offset!");
static_assert(offsetof(SQFindSessionsCallbackProxy_OnServerPingResponse, Ping) == 0x000108, "Member 'SQFindSessionsCallbackProxy_OnServerPingResponse::Ping' has a wrong offset!");

// Function Squad.SQFlagScoringRuleset.OnFlagStateChange
// 0x0010 (0x0010 - 0x0000)
struct SQFlagScoringRuleset_OnFlagStateChange final
{
public:
	class USQCaptureZoneComponent*                CaptureZone;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Team;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11B2[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQFlagScoringRuleset_OnFlagStateChange) == 0x000008, "Wrong alignment on SQFlagScoringRuleset_OnFlagStateChange");
static_assert(sizeof(SQFlagScoringRuleset_OnFlagStateChange) == 0x000010, "Wrong size on SQFlagScoringRuleset_OnFlagStateChange");
static_assert(offsetof(SQFlagScoringRuleset_OnFlagStateChange, CaptureZone) == 0x000000, "Member 'SQFlagScoringRuleset_OnFlagStateChange::CaptureZone' has a wrong offset!");
static_assert(offsetof(SQFlagScoringRuleset_OnFlagStateChange, Team) == 0x000008, "Member 'SQFlagScoringRuleset_OnFlagStateChange::Team' has a wrong offset!");

// Function Squad.SQVehicleTurret.IsCurrentWeaponInputEnabled
// 0x0001 (0x0001 - 0x0000)
struct SQVehicleTurret_IsCurrentWeaponInputEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleTurret_IsCurrentWeaponInputEnabled) == 0x000001, "Wrong alignment on SQVehicleTurret_IsCurrentWeaponInputEnabled");
static_assert(sizeof(SQVehicleTurret_IsCurrentWeaponInputEnabled) == 0x000001, "Wrong size on SQVehicleTurret_IsCurrentWeaponInputEnabled");
static_assert(offsetof(SQVehicleTurret_IsCurrentWeaponInputEnabled, ReturnValue) == 0x000000, "Member 'SQVehicleTurret_IsCurrentWeaponInputEnabled::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleTurret.GetTurretMovementComponent
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleTurret_GetTurretMovementComponent final
{
public:
	class USQTurretMovementComponent*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleTurret_GetTurretMovementComponent) == 0x000008, "Wrong alignment on SQVehicleTurret_GetTurretMovementComponent");
static_assert(sizeof(SQVehicleTurret_GetTurretMovementComponent) == 0x000008, "Wrong size on SQVehicleTurret_GetTurretMovementComponent");
static_assert(offsetof(SQVehicleTurret_GetTurretMovementComponent, ReturnValue) == 0x000000, "Member 'SQVehicleTurret_GetTurretMovementComponent::ReturnValue' has a wrong offset!");

// Function Squad.SQFoliageBender.GetSoldierLocationAndSpread
// 0x0018 (0x0018 - 0x0000)
struct SQFoliageBender_GetSoldierLocationAndSpread final
{
public:
	class ASQSoldier*                             Soldier;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpreadMultiplier;                                  // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFoliageBender_GetSoldierLocationAndSpread) == 0x000008, "Wrong alignment on SQFoliageBender_GetSoldierLocationAndSpread");
static_assert(sizeof(SQFoliageBender_GetSoldierLocationAndSpread) == 0x000018, "Wrong size on SQFoliageBender_GetSoldierLocationAndSpread");
static_assert(offsetof(SQFoliageBender_GetSoldierLocationAndSpread, Soldier) == 0x000000, "Member 'SQFoliageBender_GetSoldierLocationAndSpread::Soldier' has a wrong offset!");
static_assert(offsetof(SQFoliageBender_GetSoldierLocationAndSpread, X) == 0x000008, "Member 'SQFoliageBender_GetSoldierLocationAndSpread::X' has a wrong offset!");
static_assert(offsetof(SQFoliageBender_GetSoldierLocationAndSpread, Y) == 0x00000C, "Member 'SQFoliageBender_GetSoldierLocationAndSpread::Y' has a wrong offset!");
static_assert(offsetof(SQFoliageBender_GetSoldierLocationAndSpread, Z) == 0x000010, "Member 'SQFoliageBender_GetSoldierLocationAndSpread::Z' has a wrong offset!");
static_assert(offsetof(SQFoliageBender_GetSoldierLocationAndSpread, SpreadMultiplier) == 0x000014, "Member 'SQFoliageBender_GetSoldierLocationAndSpread::SpreadMultiplier' has a wrong offset!");

// Function Squad.SQForceNetMovementComponent.AddForce
// 0x000C (0x000C - 0x0000)
struct SQForceNetMovementComponent_AddForce final
{
public:
	struct FVector                                Force;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForceNetMovementComponent_AddForce) == 0x000004, "Wrong alignment on SQForceNetMovementComponent_AddForce");
static_assert(sizeof(SQForceNetMovementComponent_AddForce) == 0x00000C, "Wrong size on SQForceNetMovementComponent_AddForce");
static_assert(offsetof(SQForceNetMovementComponent_AddForce, Force) == 0x000000, "Member 'SQForceNetMovementComponent_AddForce::Force' has a wrong offset!");

// Function Squad.SQForceNetMovementComponent.AddForceAtLocation
// 0x001C (0x001C - 0x0000)
struct SQForceNetMovementComponent_AddForceAtLocation final
{
public:
	struct FVector                                Force;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TorqueMultiplier;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForceNetMovementComponent_AddForceAtLocation) == 0x000004, "Wrong alignment on SQForceNetMovementComponent_AddForceAtLocation");
static_assert(sizeof(SQForceNetMovementComponent_AddForceAtLocation) == 0x00001C, "Wrong size on SQForceNetMovementComponent_AddForceAtLocation");
static_assert(offsetof(SQForceNetMovementComponent_AddForceAtLocation, Force) == 0x000000, "Member 'SQForceNetMovementComponent_AddForceAtLocation::Force' has a wrong offset!");
static_assert(offsetof(SQForceNetMovementComponent_AddForceAtLocation, Position) == 0x00000C, "Member 'SQForceNetMovementComponent_AddForceAtLocation::Position' has a wrong offset!");
static_assert(offsetof(SQForceNetMovementComponent_AddForceAtLocation, TorqueMultiplier) == 0x000018, "Member 'SQForceNetMovementComponent_AddForceAtLocation::TorqueMultiplier' has a wrong offset!");

// Function Squad.SQForceNetMovementComponent.AddForceAtLocationWithTorqueMultiplier
// 0x0024 (0x0024 - 0x0000)
struct SQForceNetMovementComponent_AddForceAtLocationWithTorqueMultiplier final
{
public:
	struct FVector                                Force;                                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TorqueMultiplier;                                  // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForceNetMovementComponent_AddForceAtLocationWithTorqueMultiplier) == 0x000004, "Wrong alignment on SQForceNetMovementComponent_AddForceAtLocationWithTorqueMultiplier");
static_assert(sizeof(SQForceNetMovementComponent_AddForceAtLocationWithTorqueMultiplier) == 0x000024, "Wrong size on SQForceNetMovementComponent_AddForceAtLocationWithTorqueMultiplier");
static_assert(offsetof(SQForceNetMovementComponent_AddForceAtLocationWithTorqueMultiplier, Force) == 0x000000, "Member 'SQForceNetMovementComponent_AddForceAtLocationWithTorqueMultiplier::Force' has a wrong offset!");
static_assert(offsetof(SQForceNetMovementComponent_AddForceAtLocationWithTorqueMultiplier, Position) == 0x00000C, "Member 'SQForceNetMovementComponent_AddForceAtLocationWithTorqueMultiplier::Position' has a wrong offset!");
static_assert(offsetof(SQForceNetMovementComponent_AddForceAtLocationWithTorqueMultiplier, TorqueMultiplier) == 0x000018, "Member 'SQForceNetMovementComponent_AddForceAtLocationWithTorqueMultiplier::TorqueMultiplier' has a wrong offset!");

// Function Squad.SQForceNetMovementComponent.AddPitchTorque
// 0x0004 (0x0004 - 0x0000)
struct SQForceNetMovementComponent_AddPitchTorque final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForceNetMovementComponent_AddPitchTorque) == 0x000004, "Wrong alignment on SQForceNetMovementComponent_AddPitchTorque");
static_assert(sizeof(SQForceNetMovementComponent_AddPitchTorque) == 0x000004, "Wrong size on SQForceNetMovementComponent_AddPitchTorque");
static_assert(offsetof(SQForceNetMovementComponent_AddPitchTorque, Amount) == 0x000000, "Member 'SQForceNetMovementComponent_AddPitchTorque::Amount' has a wrong offset!");

// Function Squad.SQForceNetMovementComponent.AddRollTorque
// 0x0004 (0x0004 - 0x0000)
struct SQForceNetMovementComponent_AddRollTorque final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForceNetMovementComponent_AddRollTorque) == 0x000004, "Wrong alignment on SQForceNetMovementComponent_AddRollTorque");
static_assert(sizeof(SQForceNetMovementComponent_AddRollTorque) == 0x000004, "Wrong size on SQForceNetMovementComponent_AddRollTorque");
static_assert(offsetof(SQForceNetMovementComponent_AddRollTorque, Amount) == 0x000000, "Member 'SQForceNetMovementComponent_AddRollTorque::Amount' has a wrong offset!");

// Function Squad.SQForceNetMovementComponent.AddTorque
// 0x000C (0x000C - 0x0000)
struct SQForceNetMovementComponent_AddTorque final
{
public:
	struct FVector                                Torque;                                            // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForceNetMovementComponent_AddTorque) == 0x000004, "Wrong alignment on SQForceNetMovementComponent_AddTorque");
static_assert(sizeof(SQForceNetMovementComponent_AddTorque) == 0x00000C, "Wrong size on SQForceNetMovementComponent_AddTorque");
static_assert(offsetof(SQForceNetMovementComponent_AddTorque, Torque) == 0x000000, "Member 'SQForceNetMovementComponent_AddTorque::Torque' has a wrong offset!");

// Function Squad.SQForceNetMovementComponent.AddYawTorque
// 0x0004 (0x0004 - 0x0000)
struct SQForceNetMovementComponent_AddYawTorque final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForceNetMovementComponent_AddYawTorque) == 0x000004, "Wrong alignment on SQForceNetMovementComponent_AddYawTorque");
static_assert(sizeof(SQForceNetMovementComponent_AddYawTorque) == 0x000004, "Wrong size on SQForceNetMovementComponent_AddYawTorque");
static_assert(offsetof(SQForceNetMovementComponent_AddYawTorque, Amount) == 0x000000, "Member 'SQForceNetMovementComponent_AddYawTorque::Amount' has a wrong offset!");

// Function Squad.SQVehicleWeaponTOW.GetPostProcessSettings
// 0x0560 (0x0560 - 0x0000)
struct SQVehicleWeaponTOW_GetPostProcessSettings final
{
public:
	struct FPostProcessSettings                   ReturnValue;                                       // 0x0000(0x0560)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleWeaponTOW_GetPostProcessSettings) == 0x000010, "Wrong alignment on SQVehicleWeaponTOW_GetPostProcessSettings");
static_assert(sizeof(SQVehicleWeaponTOW_GetPostProcessSettings) == 0x000560, "Wrong size on SQVehicleWeaponTOW_GetPostProcessSettings");
static_assert(offsetof(SQVehicleWeaponTOW_GetPostProcessSettings, ReturnValue) == 0x000000, "Member 'SQVehicleWeaponTOW_GetPostProcessSettings::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleWeaponTOW.GetReticleClass
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleWeaponTOW_GetReticleClass final
{
public:
	TSubclassOf<class USQVehicleViewWidget>       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleWeaponTOW_GetReticleClass) == 0x000008, "Wrong alignment on SQVehicleWeaponTOW_GetReticleClass");
static_assert(sizeof(SQVehicleWeaponTOW_GetReticleClass) == 0x000008, "Wrong size on SQVehicleWeaponTOW_GetReticleClass");
static_assert(offsetof(SQVehicleWeaponTOW_GetReticleClass, ReturnValue) == 0x000000, "Member 'SQVehicleWeaponTOW_GetReticleClass::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleWeaponTOW.ToggleReticleOverlay
// 0x0001 (0x0001 - 0x0000)
struct SQVehicleWeaponTOW_ToggleReticleOverlay final
{
public:
	bool                                          bIsAiming;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleWeaponTOW_ToggleReticleOverlay) == 0x000001, "Wrong alignment on SQVehicleWeaponTOW_ToggleReticleOverlay");
static_assert(sizeof(SQVehicleWeaponTOW_ToggleReticleOverlay) == 0x000001, "Wrong size on SQVehicleWeaponTOW_ToggleReticleOverlay");
static_assert(offsetof(SQVehicleWeaponTOW_ToggleReticleOverlay, bIsAiming) == 0x000000, "Member 'SQVehicleWeaponTOW_ToggleReticleOverlay::bIsAiming' has a wrong offset!");

// Function Squad.SQForwardBaseSettings.HasInitialResources
// 0x0001 (0x0001 - 0x0000)
struct SQForwardBaseSettings_HasInitialResources final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForwardBaseSettings_HasInitialResources) == 0x000001, "Wrong alignment on SQForwardBaseSettings_HasInitialResources");
static_assert(sizeof(SQForwardBaseSettings_HasInitialResources) == 0x000001, "Wrong size on SQForwardBaseSettings_HasInitialResources");
static_assert(offsetof(SQForwardBaseSettings_HasInitialResources, ReturnValue) == 0x000000, "Member 'SQForwardBaseSettings_HasInitialResources::ReturnValue' has a wrong offset!");

// Function Squad.SQForwardBaseSettings.HasTimeToEnableSpawning
// 0x0001 (0x0001 - 0x0000)
struct SQForwardBaseSettings_HasTimeToEnableSpawning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQForwardBaseSettings_HasTimeToEnableSpawning) == 0x000001, "Wrong alignment on SQForwardBaseSettings_HasTimeToEnableSpawning");
static_assert(sizeof(SQForwardBaseSettings_HasTimeToEnableSpawning) == 0x000001, "Wrong size on SQForwardBaseSettings_HasTimeToEnableSpawning");
static_assert(offsetof(SQForwardBaseSettings_HasTimeToEnableSpawning, ReturnValue) == 0x000000, "Member 'SQForwardBaseSettings_HasTimeToEnableSpawning::ReturnValue' has a wrong offset!");

// Function Squad.SQFreeLookInterface.SetIsToggleActive
// 0x0001 (0x0001 - 0x0000)
struct SQFreeLookInterface_SetIsToggleActive final
{
public:
	bool                                          bNewState;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFreeLookInterface_SetIsToggleActive) == 0x000001, "Wrong alignment on SQFreeLookInterface_SetIsToggleActive");
static_assert(sizeof(SQFreeLookInterface_SetIsToggleActive) == 0x000001, "Wrong size on SQFreeLookInterface_SetIsToggleActive");
static_assert(offsetof(SQFreeLookInterface_SetIsToggleActive, bNewState) == 0x000000, "Member 'SQFreeLookInterface_SetIsToggleActive::bNewState' has a wrong offset!");

// Function Squad.SQFreeLookInterface.CalculateFreeLookRotation
// 0x000C (0x000C - 0x0000)
struct SQFreeLookInterface_CalculateFreeLookRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFreeLookInterface_CalculateFreeLookRotation) == 0x000004, "Wrong alignment on SQFreeLookInterface_CalculateFreeLookRotation");
static_assert(sizeof(SQFreeLookInterface_CalculateFreeLookRotation) == 0x00000C, "Wrong size on SQFreeLookInterface_CalculateFreeLookRotation");
static_assert(offsetof(SQFreeLookInterface_CalculateFreeLookRotation, ReturnValue) == 0x000000, "Member 'SQFreeLookInterface_CalculateFreeLookRotation::ReturnValue' has a wrong offset!");

// Function Squad.SQFreeLookInterface.GetFreeLookComponent
// 0x0008 (0x0008 - 0x0000)
struct SQFreeLookInterface_GetFreeLookComponent final
{
public:
	class USQFreeLookComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFreeLookInterface_GetFreeLookComponent) == 0x000008, "Wrong alignment on SQFreeLookInterface_GetFreeLookComponent");
static_assert(sizeof(SQFreeLookInterface_GetFreeLookComponent) == 0x000008, "Wrong size on SQFreeLookInterface_GetFreeLookComponent");
static_assert(offsetof(SQFreeLookInterface_GetFreeLookComponent, ReturnValue) == 0x000000, "Member 'SQFreeLookInterface_GetFreeLookComponent::ReturnValue' has a wrong offset!");

// Function Squad.SQFreeLookInterface.GetIsUsingFreeLook
// 0x0001 (0x0001 - 0x0000)
struct SQFreeLookInterface_GetIsUsingFreeLook final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQFreeLookInterface_GetIsUsingFreeLook) == 0x000001, "Wrong alignment on SQFreeLookInterface_GetIsUsingFreeLook");
static_assert(sizeof(SQFreeLookInterface_GetIsUsingFreeLook) == 0x000001, "Wrong size on SQFreeLookInterface_GetIsUsingFreeLook");
static_assert(offsetof(SQFreeLookInterface_GetIsUsingFreeLook, ReturnValue) == 0x000000, "Member 'SQFreeLookInterface_GetIsUsingFreeLook::ReturnValue' has a wrong offset!");

// Function Squad.SQGameState.AddGameModeRules
// 0x0010 (0x0010 - 0x0000)
struct SQGameState_AddGameModeRules final
{
public:
	TArray<struct FSQGameModeRules>               InGameModeRules;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameState_AddGameModeRules) == 0x000008, "Wrong alignment on SQGameState_AddGameModeRules");
static_assert(sizeof(SQGameState_AddGameModeRules) == 0x000010, "Wrong size on SQGameState_AddGameModeRules");
static_assert(offsetof(SQGameState_AddGameModeRules, InGameModeRules) == 0x000000, "Member 'SQGameState_AddGameModeRules::InGameModeRules' has a wrong offset!");

// Function Squad.SQGameState.SetRemainingTime
// 0x0004 (0x0004 - 0x0000)
struct SQGameState_SetRemainingTime final
{
public:
	int32                                         Seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameState_SetRemainingTime) == 0x000004, "Wrong alignment on SQGameState_SetRemainingTime");
static_assert(sizeof(SQGameState_SetRemainingTime) == 0x000004, "Wrong size on SQGameState_SetRemainingTime");
static_assert(offsetof(SQGameState_SetRemainingTime, Seconds) == 0x000000, "Member 'SQGameState_SetRemainingTime::Seconds' has a wrong offset!");

// Function Squad.SQGameState.CanChangeTeam
// 0x0001 (0x0001 - 0x0000)
struct SQGameState_CanChangeTeam final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameState_CanChangeTeam) == 0x000001, "Wrong alignment on SQGameState_CanChangeTeam");
static_assert(sizeof(SQGameState_CanChangeTeam) == 0x000001, "Wrong size on SQGameState_CanChangeTeam");
static_assert(offsetof(SQGameState_CanChangeTeam, ReturnValue) == 0x000000, "Member 'SQGameState_CanChangeTeam::ReturnValue' has a wrong offset!");

// Function Squad.SQGameState.GetMarkerManager
// 0x0008 (0x0008 - 0x0000)
struct SQGameState_GetMarkerManager final
{
public:
	class USQMapMarkerManagerComponent*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameState_GetMarkerManager) == 0x000008, "Wrong alignment on SQGameState_GetMarkerManager");
static_assert(sizeof(SQGameState_GetMarkerManager) == 0x000008, "Wrong size on SQGameState_GetMarkerManager");
static_assert(offsetof(SQGameState_GetMarkerManager, ReturnValue) == 0x000000, "Member 'SQGameState_GetMarkerManager::ReturnValue' has a wrong offset!");

// Function Squad.SQGameState.GetPlayerCount
// 0x0004 (0x0004 - 0x0000)
struct SQGameState_GetPlayerCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameState_GetPlayerCount) == 0x000004, "Wrong alignment on SQGameState_GetPlayerCount");
static_assert(sizeof(SQGameState_GetPlayerCount) == 0x000004, "Wrong size on SQGameState_GetPlayerCount");
static_assert(offsetof(SQGameState_GetPlayerCount, ReturnValue) == 0x000000, "Member 'SQGameState_GetPlayerCount::ReturnValue' has a wrong offset!");

// Function Squad.SQGameState.GetRelationshipById
// 0x0003 (0x0003 - 0x0000)
struct SQGameState_GetRelationshipById final
{
public:
	ESQTeam                                       InTeamA;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTeam                                       InTeamIdB;                                         // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTeamRelationShip                           ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameState_GetRelationshipById) == 0x000001, "Wrong alignment on SQGameState_GetRelationshipById");
static_assert(sizeof(SQGameState_GetRelationshipById) == 0x000003, "Wrong size on SQGameState_GetRelationshipById");
static_assert(offsetof(SQGameState_GetRelationshipById, InTeamA) == 0x000000, "Member 'SQGameState_GetRelationshipById::InTeamA' has a wrong offset!");
static_assert(offsetof(SQGameState_GetRelationshipById, InTeamIdB) == 0x000001, "Member 'SQGameState_GetRelationshipById::InTeamIdB' has a wrong offset!");
static_assert(offsetof(SQGameState_GetRelationshipById, ReturnValue) == 0x000002, "Member 'SQGameState_GetRelationshipById::ReturnValue' has a wrong offset!");

// Function Squad.SQGameState.GetRelationShipByIndex
// 0x000C (0x000C - 0x0000)
struct SQGameState_GetRelationShipByIndex final
{
public:
	int32                                         InTeamIdA;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InTeamIdB;                                         // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTeamRelationShip                           ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C4[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameState_GetRelationShipByIndex) == 0x000004, "Wrong alignment on SQGameState_GetRelationShipByIndex");
static_assert(sizeof(SQGameState_GetRelationShipByIndex) == 0x00000C, "Wrong size on SQGameState_GetRelationShipByIndex");
static_assert(offsetof(SQGameState_GetRelationShipByIndex, InTeamIdA) == 0x000000, "Member 'SQGameState_GetRelationShipByIndex::InTeamIdA' has a wrong offset!");
static_assert(offsetof(SQGameState_GetRelationShipByIndex, InTeamIdB) == 0x000004, "Member 'SQGameState_GetRelationShipByIndex::InTeamIdB' has a wrong offset!");
static_assert(offsetof(SQGameState_GetRelationShipByIndex, ReturnValue) == 0x000008, "Member 'SQGameState_GetRelationShipByIndex::ReturnValue' has a wrong offset!");

// Function Squad.SQGameState.GetRemainingTime
// 0x0004 (0x0004 - 0x0000)
struct SQGameState_GetRemainingTime final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameState_GetRemainingTime) == 0x000004, "Wrong alignment on SQGameState_GetRemainingTime");
static_assert(sizeof(SQGameState_GetRemainingTime) == 0x000004, "Wrong size on SQGameState_GetRemainingTime");
static_assert(offsetof(SQGameState_GetRemainingTime, ReturnValue) == 0x000000, "Member 'SQGameState_GetRemainingTime::ReturnValue' has a wrong offset!");

// Function Squad.SQGameState.IsGameReadyToStart
// 0x0001 (0x0001 - 0x0000)
struct SQGameState_IsGameReadyToStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameState_IsGameReadyToStart) == 0x000001, "Wrong alignment on SQGameState_IsGameReadyToStart");
static_assert(sizeof(SQGameState_IsGameReadyToStart) == 0x000001, "Wrong size on SQGameState_IsGameReadyToStart");
static_assert(offsetof(SQGameState_IsGameReadyToStart, ReturnValue) == 0x000000, "Member 'SQGameState_IsGameReadyToStart::ReturnValue' has a wrong offset!");

// Function Squad.SQGameState.TryGetTeamState
// 0x0018 (0x0018 - 0x0000)
struct SQGameState_TryGetTeamState final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C5[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQTeamState*                           OutTeamState;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C6[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameState_TryGetTeamState) == 0x000008, "Wrong alignment on SQGameState_TryGetTeamState");
static_assert(sizeof(SQGameState_TryGetTeamState) == 0x000018, "Wrong size on SQGameState_TryGetTeamState");
static_assert(offsetof(SQGameState_TryGetTeamState, TeamId) == 0x000000, "Member 'SQGameState_TryGetTeamState::TeamId' has a wrong offset!");
static_assert(offsetof(SQGameState_TryGetTeamState, OutTeamState) == 0x000008, "Member 'SQGameState_TryGetTeamState::OutTeamState' has a wrong offset!");
static_assert(offsetof(SQGameState_TryGetTeamState, ReturnValue) == 0x000010, "Member 'SQGameState_TryGetTeamState::ReturnValue' has a wrong offset!");

// Function Squad.SQTeamPrep.OnCompBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct SQTeamPrep_OnCompBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11CB[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamPrep_OnCompBeginOverlap) == 0x000008, "Wrong alignment on SQTeamPrep_OnCompBeginOverlap");
static_assert(sizeof(SQTeamPrep_OnCompBeginOverlap) == 0x0000A8, "Wrong size on SQTeamPrep_OnCompBeginOverlap");
static_assert(offsetof(SQTeamPrep_OnCompBeginOverlap, OverlappedComponent) == 0x000000, "Member 'SQTeamPrep_OnCompBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SQTeamPrep_OnCompBeginOverlap, OtherActor) == 0x000008, "Member 'SQTeamPrep_OnCompBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SQTeamPrep_OnCompBeginOverlap, OtherComp) == 0x000010, "Member 'SQTeamPrep_OnCompBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(SQTeamPrep_OnCompBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'SQTeamPrep_OnCompBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SQTeamPrep_OnCompBeginOverlap, bFromSweep) == 0x00001C, "Member 'SQTeamPrep_OnCompBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(SQTeamPrep_OnCompBeginOverlap, SweepResult) == 0x000020, "Member 'SQTeamPrep_OnCompBeginOverlap::SweepResult' has a wrong offset!");

// Function Squad.SQTeamPrep.OnCompExit
// 0x0020 (0x0020 - 0x0000)
struct SQTeamPrep_OnCompExit final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11CC[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQTeamPrep_OnCompExit) == 0x000008, "Wrong alignment on SQTeamPrep_OnCompExit");
static_assert(sizeof(SQTeamPrep_OnCompExit) == 0x000020, "Wrong size on SQTeamPrep_OnCompExit");
static_assert(offsetof(SQTeamPrep_OnCompExit, OverlappedComponent) == 0x000000, "Member 'SQTeamPrep_OnCompExit::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SQTeamPrep_OnCompExit, OtherActor) == 0x000008, "Member 'SQTeamPrep_OnCompExit::OtherActor' has a wrong offset!");
static_assert(offsetof(SQTeamPrep_OnCompExit, OtherComp) == 0x000010, "Member 'SQTeamPrep_OnCompExit::OtherComp' has a wrong offset!");
static_assert(offsetof(SQTeamPrep_OnCompExit, OtherBodyIndex) == 0x000018, "Member 'SQTeamPrep_OnCompExit::OtherBodyIndex' has a wrong offset!");

// Function Squad.SQTeamPrep.StartCountdown
// 0x0008 (0x0008 - 0x0000)
struct SQTeamPrep_StartCountdown final
{
public:
	class FName                                   NewMatchState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamPrep_StartCountdown) == 0x000004, "Wrong alignment on SQTeamPrep_StartCountdown");
static_assert(sizeof(SQTeamPrep_StartCountdown) == 0x000008, "Wrong size on SQTeamPrep_StartCountdown");
static_assert(offsetof(SQTeamPrep_StartCountdown, NewMatchState) == 0x000000, "Member 'SQTeamPrep_StartCountdown::NewMatchState' has a wrong offset!");

// Function Squad.SQTeamPrep.GetStagingTimeRemaining
// 0x0004 (0x0004 - 0x0000)
struct SQTeamPrep_GetStagingTimeRemaining final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamPrep_GetStagingTimeRemaining) == 0x000004, "Wrong alignment on SQTeamPrep_GetStagingTimeRemaining");
static_assert(sizeof(SQTeamPrep_GetStagingTimeRemaining) == 0x000004, "Wrong size on SQTeamPrep_GetStagingTimeRemaining");
static_assert(offsetof(SQTeamPrep_GetStagingTimeRemaining, ReturnValue) == 0x000000, "Member 'SQTeamPrep_GetStagingTimeRemaining::ReturnValue' has a wrong offset!");

// Function Squad.SQGameMode.AllowTeamChange
// 0x0010 (0x0010 - 0x0000)
struct SQGameMode_AllowTeamChange final
{
public:
	class ASQPlayerController*                    RequestingPlayer;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewTeam;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D2[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameMode_AllowTeamChange) == 0x000008, "Wrong alignment on SQGameMode_AllowTeamChange");
static_assert(sizeof(SQGameMode_AllowTeamChange) == 0x000010, "Wrong size on SQGameMode_AllowTeamChange");
static_assert(offsetof(SQGameMode_AllowTeamChange, RequestingPlayer) == 0x000000, "Member 'SQGameMode_AllowTeamChange::RequestingPlayer' has a wrong offset!");
static_assert(offsetof(SQGameMode_AllowTeamChange, NewTeam) == 0x000008, "Member 'SQGameMode_AllowTeamChange::NewTeam' has a wrong offset!");
static_assert(offsetof(SQGameMode_AllowTeamChange, ReturnValue) == 0x00000C, "Member 'SQGameMode_AllowTeamChange::ReturnValue' has a wrong offset!");

// Function Squad.SQGameMode.GetConcretePawnClassForController
// 0x0010 (0x0010 - 0x0000)
struct SQGameMode_GetConcretePawnClassForController final
{
public:
	class AController*                            InController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQSoldier>                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameMode_GetConcretePawnClassForController) == 0x000008, "Wrong alignment on SQGameMode_GetConcretePawnClassForController");
static_assert(sizeof(SQGameMode_GetConcretePawnClassForController) == 0x000010, "Wrong size on SQGameMode_GetConcretePawnClassForController");
static_assert(offsetof(SQGameMode_GetConcretePawnClassForController, InController) == 0x000000, "Member 'SQGameMode_GetConcretePawnClassForController::InController' has a wrong offset!");
static_assert(offsetof(SQGameMode_GetConcretePawnClassForController, ReturnValue) == 0x000008, "Member 'SQGameMode_GetConcretePawnClassForController::ReturnValue' has a wrong offset!");

// Function Squad.SQGameMode.IsDeployNow
// 0x0010 (0x0010 - 0x0000)
struct SQGameMode_IsDeployNow final
{
public:
	class APlayerController*                      PC;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D3[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameMode_IsDeployNow) == 0x000008, "Wrong alignment on SQGameMode_IsDeployNow");
static_assert(sizeof(SQGameMode_IsDeployNow) == 0x000010, "Wrong size on SQGameMode_IsDeployNow");
static_assert(offsetof(SQGameMode_IsDeployNow, PC) == 0x000000, "Member 'SQGameMode_IsDeployNow::PC' has a wrong offset!");
static_assert(offsetof(SQGameMode_IsDeployNow, ReturnValue) == 0x000008, "Member 'SQGameMode_IsDeployNow::ReturnValue' has a wrong offset!");

// Function Squad.SQGameMode.LogisticsDropOff
// 0x0010 (0x0010 - 0x0000)
struct SQGameMode_LogisticsDropOff final
{
public:
	class AActor*                                 VehicleActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmmoDroppedOff;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstructionDroppedOff;                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameMode_LogisticsDropOff) == 0x000008, "Wrong alignment on SQGameMode_LogisticsDropOff");
static_assert(sizeof(SQGameMode_LogisticsDropOff) == 0x000010, "Wrong size on SQGameMode_LogisticsDropOff");
static_assert(offsetof(SQGameMode_LogisticsDropOff, VehicleActor) == 0x000000, "Member 'SQGameMode_LogisticsDropOff::VehicleActor' has a wrong offset!");
static_assert(offsetof(SQGameMode_LogisticsDropOff, AmmoDroppedOff) == 0x000008, "Member 'SQGameMode_LogisticsDropOff::AmmoDroppedOff' has a wrong offset!");
static_assert(offsetof(SQGameMode_LogisticsDropOff, ConstructionDroppedOff) == 0x00000C, "Member 'SQGameMode_LogisticsDropOff::ConstructionDroppedOff' has a wrong offset!");

// Function Squad.SQGameMode.OnCurrentLayerSelected
// 0x0020 (0x0020 - 0x0000)
struct SQGameMode_OnCurrentLayerSelected final
{
public:
	class USQVoteSession*                         VoteSession;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQChoice                              Winner;                                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameMode_OnCurrentLayerSelected) == 0x000008, "Wrong alignment on SQGameMode_OnCurrentLayerSelected");
static_assert(sizeof(SQGameMode_OnCurrentLayerSelected) == 0x000020, "Wrong size on SQGameMode_OnCurrentLayerSelected");
static_assert(offsetof(SQGameMode_OnCurrentLayerSelected, VoteSession) == 0x000000, "Member 'SQGameMode_OnCurrentLayerSelected::VoteSession' has a wrong offset!");
static_assert(offsetof(SQGameMode_OnCurrentLayerSelected, Winner) == 0x000008, "Member 'SQGameMode_OnCurrentLayerSelected::Winner' has a wrong offset!");

// Function Squad.SQGameMode.OnFactionSelected
// 0x0020 (0x0020 - 0x0000)
struct SQGameMode_OnFactionSelected final
{
public:
	class USQVoteSession*                         VoteSession;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQChoice                              Winner;                                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameMode_OnFactionSelected) == 0x000008, "Wrong alignment on SQGameMode_OnFactionSelected");
static_assert(sizeof(SQGameMode_OnFactionSelected) == 0x000020, "Wrong size on SQGameMode_OnFactionSelected");
static_assert(offsetof(SQGameMode_OnFactionSelected, VoteSession) == 0x000000, "Member 'SQGameMode_OnFactionSelected::VoteSession' has a wrong offset!");
static_assert(offsetof(SQGameMode_OnFactionSelected, Winner) == 0x000008, "Member 'SQGameMode_OnFactionSelected::Winner' has a wrong offset!");

// Function Squad.SQGameMode.OnNextLayerSelected
// 0x0020 (0x0020 - 0x0000)
struct SQGameMode_OnNextLayerSelected final
{
public:
	class USQVoteSession*                         VoteSession;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQChoice                              Winner;                                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameMode_OnNextLayerSelected) == 0x000008, "Wrong alignment on SQGameMode_OnNextLayerSelected");
static_assert(sizeof(SQGameMode_OnNextLayerSelected) == 0x000020, "Wrong size on SQGameMode_OnNextLayerSelected");
static_assert(offsetof(SQGameMode_OnNextLayerSelected, VoteSession) == 0x000000, "Member 'SQGameMode_OnNextLayerSelected::VoteSession' has a wrong offset!");
static_assert(offsetof(SQGameMode_OnNextLayerSelected, Winner) == 0x000008, "Member 'SQGameMode_OnNextLayerSelected::Winner' has a wrong offset!");

// Function Squad.SQGameMode.OnNextLevelSelected
// 0x0020 (0x0020 - 0x0000)
struct SQGameMode_OnNextLevelSelected final
{
public:
	class USQVoteSession*                         VoteSession;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQChoice                              Winner;                                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameMode_OnNextLevelSelected) == 0x000008, "Wrong alignment on SQGameMode_OnNextLevelSelected");
static_assert(sizeof(SQGameMode_OnNextLevelSelected) == 0x000020, "Wrong size on SQGameMode_OnNextLevelSelected");
static_assert(offsetof(SQGameMode_OnNextLevelSelected, VoteSession) == 0x000000, "Member 'SQGameMode_OnNextLevelSelected::VoteSession' has a wrong offset!");
static_assert(offsetof(SQGameMode_OnNextLevelSelected, Winner) == 0x000008, "Member 'SQGameMode_OnNextLevelSelected::Winner' has a wrong offset!");

// Function Squad.SQGameMode.PlayerBandaged
// 0x0010 (0x0010 - 0x0000)
struct SQGameMode_PlayerBandaged final
{
public:
	class AController*                            Bandager;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            BandagedPlayer;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameMode_PlayerBandaged) == 0x000008, "Wrong alignment on SQGameMode_PlayerBandaged");
static_assert(sizeof(SQGameMode_PlayerBandaged) == 0x000010, "Wrong size on SQGameMode_PlayerBandaged");
static_assert(offsetof(SQGameMode_PlayerBandaged, Bandager) == 0x000000, "Member 'SQGameMode_PlayerBandaged::Bandager' has a wrong offset!");
static_assert(offsetof(SQGameMode_PlayerBandaged, BandagedPlayer) == 0x000008, "Member 'SQGameMode_PlayerBandaged::BandagedPlayer' has a wrong offset!");

// Function Squad.SQGameMode.PlayerDied
// 0x0020 (0x0020 - 0x0000)
struct SQGameMode_PlayerDied final
{
public:
	class AController*                            Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            KilledPlayer;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  KilledPawn;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UDamageType*                      DamageType;                                        // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameMode_PlayerDied) == 0x000008, "Wrong alignment on SQGameMode_PlayerDied");
static_assert(sizeof(SQGameMode_PlayerDied) == 0x000020, "Wrong size on SQGameMode_PlayerDied");
static_assert(offsetof(SQGameMode_PlayerDied, Killer) == 0x000000, "Member 'SQGameMode_PlayerDied::Killer' has a wrong offset!");
static_assert(offsetof(SQGameMode_PlayerDied, KilledPlayer) == 0x000008, "Member 'SQGameMode_PlayerDied::KilledPlayer' has a wrong offset!");
static_assert(offsetof(SQGameMode_PlayerDied, KilledPawn) == 0x000010, "Member 'SQGameMode_PlayerDied::KilledPawn' has a wrong offset!");
static_assert(offsetof(SQGameMode_PlayerDied, DamageType) == 0x000018, "Member 'SQGameMode_PlayerDied::DamageType' has a wrong offset!");

// Function Squad.SQGameMode.PlayerHealed
// 0x0010 (0x0010 - 0x0000)
struct SQGameMode_PlayerHealed final
{
public:
	class AController*                            Healer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            HealedPlayer;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameMode_PlayerHealed) == 0x000008, "Wrong alignment on SQGameMode_PlayerHealed");
static_assert(sizeof(SQGameMode_PlayerHealed) == 0x000010, "Wrong size on SQGameMode_PlayerHealed");
static_assert(offsetof(SQGameMode_PlayerHealed, Healer) == 0x000000, "Member 'SQGameMode_PlayerHealed::Healer' has a wrong offset!");
static_assert(offsetof(SQGameMode_PlayerHealed, HealedPlayer) == 0x000008, "Member 'SQGameMode_PlayerHealed::HealedPlayer' has a wrong offset!");

// Function Squad.SQGameMode.PlayerRevived
// 0x0010 (0x0010 - 0x0000)
struct SQGameMode_PlayerRevived final
{
public:
	class AController*                            Reviver;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            RevivedPlayer;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameMode_PlayerRevived) == 0x000008, "Wrong alignment on SQGameMode_PlayerRevived");
static_assert(sizeof(SQGameMode_PlayerRevived) == 0x000010, "Wrong size on SQGameMode_PlayerRevived");
static_assert(offsetof(SQGameMode_PlayerRevived, Reviver) == 0x000000, "Member 'SQGameMode_PlayerRevived::Reviver' has a wrong offset!");
static_assert(offsetof(SQGameMode_PlayerRevived, RevivedPlayer) == 0x000008, "Member 'SQGameMode_PlayerRevived::RevivedPlayer' has a wrong offset!");

// Function Squad.SQGameMode.PlayerWounded
// 0x0020 (0x0020 - 0x0000)
struct SQGameMode_PlayerWounded final
{
public:
	class AController*                            Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            KilledPlayer;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  KilledPawn;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UDamageType*                      DamageType;                                        // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameMode_PlayerWounded) == 0x000008, "Wrong alignment on SQGameMode_PlayerWounded");
static_assert(sizeof(SQGameMode_PlayerWounded) == 0x000020, "Wrong size on SQGameMode_PlayerWounded");
static_assert(offsetof(SQGameMode_PlayerWounded, Killer) == 0x000000, "Member 'SQGameMode_PlayerWounded::Killer' has a wrong offset!");
static_assert(offsetof(SQGameMode_PlayerWounded, KilledPlayer) == 0x000008, "Member 'SQGameMode_PlayerWounded::KilledPlayer' has a wrong offset!");
static_assert(offsetof(SQGameMode_PlayerWounded, KilledPawn) == 0x000010, "Member 'SQGameMode_PlayerWounded::KilledPawn' has a wrong offset!");
static_assert(offsetof(SQGameMode_PlayerWounded, DamageType) == 0x000018, "Member 'SQGameMode_PlayerWounded::DamageType' has a wrong offset!");

// Function Squad.SQGameMode.RegisterImportantActor
// 0x0008 (0x0008 - 0x0000)
struct SQGameMode_RegisterImportantActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameMode_RegisterImportantActor) == 0x000008, "Wrong alignment on SQGameMode_RegisterImportantActor");
static_assert(sizeof(SQGameMode_RegisterImportantActor) == 0x000008, "Wrong size on SQGameMode_RegisterImportantActor");
static_assert(offsetof(SQGameMode_RegisterImportantActor, Actor) == 0x000000, "Member 'SQGameMode_RegisterImportantActor::Actor' has a wrong offset!");

// Function Squad.SQGameMode.RegisterRuleSet
// 0x0008 (0x0008 - 0x0000)
struct SQGameMode_RegisterRuleSet final
{
public:
	class ASQGameRuleSet*                         RuleSet;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameMode_RegisterRuleSet) == 0x000008, "Wrong alignment on SQGameMode_RegisterRuleSet");
static_assert(sizeof(SQGameMode_RegisterRuleSet) == 0x000008, "Wrong size on SQGameMode_RegisterRuleSet");
static_assert(offsetof(SQGameMode_RegisterRuleSet, RuleSet) == 0x000000, "Member 'SQGameMode_RegisterRuleSet::RuleSet' has a wrong offset!");

// Function Squad.SQGameMode.TryGetRulesetsOfClass
// 0x0020 (0x0020 - 0x0000)
struct SQGameMode_TryGetRulesetsOfClass final
{
public:
	TSubclassOf<class ASQGameRuleSet>             RulesetClass;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ASQGameRuleSet*>                 OutRulesets;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D4[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameMode_TryGetRulesetsOfClass) == 0x000008, "Wrong alignment on SQGameMode_TryGetRulesetsOfClass");
static_assert(sizeof(SQGameMode_TryGetRulesetsOfClass) == 0x000020, "Wrong size on SQGameMode_TryGetRulesetsOfClass");
static_assert(offsetof(SQGameMode_TryGetRulesetsOfClass, RulesetClass) == 0x000000, "Member 'SQGameMode_TryGetRulesetsOfClass::RulesetClass' has a wrong offset!");
static_assert(offsetof(SQGameMode_TryGetRulesetsOfClass, OutRulesets) == 0x000008, "Member 'SQGameMode_TryGetRulesetsOfClass::OutRulesets' has a wrong offset!");
static_assert(offsetof(SQGameMode_TryGetRulesetsOfClass, ReturnValue) == 0x000018, "Member 'SQGameMode_TryGetRulesetsOfClass::ReturnValue' has a wrong offset!");

// Function Squad.SQGameMode.TryToChangePlayersTeam
// 0x0010 (0x0010 - 0x0000)
struct SQGameMode_TryToChangePlayersTeam final
{
public:
	class ASQPlayerController*                    PlayerToChange;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamToChangeTo;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceChange;                                      // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D5[0x2];                                     // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameMode_TryToChangePlayersTeam) == 0x000008, "Wrong alignment on SQGameMode_TryToChangePlayersTeam");
static_assert(sizeof(SQGameMode_TryToChangePlayersTeam) == 0x000010, "Wrong size on SQGameMode_TryToChangePlayersTeam");
static_assert(offsetof(SQGameMode_TryToChangePlayersTeam, PlayerToChange) == 0x000000, "Member 'SQGameMode_TryToChangePlayersTeam::PlayerToChange' has a wrong offset!");
static_assert(offsetof(SQGameMode_TryToChangePlayersTeam, TeamToChangeTo) == 0x000008, "Member 'SQGameMode_TryToChangePlayersTeam::TeamToChangeTo' has a wrong offset!");
static_assert(offsetof(SQGameMode_TryToChangePlayersTeam, bForceChange) == 0x00000C, "Member 'SQGameMode_TryToChangePlayersTeam::bForceChange' has a wrong offset!");
static_assert(offsetof(SQGameMode_TryToChangePlayersTeam, ReturnValue) == 0x00000D, "Member 'SQGameMode_TryToChangePlayersTeam::ReturnValue' has a wrong offset!");

// Function Squad.SQGameMode.UnregisterImportantActor
// 0x0008 (0x0008 - 0x0000)
struct SQGameMode_UnregisterImportantActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameMode_UnregisterImportantActor) == 0x000008, "Wrong alignment on SQGameMode_UnregisterImportantActor");
static_assert(sizeof(SQGameMode_UnregisterImportantActor) == 0x000008, "Wrong size on SQGameMode_UnregisterImportantActor");
static_assert(offsetof(SQGameMode_UnregisterImportantActor, Actor) == 0x000000, "Member 'SQGameMode_UnregisterImportantActor::Actor' has a wrong offset!");

// Function Squad.SQGameMode.VehicleDestroyed
// 0x0020 (0x0020 - 0x0000)
struct SQGameMode_VehicleDestroyed final
{
public:
	class AController*                            Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            KilledPlayer;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  KilledPawn;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UDamageType*                      DamageType;                                        // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameMode_VehicleDestroyed) == 0x000008, "Wrong alignment on SQGameMode_VehicleDestroyed");
static_assert(sizeof(SQGameMode_VehicleDestroyed) == 0x000020, "Wrong size on SQGameMode_VehicleDestroyed");
static_assert(offsetof(SQGameMode_VehicleDestroyed, Killer) == 0x000000, "Member 'SQGameMode_VehicleDestroyed::Killer' has a wrong offset!");
static_assert(offsetof(SQGameMode_VehicleDestroyed, KilledPlayer) == 0x000008, "Member 'SQGameMode_VehicleDestroyed::KilledPlayer' has a wrong offset!");
static_assert(offsetof(SQGameMode_VehicleDestroyed, KilledPawn) == 0x000010, "Member 'SQGameMode_VehicleDestroyed::KilledPawn' has a wrong offset!");
static_assert(offsetof(SQGameMode_VehicleDestroyed, DamageType) == 0x000018, "Member 'SQGameMode_VehicleDestroyed::DamageType' has a wrong offset!");

// Function Squad.SQGameMode.GetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct SQGameMode_GetDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameMode_GetDisplayName) == 0x000008, "Wrong alignment on SQGameMode_GetDisplayName");
static_assert(sizeof(SQGameMode_GetDisplayName) == 0x000010, "Wrong size on SQGameMode_GetDisplayName");
static_assert(offsetof(SQGameMode_GetDisplayName, ReturnValue) == 0x000000, "Member 'SQGameMode_GetDisplayName::ReturnValue' has a wrong offset!");

// Function Squad.SQGameMode.GetDisplayNameArray
// 0x0010 (0x0010 - 0x0000)
struct SQGameMode_GetDisplayNameArray final
{
public:
	TArray<class FString>                         OutArray;                                          // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameMode_GetDisplayNameArray) == 0x000008, "Wrong alignment on SQGameMode_GetDisplayNameArray");
static_assert(sizeof(SQGameMode_GetDisplayNameArray) == 0x000010, "Wrong size on SQGameMode_GetDisplayNameArray");
static_assert(offsetof(SQGameMode_GetDisplayNameArray, OutArray) == 0x000000, "Member 'SQGameMode_GetDisplayNameArray::OutArray' has a wrong offset!");

// Function Squad.SQGameMode.GetDisplayText
// 0x0018 (0x0018 - 0x0000)
struct SQGameMode_GetDisplayText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameMode_GetDisplayText) == 0x000008, "Wrong alignment on SQGameMode_GetDisplayText");
static_assert(sizeof(SQGameMode_GetDisplayText) == 0x000018, "Wrong size on SQGameMode_GetDisplayText");
static_assert(offsetof(SQGameMode_GetDisplayText, ReturnValue) == 0x000000, "Member 'SQGameMode_GetDisplayText::ReturnValue' has a wrong offset!");

// Function Squad.SQGameMode.GetTeam
// 0x0010 (0x0010 - 0x0000)
struct SQGameMode_GetTeam final
{
public:
	ESQTeam                                       Team;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D6[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQTeam*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameMode_GetTeam) == 0x000008, "Wrong alignment on SQGameMode_GetTeam");
static_assert(sizeof(SQGameMode_GetTeam) == 0x000010, "Wrong size on SQGameMode_GetTeam");
static_assert(offsetof(SQGameMode_GetTeam, Team) == 0x000000, "Member 'SQGameMode_GetTeam::Team' has a wrong offset!");
static_assert(offsetof(SQGameMode_GetTeam, ReturnValue) == 0x000008, "Member 'SQGameMode_GetTeam::ReturnValue' has a wrong offset!");

// Function Squad.SQGameMode.OnPlayerChangedTeams
// 0x0008 (0x0008 - 0x0000)
struct SQGameMode_OnPlayerChangedTeams final
{
public:
	class ASQPlayerController*                    PlayerWhoSwitched;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameMode_OnPlayerChangedTeams) == 0x000008, "Wrong alignment on SQGameMode_OnPlayerChangedTeams");
static_assert(sizeof(SQGameMode_OnPlayerChangedTeams) == 0x000008, "Wrong size on SQGameMode_OnPlayerChangedTeams");
static_assert(offsetof(SQGameMode_OnPlayerChangedTeams, PlayerWhoSwitched) == 0x000000, "Member 'SQGameMode_OnPlayerChangedTeams::PlayerWhoSwitched' has a wrong offset!");

// Function Squad.SQTeamStatePrivate.GetId
// 0x0004 (0x0004 - 0x0000)
struct SQTeamStatePrivate_GetId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamStatePrivate_GetId) == 0x000004, "Wrong alignment on SQTeamStatePrivate_GetId");
static_assert(sizeof(SQTeamStatePrivate_GetId) == 0x000004, "Wrong size on SQTeamStatePrivate_GetId");
static_assert(offsetof(SQTeamStatePrivate_GetId, ReturnValue) == 0x000000, "Member 'SQTeamStatePrivate_GetId::ReturnValue' has a wrong offset!");

// Function Squad.SQGameplayService.GetServerUtcTime
// 0x0008 (0x0008 - 0x0000)
struct SQGameplayService_GetServerUtcTime final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameplayService_GetServerUtcTime) == 0x000008, "Wrong alignment on SQGameplayService_GetServerUtcTime");
static_assert(sizeof(SQGameplayService_GetServerUtcTime) == 0x000008, "Wrong size on SQGameplayService_GetServerUtcTime");
static_assert(offsetof(SQGameplayService_GetServerUtcTime, ReturnValue) == 0x000000, "Member 'SQGameplayService_GetServerUtcTime::ReturnValue' has a wrong offset!");

// Function Squad.SQGameplayService.TryGetGameMode
// 0x0020 (0x0020 - 0x0000)
struct SQGameplayService_TryGetGameMode final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQGameMode>                GameModeClass;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQGameMode*                            OutGameMode;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D9[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameplayService_TryGetGameMode) == 0x000008, "Wrong alignment on SQGameplayService_TryGetGameMode");
static_assert(sizeof(SQGameplayService_TryGetGameMode) == 0x000020, "Wrong size on SQGameplayService_TryGetGameMode");
static_assert(offsetof(SQGameplayService_TryGetGameMode, WorldContextObject) == 0x000000, "Member 'SQGameplayService_TryGetGameMode::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetGameMode, GameModeClass) == 0x000008, "Member 'SQGameplayService_TryGetGameMode::GameModeClass' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetGameMode, OutGameMode) == 0x000010, "Member 'SQGameplayService_TryGetGameMode::OutGameMode' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetGameMode, ReturnValue) == 0x000018, "Member 'SQGameplayService_TryGetGameMode::ReturnValue' has a wrong offset!");

// Function Squad.SQGameplayService.TryGetGameState
// 0x0020 (0x0020 - 0x0000)
struct SQGameplayService_TryGetGameState final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQGameState>               GameStateClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQGameState*                           OutGameState;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11DA[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameplayService_TryGetGameState) == 0x000008, "Wrong alignment on SQGameplayService_TryGetGameState");
static_assert(sizeof(SQGameplayService_TryGetGameState) == 0x000020, "Wrong size on SQGameplayService_TryGetGameState");
static_assert(offsetof(SQGameplayService_TryGetGameState, WorldContextObject) == 0x000000, "Member 'SQGameplayService_TryGetGameState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetGameState, GameStateClass) == 0x000008, "Member 'SQGameplayService_TryGetGameState::GameStateClass' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetGameState, OutGameState) == 0x000010, "Member 'SQGameplayService_TryGetGameState::OutGameState' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetGameState, ReturnValue) == 0x000018, "Member 'SQGameplayService_TryGetGameState::ReturnValue' has a wrong offset!");

// Function Squad.SQGameplayService.TryGetLocalPlayerController
// 0x0018 (0x0018 - 0x0000)
struct SQGameplayService_TryGetLocalPlayerController final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerController*                    OutPlayerController;                               // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11DB[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameplayService_TryGetLocalPlayerController) == 0x000008, "Wrong alignment on SQGameplayService_TryGetLocalPlayerController");
static_assert(sizeof(SQGameplayService_TryGetLocalPlayerController) == 0x000018, "Wrong size on SQGameplayService_TryGetLocalPlayerController");
static_assert(offsetof(SQGameplayService_TryGetLocalPlayerController, WorldContextObject) == 0x000000, "Member 'SQGameplayService_TryGetLocalPlayerController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetLocalPlayerController, OutPlayerController) == 0x000008, "Member 'SQGameplayService_TryGetLocalPlayerController::OutPlayerController' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetLocalPlayerController, ReturnValue) == 0x000010, "Member 'SQGameplayService_TryGetLocalPlayerController::ReturnValue' has a wrong offset!");

// Function Squad.SQGameplayService.TryGetLocalPlayerState
// 0x0020 (0x0020 - 0x0000)
struct SQGameplayService_TryGetLocalPlayerState final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQPlayerState>             PlayerStateClass;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerState*                         OutPlayerState;                                    // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11DC[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameplayService_TryGetLocalPlayerState) == 0x000008, "Wrong alignment on SQGameplayService_TryGetLocalPlayerState");
static_assert(sizeof(SQGameplayService_TryGetLocalPlayerState) == 0x000020, "Wrong size on SQGameplayService_TryGetLocalPlayerState");
static_assert(offsetof(SQGameplayService_TryGetLocalPlayerState, WorldContextObject) == 0x000000, "Member 'SQGameplayService_TryGetLocalPlayerState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetLocalPlayerState, PlayerStateClass) == 0x000008, "Member 'SQGameplayService_TryGetLocalPlayerState::PlayerStateClass' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetLocalPlayerState, OutPlayerState) == 0x000010, "Member 'SQGameplayService_TryGetLocalPlayerState::OutPlayerState' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetLocalPlayerState, ReturnValue) == 0x000018, "Member 'SQGameplayService_TryGetLocalPlayerState::ReturnValue' has a wrong offset!");

// Function Squad.SQGameplayService.TryGetLocalPlayerTeamId
// 0x0010 (0x0010 - 0x0000)
struct SQGameplayService_TryGetLocalPlayerTeamId final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutTeamId;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11DD[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameplayService_TryGetLocalPlayerTeamId) == 0x000008, "Wrong alignment on SQGameplayService_TryGetLocalPlayerTeamId");
static_assert(sizeof(SQGameplayService_TryGetLocalPlayerTeamId) == 0x000010, "Wrong size on SQGameplayService_TryGetLocalPlayerTeamId");
static_assert(offsetof(SQGameplayService_TryGetLocalPlayerTeamId, WorldContextObject) == 0x000000, "Member 'SQGameplayService_TryGetLocalPlayerTeamId::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetLocalPlayerTeamId, OutTeamId) == 0x000008, "Member 'SQGameplayService_TryGetLocalPlayerTeamId::OutTeamId' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetLocalPlayerTeamId, ReturnValue) == 0x00000C, "Member 'SQGameplayService_TryGetLocalPlayerTeamId::ReturnValue' has a wrong offset!");

// Function Squad.SQGameplayService.TryGetLocalPlayerTeamState
// 0x0020 (0x0020 - 0x0000)
struct SQGameplayService_TryGetLocalPlayerTeamState final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQTeamState>               TeamStateClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQTeamState*                           OutTeamState;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11DE[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameplayService_TryGetLocalPlayerTeamState) == 0x000008, "Wrong alignment on SQGameplayService_TryGetLocalPlayerTeamState");
static_assert(sizeof(SQGameplayService_TryGetLocalPlayerTeamState) == 0x000020, "Wrong size on SQGameplayService_TryGetLocalPlayerTeamState");
static_assert(offsetof(SQGameplayService_TryGetLocalPlayerTeamState, WorldContextObject) == 0x000000, "Member 'SQGameplayService_TryGetLocalPlayerTeamState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetLocalPlayerTeamState, TeamStateClass) == 0x000008, "Member 'SQGameplayService_TryGetLocalPlayerTeamState::TeamStateClass' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetLocalPlayerTeamState, OutTeamState) == 0x000010, "Member 'SQGameplayService_TryGetLocalPlayerTeamState::OutTeamState' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetLocalPlayerTeamState, ReturnValue) == 0x000018, "Member 'SQGameplayService_TryGetLocalPlayerTeamState::ReturnValue' has a wrong offset!");

// Function Squad.SQGameplayService.TryGetPlayerOuterGameMode
// 0x0020 (0x0020 - 0x0000)
struct SQGameplayService_TryGetPlayerOuterGameMode final
{
public:
	const class ASQPlayerController*              WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQGameMode>                GameModeClass;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQGameMode*                            OutGameMode;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11DF[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameplayService_TryGetPlayerOuterGameMode) == 0x000008, "Wrong alignment on SQGameplayService_TryGetPlayerOuterGameMode");
static_assert(sizeof(SQGameplayService_TryGetPlayerOuterGameMode) == 0x000020, "Wrong size on SQGameplayService_TryGetPlayerOuterGameMode");
static_assert(offsetof(SQGameplayService_TryGetPlayerOuterGameMode, WorldContextObject) == 0x000000, "Member 'SQGameplayService_TryGetPlayerOuterGameMode::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetPlayerOuterGameMode, GameModeClass) == 0x000008, "Member 'SQGameplayService_TryGetPlayerOuterGameMode::GameModeClass' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetPlayerOuterGameMode, OutGameMode) == 0x000010, "Member 'SQGameplayService_TryGetPlayerOuterGameMode::OutGameMode' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetPlayerOuterGameMode, ReturnValue) == 0x000018, "Member 'SQGameplayService_TryGetPlayerOuterGameMode::ReturnValue' has a wrong offset!");

// Function Squad.SQGameplayService.TryGetPlayerOuterGameState
// 0x0020 (0x0020 - 0x0000)
struct SQGameplayService_TryGetPlayerOuterGameState final
{
public:
	const class ASQPlayerController*              WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQGameState>               GameStateClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQGameState*                           OutGameState;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E0[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameplayService_TryGetPlayerOuterGameState) == 0x000008, "Wrong alignment on SQGameplayService_TryGetPlayerOuterGameState");
static_assert(sizeof(SQGameplayService_TryGetPlayerOuterGameState) == 0x000020, "Wrong size on SQGameplayService_TryGetPlayerOuterGameState");
static_assert(offsetof(SQGameplayService_TryGetPlayerOuterGameState, WorldContextObject) == 0x000000, "Member 'SQGameplayService_TryGetPlayerOuterGameState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetPlayerOuterGameState, GameStateClass) == 0x000008, "Member 'SQGameplayService_TryGetPlayerOuterGameState::GameStateClass' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetPlayerOuterGameState, OutGameState) == 0x000010, "Member 'SQGameplayService_TryGetPlayerOuterGameState::OutGameState' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetPlayerOuterGameState, ReturnValue) == 0x000018, "Member 'SQGameplayService_TryGetPlayerOuterGameState::ReturnValue' has a wrong offset!");

// Function Squad.SQGameplayService.TryGetTeam
// 0x0028 (0x0028 - 0x0000)
struct SQGameplayService_TryGetTeam final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E1[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ASQTeam>                    TeamClass;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQTeam*                                OutTeam;                                           // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E2[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameplayService_TryGetTeam) == 0x000008, "Wrong alignment on SQGameplayService_TryGetTeam");
static_assert(sizeof(SQGameplayService_TryGetTeam) == 0x000028, "Wrong size on SQGameplayService_TryGetTeam");
static_assert(offsetof(SQGameplayService_TryGetTeam, WorldContextObject) == 0x000000, "Member 'SQGameplayService_TryGetTeam::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetTeam, TeamId) == 0x000008, "Member 'SQGameplayService_TryGetTeam::TeamId' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetTeam, TeamClass) == 0x000010, "Member 'SQGameplayService_TryGetTeam::TeamClass' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetTeam, OutTeam) == 0x000018, "Member 'SQGameplayService_TryGetTeam::OutTeam' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetTeam, ReturnValue) == 0x000020, "Member 'SQGameplayService_TryGetTeam::ReturnValue' has a wrong offset!");

// Function Squad.SQGameplayService.TryGetTeamOuterGameMode
// 0x0020 (0x0020 - 0x0000)
struct SQGameplayService_TryGetTeamOuterGameMode final
{
public:
	const class ASQTeam*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQGameMode>                GameModeClass;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQGameMode*                            OutGameMode;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E3[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameplayService_TryGetTeamOuterGameMode) == 0x000008, "Wrong alignment on SQGameplayService_TryGetTeamOuterGameMode");
static_assert(sizeof(SQGameplayService_TryGetTeamOuterGameMode) == 0x000020, "Wrong size on SQGameplayService_TryGetTeamOuterGameMode");
static_assert(offsetof(SQGameplayService_TryGetTeamOuterGameMode, WorldContextObject) == 0x000000, "Member 'SQGameplayService_TryGetTeamOuterGameMode::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetTeamOuterGameMode, GameModeClass) == 0x000008, "Member 'SQGameplayService_TryGetTeamOuterGameMode::GameModeClass' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetTeamOuterGameMode, OutGameMode) == 0x000010, "Member 'SQGameplayService_TryGetTeamOuterGameMode::OutGameMode' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetTeamOuterGameMode, ReturnValue) == 0x000018, "Member 'SQGameplayService_TryGetTeamOuterGameMode::ReturnValue' has a wrong offset!");

// Function Squad.SQGameplayService.TryGetTeamOuterGameState
// 0x0020 (0x0020 - 0x0000)
struct SQGameplayService_TryGetTeamOuterGameState final
{
public:
	const class ASQTeam*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQGameState>               GameStateClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQGameState*                           OutGameState;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E4[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameplayService_TryGetTeamOuterGameState) == 0x000008, "Wrong alignment on SQGameplayService_TryGetTeamOuterGameState");
static_assert(sizeof(SQGameplayService_TryGetTeamOuterGameState) == 0x000020, "Wrong size on SQGameplayService_TryGetTeamOuterGameState");
static_assert(offsetof(SQGameplayService_TryGetTeamOuterGameState, WorldContextObject) == 0x000000, "Member 'SQGameplayService_TryGetTeamOuterGameState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetTeamOuterGameState, GameStateClass) == 0x000008, "Member 'SQGameplayService_TryGetTeamOuterGameState::GameStateClass' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetTeamOuterGameState, OutGameState) == 0x000010, "Member 'SQGameplayService_TryGetTeamOuterGameState::OutGameState' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetTeamOuterGameState, ReturnValue) == 0x000018, "Member 'SQGameplayService_TryGetTeamOuterGameState::ReturnValue' has a wrong offset!");

// Function Squad.SQGameplayService.TryGetTeamState
// 0x0028 (0x0028 - 0x0000)
struct SQGameplayService_TryGetTeamState final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E5[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ASQTeamState>               TeamStateClass;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQTeamState*                           OutTeamState;                                      // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E6[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameplayService_TryGetTeamState) == 0x000008, "Wrong alignment on SQGameplayService_TryGetTeamState");
static_assert(sizeof(SQGameplayService_TryGetTeamState) == 0x000028, "Wrong size on SQGameplayService_TryGetTeamState");
static_assert(offsetof(SQGameplayService_TryGetTeamState, WorldContextObject) == 0x000000, "Member 'SQGameplayService_TryGetTeamState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetTeamState, TeamId) == 0x000008, "Member 'SQGameplayService_TryGetTeamState::TeamId' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetTeamState, TeamStateClass) == 0x000010, "Member 'SQGameplayService_TryGetTeamState::TeamStateClass' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetTeamState, OutTeamState) == 0x000018, "Member 'SQGameplayService_TryGetTeamState::OutTeamState' has a wrong offset!");
static_assert(offsetof(SQGameplayService_TryGetTeamState, ReturnValue) == 0x000020, "Member 'SQGameplayService_TryGetTeamState::ReturnValue' has a wrong offset!");

// Function Squad.SQGameSetupFunctionLibrary.CanInjectFactionSetup
// 0x0020 (0x0020 - 0x0000)
struct SQGameSetupFunctionLibrary_CanInjectFactionSetup final
{
public:
	class USQFactionSetup*                        SQFactionSetup;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQLevel*                               TargetLevel;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQLayer*                               TargetLayer;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E7[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGameSetupFunctionLibrary_CanInjectFactionSetup) == 0x000008, "Wrong alignment on SQGameSetupFunctionLibrary_CanInjectFactionSetup");
static_assert(sizeof(SQGameSetupFunctionLibrary_CanInjectFactionSetup) == 0x000020, "Wrong size on SQGameSetupFunctionLibrary_CanInjectFactionSetup");
static_assert(offsetof(SQGameSetupFunctionLibrary_CanInjectFactionSetup, SQFactionSetup) == 0x000000, "Member 'SQGameSetupFunctionLibrary_CanInjectFactionSetup::SQFactionSetup' has a wrong offset!");
static_assert(offsetof(SQGameSetupFunctionLibrary_CanInjectFactionSetup, TargetLevel) == 0x000008, "Member 'SQGameSetupFunctionLibrary_CanInjectFactionSetup::TargetLevel' has a wrong offset!");
static_assert(offsetof(SQGameSetupFunctionLibrary_CanInjectFactionSetup, TargetLayer) == 0x000010, "Member 'SQGameSetupFunctionLibrary_CanInjectFactionSetup::TargetLayer' has a wrong offset!");
static_assert(offsetof(SQGameSetupFunctionLibrary_CanInjectFactionSetup, ReturnValue) == 0x000018, "Member 'SQGameSetupFunctionLibrary_CanInjectFactionSetup::ReturnValue' has a wrong offset!");

// Function Squad.SQGameSetupFunctionLibrary.GetAllFactionCombinations
// 0x0018 (0x0018 - 0x0000)
struct SQGameSetupFunctionLibrary_GetAllFactionCombinations final
{
public:
	const class USQLayer*                         FromLayer;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSetupFunctionLibrary_GetAllFactionCombinations) == 0x000008, "Wrong alignment on SQGameSetupFunctionLibrary_GetAllFactionCombinations");
static_assert(sizeof(SQGameSetupFunctionLibrary_GetAllFactionCombinations) == 0x000018, "Wrong size on SQGameSetupFunctionLibrary_GetAllFactionCombinations");
static_assert(offsetof(SQGameSetupFunctionLibrary_GetAllFactionCombinations, FromLayer) == 0x000000, "Member 'SQGameSetupFunctionLibrary_GetAllFactionCombinations::FromLayer' has a wrong offset!");
static_assert(offsetof(SQGameSetupFunctionLibrary_GetAllFactionCombinations, ReturnValue) == 0x000008, "Member 'SQGameSetupFunctionLibrary_GetAllFactionCombinations::ReturnValue' has a wrong offset!");

// Function Squad.SQGameSetupFunctionLibrary.GetFactionsFromSettingsString
// 0x0028 (0x0028 - 0x0000)
struct SQGameSetupFunctionLibrary_GetFactionsFromSettingsString final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ListIndex;                                         // 0x0010(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E8[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSetupFunctionLibrary_GetFactionsFromSettingsString) == 0x000008, "Wrong alignment on SQGameSetupFunctionLibrary_GetFactionsFromSettingsString");
static_assert(sizeof(SQGameSetupFunctionLibrary_GetFactionsFromSettingsString) == 0x000028, "Wrong size on SQGameSetupFunctionLibrary_GetFactionsFromSettingsString");
static_assert(offsetof(SQGameSetupFunctionLibrary_GetFactionsFromSettingsString, InString) == 0x000000, "Member 'SQGameSetupFunctionLibrary_GetFactionsFromSettingsString::InString' has a wrong offset!");
static_assert(offsetof(SQGameSetupFunctionLibrary_GetFactionsFromSettingsString, ListIndex) == 0x000010, "Member 'SQGameSetupFunctionLibrary_GetFactionsFromSettingsString::ListIndex' has a wrong offset!");
static_assert(offsetof(SQGameSetupFunctionLibrary_GetFactionsFromSettingsString, ReturnValue) == 0x000018, "Member 'SQGameSetupFunctionLibrary_GetFactionsFromSettingsString::ReturnValue' has a wrong offset!");

// Function Squad.SQGameSetupFunctionLibrary.GetLayerSettingsFromString
// 0x0030 (0x0030 - 0x0000)
struct SQGameSetupFunctionLibrary_GetLayerSettingsFromString final
{
public:
	class FString                                 LayerString;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQLayerSettings                       ReturnValue;                                       // 0x0010(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSetupFunctionLibrary_GetLayerSettingsFromString) == 0x000008, "Wrong alignment on SQGameSetupFunctionLibrary_GetLayerSettingsFromString");
static_assert(sizeof(SQGameSetupFunctionLibrary_GetLayerSettingsFromString) == 0x000030, "Wrong size on SQGameSetupFunctionLibrary_GetLayerSettingsFromString");
static_assert(offsetof(SQGameSetupFunctionLibrary_GetLayerSettingsFromString, LayerString) == 0x000000, "Member 'SQGameSetupFunctionLibrary_GetLayerSettingsFromString::LayerString' has a wrong offset!");
static_assert(offsetof(SQGameSetupFunctionLibrary_GetLayerSettingsFromString, ReturnValue) == 0x000010, "Member 'SQGameSetupFunctionLibrary_GetLayerSettingsFromString::ReturnValue' has a wrong offset!");

// Function Squad.SQGameSetupFunctionLibrary.InjectFactionSetup
// 0x0010 (0x0010 - 0x0000)
struct SQGameSetupFunctionLibrary_InjectFactionSetup final
{
public:
	class USQFactionSetup*                        SQFactionSetup;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQLayer*                               TargetLayer;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSetupFunctionLibrary_InjectFactionSetup) == 0x000008, "Wrong alignment on SQGameSetupFunctionLibrary_InjectFactionSetup");
static_assert(sizeof(SQGameSetupFunctionLibrary_InjectFactionSetup) == 0x000010, "Wrong size on SQGameSetupFunctionLibrary_InjectFactionSetup");
static_assert(offsetof(SQGameSetupFunctionLibrary_InjectFactionSetup, SQFactionSetup) == 0x000000, "Member 'SQGameSetupFunctionLibrary_InjectFactionSetup::SQFactionSetup' has a wrong offset!");
static_assert(offsetof(SQGameSetupFunctionLibrary_InjectFactionSetup, TargetLayer) == 0x000008, "Member 'SQGameSetupFunctionLibrary_InjectFactionSetup::TargetLayer' has a wrong offset!");

// Function Squad.SQGameSubsystemInterface.InitializeSubsystem
// 0x0008 (0x0008 - 0x0000)
struct SQGameSubsystemInterface_InitializeSubsystem final
{
public:
	class USQGameInstance*                        SquadGameInstance;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGameSubsystemInterface_InitializeSubsystem) == 0x000008, "Wrong alignment on SQGameSubsystemInterface_InitializeSubsystem");
static_assert(sizeof(SQGameSubsystemInterface_InitializeSubsystem) == 0x000008, "Wrong size on SQGameSubsystemInterface_InitializeSubsystem");
static_assert(offsetof(SQGameSubsystemInterface_InitializeSubsystem, SquadGameInstance) == 0x000000, "Member 'SQGameSubsystemInterface_InitializeSubsystem::SquadGameInstance' has a wrong offset!");

// Function Squad.SQVehicleEmergencyRecoveryComponent.CustomRecoveryMulticast
// 0x0010 (0x0010 - 0x0000)
struct SQVehicleEmergencyRecoveryComponent_CustomRecoveryMulticast final
{
public:
	class ASQVehicle*                             Vehicle;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Instigator;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleEmergencyRecoveryComponent_CustomRecoveryMulticast) == 0x000008, "Wrong alignment on SQVehicleEmergencyRecoveryComponent_CustomRecoveryMulticast");
static_assert(sizeof(SQVehicleEmergencyRecoveryComponent_CustomRecoveryMulticast) == 0x000010, "Wrong size on SQVehicleEmergencyRecoveryComponent_CustomRecoveryMulticast");
static_assert(offsetof(SQVehicleEmergencyRecoveryComponent_CustomRecoveryMulticast, Vehicle) == 0x000000, "Member 'SQVehicleEmergencyRecoveryComponent_CustomRecoveryMulticast::Vehicle' has a wrong offset!");
static_assert(offsetof(SQVehicleEmergencyRecoveryComponent_CustomRecoveryMulticast, Instigator) == 0x000008, "Member 'SQVehicleEmergencyRecoveryComponent_CustomRecoveryMulticast::Instigator' has a wrong offset!");

// Function Squad.SQVehicleEmergencyRecoveryComponent.EmergencyRecovery
// 0x0010 (0x0010 - 0x0000)
struct SQVehicleEmergencyRecoveryComponent_EmergencyRecovery final
{
public:
	class AActor*                                 Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQVehicleRecoveryMethod                      RecoveryMethod;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11F9[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DesiredYawRotation;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleEmergencyRecoveryComponent_EmergencyRecovery) == 0x000008, "Wrong alignment on SQVehicleEmergencyRecoveryComponent_EmergencyRecovery");
static_assert(sizeof(SQVehicleEmergencyRecoveryComponent_EmergencyRecovery) == 0x000010, "Wrong size on SQVehicleEmergencyRecoveryComponent_EmergencyRecovery");
static_assert(offsetof(SQVehicleEmergencyRecoveryComponent_EmergencyRecovery, Instigator) == 0x000000, "Member 'SQVehicleEmergencyRecoveryComponent_EmergencyRecovery::Instigator' has a wrong offset!");
static_assert(offsetof(SQVehicleEmergencyRecoveryComponent_EmergencyRecovery, RecoveryMethod) == 0x000008, "Member 'SQVehicleEmergencyRecoveryComponent_EmergencyRecovery::RecoveryMethod' has a wrong offset!");
static_assert(offsetof(SQVehicleEmergencyRecoveryComponent_EmergencyRecovery, DesiredYawRotation) == 0x00000C, "Member 'SQVehicleEmergencyRecoveryComponent_EmergencyRecovery::DesiredYawRotation' has a wrong offset!");

// Function Squad.SQVehicleEmergencyRecoveryComponent.TeleportVehicleMulticast
// 0x0020 (0x0020 - 0x0000)
struct SQVehicleEmergencyRecoveryComponent_TeleportVehicleMulticast final
{
public:
	class ASQVehicle*                             Vehicle;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position;                                          // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleEmergencyRecoveryComponent_TeleportVehicleMulticast) == 0x000008, "Wrong alignment on SQVehicleEmergencyRecoveryComponent_TeleportVehicleMulticast");
static_assert(sizeof(SQVehicleEmergencyRecoveryComponent_TeleportVehicleMulticast) == 0x000020, "Wrong size on SQVehicleEmergencyRecoveryComponent_TeleportVehicleMulticast");
static_assert(offsetof(SQVehicleEmergencyRecoveryComponent_TeleportVehicleMulticast, Vehicle) == 0x000000, "Member 'SQVehicleEmergencyRecoveryComponent_TeleportVehicleMulticast::Vehicle' has a wrong offset!");
static_assert(offsetof(SQVehicleEmergencyRecoveryComponent_TeleportVehicleMulticast, Position) == 0x000008, "Member 'SQVehicleEmergencyRecoveryComponent_TeleportVehicleMulticast::Position' has a wrong offset!");
static_assert(offsetof(SQVehicleEmergencyRecoveryComponent_TeleportVehicleMulticast, Rotation) == 0x000014, "Member 'SQVehicleEmergencyRecoveryComponent_TeleportVehicleMulticast::Rotation' has a wrong offset!");

// Function Squad.SQVehicleEmergencyRecoveryComponent.CanUseEmergencyRecovery
// 0x0002 (0x0002 - 0x0000)
struct SQVehicleEmergencyRecoveryComponent_CanUseEmergencyRecovery final
{
public:
	ESQVehicleRecoveryMethod                      RecoveryMethod;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleEmergencyRecoveryComponent_CanUseEmergencyRecovery) == 0x000001, "Wrong alignment on SQVehicleEmergencyRecoveryComponent_CanUseEmergencyRecovery");
static_assert(sizeof(SQVehicleEmergencyRecoveryComponent_CanUseEmergencyRecovery) == 0x000002, "Wrong size on SQVehicleEmergencyRecoveryComponent_CanUseEmergencyRecovery");
static_assert(offsetof(SQVehicleEmergencyRecoveryComponent_CanUseEmergencyRecovery, RecoveryMethod) == 0x000000, "Member 'SQVehicleEmergencyRecoveryComponent_CanUseEmergencyRecovery::RecoveryMethod' has a wrong offset!");
static_assert(offsetof(SQVehicleEmergencyRecoveryComponent_CanUseEmergencyRecovery, ReturnValue) == 0x000001, "Member 'SQVehicleEmergencyRecoveryComponent_CanUseEmergencyRecovery::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleEmergencyRecoveryComponent.GetOwningVehicle
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleEmergencyRecoveryComponent_GetOwningVehicle final
{
public:
	class ASQVehicle*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleEmergencyRecoveryComponent_GetOwningVehicle) == 0x000008, "Wrong alignment on SQVehicleEmergencyRecoveryComponent_GetOwningVehicle");
static_assert(sizeof(SQVehicleEmergencyRecoveryComponent_GetOwningVehicle) == 0x000008, "Wrong size on SQVehicleEmergencyRecoveryComponent_GetOwningVehicle");
static_assert(offsetof(SQVehicleEmergencyRecoveryComponent_GetOwningVehicle, ReturnValue) == 0x000000, "Member 'SQVehicleEmergencyRecoveryComponent_GetOwningVehicle::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleEmergencyRecoveryComponent.GetRemainingRecoverCooldown
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleEmergencyRecoveryComponent_GetRemainingRecoverCooldown final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleEmergencyRecoveryComponent_GetRemainingRecoverCooldown) == 0x000004, "Wrong alignment on SQVehicleEmergencyRecoveryComponent_GetRemainingRecoverCooldown");
static_assert(sizeof(SQVehicleEmergencyRecoveryComponent_GetRemainingRecoverCooldown) == 0x000004, "Wrong size on SQVehicleEmergencyRecoveryComponent_GetRemainingRecoverCooldown");
static_assert(offsetof(SQVehicleEmergencyRecoveryComponent_GetRemainingRecoverCooldown, ReturnValue) == 0x000000, "Member 'SQVehicleEmergencyRecoveryComponent_GetRemainingRecoverCooldown::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleEmergencyRecoveryComponent.IsRecoveryOnCooldown
// 0x0001 (0x0001 - 0x0000)
struct SQVehicleEmergencyRecoveryComponent_IsRecoveryOnCooldown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleEmergencyRecoveryComponent_IsRecoveryOnCooldown) == 0x000001, "Wrong alignment on SQVehicleEmergencyRecoveryComponent_IsRecoveryOnCooldown");
static_assert(sizeof(SQVehicleEmergencyRecoveryComponent_IsRecoveryOnCooldown) == 0x000001, "Wrong size on SQVehicleEmergencyRecoveryComponent_IsRecoveryOnCooldown");
static_assert(offsetof(SQVehicleEmergencyRecoveryComponent_IsRecoveryOnCooldown, ReturnValue) == 0x000000, "Member 'SQVehicleEmergencyRecoveryComponent_IsRecoveryOnCooldown::ReturnValue' has a wrong offset!");

// Function Squad.SQGridMarkerBase.DrawWidget
// 0x0038 (0x0038 - 0x0000)
struct SQGridMarkerBase_DrawWidget final
{
public:
	class USQGridMarkerBase*                      MapGridMarker;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPaintContext                          Context;                                           // 0x0008(0x0030)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGridMarkerBase_DrawWidget) == 0x000008, "Wrong alignment on SQGridMarkerBase_DrawWidget");
static_assert(sizeof(SQGridMarkerBase_DrawWidget) == 0x000038, "Wrong size on SQGridMarkerBase_DrawWidget");
static_assert(offsetof(SQGridMarkerBase_DrawWidget, MapGridMarker) == 0x000000, "Member 'SQGridMarkerBase_DrawWidget::MapGridMarker' has a wrong offset!");
static_assert(offsetof(SQGridMarkerBase_DrawWidget, Context) == 0x000008, "Member 'SQGridMarkerBase_DrawWidget::Context' has a wrong offset!");

// Function Squad.SQVehicleMovementCommonSystems.TrySpawnWaterMovementComponent
// 0x0020 (0x0020 - 0x0000)
struct SQVehicleMovementCommonSystems_TrySpawnWaterMovementComponent final
{
public:
	class UObject*                                Param_Outer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQWaterMovementComponent>  ComponentToSpawn;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQWaterMovementComponent*              OutWaterMovementComponent;                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11FC[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVehicleMovementCommonSystems_TrySpawnWaterMovementComponent) == 0x000008, "Wrong alignment on SQVehicleMovementCommonSystems_TrySpawnWaterMovementComponent");
static_assert(sizeof(SQVehicleMovementCommonSystems_TrySpawnWaterMovementComponent) == 0x000020, "Wrong size on SQVehicleMovementCommonSystems_TrySpawnWaterMovementComponent");
static_assert(offsetof(SQVehicleMovementCommonSystems_TrySpawnWaterMovementComponent, Param_Outer) == 0x000000, "Member 'SQVehicleMovementCommonSystems_TrySpawnWaterMovementComponent::Param_Outer' has a wrong offset!");
static_assert(offsetof(SQVehicleMovementCommonSystems_TrySpawnWaterMovementComponent, ComponentToSpawn) == 0x000008, "Member 'SQVehicleMovementCommonSystems_TrySpawnWaterMovementComponent::ComponentToSpawn' has a wrong offset!");
static_assert(offsetof(SQVehicleMovementCommonSystems_TrySpawnWaterMovementComponent, OutWaterMovementComponent) == 0x000010, "Member 'SQVehicleMovementCommonSystems_TrySpawnWaterMovementComponent::OutWaterMovementComponent' has a wrong offset!");
static_assert(offsetof(SQVehicleMovementCommonSystems_TrySpawnWaterMovementComponent, ReturnValue) == 0x000018, "Member 'SQVehicleMovementCommonSystems_TrySpawnWaterMovementComponent::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleMovementCommonSystems.TryGetWaterMovementForwardSpeed
// 0x000C (0x000C - 0x0000)
struct SQVehicleMovementCommonSystems_TryGetWaterMovementForwardSpeed final
{
public:
	float                                         GroundSpeed;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WheelCount;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleMovementCommonSystems_TryGetWaterMovementForwardSpeed) == 0x000004, "Wrong alignment on SQVehicleMovementCommonSystems_TryGetWaterMovementForwardSpeed");
static_assert(sizeof(SQVehicleMovementCommonSystems_TryGetWaterMovementForwardSpeed) == 0x00000C, "Wrong size on SQVehicleMovementCommonSystems_TryGetWaterMovementForwardSpeed");
static_assert(offsetof(SQVehicleMovementCommonSystems_TryGetWaterMovementForwardSpeed, GroundSpeed) == 0x000000, "Member 'SQVehicleMovementCommonSystems_TryGetWaterMovementForwardSpeed::GroundSpeed' has a wrong offset!");
static_assert(offsetof(SQVehicleMovementCommonSystems_TryGetWaterMovementForwardSpeed, WheelCount) == 0x000004, "Member 'SQVehicleMovementCommonSystems_TryGetWaterMovementForwardSpeed::WheelCount' has a wrong offset!");
static_assert(offsetof(SQVehicleMovementCommonSystems_TryGetWaterMovementForwardSpeed, ReturnValue) == 0x000008, "Member 'SQVehicleMovementCommonSystems_TryGetWaterMovementForwardSpeed::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleMovementCommonSystems.TryGetWaterMovementMaxRotationSpeed
// 0x000C (0x000C - 0x0000)
struct SQVehicleMovementCommonSystems_TryGetWaterMovementMaxRotationSpeed final
{
public:
	float                                         OriginalMaxRotationSpeed;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WheelCount;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleMovementCommonSystems_TryGetWaterMovementMaxRotationSpeed) == 0x000004, "Wrong alignment on SQVehicleMovementCommonSystems_TryGetWaterMovementMaxRotationSpeed");
static_assert(sizeof(SQVehicleMovementCommonSystems_TryGetWaterMovementMaxRotationSpeed) == 0x00000C, "Wrong size on SQVehicleMovementCommonSystems_TryGetWaterMovementMaxRotationSpeed");
static_assert(offsetof(SQVehicleMovementCommonSystems_TryGetWaterMovementMaxRotationSpeed, OriginalMaxRotationSpeed) == 0x000000, "Member 'SQVehicleMovementCommonSystems_TryGetWaterMovementMaxRotationSpeed::OriginalMaxRotationSpeed' has a wrong offset!");
static_assert(offsetof(SQVehicleMovementCommonSystems_TryGetWaterMovementMaxRotationSpeed, WheelCount) == 0x000004, "Member 'SQVehicleMovementCommonSystems_TryGetWaterMovementMaxRotationSpeed::WheelCount' has a wrong offset!");
static_assert(offsetof(SQVehicleMovementCommonSystems_TryGetWaterMovementMaxRotationSpeed, ReturnValue) == 0x000008, "Member 'SQVehicleMovementCommonSystems_TryGetWaterMovementMaxRotationSpeed::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleMovementCommonSystems.TryGetWaterMovementRotationSpeed
// 0x000C (0x000C - 0x0000)
struct SQVehicleMovementCommonSystems_TryGetWaterMovementRotationSpeed final
{
public:
	float                                         OriginalRotationSpeed;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WheelCount;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleMovementCommonSystems_TryGetWaterMovementRotationSpeed) == 0x000004, "Wrong alignment on SQVehicleMovementCommonSystems_TryGetWaterMovementRotationSpeed");
static_assert(sizeof(SQVehicleMovementCommonSystems_TryGetWaterMovementRotationSpeed) == 0x00000C, "Wrong size on SQVehicleMovementCommonSystems_TryGetWaterMovementRotationSpeed");
static_assert(offsetof(SQVehicleMovementCommonSystems_TryGetWaterMovementRotationSpeed, OriginalRotationSpeed) == 0x000000, "Member 'SQVehicleMovementCommonSystems_TryGetWaterMovementRotationSpeed::OriginalRotationSpeed' has a wrong offset!");
static_assert(offsetof(SQVehicleMovementCommonSystems_TryGetWaterMovementRotationSpeed, WheelCount) == 0x000004, "Member 'SQVehicleMovementCommonSystems_TryGetWaterMovementRotationSpeed::WheelCount' has a wrong offset!");
static_assert(offsetof(SQVehicleMovementCommonSystems_TryGetWaterMovementRotationSpeed, ReturnValue) == 0x000008, "Member 'SQVehicleMovementCommonSystems_TryGetWaterMovementRotationSpeed::ReturnValue' has a wrong offset!");

// Function Squad.SQGridMarkerUnit.SetBoxSize
// 0x0004 (0x0004 - 0x0000)
struct SQGridMarkerUnit_SetBoxSize final
{
public:
	float                                         NewSize;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGridMarkerUnit_SetBoxSize) == 0x000004, "Wrong alignment on SQGridMarkerUnit_SetBoxSize");
static_assert(sizeof(SQGridMarkerUnit_SetBoxSize) == 0x000004, "Wrong size on SQGridMarkerUnit_SetBoxSize");
static_assert(offsetof(SQGridMarkerUnit_SetBoxSize, NewSize) == 0x000000, "Member 'SQGridMarkerUnit_SetBoxSize::NewSize' has a wrong offset!");

// Function Squad.SQGuidanceComponent.LoseConnection
// 0x0001 (0x0001 - 0x0000)
struct SQGuidanceComponent_LoseConnection final
{
public:
	EGuidanceLossReason                           LossReason;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGuidanceComponent_LoseConnection) == 0x000001, "Wrong alignment on SQGuidanceComponent_LoseConnection");
static_assert(sizeof(SQGuidanceComponent_LoseConnection) == 0x000001, "Wrong size on SQGuidanceComponent_LoseConnection");
static_assert(offsetof(SQGuidanceComponent_LoseConnection, LossReason) == 0x000000, "Member 'SQGuidanceComponent_LoseConnection::LossReason' has a wrong offset!");

// Function Squad.SQGuidanceComponent.LoseGuidance
// 0x0001 (0x0001 - 0x0000)
struct SQGuidanceComponent_LoseGuidance final
{
public:
	EGuidanceLossReason                           LossReason;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGuidanceComponent_LoseGuidance) == 0x000001, "Wrong alignment on SQGuidanceComponent_LoseGuidance");
static_assert(sizeof(SQGuidanceComponent_LoseGuidance) == 0x000001, "Wrong size on SQGuidanceComponent_LoseGuidance");
static_assert(offsetof(SQGuidanceComponent_LoseGuidance, LossReason) == 0x000000, "Member 'SQGuidanceComponent_LoseGuidance::LossReason' has a wrong offset!");

// Function Squad.SQGuidanceComponent.StartLaunchPhase
// 0x0008 (0x0008 - 0x0000)
struct SQGuidanceComponent_StartLaunchPhase final
{
public:
	class USQGuidanceControllerComponent*         GuidanceController;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGuidanceComponent_StartLaunchPhase) == 0x000008, "Wrong alignment on SQGuidanceComponent_StartLaunchPhase");
static_assert(sizeof(SQGuidanceComponent_StartLaunchPhase) == 0x000008, "Wrong size on SQGuidanceComponent_StartLaunchPhase");
static_assert(offsetof(SQGuidanceComponent_StartLaunchPhase, GuidanceController) == 0x000000, "Member 'SQGuidanceComponent_StartLaunchPhase::GuidanceController' has a wrong offset!");

// Function Squad.SQGuidanceComponent.TryGainGuidance
// 0x0001 (0x0001 - 0x0000)
struct SQGuidanceComponent_TryGainGuidance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGuidanceComponent_TryGainGuidance) == 0x000001, "Wrong alignment on SQGuidanceComponent_TryGainGuidance");
static_assert(sizeof(SQGuidanceComponent_TryGainGuidance) == 0x000001, "Wrong size on SQGuidanceComponent_TryGainGuidance");
static_assert(offsetof(SQGuidanceComponent_TryGainGuidance, ReturnValue) == 0x000000, "Member 'SQGuidanceComponent_TryGainGuidance::ReturnValue' has a wrong offset!");

// Function Squad.SQGuidanceComponent.IsBeingGuided
// 0x0001 (0x0001 - 0x0000)
struct SQGuidanceComponent_IsBeingGuided final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQGuidanceComponent_IsBeingGuided) == 0x000001, "Wrong alignment on SQGuidanceComponent_IsBeingGuided");
static_assert(sizeof(SQGuidanceComponent_IsBeingGuided) == 0x000001, "Wrong size on SQGuidanceComponent_IsBeingGuided");
static_assert(offsetof(SQGuidanceComponent_IsBeingGuided, ReturnValue) == 0x000000, "Member 'SQGuidanceComponent_IsBeingGuided::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleSettings.ShouldCauseSieged
// 0x0010 (0x0010 - 0x0000)
struct SQVehicleSettings_ShouldCauseSieged final
{
public:
	const class ASQGameSpawn*                     Spawn;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1200[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVehicleSettings_ShouldCauseSieged) == 0x000008, "Wrong alignment on SQVehicleSettings_ShouldCauseSieged");
static_assert(sizeof(SQVehicleSettings_ShouldCauseSieged) == 0x000010, "Wrong size on SQVehicleSettings_ShouldCauseSieged");
static_assert(offsetof(SQVehicleSettings_ShouldCauseSieged, Spawn) == 0x000000, "Member 'SQVehicleSettings_ShouldCauseSieged::Spawn' has a wrong offset!");
static_assert(offsetof(SQVehicleSettings_ShouldCauseSieged, ReturnValue) == 0x000008, "Member 'SQVehicleSettings_ShouldCauseSieged::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleSettings.TryGetVehicleWithLayer
// 0x0038 (0x0038 - 0x0000)
struct SQVehicleSettings_TryGetVehicleWithLayer final
{
public:
	const class USQLayer*                         InLayer;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   OutVehicle;                                        // 0x0008(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1201[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVehicleSettings_TryGetVehicleWithLayer) == 0x000008, "Wrong alignment on SQVehicleSettings_TryGetVehicleWithLayer");
static_assert(sizeof(SQVehicleSettings_TryGetVehicleWithLayer) == 0x000038, "Wrong size on SQVehicleSettings_TryGetVehicleWithLayer");
static_assert(offsetof(SQVehicleSettings_TryGetVehicleWithLayer, InLayer) == 0x000000, "Member 'SQVehicleSettings_TryGetVehicleWithLayer::InLayer' has a wrong offset!");
static_assert(offsetof(SQVehicleSettings_TryGetVehicleWithLayer, OutVehicle) == 0x000008, "Member 'SQVehicleSettings_TryGetVehicleWithLayer::OutVehicle' has a wrong offset!");
static_assert(offsetof(SQVehicleSettings_TryGetVehicleWithLayer, ReturnValue) == 0x000030, "Member 'SQVehicleSettings_TryGetVehicleWithLayer::ReturnValue' has a wrong offset!");

// Function Squad.SQMortarProjectile.SpawnArtilleryProjectile
// 0x0038 (0x0038 - 0x0000)
struct SQMortarProjectile_SpawnArtilleryProjectile final
{
public:
	TSubclassOf<class ASQMortarProjectile>        ProjectileClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            InstigatorController;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ProjectileOwner;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0024(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InitialVelocity;                                   // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreatedOnServer;                                  // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1206[0x3];                                     // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQMortarProjectile_SpawnArtilleryProjectile) == 0x000008, "Wrong alignment on SQMortarProjectile_SpawnArtilleryProjectile");
static_assert(sizeof(SQMortarProjectile_SpawnArtilleryProjectile) == 0x000038, "Wrong size on SQMortarProjectile_SpawnArtilleryProjectile");
static_assert(offsetof(SQMortarProjectile_SpawnArtilleryProjectile, ProjectileClass) == 0x000000, "Member 'SQMortarProjectile_SpawnArtilleryProjectile::ProjectileClass' has a wrong offset!");
static_assert(offsetof(SQMortarProjectile_SpawnArtilleryProjectile, InstigatorController) == 0x000008, "Member 'SQMortarProjectile_SpawnArtilleryProjectile::InstigatorController' has a wrong offset!");
static_assert(offsetof(SQMortarProjectile_SpawnArtilleryProjectile, ProjectileOwner) == 0x000010, "Member 'SQMortarProjectile_SpawnArtilleryProjectile::ProjectileOwner' has a wrong offset!");
static_assert(offsetof(SQMortarProjectile_SpawnArtilleryProjectile, Location) == 0x000018, "Member 'SQMortarProjectile_SpawnArtilleryProjectile::Location' has a wrong offset!");
static_assert(offsetof(SQMortarProjectile_SpawnArtilleryProjectile, Rotation) == 0x000024, "Member 'SQMortarProjectile_SpawnArtilleryProjectile::Rotation' has a wrong offset!");
static_assert(offsetof(SQMortarProjectile_SpawnArtilleryProjectile, InitialVelocity) == 0x000030, "Member 'SQMortarProjectile_SpawnArtilleryProjectile::InitialVelocity' has a wrong offset!");
static_assert(offsetof(SQMortarProjectile_SpawnArtilleryProjectile, bCreatedOnServer) == 0x000034, "Member 'SQMortarProjectile_SpawnArtilleryProjectile::bCreatedOnServer' has a wrong offset!");

// Function Squad.SQGuidedProjectile.OnConnectionLost
// 0x0010 (0x0010 - 0x0000)
struct SQGuidedProjectile_OnConnectionLost final
{
public:
	class USQGuidanceComponent*                   InGuidanceComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuidanceLossReason                           LossReason;                                        // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1207[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQGuidedProjectile_OnConnectionLost) == 0x000008, "Wrong alignment on SQGuidedProjectile_OnConnectionLost");
static_assert(sizeof(SQGuidedProjectile_OnConnectionLost) == 0x000010, "Wrong size on SQGuidedProjectile_OnConnectionLost");
static_assert(offsetof(SQGuidedProjectile_OnConnectionLost, InGuidanceComponent) == 0x000000, "Member 'SQGuidedProjectile_OnConnectionLost::InGuidanceComponent' has a wrong offset!");
static_assert(offsetof(SQGuidedProjectile_OnConnectionLost, LossReason) == 0x000008, "Member 'SQGuidedProjectile_OnConnectionLost::LossReason' has a wrong offset!");

// Function Squad.SQHelicopter2.EnablePhysicsSimulation
// 0x0001 (0x0001 - 0x0000)
struct SQHelicopter2_EnablePhysicsSimulation final
{
public:
	bool                                          bSimulate;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHelicopter2_EnablePhysicsSimulation) == 0x000001, "Wrong alignment on SQHelicopter2_EnablePhysicsSimulation");
static_assert(sizeof(SQHelicopter2_EnablePhysicsSimulation) == 0x000001, "Wrong size on SQHelicopter2_EnablePhysicsSimulation");
static_assert(offsetof(SQHelicopter2_EnablePhysicsSimulation, bSimulate) == 0x000000, "Member 'SQHelicopter2_EnablePhysicsSimulation::bSimulate' has a wrong offset!");

// Function Squad.SQHelicopter2.MainRotorDestroyedHandler
// 0x0008 (0x0008 - 0x0000)
struct SQHelicopter2_MainRotorDestroyedHandler final
{
public:
	class USQVehicleComponent*                    VehicleComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHelicopter2_MainRotorDestroyedHandler) == 0x000008, "Wrong alignment on SQHelicopter2_MainRotorDestroyedHandler");
static_assert(sizeof(SQHelicopter2_MainRotorDestroyedHandler) == 0x000008, "Wrong size on SQHelicopter2_MainRotorDestroyedHandler");
static_assert(offsetof(SQHelicopter2_MainRotorDestroyedHandler, VehicleComponent) == 0x000000, "Member 'SQHelicopter2_MainRotorDestroyedHandler::VehicleComponent' has a wrong offset!");

// Function Squad.SQHelicopter2.GetMainRotorThrust
// 0x0004 (0x0004 - 0x0000)
struct SQHelicopter2_GetMainRotorThrust final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHelicopter2_GetMainRotorThrust) == 0x000004, "Wrong alignment on SQHelicopter2_GetMainRotorThrust");
static_assert(sizeof(SQHelicopter2_GetMainRotorThrust) == 0x000004, "Wrong size on SQHelicopter2_GetMainRotorThrust");
static_assert(offsetof(SQHelicopter2_GetMainRotorThrust, ReturnValue) == 0x000000, "Member 'SQHelicopter2_GetMainRotorThrust::ReturnValue' has a wrong offset!");

// Function Squad.SQHelicopter2.GetMaxRPM
// 0x0004 (0x0004 - 0x0000)
struct SQHelicopter2_GetMaxRPM final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHelicopter2_GetMaxRPM) == 0x000004, "Wrong alignment on SQHelicopter2_GetMaxRPM");
static_assert(sizeof(SQHelicopter2_GetMaxRPM) == 0x000004, "Wrong size on SQHelicopter2_GetMaxRPM");
static_assert(offsetof(SQHelicopter2_GetMaxRPM, ReturnValue) == 0x000000, "Member 'SQHelicopter2_GetMaxRPM::ReturnValue' has a wrong offset!");

// Function Squad.SQHelicopter2.GetTailRotorThrust
// 0x0004 (0x0004 - 0x0000)
struct SQHelicopter2_GetTailRotorThrust final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHelicopter2_GetTailRotorThrust) == 0x000004, "Wrong alignment on SQHelicopter2_GetTailRotorThrust");
static_assert(sizeof(SQHelicopter2_GetTailRotorThrust) == 0x000004, "Wrong size on SQHelicopter2_GetTailRotorThrust");
static_assert(offsetof(SQHelicopter2_GetTailRotorThrust, ReturnValue) == 0x000000, "Member 'SQHelicopter2_GetTailRotorThrust::ReturnValue' has a wrong offset!");

// Function Squad.SQHelicopter2.GetThrottle
// 0x0004 (0x0004 - 0x0000)
struct SQHelicopter2_GetThrottle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHelicopter2_GetThrottle) == 0x000004, "Wrong alignment on SQHelicopter2_GetThrottle");
static_assert(sizeof(SQHelicopter2_GetThrottle) == 0x000004, "Wrong size on SQHelicopter2_GetThrottle");
static_assert(offsetof(SQHelicopter2_GetThrottle, ReturnValue) == 0x000000, "Member 'SQHelicopter2_GetThrottle::ReturnValue' has a wrong offset!");

// Function Squad.SQHelicopter2.IsLanded
// 0x0001 (0x0001 - 0x0000)
struct SQHelicopter2_IsLanded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHelicopter2_IsLanded) == 0x000001, "Wrong alignment on SQHelicopter2_IsLanded");
static_assert(sizeof(SQHelicopter2_IsLanded) == 0x000001, "Wrong size on SQHelicopter2_IsLanded");
static_assert(offsetof(SQHelicopter2_IsLanded, ReturnValue) == 0x000000, "Member 'SQHelicopter2_IsLanded::ReturnValue' has a wrong offset!");

// Function Squad.SQHelicopter2.IsMainRotorColliding
// 0x0001 (0x0001 - 0x0000)
struct SQHelicopter2_IsMainRotorColliding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHelicopter2_IsMainRotorColliding) == 0x000001, "Wrong alignment on SQHelicopter2_IsMainRotorColliding");
static_assert(sizeof(SQHelicopter2_IsMainRotorColliding) == 0x000001, "Wrong size on SQHelicopter2_IsMainRotorColliding");
static_assert(offsetof(SQHelicopter2_IsMainRotorColliding, ReturnValue) == 0x000000, "Member 'SQHelicopter2_IsMainRotorColliding::ReturnValue' has a wrong offset!");

// Function Squad.SQHelicopter2.IsPhysicsEnabled
// 0x0001 (0x0001 - 0x0000)
struct SQHelicopter2_IsPhysicsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHelicopter2_IsPhysicsEnabled) == 0x000001, "Wrong alignment on SQHelicopter2_IsPhysicsEnabled");
static_assert(sizeof(SQHelicopter2_IsPhysicsEnabled) == 0x000001, "Wrong size on SQHelicopter2_IsPhysicsEnabled");
static_assert(offsetof(SQHelicopter2_IsPhysicsEnabled, ReturnValue) == 0x000000, "Member 'SQHelicopter2_IsPhysicsEnabled::ReturnValue' has a wrong offset!");

// Function Squad.SQHelicopter2.IsTailRotorColliding
// 0x0001 (0x0001 - 0x0000)
struct SQHelicopter2_IsTailRotorColliding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHelicopter2_IsTailRotorColliding) == 0x000001, "Wrong alignment on SQHelicopter2_IsTailRotorColliding");
static_assert(sizeof(SQHelicopter2_IsTailRotorColliding) == 0x000001, "Wrong size on SQHelicopter2_IsTailRotorColliding");
static_assert(offsetof(SQHelicopter2_IsTailRotorColliding, ReturnValue) == 0x000000, "Member 'SQHelicopter2_IsTailRotorColliding::ReturnValue' has a wrong offset!");

// Function Squad.SQHelicopter2.SlerpToUpSideDown
// 0x0010 (0x0010 - 0x0000)
struct SQHelicopter2_SlerpToUpSideDown final
{
public:
	float                                         AngleRad;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHelicopter2_SlerpToUpSideDown) == 0x000004, "Wrong alignment on SQHelicopter2_SlerpToUpSideDown");
static_assert(sizeof(SQHelicopter2_SlerpToUpSideDown) == 0x000010, "Wrong size on SQHelicopter2_SlerpToUpSideDown");
static_assert(offsetof(SQHelicopter2_SlerpToUpSideDown, AngleRad) == 0x000000, "Member 'SQHelicopter2_SlerpToUpSideDown::AngleRad' has a wrong offset!");
static_assert(offsetof(SQHelicopter2_SlerpToUpSideDown, ReturnValue) == 0x000004, "Member 'SQHelicopter2_SlerpToUpSideDown::ReturnValue' has a wrong offset!");

// Function Squad.SQHelicopterInstruments.SetActivationProgress
// 0x0004 (0x0004 - 0x0000)
struct SQHelicopterInstruments_SetActivationProgress final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHelicopterInstruments_SetActivationProgress) == 0x000004, "Wrong alignment on SQHelicopterInstruments_SetActivationProgress");
static_assert(sizeof(SQHelicopterInstruments_SetActivationProgress) == 0x000004, "Wrong size on SQHelicopterInstruments_SetActivationProgress");
static_assert(offsetof(SQHelicopterInstruments_SetActivationProgress, Progress) == 0x000000, "Member 'SQHelicopterInstruments_SetActivationProgress::Progress' has a wrong offset!");

// Function Squad.SQHelicopterInstruments.GetActivationProgress
// 0x0004 (0x0004 - 0x0000)
struct SQHelicopterInstruments_GetActivationProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHelicopterInstruments_GetActivationProgress) == 0x000004, "Wrong alignment on SQHelicopterInstruments_GetActivationProgress");
static_assert(sizeof(SQHelicopterInstruments_GetActivationProgress) == 0x000004, "Wrong size on SQHelicopterInstruments_GetActivationProgress");
static_assert(offsetof(SQHelicopterInstruments_GetActivationProgress, ReturnValue) == 0x000000, "Member 'SQHelicopterInstruments_GetActivationProgress::ReturnValue' has a wrong offset!");

// Function Squad.SQHelicopterInstruments.GetForwardSpeed
// 0x0004 (0x0004 - 0x0000)
struct SQHelicopterInstruments_GetForwardSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHelicopterInstruments_GetForwardSpeed) == 0x000004, "Wrong alignment on SQHelicopterInstruments_GetForwardSpeed");
static_assert(sizeof(SQHelicopterInstruments_GetForwardSpeed) == 0x000004, "Wrong size on SQHelicopterInstruments_GetForwardSpeed");
static_assert(offsetof(SQHelicopterInstruments_GetForwardSpeed, ReturnValue) == 0x000000, "Member 'SQHelicopterInstruments_GetForwardSpeed::ReturnValue' has a wrong offset!");

// Function Squad.SQHelicopterInstruments.GetLiftInput
// 0x0004 (0x0004 - 0x0000)
struct SQHelicopterInstruments_GetLiftInput final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHelicopterInstruments_GetLiftInput) == 0x000004, "Wrong alignment on SQHelicopterInstruments_GetLiftInput");
static_assert(sizeof(SQHelicopterInstruments_GetLiftInput) == 0x000004, "Wrong size on SQHelicopterInstruments_GetLiftInput");
static_assert(offsetof(SQHelicopterInstruments_GetLiftInput, ReturnValue) == 0x000000, "Member 'SQHelicopterInstruments_GetLiftInput::ReturnValue' has a wrong offset!");

// Function Squad.SQHelicopterInstruments.GetMaxLift
// 0x0004 (0x0004 - 0x0000)
struct SQHelicopterInstruments_GetMaxLift final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHelicopterInstruments_GetMaxLift) == 0x000004, "Wrong alignment on SQHelicopterInstruments_GetMaxLift");
static_assert(sizeof(SQHelicopterInstruments_GetMaxLift) == 0x000004, "Wrong size on SQHelicopterInstruments_GetMaxLift");
static_assert(offsetof(SQHelicopterInstruments_GetMaxLift, ReturnValue) == 0x000000, "Member 'SQHelicopterInstruments_GetMaxLift::ReturnValue' has a wrong offset!");

// Function Squad.SQHelicopterInstruments.GetPitchInput
// 0x0004 (0x0004 - 0x0000)
struct SQHelicopterInstruments_GetPitchInput final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHelicopterInstruments_GetPitchInput) == 0x000004, "Wrong alignment on SQHelicopterInstruments_GetPitchInput");
static_assert(sizeof(SQHelicopterInstruments_GetPitchInput) == 0x000004, "Wrong size on SQHelicopterInstruments_GetPitchInput");
static_assert(offsetof(SQHelicopterInstruments_GetPitchInput, ReturnValue) == 0x000000, "Member 'SQHelicopterInstruments_GetPitchInput::ReturnValue' has a wrong offset!");

// Function Squad.SQHelicopterInstruments.GetRollInput
// 0x0004 (0x0004 - 0x0000)
struct SQHelicopterInstruments_GetRollInput final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHelicopterInstruments_GetRollInput) == 0x000004, "Wrong alignment on SQHelicopterInstruments_GetRollInput");
static_assert(sizeof(SQHelicopterInstruments_GetRollInput) == 0x000004, "Wrong size on SQHelicopterInstruments_GetRollInput");
static_assert(offsetof(SQHelicopterInstruments_GetRollInput, ReturnValue) == 0x000000, "Member 'SQHelicopterInstruments_GetRollInput::ReturnValue' has a wrong offset!");

// Function Squad.SQHelicopterInstruments.GetYawInput
// 0x0004 (0x0004 - 0x0000)
struct SQHelicopterInstruments_GetYawInput final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHelicopterInstruments_GetYawInput) == 0x000004, "Wrong alignment on SQHelicopterInstruments_GetYawInput");
static_assert(sizeof(SQHelicopterInstruments_GetYawInput) == 0x000004, "Wrong size on SQHelicopterInstruments_GetYawInput");
static_assert(offsetof(SQHelicopterInstruments_GetYawInput, ReturnValue) == 0x000000, "Member 'SQHelicopterInstruments_GetYawInput::ReturnValue' has a wrong offset!");

// Function Squad.SQHelicopterInstruments.IsEngineActive
// 0x0001 (0x0001 - 0x0000)
struct SQHelicopterInstruments_IsEngineActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHelicopterInstruments_IsEngineActive) == 0x000001, "Wrong alignment on SQHelicopterInstruments_IsEngineActive");
static_assert(sizeof(SQHelicopterInstruments_IsEngineActive) == 0x000001, "Wrong size on SQHelicopterInstruments_IsEngineActive");
static_assert(offsetof(SQHelicopterInstruments_IsEngineActive, ReturnValue) == 0x000000, "Member 'SQHelicopterInstruments_IsEngineActive::ReturnValue' has a wrong offset!");

// Function Squad.SQHelicopterMovementComponent.AddForce
// 0x000C (0x000C - 0x0000)
struct SQHelicopterMovementComponent_AddForce final
{
public:
	struct FVector                                Force;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHelicopterMovementComponent_AddForce) == 0x000004, "Wrong alignment on SQHelicopterMovementComponent_AddForce");
static_assert(sizeof(SQHelicopterMovementComponent_AddForce) == 0x00000C, "Wrong size on SQHelicopterMovementComponent_AddForce");
static_assert(offsetof(SQHelicopterMovementComponent_AddForce, Force) == 0x000000, "Member 'SQHelicopterMovementComponent_AddForce::Force' has a wrong offset!");

// Function Squad.SQHelicopterMovementComponent.AddImpulse
// 0x0010 (0x0010 - 0x0000)
struct SQHelicopterMovementComponent_AddImpulse final
{
public:
	struct FVector                                Impulse;                                           // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVelocityChange;                                   // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1213[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQHelicopterMovementComponent_AddImpulse) == 0x000004, "Wrong alignment on SQHelicopterMovementComponent_AddImpulse");
static_assert(sizeof(SQHelicopterMovementComponent_AddImpulse) == 0x000010, "Wrong size on SQHelicopterMovementComponent_AddImpulse");
static_assert(offsetof(SQHelicopterMovementComponent_AddImpulse, Impulse) == 0x000000, "Member 'SQHelicopterMovementComponent_AddImpulse::Impulse' has a wrong offset!");
static_assert(offsetof(SQHelicopterMovementComponent_AddImpulse, bVelocityChange) == 0x00000C, "Member 'SQHelicopterMovementComponent_AddImpulse::bVelocityChange' has a wrong offset!");

// Function Squad.SQHelicopterMovementComponent.AddRotationInput
// 0x000C (0x000C - 0x0000)
struct SQHelicopterMovementComponent_AddRotationInput final
{
public:
	struct FRotator                               InRotationInput;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHelicopterMovementComponent_AddRotationInput) == 0x000004, "Wrong alignment on SQHelicopterMovementComponent_AddRotationInput");
static_assert(sizeof(SQHelicopterMovementComponent_AddRotationInput) == 0x00000C, "Wrong size on SQHelicopterMovementComponent_AddRotationInput");
static_assert(offsetof(SQHelicopterMovementComponent_AddRotationInput, InRotationInput) == 0x000000, "Member 'SQHelicopterMovementComponent_AddRotationInput::InRotationInput' has a wrong offset!");

// Function Squad.SQHelicopterMovementComponent.CapsuleTouched
// 0x00A8 (0x00A8 - 0x0000)
struct SQHelicopterMovementComponent_CapsuleTouched final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1214[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHelicopterMovementComponent_CapsuleTouched) == 0x000008, "Wrong alignment on SQHelicopterMovementComponent_CapsuleTouched");
static_assert(sizeof(SQHelicopterMovementComponent_CapsuleTouched) == 0x0000A8, "Wrong size on SQHelicopterMovementComponent_CapsuleTouched");
static_assert(offsetof(SQHelicopterMovementComponent_CapsuleTouched, OverlappedComp) == 0x000000, "Member 'SQHelicopterMovementComponent_CapsuleTouched::OverlappedComp' has a wrong offset!");
static_assert(offsetof(SQHelicopterMovementComponent_CapsuleTouched, Other) == 0x000008, "Member 'SQHelicopterMovementComponent_CapsuleTouched::Other' has a wrong offset!");
static_assert(offsetof(SQHelicopterMovementComponent_CapsuleTouched, OtherComp) == 0x000010, "Member 'SQHelicopterMovementComponent_CapsuleTouched::OtherComp' has a wrong offset!");
static_assert(offsetof(SQHelicopterMovementComponent_CapsuleTouched, OtherBodyIndex) == 0x000018, "Member 'SQHelicopterMovementComponent_CapsuleTouched::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SQHelicopterMovementComponent_CapsuleTouched, bFromSweep) == 0x00001C, "Member 'SQHelicopterMovementComponent_CapsuleTouched::bFromSweep' has a wrong offset!");
static_assert(offsetof(SQHelicopterMovementComponent_CapsuleTouched, SweepResult) == 0x000020, "Member 'SQHelicopterMovementComponent_CapsuleTouched::SweepResult' has a wrong offset!");

// Function Squad.SQHelicopterMovementComponent.GetMaxAcceleration
// 0x0004 (0x0004 - 0x0000)
struct SQHelicopterMovementComponent_GetMaxAcceleration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHelicopterMovementComponent_GetMaxAcceleration) == 0x000004, "Wrong alignment on SQHelicopterMovementComponent_GetMaxAcceleration");
static_assert(sizeof(SQHelicopterMovementComponent_GetMaxAcceleration) == 0x000004, "Wrong size on SQHelicopterMovementComponent_GetMaxAcceleration");
static_assert(offsetof(SQHelicopterMovementComponent_GetMaxAcceleration, ReturnValue) == 0x000000, "Member 'SQHelicopterMovementComponent_GetMaxAcceleration::ReturnValue' has a wrong offset!");

// Function Squad.SQHelicopterMovementComponent.GetMaxBrakingDeceleration
// 0x0004 (0x0004 - 0x0000)
struct SQHelicopterMovementComponent_GetMaxBrakingDeceleration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHelicopterMovementComponent_GetMaxBrakingDeceleration) == 0x000004, "Wrong alignment on SQHelicopterMovementComponent_GetMaxBrakingDeceleration");
static_assert(sizeof(SQHelicopterMovementComponent_GetMaxBrakingDeceleration) == 0x000004, "Wrong size on SQHelicopterMovementComponent_GetMaxBrakingDeceleration");
static_assert(offsetof(SQHelicopterMovementComponent_GetMaxBrakingDeceleration, ReturnValue) == 0x000000, "Member 'SQHelicopterMovementComponent_GetMaxBrakingDeceleration::ReturnValue' has a wrong offset!");

// Function Squad.SQHelicopterMovementComponent.GetRotationInput
// 0x000C (0x000C - 0x0000)
struct SQHelicopterMovementComponent_GetRotationInput final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHelicopterMovementComponent_GetRotationInput) == 0x000004, "Wrong alignment on SQHelicopterMovementComponent_GetRotationInput");
static_assert(sizeof(SQHelicopterMovementComponent_GetRotationInput) == 0x00000C, "Wrong size on SQHelicopterMovementComponent_GetRotationInput");
static_assert(offsetof(SQHelicopterMovementComponent_GetRotationInput, ReturnValue) == 0x000000, "Member 'SQHelicopterMovementComponent_GetRotationInput::ReturnValue' has a wrong offset!");

// Function Squad.SQHelicopterMovementComponent.IsSimulatingPhysics
// 0x0001 (0x0001 - 0x0000)
struct SQHelicopterMovementComponent_IsSimulatingPhysics final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHelicopterMovementComponent_IsSimulatingPhysics) == 0x000001, "Wrong alignment on SQHelicopterMovementComponent_IsSimulatingPhysics");
static_assert(sizeof(SQHelicopterMovementComponent_IsSimulatingPhysics) == 0x000001, "Wrong size on SQHelicopterMovementComponent_IsSimulatingPhysics");
static_assert(offsetof(SQHelicopterMovementComponent_IsSimulatingPhysics, ReturnValue) == 0x000000, "Member 'SQHelicopterMovementComponent_IsSimulatingPhysics::ReturnValue' has a wrong offset!");

// Function Squad.SQHUDWidget.Draw
// 0x0004 (0x0004 - 0x0000)
struct SQHUDWidget_Draw final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUDWidget_Draw) == 0x000004, "Wrong alignment on SQHUDWidget_Draw");
static_assert(sizeof(SQHUDWidget_Draw) == 0x000004, "Wrong size on SQHUDWidget_Draw");
static_assert(offsetof(SQHUDWidget_Draw, DeltaTime) == 0x000000, "Member 'SQHUDWidget_Draw::DeltaTime' has a wrong offset!");

// Function Squad.SQHUDWidget.Init
// 0x0008 (0x0008 - 0x0000)
struct SQHUDWidget_Init final
{
public:
	class ASQHUD*                                 InHUD;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUDWidget_Init) == 0x000008, "Wrong alignment on SQHUDWidget_Init");
static_assert(sizeof(SQHUDWidget_Init) == 0x000008, "Wrong size on SQHUDWidget_Init");
static_assert(offsetof(SQHUDWidget_Init, InHUD) == 0x000000, "Member 'SQHUDWidget_Init::InHUD' has a wrong offset!");

// Function Squad.SQHUDWidget.BPDrawMaterial
// 0x0050 (0x0050 - 0x0000)
struct SQHUDWidget_BPDrawMaterial final
{
public:
	class UMaterialInterface*                     Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         U;                                                 // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         V;                                                 // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UL;                                                // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VL;                                                // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawingAlpha;                                      // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x002C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DrawingOffset;                                     // 0x003C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rotation;                                          // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RotationPivotPoint;                                // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUDWidget_BPDrawMaterial) == 0x000008, "Wrong alignment on SQHUDWidget_BPDrawMaterial");
static_assert(sizeof(SQHUDWidget_BPDrawMaterial) == 0x000050, "Wrong size on SQHUDWidget_BPDrawMaterial");
static_assert(offsetof(SQHUDWidget_BPDrawMaterial, Material) == 0x000000, "Member 'SQHUDWidget_BPDrawMaterial::Material' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawMaterial, X) == 0x000008, "Member 'SQHUDWidget_BPDrawMaterial::X' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawMaterial, Y) == 0x00000C, "Member 'SQHUDWidget_BPDrawMaterial::Y' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawMaterial, Width) == 0x000010, "Member 'SQHUDWidget_BPDrawMaterial::Width' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawMaterial, Height) == 0x000014, "Member 'SQHUDWidget_BPDrawMaterial::Height' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawMaterial, U) == 0x000018, "Member 'SQHUDWidget_BPDrawMaterial::U' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawMaterial, V) == 0x00001C, "Member 'SQHUDWidget_BPDrawMaterial::V' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawMaterial, UL) == 0x000020, "Member 'SQHUDWidget_BPDrawMaterial::UL' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawMaterial, VL) == 0x000024, "Member 'SQHUDWidget_BPDrawMaterial::VL' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawMaterial, DrawingAlpha) == 0x000028, "Member 'SQHUDWidget_BPDrawMaterial::DrawingAlpha' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawMaterial, Color) == 0x00002C, "Member 'SQHUDWidget_BPDrawMaterial::Color' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawMaterial, DrawingOffset) == 0x00003C, "Member 'SQHUDWidget_BPDrawMaterial::DrawingOffset' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawMaterial, Rotation) == 0x000044, "Member 'SQHUDWidget_BPDrawMaterial::Rotation' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawMaterial, RotationPivotPoint) == 0x000048, "Member 'SQHUDWidget_BPDrawMaterial::RotationPivotPoint' has a wrong offset!");

// Function Squad.SQHUDWidget.BPDrawSpriteTexture
// 0x0058 (0x0058 - 0x0000)
struct SQHUDWidget_BPDrawSpriteTexture final
{
public:
	class UTexture*                               Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextureX;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextureY;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextureXL;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextureYL;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawingAlpha;                                      // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x002C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DrawingOffset;                                     // 0x003C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rotation;                                          // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RotationPivotPoint;                                // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMask;                                           // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1219[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQHUDWidget_BPDrawSpriteTexture) == 0x000008, "Wrong alignment on SQHUDWidget_BPDrawSpriteTexture");
static_assert(sizeof(SQHUDWidget_BPDrawSpriteTexture) == 0x000058, "Wrong size on SQHUDWidget_BPDrawSpriteTexture");
static_assert(offsetof(SQHUDWidget_BPDrawSpriteTexture, Texture) == 0x000000, "Member 'SQHUDWidget_BPDrawSpriteTexture::Texture' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawSpriteTexture, X) == 0x000008, "Member 'SQHUDWidget_BPDrawSpriteTexture::X' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawSpriteTexture, Y) == 0x00000C, "Member 'SQHUDWidget_BPDrawSpriteTexture::Y' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawSpriteTexture, Width) == 0x000010, "Member 'SQHUDWidget_BPDrawSpriteTexture::Width' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawSpriteTexture, Height) == 0x000014, "Member 'SQHUDWidget_BPDrawSpriteTexture::Height' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawSpriteTexture, TextureX) == 0x000018, "Member 'SQHUDWidget_BPDrawSpriteTexture::TextureX' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawSpriteTexture, TextureY) == 0x00001C, "Member 'SQHUDWidget_BPDrawSpriteTexture::TextureY' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawSpriteTexture, TextureXL) == 0x000020, "Member 'SQHUDWidget_BPDrawSpriteTexture::TextureXL' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawSpriteTexture, TextureYL) == 0x000024, "Member 'SQHUDWidget_BPDrawSpriteTexture::TextureYL' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawSpriteTexture, DrawingAlpha) == 0x000028, "Member 'SQHUDWidget_BPDrawSpriteTexture::DrawingAlpha' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawSpriteTexture, Color) == 0x00002C, "Member 'SQHUDWidget_BPDrawSpriteTexture::Color' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawSpriteTexture, DrawingOffset) == 0x00003C, "Member 'SQHUDWidget_BPDrawSpriteTexture::DrawingOffset' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawSpriteTexture, Rotation) == 0x000044, "Member 'SQHUDWidget_BPDrawSpriteTexture::Rotation' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawSpriteTexture, RotationPivotPoint) == 0x000048, "Member 'SQHUDWidget_BPDrawSpriteTexture::RotationPivotPoint' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawSpriteTexture, bIsMask) == 0x000050, "Member 'SQHUDWidget_BPDrawSpriteTexture::bIsMask' has a wrong offset!");

// Function Squad.SQHUDWidget.BPDrawText
// 0x00A0 (0x00A0 - 0x0000)
struct SQHUDWidget_BPDrawText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFont*                                  Font;                                              // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFontRenderInfo                        FontRenderInfo;                                    // 0x0028(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0050(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextScale;                                         // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawingAlpha;                                      // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTextHorizontalAlignment                    HorizontalAlignment;                               // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTextVerticalAlignment                      VerticalAlignment;                                 // 0x0069(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawShadow;                                       // 0x006A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121A[0x1];                                     // 0x006B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ShadowDirection;                                   // 0x006C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ShadowColor;                                       // 0x0074(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawOutline;                                      // 0x0084(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121B[0x3];                                     // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           OutlineColor;                                      // 0x0088(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0098(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUDWidget_BPDrawText) == 0x000008, "Wrong alignment on SQHUDWidget_BPDrawText");
static_assert(sizeof(SQHUDWidget_BPDrawText) == 0x0000A0, "Wrong size on SQHUDWidget_BPDrawText");
static_assert(offsetof(SQHUDWidget_BPDrawText, Text) == 0x000000, "Member 'SQHUDWidget_BPDrawText::Text' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawText, X) == 0x000018, "Member 'SQHUDWidget_BPDrawText::X' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawText, Y) == 0x00001C, "Member 'SQHUDWidget_BPDrawText::Y' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawText, Font) == 0x000020, "Member 'SQHUDWidget_BPDrawText::Font' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawText, FontRenderInfo) == 0x000028, "Member 'SQHUDWidget_BPDrawText::FontRenderInfo' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawText, Color) == 0x000050, "Member 'SQHUDWidget_BPDrawText::Color' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawText, TextScale) == 0x000060, "Member 'SQHUDWidget_BPDrawText::TextScale' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawText, DrawingAlpha) == 0x000064, "Member 'SQHUDWidget_BPDrawText::DrawingAlpha' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawText, HorizontalAlignment) == 0x000068, "Member 'SQHUDWidget_BPDrawText::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawText, VerticalAlignment) == 0x000069, "Member 'SQHUDWidget_BPDrawText::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawText, bDrawShadow) == 0x00006A, "Member 'SQHUDWidget_BPDrawText::bDrawShadow' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawText, ShadowDirection) == 0x00006C, "Member 'SQHUDWidget_BPDrawText::ShadowDirection' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawText, ShadowColor) == 0x000074, "Member 'SQHUDWidget_BPDrawText::ShadowColor' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawText, bDrawOutline) == 0x000084, "Member 'SQHUDWidget_BPDrawText::bDrawOutline' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawText, OutlineColor) == 0x000088, "Member 'SQHUDWidget_BPDrawText::OutlineColor' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawText, ReturnValue) == 0x000098, "Member 'SQHUDWidget_BPDrawText::ReturnValue' has a wrong offset!");

// Function Squad.SQHUDWidget.BPDrawTexture
// 0x0058 (0x0058 - 0x0000)
struct SQHUDWidget_BPDrawTexture final
{
public:
	class UTexture*                               Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         U;                                                 // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         V;                                                 // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UL;                                                // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VL;                                                // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DrawingAlpha;                                      // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x002C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DrawingOffset;                                     // 0x003C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rotation;                                          // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RotationPivotPoint;                                // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMask;                                           // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121C[0x7];                                     // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQHUDWidget_BPDrawTexture) == 0x000008, "Wrong alignment on SQHUDWidget_BPDrawTexture");
static_assert(sizeof(SQHUDWidget_BPDrawTexture) == 0x000058, "Wrong size on SQHUDWidget_BPDrawTexture");
static_assert(offsetof(SQHUDWidget_BPDrawTexture, Texture) == 0x000000, "Member 'SQHUDWidget_BPDrawTexture::Texture' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawTexture, X) == 0x000008, "Member 'SQHUDWidget_BPDrawTexture::X' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawTexture, Y) == 0x00000C, "Member 'SQHUDWidget_BPDrawTexture::Y' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawTexture, Width) == 0x000010, "Member 'SQHUDWidget_BPDrawTexture::Width' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawTexture, Height) == 0x000014, "Member 'SQHUDWidget_BPDrawTexture::Height' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawTexture, U) == 0x000018, "Member 'SQHUDWidget_BPDrawTexture::U' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawTexture, V) == 0x00001C, "Member 'SQHUDWidget_BPDrawTexture::V' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawTexture, UL) == 0x000020, "Member 'SQHUDWidget_BPDrawTexture::UL' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawTexture, VL) == 0x000024, "Member 'SQHUDWidget_BPDrawTexture::VL' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawTexture, DrawingAlpha) == 0x000028, "Member 'SQHUDWidget_BPDrawTexture::DrawingAlpha' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawTexture, Color) == 0x00002C, "Member 'SQHUDWidget_BPDrawTexture::Color' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawTexture, DrawingOffset) == 0x00003C, "Member 'SQHUDWidget_BPDrawTexture::DrawingOffset' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawTexture, Rotation) == 0x000044, "Member 'SQHUDWidget_BPDrawTexture::Rotation' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawTexture, RotationPivotPoint) == 0x000048, "Member 'SQHUDWidget_BPDrawTexture::RotationPivotPoint' has a wrong offset!");
static_assert(offsetof(SQHUDWidget_BPDrawTexture, bIsMask) == 0x000050, "Member 'SQHUDWidget_BPDrawTexture::bIsMask' has a wrong offset!");

// Function Squad.SQHUDWidget.CanDraw
// 0x0001 (0x0001 - 0x0000)
struct SQHUDWidget_CanDraw final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQHUDWidget_CanDraw) == 0x000001, "Wrong alignment on SQHUDWidget_CanDraw");
static_assert(sizeof(SQHUDWidget_CanDraw) == 0x000001, "Wrong size on SQHUDWidget_CanDraw");
static_assert(offsetof(SQHUDWidget_CanDraw, ReturnValue) == 0x000000, "Member 'SQHUDWidget_CanDraw::ReturnValue' has a wrong offset!");

// Function Squad.SQInfantryWeapon.BlueprintIsAnimationSystemValid
// 0x0001 (0x0001 - 0x0000)
struct SQInfantryWeapon_BlueprintIsAnimationSystemValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQInfantryWeapon_BlueprintIsAnimationSystemValid) == 0x000001, "Wrong alignment on SQInfantryWeapon_BlueprintIsAnimationSystemValid");
static_assert(sizeof(SQInfantryWeapon_BlueprintIsAnimationSystemValid) == 0x000001, "Wrong size on SQInfantryWeapon_BlueprintIsAnimationSystemValid");
static_assert(offsetof(SQInfantryWeapon_BlueprintIsAnimationSystemValid, ReturnValue) == 0x000000, "Member 'SQInfantryWeapon_BlueprintIsAnimationSystemValid::ReturnValue' has a wrong offset!");

// Function Squad.SQInfantryWeapon.CancelFireOnRestrictedStance
// 0x0001 (0x0001 - 0x0000)
struct SQInfantryWeapon_CancelFireOnRestrictedStance final
{
public:
	ESQStance                                     Stance;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQInfantryWeapon_CancelFireOnRestrictedStance) == 0x000001, "Wrong alignment on SQInfantryWeapon_CancelFireOnRestrictedStance");
static_assert(sizeof(SQInfantryWeapon_CancelFireOnRestrictedStance) == 0x000001, "Wrong size on SQInfantryWeapon_CancelFireOnRestrictedStance");
static_assert(offsetof(SQInfantryWeapon_CancelFireOnRestrictedStance, Stance) == 0x000000, "Member 'SQInfantryWeapon_CancelFireOnRestrictedStance::Stance' has a wrong offset!");

// Function Squad.SQInfantryWeapon.OnHoldBreathEaseUpdate
// 0x0004 (0x0004 - 0x0000)
struct SQInfantryWeapon_OnHoldBreathEaseUpdate final
{
public:
	float                                         CurveOutput;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQInfantryWeapon_OnHoldBreathEaseUpdate) == 0x000004, "Wrong alignment on SQInfantryWeapon_OnHoldBreathEaseUpdate");
static_assert(sizeof(SQInfantryWeapon_OnHoldBreathEaseUpdate) == 0x000004, "Wrong size on SQInfantryWeapon_OnHoldBreathEaseUpdate");
static_assert(offsetof(SQInfantryWeapon_OnHoldBreathEaseUpdate, CurveOutput) == 0x000000, "Member 'SQInfantryWeapon_OnHoldBreathEaseUpdate::CurveOutput' has a wrong offset!");

// Function Squad.SQInfantryWeapon.OnHoldBreathEvent
// 0x0001 (0x0001 - 0x0000)
struct SQInfantryWeapon_OnHoldBreathEvent final
{
public:
	bool                                          bIsStartHoldBreath;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQInfantryWeapon_OnHoldBreathEvent) == 0x000001, "Wrong alignment on SQInfantryWeapon_OnHoldBreathEvent");
static_assert(sizeof(SQInfantryWeapon_OnHoldBreathEvent) == 0x000001, "Wrong size on SQInfantryWeapon_OnHoldBreathEvent");
static_assert(offsetof(SQInfantryWeapon_OnHoldBreathEvent, bIsStartHoldBreath) == 0x000000, "Member 'SQInfantryWeapon_OnHoldBreathEvent::bIsStartHoldBreath' has a wrong offset!");

// Function Squad.SQInfantryWeapon.OnRecoilGripAlignmentUpdate
// 0x0004 (0x0004 - 0x0000)
struct SQInfantryWeapon_OnRecoilGripAlignmentUpdate final
{
public:
	float                                         CurveOutput;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQInfantryWeapon_OnRecoilGripAlignmentUpdate) == 0x000004, "Wrong alignment on SQInfantryWeapon_OnRecoilGripAlignmentUpdate");
static_assert(sizeof(SQInfantryWeapon_OnRecoilGripAlignmentUpdate) == 0x000004, "Wrong size on SQInfantryWeapon_OnRecoilGripAlignmentUpdate");
static_assert(offsetof(SQInfantryWeapon_OnRecoilGripAlignmentUpdate, CurveOutput) == 0x000000, "Member 'SQInfantryWeapon_OnRecoilGripAlignmentUpdate::CurveOutput' has a wrong offset!");

// Function Squad.SQInfantryWeapon.OnRecoilShoulderAlignmentUpdate
// 0x0004 (0x0004 - 0x0000)
struct SQInfantryWeapon_OnRecoilShoulderAlignmentUpdate final
{
public:
	float                                         CurveOutput;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQInfantryWeapon_OnRecoilShoulderAlignmentUpdate) == 0x000004, "Wrong alignment on SQInfantryWeapon_OnRecoilShoulderAlignmentUpdate");
static_assert(sizeof(SQInfantryWeapon_OnRecoilShoulderAlignmentUpdate) == 0x000004, "Wrong size on SQInfantryWeapon_OnRecoilShoulderAlignmentUpdate");
static_assert(offsetof(SQInfantryWeapon_OnRecoilShoulderAlignmentUpdate, CurveOutput) == 0x000000, "Member 'SQInfantryWeapon_OnRecoilShoulderAlignmentUpdate::CurveOutput' has a wrong offset!");

// Function Squad.SQInfantryWeapon.RecoilAlignmentTargetOffsetSetup
// 0x0028 (0x0028 - 0x0000)
struct SQInfantryWeapon_RecoilAlignmentTargetOffsetSetup final
{
public:
	struct FVector2D                              MaxVal;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MaxBipodVal;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CurrentOffset;                                     // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetOffset;                                      // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQInfantryWeapon_RecoilAlignmentTargetOffsetSetup) == 0x000004, "Wrong alignment on SQInfantryWeapon_RecoilAlignmentTargetOffsetSetup");
static_assert(sizeof(SQInfantryWeapon_RecoilAlignmentTargetOffsetSetup) == 0x000028, "Wrong size on SQInfantryWeapon_RecoilAlignmentTargetOffsetSetup");
static_assert(offsetof(SQInfantryWeapon_RecoilAlignmentTargetOffsetSetup, MaxVal) == 0x000000, "Member 'SQInfantryWeapon_RecoilAlignmentTargetOffsetSetup::MaxVal' has a wrong offset!");
static_assert(offsetof(SQInfantryWeapon_RecoilAlignmentTargetOffsetSetup, MaxBipodVal) == 0x000008, "Member 'SQInfantryWeapon_RecoilAlignmentTargetOffsetSetup::MaxBipodVal' has a wrong offset!");
static_assert(offsetof(SQInfantryWeapon_RecoilAlignmentTargetOffsetSetup, CurrentOffset) == 0x000010, "Member 'SQInfantryWeapon_RecoilAlignmentTargetOffsetSetup::CurrentOffset' has a wrong offset!");
static_assert(offsetof(SQInfantryWeapon_RecoilAlignmentTargetOffsetSetup, TargetOffset) == 0x00001C, "Member 'SQInfantryWeapon_RecoilAlignmentTargetOffsetSetup::TargetOffset' has a wrong offset!");

// Function Squad.SQInfantryWeapon.RecoilAlignmentTimelineEasing
// 0x0030 (0x0030 - 0x0000)
struct SQInfantryWeapon_RecoilAlignmentTimelineEasing final
{
public:
	struct FVector                                CurrentOffset;                                     // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetOffset;                                      // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              AngleLimits;                                       // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               NewAlignment;                                      // 0x0020(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CurveOutput;                                       // 0x002C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQInfantryWeapon_RecoilAlignmentTimelineEasing) == 0x000004, "Wrong alignment on SQInfantryWeapon_RecoilAlignmentTimelineEasing");
static_assert(sizeof(SQInfantryWeapon_RecoilAlignmentTimelineEasing) == 0x000030, "Wrong size on SQInfantryWeapon_RecoilAlignmentTimelineEasing");
static_assert(offsetof(SQInfantryWeapon_RecoilAlignmentTimelineEasing, CurrentOffset) == 0x000000, "Member 'SQInfantryWeapon_RecoilAlignmentTimelineEasing::CurrentOffset' has a wrong offset!");
static_assert(offsetof(SQInfantryWeapon_RecoilAlignmentTimelineEasing, TargetOffset) == 0x00000C, "Member 'SQInfantryWeapon_RecoilAlignmentTimelineEasing::TargetOffset' has a wrong offset!");
static_assert(offsetof(SQInfantryWeapon_RecoilAlignmentTimelineEasing, AngleLimits) == 0x000018, "Member 'SQInfantryWeapon_RecoilAlignmentTimelineEasing::AngleLimits' has a wrong offset!");
static_assert(offsetof(SQInfantryWeapon_RecoilAlignmentTimelineEasing, NewAlignment) == 0x000020, "Member 'SQInfantryWeapon_RecoilAlignmentTimelineEasing::NewAlignment' has a wrong offset!");
static_assert(offsetof(SQInfantryWeapon_RecoilAlignmentTimelineEasing, CurveOutput) == 0x00002C, "Member 'SQInfantryWeapon_RecoilAlignmentTimelineEasing::CurveOutput' has a wrong offset!");

// Function Squad.SQInfantryWeapon.GetOwnerSoldier
// 0x0008 (0x0008 - 0x0000)
struct SQInfantryWeapon_GetOwnerSoldier final
{
public:
	class ASQSoldier*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQInfantryWeapon_GetOwnerSoldier) == 0x000008, "Wrong alignment on SQInfantryWeapon_GetOwnerSoldier");
static_assert(sizeof(SQInfantryWeapon_GetOwnerSoldier) == 0x000008, "Wrong size on SQInfantryWeapon_GetOwnerSoldier");
static_assert(offsetof(SQInfantryWeapon_GetOwnerSoldier, ReturnValue) == 0x000000, "Member 'SQInfantryWeapon_GetOwnerSoldier::ReturnValue' has a wrong offset!");

// Function Squad.SQVoteSession.GetChoiceDescription
// 0x0020 (0x0020 - 0x0000)
struct SQVoteSession_GetChoiceDescription final
{
public:
	class FName                                   ChoiceId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQChoice                              OutChoice;                                         // 0x0008(0x0018)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVoteSession_GetChoiceDescription) == 0x000008, "Wrong alignment on SQVoteSession_GetChoiceDescription");
static_assert(sizeof(SQVoteSession_GetChoiceDescription) == 0x000020, "Wrong size on SQVoteSession_GetChoiceDescription");
static_assert(offsetof(SQVoteSession_GetChoiceDescription, ChoiceId) == 0x000000, "Member 'SQVoteSession_GetChoiceDescription::ChoiceId' has a wrong offset!");
static_assert(offsetof(SQVoteSession_GetChoiceDescription, OutChoice) == 0x000008, "Member 'SQVoteSession_GetChoiceDescription::OutChoice' has a wrong offset!");

// Function Squad.SQVoteSession.GetChoicesPerVoteOrder
// 0x0010 (0x0010 - 0x0000)
struct SQVoteSession_GetChoicesPerVoteOrder final
{
public:
	TArray<class FName>                           OutChoiceId;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVoteSession_GetChoicesPerVoteOrder) == 0x000008, "Wrong alignment on SQVoteSession_GetChoicesPerVoteOrder");
static_assert(sizeof(SQVoteSession_GetChoicesPerVoteOrder) == 0x000010, "Wrong size on SQVoteSession_GetChoicesPerVoteOrder");
static_assert(offsetof(SQVoteSession_GetChoicesPerVoteOrder, OutChoiceId) == 0x000000, "Member 'SQVoteSession_GetChoicesPerVoteOrder::OutChoiceId' has a wrong offset!");

// Function Squad.SQVoteSession.GetChoiceState
// 0x0020 (0x0020 - 0x0000)
struct SQVoteSession_GetChoiceState final
{
public:
	class FName                                   ChoiceId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQVoteSessionChoiceInfo               OutState;                                          // 0x0008(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVoteSession_GetChoiceState) == 0x000008, "Wrong alignment on SQVoteSession_GetChoiceState");
static_assert(sizeof(SQVoteSession_GetChoiceState) == 0x000020, "Wrong size on SQVoteSession_GetChoiceState");
static_assert(offsetof(SQVoteSession_GetChoiceState, ChoiceId) == 0x000000, "Member 'SQVoteSession_GetChoiceState::ChoiceId' has a wrong offset!");
static_assert(offsetof(SQVoteSession_GetChoiceState, OutState) == 0x000008, "Member 'SQVoteSession_GetChoiceState::OutState' has a wrong offset!");

// Function Squad.SQVoteSession.GetData
// 0x0010 (0x0010 - 0x0000)
struct SQVoteSession_GetData final
{
public:
	struct FDataTableRowHandle                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVoteSession_GetData) == 0x000008, "Wrong alignment on SQVoteSession_GetData");
static_assert(sizeof(SQVoteSession_GetData) == 0x000010, "Wrong size on SQVoteSession_GetData");
static_assert(offsetof(SQVoteSession_GetData, ReturnValue) == 0x000000, "Member 'SQVoteSession_GetData::ReturnValue' has a wrong offset!");

// Function Squad.SQVoteSession.GetDuration
// 0x0008 (0x0008 - 0x0000)
struct SQVoteSession_GetDuration final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVoteSession_GetDuration) == 0x000008, "Wrong alignment on SQVoteSession_GetDuration");
static_assert(sizeof(SQVoteSession_GetDuration) == 0x000008, "Wrong size on SQVoteSession_GetDuration");
static_assert(offsetof(SQVoteSession_GetDuration, ReturnValue) == 0x000000, "Member 'SQVoteSession_GetDuration::ReturnValue' has a wrong offset!");

// Function Squad.SQVoteSession.GetId
// 0x0008 (0x0008 - 0x0000)
struct SQVoteSession_GetId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVoteSession_GetId) == 0x000004, "Wrong alignment on SQVoteSession_GetId");
static_assert(sizeof(SQVoteSession_GetId) == 0x000008, "Wrong size on SQVoteSession_GetId");
static_assert(offsetof(SQVoteSession_GetId, ReturnValue) == 0x000000, "Member 'SQVoteSession_GetId::ReturnValue' has a wrong offset!");

// Function Squad.SQVoteSession.GetRemainingTime
// 0x0008 (0x0008 - 0x0000)
struct SQVoteSession_GetRemainingTime final
{
public:
	struct FTimespan                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVoteSession_GetRemainingTime) == 0x000008, "Wrong alignment on SQVoteSession_GetRemainingTime");
static_assert(sizeof(SQVoteSession_GetRemainingTime) == 0x000008, "Wrong size on SQVoteSession_GetRemainingTime");
static_assert(offsetof(SQVoteSession_GetRemainingTime, ReturnValue) == 0x000000, "Member 'SQVoteSession_GetRemainingTime::ReturnValue' has a wrong offset!");

// Function Squad.SQVoteSession.GetWinnerChoiceId
// 0x0008 (0x0008 - 0x0000)
struct SQVoteSession_GetWinnerChoiceId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVoteSession_GetWinnerChoiceId) == 0x000004, "Wrong alignment on SQVoteSession_GetWinnerChoiceId");
static_assert(sizeof(SQVoteSession_GetWinnerChoiceId) == 0x000008, "Wrong size on SQVoteSession_GetWinnerChoiceId");
static_assert(offsetof(SQVoteSession_GetWinnerChoiceId, ReturnValue) == 0x000000, "Member 'SQVoteSession_GetWinnerChoiceId::ReturnValue' has a wrong offset!");

// Function Squad.SQVoteSession.HasFinishedPresentingResults
// 0x0001 (0x0001 - 0x0000)
struct SQVoteSession_HasFinishedPresentingResults final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVoteSession_HasFinishedPresentingResults) == 0x000001, "Wrong alignment on SQVoteSession_HasFinishedPresentingResults");
static_assert(sizeof(SQVoteSession_HasFinishedPresentingResults) == 0x000001, "Wrong size on SQVoteSession_HasFinishedPresentingResults");
static_assert(offsetof(SQVoteSession_HasFinishedPresentingResults, ReturnValue) == 0x000000, "Member 'SQVoteSession_HasFinishedPresentingResults::ReturnValue' has a wrong offset!");

// Function Squad.SQVoteSession.HasTimedOut
// 0x0001 (0x0001 - 0x0000)
struct SQVoteSession_HasTimedOut final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVoteSession_HasTimedOut) == 0x000001, "Wrong alignment on SQVoteSession_HasTimedOut");
static_assert(sizeof(SQVoteSession_HasTimedOut) == 0x000001, "Wrong size on SQVoteSession_HasTimedOut");
static_assert(offsetof(SQVoteSession_HasTimedOut, ReturnValue) == 0x000000, "Member 'SQVoteSession_HasTimedOut::ReturnValue' has a wrong offset!");

// Function Squad.SQVoteSession.IsRegenerationChoicePossible
// 0x0001 (0x0001 - 0x0000)
struct SQVoteSession_IsRegenerationChoicePossible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVoteSession_IsRegenerationChoicePossible) == 0x000001, "Wrong alignment on SQVoteSession_IsRegenerationChoicePossible");
static_assert(sizeof(SQVoteSession_IsRegenerationChoicePossible) == 0x000001, "Wrong size on SQVoteSession_IsRegenerationChoicePossible");
static_assert(offsetof(SQVoteSession_IsRegenerationChoicePossible, ReturnValue) == 0x000000, "Member 'SQVoteSession_IsRegenerationChoicePossible::ReturnValue' has a wrong offset!");

// Function Squad.SQVoteSessionClient.SendVote
// 0x000C (0x000C - 0x0000)
struct SQVoteSessionClient_SendVote final
{
public:
	class FName                                   ChoiceId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Positive;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1221[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVoteSessionClient_SendVote) == 0x000004, "Wrong alignment on SQVoteSessionClient_SendVote");
static_assert(sizeof(SQVoteSessionClient_SendVote) == 0x00000C, "Wrong size on SQVoteSessionClient_SendVote");
static_assert(offsetof(SQVoteSessionClient_SendVote, ChoiceId) == 0x000000, "Member 'SQVoteSessionClient_SendVote::ChoiceId' has a wrong offset!");
static_assert(offsetof(SQVoteSessionClient_SendVote, Positive) == 0x000008, "Member 'SQVoteSessionClient_SendVote::Positive' has a wrong offset!");

// Function Squad.SQVoteSessionClient.SendVoteByChoice
// 0x0020 (0x0020 - 0x0000)
struct SQVoteSessionClient_SendVoteByChoice final
{
public:
	struct FSQChoice                              Choice;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Positive;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1222[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVoteSessionClient_SendVoteByChoice) == 0x000008, "Wrong alignment on SQVoteSessionClient_SendVoteByChoice");
static_assert(sizeof(SQVoteSessionClient_SendVoteByChoice) == 0x000020, "Wrong size on SQVoteSessionClient_SendVoteByChoice");
static_assert(offsetof(SQVoteSessionClient_SendVoteByChoice, Choice) == 0x000000, "Member 'SQVoteSessionClient_SendVoteByChoice::Choice' has a wrong offset!");
static_assert(offsetof(SQVoteSessionClient_SendVoteByChoice, Positive) == 0x000018, "Member 'SQVoteSessionClient_SendVoteByChoice::Positive' has a wrong offset!");

// Function Squad.SQWaterBlueprintFunctionLibrary.GetActorImmersionDepthInWater
// 0x0018 (0x0018 - 0x0000)
struct SQWaterBlueprintFunctionLibrary_GetActorImmersionDepthInWater final
{
public:
	const class ASQWaterBody*                     WaterBody;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           QueryingActor;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1223[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQWaterBlueprintFunctionLibrary_GetActorImmersionDepthInWater) == 0x000008, "Wrong alignment on SQWaterBlueprintFunctionLibrary_GetActorImmersionDepthInWater");
static_assert(sizeof(SQWaterBlueprintFunctionLibrary_GetActorImmersionDepthInWater) == 0x000018, "Wrong size on SQWaterBlueprintFunctionLibrary_GetActorImmersionDepthInWater");
static_assert(offsetof(SQWaterBlueprintFunctionLibrary_GetActorImmersionDepthInWater, WaterBody) == 0x000000, "Member 'SQWaterBlueprintFunctionLibrary_GetActorImmersionDepthInWater::WaterBody' has a wrong offset!");
static_assert(offsetof(SQWaterBlueprintFunctionLibrary_GetActorImmersionDepthInWater, QueryingActor) == 0x000008, "Member 'SQWaterBlueprintFunctionLibrary_GetActorImmersionDepthInWater::QueryingActor' has a wrong offset!");
static_assert(offsetof(SQWaterBlueprintFunctionLibrary_GetActorImmersionDepthInWater, ReturnValue) == 0x000010, "Member 'SQWaterBlueprintFunctionLibrary_GetActorImmersionDepthInWater::ReturnValue' has a wrong offset!");

// Function Squad.SQWaterBlueprintFunctionLibrary.IsAValidWaterBody
// 0x0010 (0x0010 - 0x0000)
struct SQWaterBlueprintFunctionLibrary_IsAValidWaterBody final
{
public:
	const class AActor*                           ActorToCheck;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1224[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQWaterBlueprintFunctionLibrary_IsAValidWaterBody) == 0x000008, "Wrong alignment on SQWaterBlueprintFunctionLibrary_IsAValidWaterBody");
static_assert(sizeof(SQWaterBlueprintFunctionLibrary_IsAValidWaterBody) == 0x000010, "Wrong size on SQWaterBlueprintFunctionLibrary_IsAValidWaterBody");
static_assert(offsetof(SQWaterBlueprintFunctionLibrary_IsAValidWaterBody, ActorToCheck) == 0x000000, "Member 'SQWaterBlueprintFunctionLibrary_IsAValidWaterBody::ActorToCheck' has a wrong offset!");
static_assert(offsetof(SQWaterBlueprintFunctionLibrary_IsAValidWaterBody, ReturnValue) == 0x000008, "Member 'SQWaterBlueprintFunctionLibrary_IsAValidWaterBody::ReturnValue' has a wrong offset!");

// Function Squad.SQWaterBlueprintFunctionLibrary.WaterHasValidHit
// 0x00A0 (0x00A0 - 0x0000)
struct SQWaterBlueprintFunctionLibrary_WaterHasValidHit final
{
public:
	const class ASQWaterBody*                     HitWaterBody;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           ProjectileOwner;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             InHit;                                             // 0x0010(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0098(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1225[0x7];                                     // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQWaterBlueprintFunctionLibrary_WaterHasValidHit) == 0x000008, "Wrong alignment on SQWaterBlueprintFunctionLibrary_WaterHasValidHit");
static_assert(sizeof(SQWaterBlueprintFunctionLibrary_WaterHasValidHit) == 0x0000A0, "Wrong size on SQWaterBlueprintFunctionLibrary_WaterHasValidHit");
static_assert(offsetof(SQWaterBlueprintFunctionLibrary_WaterHasValidHit, HitWaterBody) == 0x000000, "Member 'SQWaterBlueprintFunctionLibrary_WaterHasValidHit::HitWaterBody' has a wrong offset!");
static_assert(offsetof(SQWaterBlueprintFunctionLibrary_WaterHasValidHit, ProjectileOwner) == 0x000008, "Member 'SQWaterBlueprintFunctionLibrary_WaterHasValidHit::ProjectileOwner' has a wrong offset!");
static_assert(offsetof(SQWaterBlueprintFunctionLibrary_WaterHasValidHit, InHit) == 0x000010, "Member 'SQWaterBlueprintFunctionLibrary_WaterHasValidHit::InHit' has a wrong offset!");
static_assert(offsetof(SQWaterBlueprintFunctionLibrary_WaterHasValidHit, ReturnValue) == 0x000098, "Member 'SQWaterBlueprintFunctionLibrary_WaterHasValidHit::ReturnValue' has a wrong offset!");

// Function Squad.SQWaterBlueprintFunctionLibrary.WaterHasValidOverlap
// 0x00B8 (0x00B8 - 0x0000)
struct SQWaterBlueprintFunctionLibrary_WaterHasValidOverlap final
{
public:
	const class ASQWaterBody*                     OverlappedWaterBody;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1226[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0028(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00B0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1227[0x7];                                     // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQWaterBlueprintFunctionLibrary_WaterHasValidOverlap) == 0x000008, "Wrong alignment on SQWaterBlueprintFunctionLibrary_WaterHasValidOverlap");
static_assert(sizeof(SQWaterBlueprintFunctionLibrary_WaterHasValidOverlap) == 0x0000B8, "Wrong size on SQWaterBlueprintFunctionLibrary_WaterHasValidOverlap");
static_assert(offsetof(SQWaterBlueprintFunctionLibrary_WaterHasValidOverlap, OverlappedWaterBody) == 0x000000, "Member 'SQWaterBlueprintFunctionLibrary_WaterHasValidOverlap::OverlappedWaterBody' has a wrong offset!");
static_assert(offsetof(SQWaterBlueprintFunctionLibrary_WaterHasValidOverlap, OverlappedComponent) == 0x000008, "Member 'SQWaterBlueprintFunctionLibrary_WaterHasValidOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SQWaterBlueprintFunctionLibrary_WaterHasValidOverlap, OtherActor) == 0x000010, "Member 'SQWaterBlueprintFunctionLibrary_WaterHasValidOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SQWaterBlueprintFunctionLibrary_WaterHasValidOverlap, OtherComp) == 0x000018, "Member 'SQWaterBlueprintFunctionLibrary_WaterHasValidOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(SQWaterBlueprintFunctionLibrary_WaterHasValidOverlap, OtherBodyIndex) == 0x000020, "Member 'SQWaterBlueprintFunctionLibrary_WaterHasValidOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SQWaterBlueprintFunctionLibrary_WaterHasValidOverlap, bFromSweep) == 0x000024, "Member 'SQWaterBlueprintFunctionLibrary_WaterHasValidOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(SQWaterBlueprintFunctionLibrary_WaterHasValidOverlap, SweepResult) == 0x000028, "Member 'SQWaterBlueprintFunctionLibrary_WaterHasValidOverlap::SweepResult' has a wrong offset!");
static_assert(offsetof(SQWaterBlueprintFunctionLibrary_WaterHasValidOverlap, ReturnValue) == 0x0000B0, "Member 'SQWaterBlueprintFunctionLibrary_WaterHasValidOverlap::ReturnValue' has a wrong offset!");

// Function Squad.SQJoinBeaconClient.HostTravelRequestReconnect
// 0x0008 (0x0008 - 0x0000)
struct SQJoinBeaconClient_HostTravelRequestReconnect final
{
public:
	int32                                         TimeLeftInMatch;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondsPerRetry;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQJoinBeaconClient_HostTravelRequestReconnect) == 0x000004, "Wrong alignment on SQJoinBeaconClient_HostTravelRequestReconnect");
static_assert(sizeof(SQJoinBeaconClient_HostTravelRequestReconnect) == 0x000008, "Wrong size on SQJoinBeaconClient_HostTravelRequestReconnect");
static_assert(offsetof(SQJoinBeaconClient_HostTravelRequestReconnect, TimeLeftInMatch) == 0x000000, "Member 'SQJoinBeaconClient_HostTravelRequestReconnect::TimeLeftInMatch' has a wrong offset!");
static_assert(offsetof(SQJoinBeaconClient_HostTravelRequestReconnect, SecondsPerRetry) == 0x000004, "Member 'SQJoinBeaconClient_HostTravelRequestReconnect::SecondsPerRetry' has a wrong offset!");

// Function Squad.SQJoinBeaconClient.InitConnection
// 0x0118 (0x0118 - 0x0000)
struct SQJoinBeaconClient_InitConnection final
{
public:
	class FString                                 ServerURL;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlueprintSessionResult                ServerSession;                                     // 0x0010(0x0108)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQJoinBeaconClient_InitConnection) == 0x000008, "Wrong alignment on SQJoinBeaconClient_InitConnection");
static_assert(sizeof(SQJoinBeaconClient_InitConnection) == 0x000118, "Wrong size on SQJoinBeaconClient_InitConnection");
static_assert(offsetof(SQJoinBeaconClient_InitConnection, ServerURL) == 0x000000, "Member 'SQJoinBeaconClient_InitConnection::ServerURL' has a wrong offset!");
static_assert(offsetof(SQJoinBeaconClient_InitConnection, ServerSession) == 0x000010, "Member 'SQJoinBeaconClient_InitConnection::ServerSession' has a wrong offset!");

// Function Squad.SQJoinSessionCallbackProxy.IsServerModded
// 0x0110 (0x0110 - 0x0000)
struct SQJoinSessionCallbackProxy_IsServerModded final
{
public:
	struct FBlueprintSessionResult                SearchResult;                                      // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsWhitelisted;                                    // 0x0108(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0109(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122F[0x6];                                     // 0x010A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQJoinSessionCallbackProxy_IsServerModded) == 0x000008, "Wrong alignment on SQJoinSessionCallbackProxy_IsServerModded");
static_assert(sizeof(SQJoinSessionCallbackProxy_IsServerModded) == 0x000110, "Wrong size on SQJoinSessionCallbackProxy_IsServerModded");
static_assert(offsetof(SQJoinSessionCallbackProxy_IsServerModded, SearchResult) == 0x000000, "Member 'SQJoinSessionCallbackProxy_IsServerModded::SearchResult' has a wrong offset!");
static_assert(offsetof(SQJoinSessionCallbackProxy_IsServerModded, bIsWhitelisted) == 0x000108, "Member 'SQJoinSessionCallbackProxy_IsServerModded::bIsWhitelisted' has a wrong offset!");
static_assert(offsetof(SQJoinSessionCallbackProxy_IsServerModded, ReturnValue) == 0x000109, "Member 'SQJoinSessionCallbackProxy_IsServerModded::ReturnValue' has a wrong offset!");

// Function Squad.SQJoinSessionCallbackProxy.JoinSession
// 0x0120 (0x0120 - 0x0000)
struct SQJoinSessionCallbackProxy_JoinSession final
{
public:
	class UObject*                                Param_WorldContextObject;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlueprintSessionResult                SearchResult;                                      // 0x0010(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class USQJoinSessionCallbackProxy*            ReturnValue;                                       // 0x0118(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQJoinSessionCallbackProxy_JoinSession) == 0x000008, "Wrong alignment on SQJoinSessionCallbackProxy_JoinSession");
static_assert(sizeof(SQJoinSessionCallbackProxy_JoinSession) == 0x000120, "Wrong size on SQJoinSessionCallbackProxy_JoinSession");
static_assert(offsetof(SQJoinSessionCallbackProxy_JoinSession, Param_WorldContextObject) == 0x000000, "Member 'SQJoinSessionCallbackProxy_JoinSession::Param_WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQJoinSessionCallbackProxy_JoinSession, PlayerController) == 0x000008, "Member 'SQJoinSessionCallbackProxy_JoinSession::PlayerController' has a wrong offset!");
static_assert(offsetof(SQJoinSessionCallbackProxy_JoinSession, SearchResult) == 0x000010, "Member 'SQJoinSessionCallbackProxy_JoinSession::SearchResult' has a wrong offset!");
static_assert(offsetof(SQJoinSessionCallbackProxy_JoinSession, ReturnValue) == 0x000118, "Member 'SQJoinSessionCallbackProxy_JoinSession::ReturnValue' has a wrong offset!");

// Function Squad.SQKickBanComponent.BanPlayer
// 0x0030 (0x0030 - 0x0000)
struct SQKickBanComponent_BanPlayer final
{
public:
	class FString                                 AdminId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerController*                    ToBanPC;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BanSeconds;                                        // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1230[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BanReason;                                         // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQKickBanComponent_BanPlayer) == 0x000008, "Wrong alignment on SQKickBanComponent_BanPlayer");
static_assert(sizeof(SQKickBanComponent_BanPlayer) == 0x000030, "Wrong size on SQKickBanComponent_BanPlayer");
static_assert(offsetof(SQKickBanComponent_BanPlayer, AdminId) == 0x000000, "Member 'SQKickBanComponent_BanPlayer::AdminId' has a wrong offset!");
static_assert(offsetof(SQKickBanComponent_BanPlayer, ToBanPC) == 0x000010, "Member 'SQKickBanComponent_BanPlayer::ToBanPC' has a wrong offset!");
static_assert(offsetof(SQKickBanComponent_BanPlayer, BanSeconds) == 0x000018, "Member 'SQKickBanComponent_BanPlayer::BanSeconds' has a wrong offset!");
static_assert(offsetof(SQKickBanComponent_BanPlayer, BanReason) == 0x000020, "Member 'SQKickBanComponent_BanPlayer::BanReason' has a wrong offset!");

// Function Squad.SQKickBanComponent.KickPlayer
// 0x0018 (0x0018 - 0x0000)
struct SQKickBanComponent_KickPlayer final
{
public:
	class ASQPlayerController*                    ToKickPC;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KickReason;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQKickBanComponent_KickPlayer) == 0x000008, "Wrong alignment on SQKickBanComponent_KickPlayer");
static_assert(sizeof(SQKickBanComponent_KickPlayer) == 0x000018, "Wrong size on SQKickBanComponent_KickPlayer");
static_assert(offsetof(SQKickBanComponent_KickPlayer, ToKickPC) == 0x000000, "Member 'SQKickBanComponent_KickPlayer::ToKickPC' has a wrong offset!");
static_assert(offsetof(SQKickBanComponent_KickPlayer, KickReason) == 0x000008, "Member 'SQKickBanComponent_KickPlayer::KickReason' has a wrong offset!");

// Function Squad.SQWheeledVehicleMovementComponentTank.SetBothTracksThrottleInput
// 0x0004 (0x0004 - 0x0000)
struct SQWheeledVehicleMovementComponentTank_SetBothTracksThrottleInput final
{
public:
	float                                         InThrottle;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWheeledVehicleMovementComponentTank_SetBothTracksThrottleInput) == 0x000004, "Wrong alignment on SQWheeledVehicleMovementComponentTank_SetBothTracksThrottleInput");
static_assert(sizeof(SQWheeledVehicleMovementComponentTank_SetBothTracksThrottleInput) == 0x000004, "Wrong size on SQWheeledVehicleMovementComponentTank_SetBothTracksThrottleInput");
static_assert(offsetof(SQWheeledVehicleMovementComponentTank_SetBothTracksThrottleInput, InThrottle) == 0x000000, "Member 'SQWheeledVehicleMovementComponentTank_SetBothTracksThrottleInput::InThrottle' has a wrong offset!");

// Function Squad.SQWheeledVehicleMovementComponentTank.SetLeftTrackThrottleInput
// 0x0004 (0x0004 - 0x0000)
struct SQWheeledVehicleMovementComponentTank_SetLeftTrackThrottleInput final
{
public:
	float                                         InThrottle;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWheeledVehicleMovementComponentTank_SetLeftTrackThrottleInput) == 0x000004, "Wrong alignment on SQWheeledVehicleMovementComponentTank_SetLeftTrackThrottleInput");
static_assert(sizeof(SQWheeledVehicleMovementComponentTank_SetLeftTrackThrottleInput) == 0x000004, "Wrong size on SQWheeledVehicleMovementComponentTank_SetLeftTrackThrottleInput");
static_assert(offsetof(SQWheeledVehicleMovementComponentTank_SetLeftTrackThrottleInput, InThrottle) == 0x000000, "Member 'SQWheeledVehicleMovementComponentTank_SetLeftTrackThrottleInput::InThrottle' has a wrong offset!");

// Function Squad.SQWheeledVehicleMovementComponentTank.SetRightTrackThrottleInput
// 0x0004 (0x0004 - 0x0000)
struct SQWheeledVehicleMovementComponentTank_SetRightTrackThrottleInput final
{
public:
	float                                         InThrottle;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWheeledVehicleMovementComponentTank_SetRightTrackThrottleInput) == 0x000004, "Wrong alignment on SQWheeledVehicleMovementComponentTank_SetRightTrackThrottleInput");
static_assert(sizeof(SQWheeledVehicleMovementComponentTank_SetRightTrackThrottleInput) == 0x000004, "Wrong size on SQWheeledVehicleMovementComponentTank_SetRightTrackThrottleInput");
static_assert(offsetof(SQWheeledVehicleMovementComponentTank_SetRightTrackThrottleInput, InThrottle) == 0x000000, "Member 'SQWheeledVehicleMovementComponentTank_SetRightTrackThrottleInput::InThrottle' has a wrong offset!");

// Function Squad.SQWheeledVehicleMovementComponentTank.GetLeftTrackSpeed
// 0x0004 (0x0004 - 0x0000)
struct SQWheeledVehicleMovementComponentTank_GetLeftTrackSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWheeledVehicleMovementComponentTank_GetLeftTrackSpeed) == 0x000004, "Wrong alignment on SQWheeledVehicleMovementComponentTank_GetLeftTrackSpeed");
static_assert(sizeof(SQWheeledVehicleMovementComponentTank_GetLeftTrackSpeed) == 0x000004, "Wrong size on SQWheeledVehicleMovementComponentTank_GetLeftTrackSpeed");
static_assert(offsetof(SQWheeledVehicleMovementComponentTank_GetLeftTrackSpeed, ReturnValue) == 0x000000, "Member 'SQWheeledVehicleMovementComponentTank_GetLeftTrackSpeed::ReturnValue' has a wrong offset!");

// Function Squad.SQWheeledVehicleMovementComponentTank.GetRightTrackSpeed
// 0x0004 (0x0004 - 0x0000)
struct SQWheeledVehicleMovementComponentTank_GetRightTrackSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWheeledVehicleMovementComponentTank_GetRightTrackSpeed) == 0x000004, "Wrong alignment on SQWheeledVehicleMovementComponentTank_GetRightTrackSpeed");
static_assert(sizeof(SQWheeledVehicleMovementComponentTank_GetRightTrackSpeed) == 0x000004, "Wrong size on SQWheeledVehicleMovementComponentTank_GetRightTrackSpeed");
static_assert(offsetof(SQWheeledVehicleMovementComponentTank_GetRightTrackSpeed, ReturnValue) == 0x000000, "Member 'SQWheeledVehicleMovementComponentTank_GetRightTrackSpeed::ReturnValue' has a wrong offset!");

// Function Squad.SQLayerTeamConfig.CanUseFaction
// 0x0010 (0x0010 - 0x0000)
struct SQLayerTeamConfig_CanUseFaction final
{
public:
	const class USQFactionSetup*                  SQFaction;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1236[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQLayerTeamConfig_CanUseFaction) == 0x000008, "Wrong alignment on SQLayerTeamConfig_CanUseFaction");
static_assert(sizeof(SQLayerTeamConfig_CanUseFaction) == 0x000010, "Wrong size on SQLayerTeamConfig_CanUseFaction");
static_assert(offsetof(SQLayerTeamConfig_CanUseFaction, SQFaction) == 0x000000, "Member 'SQLayerTeamConfig_CanUseFaction::SQFaction' has a wrong offset!");
static_assert(offsetof(SQLayerTeamConfig_CanUseFaction, ReturnValue) == 0x000008, "Member 'SQLayerTeamConfig_CanUseFaction::ReturnValue' has a wrong offset!");

// Function Squad.SQLayerTeamConfig.EditorOnly_ShouldUseSpecificFaction
// 0x0001 (0x0001 - 0x0000)
struct SQLayerTeamConfig_EditorOnly_ShouldUseSpecificFaction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQLayerTeamConfig_EditorOnly_ShouldUseSpecificFaction) == 0x000001, "Wrong alignment on SQLayerTeamConfig_EditorOnly_ShouldUseSpecificFaction");
static_assert(sizeof(SQLayerTeamConfig_EditorOnly_ShouldUseSpecificFaction) == 0x000001, "Wrong size on SQLayerTeamConfig_EditorOnly_ShouldUseSpecificFaction");
static_assert(offsetof(SQLayerTeamConfig_EditorOnly_ShouldUseSpecificFaction, ReturnValue) == 0x000000, "Member 'SQLayerTeamConfig_EditorOnly_ShouldUseSpecificFaction::ReturnValue' has a wrong offset!");

// Function Squad.SQLayerTeamConfig.GetCompatibleFactionSetups
// 0x0070 (0x0070 - 0x0000)
struct SQLayerTeamConfig_GetCompatibleFactionSetups final
{
public:
	const class USQLayer*                         InOuterLayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class USQFactionSetup*>     InAvailableFactionSetups;                          // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class USQFactionSetup*>                OutCompatibleFactionSetups;                        // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1237[0x7];                                     // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQLayerTeamConfig_GetCompatibleFactionSetups) == 0x000008, "Wrong alignment on SQLayerTeamConfig_GetCompatibleFactionSetups");
static_assert(sizeof(SQLayerTeamConfig_GetCompatibleFactionSetups) == 0x000070, "Wrong size on SQLayerTeamConfig_GetCompatibleFactionSetups");
static_assert(offsetof(SQLayerTeamConfig_GetCompatibleFactionSetups, InOuterLayer) == 0x000000, "Member 'SQLayerTeamConfig_GetCompatibleFactionSetups::InOuterLayer' has a wrong offset!");
static_assert(offsetof(SQLayerTeamConfig_GetCompatibleFactionSetups, InAvailableFactionSetups) == 0x000008, "Member 'SQLayerTeamConfig_GetCompatibleFactionSetups::InAvailableFactionSetups' has a wrong offset!");
static_assert(offsetof(SQLayerTeamConfig_GetCompatibleFactionSetups, OutCompatibleFactionSetups) == 0x000058, "Member 'SQLayerTeamConfig_GetCompatibleFactionSetups::OutCompatibleFactionSetups' has a wrong offset!");
static_assert(offsetof(SQLayerTeamConfig_GetCompatibleFactionSetups, ReturnValue) == 0x000068, "Member 'SQLayerTeamConfig_GetCompatibleFactionSetups::ReturnValue' has a wrong offset!");

// Function Squad.SQLayerTeamConfig.HasFactionSetupChoice
// 0x0028 (0x0028 - 0x0000)
struct SQLayerTeamConfig_HasFactionSetupChoice final
{
public:
	const class USQLayer*                         InOuterLayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQFactionSetup*                        OutSpecificFaction;                                // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Excluded;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1238[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQLayerTeamConfig_HasFactionSetupChoice) == 0x000008, "Wrong alignment on SQLayerTeamConfig_HasFactionSetupChoice");
static_assert(sizeof(SQLayerTeamConfig_HasFactionSetupChoice) == 0x000028, "Wrong size on SQLayerTeamConfig_HasFactionSetupChoice");
static_assert(offsetof(SQLayerTeamConfig_HasFactionSetupChoice, InOuterLayer) == 0x000000, "Member 'SQLayerTeamConfig_HasFactionSetupChoice::InOuterLayer' has a wrong offset!");
static_assert(offsetof(SQLayerTeamConfig_HasFactionSetupChoice, OutSpecificFaction) == 0x000008, "Member 'SQLayerTeamConfig_HasFactionSetupChoice::OutSpecificFaction' has a wrong offset!");
static_assert(offsetof(SQLayerTeamConfig_HasFactionSetupChoice, Excluded) == 0x000010, "Member 'SQLayerTeamConfig_HasFactionSetupChoice::Excluded' has a wrong offset!");
static_assert(offsetof(SQLayerTeamConfig_HasFactionSetupChoice, ReturnValue) == 0x000020, "Member 'SQLayerTeamConfig_HasFactionSetupChoice::ReturnValue' has a wrong offset!");

// Function Squad.SQLayerTeamConfig.TryGetAvailabilityModifierPct
// 0x0010 (0x0010 - 0x0000)
struct SQLayerTeamConfig_TryGetAvailabilityModifierPct final
{
public:
	const class USQAvailability*                  InAvailability;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutModifierPct;                                    // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1239[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQLayerTeamConfig_TryGetAvailabilityModifierPct) == 0x000008, "Wrong alignment on SQLayerTeamConfig_TryGetAvailabilityModifierPct");
static_assert(sizeof(SQLayerTeamConfig_TryGetAvailabilityModifierPct) == 0x000010, "Wrong size on SQLayerTeamConfig_TryGetAvailabilityModifierPct");
static_assert(offsetof(SQLayerTeamConfig_TryGetAvailabilityModifierPct, InAvailability) == 0x000000, "Member 'SQLayerTeamConfig_TryGetAvailabilityModifierPct::InAvailability' has a wrong offset!");
static_assert(offsetof(SQLayerTeamConfig_TryGetAvailabilityModifierPct, OutModifierPct) == 0x000008, "Member 'SQLayerTeamConfig_TryGetAvailabilityModifierPct::OutModifierPct' has a wrong offset!");
static_assert(offsetof(SQLayerTeamConfig_TryGetAvailabilityModifierPct, ReturnValue) == 0x00000C, "Member 'SQLayerTeamConfig_TryGetAvailabilityModifierPct::ReturnValue' has a wrong offset!");

// Function Squad.SQLevel.CanFactionOperate
// 0x0018 (0x0018 - 0x0000)
struct SQLevel_CanFactionOperate final
{
public:
	class USQFactionSetup*                        FactionSetup;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQLayer*                               Layer;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_123B[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQLevel_CanFactionOperate) == 0x000008, "Wrong alignment on SQLevel_CanFactionOperate");
static_assert(sizeof(SQLevel_CanFactionOperate) == 0x000018, "Wrong size on SQLevel_CanFactionOperate");
static_assert(offsetof(SQLevel_CanFactionOperate, FactionSetup) == 0x000000, "Member 'SQLevel_CanFactionOperate::FactionSetup' has a wrong offset!");
static_assert(offsetof(SQLevel_CanFactionOperate, Layer) == 0x000008, "Member 'SQLevel_CanFactionOperate::Layer' has a wrong offset!");
static_assert(offsetof(SQLevel_CanFactionOperate, ReturnValue) == 0x000010, "Member 'SQLevel_CanFactionOperate::ReturnValue' has a wrong offset!");

// Function Squad.SQLevel.GetBiomeId
// 0x0008 (0x0008 - 0x0000)
struct SQLevel_GetBiomeId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQLevel_GetBiomeId) == 0x000004, "Wrong alignment on SQLevel_GetBiomeId");
static_assert(sizeof(SQLevel_GetBiomeId) == 0x000008, "Wrong size on SQLevel_GetBiomeId");
static_assert(offsetof(SQLevel_GetBiomeId, ReturnValue) == 0x000000, "Member 'SQLevel_GetBiomeId::ReturnValue' has a wrong offset!");

// Function Squad.SQLevel.GetMapName
// 0x0018 (0x0018 - 0x0000)
struct SQLevel_GetMapName final
{
public:
	class FString                                 OutMapName;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_123C[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQLevel_GetMapName) == 0x000008, "Wrong alignment on SQLevel_GetMapName");
static_assert(sizeof(SQLevel_GetMapName) == 0x000018, "Wrong size on SQLevel_GetMapName");
static_assert(offsetof(SQLevel_GetMapName, OutMapName) == 0x000000, "Member 'SQLevel_GetMapName::OutMapName' has a wrong offset!");
static_assert(offsetof(SQLevel_GetMapName, ReturnValue) == 0x000010, "Member 'SQLevel_GetMapName::ReturnValue' has a wrong offset!");

// Function Squad.SQLevel.GetMapPath
// 0x0018 (0x0018 - 0x0000)
struct SQLevel_GetMapPath final
{
public:
	class FString                                 OutMapPath;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_123D[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQLevel_GetMapPath) == 0x000008, "Wrong alignment on SQLevel_GetMapPath");
static_assert(sizeof(SQLevel_GetMapPath) == 0x000018, "Wrong size on SQLevel_GetMapPath");
static_assert(offsetof(SQLevel_GetMapPath, OutMapPath) == 0x000000, "Member 'SQLevel_GetMapPath::OutMapPath' has a wrong offset!");
static_assert(offsetof(SQLevel_GetMapPath, ReturnValue) == 0x000010, "Member 'SQLevel_GetMapPath::ReturnValue' has a wrong offset!");

// Function Squad.SQLevel.HasMapName
// 0x0018 (0x0018 - 0x0000)
struct SQLevel_HasMapName final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_123E[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQLevel_HasMapName) == 0x000008, "Wrong alignment on SQLevel_HasMapName");
static_assert(sizeof(SQLevel_HasMapName) == 0x000018, "Wrong size on SQLevel_HasMapName");
static_assert(offsetof(SQLevel_HasMapName, MapName) == 0x000000, "Member 'SQLevel_HasMapName::MapName' has a wrong offset!");
static_assert(offsetof(SQLevel_HasMapName, ReturnValue) == 0x000010, "Member 'SQLevel_HasMapName::ReturnValue' has a wrong offset!");

// Function Squad.SQLevel.HasMapPath
// 0x0018 (0x0018 - 0x0000)
struct SQLevel_HasMapPath final
{
public:
	class FString                                 MapPath;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_123F[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQLevel_HasMapPath) == 0x000008, "Wrong alignment on SQLevel_HasMapPath");
static_assert(sizeof(SQLevel_HasMapPath) == 0x000018, "Wrong size on SQLevel_HasMapPath");
static_assert(offsetof(SQLevel_HasMapPath, MapPath) == 0x000000, "Member 'SQLevel_HasMapPath::MapPath' has a wrong offset!");
static_assert(offsetof(SQLevel_HasMapPath, ReturnValue) == 0x000010, "Member 'SQLevel_HasMapPath::ReturnValue' has a wrong offset!");

// Function Squad.SQLevel.TryGetDescription
// 0x0020 (0x0020 - 0x0000)
struct SQLevel_TryGetDescription final
{
public:
	class FText                                   OutDescription;                                    // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1240[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQLevel_TryGetDescription) == 0x000008, "Wrong alignment on SQLevel_TryGetDescription");
static_assert(sizeof(SQLevel_TryGetDescription) == 0x000020, "Wrong size on SQLevel_TryGetDescription");
static_assert(offsetof(SQLevel_TryGetDescription, OutDescription) == 0x000000, "Member 'SQLevel_TryGetDescription::OutDescription' has a wrong offset!");
static_assert(offsetof(SQLevel_TryGetDescription, ReturnValue) == 0x000018, "Member 'SQLevel_TryGetDescription::ReturnValue' has a wrong offset!");

// Function Squad.SQLevel.TryGetDisplayName
// 0x0020 (0x0020 - 0x0000)
struct SQLevel_TryGetDisplayName final
{
public:
	class FText                                   OutDisplayName;                                    // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1241[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQLevel_TryGetDisplayName) == 0x000008, "Wrong alignment on SQLevel_TryGetDisplayName");
static_assert(sizeof(SQLevel_TryGetDisplayName) == 0x000020, "Wrong size on SQLevel_TryGetDisplayName");
static_assert(offsetof(SQLevel_TryGetDisplayName, OutDisplayName) == 0x000000, "Member 'SQLevel_TryGetDisplayName::OutDisplayName' has a wrong offset!");
static_assert(offsetof(SQLevel_TryGetDisplayName, ReturnValue) == 0x000018, "Member 'SQLevel_TryGetDisplayName::ReturnValue' has a wrong offset!");

// Function Squad.SQLevel.TryGetLoadingMusic
// 0x0010 (0x0010 - 0x0000)
struct SQLevel_TryGetLoadingMusic final
{
public:
	class USoundBase*                             OutLoadingMusic;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1242[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQLevel_TryGetLoadingMusic) == 0x000008, "Wrong alignment on SQLevel_TryGetLoadingMusic");
static_assert(sizeof(SQLevel_TryGetLoadingMusic) == 0x000010, "Wrong size on SQLevel_TryGetLoadingMusic");
static_assert(offsetof(SQLevel_TryGetLoadingMusic, OutLoadingMusic) == 0x000000, "Member 'SQLevel_TryGetLoadingMusic::OutLoadingMusic' has a wrong offset!");
static_assert(offsetof(SQLevel_TryGetLoadingMusic, ReturnValue) == 0x000008, "Member 'SQLevel_TryGetLoadingMusic::ReturnValue' has a wrong offset!");

// Function Squad.SQLevel.TryGetLoadingScreen
// 0x0038 (0x0038 - 0x0000)
struct SQLevel_TryGetLoadingScreen final
{
public:
	TSoftObjectPtr<class UTexture2D>              OutLoadingScreen;                                  // 0x0000(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InViewportSize;                                    // 0x0028(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1243[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQLevel_TryGetLoadingScreen) == 0x000008, "Wrong alignment on SQLevel_TryGetLoadingScreen");
static_assert(sizeof(SQLevel_TryGetLoadingScreen) == 0x000038, "Wrong size on SQLevel_TryGetLoadingScreen");
static_assert(offsetof(SQLevel_TryGetLoadingScreen, OutLoadingScreen) == 0x000000, "Member 'SQLevel_TryGetLoadingScreen::OutLoadingScreen' has a wrong offset!");
static_assert(offsetof(SQLevel_TryGetLoadingScreen, InViewportSize) == 0x000028, "Member 'SQLevel_TryGetLoadingScreen::InViewportSize' has a wrong offset!");
static_assert(offsetof(SQLevel_TryGetLoadingScreen, ReturnValue) == 0x000030, "Member 'SQLevel_TryGetLoadingScreen::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleAmmoBox.DestroyWeaponAmmo
// 0x0010 (0x0010 - 0x0000)
struct SQVehicleAmmoBox_DestroyWeaponAmmo final
{
public:
	class ASQWeapon*                              Weapon;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetAmmoPercentage;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectCurrentMag;                                 // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1246[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVehicleAmmoBox_DestroyWeaponAmmo) == 0x000008, "Wrong alignment on SQVehicleAmmoBox_DestroyWeaponAmmo");
static_assert(sizeof(SQVehicleAmmoBox_DestroyWeaponAmmo) == 0x000010, "Wrong size on SQVehicleAmmoBox_DestroyWeaponAmmo");
static_assert(offsetof(SQVehicleAmmoBox_DestroyWeaponAmmo, Weapon) == 0x000000, "Member 'SQVehicleAmmoBox_DestroyWeaponAmmo::Weapon' has a wrong offset!");
static_assert(offsetof(SQVehicleAmmoBox_DestroyWeaponAmmo, TargetAmmoPercentage) == 0x000008, "Member 'SQVehicleAmmoBox_DestroyWeaponAmmo::TargetAmmoPercentage' has a wrong offset!");
static_assert(offsetof(SQVehicleAmmoBox_DestroyWeaponAmmo, bAffectCurrentMag) == 0x00000C, "Member 'SQVehicleAmmoBox_DestroyWeaponAmmo::bAffectCurrentMag' has a wrong offset!");

// Function Squad.SQLoginCallbackProxy.GetLoginResult
// 0x0020 (0x0020 - 0x0000)
struct SQLoginCallbackProxy_GetLoginResult final
{
public:
	struct FSQBlueprintLoginResult                Result;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQLoginCallbackProxy_GetLoginResult) == 0x000008, "Wrong alignment on SQLoginCallbackProxy_GetLoginResult");
static_assert(sizeof(SQLoginCallbackProxy_GetLoginResult) == 0x000020, "Wrong size on SQLoginCallbackProxy_GetLoginResult");
static_assert(offsetof(SQLoginCallbackProxy_GetLoginResult, Result) == 0x000000, "Member 'SQLoginCallbackProxy_GetLoginResult::Result' has a wrong offset!");
static_assert(offsetof(SQLoginCallbackProxy_GetLoginResult, ReturnValue) == 0x000010, "Member 'SQLoginCallbackProxy_GetLoginResult::ReturnValue' has a wrong offset!");

// Function Squad.SQLoginCallbackProxy.Login
// 0x0038 (0x0038 - 0x0000)
struct SQLoginCallbackProxy_Login final
{
public:
	class UObject*                                InWorldContextObject;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      InPlayerController;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InLoginName;                                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InPassword;                                        // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQLoginCallbackProxy*                  ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQLoginCallbackProxy_Login) == 0x000008, "Wrong alignment on SQLoginCallbackProxy_Login");
static_assert(sizeof(SQLoginCallbackProxy_Login) == 0x000038, "Wrong size on SQLoginCallbackProxy_Login");
static_assert(offsetof(SQLoginCallbackProxy_Login, InWorldContextObject) == 0x000000, "Member 'SQLoginCallbackProxy_Login::InWorldContextObject' has a wrong offset!");
static_assert(offsetof(SQLoginCallbackProxy_Login, InPlayerController) == 0x000008, "Member 'SQLoginCallbackProxy_Login::InPlayerController' has a wrong offset!");
static_assert(offsetof(SQLoginCallbackProxy_Login, InLoginName) == 0x000010, "Member 'SQLoginCallbackProxy_Login::InLoginName' has a wrong offset!");
static_assert(offsetof(SQLoginCallbackProxy_Login, InPassword) == 0x000020, "Member 'SQLoginCallbackProxy_Login::InPassword' has a wrong offset!");
static_assert(offsetof(SQLoginCallbackProxy_Login, ReturnValue) == 0x000030, "Member 'SQLoginCallbackProxy_Login::ReturnValue' has a wrong offset!");

// Function Squad.SQMapConversions.MapLocationToGridCoordinateString
// 0x0020 (0x0020 - 0x0000)
struct SQMapConversions_MapLocationToGridCoordinateString final
{
public:
	struct FVector2D                              MapLocation;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NumGridLines;                                      // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapConversions_MapLocationToGridCoordinateString) == 0x000008, "Wrong alignment on SQMapConversions_MapLocationToGridCoordinateString");
static_assert(sizeof(SQMapConversions_MapLocationToGridCoordinateString) == 0x000020, "Wrong size on SQMapConversions_MapLocationToGridCoordinateString");
static_assert(offsetof(SQMapConversions_MapLocationToGridCoordinateString, MapLocation) == 0x000000, "Member 'SQMapConversions_MapLocationToGridCoordinateString::MapLocation' has a wrong offset!");
static_assert(offsetof(SQMapConversions_MapLocationToGridCoordinateString, NumGridLines) == 0x000008, "Member 'SQMapConversions_MapLocationToGridCoordinateString::NumGridLines' has a wrong offset!");
static_assert(offsetof(SQMapConversions_MapLocationToGridCoordinateString, ReturnValue) == 0x000010, "Member 'SQMapConversions_MapLocationToGridCoordinateString::ReturnValue' has a wrong offset!");

// Function Squad.SQMapConversions.MapLocationToScreenLocation
// 0x0020 (0x0020 - 0x0000)
struct SQMapConversions_MapLocationToScreenLocation final
{
public:
	struct FVector2D                              OutScreenLocation;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MapLocation;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPanelWidget*                     MapBody;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124C[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQMapConversions_MapLocationToScreenLocation) == 0x000008, "Wrong alignment on SQMapConversions_MapLocationToScreenLocation");
static_assert(sizeof(SQMapConversions_MapLocationToScreenLocation) == 0x000020, "Wrong size on SQMapConversions_MapLocationToScreenLocation");
static_assert(offsetof(SQMapConversions_MapLocationToScreenLocation, OutScreenLocation) == 0x000000, "Member 'SQMapConversions_MapLocationToScreenLocation::OutScreenLocation' has a wrong offset!");
static_assert(offsetof(SQMapConversions_MapLocationToScreenLocation, MapLocation) == 0x000008, "Member 'SQMapConversions_MapLocationToScreenLocation::MapLocation' has a wrong offset!");
static_assert(offsetof(SQMapConversions_MapLocationToScreenLocation, MapBody) == 0x000010, "Member 'SQMapConversions_MapLocationToScreenLocation::MapBody' has a wrong offset!");
static_assert(offsetof(SQMapConversions_MapLocationToScreenLocation, ReturnValue) == 0x000018, "Member 'SQMapConversions_MapLocationToScreenLocation::ReturnValue' has a wrong offset!");

// Function Squad.SQMapConversions.MapToMapGridLocation
// 0x001C (0x001C - 0x0000)
struct SQMapConversions_MapToMapGridLocation final
{
public:
	struct FVector2D                              OutMapGrid;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MapLocation;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NumGridLines;                                      // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124D[0x3];                                     // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQMapConversions_MapToMapGridLocation) == 0x000004, "Wrong alignment on SQMapConversions_MapToMapGridLocation");
static_assert(sizeof(SQMapConversions_MapToMapGridLocation) == 0x00001C, "Wrong size on SQMapConversions_MapToMapGridLocation");
static_assert(offsetof(SQMapConversions_MapToMapGridLocation, OutMapGrid) == 0x000000, "Member 'SQMapConversions_MapToMapGridLocation::OutMapGrid' has a wrong offset!");
static_assert(offsetof(SQMapConversions_MapToMapGridLocation, MapLocation) == 0x000008, "Member 'SQMapConversions_MapToMapGridLocation::MapLocation' has a wrong offset!");
static_assert(offsetof(SQMapConversions_MapToMapGridLocation, NumGridLines) == 0x000010, "Member 'SQMapConversions_MapToMapGridLocation::NumGridLines' has a wrong offset!");
static_assert(offsetof(SQMapConversions_MapToMapGridLocation, ReturnValue) == 0x000018, "Member 'SQMapConversions_MapToMapGridLocation::ReturnValue' has a wrong offset!");

// Function Squad.SQMapConversions.ScreenLocationToMapLocation
// 0x0020 (0x0020 - 0x0000)
struct SQMapConversions_ScreenLocationToMapLocation final
{
public:
	struct FVector2D                              OutMapLocation;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ScreenLocation;                                    // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPanelWidget*                     MapBody;                                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124E[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQMapConversions_ScreenLocationToMapLocation) == 0x000008, "Wrong alignment on SQMapConversions_ScreenLocationToMapLocation");
static_assert(sizeof(SQMapConversions_ScreenLocationToMapLocation) == 0x000020, "Wrong size on SQMapConversions_ScreenLocationToMapLocation");
static_assert(offsetof(SQMapConversions_ScreenLocationToMapLocation, OutMapLocation) == 0x000000, "Member 'SQMapConversions_ScreenLocationToMapLocation::OutMapLocation' has a wrong offset!");
static_assert(offsetof(SQMapConversions_ScreenLocationToMapLocation, ScreenLocation) == 0x000008, "Member 'SQMapConversions_ScreenLocationToMapLocation::ScreenLocation' has a wrong offset!");
static_assert(offsetof(SQMapConversions_ScreenLocationToMapLocation, MapBody) == 0x000010, "Member 'SQMapConversions_ScreenLocationToMapLocation::MapBody' has a wrong offset!");
static_assert(offsetof(SQMapConversions_ScreenLocationToMapLocation, ReturnValue) == 0x000018, "Member 'SQMapConversions_ScreenLocationToMapLocation::ReturnValue' has a wrong offset!");

// Function Squad.SQMapConversions.WorldToMapGridLocation
// 0x003C (0x003C - 0x0000)
struct SQMapConversions_WorldToMapGridLocation final
{
public:
	struct FVector2D                              OutMapGrid;                                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldVectorZeroBased;                              // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox2D                                 WorldBoundsZeroBased;                              // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              MapBoundsScale;                                    // 0x0028(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NumGridLines;                                      // 0x0030(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124F[0x3];                                     // 0x0039(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQMapConversions_WorldToMapGridLocation) == 0x000004, "Wrong alignment on SQMapConversions_WorldToMapGridLocation");
static_assert(sizeof(SQMapConversions_WorldToMapGridLocation) == 0x00003C, "Wrong size on SQMapConversions_WorldToMapGridLocation");
static_assert(offsetof(SQMapConversions_WorldToMapGridLocation, OutMapGrid) == 0x000000, "Member 'SQMapConversions_WorldToMapGridLocation::OutMapGrid' has a wrong offset!");
static_assert(offsetof(SQMapConversions_WorldToMapGridLocation, WorldVectorZeroBased) == 0x000008, "Member 'SQMapConversions_WorldToMapGridLocation::WorldVectorZeroBased' has a wrong offset!");
static_assert(offsetof(SQMapConversions_WorldToMapGridLocation, WorldBoundsZeroBased) == 0x000014, "Member 'SQMapConversions_WorldToMapGridLocation::WorldBoundsZeroBased' has a wrong offset!");
static_assert(offsetof(SQMapConversions_WorldToMapGridLocation, MapBoundsScale) == 0x000028, "Member 'SQMapConversions_WorldToMapGridLocation::MapBoundsScale' has a wrong offset!");
static_assert(offsetof(SQMapConversions_WorldToMapGridLocation, NumGridLines) == 0x000030, "Member 'SQMapConversions_WorldToMapGridLocation::NumGridLines' has a wrong offset!");
static_assert(offsetof(SQMapConversions_WorldToMapGridLocation, ReturnValue) == 0x000038, "Member 'SQMapConversions_WorldToMapGridLocation::ReturnValue' has a wrong offset!");

// Function Squad.SQMapConversions.WorldToMapLocation
// 0x0034 (0x0034 - 0x0000)
struct SQMapConversions_WorldToMapLocation final
{
public:
	struct FVector2D                              OutMapLocation;                                    // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocationZeroBased;                            // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox2D                                 WorldBoundsZeroBased;                              // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              MapBoundsScale;                                    // 0x0028(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1250[0x3];                                     // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQMapConversions_WorldToMapLocation) == 0x000004, "Wrong alignment on SQMapConversions_WorldToMapLocation");
static_assert(sizeof(SQMapConversions_WorldToMapLocation) == 0x000034, "Wrong size on SQMapConversions_WorldToMapLocation");
static_assert(offsetof(SQMapConversions_WorldToMapLocation, OutMapLocation) == 0x000000, "Member 'SQMapConversions_WorldToMapLocation::OutMapLocation' has a wrong offset!");
static_assert(offsetof(SQMapConversions_WorldToMapLocation, WorldLocationZeroBased) == 0x000008, "Member 'SQMapConversions_WorldToMapLocation::WorldLocationZeroBased' has a wrong offset!");
static_assert(offsetof(SQMapConversions_WorldToMapLocation, WorldBoundsZeroBased) == 0x000014, "Member 'SQMapConversions_WorldToMapLocation::WorldBoundsZeroBased' has a wrong offset!");
static_assert(offsetof(SQMapConversions_WorldToMapLocation, MapBoundsScale) == 0x000028, "Member 'SQMapConversions_WorldToMapLocation::MapBoundsScale' has a wrong offset!");
static_assert(offsetof(SQMapConversions_WorldToMapLocation, ReturnValue) == 0x000030, "Member 'SQMapConversions_WorldToMapLocation::ReturnValue' has a wrong offset!");

// Function Squad.SQMapConversions.WorldToMapVector
// 0x0034 (0x0034 - 0x0000)
struct SQMapConversions_WorldToMapVector final
{
public:
	struct FVector2D                              OutMapVector;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldVectorZeroBased;                              // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox2D                                 WorldBoundsZeroBased;                              // 0x0014(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              MapBoundsScale;                                    // 0x0028(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1251[0x3];                                     // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQMapConversions_WorldToMapVector) == 0x000004, "Wrong alignment on SQMapConversions_WorldToMapVector");
static_assert(sizeof(SQMapConversions_WorldToMapVector) == 0x000034, "Wrong size on SQMapConversions_WorldToMapVector");
static_assert(offsetof(SQMapConversions_WorldToMapVector, OutMapVector) == 0x000000, "Member 'SQMapConversions_WorldToMapVector::OutMapVector' has a wrong offset!");
static_assert(offsetof(SQMapConversions_WorldToMapVector, WorldVectorZeroBased) == 0x000008, "Member 'SQMapConversions_WorldToMapVector::WorldVectorZeroBased' has a wrong offset!");
static_assert(offsetof(SQMapConversions_WorldToMapVector, WorldBoundsZeroBased) == 0x000014, "Member 'SQMapConversions_WorldToMapVector::WorldBoundsZeroBased' has a wrong offset!");
static_assert(offsetof(SQMapConversions_WorldToMapVector, MapBoundsScale) == 0x000028, "Member 'SQMapConversions_WorldToMapVector::MapBoundsScale' has a wrong offset!");
static_assert(offsetof(SQMapConversions_WorldToMapVector, ReturnValue) == 0x000030, "Member 'SQMapConversions_WorldToMapVector::ReturnValue' has a wrong offset!");

// Function Squad.SQMapGrid.DrawGrid
// 0x0068 (0x0068 - 0x0000)
struct SQMapGrid_DrawGrid final
{
public:
	class USQMapGrid*                             MapGrid;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPaintContext                          Context;                                           // 0x0008(0x0030)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              Offset;                                            // 0x0038(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              StepSize;                                          // 0x0040(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              GridLinesNeeded;                                   // 0x0048(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkipNumber;                                        // 0x0050(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0054(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0064(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapGrid_DrawGrid) == 0x000008, "Wrong alignment on SQMapGrid_DrawGrid");
static_assert(sizeof(SQMapGrid_DrawGrid) == 0x000068, "Wrong size on SQMapGrid_DrawGrid");
static_assert(offsetof(SQMapGrid_DrawGrid, MapGrid) == 0x000000, "Member 'SQMapGrid_DrawGrid::MapGrid' has a wrong offset!");
static_assert(offsetof(SQMapGrid_DrawGrid, Context) == 0x000008, "Member 'SQMapGrid_DrawGrid::Context' has a wrong offset!");
static_assert(offsetof(SQMapGrid_DrawGrid, Offset) == 0x000038, "Member 'SQMapGrid_DrawGrid::Offset' has a wrong offset!");
static_assert(offsetof(SQMapGrid_DrawGrid, StepSize) == 0x000040, "Member 'SQMapGrid_DrawGrid::StepSize' has a wrong offset!");
static_assert(offsetof(SQMapGrid_DrawGrid, GridLinesNeeded) == 0x000048, "Member 'SQMapGrid_DrawGrid::GridLinesNeeded' has a wrong offset!");
static_assert(offsetof(SQMapGrid_DrawGrid, SkipNumber) == 0x000050, "Member 'SQMapGrid_DrawGrid::SkipNumber' has a wrong offset!");
static_assert(offsetof(SQMapGrid_DrawGrid, Color) == 0x000054, "Member 'SQMapGrid_DrawGrid::Color' has a wrong offset!");
static_assert(offsetof(SQMapGrid_DrawGrid, Width) == 0x000064, "Member 'SQMapGrid_DrawGrid::Width' has a wrong offset!");

// Function Squad.SQMapGrid.DrawGridMarkers
// 0x0060 (0x0060 - 0x0000)
struct SQMapGrid_DrawGridMarkers final
{
public:
	class USQMapGrid*                             MapGrid;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPaintContext                          Context;                                           // 0x0008(0x0030)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              Offset;                                            // 0x0038(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              StepSize;                                          // 0x0040(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              GridLinesNeeded;                                   // 0x0048(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0050(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapGrid_DrawGridMarkers) == 0x000008, "Wrong alignment on SQMapGrid_DrawGridMarkers");
static_assert(sizeof(SQMapGrid_DrawGridMarkers) == 0x000060, "Wrong size on SQMapGrid_DrawGridMarkers");
static_assert(offsetof(SQMapGrid_DrawGridMarkers, MapGrid) == 0x000000, "Member 'SQMapGrid_DrawGridMarkers::MapGrid' has a wrong offset!");
static_assert(offsetof(SQMapGrid_DrawGridMarkers, Context) == 0x000008, "Member 'SQMapGrid_DrawGridMarkers::Context' has a wrong offset!");
static_assert(offsetof(SQMapGrid_DrawGridMarkers, Offset) == 0x000038, "Member 'SQMapGrid_DrawGridMarkers::Offset' has a wrong offset!");
static_assert(offsetof(SQMapGrid_DrawGridMarkers, StepSize) == 0x000040, "Member 'SQMapGrid_DrawGridMarkers::StepSize' has a wrong offset!");
static_assert(offsetof(SQMapGrid_DrawGridMarkers, GridLinesNeeded) == 0x000048, "Member 'SQMapGrid_DrawGridMarkers::GridLinesNeeded' has a wrong offset!");
static_assert(offsetof(SQMapGrid_DrawGridMarkers, Color) == 0x000050, "Member 'SQMapGrid_DrawGridMarkers::Color' has a wrong offset!");

// Function Squad.SQMapGrid.DrawLegendLine
// 0x0078 (0x0078 - 0x0000)
struct SQMapGrid_DrawLegendLine final
{
public:
	class USQMapGrid*                             MapGrid;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPaintContext                          Context;                                           // 0x0008(0x0030)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              StepSize;                                          // 0x0038(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0040(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0050(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1254[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   LegendText;                                        // 0x0058(0x0018)(ConstParm, Parm, NativeAccessSpecifierPublic)
	float                                         YOffset;                                           // 0x0070(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1255[0x4];                                     // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQMapGrid_DrawLegendLine) == 0x000008, "Wrong alignment on SQMapGrid_DrawLegendLine");
static_assert(sizeof(SQMapGrid_DrawLegendLine) == 0x000078, "Wrong size on SQMapGrid_DrawLegendLine");
static_assert(offsetof(SQMapGrid_DrawLegendLine, MapGrid) == 0x000000, "Member 'SQMapGrid_DrawLegendLine::MapGrid' has a wrong offset!");
static_assert(offsetof(SQMapGrid_DrawLegendLine, Context) == 0x000008, "Member 'SQMapGrid_DrawLegendLine::Context' has a wrong offset!");
static_assert(offsetof(SQMapGrid_DrawLegendLine, StepSize) == 0x000038, "Member 'SQMapGrid_DrawLegendLine::StepSize' has a wrong offset!");
static_assert(offsetof(SQMapGrid_DrawLegendLine, Color) == 0x000040, "Member 'SQMapGrid_DrawLegendLine::Color' has a wrong offset!");
static_assert(offsetof(SQMapGrid_DrawLegendLine, Width) == 0x000050, "Member 'SQMapGrid_DrawLegendLine::Width' has a wrong offset!");
static_assert(offsetof(SQMapGrid_DrawLegendLine, LegendText) == 0x000058, "Member 'SQMapGrid_DrawLegendLine::LegendText' has a wrong offset!");
static_assert(offsetof(SQMapGrid_DrawLegendLine, YOffset) == 0x000070, "Member 'SQMapGrid_DrawLegendLine::YOffset' has a wrong offset!");

// Function Squad.SQMapGrid.DrawWidget
// 0x0038 (0x0038 - 0x0000)
struct SQMapGrid_DrawWidget final
{
public:
	class USQMapGrid*                             MapGrid;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPaintContext                          Context;                                           // 0x0008(0x0030)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapGrid_DrawWidget) == 0x000008, "Wrong alignment on SQMapGrid_DrawWidget");
static_assert(sizeof(SQMapGrid_DrawWidget) == 0x000038, "Wrong size on SQMapGrid_DrawWidget");
static_assert(offsetof(SQMapGrid_DrawWidget, MapGrid) == 0x000000, "Member 'SQMapGrid_DrawWidget::MapGrid' has a wrong offset!");
static_assert(offsetof(SQMapGrid_DrawWidget, Context) == 0x000008, "Member 'SQMapGrid_DrawWidget::Context' has a wrong offset!");

// Function Squad.SQMapMarker.GetMarkerType
// 0x0001 (0x0001 - 0x0000)
struct SQMapMarker_GetMarkerType final
{
public:
	ESQMapMarkerType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapMarker_GetMarkerType) == 0x000001, "Wrong alignment on SQMapMarker_GetMarkerType");
static_assert(sizeof(SQMapMarker_GetMarkerType) == 0x000001, "Wrong size on SQMapMarker_GetMarkerType");
static_assert(offsetof(SQMapMarker_GetMarkerType, ReturnValue) == 0x000000, "Member 'SQMapMarker_GetMarkerType::ReturnValue' has a wrong offset!");

// Function Squad.SQMapMarker.SetFireteamId
// 0x0004 (0x0004 - 0x0000)
struct SQMapMarker_SetFireteamId final
{
public:
	int32                                         Param_FireTeamId;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapMarker_SetFireteamId) == 0x000004, "Wrong alignment on SQMapMarker_SetFireteamId");
static_assert(sizeof(SQMapMarker_SetFireteamId) == 0x000004, "Wrong size on SQMapMarker_SetFireteamId");
static_assert(offsetof(SQMapMarker_SetFireteamId, Param_FireTeamId) == 0x000000, "Member 'SQMapMarker_SetFireteamId::Param_FireTeamId' has a wrong offset!");

// Function Squad.SQMapMarker.SetMarkerType
// 0x0001 (0x0001 - 0x0000)
struct SQMapMarker_SetMarkerType final
{
public:
	ESQMapMarkerType                              MarkerType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapMarker_SetMarkerType) == 0x000001, "Wrong alignment on SQMapMarker_SetMarkerType");
static_assert(sizeof(SQMapMarker_SetMarkerType) == 0x000001, "Wrong size on SQMapMarker_SetMarkerType");
static_assert(offsetof(SQMapMarker_SetMarkerType, MarkerType) == 0x000000, "Member 'SQMapMarker_SetMarkerType::MarkerType' has a wrong offset!");

// Function Squad.SQMapMarker.SetMarkerVisibleTo
// 0x0001 (0x0001 - 0x0000)
struct SQMapMarker_SetMarkerVisibleTo final
{
public:
	ESQMapMarkerVisibleTo                         VisibleTo;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapMarker_SetMarkerVisibleTo) == 0x000001, "Wrong alignment on SQMapMarker_SetMarkerVisibleTo");
static_assert(sizeof(SQMapMarker_SetMarkerVisibleTo) == 0x000001, "Wrong size on SQMapMarker_SetMarkerVisibleTo");
static_assert(offsetof(SQMapMarker_SetMarkerVisibleTo, VisibleTo) == 0x000000, "Member 'SQMapMarker_SetMarkerVisibleTo::VisibleTo' has a wrong offset!");

// Function Squad.SQMapMarker.SetSquad
// 0x0004 (0x0004 - 0x0000)
struct SQMapMarker_SetSquad final
{
public:
	int32                                         Param_Squad;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapMarker_SetSquad) == 0x000004, "Wrong alignment on SQMapMarker_SetSquad");
static_assert(sizeof(SQMapMarker_SetSquad) == 0x000004, "Wrong size on SQMapMarker_SetSquad");
static_assert(offsetof(SQMapMarker_SetSquad, Param_Squad) == 0x000000, "Member 'SQMapMarker_SetSquad::Param_Squad' has a wrong offset!");

// Function Squad.SQMapMarker.GetFireteamId
// 0x0004 (0x0004 - 0x0000)
struct SQMapMarker_GetFireteamId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapMarker_GetFireteamId) == 0x000004, "Wrong alignment on SQMapMarker_GetFireteamId");
static_assert(sizeof(SQMapMarker_GetFireteamId) == 0x000004, "Wrong size on SQMapMarker_GetFireteamId");
static_assert(offsetof(SQMapMarker_GetFireteamId, ReturnValue) == 0x000000, "Member 'SQMapMarker_GetFireteamId::ReturnValue' has a wrong offset!");

// Function Squad.SQMapMarker.GetSquad
// 0x0004 (0x0004 - 0x0000)
struct SQMapMarker_GetSquad final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapMarker_GetSquad) == 0x000004, "Wrong alignment on SQMapMarker_GetSquad");
static_assert(sizeof(SQMapMarker_GetSquad) == 0x000004, "Wrong size on SQMapMarker_GetSquad");
static_assert(offsetof(SQMapMarker_GetSquad, ReturnValue) == 0x000000, "Member 'SQMapMarker_GetSquad::ReturnValue' has a wrong offset!");

// Function Squad.SQMapMarkerManagerComponent.CreateMapMarker
// 0x0040 (0x0040 - 0x0000)
struct SQMapMarkerManagerComponent_CreateMapMarker final
{
public:
	struct FSQMapMarkerGameplayData               MarkerGameplayData;                                // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsCommanderMarker;                                // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_125C[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQMapMarkerManagerComponent_CreateMapMarker) == 0x000008, "Wrong alignment on SQMapMarkerManagerComponent_CreateMapMarker");
static_assert(sizeof(SQMapMarkerManagerComponent_CreateMapMarker) == 0x000040, "Wrong size on SQMapMarkerManagerComponent_CreateMapMarker");
static_assert(offsetof(SQMapMarkerManagerComponent_CreateMapMarker, MarkerGameplayData) == 0x000000, "Member 'SQMapMarkerManagerComponent_CreateMapMarker::MarkerGameplayData' has a wrong offset!");
static_assert(offsetof(SQMapMarkerManagerComponent_CreateMapMarker, bIsCommanderMarker) == 0x000038, "Member 'SQMapMarkerManagerComponent_CreateMapMarker::bIsCommanderMarker' has a wrong offset!");

// Function Squad.SQMapMarkerManagerComponent.DeleteRelevantMarkers
// 0x0010 (0x0010 - 0x0000)
struct SQMapMarkerManagerComponent_DeleteRelevantMarkers final
{
public:
	TArray<int32>                                 MapMarkerModifiedIndices;                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapMarkerManagerComponent_DeleteRelevantMarkers) == 0x000008, "Wrong alignment on SQMapMarkerManagerComponent_DeleteRelevantMarkers");
static_assert(sizeof(SQMapMarkerManagerComponent_DeleteRelevantMarkers) == 0x000010, "Wrong size on SQMapMarkerManagerComponent_DeleteRelevantMarkers");
static_assert(offsetof(SQMapMarkerManagerComponent_DeleteRelevantMarkers, MapMarkerModifiedIndices) == 0x000000, "Member 'SQMapMarkerManagerComponent_DeleteRelevantMarkers::MapMarkerModifiedIndices' has a wrong offset!");

// Function Squad.SQMapMarkerManagerComponent.FindMapMarkersByType
// 0x0018 (0x0018 - 0x0000)
struct SQMapMarkerManagerComponent_FindMapMarkersByType final
{
public:
	TArray<struct FSQMapMarkerGameplayData>       OutMarkers;                                        // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class USQMapMarkerDataAsset*                  MarkerType;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapMarkerManagerComponent_FindMapMarkersByType) == 0x000008, "Wrong alignment on SQMapMarkerManagerComponent_FindMapMarkersByType");
static_assert(sizeof(SQMapMarkerManagerComponent_FindMapMarkersByType) == 0x000018, "Wrong size on SQMapMarkerManagerComponent_FindMapMarkersByType");
static_assert(offsetof(SQMapMarkerManagerComponent_FindMapMarkersByType, OutMarkers) == 0x000000, "Member 'SQMapMarkerManagerComponent_FindMapMarkersByType::OutMarkers' has a wrong offset!");
static_assert(offsetof(SQMapMarkerManagerComponent_FindMapMarkersByType, MarkerType) == 0x000010, "Member 'SQMapMarkerManagerComponent_FindMapMarkersByType::MarkerType' has a wrong offset!");

// Function Squad.SQMapMarkerManagerComponent.InitializeRelevantMarkers
// 0x0010 (0x0010 - 0x0000)
struct SQMapMarkerManagerComponent_InitializeRelevantMarkers final
{
public:
	TArray<int32>                                 MapMarkerModifiedIndices;                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapMarkerManagerComponent_InitializeRelevantMarkers) == 0x000008, "Wrong alignment on SQMapMarkerManagerComponent_InitializeRelevantMarkers");
static_assert(sizeof(SQMapMarkerManagerComponent_InitializeRelevantMarkers) == 0x000010, "Wrong size on SQMapMarkerManagerComponent_InitializeRelevantMarkers");
static_assert(offsetof(SQMapMarkerManagerComponent_InitializeRelevantMarkers, MapMarkerModifiedIndices) == 0x000000, "Member 'SQMapMarkerManagerComponent_InitializeRelevantMarkers::MapMarkerModifiedIndices' has a wrong offset!");

// Function Squad.SQMapMarkerManagerComponent.OnCommanderDemotedEvent
// 0x0008 (0x0008 - 0x0000)
struct SQMapMarkerManagerComponent_OnCommanderDemotedEvent final
{
public:
	class ASQPlayerState*                         OldCommander;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapMarkerManagerComponent_OnCommanderDemotedEvent) == 0x000008, "Wrong alignment on SQMapMarkerManagerComponent_OnCommanderDemotedEvent");
static_assert(sizeof(SQMapMarkerManagerComponent_OnCommanderDemotedEvent) == 0x000008, "Wrong size on SQMapMarkerManagerComponent_OnCommanderDemotedEvent");
static_assert(offsetof(SQMapMarkerManagerComponent_OnCommanderDemotedEvent, OldCommander) == 0x000000, "Member 'SQMapMarkerManagerComponent_OnCommanderDemotedEvent::OldCommander' has a wrong offset!");

// Function Squad.SQMapMarkerManagerComponent.OnFireteamDeletedEvent
// 0x0010 (0x0010 - 0x0000)
struct SQMapMarkerManagerComponent_OnFireteamDeletedEvent final
{
public:
	class ASQSquad*                               Squad;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FireTeamId;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_125D[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQMapMarkerManagerComponent_OnFireteamDeletedEvent) == 0x000008, "Wrong alignment on SQMapMarkerManagerComponent_OnFireteamDeletedEvent");
static_assert(sizeof(SQMapMarkerManagerComponent_OnFireteamDeletedEvent) == 0x000010, "Wrong size on SQMapMarkerManagerComponent_OnFireteamDeletedEvent");
static_assert(offsetof(SQMapMarkerManagerComponent_OnFireteamDeletedEvent, Squad) == 0x000000, "Member 'SQMapMarkerManagerComponent_OnFireteamDeletedEvent::Squad' has a wrong offset!");
static_assert(offsetof(SQMapMarkerManagerComponent_OnFireteamDeletedEvent, FireTeamId) == 0x000008, "Member 'SQMapMarkerManagerComponent_OnFireteamDeletedEvent::FireTeamId' has a wrong offset!");

// Function Squad.SQMapMarkerManagerComponent.OnMarkerDeleted
// 0x0010 (0x0010 - 0x0000)
struct SQMapMarkerManagerComponent_OnMarkerDeleted final
{
public:
	TArray<int32>                                 MapMarkerModifiedIndices;                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapMarkerManagerComponent_OnMarkerDeleted) == 0x000008, "Wrong alignment on SQMapMarkerManagerComponent_OnMarkerDeleted");
static_assert(sizeof(SQMapMarkerManagerComponent_OnMarkerDeleted) == 0x000010, "Wrong size on SQMapMarkerManagerComponent_OnMarkerDeleted");
static_assert(offsetof(SQMapMarkerManagerComponent_OnMarkerDeleted, MapMarkerModifiedIndices) == 0x000000, "Member 'SQMapMarkerManagerComponent_OnMarkerDeleted::MapMarkerModifiedIndices' has a wrong offset!");

// Function Squad.SQMapMarkerManagerComponent.OnMarkerReceived
// 0x0010 (0x0010 - 0x0000)
struct SQMapMarkerManagerComponent_OnMarkerReceived final
{
public:
	TArray<int32>                                 MapMarkerModifiedIndices;                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapMarkerManagerComponent_OnMarkerReceived) == 0x000008, "Wrong alignment on SQMapMarkerManagerComponent_OnMarkerReceived");
static_assert(sizeof(SQMapMarkerManagerComponent_OnMarkerReceived) == 0x000010, "Wrong size on SQMapMarkerManagerComponent_OnMarkerReceived");
static_assert(offsetof(SQMapMarkerManagerComponent_OnMarkerReceived, MapMarkerModifiedIndices) == 0x000000, "Member 'SQMapMarkerManagerComponent_OnMarkerReceived::MapMarkerModifiedIndices' has a wrong offset!");

// Function Squad.SQMapMarkerManagerComponent.OnSquadDeletedEvent
// 0x0008 (0x0008 - 0x0000)
struct SQMapMarkerManagerComponent_OnSquadDeletedEvent final
{
public:
	int32                                         OldSquadId;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamId;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapMarkerManagerComponent_OnSquadDeletedEvent) == 0x000004, "Wrong alignment on SQMapMarkerManagerComponent_OnSquadDeletedEvent");
static_assert(sizeof(SQMapMarkerManagerComponent_OnSquadDeletedEvent) == 0x000008, "Wrong size on SQMapMarkerManagerComponent_OnSquadDeletedEvent");
static_assert(offsetof(SQMapMarkerManagerComponent_OnSquadDeletedEvent, OldSquadId) == 0x000000, "Member 'SQMapMarkerManagerComponent_OnSquadDeletedEvent::OldSquadId' has a wrong offset!");
static_assert(offsetof(SQMapMarkerManagerComponent_OnSquadDeletedEvent, TeamId) == 0x000004, "Member 'SQMapMarkerManagerComponent_OnSquadDeletedEvent::TeamId' has a wrong offset!");

// Function Squad.SQMapMarkerManagerComponent.RemoveMapMarker
// 0x0002 (0x0002 - 0x0000)
struct SQMapMarkerManagerComponent_RemoveMapMarker final
{
public:
	uint8                                         ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasTimedOut;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapMarkerManagerComponent_RemoveMapMarker) == 0x000001, "Wrong alignment on SQMapMarkerManagerComponent_RemoveMapMarker");
static_assert(sizeof(SQMapMarkerManagerComponent_RemoveMapMarker) == 0x000002, "Wrong size on SQMapMarkerManagerComponent_RemoveMapMarker");
static_assert(offsetof(SQMapMarkerManagerComponent_RemoveMapMarker, ID) == 0x000000, "Member 'SQMapMarkerManagerComponent_RemoveMapMarker::ID' has a wrong offset!");
static_assert(offsetof(SQMapMarkerManagerComponent_RemoveMapMarker, bHasTimedOut) == 0x000001, "Member 'SQMapMarkerManagerComponent_RemoveMapMarker::bHasTimedOut' has a wrong offset!");

// Function Squad.SQMapMarkerManagerComponent.SetMarkerWidgetScale
// 0x0004 (0x0004 - 0x0000)
struct SQMapMarkerManagerComponent_SetMarkerWidgetScale final
{
public:
	float                                         ScaleValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapMarkerManagerComponent_SetMarkerWidgetScale) == 0x000004, "Wrong alignment on SQMapMarkerManagerComponent_SetMarkerWidgetScale");
static_assert(sizeof(SQMapMarkerManagerComponent_SetMarkerWidgetScale) == 0x000004, "Wrong size on SQMapMarkerManagerComponent_SetMarkerWidgetScale");
static_assert(offsetof(SQMapMarkerManagerComponent_SetMarkerWidgetScale, ScaleValue) == 0x000000, "Member 'SQMapMarkerManagerComponent_SetMarkerWidgetScale::ScaleValue' has a wrong offset!");

// Function Squad.SQMapMarkerManagerComponent.SetRootHUD
// 0x0008 (0x0008 - 0x0000)
struct SQMapMarkerManagerComponent_SetRootHUD final
{
public:
	class ASQHUD*                                 NewRootHUD;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapMarkerManagerComponent_SetRootHUD) == 0x000008, "Wrong alignment on SQMapMarkerManagerComponent_SetRootHUD");
static_assert(sizeof(SQMapMarkerManagerComponent_SetRootHUD) == 0x000008, "Wrong size on SQMapMarkerManagerComponent_SetRootHUD");
static_assert(offsetof(SQMapMarkerManagerComponent_SetRootHUD, NewRootHUD) == 0x000000, "Member 'SQMapMarkerManagerComponent_SetRootHUD::NewRootHUD' has a wrong offset!");

// Function Squad.SQMapMarkerManagerComponent.SetRootWidget
// 0x0008 (0x0008 - 0x0000)
struct SQMapMarkerManagerComponent_SetRootWidget final
{
public:
	class USQMapWidgetBase*                       NewRootWidget;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapMarkerManagerComponent_SetRootWidget) == 0x000008, "Wrong alignment on SQMapMarkerManagerComponent_SetRootWidget");
static_assert(sizeof(SQMapMarkerManagerComponent_SetRootWidget) == 0x000008, "Wrong size on SQMapMarkerManagerComponent_SetRootWidget");
static_assert(offsetof(SQMapMarkerManagerComponent_SetRootWidget, NewRootWidget) == 0x000000, "Member 'SQMapMarkerManagerComponent_SetRootWidget::NewRootWidget' has a wrong offset!");

// Function Squad.SQVehicleEngine.GetCurrentEngineTogglePercentage
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleEngine_GetCurrentEngineTogglePercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleEngine_GetCurrentEngineTogglePercentage) == 0x000004, "Wrong alignment on SQVehicleEngine_GetCurrentEngineTogglePercentage");
static_assert(sizeof(SQVehicleEngine_GetCurrentEngineTogglePercentage) == 0x000004, "Wrong size on SQVehicleEngine_GetCurrentEngineTogglePercentage");
static_assert(offsetof(SQVehicleEngine_GetCurrentEngineTogglePercentage, ReturnValue) == 0x000000, "Member 'SQVehicleEngine_GetCurrentEngineTogglePercentage::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleEngine.GetCurrentEngineToggleRequiredDuration
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleEngine_GetCurrentEngineToggleRequiredDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleEngine_GetCurrentEngineToggleRequiredDuration) == 0x000004, "Wrong alignment on SQVehicleEngine_GetCurrentEngineToggleRequiredDuration");
static_assert(sizeof(SQVehicleEngine_GetCurrentEngineToggleRequiredDuration) == 0x000004, "Wrong size on SQVehicleEngine_GetCurrentEngineToggleRequiredDuration");
static_assert(offsetof(SQVehicleEngine_GetCurrentEngineToggleRequiredDuration, ReturnValue) == 0x000000, "Member 'SQVehicleEngine_GetCurrentEngineToggleRequiredDuration::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleEngine.IsEngineActive
// 0x0001 (0x0001 - 0x0000)
struct SQVehicleEngine_IsEngineActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleEngine_IsEngineActive) == 0x000001, "Wrong alignment on SQVehicleEngine_IsEngineActive");
static_assert(sizeof(SQVehicleEngine_IsEngineActive) == 0x000001, "Wrong size on SQVehicleEngine_IsEngineActive");
static_assert(offsetof(SQVehicleEngine_IsEngineActive, ReturnValue) == 0x000000, "Member 'SQVehicleEngine_IsEngineActive::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleEngine.IsEngineToggleActive
// 0x0001 (0x0001 - 0x0000)
struct SQVehicleEngine_IsEngineToggleActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleEngine_IsEngineToggleActive) == 0x000001, "Wrong alignment on SQVehicleEngine_IsEngineToggleActive");
static_assert(sizeof(SQVehicleEngine_IsEngineToggleActive) == 0x000001, "Wrong size on SQVehicleEngine_IsEngineToggleActive");
static_assert(offsetof(SQVehicleEngine_IsEngineToggleActive, ReturnValue) == 0x000000, "Member 'SQVehicleEngine_IsEngineToggleActive::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleEngineComponent.OnPlayerEnteredVehicleHandler
// 0x0018 (0x0018 - 0x0000)
struct SQVehicleEngineComponent_OnPlayerEnteredVehicleHandler final
{
public:
	class ASQVehicle*                             Vehicle;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seat;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1261[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVehicleEngineComponent_OnPlayerEnteredVehicleHandler) == 0x000008, "Wrong alignment on SQVehicleEngineComponent_OnPlayerEnteredVehicleHandler");
static_assert(sizeof(SQVehicleEngineComponent_OnPlayerEnteredVehicleHandler) == 0x000018, "Wrong size on SQVehicleEngineComponent_OnPlayerEnteredVehicleHandler");
static_assert(offsetof(SQVehicleEngineComponent_OnPlayerEnteredVehicleHandler, Vehicle) == 0x000000, "Member 'SQVehicleEngineComponent_OnPlayerEnteredVehicleHandler::Vehicle' has a wrong offset!");
static_assert(offsetof(SQVehicleEngineComponent_OnPlayerEnteredVehicleHandler, Player) == 0x000008, "Member 'SQVehicleEngineComponent_OnPlayerEnteredVehicleHandler::Player' has a wrong offset!");
static_assert(offsetof(SQVehicleEngineComponent_OnPlayerEnteredVehicleHandler, Seat) == 0x000010, "Member 'SQVehicleEngineComponent_OnPlayerEnteredVehicleHandler::Seat' has a wrong offset!");

// Function Squad.SQVehicleEngineComponent.OnPlayerExitedVehicleHandler
// 0x0018 (0x0018 - 0x0000)
struct SQVehicleEngineComponent_OnPlayerExitedVehicleHandler final
{
public:
	class ASQVehicle*                             Vehicle;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seat;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1262[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVehicleEngineComponent_OnPlayerExitedVehicleHandler) == 0x000008, "Wrong alignment on SQVehicleEngineComponent_OnPlayerExitedVehicleHandler");
static_assert(sizeof(SQVehicleEngineComponent_OnPlayerExitedVehicleHandler) == 0x000018, "Wrong size on SQVehicleEngineComponent_OnPlayerExitedVehicleHandler");
static_assert(offsetof(SQVehicleEngineComponent_OnPlayerExitedVehicleHandler, Vehicle) == 0x000000, "Member 'SQVehicleEngineComponent_OnPlayerExitedVehicleHandler::Vehicle' has a wrong offset!");
static_assert(offsetof(SQVehicleEngineComponent_OnPlayerExitedVehicleHandler, Player) == 0x000008, "Member 'SQVehicleEngineComponent_OnPlayerExitedVehicleHandler::Player' has a wrong offset!");
static_assert(offsetof(SQVehicleEngineComponent_OnPlayerExitedVehicleHandler, Seat) == 0x000010, "Member 'SQVehicleEngineComponent_OnPlayerExitedVehicleHandler::Seat' has a wrong offset!");

// Function Squad.SQVehicleEngineComponent.ServerSetEngineActiveInput
// 0x0001 (0x0001 - 0x0000)
struct SQVehicleEngineComponent_ServerSetEngineActiveInput final
{
public:
	bool                                          bNewEngineActive;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleEngineComponent_ServerSetEngineActiveInput) == 0x000001, "Wrong alignment on SQVehicleEngineComponent_ServerSetEngineActiveInput");
static_assert(sizeof(SQVehicleEngineComponent_ServerSetEngineActiveInput) == 0x000001, "Wrong size on SQVehicleEngineComponent_ServerSetEngineActiveInput");
static_assert(offsetof(SQVehicleEngineComponent_ServerSetEngineActiveInput, bNewEngineActive) == 0x000000, "Member 'SQVehicleEngineComponent_ServerSetEngineActiveInput::bNewEngineActive' has a wrong offset!");

// Function Squad.SQVehicleEngineComponent.ServerSetEngineToggleActiveInput
// 0x0001 (0x0001 - 0x0000)
struct SQVehicleEngineComponent_ServerSetEngineToggleActiveInput final
{
public:
	bool                                          bInIsEngineToggleActive;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleEngineComponent_ServerSetEngineToggleActiveInput) == 0x000001, "Wrong alignment on SQVehicleEngineComponent_ServerSetEngineToggleActiveInput");
static_assert(sizeof(SQVehicleEngineComponent_ServerSetEngineToggleActiveInput) == 0x000001, "Wrong size on SQVehicleEngineComponent_ServerSetEngineToggleActiveInput");
static_assert(offsetof(SQVehicleEngineComponent_ServerSetEngineToggleActiveInput, bInIsEngineToggleActive) == 0x000000, "Member 'SQVehicleEngineComponent_ServerSetEngineToggleActiveInput::bInIsEngineToggleActive' has a wrong offset!");

// Function Squad.SQRoleListGroup.GroupAvailabilityText
// 0x0018 (0x0018 - 0x0000)
struct SQRoleListGroup_GroupAvailabilityText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRoleListGroup_GroupAvailabilityText) == 0x000008, "Wrong alignment on SQRoleListGroup_GroupAvailabilityText");
static_assert(sizeof(SQRoleListGroup_GroupAvailabilityText) == 0x000018, "Wrong size on SQRoleListGroup_GroupAvailabilityText");
static_assert(offsetof(SQRoleListGroup_GroupAvailabilityText, ReturnValue) == 0x000000, "Member 'SQRoleListGroup_GroupAvailabilityText::ReturnValue' has a wrong offset!");

// Function Squad.SQMapWidgetBase.CreateMarkerWidget
// 0x00D0 (0x00D0 - 0x0000)
struct SQMapWidgetBase_CreateMarkerWidget final
{
public:
	struct FSQMapMarkerVisualData                 MapMarkerVisualData;                               // 0x0000(0x00C8)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	class USQMapMarkerBase*                       ReturnValue;                                       // 0x00C8(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapWidgetBase_CreateMarkerWidget) == 0x000008, "Wrong alignment on SQMapWidgetBase_CreateMarkerWidget");
static_assert(sizeof(SQMapWidgetBase_CreateMarkerWidget) == 0x0000D0, "Wrong size on SQMapWidgetBase_CreateMarkerWidget");
static_assert(offsetof(SQMapWidgetBase_CreateMarkerWidget, MapMarkerVisualData) == 0x000000, "Member 'SQMapWidgetBase_CreateMarkerWidget::MapMarkerVisualData' has a wrong offset!");
static_assert(offsetof(SQMapWidgetBase_CreateMarkerWidget, ReturnValue) == 0x0000C8, "Member 'SQMapWidgetBase_CreateMarkerWidget::ReturnValue' has a wrong offset!");

// Function Squad.SQMapWidgetBase.RemoveMarkerWidget
// 0x0010 (0x0010 - 0x0000)
struct SQMapWidgetBase_RemoveMarkerWidget final
{
public:
	class USQMapMarkerBase*                       Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1265[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQMapWidgetBase_RemoveMarkerWidget) == 0x000008, "Wrong alignment on SQMapWidgetBase_RemoveMarkerWidget");
static_assert(sizeof(SQMapWidgetBase_RemoveMarkerWidget) == 0x000010, "Wrong size on SQMapWidgetBase_RemoveMarkerWidget");
static_assert(offsetof(SQMapWidgetBase_RemoveMarkerWidget, Target) == 0x000000, "Member 'SQMapWidgetBase_RemoveMarkerWidget::Target' has a wrong offset!");
static_assert(offsetof(SQMapWidgetBase_RemoveMarkerWidget, ReturnValue) == 0x000008, "Member 'SQMapWidgetBase_RemoveMarkerWidget::ReturnValue' has a wrong offset!");

// Function Squad.SQMapWidgetBase.SetMapBody
// 0x0008 (0x0008 - 0x0000)
struct SQMapWidgetBase_SetMapBody final
{
public:
	class UPanelWidget*                           NewMapBody;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapWidgetBase_SetMapBody) == 0x000008, "Wrong alignment on SQMapWidgetBase_SetMapBody");
static_assert(sizeof(SQMapWidgetBase_SetMapBody) == 0x000008, "Wrong size on SQMapWidgetBase_SetMapBody");
static_assert(offsetof(SQMapWidgetBase_SetMapBody, NewMapBody) == 0x000000, "Member 'SQMapWidgetBase_SetMapBody::NewMapBody' has a wrong offset!");

// Function Squad.SQMapWidgetBase.GetMapBody
// 0x0008 (0x0008 - 0x0000)
struct SQMapWidgetBase_GetMapBody final
{
public:
	class UPanelWidget*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapWidgetBase_GetMapBody) == 0x000008, "Wrong alignment on SQMapWidgetBase_GetMapBody");
static_assert(sizeof(SQMapWidgetBase_GetMapBody) == 0x000008, "Wrong size on SQMapWidgetBase_GetMapBody");
static_assert(offsetof(SQMapWidgetBase_GetMapBody, ReturnValue) == 0x000000, "Member 'SQMapWidgetBase_GetMapBody::ReturnValue' has a wrong offset!");

// Function Squad.SQMapWidgetBase.GetMapBoundsScale
// 0x0008 (0x0008 - 0x0000)
struct SQMapWidgetBase_GetMapBoundsScale final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapWidgetBase_GetMapBoundsScale) == 0x000004, "Wrong alignment on SQMapWidgetBase_GetMapBoundsScale");
static_assert(sizeof(SQMapWidgetBase_GetMapBoundsScale) == 0x000008, "Wrong size on SQMapWidgetBase_GetMapBoundsScale");
static_assert(offsetof(SQMapWidgetBase_GetMapBoundsScale, ReturnValue) == 0x000000, "Member 'SQMapWidgetBase_GetMapBoundsScale::ReturnValue' has a wrong offset!");

// Function Squad.SQMapWidgetBase.GetNumGridLines
// 0x0008 (0x0008 - 0x0000)
struct SQMapWidgetBase_GetNumGridLines final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapWidgetBase_GetNumGridLines) == 0x000004, "Wrong alignment on SQMapWidgetBase_GetNumGridLines");
static_assert(sizeof(SQMapWidgetBase_GetNumGridLines) == 0x000008, "Wrong size on SQMapWidgetBase_GetNumGridLines");
static_assert(offsetof(SQMapWidgetBase_GetNumGridLines, ReturnValue) == 0x000000, "Member 'SQMapWidgetBase_GetNumGridLines::ReturnValue' has a wrong offset!");

// Function Squad.SQMapWidgetBase.GetWorldBounds
// 0x0014 (0x0014 - 0x0000)
struct SQMapWidgetBase_GetWorldBounds final
{
public:
	struct FBox2D                                 ReturnValue;                                       // 0x0000(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapWidgetBase_GetWorldBounds) == 0x000004, "Wrong alignment on SQMapWidgetBase_GetWorldBounds");
static_assert(sizeof(SQMapWidgetBase_GetWorldBounds) == 0x000014, "Wrong size on SQMapWidgetBase_GetWorldBounds");
static_assert(offsetof(SQMapWidgetBase_GetWorldBounds, ReturnValue) == 0x000000, "Member 'SQMapWidgetBase_GetWorldBounds::ReturnValue' has a wrong offset!");

// Function Squad.SQRotorWashEffectSender.RegisterListener
// 0x0008 (0x0008 - 0x0000)
struct SQRotorWashEffectSender_RegisterListener final
{
public:
	class USQRotorWashEffectListener*             Listener;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRotorWashEffectSender_RegisterListener) == 0x000008, "Wrong alignment on SQRotorWashEffectSender_RegisterListener");
static_assert(sizeof(SQRotorWashEffectSender_RegisterListener) == 0x000008, "Wrong size on SQRotorWashEffectSender_RegisterListener");
static_assert(offsetof(SQRotorWashEffectSender_RegisterListener, Listener) == 0x000000, "Member 'SQRotorWashEffectSender_RegisterListener::Listener' has a wrong offset!");

// Function Squad.SQRotorWashEffectSender.UnregisterListener
// 0x0008 (0x0008 - 0x0000)
struct SQRotorWashEffectSender_UnregisterListener final
{
public:
	class USQRotorWashEffectListener*             Listener;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRotorWashEffectSender_UnregisterListener) == 0x000008, "Wrong alignment on SQRotorWashEffectSender_UnregisterListener");
static_assert(sizeof(SQRotorWashEffectSender_UnregisterListener) == 0x000008, "Wrong size on SQRotorWashEffectSender_UnregisterListener");
static_assert(offsetof(SQRotorWashEffectSender_UnregisterListener, Listener) == 0x000000, "Member 'SQRotorWashEffectSender_UnregisterListener::Listener' has a wrong offset!");

// Function Squad.SQRotorBladesComponent.TakeFatalDamage
// 0x0001 (0x0001 - 0x0000)
struct SQRotorBladesComponent_TakeFatalDamage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRotorBladesComponent_TakeFatalDamage) == 0x000001, "Wrong alignment on SQRotorBladesComponent_TakeFatalDamage");
static_assert(sizeof(SQRotorBladesComponent_TakeFatalDamage) == 0x000001, "Wrong size on SQRotorBladesComponent_TakeFatalDamage");
static_assert(offsetof(SQRotorBladesComponent_TakeFatalDamage, ReturnValue) == 0x000000, "Member 'SQRotorBladesComponent_TakeFatalDamage::ReturnValue' has a wrong offset!");

// Function Squad.SQRotorBladesComponent.IsHealthy
// 0x0001 (0x0001 - 0x0000)
struct SQRotorBladesComponent_IsHealthy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRotorBladesComponent_IsHealthy) == 0x000001, "Wrong alignment on SQRotorBladesComponent_IsHealthy");
static_assert(sizeof(SQRotorBladesComponent_IsHealthy) == 0x000001, "Wrong size on SQRotorBladesComponent_IsHealthy");
static_assert(offsetof(SQRotorBladesComponent_IsHealthy, ReturnValue) == 0x000000, "Member 'SQRotorBladesComponent_IsHealthy::ReturnValue' has a wrong offset!");

// Function Squad.SQMapWidgetVehicle.OnVehicleOccupantInfoChanged
// 0x0004 (0x0004 - 0x0000)
struct SQMapWidgetVehicle_OnVehicleOccupantInfoChanged final
{
public:
	int32                                         AtIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapWidgetVehicle_OnVehicleOccupantInfoChanged) == 0x000004, "Wrong alignment on SQMapWidgetVehicle_OnVehicleOccupantInfoChanged");
static_assert(sizeof(SQMapWidgetVehicle_OnVehicleOccupantInfoChanged) == 0x000004, "Wrong size on SQMapWidgetVehicle_OnVehicleOccupantInfoChanged");
static_assert(offsetof(SQMapWidgetVehicle_OnVehicleOccupantInfoChanged, AtIndex) == 0x000000, "Member 'SQMapWidgetVehicle_OnVehicleOccupantInfoChanged::AtIndex' has a wrong offset!");

// Function Squad.SQMapWidgetVehicle.IsSelfInVehicle
// 0x0001 (0x0001 - 0x0000)
struct SQMapWidgetVehicle_IsSelfInVehicle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMapWidgetVehicle_IsSelfInVehicle) == 0x000001, "Wrong alignment on SQMapWidgetVehicle_IsSelfInVehicle");
static_assert(sizeof(SQMapWidgetVehicle_IsSelfInVehicle) == 0x000001, "Wrong size on SQMapWidgetVehicle_IsSelfInVehicle");
static_assert(offsetof(SQMapWidgetVehicle_IsSelfInVehicle, ReturnValue) == 0x000000, "Member 'SQMapWidgetVehicle_IsSelfInVehicle::ReturnValue' has a wrong offset!");

// Function Squad.SQScriptCondition.BPInitialize
// 0x0008 (0x0008 - 0x0000)
struct SQScriptCondition_BPInitialize final
{
public:
	class AActor*                                 ContextObjectParam;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQScriptCondition_BPInitialize) == 0x000008, "Wrong alignment on SQScriptCondition_BPInitialize");
static_assert(sizeof(SQScriptCondition_BPInitialize) == 0x000008, "Wrong size on SQScriptCondition_BPInitialize");
static_assert(offsetof(SQScriptCondition_BPInitialize, ContextObjectParam) == 0x000000, "Member 'SQScriptCondition_BPInitialize::ContextObjectParam' has a wrong offset!");

// Function Squad.SQScriptCondition.EvaluationResult
// 0x0001 (0x0001 - 0x0000)
struct SQScriptCondition_EvaluationResult final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQScriptCondition_EvaluationResult) == 0x000001, "Wrong alignment on SQScriptCondition_EvaluationResult");
static_assert(sizeof(SQScriptCondition_EvaluationResult) == 0x000001, "Wrong size on SQScriptCondition_EvaluationResult");
static_assert(offsetof(SQScriptCondition_EvaluationResult, bNewValue) == 0x000000, "Member 'SQScriptCondition_EvaluationResult::bNewValue' has a wrong offset!");

// Function Squad.SQRotorVehicleMovementComponent.AddThrust
// 0x0008 (0x0008 - 0x0000)
struct SQRotorVehicleMovementComponent_AddThrust final
{
public:
	int32                                         RotorIdx;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thrust;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRotorVehicleMovementComponent_AddThrust) == 0x000004, "Wrong alignment on SQRotorVehicleMovementComponent_AddThrust");
static_assert(sizeof(SQRotorVehicleMovementComponent_AddThrust) == 0x000008, "Wrong size on SQRotorVehicleMovementComponent_AddThrust");
static_assert(offsetof(SQRotorVehicleMovementComponent_AddThrust, RotorIdx) == 0x000000, "Member 'SQRotorVehicleMovementComponent_AddThrust::RotorIdx' has a wrong offset!");
static_assert(offsetof(SQRotorVehicleMovementComponent_AddThrust, Thrust) == 0x000004, "Member 'SQRotorVehicleMovementComponent_AddThrust::Thrust' has a wrong offset!");

// Function Squad.SQRotorVehicleMovementComponent.AddThrustByType
// 0x0008 (0x0008 - 0x0000)
struct SQRotorVehicleMovementComponent_AddThrustByType final
{
public:
	ESQRotorType                                  RotorType;                                         // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1282[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Thrust;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRotorVehicleMovementComponent_AddThrustByType) == 0x000004, "Wrong alignment on SQRotorVehicleMovementComponent_AddThrustByType");
static_assert(sizeof(SQRotorVehicleMovementComponent_AddThrustByType) == 0x000008, "Wrong size on SQRotorVehicleMovementComponent_AddThrustByType");
static_assert(offsetof(SQRotorVehicleMovementComponent_AddThrustByType, RotorType) == 0x000000, "Member 'SQRotorVehicleMovementComponent_AddThrustByType::RotorType' has a wrong offset!");
static_assert(offsetof(SQRotorVehicleMovementComponent_AddThrustByType, Thrust) == 0x000004, "Member 'SQRotorVehicleMovementComponent_AddThrustByType::Thrust' has a wrong offset!");

// Function Squad.SQRotorVehicleMovementComponent.ToggleRotorLockByType
// 0x0001 (0x0001 - 0x0000)
struct SQRotorVehicleMovementComponent_ToggleRotorLockByType final
{
public:
	ESQRotorType                                  RotorType;                                         // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRotorVehicleMovementComponent_ToggleRotorLockByType) == 0x000001, "Wrong alignment on SQRotorVehicleMovementComponent_ToggleRotorLockByType");
static_assert(sizeof(SQRotorVehicleMovementComponent_ToggleRotorLockByType) == 0x000001, "Wrong size on SQRotorVehicleMovementComponent_ToggleRotorLockByType");
static_assert(offsetof(SQRotorVehicleMovementComponent_ToggleRotorLockByType, RotorType) == 0x000000, "Member 'SQRotorVehicleMovementComponent_ToggleRotorLockByType::RotorType' has a wrong offset!");

// Function Squad.MeshMergeFunctionLibrary.MergeMeshes
// 0x0048 (0x0048 - 0x0000)
struct MeshMergeFunctionLibrary_MergeMeshes final
{
public:
	struct FSkeletalMeshMergeParams               Params_0;                                          // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeshMergeFunctionLibrary_MergeMeshes) == 0x000008, "Wrong alignment on MeshMergeFunctionLibrary_MergeMeshes");
static_assert(sizeof(MeshMergeFunctionLibrary_MergeMeshes) == 0x000048, "Wrong size on MeshMergeFunctionLibrary_MergeMeshes");
static_assert(offsetof(MeshMergeFunctionLibrary_MergeMeshes, Params_0) == 0x000000, "Member 'MeshMergeFunctionLibrary_MergeMeshes::Params_0' has a wrong offset!");
static_assert(offsetof(MeshMergeFunctionLibrary_MergeMeshes, ReturnValue) == 0x000040, "Member 'MeshMergeFunctionLibrary_MergeMeshes::ReturnValue' has a wrong offset!");

// Function Squad.SQItemSkinCollection.GetUISkinBadges
// 0x0010 (0x0010 - 0x0000)
struct SQItemSkinCollection_GetUISkinBadges final
{
public:
	TArray<struct FSQSkinUIBadge>                 OutBadges;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQItemSkinCollection_GetUISkinBadges) == 0x000008, "Wrong alignment on SQItemSkinCollection_GetUISkinBadges");
static_assert(sizeof(SQItemSkinCollection_GetUISkinBadges) == 0x000010, "Wrong size on SQItemSkinCollection_GetUISkinBadges");
static_assert(offsetof(SQItemSkinCollection_GetUISkinBadges, OutBadges) == 0x000000, "Member 'SQItemSkinCollection_GetUISkinBadges::OutBadges' has a wrong offset!");

// Function Squad.SQMovementComponentManager.RegisterComponent
// 0x0008 (0x0008 - 0x0000)
struct SQMovementComponentManager_RegisterComponent final
{
public:
	class USQMovementComponentBase*               MovementComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMovementComponentManager_RegisterComponent) == 0x000008, "Wrong alignment on SQMovementComponentManager_RegisterComponent");
static_assert(sizeof(SQMovementComponentManager_RegisterComponent) == 0x000008, "Wrong size on SQMovementComponentManager_RegisterComponent");
static_assert(offsetof(SQMovementComponentManager_RegisterComponent, MovementComponent) == 0x000000, "Member 'SQMovementComponentManager_RegisterComponent::MovementComponent' has a wrong offset!");

// Function Squad.SQMovementComponentManager.UnRegisterComponent
// 0x0008 (0x0008 - 0x0000)
struct SQMovementComponentManager_UnRegisterComponent final
{
public:
	class USQMovementComponentBase*               MovementComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMovementComponentManager_UnRegisterComponent) == 0x000008, "Wrong alignment on SQMovementComponentManager_UnRegisterComponent");
static_assert(sizeof(SQMovementComponentManager_UnRegisterComponent) == 0x000008, "Wrong size on SQMovementComponentManager_UnRegisterComponent");
static_assert(offsetof(SQMovementComponentManager_UnRegisterComponent, MovementComponent) == 0x000000, "Member 'SQMovementComponentManager_UnRegisterComponent::MovementComponent' has a wrong offset!");

// Function Squad.SQMovementComponentNetworker.Client_ReplicateClientAdjustment
// 0x0010 (0x0010 - 0x0000)
struct SQMovementComponentNetworker_Client_ReplicateClientAdjustment final
{
public:
	TArray<struct FAdjustPositionAndRotationPacket> Payload;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMovementComponentNetworker_Client_ReplicateClientAdjustment) == 0x000008, "Wrong alignment on SQMovementComponentNetworker_Client_ReplicateClientAdjustment");
static_assert(sizeof(SQMovementComponentNetworker_Client_ReplicateClientAdjustment) == 0x000010, "Wrong size on SQMovementComponentNetworker_Client_ReplicateClientAdjustment");
static_assert(offsetof(SQMovementComponentNetworker_Client_ReplicateClientAdjustment, Payload) == 0x000000, "Member 'SQMovementComponentNetworker_Client_ReplicateClientAdjustment::Payload' has a wrong offset!");

// Function Squad.SQMovementComponentNetworker.Server_ReplicateMoveToServer
// 0x0010 (0x0010 - 0x0000)
struct SQMovementComponentNetworker_Server_ReplicateMoveToServer final
{
public:
	TArray<struct FMovePacket>                    Payload;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMovementComponentNetworker_Server_ReplicateMoveToServer) == 0x000008, "Wrong alignment on SQMovementComponentNetworker_Server_ReplicateMoveToServer");
static_assert(sizeof(SQMovementComponentNetworker_Server_ReplicateMoveToServer) == 0x000010, "Wrong size on SQMovementComponentNetworker_Server_ReplicateMoveToServer");
static_assert(offsetof(SQMovementComponentNetworker_Server_ReplicateMoveToServer, Payload) == 0x000000, "Member 'SQMovementComponentNetworker_Server_ReplicateMoveToServer::Payload' has a wrong offset!");

// Function Squad.SQMovementComponentPacked.ClientAdjustRotation
// 0x001C (0x001C - 0x0000)
struct SQMovementComponentPacked_ClientAdjustRotation final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotation;                                        // 0x0004(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                InRotationalVelocity;                              // 0x0010(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQMovementComponentPacked_ClientAdjustRotation) == 0x000004, "Wrong alignment on SQMovementComponentPacked_ClientAdjustRotation");
static_assert(sizeof(SQMovementComponentPacked_ClientAdjustRotation) == 0x00001C, "Wrong size on SQMovementComponentPacked_ClientAdjustRotation");
static_assert(offsetof(SQMovementComponentPacked_ClientAdjustRotation, Timestamp) == 0x000000, "Member 'SQMovementComponentPacked_ClientAdjustRotation::Timestamp' has a wrong offset!");
static_assert(offsetof(SQMovementComponentPacked_ClientAdjustRotation, InRotation) == 0x000004, "Member 'SQMovementComponentPacked_ClientAdjustRotation::InRotation' has a wrong offset!");
static_assert(offsetof(SQMovementComponentPacked_ClientAdjustRotation, InRotationalVelocity) == 0x000010, "Member 'SQMovementComponentPacked_ClientAdjustRotation::InRotationalVelocity' has a wrong offset!");

// Function Squad.SQSoldierRagdollComponent.ServerSetRagdollState
// 0x0001 (0x0001 - 0x0000)
struct SQSoldierRagdollComponent_ServerSetRagdollState final
{
public:
	ESQSoldierRagdollReason                       NewRagdollState;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldierRagdollComponent_ServerSetRagdollState) == 0x000001, "Wrong alignment on SQSoldierRagdollComponent_ServerSetRagdollState");
static_assert(sizeof(SQSoldierRagdollComponent_ServerSetRagdollState) == 0x000001, "Wrong size on SQSoldierRagdollComponent_ServerSetRagdollState");
static_assert(offsetof(SQSoldierRagdollComponent_ServerSetRagdollState, NewRagdollState) == 0x000000, "Member 'SQSoldierRagdollComponent_ServerSetRagdollState::NewRagdollState' has a wrong offset!");

// Function Squad.SQSoldierRagdollComponent.SetDragging
// 0x0001 (0x0001 - 0x0000)
struct SQSoldierRagdollComponent_SetDragging final
{
public:
	bool                                          bIsDragging;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldierRagdollComponent_SetDragging) == 0x000001, "Wrong alignment on SQSoldierRagdollComponent_SetDragging");
static_assert(sizeof(SQSoldierRagdollComponent_SetDragging) == 0x000001, "Wrong size on SQSoldierRagdollComponent_SetDragging");
static_assert(offsetof(SQSoldierRagdollComponent_SetDragging, bIsDragging) == 0x000000, "Member 'SQSoldierRagdollComponent_SetDragging::bIsDragging' has a wrong offset!");

// Function Squad.SQSoldierRagdollComponent.SetRagdollState
// 0x0001 (0x0001 - 0x0000)
struct SQSoldierRagdollComponent_SetRagdollState final
{
public:
	ESQSoldierRagdollReason                       NewRagdollState;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldierRagdollComponent_SetRagdollState) == 0x000001, "Wrong alignment on SQSoldierRagdollComponent_SetRagdollState");
static_assert(sizeof(SQSoldierRagdollComponent_SetRagdollState) == 0x000001, "Wrong size on SQSoldierRagdollComponent_SetRagdollState");
static_assert(offsetof(SQSoldierRagdollComponent_SetRagdollState, NewRagdollState) == 0x000000, "Member 'SQSoldierRagdollComponent_SetRagdollState::NewRagdollState' has a wrong offset!");

// Function Squad.SQSoldierRagdollComponent.GetRagdollState
// 0x0001 (0x0001 - 0x0000)
struct SQSoldierRagdollComponent_GetRagdollState final
{
public:
	ESQSoldierRagdollReason                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldierRagdollComponent_GetRagdollState) == 0x000001, "Wrong alignment on SQSoldierRagdollComponent_GetRagdollState");
static_assert(sizeof(SQSoldierRagdollComponent_GetRagdollState) == 0x000001, "Wrong size on SQSoldierRagdollComponent_GetRagdollState");
static_assert(offsetof(SQSoldierRagdollComponent_GetRagdollState, ReturnValue) == 0x000000, "Member 'SQSoldierRagdollComponent_GetRagdollState::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldierRagdollComponent.IsInRagdoll
// 0x0001 (0x0001 - 0x0000)
struct SQSoldierRagdollComponent_IsInRagdoll final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldierRagdollComponent_IsInRagdoll) == 0x000001, "Wrong alignment on SQSoldierRagdollComponent_IsInRagdoll");
static_assert(sizeof(SQSoldierRagdollComponent_IsInRagdoll) == 0x000001, "Wrong size on SQSoldierRagdollComponent_IsInRagdoll");
static_assert(offsetof(SQSoldierRagdollComponent_IsInRagdoll, ReturnValue) == 0x000000, "Member 'SQSoldierRagdollComponent_IsInRagdoll::ReturnValue' has a wrong offset!");

// Function Squad.SQNotificationData.GetNotificationLayout
// 0x0038 (0x0038 - 0x0000)
struct SQNotificationData_GetNotificationLayout final
{
public:
	ESQNotificationTypes                          NotificationType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_128E[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQNotificationLayout                  ReturnValue;                                       // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQNotificationData_GetNotificationLayout) == 0x000008, "Wrong alignment on SQNotificationData_GetNotificationLayout");
static_assert(sizeof(SQNotificationData_GetNotificationLayout) == 0x000038, "Wrong size on SQNotificationData_GetNotificationLayout");
static_assert(offsetof(SQNotificationData_GetNotificationLayout, NotificationType) == 0x000000, "Member 'SQNotificationData_GetNotificationLayout::NotificationType' has a wrong offset!");
static_assert(offsetof(SQNotificationData_GetNotificationLayout, ReturnValue) == 0x000008, "Member 'SQNotificationData_GetNotificationLayout::ReturnValue' has a wrong offset!");

// Function Squad.SQRestriction_FOBInRange.GetRange
// 0x0010 (0x0010 - 0x0000)
struct SQRestriction_FOBInRange_GetRange final
{
public:
	const class USQLayer*                         Layer;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1292[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRestriction_FOBInRange_GetRange) == 0x000008, "Wrong alignment on SQRestriction_FOBInRange_GetRange");
static_assert(sizeof(SQRestriction_FOBInRange_GetRange) == 0x000010, "Wrong size on SQRestriction_FOBInRange_GetRange");
static_assert(offsetof(SQRestriction_FOBInRange_GetRange, Layer) == 0x000000, "Member 'SQRestriction_FOBInRange_GetRange::Layer' has a wrong offset!");
static_assert(offsetof(SQRestriction_FOBInRange_GetRange, ReturnValue) == 0x000008, "Member 'SQRestriction_FOBInRange_GetRange::ReturnValue' has a wrong offset!");

// Function Squad.SQRestriction_FOBInRange.IsAuthorizedWithFOBInRange
// 0x0018 (0x0018 - 0x0000)
struct SQRestriction_FOBInRange_IsAuthorizedWithFOBInRange final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASQForwardBase*                   InFOBInRange;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1293[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRestriction_FOBInRange_IsAuthorizedWithFOBInRange) == 0x000008, "Wrong alignment on SQRestriction_FOBInRange_IsAuthorizedWithFOBInRange");
static_assert(sizeof(SQRestriction_FOBInRange_IsAuthorizedWithFOBInRange) == 0x000018, "Wrong size on SQRestriction_FOBInRange_IsAuthorizedWithFOBInRange");
static_assert(offsetof(SQRestriction_FOBInRange_IsAuthorizedWithFOBInRange, InPlayer) == 0x000000, "Member 'SQRestriction_FOBInRange_IsAuthorizedWithFOBInRange::InPlayer' has a wrong offset!");
static_assert(offsetof(SQRestriction_FOBInRange_IsAuthorizedWithFOBInRange, InFOBInRange) == 0x000008, "Member 'SQRestriction_FOBInRange_IsAuthorizedWithFOBInRange::InFOBInRange' has a wrong offset!");
static_assert(offsetof(SQRestriction_FOBInRange_IsAuthorizedWithFOBInRange, ReturnValue) == 0x000010, "Member 'SQRestriction_FOBInRange_IsAuthorizedWithFOBInRange::ReturnValue' has a wrong offset!");

// Function Squad.SQRestriction_FOBInRange.IsRestrictedWithFOBsInRange
// 0x0020 (0x0020 - 0x0000)
struct SQRestriction_FOBInRange_IsRestrictedWithFOBsInRange final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ASQForwardBase*>                 InFOBsInRange;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1294[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRestriction_FOBInRange_IsRestrictedWithFOBsInRange) == 0x000008, "Wrong alignment on SQRestriction_FOBInRange_IsRestrictedWithFOBsInRange");
static_assert(sizeof(SQRestriction_FOBInRange_IsRestrictedWithFOBsInRange) == 0x000020, "Wrong size on SQRestriction_FOBInRange_IsRestrictedWithFOBsInRange");
static_assert(offsetof(SQRestriction_FOBInRange_IsRestrictedWithFOBsInRange, InPlayer) == 0x000000, "Member 'SQRestriction_FOBInRange_IsRestrictedWithFOBsInRange::InPlayer' has a wrong offset!");
static_assert(offsetof(SQRestriction_FOBInRange_IsRestrictedWithFOBsInRange, InFOBsInRange) == 0x000008, "Member 'SQRestriction_FOBInRange_IsRestrictedWithFOBsInRange::InFOBsInRange' has a wrong offset!");
static_assert(offsetof(SQRestriction_FOBInRange_IsRestrictedWithFOBsInRange, ReturnValue) == 0x000018, "Member 'SQRestriction_FOBInRange_IsRestrictedWithFOBsInRange::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldierMovement.ApplyStaminaBurstLoss
// 0x0004 (0x0004 - 0x0000)
struct SQSoldierMovement_ApplyStaminaBurstLoss final
{
public:
	float                                         Penalty;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldierMovement_ApplyStaminaBurstLoss) == 0x000004, "Wrong alignment on SQSoldierMovement_ApplyStaminaBurstLoss");
static_assert(sizeof(SQSoldierMovement_ApplyStaminaBurstLoss) == 0x000004, "Wrong size on SQSoldierMovement_ApplyStaminaBurstLoss");
static_assert(offsetof(SQSoldierMovement_ApplyStaminaBurstLoss, Penalty) == 0x000000, "Member 'SQSoldierMovement_ApplyStaminaBurstLoss::Penalty' has a wrong offset!");

// Function Squad.SQSoldierMovement.GetJumpVelocity
// 0x0004 (0x0004 - 0x0000)
struct SQSoldierMovement_GetJumpVelocity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldierMovement_GetJumpVelocity) == 0x000004, "Wrong alignment on SQSoldierMovement_GetJumpVelocity");
static_assert(sizeof(SQSoldierMovement_GetJumpVelocity) == 0x000004, "Wrong size on SQSoldierMovement_GetJumpVelocity");
static_assert(offsetof(SQSoldierMovement_GetJumpVelocity, ReturnValue) == 0x000000, "Member 'SQSoldierMovement_GetJumpVelocity::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldierMovement.SetIsHurt
// 0x0001 (0x0001 - 0x0000)
struct SQSoldierMovement_SetIsHurt final
{
public:
	bool                                          bHurt;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldierMovement_SetIsHurt) == 0x000001, "Wrong alignment on SQSoldierMovement_SetIsHurt");
static_assert(sizeof(SQSoldierMovement_SetIsHurt) == 0x000001, "Wrong size on SQSoldierMovement_SetIsHurt");
static_assert(offsetof(SQSoldierMovement_SetIsHurt, bHurt) == 0x000000, "Member 'SQSoldierMovement_SetIsHurt::bHurt' has a wrong offset!");

// Function Squad.SQSoldierMovement.CalculateStamina
// 0x000C (0x000C - 0x0000)
struct SQSoldierMovement_CalculateStamina final
{
public:
	float                                         Penalty;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StanceRegenMultiplier;                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldierMovement_CalculateStamina) == 0x000004, "Wrong alignment on SQSoldierMovement_CalculateStamina");
static_assert(sizeof(SQSoldierMovement_CalculateStamina) == 0x00000C, "Wrong size on SQSoldierMovement_CalculateStamina");
static_assert(offsetof(SQSoldierMovement_CalculateStamina, Penalty) == 0x000000, "Member 'SQSoldierMovement_CalculateStamina::Penalty' has a wrong offset!");
static_assert(offsetof(SQSoldierMovement_CalculateStamina, StanceRegenMultiplier) == 0x000004, "Member 'SQSoldierMovement_CalculateStamina::StanceRegenMultiplier' has a wrong offset!");
static_assert(offsetof(SQSoldierMovement_CalculateStamina, ReturnValue) == 0x000008, "Member 'SQSoldierMovement_CalculateStamina::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldierMovement.CanCrouchInCurrentState
// 0x0001 (0x0001 - 0x0000)
struct SQSoldierMovement_CanCrouchInCurrentState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldierMovement_CanCrouchInCurrentState) == 0x000001, "Wrong alignment on SQSoldierMovement_CanCrouchInCurrentState");
static_assert(sizeof(SQSoldierMovement_CanCrouchInCurrentState) == 0x000001, "Wrong size on SQSoldierMovement_CanCrouchInCurrentState");
static_assert(offsetof(SQSoldierMovement_CanCrouchInCurrentState, ReturnValue) == 0x000000, "Member 'SQSoldierMovement_CanCrouchInCurrentState::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldierMovement.CanJump
// 0x0001 (0x0001 - 0x0000)
struct SQSoldierMovement_CanJump final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldierMovement_CanJump) == 0x000001, "Wrong alignment on SQSoldierMovement_CanJump");
static_assert(sizeof(SQSoldierMovement_CanJump) == 0x000001, "Wrong size on SQSoldierMovement_CanJump");
static_assert(offsetof(SQSoldierMovement_CanJump, ReturnValue) == 0x000000, "Member 'SQSoldierMovement_CanJump::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldierMovement.CanRun
// 0x0001 (0x0001 - 0x0000)
struct SQSoldierMovement_CanRun final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldierMovement_CanRun) == 0x000001, "Wrong alignment on SQSoldierMovement_CanRun");
static_assert(sizeof(SQSoldierMovement_CanRun) == 0x000001, "Wrong size on SQSoldierMovement_CanRun");
static_assert(offsetof(SQSoldierMovement_CanRun, ReturnValue) == 0x000000, "Member 'SQSoldierMovement_CanRun::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldierMovement.CanSprint
// 0x0001 (0x0001 - 0x0000)
struct SQSoldierMovement_CanSprint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldierMovement_CanSprint) == 0x000001, "Wrong alignment on SQSoldierMovement_CanSprint");
static_assert(sizeof(SQSoldierMovement_CanSprint) == 0x000001, "Wrong size on SQSoldierMovement_CanSprint");
static_assert(offsetof(SQSoldierMovement_CanSprint, ReturnValue) == 0x000000, "Member 'SQSoldierMovement_CanSprint::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldierMovement.GetCrouchWeight
// 0x0004 (0x0004 - 0x0000)
struct SQSoldierMovement_GetCrouchWeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldierMovement_GetCrouchWeight) == 0x000004, "Wrong alignment on SQSoldierMovement_GetCrouchWeight");
static_assert(sizeof(SQSoldierMovement_GetCrouchWeight) == 0x000004, "Wrong size on SQSoldierMovement_GetCrouchWeight");
static_assert(offsetof(SQSoldierMovement_GetCrouchWeight, ReturnValue) == 0x000000, "Member 'SQSoldierMovement_GetCrouchWeight::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldierMovement.GetProneWeight
// 0x0004 (0x0004 - 0x0000)
struct SQSoldierMovement_GetProneWeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldierMovement_GetProneWeight) == 0x000004, "Wrong alignment on SQSoldierMovement_GetProneWeight");
static_assert(sizeof(SQSoldierMovement_GetProneWeight) == 0x000004, "Wrong size on SQSoldierMovement_GetProneWeight");
static_assert(offsetof(SQSoldierMovement_GetProneWeight, ReturnValue) == 0x000000, "Member 'SQSoldierMovement_GetProneWeight::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldierMovement.GetWaterDepth
// 0x0004 (0x0004 - 0x0000)
struct SQSoldierMovement_GetWaterDepth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldierMovement_GetWaterDepth) == 0x000004, "Wrong alignment on SQSoldierMovement_GetWaterDepth");
static_assert(sizeof(SQSoldierMovement_GetWaterDepth) == 0x000004, "Wrong size on SQSoldierMovement_GetWaterDepth");
static_assert(offsetof(SQSoldierMovement_GetWaterDepth, ReturnValue) == 0x000000, "Member 'SQSoldierMovement_GetWaterDepth::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldierMovement.GetWaterImmersionPercentage
// 0x0004 (0x0004 - 0x0000)
struct SQSoldierMovement_GetWaterImmersionPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldierMovement_GetWaterImmersionPercentage) == 0x000004, "Wrong alignment on SQSoldierMovement_GetWaterImmersionPercentage");
static_assert(sizeof(SQSoldierMovement_GetWaterImmersionPercentage) == 0x000004, "Wrong size on SQSoldierMovement_GetWaterImmersionPercentage");
static_assert(offsetof(SQSoldierMovement_GetWaterImmersionPercentage, ReturnValue) == 0x000000, "Member 'SQSoldierMovement_GetWaterImmersionPercentage::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldierMovement.IsAimingDownSights
// 0x0001 (0x0001 - 0x0000)
struct SQSoldierMovement_IsAimingDownSights final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldierMovement_IsAimingDownSights) == 0x000001, "Wrong alignment on SQSoldierMovement_IsAimingDownSights");
static_assert(sizeof(SQSoldierMovement_IsAimingDownSights) == 0x000001, "Wrong size on SQSoldierMovement_IsAimingDownSights");
static_assert(offsetof(SQSoldierMovement_IsAimingDownSights, ReturnValue) == 0x000000, "Member 'SQSoldierMovement_IsAimingDownSights::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldierMovement.IsChestImmersed
// 0x0001 (0x0001 - 0x0000)
struct SQSoldierMovement_IsChestImmersed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldierMovement_IsChestImmersed) == 0x000001, "Wrong alignment on SQSoldierMovement_IsChestImmersed");
static_assert(sizeof(SQSoldierMovement_IsChestImmersed) == 0x000001, "Wrong size on SQSoldierMovement_IsChestImmersed");
static_assert(offsetof(SQSoldierMovement_IsChestImmersed, ReturnValue) == 0x000000, "Member 'SQSoldierMovement_IsChestImmersed::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldierMovement.IsDragging
// 0x0001 (0x0001 - 0x0000)
struct SQSoldierMovement_IsDragging final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldierMovement_IsDragging) == 0x000001, "Wrong alignment on SQSoldierMovement_IsDragging");
static_assert(sizeof(SQSoldierMovement_IsDragging) == 0x000001, "Wrong size on SQSoldierMovement_IsDragging");
static_assert(offsetof(SQSoldierMovement_IsDragging, ReturnValue) == 0x000000, "Member 'SQSoldierMovement_IsDragging::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldierMovement.IsLeaningLeft
// 0x0001 (0x0001 - 0x0000)
struct SQSoldierMovement_IsLeaningLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldierMovement_IsLeaningLeft) == 0x000001, "Wrong alignment on SQSoldierMovement_IsLeaningLeft");
static_assert(sizeof(SQSoldierMovement_IsLeaningLeft) == 0x000001, "Wrong size on SQSoldierMovement_IsLeaningLeft");
static_assert(offsetof(SQSoldierMovement_IsLeaningLeft, ReturnValue) == 0x000000, "Member 'SQSoldierMovement_IsLeaningLeft::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldierMovement.IsLeaningRight
// 0x0001 (0x0001 - 0x0000)
struct SQSoldierMovement_IsLeaningRight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldierMovement_IsLeaningRight) == 0x000001, "Wrong alignment on SQSoldierMovement_IsLeaningRight");
static_assert(sizeof(SQSoldierMovement_IsLeaningRight) == 0x000001, "Wrong size on SQSoldierMovement_IsLeaningRight");
static_assert(offsetof(SQSoldierMovement_IsLeaningRight, ReturnValue) == 0x000000, "Member 'SQSoldierMovement_IsLeaningRight::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldierMovement.IsProne
// 0x0001 (0x0001 - 0x0000)
struct SQSoldierMovement_IsProne final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldierMovement_IsProne) == 0x000001, "Wrong alignment on SQSoldierMovement_IsProne");
static_assert(sizeof(SQSoldierMovement_IsProne) == 0x000001, "Wrong size on SQSoldierMovement_IsProne");
static_assert(offsetof(SQSoldierMovement_IsProne, ReturnValue) == 0x000000, "Member 'SQSoldierMovement_IsProne::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldierMovement.IsSprinting
// 0x0001 (0x0001 - 0x0000)
struct SQSoldierMovement_IsSprinting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldierMovement_IsSprinting) == 0x000001, "Wrong alignment on SQSoldierMovement_IsSprinting");
static_assert(sizeof(SQSoldierMovement_IsSprinting) == 0x000001, "Wrong size on SQSoldierMovement_IsSprinting");
static_assert(offsetof(SQSoldierMovement_IsSprinting, ReturnValue) == 0x000000, "Member 'SQSoldierMovement_IsSprinting::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldierMovement.IsSprintPressed
// 0x0001 (0x0001 - 0x0000)
struct SQSoldierMovement_IsSprintPressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldierMovement_IsSprintPressed) == 0x000001, "Wrong alignment on SQSoldierMovement_IsSprintPressed");
static_assert(sizeof(SQSoldierMovement_IsSprintPressed) == 0x000001, "Wrong size on SQSoldierMovement_IsSprintPressed");
static_assert(offsetof(SQSoldierMovement_IsSprintPressed, ReturnValue) == 0x000000, "Member 'SQSoldierMovement_IsSprintPressed::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldierMovement.IsStaminaOverThreshold
// 0x0001 (0x0001 - 0x0000)
struct SQSoldierMovement_IsStaminaOverThreshold final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldierMovement_IsStaminaOverThreshold) == 0x000001, "Wrong alignment on SQSoldierMovement_IsStaminaOverThreshold");
static_assert(sizeof(SQSoldierMovement_IsStaminaOverThreshold) == 0x000001, "Wrong size on SQSoldierMovement_IsStaminaOverThreshold");
static_assert(offsetof(SQSoldierMovement_IsStaminaOverThreshold, ReturnValue) == 0x000000, "Member 'SQSoldierMovement_IsStaminaOverThreshold::ReturnValue' has a wrong offset!");

// Function Squad.SQSoldierMovement.IsWalkPressed
// 0x0001 (0x0001 - 0x0000)
struct SQSoldierMovement_IsWalkPressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSoldierMovement_IsWalkPressed) == 0x000001, "Wrong alignment on SQSoldierMovement_IsWalkPressed");
static_assert(sizeof(SQSoldierMovement_IsWalkPressed) == 0x000001, "Wrong size on SQSoldierMovement_IsWalkPressed");
static_assert(offsetof(SQSoldierMovement_IsWalkPressed, ReturnValue) == 0x000000, "Member 'SQSoldierMovement_IsWalkPressed::ReturnValue' has a wrong offset!");

// Function Squad.SQObjective.GetObjectiveMetMessage
// 0x0028 (0x0028 - 0x0000)
struct SQObjective_GetObjectiveMetMessage final
{
public:
	class ASQGameRuleSet*                         RuleSet;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTeam                                       InTeam;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12AB[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQObjective_GetObjectiveMetMessage) == 0x000008, "Wrong alignment on SQObjective_GetObjectiveMetMessage");
static_assert(sizeof(SQObjective_GetObjectiveMetMessage) == 0x000028, "Wrong size on SQObjective_GetObjectiveMetMessage");
static_assert(offsetof(SQObjective_GetObjectiveMetMessage, RuleSet) == 0x000000, "Member 'SQObjective_GetObjectiveMetMessage::RuleSet' has a wrong offset!");
static_assert(offsetof(SQObjective_GetObjectiveMetMessage, InTeam) == 0x000008, "Member 'SQObjective_GetObjectiveMetMessage::InTeam' has a wrong offset!");
static_assert(offsetof(SQObjective_GetObjectiveMetMessage, ReturnValue) == 0x000010, "Member 'SQObjective_GetObjectiveMetMessage::ReturnValue' has a wrong offset!");

// Function Squad.SQObjective.GetObjectiveShownMessage
// 0x0028 (0x0028 - 0x0000)
struct SQObjective_GetObjectiveShownMessage final
{
public:
	class ASQGameRuleSet*                         RuleSet;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTeam                                       InTeam;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12AC[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQObjective_GetObjectiveShownMessage) == 0x000008, "Wrong alignment on SQObjective_GetObjectiveShownMessage");
static_assert(sizeof(SQObjective_GetObjectiveShownMessage) == 0x000028, "Wrong size on SQObjective_GetObjectiveShownMessage");
static_assert(offsetof(SQObjective_GetObjectiveShownMessage, RuleSet) == 0x000000, "Member 'SQObjective_GetObjectiveShownMessage::RuleSet' has a wrong offset!");
static_assert(offsetof(SQObjective_GetObjectiveShownMessage, InTeam) == 0x000008, "Member 'SQObjective_GetObjectiveShownMessage::InTeam' has a wrong offset!");
static_assert(offsetof(SQObjective_GetObjectiveShownMessage, ReturnValue) == 0x000010, "Member 'SQObjective_GetObjectiveShownMessage::ReturnValue' has a wrong offset!");

// Function Squad.SQObjective.SetKnownToEveryone
// 0x0001 (0x0001 - 0x0000)
struct SQObjective_SetKnownToEveryone final
{
public:
	bool                                          bInIsKnownToEveryone;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQObjective_SetKnownToEveryone) == 0x000001, "Wrong alignment on SQObjective_SetKnownToEveryone");
static_assert(sizeof(SQObjective_SetKnownToEveryone) == 0x000001, "Wrong size on SQObjective_SetKnownToEveryone");
static_assert(offsetof(SQObjective_SetKnownToEveryone, bInIsKnownToEveryone) == 0x000000, "Member 'SQObjective_SetKnownToEveryone::bInIsKnownToEveryone' has a wrong offset!");

// Function Squad.SQObjective.SetObjectiveMet
// 0x0002 (0x0002 - 0x0000)
struct SQObjective_SetObjectiveMet final
{
public:
	bool                                          bObjectiveMet;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTeam                                       InTeam;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQObjective_SetObjectiveMet) == 0x000001, "Wrong alignment on SQObjective_SetObjectiveMet");
static_assert(sizeof(SQObjective_SetObjectiveMet) == 0x000002, "Wrong size on SQObjective_SetObjectiveMet");
static_assert(offsetof(SQObjective_SetObjectiveMet, bObjectiveMet) == 0x000000, "Member 'SQObjective_SetObjectiveMet::bObjectiveMet' has a wrong offset!");
static_assert(offsetof(SQObjective_SetObjectiveMet, InTeam) == 0x000001, "Member 'SQObjective_SetObjectiveMet::InTeam' has a wrong offset!");

// Function Squad.SQObjective.SetWaitingToBeShown
// 0x0001 (0x0001 - 0x0000)
struct SQObjective_SetWaitingToBeShown final
{
public:
	bool                                          bInIsWaitingToBeShown;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQObjective_SetWaitingToBeShown) == 0x000001, "Wrong alignment on SQObjective_SetWaitingToBeShown");
static_assert(sizeof(SQObjective_SetWaitingToBeShown) == 0x000001, "Wrong size on SQObjective_SetWaitingToBeShown");
static_assert(offsetof(SQObjective_SetWaitingToBeShown, bInIsWaitingToBeShown) == 0x000000, "Member 'SQObjective_SetWaitingToBeShown::bInIsWaitingToBeShown' has a wrong offset!");

// Function Squad.SQObjective.GetLocationForTeam
// 0x0010 (0x0010 - 0x0000)
struct SQObjective_GetLocationForTeam final
{
public:
	ESQTeam                                       InTeam;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12AD[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQObjective_GetLocationForTeam) == 0x000004, "Wrong alignment on SQObjective_GetLocationForTeam");
static_assert(sizeof(SQObjective_GetLocationForTeam) == 0x000010, "Wrong size on SQObjective_GetLocationForTeam");
static_assert(offsetof(SQObjective_GetLocationForTeam, InTeam) == 0x000000, "Member 'SQObjective_GetLocationForTeam::InTeam' has a wrong offset!");
static_assert(offsetof(SQObjective_GetLocationForTeam, ReturnValue) == 0x000004, "Member 'SQObjective_GetLocationForTeam::ReturnValue' has a wrong offset!");

// Function Squad.SQObjective.GetObjectiveMetByTeam
// 0x0001 (0x0001 - 0x0000)
struct SQObjective_GetObjectiveMetByTeam final
{
public:
	ESQTeam                                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQObjective_GetObjectiveMetByTeam) == 0x000001, "Wrong alignment on SQObjective_GetObjectiveMetByTeam");
static_assert(sizeof(SQObjective_GetObjectiveMetByTeam) == 0x000001, "Wrong size on SQObjective_GetObjectiveMetByTeam");
static_assert(offsetof(SQObjective_GetObjectiveMetByTeam, ReturnValue) == 0x000000, "Member 'SQObjective_GetObjectiveMetByTeam::ReturnValue' has a wrong offset!");

// Function Squad.SQObjective.HasObjectiveBeenMet
// 0x0001 (0x0001 - 0x0000)
struct SQObjective_HasObjectiveBeenMet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQObjective_HasObjectiveBeenMet) == 0x000001, "Wrong alignment on SQObjective_HasObjectiveBeenMet");
static_assert(sizeof(SQObjective_HasObjectiveBeenMet) == 0x000001, "Wrong size on SQObjective_HasObjectiveBeenMet");
static_assert(offsetof(SQObjective_HasObjectiveBeenMet, ReturnValue) == 0x000000, "Member 'SQObjective_HasObjectiveBeenMet::ReturnValue' has a wrong offset!");

// Function Squad.SQObjective.IsKnownToEveryone
// 0x0001 (0x0001 - 0x0000)
struct SQObjective_IsKnownToEveryone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQObjective_IsKnownToEveryone) == 0x000001, "Wrong alignment on SQObjective_IsKnownToEveryone");
static_assert(sizeof(SQObjective_IsKnownToEveryone) == 0x000001, "Wrong size on SQObjective_IsKnownToEveryone");
static_assert(offsetof(SQObjective_IsKnownToEveryone, ReturnValue) == 0x000000, "Member 'SQObjective_IsKnownToEveryone::ReturnValue' has a wrong offset!");

// Function Squad.SQObjective.IsWaitingToBeShown
// 0x0001 (0x0001 - 0x0000)
struct SQObjective_IsWaitingToBeShown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQObjective_IsWaitingToBeShown) == 0x000001, "Wrong alignment on SQObjective_IsWaitingToBeShown");
static_assert(sizeof(SQObjective_IsWaitingToBeShown) == 0x000001, "Wrong size on SQObjective_IsWaitingToBeShown");
static_assert(offsetof(SQObjective_IsWaitingToBeShown, ReturnValue) == 0x000000, "Member 'SQObjective_IsWaitingToBeShown::ReturnValue' has a wrong offset!");

// Function Squad.SQObjective_Destroyable.MulticastPlayDamageEffects
// 0x0008 (0x0008 - 0x0000)
struct SQObjective_Destroyable_MulticastPlayDamageEffects final
{
public:
	TSubclassOf<class UDamageType>                DamageTypeClass;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQObjective_Destroyable_MulticastPlayDamageEffects) == 0x000008, "Wrong alignment on SQObjective_Destroyable_MulticastPlayDamageEffects");
static_assert(sizeof(SQObjective_Destroyable_MulticastPlayDamageEffects) == 0x000008, "Wrong size on SQObjective_Destroyable_MulticastPlayDamageEffects");
static_assert(offsetof(SQObjective_Destroyable_MulticastPlayDamageEffects, DamageTypeClass) == 0x000000, "Member 'SQObjective_Destroyable_MulticastPlayDamageEffects::DamageTypeClass' has a wrong offset!");

// Function Squad.SQObjective_Destroyable.ObjectiveDestroyed
// 0x0028 (0x0028 - 0x0000)
struct SQObjective_Destroyable_ObjectiveDestroyed final
{
public:
	float                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12B1[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDamageEvent                           DamageEvent;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AController*                            EventInstigator;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DamageCauser;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQObjective_Destroyable_ObjectiveDestroyed) == 0x000008, "Wrong alignment on SQObjective_Destroyable_ObjectiveDestroyed");
static_assert(sizeof(SQObjective_Destroyable_ObjectiveDestroyed) == 0x000028, "Wrong size on SQObjective_Destroyable_ObjectiveDestroyed");
static_assert(offsetof(SQObjective_Destroyable_ObjectiveDestroyed, Damage) == 0x000000, "Member 'SQObjective_Destroyable_ObjectiveDestroyed::Damage' has a wrong offset!");
static_assert(offsetof(SQObjective_Destroyable_ObjectiveDestroyed, DamageEvent) == 0x000008, "Member 'SQObjective_Destroyable_ObjectiveDestroyed::DamageEvent' has a wrong offset!");
static_assert(offsetof(SQObjective_Destroyable_ObjectiveDestroyed, EventInstigator) == 0x000018, "Member 'SQObjective_Destroyable_ObjectiveDestroyed::EventInstigator' has a wrong offset!");
static_assert(offsetof(SQObjective_Destroyable_ObjectiveDestroyed, DamageCauser) == 0x000020, "Member 'SQObjective_Destroyable_ObjectiveDestroyed::DamageCauser' has a wrong offset!");

// Function Squad.SQShockwave.Explode
// 0x0020 (0x0020 - 0x0000)
struct SQShockwave_Explode final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ProjectileActor;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12B7[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQShockwave_Explode) == 0x000008, "Wrong alignment on SQShockwave_Explode");
static_assert(sizeof(SQShockwave_Explode) == 0x000020, "Wrong size on SQShockwave_Explode");
static_assert(offsetof(SQShockwave_Explode, World) == 0x000000, "Member 'SQShockwave_Explode::World' has a wrong offset!");
static_assert(offsetof(SQShockwave_Explode, ProjectileActor) == 0x000008, "Member 'SQShockwave_Explode::ProjectileActor' has a wrong offset!");
static_assert(offsetof(SQShockwave_Explode, Location) == 0x000010, "Member 'SQShockwave_Explode::Location' has a wrong offset!");

// Function Squad.SQShockwave.NearbyExplosionEvent
// 0x0018 (0x0018 - 0x0000)
struct SQShockwave_NearbyExplosionEvent final
{
public:
	class AActor*                                 ProjectileActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFromEffect;                                // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQShockwave_NearbyExplosionEvent) == 0x000008, "Wrong alignment on SQShockwave_NearbyExplosionEvent");
static_assert(sizeof(SQShockwave_NearbyExplosionEvent) == 0x000018, "Wrong size on SQShockwave_NearbyExplosionEvent");
static_assert(offsetof(SQShockwave_NearbyExplosionEvent, ProjectileActor) == 0x000000, "Member 'SQShockwave_NearbyExplosionEvent::ProjectileActor' has a wrong offset!");
static_assert(offsetof(SQShockwave_NearbyExplosionEvent, Location) == 0x000008, "Member 'SQShockwave_NearbyExplosionEvent::Location' has a wrong offset!");
static_assert(offsetof(SQShockwave_NearbyExplosionEvent, DistanceFromEffect) == 0x000014, "Member 'SQShockwave_NearbyExplosionEvent::DistanceFromEffect' has a wrong offset!");

// Function Squad.SQShockwave.GetShockwaveSetting
// 0x0010 (0x0010 - 0x0000)
struct SQShockwave_GetShockwaveSetting final
{
public:
	struct FSQShockwaveQualitySetting             ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQShockwave_GetShockwaveSetting) == 0x000004, "Wrong alignment on SQShockwave_GetShockwaveSetting");
static_assert(sizeof(SQShockwave_GetShockwaveSetting) == 0x000010, "Wrong size on SQShockwave_GetShockwaveSetting");
static_assert(offsetof(SQShockwave_GetShockwaveSetting, ReturnValue) == 0x000000, "Member 'SQShockwave_GetShockwaveSetting::ReturnValue' has a wrong offset!");

// Function Squad.SQRoleSettings.CanEnterSeat
// 0x0010 (0x0010 - 0x0000)
struct SQRoleSettings_CanEnterSeat final
{
public:
	class USQVehicleSeatComponent*                Seat;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C0[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRoleSettings_CanEnterSeat) == 0x000008, "Wrong alignment on SQRoleSettings_CanEnterSeat");
static_assert(sizeof(SQRoleSettings_CanEnterSeat) == 0x000010, "Wrong size on SQRoleSettings_CanEnterSeat");
static_assert(offsetof(SQRoleSettings_CanEnterSeat, Seat) == 0x000000, "Member 'SQRoleSettings_CanEnterSeat::Seat' has a wrong offset!");
static_assert(offsetof(SQRoleSettings_CanEnterSeat, ReturnValue) == 0x000008, "Member 'SQRoleSettings_CanEnterSeat::ReturnValue' has a wrong offset!");

// Function Squad.SQRoleSettings.CanPlaceRallyPointWithMinimumTeamMate
// 0x0001 (0x0001 - 0x0000)
struct SQRoleSettings_CanPlaceRallyPointWithMinimumTeamMate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRoleSettings_CanPlaceRallyPointWithMinimumTeamMate) == 0x000001, "Wrong alignment on SQRoleSettings_CanPlaceRallyPointWithMinimumTeamMate");
static_assert(sizeof(SQRoleSettings_CanPlaceRallyPointWithMinimumTeamMate) == 0x000001, "Wrong size on SQRoleSettings_CanPlaceRallyPointWithMinimumTeamMate");
static_assert(offsetof(SQRoleSettings_CanPlaceRallyPointWithMinimumTeamMate, ReturnValue) == 0x000000, "Member 'SQRoleSettings_CanPlaceRallyPointWithMinimumTeamMate::ReturnValue' has a wrong offset!");

// Function Squad.SQRoleSettings.CanSeeHealthStatus
// 0x0001 (0x0001 - 0x0000)
struct SQRoleSettings_CanSeeHealthStatus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRoleSettings_CanSeeHealthStatus) == 0x000001, "Wrong alignment on SQRoleSettings_CanSeeHealthStatus");
static_assert(sizeof(SQRoleSettings_CanSeeHealthStatus) == 0x000001, "Wrong size on SQRoleSettings_CanSeeHealthStatus");
static_assert(offsetof(SQRoleSettings_CanSeeHealthStatus, ReturnValue) == 0x000000, "Member 'SQRoleSettings_CanSeeHealthStatus::ReturnValue' has a wrong offset!");

// Function Squad.SQRoleSettings.GetRoleDisplayName
// 0x0010 (0x0010 - 0x0000)
struct SQRoleSettings_GetRoleDisplayName final
{
public:
	class FString                                 CurrentRoleDisplayName;                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRoleSettings_GetRoleDisplayName) == 0x000008, "Wrong alignment on SQRoleSettings_GetRoleDisplayName");
static_assert(sizeof(SQRoleSettings_GetRoleDisplayName) == 0x000010, "Wrong size on SQRoleSettings_GetRoleDisplayName");
static_assert(offsetof(SQRoleSettings_GetRoleDisplayName, CurrentRoleDisplayName) == 0x000000, "Member 'SQRoleSettings_GetRoleDisplayName::CurrentRoleDisplayName' has a wrong offset!");

// Function Squad.SQRoleSettings.IsMedic
// 0x0001 (0x0001 - 0x0000)
struct SQRoleSettings_IsMedic final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRoleSettings_IsMedic) == 0x000001, "Wrong alignment on SQRoleSettings_IsMedic");
static_assert(sizeof(SQRoleSettings_IsMedic) == 0x000001, "Wrong size on SQRoleSettings_IsMedic");
static_assert(offsetof(SQRoleSettings_IsMedic, ReturnValue) == 0x000000, "Member 'SQRoleSettings_IsMedic::ReturnValue' has a wrong offset!");

// Function Squad.SQRoleSettings.IsSquadLeader
// 0x0001 (0x0001 - 0x0000)
struct SQRoleSettings_IsSquadLeader final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRoleSettings_IsSquadLeader) == 0x000001, "Wrong alignment on SQRoleSettings_IsSquadLeader");
static_assert(sizeof(SQRoleSettings_IsSquadLeader) == 0x000001, "Wrong size on SQRoleSettings_IsSquadLeader");
static_assert(offsetof(SQRoleSettings_IsSquadLeader, ReturnValue) == 0x000000, "Member 'SQRoleSettings_IsSquadLeader::ReturnValue' has a wrong offset!");

// Function Squad.SQRoleSettings.TryGetSoldierWithLayer
// 0x0038 (0x0038 - 0x0000)
struct SQRoleSettings_TryGetSoldierWithLayer final
{
public:
	const class USQLayer*                         InLayer;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   OutSoldier;                                        // 0x0008(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C1[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRoleSettings_TryGetSoldierWithLayer) == 0x000008, "Wrong alignment on SQRoleSettings_TryGetSoldierWithLayer");
static_assert(sizeof(SQRoleSettings_TryGetSoldierWithLayer) == 0x000038, "Wrong size on SQRoleSettings_TryGetSoldierWithLayer");
static_assert(offsetof(SQRoleSettings_TryGetSoldierWithLayer, InLayer) == 0x000000, "Member 'SQRoleSettings_TryGetSoldierWithLayer::InLayer' has a wrong offset!");
static_assert(offsetof(SQRoleSettings_TryGetSoldierWithLayer, OutSoldier) == 0x000008, "Member 'SQRoleSettings_TryGetSoldierWithLayer::OutSoldier' has a wrong offset!");
static_assert(offsetof(SQRoleSettings_TryGetSoldierWithLayer, ReturnValue) == 0x000030, "Member 'SQRoleSettings_TryGetSoldierWithLayer::ReturnValue' has a wrong offset!");

// Function Squad.SQPassDamageInterface.DoesPassDamage
// 0x0001 (0x0001 - 0x0000)
struct SQPassDamageInterface_DoesPassDamage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPassDamageInterface_DoesPassDamage) == 0x000001, "Wrong alignment on SQPassDamageInterface_DoesPassDamage");
static_assert(sizeof(SQPassDamageInterface_DoesPassDamage) == 0x000001, "Wrong size on SQPassDamageInterface_DoesPassDamage");
static_assert(offsetof(SQPassDamageInterface_DoesPassDamage, ReturnValue) == 0x000000, "Member 'SQPassDamageInterface_DoesPassDamage::ReturnValue' has a wrong offset!");

// Function Squad.SQPawnInventoryComponent.AddGroupToInventory
// 0x0008 (0x0008 - 0x0000)
struct SQPawnInventoryComponent_AddGroupToInventory final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPawnInventoryComponent_AddGroupToInventory) == 0x000004, "Wrong alignment on SQPawnInventoryComponent_AddGroupToInventory");
static_assert(sizeof(SQPawnInventoryComponent_AddGroupToInventory) == 0x000008, "Wrong size on SQPawnInventoryComponent_AddGroupToInventory");
static_assert(offsetof(SQPawnInventoryComponent_AddGroupToInventory, Slot) == 0x000000, "Member 'SQPawnInventoryComponent_AddGroupToInventory::Slot' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_AddGroupToInventory, ReturnValue) == 0x000004, "Member 'SQPawnInventoryComponent_AddGroupToInventory::ReturnValue' has a wrong offset!");

// Function Squad.SQPawnInventoryComponent.EndLoopAnimationHandler
// 0x0040 (0x0040 - 0x0000)
struct SQPawnInventoryComponent_EndLoopAnimationHandler final
{
public:
	class UAnimMontage*                           WeaponMontage;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Soldier1pMontage;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Soldier3pMontage;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQMontageSectionNames                 SectionNames;                                      // 0x0018(0x0028)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPawnInventoryComponent_EndLoopAnimationHandler) == 0x000008, "Wrong alignment on SQPawnInventoryComponent_EndLoopAnimationHandler");
static_assert(sizeof(SQPawnInventoryComponent_EndLoopAnimationHandler) == 0x000040, "Wrong size on SQPawnInventoryComponent_EndLoopAnimationHandler");
static_assert(offsetof(SQPawnInventoryComponent_EndLoopAnimationHandler, WeaponMontage) == 0x000000, "Member 'SQPawnInventoryComponent_EndLoopAnimationHandler::WeaponMontage' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_EndLoopAnimationHandler, Soldier1pMontage) == 0x000008, "Member 'SQPawnInventoryComponent_EndLoopAnimationHandler::Soldier1pMontage' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_EndLoopAnimationHandler, Soldier3pMontage) == 0x000010, "Member 'SQPawnInventoryComponent_EndLoopAnimationHandler::Soldier3pMontage' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_EndLoopAnimationHandler, SectionNames) == 0x000018, "Member 'SQPawnInventoryComponent_EndLoopAnimationHandler::SectionNames' has a wrong offset!");

// Function Squad.SQPawnInventoryComponent.FindValidWeaponByClass
// 0x0010 (0x0010 - 0x0000)
struct SQPawnInventoryComponent_FindValidWeaponByClass final
{
public:
	TSubclassOf<class ASQEquipableItem>           WeaponClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQEquipableItem*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPawnInventoryComponent_FindValidWeaponByClass) == 0x000008, "Wrong alignment on SQPawnInventoryComponent_FindValidWeaponByClass");
static_assert(sizeof(SQPawnInventoryComponent_FindValidWeaponByClass) == 0x000010, "Wrong size on SQPawnInventoryComponent_FindValidWeaponByClass");
static_assert(offsetof(SQPawnInventoryComponent_FindValidWeaponByClass, WeaponClass) == 0x000000, "Member 'SQPawnInventoryComponent_FindValidWeaponByClass::WeaponClass' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_FindValidWeaponByClass, ReturnValue) == 0x000008, "Member 'SQPawnInventoryComponent_FindValidWeaponByClass::ReturnValue' has a wrong offset!");

// Function Squad.SQPawnInventoryComponent.FindValidWeaponInGroup
// 0x0010 (0x0010 - 0x0000)
struct SQPawnInventoryComponent_FindValidWeaponInGroup final
{
public:
	int32                                         WeaponSlot;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeaponOffset;                                      // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQEquipableItem*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPawnInventoryComponent_FindValidWeaponInGroup) == 0x000008, "Wrong alignment on SQPawnInventoryComponent_FindValidWeaponInGroup");
static_assert(sizeof(SQPawnInventoryComponent_FindValidWeaponInGroup) == 0x000010, "Wrong size on SQPawnInventoryComponent_FindValidWeaponInGroup");
static_assert(offsetof(SQPawnInventoryComponent_FindValidWeaponInGroup, WeaponSlot) == 0x000000, "Member 'SQPawnInventoryComponent_FindValidWeaponInGroup::WeaponSlot' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_FindValidWeaponInGroup, WeaponOffset) == 0x000004, "Member 'SQPawnInventoryComponent_FindValidWeaponInGroup::WeaponOffset' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_FindValidWeaponInGroup, ReturnValue) == 0x000008, "Member 'SQPawnInventoryComponent_FindValidWeaponInGroup::ReturnValue' has a wrong offset!");

// Function Squad.SQPawnInventoryComponent.InsertExistingItemIntoInventory
// 0x0018 (0x0018 - 0x0000)
struct SQPawnInventoryComponent_InsertExistingItemIntoInventory final
{
public:
	class ASQEquipableItem*                       Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Slot;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C7[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPawnInventoryComponent_InsertExistingItemIntoInventory) == 0x000008, "Wrong alignment on SQPawnInventoryComponent_InsertExistingItemIntoInventory");
static_assert(sizeof(SQPawnInventoryComponent_InsertExistingItemIntoInventory) == 0x000018, "Wrong size on SQPawnInventoryComponent_InsertExistingItemIntoInventory");
static_assert(offsetof(SQPawnInventoryComponent_InsertExistingItemIntoInventory, Item) == 0x000000, "Member 'SQPawnInventoryComponent_InsertExistingItemIntoInventory::Item' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_InsertExistingItemIntoInventory, Slot) == 0x000008, "Member 'SQPawnInventoryComponent_InsertExistingItemIntoInventory::Slot' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_InsertExistingItemIntoInventory, Offset) == 0x00000C, "Member 'SQPawnInventoryComponent_InsertExistingItemIntoInventory::Offset' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_InsertExistingItemIntoInventory, ReturnValue) == 0x000010, "Member 'SQPawnInventoryComponent_InsertExistingItemIntoInventory::ReturnValue' has a wrong offset!");

// Function Squad.SQPawnInventoryComponent.InsertItemIntoInventory
// 0x0050 (0x0050 - 0x0000)
struct SQPawnInventoryComponent_InsertItemIntoInventory final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C8[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQInventoryData                       ItemClass;                                         // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnMaxAmmo;                                     // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C9[0x3];                                     // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQEquipableItem*                       ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPawnInventoryComponent_InsertItemIntoInventory) == 0x000008, "Wrong alignment on SQPawnInventoryComponent_InsertItemIntoInventory");
static_assert(sizeof(SQPawnInventoryComponent_InsertItemIntoInventory) == 0x000050, "Wrong size on SQPawnInventoryComponent_InsertItemIntoInventory");
static_assert(offsetof(SQPawnInventoryComponent_InsertItemIntoInventory, Slot) == 0x000000, "Member 'SQPawnInventoryComponent_InsertItemIntoInventory::Slot' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_InsertItemIntoInventory, ItemClass) == 0x000008, "Member 'SQPawnInventoryComponent_InsertItemIntoInventory::ItemClass' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_InsertItemIntoInventory, Offset) == 0x000040, "Member 'SQPawnInventoryComponent_InsertItemIntoInventory::Offset' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_InsertItemIntoInventory, bSpawnMaxAmmo) == 0x000044, "Member 'SQPawnInventoryComponent_InsertItemIntoInventory::bSpawnMaxAmmo' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_InsertItemIntoInventory, ReturnValue) == 0x000048, "Member 'SQPawnInventoryComponent_InsertItemIntoInventory::ReturnValue' has a wrong offset!");

// Function Squad.SQPawnInventoryComponent.OnPendingWeaponPawnOwnerChanged
// 0x0008 (0x0008 - 0x0000)
struct SQPawnInventoryComponent_OnPendingWeaponPawnOwnerChanged final
{
public:
	class APawn*                                  NewPawnOwner;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPawnInventoryComponent_OnPendingWeaponPawnOwnerChanged) == 0x000008, "Wrong alignment on SQPawnInventoryComponent_OnPendingWeaponPawnOwnerChanged");
static_assert(sizeof(SQPawnInventoryComponent_OnPendingWeaponPawnOwnerChanged) == 0x000008, "Wrong size on SQPawnInventoryComponent_OnPendingWeaponPawnOwnerChanged");
static_assert(offsetof(SQPawnInventoryComponent_OnPendingWeaponPawnOwnerChanged, NewPawnOwner) == 0x000000, "Member 'SQPawnInventoryComponent_OnPendingWeaponPawnOwnerChanged::NewPawnOwner' has a wrong offset!");

// Function Squad.SQPawnInventoryComponent.OnRep_PendingWeapon
// 0x0008 (0x0008 - 0x0000)
struct SQPawnInventoryComponent_OnRep_PendingWeapon final
{
public:
	class ASQEquipableItem*                       PreviousPendingWeapon;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPawnInventoryComponent_OnRep_PendingWeapon) == 0x000008, "Wrong alignment on SQPawnInventoryComponent_OnRep_PendingWeapon");
static_assert(sizeof(SQPawnInventoryComponent_OnRep_PendingWeapon) == 0x000008, "Wrong size on SQPawnInventoryComponent_OnRep_PendingWeapon");
static_assert(offsetof(SQPawnInventoryComponent_OnRep_PendingWeapon, PreviousPendingWeapon) == 0x000000, "Member 'SQPawnInventoryComponent_OnRep_PendingWeapon::PreviousPendingWeapon' has a wrong offset!");

// Function Squad.SQPawnInventoryComponent.PauseAnimationHandler
// 0x0018 (0x0018 - 0x0000)
struct SQPawnInventoryComponent_PauseAnimationHandler final
{
public:
	class UAnimMontage*                           WeaponMontage;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Soldier1pMontage;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Soldier3pMontage;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPawnInventoryComponent_PauseAnimationHandler) == 0x000008, "Wrong alignment on SQPawnInventoryComponent_PauseAnimationHandler");
static_assert(sizeof(SQPawnInventoryComponent_PauseAnimationHandler) == 0x000018, "Wrong size on SQPawnInventoryComponent_PauseAnimationHandler");
static_assert(offsetof(SQPawnInventoryComponent_PauseAnimationHandler, WeaponMontage) == 0x000000, "Member 'SQPawnInventoryComponent_PauseAnimationHandler::WeaponMontage' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_PauseAnimationHandler, Soldier1pMontage) == 0x000008, "Member 'SQPawnInventoryComponent_PauseAnimationHandler::Soldier1pMontage' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_PauseAnimationHandler, Soldier3pMontage) == 0x000010, "Member 'SQPawnInventoryComponent_PauseAnimationHandler::Soldier3pMontage' has a wrong offset!");

// Function Squad.SQPawnInventoryComponent.PlayAnimationHandler
// 0x0018 (0x0018 - 0x0000)
struct SQPawnInventoryComponent_PlayAnimationHandler final
{
public:
	class UAnimMontage*                           WeaponMontage;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Soldier1pMontage;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Soldier3pMontage;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPawnInventoryComponent_PlayAnimationHandler) == 0x000008, "Wrong alignment on SQPawnInventoryComponent_PlayAnimationHandler");
static_assert(sizeof(SQPawnInventoryComponent_PlayAnimationHandler) == 0x000018, "Wrong size on SQPawnInventoryComponent_PlayAnimationHandler");
static_assert(offsetof(SQPawnInventoryComponent_PlayAnimationHandler, WeaponMontage) == 0x000000, "Member 'SQPawnInventoryComponent_PlayAnimationHandler::WeaponMontage' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_PlayAnimationHandler, Soldier1pMontage) == 0x000008, "Member 'SQPawnInventoryComponent_PlayAnimationHandler::Soldier1pMontage' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_PlayAnimationHandler, Soldier3pMontage) == 0x000010, "Member 'SQPawnInventoryComponent_PlayAnimationHandler::Soldier3pMontage' has a wrong offset!");

// Function Squad.SQPawnInventoryComponent.RemoveGroupFromInventory
// 0x0008 (0x0008 - 0x0000)
struct SQPawnInventoryComponent_RemoveGroupFromInventory final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12CA[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPawnInventoryComponent_RemoveGroupFromInventory) == 0x000004, "Wrong alignment on SQPawnInventoryComponent_RemoveGroupFromInventory");
static_assert(sizeof(SQPawnInventoryComponent_RemoveGroupFromInventory) == 0x000008, "Wrong size on SQPawnInventoryComponent_RemoveGroupFromInventory");
static_assert(offsetof(SQPawnInventoryComponent_RemoveGroupFromInventory, Slot) == 0x000000, "Member 'SQPawnInventoryComponent_RemoveGroupFromInventory::Slot' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_RemoveGroupFromInventory, ReturnValue) == 0x000004, "Member 'SQPawnInventoryComponent_RemoveGroupFromInventory::ReturnValue' has a wrong offset!");

// Function Squad.SQPawnInventoryComponent.RemoveItemClassFromInventory
// 0x0008 (0x0008 - 0x0000)
struct SQPawnInventoryComponent_RemoveItemClassFromInventory final
{
public:
	TSubclassOf<class ASQEquipableItem>           EquipableItemToRemove;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPawnInventoryComponent_RemoveItemClassFromInventory) == 0x000008, "Wrong alignment on SQPawnInventoryComponent_RemoveItemClassFromInventory");
static_assert(sizeof(SQPawnInventoryComponent_RemoveItemClassFromInventory) == 0x000008, "Wrong size on SQPawnInventoryComponent_RemoveItemClassFromInventory");
static_assert(offsetof(SQPawnInventoryComponent_RemoveItemClassFromInventory, EquipableItemToRemove) == 0x000000, "Member 'SQPawnInventoryComponent_RemoveItemClassFromInventory::EquipableItemToRemove' has a wrong offset!");

// Function Squad.SQPawnInventoryComponent.RemoveItemFromInventory
// 0x0008 (0x0008 - 0x0000)
struct SQPawnInventoryComponent_RemoveItemFromInventory final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPawnInventoryComponent_RemoveItemFromInventory) == 0x000004, "Wrong alignment on SQPawnInventoryComponent_RemoveItemFromInventory");
static_assert(sizeof(SQPawnInventoryComponent_RemoveItemFromInventory) == 0x000008, "Wrong size on SQPawnInventoryComponent_RemoveItemFromInventory");
static_assert(offsetof(SQPawnInventoryComponent_RemoveItemFromInventory, Slot) == 0x000000, "Member 'SQPawnInventoryComponent_RemoveItemFromInventory::Slot' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_RemoveItemFromInventory, Offset) == 0x000004, "Member 'SQPawnInventoryComponent_RemoveItemFromInventory::Offset' has a wrong offset!");

// Function Squad.SQPawnInventoryComponent.RemoveWithoutDestroyingItem
// 0x0010 (0x0010 - 0x0000)
struct SQPawnInventoryComponent_RemoveWithoutDestroyingItem final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQEquipableItem*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPawnInventoryComponent_RemoveWithoutDestroyingItem) == 0x000008, "Wrong alignment on SQPawnInventoryComponent_RemoveWithoutDestroyingItem");
static_assert(sizeof(SQPawnInventoryComponent_RemoveWithoutDestroyingItem) == 0x000010, "Wrong size on SQPawnInventoryComponent_RemoveWithoutDestroyingItem");
static_assert(offsetof(SQPawnInventoryComponent_RemoveWithoutDestroyingItem, Slot) == 0x000000, "Member 'SQPawnInventoryComponent_RemoveWithoutDestroyingItem::Slot' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_RemoveWithoutDestroyingItem, Offset) == 0x000004, "Member 'SQPawnInventoryComponent_RemoveWithoutDestroyingItem::Offset' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_RemoveWithoutDestroyingItem, ReturnValue) == 0x000008, "Member 'SQPawnInventoryComponent_RemoveWithoutDestroyingItem::ReturnValue' has a wrong offset!");

// Function Squad.SQPawnInventoryComponent.ReplaceItemInInventory
// 0x0048 (0x0048 - 0x0000)
struct SQPawnInventoryComponent_ReplaceItemInInventory final
{
public:
	int32                                         Slot;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12CB[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQInventoryData                       ItemClass;                                         // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Offset;                                            // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12CC[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPawnInventoryComponent_ReplaceItemInInventory) == 0x000008, "Wrong alignment on SQPawnInventoryComponent_ReplaceItemInInventory");
static_assert(sizeof(SQPawnInventoryComponent_ReplaceItemInInventory) == 0x000048, "Wrong size on SQPawnInventoryComponent_ReplaceItemInInventory");
static_assert(offsetof(SQPawnInventoryComponent_ReplaceItemInInventory, Slot) == 0x000000, "Member 'SQPawnInventoryComponent_ReplaceItemInInventory::Slot' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_ReplaceItemInInventory, ItemClass) == 0x000008, "Member 'SQPawnInventoryComponent_ReplaceItemInInventory::ItemClass' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_ReplaceItemInInventory, Offset) == 0x000040, "Member 'SQPawnInventoryComponent_ReplaceItemInInventory::Offset' has a wrong offset!");

// Function Squad.SQPawnInventoryComponent.ResumeAnimationHandler
// 0x0018 (0x0018 - 0x0000)
struct SQPawnInventoryComponent_ResumeAnimationHandler final
{
public:
	class UAnimMontage*                           WeaponMontage;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Soldier1pMontage;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Soldier3pMontage;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPawnInventoryComponent_ResumeAnimationHandler) == 0x000008, "Wrong alignment on SQPawnInventoryComponent_ResumeAnimationHandler");
static_assert(sizeof(SQPawnInventoryComponent_ResumeAnimationHandler) == 0x000018, "Wrong size on SQPawnInventoryComponent_ResumeAnimationHandler");
static_assert(offsetof(SQPawnInventoryComponent_ResumeAnimationHandler, WeaponMontage) == 0x000000, "Member 'SQPawnInventoryComponent_ResumeAnimationHandler::WeaponMontage' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_ResumeAnimationHandler, Soldier1pMontage) == 0x000008, "Member 'SQPawnInventoryComponent_ResumeAnimationHandler::Soldier1pMontage' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_ResumeAnimationHandler, Soldier3pMontage) == 0x000010, "Member 'SQPawnInventoryComponent_ResumeAnimationHandler::Soldier3pMontage' has a wrong offset!");

// Function Squad.SQPawnInventoryComponent.ServerSwitchWeapon
// 0x0004 (0x0004 - 0x0000)
struct SQPawnInventoryComponent_ServerSwitchWeapon final
{
public:
	int32                                         NewWeaponSlot;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPawnInventoryComponent_ServerSwitchWeapon) == 0x000004, "Wrong alignment on SQPawnInventoryComponent_ServerSwitchWeapon");
static_assert(sizeof(SQPawnInventoryComponent_ServerSwitchWeapon) == 0x000004, "Wrong size on SQPawnInventoryComponent_ServerSwitchWeapon");
static_assert(offsetof(SQPawnInventoryComponent_ServerSwitchWeapon, NewWeaponSlot) == 0x000000, "Member 'SQPawnInventoryComponent_ServerSwitchWeapon::NewWeaponSlot' has a wrong offset!");

// Function Squad.SQPawnInventoryComponent.ServerSwitchWeapon2
// 0x0008 (0x0008 - 0x0000)
struct SQPawnInventoryComponent_ServerSwitchWeapon2 final
{
public:
	class ASQEquipableItem*                       NewWeapon;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPawnInventoryComponent_ServerSwitchWeapon2) == 0x000008, "Wrong alignment on SQPawnInventoryComponent_ServerSwitchWeapon2");
static_assert(sizeof(SQPawnInventoryComponent_ServerSwitchWeapon2) == 0x000008, "Wrong size on SQPawnInventoryComponent_ServerSwitchWeapon2");
static_assert(offsetof(SQPawnInventoryComponent_ServerSwitchWeapon2, NewWeapon) == 0x000000, "Member 'SQPawnInventoryComponent_ServerSwitchWeapon2::NewWeapon' has a wrong offset!");

// Function Squad.SQPawnInventoryComponent.SetAnimationPlayRateHandler
// 0x0020 (0x0020 - 0x0000)
struct SQPawnInventoryComponent_SetAnimationPlayRateHandler final
{
public:
	class UAnimMontage*                           WeaponMontage;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Soldier1pMontage;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Soldier3pMontage;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewPlayRate;                                       // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12CD[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPawnInventoryComponent_SetAnimationPlayRateHandler) == 0x000008, "Wrong alignment on SQPawnInventoryComponent_SetAnimationPlayRateHandler");
static_assert(sizeof(SQPawnInventoryComponent_SetAnimationPlayRateHandler) == 0x000020, "Wrong size on SQPawnInventoryComponent_SetAnimationPlayRateHandler");
static_assert(offsetof(SQPawnInventoryComponent_SetAnimationPlayRateHandler, WeaponMontage) == 0x000000, "Member 'SQPawnInventoryComponent_SetAnimationPlayRateHandler::WeaponMontage' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_SetAnimationPlayRateHandler, Soldier1pMontage) == 0x000008, "Member 'SQPawnInventoryComponent_SetAnimationPlayRateHandler::Soldier1pMontage' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_SetAnimationPlayRateHandler, Soldier3pMontage) == 0x000010, "Member 'SQPawnInventoryComponent_SetAnimationPlayRateHandler::Soldier3pMontage' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_SetAnimationPlayRateHandler, NewPlayRate) == 0x000018, "Member 'SQPawnInventoryComponent_SetAnimationPlayRateHandler::NewPlayRate' has a wrong offset!");

// Function Squad.SQPawnInventoryComponent.SetupStaticInfoBindings
// 0x0008 (0x0008 - 0x0000)
struct SQPawnInventoryComponent_SetupStaticInfoBindings final
{
public:
	class ASQEquipableItem*                       Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPawnInventoryComponent_SetupStaticInfoBindings) == 0x000008, "Wrong alignment on SQPawnInventoryComponent_SetupStaticInfoBindings");
static_assert(sizeof(SQPawnInventoryComponent_SetupStaticInfoBindings) == 0x000008, "Wrong size on SQPawnInventoryComponent_SetupStaticInfoBindings");
static_assert(offsetof(SQPawnInventoryComponent_SetupStaticInfoBindings, Item) == 0x000000, "Member 'SQPawnInventoryComponent_SetupStaticInfoBindings::Item' has a wrong offset!");

// Function Squad.SQPawnInventoryComponent.SpawnEquipableItem
// 0x0050 (0x0050 - 0x0000)
struct SQPawnInventoryComponent_SpawnEquipableItem final
{
public:
	struct FSQInventoryData                       ItemClass;                                         // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bSpawnMaxAmmo;                                     // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12CE[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQPersistedAmmoCount                  StartingAmmo;                                      // 0x003C(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_12CF[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQEquipableItem*                       ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPawnInventoryComponent_SpawnEquipableItem) == 0x000008, "Wrong alignment on SQPawnInventoryComponent_SpawnEquipableItem");
static_assert(sizeof(SQPawnInventoryComponent_SpawnEquipableItem) == 0x000050, "Wrong size on SQPawnInventoryComponent_SpawnEquipableItem");
static_assert(offsetof(SQPawnInventoryComponent_SpawnEquipableItem, ItemClass) == 0x000000, "Member 'SQPawnInventoryComponent_SpawnEquipableItem::ItemClass' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_SpawnEquipableItem, bSpawnMaxAmmo) == 0x000038, "Member 'SQPawnInventoryComponent_SpawnEquipableItem::bSpawnMaxAmmo' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_SpawnEquipableItem, StartingAmmo) == 0x00003C, "Member 'SQPawnInventoryComponent_SpawnEquipableItem::StartingAmmo' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_SpawnEquipableItem, ReturnValue) == 0x000048, "Member 'SQPawnInventoryComponent_SpawnEquipableItem::ReturnValue' has a wrong offset!");

// Function Squad.SQPawnInventoryComponent.StopAnimationHandler
// 0x0020 (0x0020 - 0x0000)
struct SQPawnInventoryComponent_StopAnimationHandler final
{
public:
	class UAnimMontage*                           WeaponMontage;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Soldier1pMontage;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Soldier3pMontage;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         blendOutTime;                                      // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopAllWeaponAnims;                               // 0x001C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D0[0x3];                                     // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPawnInventoryComponent_StopAnimationHandler) == 0x000008, "Wrong alignment on SQPawnInventoryComponent_StopAnimationHandler");
static_assert(sizeof(SQPawnInventoryComponent_StopAnimationHandler) == 0x000020, "Wrong size on SQPawnInventoryComponent_StopAnimationHandler");
static_assert(offsetof(SQPawnInventoryComponent_StopAnimationHandler, WeaponMontage) == 0x000000, "Member 'SQPawnInventoryComponent_StopAnimationHandler::WeaponMontage' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_StopAnimationHandler, Soldier1pMontage) == 0x000008, "Member 'SQPawnInventoryComponent_StopAnimationHandler::Soldier1pMontage' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_StopAnimationHandler, Soldier3pMontage) == 0x000010, "Member 'SQPawnInventoryComponent_StopAnimationHandler::Soldier3pMontage' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_StopAnimationHandler, blendOutTime) == 0x000018, "Member 'SQPawnInventoryComponent_StopAnimationHandler::blendOutTime' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_StopAnimationHandler, bStopAllWeaponAnims) == 0x00001C, "Member 'SQPawnInventoryComponent_StopAnimationHandler::bStopAllWeaponAnims' has a wrong offset!");

// Function Squad.SQPawnInventoryComponent.SwitchItem
// 0x0008 (0x0008 - 0x0000)
struct SQPawnInventoryComponent_SwitchItem final
{
public:
	int32                                         ItemSlot;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D1[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPawnInventoryComponent_SwitchItem) == 0x000004, "Wrong alignment on SQPawnInventoryComponent_SwitchItem");
static_assert(sizeof(SQPawnInventoryComponent_SwitchItem) == 0x000008, "Wrong size on SQPawnInventoryComponent_SwitchItem");
static_assert(offsetof(SQPawnInventoryComponent_SwitchItem, ItemSlot) == 0x000000, "Member 'SQPawnInventoryComponent_SwitchItem::ItemSlot' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_SwitchItem, ReturnValue) == 0x000004, "Member 'SQPawnInventoryComponent_SwitchItem::ReturnValue' has a wrong offset!");

// Function Squad.SQPawnInventoryComponent.SwitchWeapon
// 0x0008 (0x0008 - 0x0000)
struct SQPawnInventoryComponent_SwitchWeapon final
{
public:
	int32                                         NewItemSlot;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D2[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPawnInventoryComponent_SwitchWeapon) == 0x000004, "Wrong alignment on SQPawnInventoryComponent_SwitchWeapon");
static_assert(sizeof(SQPawnInventoryComponent_SwitchWeapon) == 0x000008, "Wrong size on SQPawnInventoryComponent_SwitchWeapon");
static_assert(offsetof(SQPawnInventoryComponent_SwitchWeapon, NewItemSlot) == 0x000000, "Member 'SQPawnInventoryComponent_SwitchWeapon::NewItemSlot' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_SwitchWeapon, ReturnValue) == 0x000004, "Member 'SQPawnInventoryComponent_SwitchWeapon::ReturnValue' has a wrong offset!");

// Function Squad.SQPawnInventoryComponent.SwitchWeaponDirectly
// 0x000C (0x000C - 0x0000)
struct SQPawnInventoryComponent_SwitchWeaponDirectly final
{
public:
	int32                                         NewWeaponSlot;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewWeaponOffset;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInstant;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D3[0x2];                                     // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPawnInventoryComponent_SwitchWeaponDirectly) == 0x000004, "Wrong alignment on SQPawnInventoryComponent_SwitchWeaponDirectly");
static_assert(sizeof(SQPawnInventoryComponent_SwitchWeaponDirectly) == 0x00000C, "Wrong size on SQPawnInventoryComponent_SwitchWeaponDirectly");
static_assert(offsetof(SQPawnInventoryComponent_SwitchWeaponDirectly, NewWeaponSlot) == 0x000000, "Member 'SQPawnInventoryComponent_SwitchWeaponDirectly::NewWeaponSlot' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_SwitchWeaponDirectly, NewWeaponOffset) == 0x000004, "Member 'SQPawnInventoryComponent_SwitchWeaponDirectly::NewWeaponOffset' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_SwitchWeaponDirectly, bInstant) == 0x000008, "Member 'SQPawnInventoryComponent_SwitchWeaponDirectly::bInstant' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_SwitchWeaponDirectly, ReturnValue) == 0x000009, "Member 'SQPawnInventoryComponent_SwitchWeaponDirectly::ReturnValue' has a wrong offset!");

// Function Squad.SQPawnInventoryComponent.UpdateInventorySwitch
// 0x000C (0x000C - 0x0000)
struct SQPawnInventoryComponent_UpdateInventorySwitch final
{
public:
	int32                                         NewSlot;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewOffset;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInteracting;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D4[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPawnInventoryComponent_UpdateInventorySwitch) == 0x000004, "Wrong alignment on SQPawnInventoryComponent_UpdateInventorySwitch");
static_assert(sizeof(SQPawnInventoryComponent_UpdateInventorySwitch) == 0x00000C, "Wrong size on SQPawnInventoryComponent_UpdateInventorySwitch");
static_assert(offsetof(SQPawnInventoryComponent_UpdateInventorySwitch, NewSlot) == 0x000000, "Member 'SQPawnInventoryComponent_UpdateInventorySwitch::NewSlot' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_UpdateInventorySwitch, NewOffset) == 0x000004, "Member 'SQPawnInventoryComponent_UpdateInventorySwitch::NewOffset' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_UpdateInventorySwitch, bInteracting) == 0x000008, "Member 'SQPawnInventoryComponent_UpdateInventorySwitch::bInteracting' has a wrong offset!");

// Function Squad.SQPawnInventoryComponent.UpdateStaticItemInfo
// 0x0008 (0x0008 - 0x0000)
struct SQPawnInventoryComponent_UpdateStaticItemInfo final
{
public:
	class USQItemStaticInfo*                      InfoObject;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPawnInventoryComponent_UpdateStaticItemInfo) == 0x000008, "Wrong alignment on SQPawnInventoryComponent_UpdateStaticItemInfo");
static_assert(sizeof(SQPawnInventoryComponent_UpdateStaticItemInfo) == 0x000008, "Wrong size on SQPawnInventoryComponent_UpdateStaticItemInfo");
static_assert(offsetof(SQPawnInventoryComponent_UpdateStaticItemInfo, InfoObject) == 0x000000, "Member 'SQPawnInventoryComponent_UpdateStaticItemInfo::InfoObject' has a wrong offset!");

// Function Squad.SQPawnInventoryComponent.CalculateMissingAmmoCost
// 0x0004 (0x0004 - 0x0000)
struct SQPawnInventoryComponent_CalculateMissingAmmoCost final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPawnInventoryComponent_CalculateMissingAmmoCost) == 0x000004, "Wrong alignment on SQPawnInventoryComponent_CalculateMissingAmmoCost");
static_assert(sizeof(SQPawnInventoryComponent_CalculateMissingAmmoCost) == 0x000004, "Wrong size on SQPawnInventoryComponent_CalculateMissingAmmoCost");
static_assert(offsetof(SQPawnInventoryComponent_CalculateMissingAmmoCost, ReturnValue) == 0x000000, "Member 'SQPawnInventoryComponent_CalculateMissingAmmoCost::ReturnValue' has a wrong offset!");

// Function Squad.SQPawnInventoryComponent.CalculateRearmCost
// 0x0030 (0x0030 - 0x0000)
struct SQPawnInventoryComponent_CalculateRearmCost final
{
public:
	float                                         OutCost;                                           // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D5[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ISQRearmSource>        RearmSource;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FSQRearmWeaponRequest>          RearmRequest;                                      // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D6[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPawnInventoryComponent_CalculateRearmCost) == 0x000008, "Wrong alignment on SQPawnInventoryComponent_CalculateRearmCost");
static_assert(sizeof(SQPawnInventoryComponent_CalculateRearmCost) == 0x000030, "Wrong size on SQPawnInventoryComponent_CalculateRearmCost");
static_assert(offsetof(SQPawnInventoryComponent_CalculateRearmCost, OutCost) == 0x000000, "Member 'SQPawnInventoryComponent_CalculateRearmCost::OutCost' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_CalculateRearmCost, RearmSource) == 0x000008, "Member 'SQPawnInventoryComponent_CalculateRearmCost::RearmSource' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_CalculateRearmCost, RearmRequest) == 0x000018, "Member 'SQPawnInventoryComponent_CalculateRearmCost::RearmRequest' has a wrong offset!");
static_assert(offsetof(SQPawnInventoryComponent_CalculateRearmCost, ReturnValue) == 0x000028, "Member 'SQPawnInventoryComponent_CalculateRearmCost::ReturnValue' has a wrong offset!");

// Function Squad.SQPawnInventoryComponent.GetInventoryItemGroups
// 0x0010 (0x0010 - 0x0000)
struct SQPawnInventoryComponent_GetInventoryItemGroups final
{
public:
	TArray<struct FSQWeaponGroupData>             ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPawnInventoryComponent_GetInventoryItemGroups) == 0x000008, "Wrong alignment on SQPawnInventoryComponent_GetInventoryItemGroups");
static_assert(sizeof(SQPawnInventoryComponent_GetInventoryItemGroups) == 0x000010, "Wrong size on SQPawnInventoryComponent_GetInventoryItemGroups");
static_assert(offsetof(SQPawnInventoryComponent_GetInventoryItemGroups, ReturnValue) == 0x000000, "Member 'SQPawnInventoryComponent_GetInventoryItemGroups::ReturnValue' has a wrong offset!");

// Function Squad.SQPhysicalMaterial.GetDecal
// 0x00A8 (0x00A8 - 0x0000)
struct SQPhysicalMaterial_GetDecal final
{
public:
	struct FSQProjectileImpactEffect              InImpactEffect;                                    // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     DefaultDecal;                                      // 0x0098(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ReturnValue;                                       // 0x00A0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPhysicalMaterial_GetDecal) == 0x000008, "Wrong alignment on SQPhysicalMaterial_GetDecal");
static_assert(sizeof(SQPhysicalMaterial_GetDecal) == 0x0000A8, "Wrong size on SQPhysicalMaterial_GetDecal");
static_assert(offsetof(SQPhysicalMaterial_GetDecal, InImpactEffect) == 0x000000, "Member 'SQPhysicalMaterial_GetDecal::InImpactEffect' has a wrong offset!");
static_assert(offsetof(SQPhysicalMaterial_GetDecal, DefaultDecal) == 0x000098, "Member 'SQPhysicalMaterial_GetDecal::DefaultDecal' has a wrong offset!");
static_assert(offsetof(SQPhysicalMaterial_GetDecal, ReturnValue) == 0x0000A0, "Member 'SQPhysicalMaterial_GetDecal::ReturnValue' has a wrong offset!");

// Function Squad.SQPhysicalMaterial.GetNiagaraParticle
// 0x00A8 (0x00A8 - 0x0000)
struct SQPhysicalMaterial_GetNiagaraParticle final
{
public:
	struct FSQProjectileImpactEffect              InImpactEffect;                                    // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         DefaultParticle;                                   // 0x0098(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         ReturnValue;                                       // 0x00A0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPhysicalMaterial_GetNiagaraParticle) == 0x000008, "Wrong alignment on SQPhysicalMaterial_GetNiagaraParticle");
static_assert(sizeof(SQPhysicalMaterial_GetNiagaraParticle) == 0x0000A8, "Wrong size on SQPhysicalMaterial_GetNiagaraParticle");
static_assert(offsetof(SQPhysicalMaterial_GetNiagaraParticle, InImpactEffect) == 0x000000, "Member 'SQPhysicalMaterial_GetNiagaraParticle::InImpactEffect' has a wrong offset!");
static_assert(offsetof(SQPhysicalMaterial_GetNiagaraParticle, DefaultParticle) == 0x000098, "Member 'SQPhysicalMaterial_GetNiagaraParticle::DefaultParticle' has a wrong offset!");
static_assert(offsetof(SQPhysicalMaterial_GetNiagaraParticle, ReturnValue) == 0x0000A0, "Member 'SQPhysicalMaterial_GetNiagaraParticle::ReturnValue' has a wrong offset!");

// Function Squad.SQPhysicalMaterial.GetParticle
// 0x00A8 (0x00A8 - 0x0000)
struct SQPhysicalMaterial_GetParticle final
{
public:
	struct FSQProjectileImpactEffect              InImpactEffect;                                    // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UParticleSystem*                        DefaultParticle;                                   // 0x0098(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        ReturnValue;                                       // 0x00A0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPhysicalMaterial_GetParticle) == 0x000008, "Wrong alignment on SQPhysicalMaterial_GetParticle");
static_assert(sizeof(SQPhysicalMaterial_GetParticle) == 0x0000A8, "Wrong size on SQPhysicalMaterial_GetParticle");
static_assert(offsetof(SQPhysicalMaterial_GetParticle, InImpactEffect) == 0x000000, "Member 'SQPhysicalMaterial_GetParticle::InImpactEffect' has a wrong offset!");
static_assert(offsetof(SQPhysicalMaterial_GetParticle, DefaultParticle) == 0x000098, "Member 'SQPhysicalMaterial_GetParticle::DefaultParticle' has a wrong offset!");
static_assert(offsetof(SQPhysicalMaterial_GetParticle, ReturnValue) == 0x0000A0, "Member 'SQPhysicalMaterial_GetParticle::ReturnValue' has a wrong offset!");

// Function Squad.SQPhysicalMaterial.GetShockwave
// 0x00A8 (0x00A8 - 0x0000)
struct SQPhysicalMaterial_GetShockwave final
{
public:
	struct FSQProjectileImpactEffect              InImpactEffect;                                    // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class USQShockwave*                           DefaultShockwave;                                  // 0x0098(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQShockwave*                           ReturnValue;                                       // 0x00A0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPhysicalMaterial_GetShockwave) == 0x000008, "Wrong alignment on SQPhysicalMaterial_GetShockwave");
static_assert(sizeof(SQPhysicalMaterial_GetShockwave) == 0x0000A8, "Wrong size on SQPhysicalMaterial_GetShockwave");
static_assert(offsetof(SQPhysicalMaterial_GetShockwave, InImpactEffect) == 0x000000, "Member 'SQPhysicalMaterial_GetShockwave::InImpactEffect' has a wrong offset!");
static_assert(offsetof(SQPhysicalMaterial_GetShockwave, DefaultShockwave) == 0x000098, "Member 'SQPhysicalMaterial_GetShockwave::DefaultShockwave' has a wrong offset!");
static_assert(offsetof(SQPhysicalMaterial_GetShockwave, ReturnValue) == 0x0000A0, "Member 'SQPhysicalMaterial_GetShockwave::ReturnValue' has a wrong offset!");

// Function Squad.SQPhysicalMaterialRedirectors.GetRedirector
// 0x0010 (0x0010 - 0x0000)
struct SQPhysicalMaterialRedirectors_GetRedirector final
{
public:
	const class USQPhysicalMaterial*              Key;                                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQPhysicalMaterial*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPhysicalMaterialRedirectors_GetRedirector) == 0x000008, "Wrong alignment on SQPhysicalMaterialRedirectors_GetRedirector");
static_assert(sizeof(SQPhysicalMaterialRedirectors_GetRedirector) == 0x000010, "Wrong size on SQPhysicalMaterialRedirectors_GetRedirector");
static_assert(offsetof(SQPhysicalMaterialRedirectors_GetRedirector, Key) == 0x000000, "Member 'SQPhysicalMaterialRedirectors_GetRedirector::Key' has a wrong offset!");
static_assert(offsetof(SQPhysicalMaterialRedirectors_GetRedirector, ReturnValue) == 0x000008, "Member 'SQPhysicalMaterialRedirectors_GetRedirector::ReturnValue' has a wrong offset!");

// Function Squad.SQPhysicalMaterialEffects.GetBlastEffect
// 0x00A0 (0x00A0 - 0x0000)
struct SQPhysicalMaterialEffects_GetBlastEffect final
{
public:
	class USQPhysicalMaterial*                    Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQProjectileImpactEffect              ReturnValue;                                       // 0x0008(0x0098)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPhysicalMaterialEffects_GetBlastEffect) == 0x000008, "Wrong alignment on SQPhysicalMaterialEffects_GetBlastEffect");
static_assert(sizeof(SQPhysicalMaterialEffects_GetBlastEffect) == 0x0000A0, "Wrong size on SQPhysicalMaterialEffects_GetBlastEffect");
static_assert(offsetof(SQPhysicalMaterialEffects_GetBlastEffect, Material) == 0x000000, "Member 'SQPhysicalMaterialEffects_GetBlastEffect::Material' has a wrong offset!");
static_assert(offsetof(SQPhysicalMaterialEffects_GetBlastEffect, ReturnValue) == 0x000008, "Member 'SQPhysicalMaterialEffects_GetBlastEffect::ReturnValue' has a wrong offset!");

// Function Squad.SQPhysicalMaterialEffects.GetEffect
// 0x0168 (0x0168 - 0x0000)
struct SQPhysicalMaterialEffects_GetEffect final
{
public:
	class USQPhysicalMaterial*                    Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQEffectsSet                          ReturnValue;                                       // 0x0008(0x0160)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPhysicalMaterialEffects_GetEffect) == 0x000008, "Wrong alignment on SQPhysicalMaterialEffects_GetEffect");
static_assert(sizeof(SQPhysicalMaterialEffects_GetEffect) == 0x000168, "Wrong size on SQPhysicalMaterialEffects_GetEffect");
static_assert(offsetof(SQPhysicalMaterialEffects_GetEffect, Material) == 0x000000, "Member 'SQPhysicalMaterialEffects_GetEffect::Material' has a wrong offset!");
static_assert(offsetof(SQPhysicalMaterialEffects_GetEffect, ReturnValue) == 0x000008, "Member 'SQPhysicalMaterialEffects_GetEffect::ReturnValue' has a wrong offset!");

// Function Squad.SQPhysicalMaterialEffects.GetExplosionEffect
// 0x00C8 (0x00C8 - 0x0000)
struct SQPhysicalMaterialEffects_GetExplosionEffect final
{
public:
	class USQPhysicalMaterial*                    Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQExplosionEffect                     ReturnValue;                                       // 0x0008(0x00C0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPhysicalMaterialEffects_GetExplosionEffect) == 0x000008, "Wrong alignment on SQPhysicalMaterialEffects_GetExplosionEffect");
static_assert(sizeof(SQPhysicalMaterialEffects_GetExplosionEffect) == 0x0000C8, "Wrong size on SQPhysicalMaterialEffects_GetExplosionEffect");
static_assert(offsetof(SQPhysicalMaterialEffects_GetExplosionEffect, Material) == 0x000000, "Member 'SQPhysicalMaterialEffects_GetExplosionEffect::Material' has a wrong offset!");
static_assert(offsetof(SQPhysicalMaterialEffects_GetExplosionEffect, ReturnValue) == 0x000008, "Member 'SQPhysicalMaterialEffects_GetExplosionEffect::ReturnValue' has a wrong offset!");

// Function Squad.SQPhysicalMaterialEffects.GetImpactEffect
// 0x00A0 (0x00A0 - 0x0000)
struct SQPhysicalMaterialEffects_GetImpactEffect final
{
public:
	class USQPhysicalMaterial*                    Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQProjectileImpactEffect              ReturnValue;                                       // 0x0008(0x0098)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPhysicalMaterialEffects_GetImpactEffect) == 0x000008, "Wrong alignment on SQPhysicalMaterialEffects_GetImpactEffect");
static_assert(sizeof(SQPhysicalMaterialEffects_GetImpactEffect) == 0x0000A0, "Wrong size on SQPhysicalMaterialEffects_GetImpactEffect");
static_assert(offsetof(SQPhysicalMaterialEffects_GetImpactEffect, Material) == 0x000000, "Member 'SQPhysicalMaterialEffects_GetImpactEffect::Material' has a wrong offset!");
static_assert(offsetof(SQPhysicalMaterialEffects_GetImpactEffect, ReturnValue) == 0x000008, "Member 'SQPhysicalMaterialEffects_GetImpactEffect::ReturnValue' has a wrong offset!");

// Function Squad.SQPhysicalMaterialEffects.GetThrowableEffect
// 0x00A0 (0x00A0 - 0x0000)
struct SQPhysicalMaterialEffects_GetThrowableEffect final
{
public:
	class USQPhysicalMaterial*                    Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQProjectileImpactEffect              ReturnValue;                                       // 0x0008(0x0098)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPhysicalMaterialEffects_GetThrowableEffect) == 0x000008, "Wrong alignment on SQPhysicalMaterialEffects_GetThrowableEffect");
static_assert(sizeof(SQPhysicalMaterialEffects_GetThrowableEffect) == 0x0000A0, "Wrong size on SQPhysicalMaterialEffects_GetThrowableEffect");
static_assert(offsetof(SQPhysicalMaterialEffects_GetThrowableEffect, Material) == 0x000000, "Member 'SQPhysicalMaterialEffects_GetThrowableEffect::Material' has a wrong offset!");
static_assert(offsetof(SQPhysicalMaterialEffects_GetThrowableEffect, ReturnValue) == 0x000008, "Member 'SQPhysicalMaterialEffects_GetThrowableEffect::ReturnValue' has a wrong offset!");

// Function Squad.SQPhysicalMaterialVehiclesEffects.GetEffect
// 0x00A8 (0x00A8 - 0x0000)
struct SQPhysicalMaterialVehiclesEffects_GetEffect final
{
public:
	const class USQPhysicalMaterial*              Material;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQVehicleEffect                       ReturnValue;                                       // 0x0008(0x00A0)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPhysicalMaterialVehiclesEffects_GetEffect) == 0x000008, "Wrong alignment on SQPhysicalMaterialVehiclesEffects_GetEffect");
static_assert(sizeof(SQPhysicalMaterialVehiclesEffects_GetEffect) == 0x0000A8, "Wrong size on SQPhysicalMaterialVehiclesEffects_GetEffect");
static_assert(offsetof(SQPhysicalMaterialVehiclesEffects_GetEffect, Material) == 0x000000, "Member 'SQPhysicalMaterialVehiclesEffects_GetEffect::Material' has a wrong offset!");
static_assert(offsetof(SQPhysicalMaterialVehiclesEffects_GetEffect, ReturnValue) == 0x000008, "Member 'SQPhysicalMaterialVehiclesEffects_GetEffect::ReturnValue' has a wrong offset!");

// Function Squad.SQPhysicalMaterialSoldiersEffects.GetEffect
// 0x0050 (0x0050 - 0x0000)
struct SQPhysicalMaterialSoldiersEffects_GetEffect final
{
public:
	const class USQPhysicalMaterial*              Material;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQSoldierEffect                       ReturnValue;                                       // 0x0008(0x0048)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPhysicalMaterialSoldiersEffects_GetEffect) == 0x000008, "Wrong alignment on SQPhysicalMaterialSoldiersEffects_GetEffect");
static_assert(sizeof(SQPhysicalMaterialSoldiersEffects_GetEffect) == 0x000050, "Wrong size on SQPhysicalMaterialSoldiersEffects_GetEffect");
static_assert(offsetof(SQPhysicalMaterialSoldiersEffects_GetEffect, Material) == 0x000000, "Member 'SQPhysicalMaterialSoldiersEffects_GetEffect::Material' has a wrong offset!");
static_assert(offsetof(SQPhysicalMaterialSoldiersEffects_GetEffect, ReturnValue) == 0x000008, "Member 'SQPhysicalMaterialSoldiersEffects_GetEffect::ReturnValue' has a wrong offset!");

// Function Squad.SQPhysicsVolume.BPActorEnteredVolume
// 0x0008 (0x0008 - 0x0000)
struct SQPhysicsVolume_BPActorEnteredVolume final
{
public:
	class AActor*                                 Other;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPhysicsVolume_BPActorEnteredVolume) == 0x000008, "Wrong alignment on SQPhysicsVolume_BPActorEnteredVolume");
static_assert(sizeof(SQPhysicsVolume_BPActorEnteredVolume) == 0x000008, "Wrong size on SQPhysicsVolume_BPActorEnteredVolume");
static_assert(offsetof(SQPhysicsVolume_BPActorEnteredVolume, Other) == 0x000000, "Member 'SQPhysicsVolume_BPActorEnteredVolume::Other' has a wrong offset!");

// Function Squad.SQPhysicsVolume.BPActorLeavingVolume
// 0x0008 (0x0008 - 0x0000)
struct SQPhysicsVolume_BPActorLeavingVolume final
{
public:
	class AActor*                                 Other;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPhysicsVolume_BPActorLeavingVolume) == 0x000008, "Wrong alignment on SQPhysicsVolume_BPActorLeavingVolume");
static_assert(sizeof(SQPhysicsVolume_BPActorLeavingVolume) == 0x000008, "Wrong size on SQPhysicsVolume_BPActorLeavingVolume");
static_assert(offsetof(SQPhysicsVolume_BPActorLeavingVolume, Other) == 0x000000, "Member 'SQPhysicsVolume_BPActorLeavingVolume::Other' has a wrong offset!");

// Function Squad.SQSpawnableItemBase.Sort
// 0x0010 (0x0010 - 0x0000)
struct SQSpawnableItemBase_Sort final
{
public:
	TArray<class USQSpawnableItemBase*>           ItemArray;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSpawnableItemBase_Sort) == 0x000008, "Wrong alignment on SQSpawnableItemBase_Sort");
static_assert(sizeof(SQSpawnableItemBase_Sort) == 0x000010, "Wrong size on SQSpawnableItemBase_Sort");
static_assert(offsetof(SQSpawnableItemBase_Sort, ItemArray) == 0x000000, "Member 'SQSpawnableItemBase_Sort::ItemArray' has a wrong offset!");

// Function Squad.SQSpawnableItemBase.GetSearchableName
// 0x0010 (0x0010 - 0x0000)
struct SQSpawnableItemBase_GetSearchableName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSpawnableItemBase_GetSearchableName) == 0x000008, "Wrong alignment on SQSpawnableItemBase_GetSearchableName");
static_assert(sizeof(SQSpawnableItemBase_GetSearchableName) == 0x000010, "Wrong size on SQSpawnableItemBase_GetSearchableName");
static_assert(offsetof(SQSpawnableItemBase_GetSearchableName, ReturnValue) == 0x000000, "Member 'SQSpawnableItemBase_GetSearchableName::ReturnValue' has a wrong offset!");

// Function Squad.SQLocalCameraEffectHandler.BP_ApplyCameraEffect
// 0x0010 (0x0010 - 0x0000)
struct SQLocalCameraEffectHandler_BP_ApplyCameraEffect final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12E5[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQSoldier*                             SoldierToApplyTo;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQLocalCameraEffectHandler_BP_ApplyCameraEffect) == 0x000008, "Wrong alignment on SQLocalCameraEffectHandler_BP_ApplyCameraEffect");
static_assert(sizeof(SQLocalCameraEffectHandler_BP_ApplyCameraEffect) == 0x000010, "Wrong size on SQLocalCameraEffectHandler_BP_ApplyCameraEffect");
static_assert(offsetof(SQLocalCameraEffectHandler_BP_ApplyCameraEffect, DeltaTime) == 0x000000, "Member 'SQLocalCameraEffectHandler_BP_ApplyCameraEffect::DeltaTime' has a wrong offset!");
static_assert(offsetof(SQLocalCameraEffectHandler_BP_ApplyCameraEffect, SoldierToApplyTo) == 0x000008, "Member 'SQLocalCameraEffectHandler_BP_ApplyCameraEffect::SoldierToApplyTo' has a wrong offset!");

// Function Squad.SQLocalCameraEffectHandler.BP_InitCameraEffect
// 0x0008 (0x0008 - 0x0000)
struct SQLocalCameraEffectHandler_BP_InitCameraEffect final
{
public:
	class ASQPlayerController*                    InPlayerController;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQLocalCameraEffectHandler_BP_InitCameraEffect) == 0x000008, "Wrong alignment on SQLocalCameraEffectHandler_BP_InitCameraEffect");
static_assert(sizeof(SQLocalCameraEffectHandler_BP_InitCameraEffect) == 0x000008, "Wrong size on SQLocalCameraEffectHandler_BP_InitCameraEffect");
static_assert(offsetof(SQLocalCameraEffectHandler_BP_InitCameraEffect, InPlayerController) == 0x000000, "Member 'SQLocalCameraEffectHandler_BP_InitCameraEffect::InPlayerController' has a wrong offset!");

// Function Squad.SQLocalCameraEffectHandler.BP_SoldierChanged
// 0x0008 (0x0008 - 0x0000)
struct SQLocalCameraEffectHandler_BP_SoldierChanged final
{
public:
	class ASQSoldier*                             NewSoldier;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQLocalCameraEffectHandler_BP_SoldierChanged) == 0x000008, "Wrong alignment on SQLocalCameraEffectHandler_BP_SoldierChanged");
static_assert(sizeof(SQLocalCameraEffectHandler_BP_SoldierChanged) == 0x000008, "Wrong size on SQLocalCameraEffectHandler_BP_SoldierChanged");
static_assert(offsetof(SQLocalCameraEffectHandler_BP_SoldierChanged, NewSoldier) == 0x000000, "Member 'SQLocalCameraEffectHandler_BP_SoldierChanged::NewSoldier' has a wrong offset!");

// Function Squad.SQLocalAudioPlayer.BP_InitAudioEffect
// 0x0008 (0x0008 - 0x0000)
struct SQLocalAudioPlayer_BP_InitAudioEffect final
{
public:
	class UAudioComponent*                        AudioComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQLocalAudioPlayer_BP_InitAudioEffect) == 0x000008, "Wrong alignment on SQLocalAudioPlayer_BP_InitAudioEffect");
static_assert(sizeof(SQLocalAudioPlayer_BP_InitAudioEffect) == 0x000008, "Wrong size on SQLocalAudioPlayer_BP_InitAudioEffect");
static_assert(offsetof(SQLocalAudioPlayer_BP_InitAudioEffect, AudioComponent) == 0x000000, "Member 'SQLocalAudioPlayer_BP_InitAudioEffect::AudioComponent' has a wrong offset!");

// Function Squad.SQLocalAudioPlayer.BP_UpdateAudioComponent
// 0x0018 (0x0018 - 0x0000)
struct SQLocalAudioPlayer_BP_UpdateAudioComponent final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12E6[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        AudioComponent;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQSoldier*                             SoldierToApplyTo;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQLocalAudioPlayer_BP_UpdateAudioComponent) == 0x000008, "Wrong alignment on SQLocalAudioPlayer_BP_UpdateAudioComponent");
static_assert(sizeof(SQLocalAudioPlayer_BP_UpdateAudioComponent) == 0x000018, "Wrong size on SQLocalAudioPlayer_BP_UpdateAudioComponent");
static_assert(offsetof(SQLocalAudioPlayer_BP_UpdateAudioComponent, DeltaTime) == 0x000000, "Member 'SQLocalAudioPlayer_BP_UpdateAudioComponent::DeltaTime' has a wrong offset!");
static_assert(offsetof(SQLocalAudioPlayer_BP_UpdateAudioComponent, AudioComponent) == 0x000008, "Member 'SQLocalAudioPlayer_BP_UpdateAudioComponent::AudioComponent' has a wrong offset!");
static_assert(offsetof(SQLocalAudioPlayer_BP_UpdateAudioComponent, SoldierToApplyTo) == 0x000010, "Member 'SQLocalAudioPlayer_BP_UpdateAudioComponent::SoldierToApplyTo' has a wrong offset!");

// Function Squad.SQPlayerState.AddPlacedDeployableItem
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerState_AddPlacedDeployableItem final
{
public:
	class ASQDeployable*                          Deployable;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_AddPlacedDeployableItem) == 0x000008, "Wrong alignment on SQPlayerState_AddPlacedDeployableItem");
static_assert(sizeof(SQPlayerState_AddPlacedDeployableItem) == 0x000008, "Wrong size on SQPlayerState_AddPlacedDeployableItem");
static_assert(offsetof(SQPlayerState_AddPlacedDeployableItem, Deployable) == 0x000000, "Member 'SQPlayerState_AddPlacedDeployableItem::Deployable' has a wrong offset!");

// Function Squad.SQPlayerState.BlueprintSetPlayerName
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerState_BlueprintSetPlayerName final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_BlueprintSetPlayerName) == 0x000008, "Wrong alignment on SQPlayerState_BlueprintSetPlayerName");
static_assert(sizeof(SQPlayerState_BlueprintSetPlayerName) == 0x000010, "Wrong size on SQPlayerState_BlueprintSetPlayerName");
static_assert(offsetof(SQPlayerState_BlueprintSetPlayerName, Param_Name) == 0x000000, "Member 'SQPlayerState_BlueprintSetPlayerName::Param_Name' has a wrong offset!");

// Function Squad.SQPlayerState.BPOnRep_PlayerNamePrefix
// 0x0020 (0x0020 - 0x0000)
struct SQPlayerState_BPOnRep_PlayerNamePrefix final
{
public:
	class FString                                 OldPlayerNamePrefix;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewPlayerNamePrefix;                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_BPOnRep_PlayerNamePrefix) == 0x000008, "Wrong alignment on SQPlayerState_BPOnRep_PlayerNamePrefix");
static_assert(sizeof(SQPlayerState_BPOnRep_PlayerNamePrefix) == 0x000020, "Wrong size on SQPlayerState_BPOnRep_PlayerNamePrefix");
static_assert(offsetof(SQPlayerState_BPOnRep_PlayerNamePrefix, OldPlayerNamePrefix) == 0x000000, "Member 'SQPlayerState_BPOnRep_PlayerNamePrefix::OldPlayerNamePrefix' has a wrong offset!");
static_assert(offsetof(SQPlayerState_BPOnRep_PlayerNamePrefix, NewPlayerNamePrefix) == 0x000010, "Member 'SQPlayerState_BPOnRep_PlayerNamePrefix::NewPlayerNamePrefix' has a wrong offset!");

// Function Squad.SQPlayerState.GetPlayerOnlineID
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerState_GetPlayerOnlineID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetPlayerOnlineID) == 0x000008, "Wrong alignment on SQPlayerState_GetPlayerOnlineID");
static_assert(sizeof(SQPlayerState_GetPlayerOnlineID) == 0x000010, "Wrong size on SQPlayerState_GetPlayerOnlineID");
static_assert(offsetof(SQPlayerState_GetPlayerOnlineID, ReturnValue) == 0x000000, "Member 'SQPlayerState_GetPlayerOnlineID::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.MulticastOnImpact
// 0x00A0 (0x00A0 - 0x0000)
struct SQPlayerState_MulticastOnImpact final
{
public:
	uint64                                        ProjectileId;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0014(0x0088)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_12EF[0x4];                                     // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPlayerState_MulticastOnImpact) == 0x000008, "Wrong alignment on SQPlayerState_MulticastOnImpact");
static_assert(sizeof(SQPlayerState_MulticastOnImpact) == 0x0000A0, "Wrong size on SQPlayerState_MulticastOnImpact");
static_assert(offsetof(SQPlayerState_MulticastOnImpact, ProjectileId) == 0x000000, "Member 'SQPlayerState_MulticastOnImpact::ProjectileId' has a wrong offset!");
static_assert(offsetof(SQPlayerState_MulticastOnImpact, NormalImpulse) == 0x000008, "Member 'SQPlayerState_MulticastOnImpact::NormalImpulse' has a wrong offset!");
static_assert(offsetof(SQPlayerState_MulticastOnImpact, Hit) == 0x000014, "Member 'SQPlayerState_MulticastOnImpact::Hit' has a wrong offset!");

// Function Squad.SQPlayerState.OnClientGetItemCacheSuccess
// 0x0020 (0x0020 - 0x0000)
struct SQPlayerState_OnClientGetItemCacheSuccess final
{
public:
	struct FODKBazaarCacheCompletedData           Results;                                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_OnClientGetItemCacheSuccess) == 0x000008, "Wrong alignment on SQPlayerState_OnClientGetItemCacheSuccess");
static_assert(sizeof(SQPlayerState_OnClientGetItemCacheSuccess) == 0x000020, "Wrong size on SQPlayerState_OnClientGetItemCacheSuccess");
static_assert(offsetof(SQPlayerState_OnClientGetItemCacheSuccess, Results) == 0x000000, "Member 'SQPlayerState_OnClientGetItemCacheSuccess::Results' has a wrong offset!");

// Function Squad.SQPlayerState.OnRep_CurrentSeat
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerState_OnRep_CurrentSeat final
{
public:
	class USQVehicleSeatComponent*                LastSeat;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_OnRep_CurrentSeat) == 0x000008, "Wrong alignment on SQPlayerState_OnRep_CurrentSeat");
static_assert(sizeof(SQPlayerState_OnRep_CurrentSeat) == 0x000008, "Wrong size on SQPlayerState_OnRep_CurrentSeat");
static_assert(offsetof(SQPlayerState_OnRep_CurrentSeat, LastSeat) == 0x000000, "Member 'SQPlayerState_OnRep_CurrentSeat::LastSeat' has a wrong offset!");

// Function Squad.SQPlayerState.OnRep_PlayerNamePrefix
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerState_OnRep_PlayerNamePrefix final
{
public:
	class FString                                 OldPlayerNamePrefix;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_OnRep_PlayerNamePrefix) == 0x000008, "Wrong alignment on SQPlayerState_OnRep_PlayerNamePrefix");
static_assert(sizeof(SQPlayerState_OnRep_PlayerNamePrefix) == 0x000010, "Wrong size on SQPlayerState_OnRep_PlayerNamePrefix");
static_assert(offsetof(SQPlayerState_OnRep_PlayerNamePrefix, OldPlayerNamePrefix) == 0x000000, "Member 'SQPlayerState_OnRep_PlayerNamePrefix::OldPlayerNamePrefix' has a wrong offset!");

// Function Squad.SQPlayerState.OnRep_SquadState
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerState_OnRep_SquadState final
{
public:
	class ASQSquadState*                          OldSquadState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_OnRep_SquadState) == 0x000008, "Wrong alignment on SQPlayerState_OnRep_SquadState");
static_assert(sizeof(SQPlayerState_OnRep_SquadState) == 0x000008, "Wrong size on SQPlayerState_OnRep_SquadState");
static_assert(offsetof(SQPlayerState_OnRep_SquadState, OldSquadState) == 0x000000, "Member 'SQPlayerState_OnRep_SquadState::OldSquadState' has a wrong offset!");

// Function Squad.SQPlayerState.OnRep_TeamState
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerState_OnRep_TeamState final
{
public:
	class ASQTeamState*                           OldTeamState;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_OnRep_TeamState) == 0x000008, "Wrong alignment on SQPlayerState_OnRep_TeamState");
static_assert(sizeof(SQPlayerState_OnRep_TeamState) == 0x000008, "Wrong size on SQPlayerState_OnRep_TeamState");
static_assert(offsetof(SQPlayerState_OnRep_TeamState, OldTeamState) == 0x000000, "Member 'SQPlayerState_OnRep_TeamState::OldTeamState' has a wrong offset!");

// Function Squad.SQPlayerState.OnServerGetItemCacheSuccess
// 0x0020 (0x0020 - 0x0000)
struct SQPlayerState_OnServerGetItemCacheSuccess final
{
public:
	struct FODKBazaarCacheCompletedData           Results;                                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_OnServerGetItemCacheSuccess) == 0x000008, "Wrong alignment on SQPlayerState_OnServerGetItemCacheSuccess");
static_assert(sizeof(SQPlayerState_OnServerGetItemCacheSuccess) == 0x000020, "Wrong size on SQPlayerState_OnServerGetItemCacheSuccess");
static_assert(offsetof(SQPlayerState_OnServerGetItemCacheSuccess, Results) == 0x000000, "Member 'SQPlayerState_OnServerGetItemCacheSuccess::Results' has a wrong offset!");

// Function Squad.SQPlayerState.RemovedPlacedDeployableItemAt
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerState_RemovedPlacedDeployableItemAt final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12F0[0x3];                                     // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPlayerState_RemovedPlacedDeployableItemAt) == 0x000004, "Wrong alignment on SQPlayerState_RemovedPlacedDeployableItemAt");
static_assert(sizeof(SQPlayerState_RemovedPlacedDeployableItemAt) == 0x000008, "Wrong size on SQPlayerState_RemovedPlacedDeployableItemAt");
static_assert(offsetof(SQPlayerState_RemovedPlacedDeployableItemAt, Param_Index) == 0x000000, "Member 'SQPlayerState_RemovedPlacedDeployableItemAt::Param_Index' has a wrong offset!");
static_assert(offsetof(SQPlayerState_RemovedPlacedDeployableItemAt, ReturnValue) == 0x000004, "Member 'SQPlayerState_RemovedPlacedDeployableItemAt::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.ScorePoints
// 0x0020 (0x0020 - 0x0000)
struct SQPlayerState_ScorePoints final
{
public:
	int32                                         Points;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12F1[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Reason;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ScoreGroup;                                        // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_ScorePoints) == 0x000008, "Wrong alignment on SQPlayerState_ScorePoints");
static_assert(sizeof(SQPlayerState_ScorePoints) == 0x000020, "Wrong size on SQPlayerState_ScorePoints");
static_assert(offsetof(SQPlayerState_ScorePoints, Points) == 0x000000, "Member 'SQPlayerState_ScorePoints::Points' has a wrong offset!");
static_assert(offsetof(SQPlayerState_ScorePoints, Reason) == 0x000008, "Member 'SQPlayerState_ScorePoints::Reason' has a wrong offset!");
static_assert(offsetof(SQPlayerState_ScorePoints, ScoreGroup) == 0x000018, "Member 'SQPlayerState_ScorePoints::ScoreGroup' has a wrong offset!");

// Function Squad.SQPlayerState.ScorePointsDelayed
// 0x0020 (0x0020 - 0x0000)
struct SQPlayerState_ScorePointsDelayed final
{
public:
	int32                                         Points;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12F2[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Reason;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ScoreGroup;                                        // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_ScorePointsDelayed) == 0x000008, "Wrong alignment on SQPlayerState_ScorePointsDelayed");
static_assert(sizeof(SQPlayerState_ScorePointsDelayed) == 0x000020, "Wrong size on SQPlayerState_ScorePointsDelayed");
static_assert(offsetof(SQPlayerState_ScorePointsDelayed, Points) == 0x000000, "Member 'SQPlayerState_ScorePointsDelayed::Points' has a wrong offset!");
static_assert(offsetof(SQPlayerState_ScorePointsDelayed, Reason) == 0x000008, "Member 'SQPlayerState_ScorePointsDelayed::Reason' has a wrong offset!");
static_assert(offsetof(SQPlayerState_ScorePointsDelayed, ScoreGroup) == 0x000018, "Member 'SQPlayerState_ScorePointsDelayed::ScoreGroup' has a wrong offset!");

// Function Squad.SQPlayerState.SendEquippedSkinsToServer
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerState_SendEquippedSkinsToServer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_SendEquippedSkinsToServer) == 0x000001, "Wrong alignment on SQPlayerState_SendEquippedSkinsToServer");
static_assert(sizeof(SQPlayerState_SendEquippedSkinsToServer) == 0x000001, "Wrong size on SQPlayerState_SendEquippedSkinsToServer");
static_assert(offsetof(SQPlayerState_SendEquippedSkinsToServer, ReturnValue) == 0x000000, "Member 'SQPlayerState_SendEquippedSkinsToServer::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.ServerGetSkinItemsCacheSuccess
// 0x0020 (0x0020 - 0x0000)
struct SQPlayerState_ServerGetSkinItemsCacheSuccess final
{
public:
	struct FODKBazaarCacheCompletedData           Results;                                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_ServerGetSkinItemsCacheSuccess) == 0x000008, "Wrong alignment on SQPlayerState_ServerGetSkinItemsCacheSuccess");
static_assert(sizeof(SQPlayerState_ServerGetSkinItemsCacheSuccess) == 0x000020, "Wrong size on SQPlayerState_ServerGetSkinItemsCacheSuccess");
static_assert(offsetof(SQPlayerState_ServerGetSkinItemsCacheSuccess, Results) == 0x000000, "Member 'SQPlayerState_ServerGetSkinItemsCacheSuccess::Results' has a wrong offset!");

// Function Squad.SQPlayerState.ServerOnImpact
// 0x00A0 (0x00A0 - 0x0000)
struct SQPlayerState_ServerOnImpact final
{
public:
	uint64                                        ProjectileId;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0014(0x0088)(ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_12F3[0x4];                                     // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQPlayerState_ServerOnImpact) == 0x000008, "Wrong alignment on SQPlayerState_ServerOnImpact");
static_assert(sizeof(SQPlayerState_ServerOnImpact) == 0x0000A0, "Wrong size on SQPlayerState_ServerOnImpact");
static_assert(offsetof(SQPlayerState_ServerOnImpact, ProjectileId) == 0x000000, "Member 'SQPlayerState_ServerOnImpact::ProjectileId' has a wrong offset!");
static_assert(offsetof(SQPlayerState_ServerOnImpact, NormalImpulse) == 0x000008, "Member 'SQPlayerState_ServerOnImpact::NormalImpulse' has a wrong offset!");
static_assert(offsetof(SQPlayerState_ServerOnImpact, Hit) == 0x000014, "Member 'SQPlayerState_ServerOnImpact::Hit' has a wrong offset!");

// Function Squad.SQPlayerState.ServerRequestTeamChange
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerState_ServerRequestTeamChange final
{
public:
	int32                                         NewTeam;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_ServerRequestTeamChange) == 0x000004, "Wrong alignment on SQPlayerState_ServerRequestTeamChange");
static_assert(sizeof(SQPlayerState_ServerRequestTeamChange) == 0x000004, "Wrong size on SQPlayerState_ServerRequestTeamChange");
static_assert(offsetof(SQPlayerState_ServerRequestTeamChange, NewTeam) == 0x000000, "Member 'SQPlayerState_ServerRequestTeamChange::NewTeam' has a wrong offset!");

// Function Squad.SQPlayerState.ServerSendEquippedSkins
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerState_ServerSendEquippedSkins final
{
public:
	TArray<class FName>                           ClientEquippedItems;                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_ServerSendEquippedSkins) == 0x000008, "Wrong alignment on SQPlayerState_ServerSendEquippedSkins");
static_assert(sizeof(SQPlayerState_ServerSendEquippedSkins) == 0x000010, "Wrong size on SQPlayerState_ServerSendEquippedSkins");
static_assert(offsetof(SQPlayerState_ServerSendEquippedSkins, ClientEquippedItems) == 0x000000, "Member 'SQPlayerState_ServerSendEquippedSkins::ClientEquippedItems' has a wrong offset!");

// Function Squad.SQPlayerState.ServerSendInventoryItems
// 0x0020 (0x0020 - 0x0000)
struct SQPlayerState_ServerSendInventoryItems final
{
public:
	TArray<class FName>                           Items;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FName>                           ActiveClanMemberItems;                             // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_ServerSendInventoryItems) == 0x000008, "Wrong alignment on SQPlayerState_ServerSendInventoryItems");
static_assert(sizeof(SQPlayerState_ServerSendInventoryItems) == 0x000020, "Wrong size on SQPlayerState_ServerSendInventoryItems");
static_assert(offsetof(SQPlayerState_ServerSendInventoryItems, Items) == 0x000000, "Member 'SQPlayerState_ServerSendInventoryItems::Items' has a wrong offset!");
static_assert(offsetof(SQPlayerState_ServerSendInventoryItems, ActiveClanMemberItems) == 0x000010, "Member 'SQPlayerState_ServerSendInventoryItems::ActiveClanMemberItems' has a wrong offset!");

// Function Squad.SQPlayerState.ServerSetPlayerNamePrefix
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerState_ServerSetPlayerNamePrefix final
{
public:
	class FString                                 NewPlayerNamePrefix;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_ServerSetPlayerNamePrefix) == 0x000008, "Wrong alignment on SQPlayerState_ServerSetPlayerNamePrefix");
static_assert(sizeof(SQPlayerState_ServerSetPlayerNamePrefix) == 0x000010, "Wrong size on SQPlayerState_ServerSetPlayerNamePrefix");
static_assert(offsetof(SQPlayerState_ServerSetPlayerNamePrefix, NewPlayerNamePrefix) == 0x000000, "Member 'SQPlayerState_ServerSetPlayerNamePrefix::NewPlayerNamePrefix' has a wrong offset!");

// Function Squad.SQPlayerState.SetClanPatch
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerState_SetClanPatch final
{
public:
	class UTexture*                               InClanPatch;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_SetClanPatch) == 0x000008, "Wrong alignment on SQPlayerState_SetClanPatch");
static_assert(sizeof(SQPlayerState_SetClanPatch) == 0x000008, "Wrong size on SQPlayerState_SetClanPatch");
static_assert(offsetof(SQPlayerState_SetClanPatch, InClanPatch) == 0x000000, "Member 'SQPlayerState_SetClanPatch::InClanPatch' has a wrong offset!");

// Function Squad.SQPlayerState.SetCurrentPawn
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerState_SetCurrentPawn final
{
public:
	class APawn*                                  InPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_SetCurrentPawn) == 0x000008, "Wrong alignment on SQPlayerState_SetCurrentPawn");
static_assert(sizeof(SQPlayerState_SetCurrentPawn) == 0x000008, "Wrong size on SQPlayerState_SetCurrentPawn");
static_assert(offsetof(SQPlayerState_SetCurrentPawn, InPawn) == 0x000000, "Member 'SQPlayerState_SetCurrentPawn::InPawn' has a wrong offset!");

// Function Squad.SQPlayerState.SetCurrentRole
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerState_SetCurrentRole final
{
public:
	class USQRoleSettings*                        InCurrentRole;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_SetCurrentRole) == 0x000008, "Wrong alignment on SQPlayerState_SetCurrentRole");
static_assert(sizeof(SQPlayerState_SetCurrentRole) == 0x000008, "Wrong size on SQPlayerState_SetCurrentRole");
static_assert(offsetof(SQPlayerState_SetCurrentRole, InCurrentRole) == 0x000000, "Member 'SQPlayerState_SetCurrentRole::InCurrentRole' has a wrong offset!");

// Function Squad.SQPlayerState.SetCurrentSeat
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerState_SetCurrentSeat final
{
public:
	class USQVehicleSeatComponent*                InCurrentSeat;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_SetCurrentSeat) == 0x000008, "Wrong alignment on SQPlayerState_SetCurrentSeat");
static_assert(sizeof(SQPlayerState_SetCurrentSeat) == 0x000008, "Wrong size on SQPlayerState_SetCurrentSeat");
static_assert(offsetof(SQPlayerState_SetCurrentSeat, InCurrentSeat) == 0x000000, "Member 'SQPlayerState_SetCurrentSeat::InCurrentSeat' has a wrong offset!");

// Function Squad.SQPlayerState.SetDeployRole
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerState_SetDeployRole final
{
public:
	class USQRoleSettings*                        InDeployRole;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_SetDeployRole) == 0x000008, "Wrong alignment on SQPlayerState_SetDeployRole");
static_assert(sizeof(SQPlayerState_SetDeployRole) == 0x000008, "Wrong size on SQPlayerState_SetDeployRole");
static_assert(offsetof(SQPlayerState_SetDeployRole, InDeployRole) == 0x000000, "Member 'SQPlayerState_SetDeployRole::InDeployRole' has a wrong offset!");

// Function Squad.SQPlayerState.SetHealPoints
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerState_SetHealPoints final
{
public:
	float                                         InHealPoints;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_SetHealPoints) == 0x000004, "Wrong alignment on SQPlayerState_SetHealPoints");
static_assert(sizeof(SQPlayerState_SetHealPoints) == 0x000004, "Wrong size on SQPlayerState_SetHealPoints");
static_assert(offsetof(SQPlayerState_SetHealPoints, InHealPoints) == 0x000000, "Member 'SQPlayerState_SetHealPoints::InHealPoints' has a wrong offset!");

// Function Squad.SQPlayerState.SetIsAdmin
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerState_SetIsAdmin final
{
public:
	bool                                          bInIsAdmin;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_SetIsAdmin) == 0x000001, "Wrong alignment on SQPlayerState_SetIsAdmin");
static_assert(sizeof(SQPlayerState_SetIsAdmin) == 0x000001, "Wrong size on SQPlayerState_SetIsAdmin");
static_assert(offsetof(SQPlayerState_SetIsAdmin, bInIsAdmin) == 0x000000, "Member 'SQPlayerState_SetIsAdmin::bInIsAdmin' has a wrong offset!");

// Function Squad.SQPlayerState.SetIsDev
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerState_SetIsDev final
{
public:
	bool                                          bInIsDev;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_SetIsDev) == 0x000001, "Wrong alignment on SQPlayerState_SetIsDev");
static_assert(sizeof(SQPlayerState_SetIsDev) == 0x000001, "Wrong size on SQPlayerState_SetIsDev");
static_assert(offsetof(SQPlayerState_SetIsDev, bInIsDev) == 0x000000, "Member 'SQPlayerState_SetIsDev::bInIsDev' has a wrong offset!");

// Function Squad.SQPlayerState.SetIsMember
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerState_SetIsMember final
{
public:
	bool                                          bInIsMember;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_SetIsMember) == 0x000001, "Wrong alignment on SQPlayerState_SetIsMember");
static_assert(sizeof(SQPlayerState_SetIsMember) == 0x000001, "Wrong size on SQPlayerState_SetIsMember");
static_assert(offsetof(SQPlayerState_SetIsMember, bInIsMember) == 0x000000, "Member 'SQPlayerState_SetIsMember::bInIsMember' has a wrong offset!");

// Function Squad.SQPlayerState.SetIsQA
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerState_SetIsQA final
{
public:
	bool                                          bInIsQA;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_SetIsQA) == 0x000001, "Wrong alignment on SQPlayerState_SetIsQA");
static_assert(sizeof(SQPlayerState_SetIsQA) == 0x000001, "Wrong size on SQPlayerState_SetIsQA");
static_assert(offsetof(SQPlayerState_SetIsQA, bInIsQA) == 0x000000, "Member 'SQPlayerState_SetIsQA::bInIsQA' has a wrong offset!");

// Function Squad.SQPlayerState.SetLives
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerState_SetLives final
{
public:
	int32                                         InLives;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_SetLives) == 0x000004, "Wrong alignment on SQPlayerState_SetLives");
static_assert(sizeof(SQPlayerState_SetLives) == 0x000004, "Wrong size on SQPlayerState_SetLives");
static_assert(offsetof(SQPlayerState_SetLives, InLives) == 0x000000, "Member 'SQPlayerState_SetLives::InLives' has a wrong offset!");

// Function Squad.SQPlayerState.SetNumDeaths
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerState_SetNumDeaths final
{
public:
	int32                                         InNumDeaths;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_SetNumDeaths) == 0x000004, "Wrong alignment on SQPlayerState_SetNumDeaths");
static_assert(sizeof(SQPlayerState_SetNumDeaths) == 0x000004, "Wrong size on SQPlayerState_SetNumDeaths");
static_assert(offsetof(SQPlayerState_SetNumDeaths, InNumDeaths) == 0x000000, "Member 'SQPlayerState_SetNumDeaths::InNumDeaths' has a wrong offset!");

// Function Squad.SQPlayerState.SetNumKills
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerState_SetNumKills final
{
public:
	int32                                         InNumKill;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_SetNumKills) == 0x000004, "Wrong alignment on SQPlayerState_SetNumKills");
static_assert(sizeof(SQPlayerState_SetNumKills) == 0x000004, "Wrong size on SQPlayerState_SetNumKills");
static_assert(offsetof(SQPlayerState_SetNumKills, InNumKill) == 0x000000, "Member 'SQPlayerState_SetNumKills::InNumKill' has a wrong offset!");

// Function Squad.SQPlayerState.SetNumTeamKills
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerState_SetNumTeamKills final
{
public:
	int32                                         InNumTeamkills;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_SetNumTeamKills) == 0x000004, "Wrong alignment on SQPlayerState_SetNumTeamKills");
static_assert(sizeof(SQPlayerState_SetNumTeamKills) == 0x000004, "Wrong size on SQPlayerState_SetNumTeamKills");
static_assert(offsetof(SQPlayerState_SetNumTeamKills, InNumTeamkills) == 0x000000, "Member 'SQPlayerState_SetNumTeamKills::InNumTeamkills' has a wrong offset!");

// Function Squad.SQPlayerState.SetNumWounded
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerState_SetNumWounded final
{
public:
	int32                                         InWounded;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_SetNumWounded) == 0x000004, "Wrong alignment on SQPlayerState_SetNumWounded");
static_assert(sizeof(SQPlayerState_SetNumWounded) == 0x000004, "Wrong size on SQPlayerState_SetNumWounded");
static_assert(offsetof(SQPlayerState_SetNumWounded, InWounded) == 0x000000, "Member 'SQPlayerState_SetNumWounded::InWounded' has a wrong offset!");

// Function Squad.SQPlayerState.SetNumWounds
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerState_SetNumWounds final
{
public:
	int32                                         InWounds;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_SetNumWounds) == 0x000004, "Wrong alignment on SQPlayerState_SetNumWounds");
static_assert(sizeof(SQPlayerState_SetNumWounds) == 0x000004, "Wrong size on SQPlayerState_SetNumWounds");
static_assert(offsetof(SQPlayerState_SetNumWounds, InWounds) == 0x000000, "Member 'SQPlayerState_SetNumWounds::InWounds' has a wrong offset!");

// Function Squad.SQPlayerState.SetObjectiveScore
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerState_SetObjectiveScore final
{
public:
	float                                         InObjectiveScore;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_SetObjectiveScore) == 0x000004, "Wrong alignment on SQPlayerState_SetObjectiveScore");
static_assert(sizeof(SQPlayerState_SetObjectiveScore) == 0x000004, "Wrong size on SQPlayerState_SetObjectiveScore");
static_assert(offsetof(SQPlayerState_SetObjectiveScore, InObjectiveScore) == 0x000000, "Member 'SQPlayerState_SetObjectiveScore::InObjectiveScore' has a wrong offset!");

// Function Squad.SQPlayerState.SetPlayerNamePrefix
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerState_SetPlayerNamePrefix final
{
public:
	class FString                                 NewPlayerNamePrefix;                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_SetPlayerNamePrefix) == 0x000008, "Wrong alignment on SQPlayerState_SetPlayerNamePrefix");
static_assert(sizeof(SQPlayerState_SetPlayerNamePrefix) == 0x000010, "Wrong size on SQPlayerState_SetPlayerNamePrefix");
static_assert(offsetof(SQPlayerState_SetPlayerNamePrefix, NewPlayerNamePrefix) == 0x000000, "Member 'SQPlayerState_SetPlayerNamePrefix::NewPlayerNamePrefix' has a wrong offset!");

// Function Squad.SQPlayerState.SetRevivedPoints
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerState_SetRevivedPoints final
{
public:
	float                                         InRevivedPoints;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_SetRevivedPoints) == 0x000004, "Wrong alignment on SQPlayerState_SetRevivedPoints");
static_assert(sizeof(SQPlayerState_SetRevivedPoints) == 0x000004, "Wrong size on SQPlayerState_SetRevivedPoints");
static_assert(offsetof(SQPlayerState_SetRevivedPoints, InRevivedPoints) == 0x000000, "Member 'SQPlayerState_SetRevivedPoints::InRevivedPoints' has a wrong offset!");

// Function Squad.SQPlayerState.SetSoldier
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerState_SetSoldier final
{
public:
	class ASQSoldier*                             InSoldier;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_SetSoldier) == 0x000008, "Wrong alignment on SQPlayerState_SetSoldier");
static_assert(sizeof(SQPlayerState_SetSoldier) == 0x000008, "Wrong size on SQPlayerState_SetSoldier");
static_assert(offsetof(SQPlayerState_SetSoldier, InSoldier) == 0x000000, "Member 'SQPlayerState_SetSoldier::InSoldier' has a wrong offset!");

// Function Squad.SQPlayerState.SetSquadState
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerState_SetSquadState final
{
public:
	class ASQSquadState*                          NewSquadState;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_SetSquadState) == 0x000008, "Wrong alignment on SQPlayerState_SetSquadState");
static_assert(sizeof(SQPlayerState_SetSquadState) == 0x000008, "Wrong size on SQPlayerState_SetSquadState");
static_assert(offsetof(SQPlayerState_SetSquadState, NewSquadState) == 0x000000, "Member 'SQPlayerState_SetSquadState::NewSquadState' has a wrong offset!");

// Function Squad.SQPlayerState.SetSupporterPatch
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerState_SetSupporterPatch final
{
public:
	class UTexture*                               InSupporterPatch;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_SetSupporterPatch) == 0x000008, "Wrong alignment on SQPlayerState_SetSupporterPatch");
static_assert(sizeof(SQPlayerState_SetSupporterPatch) == 0x000008, "Wrong size on SQPlayerState_SetSupporterPatch");
static_assert(offsetof(SQPlayerState_SetSupporterPatch, InSupporterPatch) == 0x000000, "Member 'SQPlayerState_SetSupporterPatch::InSupporterPatch' has a wrong offset!");

// Function Squad.SQPlayerState.SetTeamState
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerState_SetTeamState final
{
public:
	class ASQTeamState*                           NewTeamState;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_SetTeamState) == 0x000008, "Wrong alignment on SQPlayerState_SetTeamState");
static_assert(sizeof(SQPlayerState_SetTeamState) == 0x000008, "Wrong size on SQPlayerState_SetTeamState");
static_assert(offsetof(SQPlayerState_SetTeamState, NewTeamState) == 0x000000, "Member 'SQPlayerState_SetTeamState::NewTeamState' has a wrong offset!");

// Function Squad.SQPlayerState.SetTeamWorkScore
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerState_SetTeamWorkScore final
{
public:
	float                                         InTeamWorkScore;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_SetTeamWorkScore) == 0x000004, "Wrong alignment on SQPlayerState_SetTeamWorkScore");
static_assert(sizeof(SQPlayerState_SetTeamWorkScore) == 0x000004, "Wrong size on SQPlayerState_SetTeamWorkScore");
static_assert(offsetof(SQPlayerState_SetTeamWorkScore, InTeamWorkScore) == 0x000000, "Member 'SQPlayerState_SetTeamWorkScore::InTeamWorkScore' has a wrong offset!");

// Function Squad.SQPlayerState.UpdateContextVoiceSettings
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerState_UpdateContextVoiceSettings final
{
public:
	class ASQSquadState*                          Squad;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerState*                         Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_UpdateContextVoiceSettings) == 0x000008, "Wrong alignment on SQPlayerState_UpdateContextVoiceSettings");
static_assert(sizeof(SQPlayerState_UpdateContextVoiceSettings) == 0x000010, "Wrong size on SQPlayerState_UpdateContextVoiceSettings");
static_assert(offsetof(SQPlayerState_UpdateContextVoiceSettings, Squad) == 0x000000, "Member 'SQPlayerState_UpdateContextVoiceSettings::Squad' has a wrong offset!");
static_assert(offsetof(SQPlayerState_UpdateContextVoiceSettings, Player) == 0x000008, "Member 'SQPlayerState_UpdateContextVoiceSettings::Player' has a wrong offset!");

// Function Squad.SQPlayerState.GetClanPatch
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerState_GetClanPatch final
{
public:
	class UTexture*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetClanPatch) == 0x000008, "Wrong alignment on SQPlayerState_GetClanPatch");
static_assert(sizeof(SQPlayerState_GetClanPatch) == 0x000008, "Wrong size on SQPlayerState_GetClanPatch");
static_assert(offsetof(SQPlayerState_GetClanPatch, ReturnValue) == 0x000000, "Member 'SQPlayerState_GetClanPatch::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.GetCurrentPawn
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerState_GetCurrentPawn final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetCurrentPawn) == 0x000008, "Wrong alignment on SQPlayerState_GetCurrentPawn");
static_assert(sizeof(SQPlayerState_GetCurrentPawn) == 0x000008, "Wrong size on SQPlayerState_GetCurrentPawn");
static_assert(offsetof(SQPlayerState_GetCurrentPawn, ReturnValue) == 0x000000, "Member 'SQPlayerState_GetCurrentPawn::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.GetCurrentRole
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerState_GetCurrentRole final
{
public:
	class USQRoleSettings*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetCurrentRole) == 0x000008, "Wrong alignment on SQPlayerState_GetCurrentRole");
static_assert(sizeof(SQPlayerState_GetCurrentRole) == 0x000008, "Wrong size on SQPlayerState_GetCurrentRole");
static_assert(offsetof(SQPlayerState_GetCurrentRole, ReturnValue) == 0x000000, "Member 'SQPlayerState_GetCurrentRole::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.GetCurrentSeat
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerState_GetCurrentSeat final
{
public:
	class USQVehicleSeatComponent*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetCurrentSeat) == 0x000008, "Wrong alignment on SQPlayerState_GetCurrentSeat");
static_assert(sizeof(SQPlayerState_GetCurrentSeat) == 0x000008, "Wrong size on SQPlayerState_GetCurrentSeat");
static_assert(offsetof(SQPlayerState_GetCurrentSeat, ReturnValue) == 0x000000, "Member 'SQPlayerState_GetCurrentSeat::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.GetCurrentSeatPawn
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerState_GetCurrentSeatPawn final
{
public:
	class ASQVehicleSeat*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetCurrentSeatPawn) == 0x000008, "Wrong alignment on SQPlayerState_GetCurrentSeatPawn");
static_assert(sizeof(SQPlayerState_GetCurrentSeatPawn) == 0x000008, "Wrong size on SQPlayerState_GetCurrentSeatPawn");
static_assert(offsetof(SQPlayerState_GetCurrentSeatPawn, ReturnValue) == 0x000000, "Member 'SQPlayerState_GetCurrentSeatPawn::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.GetCurrentVehicle
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerState_GetCurrentVehicle final
{
public:
	class ASQVehicle*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetCurrentVehicle) == 0x000008, "Wrong alignment on SQPlayerState_GetCurrentVehicle");
static_assert(sizeof(SQPlayerState_GetCurrentVehicle) == 0x000008, "Wrong size on SQPlayerState_GetCurrentVehicle");
static_assert(offsetof(SQPlayerState_GetCurrentVehicle, ReturnValue) == 0x000000, "Member 'SQPlayerState_GetCurrentVehicle::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.GetDeployRole
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerState_GetDeployRole final
{
public:
	class USQRoleSettings*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetDeployRole) == 0x000008, "Wrong alignment on SQPlayerState_GetDeployRole");
static_assert(sizeof(SQPlayerState_GetDeployRole) == 0x000008, "Wrong size on SQPlayerState_GetDeployRole");
static_assert(offsetof(SQPlayerState_GetDeployRole, ReturnValue) == 0x000000, "Member 'SQPlayerState_GetDeployRole::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.GetFireTeamIndex
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerState_GetFireTeamIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetFireTeamIndex) == 0x000004, "Wrong alignment on SQPlayerState_GetFireTeamIndex");
static_assert(sizeof(SQPlayerState_GetFireTeamIndex) == 0x000004, "Wrong size on SQPlayerState_GetFireTeamIndex");
static_assert(offsetof(SQPlayerState_GetFireTeamIndex, ReturnValue) == 0x000000, "Member 'SQPlayerState_GetFireTeamIndex::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.GetFireTeamPosition
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerState_GetFireTeamPosition final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetFireTeamPosition) == 0x000004, "Wrong alignment on SQPlayerState_GetFireTeamPosition");
static_assert(sizeof(SQPlayerState_GetFireTeamPosition) == 0x000004, "Wrong size on SQPlayerState_GetFireTeamPosition");
static_assert(offsetof(SQPlayerState_GetFireTeamPosition, ReturnValue) == 0x000000, "Member 'SQPlayerState_GetFireTeamPosition::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.GetFullPlayerName
// 0x0018 (0x0018 - 0x0000)
struct SQPlayerState_GetFullPlayerName final
{
public:
	bool                                          bReturnUnmodified;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12F4[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetFullPlayerName) == 0x000008, "Wrong alignment on SQPlayerState_GetFullPlayerName");
static_assert(sizeof(SQPlayerState_GetFullPlayerName) == 0x000018, "Wrong size on SQPlayerState_GetFullPlayerName");
static_assert(offsetof(SQPlayerState_GetFullPlayerName, bReturnUnmodified) == 0x000000, "Member 'SQPlayerState_GetFullPlayerName::bReturnUnmodified' has a wrong offset!");
static_assert(offsetof(SQPlayerState_GetFullPlayerName, ReturnValue) == 0x000008, "Member 'SQPlayerState_GetFullPlayerName::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.GetHealPoints
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerState_GetHealPoints final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetHealPoints) == 0x000004, "Wrong alignment on SQPlayerState_GetHealPoints");
static_assert(sizeof(SQPlayerState_GetHealPoints) == 0x000004, "Wrong size on SQPlayerState_GetHealPoints");
static_assert(offsetof(SQPlayerState_GetHealPoints, ReturnValue) == 0x000000, "Member 'SQPlayerState_GetHealPoints::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.GetLives
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerState_GetLives final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetLives) == 0x000004, "Wrong alignment on SQPlayerState_GetLives");
static_assert(sizeof(SQPlayerState_GetLives) == 0x000004, "Wrong size on SQPlayerState_GetLives");
static_assert(offsetof(SQPlayerState_GetLives, ReturnValue) == 0x000000, "Member 'SQPlayerState_GetLives::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.GetNumDeaths
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerState_GetNumDeaths final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetNumDeaths) == 0x000004, "Wrong alignment on SQPlayerState_GetNumDeaths");
static_assert(sizeof(SQPlayerState_GetNumDeaths) == 0x000004, "Wrong size on SQPlayerState_GetNumDeaths");
static_assert(offsetof(SQPlayerState_GetNumDeaths, ReturnValue) == 0x000000, "Member 'SQPlayerState_GetNumDeaths::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.GetNumKills
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerState_GetNumKills final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetNumKills) == 0x000004, "Wrong alignment on SQPlayerState_GetNumKills");
static_assert(sizeof(SQPlayerState_GetNumKills) == 0x000004, "Wrong size on SQPlayerState_GetNumKills");
static_assert(offsetof(SQPlayerState_GetNumKills, ReturnValue) == 0x000000, "Member 'SQPlayerState_GetNumKills::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.GetNumTeamKills
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerState_GetNumTeamKills final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetNumTeamKills) == 0x000004, "Wrong alignment on SQPlayerState_GetNumTeamKills");
static_assert(sizeof(SQPlayerState_GetNumTeamKills) == 0x000004, "Wrong size on SQPlayerState_GetNumTeamKills");
static_assert(offsetof(SQPlayerState_GetNumTeamKills, ReturnValue) == 0x000000, "Member 'SQPlayerState_GetNumTeamKills::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.GetNumWounded
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerState_GetNumWounded final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetNumWounded) == 0x000004, "Wrong alignment on SQPlayerState_GetNumWounded");
static_assert(sizeof(SQPlayerState_GetNumWounded) == 0x000004, "Wrong size on SQPlayerState_GetNumWounded");
static_assert(offsetof(SQPlayerState_GetNumWounded, ReturnValue) == 0x000000, "Member 'SQPlayerState_GetNumWounded::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.GetNumWounds
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerState_GetNumWounds final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetNumWounds) == 0x000004, "Wrong alignment on SQPlayerState_GetNumWounds");
static_assert(sizeof(SQPlayerState_GetNumWounds) == 0x000004, "Wrong size on SQPlayerState_GetNumWounds");
static_assert(offsetof(SQPlayerState_GetNumWounds, ReturnValue) == 0x000000, "Member 'SQPlayerState_GetNumWounds::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.GetObjectiveScore
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerState_GetObjectiveScore final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetObjectiveScore) == 0x000004, "Wrong alignment on SQPlayerState_GetObjectiveScore");
static_assert(sizeof(SQPlayerState_GetObjectiveScore) == 0x000004, "Wrong size on SQPlayerState_GetObjectiveScore");
static_assert(offsetof(SQPlayerState_GetObjectiveScore, ReturnValue) == 0x000000, "Member 'SQPlayerState_GetObjectiveScore::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.GetOnlyPlayerName
// 0x0018 (0x0018 - 0x0000)
struct SQPlayerState_GetOnlyPlayerName final
{
public:
	bool                                          bReturnUnmodified;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12F5[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetOnlyPlayerName) == 0x000008, "Wrong alignment on SQPlayerState_GetOnlyPlayerName");
static_assert(sizeof(SQPlayerState_GetOnlyPlayerName) == 0x000018, "Wrong size on SQPlayerState_GetOnlyPlayerName");
static_assert(offsetof(SQPlayerState_GetOnlyPlayerName, bReturnUnmodified) == 0x000000, "Member 'SQPlayerState_GetOnlyPlayerName::bReturnUnmodified' has a wrong offset!");
static_assert(offsetof(SQPlayerState_GetOnlyPlayerName, ReturnValue) == 0x000008, "Member 'SQPlayerState_GetOnlyPlayerName::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.GetOnlyPlayerPrefix
// 0x0018 (0x0018 - 0x0000)
struct SQPlayerState_GetOnlyPlayerPrefix final
{
public:
	bool                                          bReturnUnmodified;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12F6[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetOnlyPlayerPrefix) == 0x000008, "Wrong alignment on SQPlayerState_GetOnlyPlayerPrefix");
static_assert(sizeof(SQPlayerState_GetOnlyPlayerPrefix) == 0x000018, "Wrong size on SQPlayerState_GetOnlyPlayerPrefix");
static_assert(offsetof(SQPlayerState_GetOnlyPlayerPrefix, bReturnUnmodified) == 0x000000, "Member 'SQPlayerState_GetOnlyPlayerPrefix::bReturnUnmodified' has a wrong offset!");
static_assert(offsetof(SQPlayerState_GetOnlyPlayerPrefix, ReturnValue) == 0x000008, "Member 'SQPlayerState_GetOnlyPlayerPrefix::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.GetPlacedDeployableAt
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerState_GetPlacedDeployableAt final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12F7[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQDeployable*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetPlacedDeployableAt) == 0x000008, "Wrong alignment on SQPlayerState_GetPlacedDeployableAt");
static_assert(sizeof(SQPlayerState_GetPlacedDeployableAt) == 0x000010, "Wrong size on SQPlayerState_GetPlacedDeployableAt");
static_assert(offsetof(SQPlayerState_GetPlacedDeployableAt, Param_Index) == 0x000000, "Member 'SQPlayerState_GetPlacedDeployableAt::Param_Index' has a wrong offset!");
static_assert(offsetof(SQPlayerState_GetPlacedDeployableAt, ReturnValue) == 0x000008, "Member 'SQPlayerState_GetPlacedDeployableAt::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.GetPlacedDeployableItemsCount
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerState_GetPlacedDeployableItemsCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetPlacedDeployableItemsCount) == 0x000004, "Wrong alignment on SQPlayerState_GetPlacedDeployableItemsCount");
static_assert(sizeof(SQPlayerState_GetPlacedDeployableItemsCount) == 0x000004, "Wrong size on SQPlayerState_GetPlacedDeployableItemsCount");
static_assert(offsetof(SQPlayerState_GetPlacedDeployableItemsCount, ReturnValue) == 0x000000, "Member 'SQPlayerState_GetPlacedDeployableItemsCount::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.GetPlayerNamePrefix
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerState_GetPlayerNamePrefix final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetPlayerNamePrefix) == 0x000008, "Wrong alignment on SQPlayerState_GetPlayerNamePrefix");
static_assert(sizeof(SQPlayerState_GetPlayerNamePrefix) == 0x000010, "Wrong size on SQPlayerState_GetPlayerNamePrefix");
static_assert(offsetof(SQPlayerState_GetPlayerNamePrefix, ReturnValue) == 0x000000, "Member 'SQPlayerState_GetPlayerNamePrefix::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.GetRevivedPoints
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerState_GetRevivedPoints final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetRevivedPoints) == 0x000004, "Wrong alignment on SQPlayerState_GetRevivedPoints");
static_assert(sizeof(SQPlayerState_GetRevivedPoints) == 0x000004, "Wrong size on SQPlayerState_GetRevivedPoints");
static_assert(offsetof(SQPlayerState_GetRevivedPoints, ReturnValue) == 0x000000, "Member 'SQPlayerState_GetRevivedPoints::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.GetShortPlayerName
// 0x0010 (0x0010 - 0x0000)
struct SQPlayerState_GetShortPlayerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetShortPlayerName) == 0x000008, "Wrong alignment on SQPlayerState_GetShortPlayerName");
static_assert(sizeof(SQPlayerState_GetShortPlayerName) == 0x000010, "Wrong size on SQPlayerState_GetShortPlayerName");
static_assert(offsetof(SQPlayerState_GetShortPlayerName, ReturnValue) == 0x000000, "Member 'SQPlayerState_GetShortPlayerName::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.GetSoldier
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerState_GetSoldier final
{
public:
	class ASQSoldier*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetSoldier) == 0x000008, "Wrong alignment on SQPlayerState_GetSoldier");
static_assert(sizeof(SQPlayerState_GetSoldier) == 0x000008, "Wrong size on SQPlayerState_GetSoldier");
static_assert(offsetof(SQPlayerState_GetSoldier, ReturnValue) == 0x000000, "Member 'SQPlayerState_GetSoldier::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.GetSquadState
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerState_GetSquadState final
{
public:
	class ASQSquadState*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetSquadState) == 0x000008, "Wrong alignment on SQPlayerState_GetSquadState");
static_assert(sizeof(SQPlayerState_GetSquadState) == 0x000008, "Wrong size on SQPlayerState_GetSquadState");
static_assert(offsetof(SQPlayerState_GetSquadState, ReturnValue) == 0x000000, "Member 'SQPlayerState_GetSquadState::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.GetSupporterPatch
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerState_GetSupporterPatch final
{
public:
	class UTexture*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetSupporterPatch) == 0x000008, "Wrong alignment on SQPlayerState_GetSupporterPatch");
static_assert(sizeof(SQPlayerState_GetSupporterPatch) == 0x000008, "Wrong size on SQPlayerState_GetSupporterPatch");
static_assert(offsetof(SQPlayerState_GetSupporterPatch, ReturnValue) == 0x000000, "Member 'SQPlayerState_GetSupporterPatch::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.GetTeamState
// 0x0008 (0x0008 - 0x0000)
struct SQPlayerState_GetTeamState final
{
public:
	class ASQTeamState*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetTeamState) == 0x000008, "Wrong alignment on SQPlayerState_GetTeamState");
static_assert(sizeof(SQPlayerState_GetTeamState) == 0x000008, "Wrong size on SQPlayerState_GetTeamState");
static_assert(offsetof(SQPlayerState_GetTeamState, ReturnValue) == 0x000000, "Member 'SQPlayerState_GetTeamState::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.GetTeamWorkScore
// 0x0004 (0x0004 - 0x0000)
struct SQPlayerState_GetTeamWorkScore final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetTeamWorkScore) == 0x000004, "Wrong alignment on SQPlayerState_GetTeamWorkScore");
static_assert(sizeof(SQPlayerState_GetTeamWorkScore) == 0x000004, "Wrong size on SQPlayerState_GetTeamWorkScore");
static_assert(offsetof(SQPlayerState_GetTeamWorkScore, ReturnValue) == 0x000000, "Member 'SQPlayerState_GetTeamWorkScore::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.GetUniqueNetID
// 0x0028 (0x0028 - 0x0000)
struct SQPlayerState_GetUniqueNetID final
{
public:
	struct FUniqueNetIdRepl                       ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_GetUniqueNetID) == 0x000008, "Wrong alignment on SQPlayerState_GetUniqueNetID");
static_assert(sizeof(SQPlayerState_GetUniqueNetID) == 0x000028, "Wrong size on SQPlayerState_GetUniqueNetID");
static_assert(offsetof(SQPlayerState_GetUniqueNetID, ReturnValue) == 0x000000, "Member 'SQPlayerState_GetUniqueNetID::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.IsAdmin
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerState_IsAdmin final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_IsAdmin) == 0x000001, "Wrong alignment on SQPlayerState_IsAdmin");
static_assert(sizeof(SQPlayerState_IsAdmin) == 0x000001, "Wrong size on SQPlayerState_IsAdmin");
static_assert(offsetof(SQPlayerState_IsAdmin, ReturnValue) == 0x000000, "Member 'SQPlayerState_IsAdmin::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.IsAlive
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerState_IsAlive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_IsAlive) == 0x000001, "Wrong alignment on SQPlayerState_IsAlive");
static_assert(sizeof(SQPlayerState_IsAlive) == 0x000001, "Wrong size on SQPlayerState_IsAlive");
static_assert(offsetof(SQPlayerState_IsAlive, ReturnValue) == 0x000000, "Member 'SQPlayerState_IsAlive::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.IsCommander
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerState_IsCommander final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_IsCommander) == 0x000001, "Wrong alignment on SQPlayerState_IsCommander");
static_assert(sizeof(SQPlayerState_IsCommander) == 0x000001, "Wrong size on SQPlayerState_IsCommander");
static_assert(offsetof(SQPlayerState_IsCommander, ReturnValue) == 0x000000, "Member 'SQPlayerState_IsCommander::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.IsDev
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerState_IsDev final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_IsDev) == 0x000001, "Wrong alignment on SQPlayerState_IsDev");
static_assert(sizeof(SQPlayerState_IsDev) == 0x000001, "Wrong size on SQPlayerState_IsDev");
static_assert(offsetof(SQPlayerState_IsDev, ReturnValue) == 0x000000, "Member 'SQPlayerState_IsDev::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.IsFireTeamLeader
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerState_IsFireTeamLeader final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_IsFireTeamLeader) == 0x000001, "Wrong alignment on SQPlayerState_IsFireTeamLeader");
static_assert(sizeof(SQPlayerState_IsFireTeamLeader) == 0x000001, "Wrong size on SQPlayerState_IsFireTeamLeader");
static_assert(offsetof(SQPlayerState_IsFireTeamLeader, ReturnValue) == 0x000000, "Member 'SQPlayerState_IsFireTeamLeader::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.IsMember
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerState_IsMember final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_IsMember) == 0x000001, "Wrong alignment on SQPlayerState_IsMember");
static_assert(sizeof(SQPlayerState_IsMember) == 0x000001, "Wrong size on SQPlayerState_IsMember");
static_assert(offsetof(SQPlayerState_IsMember, ReturnValue) == 0x000000, "Member 'SQPlayerState_IsMember::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.IsQA
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerState_IsQA final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_IsQA) == 0x000001, "Wrong alignment on SQPlayerState_IsQA");
static_assert(sizeof(SQPlayerState_IsQA) == 0x000001, "Wrong size on SQPlayerState_IsQA");
static_assert(offsetof(SQPlayerState_IsQA, ReturnValue) == 0x000000, "Member 'SQPlayerState_IsQA::ReturnValue' has a wrong offset!");

// Function Squad.SQPlayerState.IsSquadLeader
// 0x0001 (0x0001 - 0x0000)
struct SQPlayerState_IsSquadLeader final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQPlayerState_IsSquadLeader) == 0x000001, "Wrong alignment on SQPlayerState_IsSquadLeader");
static_assert(sizeof(SQPlayerState_IsSquadLeader) == 0x000001, "Wrong size on SQPlayerState_IsSquadLeader");
static_assert(offsetof(SQPlayerState_IsSquadLeader, ReturnValue) == 0x000000, "Member 'SQPlayerState_IsSquadLeader::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleExitPointComponent.CanExit
// 0x0001 (0x0001 - 0x0000)
struct SQVehicleExitPointComponent_CanExit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleExitPointComponent_CanExit) == 0x000001, "Wrong alignment on SQVehicleExitPointComponent_CanExit");
static_assert(sizeof(SQVehicleExitPointComponent_CanExit) == 0x000001, "Wrong size on SQVehicleExitPointComponent_CanExit");
static_assert(offsetof(SQVehicleExitPointComponent_CanExit, ReturnValue) == 0x000000, "Member 'SQVehicleExitPointComponent_CanExit::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleMovementComponentInterface.SetAllSteeringInputs
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleMovementComponentInterface_SetAllSteeringInputs final
{
public:
	float                                         Input;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleMovementComponentInterface_SetAllSteeringInputs) == 0x000004, "Wrong alignment on SQVehicleMovementComponentInterface_SetAllSteeringInputs");
static_assert(sizeof(SQVehicleMovementComponentInterface_SetAllSteeringInputs) == 0x000004, "Wrong size on SQVehicleMovementComponentInterface_SetAllSteeringInputs");
static_assert(offsetof(SQVehicleMovementComponentInterface_SetAllSteeringInputs, Input) == 0x000000, "Member 'SQVehicleMovementComponentInterface_SetAllSteeringInputs::Input' has a wrong offset!");

// Function Squad.SQVehicleMovementComponentInterface.SetAllThrottleInputs
// 0x000C (0x000C - 0x0000)
struct SQVehicleMovementComponentInterface_SetAllThrottleInputs final
{
public:
	float                                         Input;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxThrottle;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEngineActive;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12FB[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVehicleMovementComponentInterface_SetAllThrottleInputs) == 0x000004, "Wrong alignment on SQVehicleMovementComponentInterface_SetAllThrottleInputs");
static_assert(sizeof(SQVehicleMovementComponentInterface_SetAllThrottleInputs) == 0x00000C, "Wrong size on SQVehicleMovementComponentInterface_SetAllThrottleInputs");
static_assert(offsetof(SQVehicleMovementComponentInterface_SetAllThrottleInputs, Input) == 0x000000, "Member 'SQVehicleMovementComponentInterface_SetAllThrottleInputs::Input' has a wrong offset!");
static_assert(offsetof(SQVehicleMovementComponentInterface_SetAllThrottleInputs, MaxThrottle) == 0x000004, "Member 'SQVehicleMovementComponentInterface_SetAllThrottleInputs::MaxThrottle' has a wrong offset!");
static_assert(offsetof(SQVehicleMovementComponentInterface_SetAllThrottleInputs, bEngineActive) == 0x000008, "Member 'SQVehicleMovementComponentInterface_SetAllThrottleInputs::bEngineActive' has a wrong offset!");

// Function Squad.SQVehicleMovementComponentInterface.SetEngineBoostTorqueMultiplier
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleMovementComponentInterface_SetEngineBoostTorqueMultiplier final
{
public:
	float                                         InEngineBoostTorqueMultiplier;                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleMovementComponentInterface_SetEngineBoostTorqueMultiplier) == 0x000004, "Wrong alignment on SQVehicleMovementComponentInterface_SetEngineBoostTorqueMultiplier");
static_assert(sizeof(SQVehicleMovementComponentInterface_SetEngineBoostTorqueMultiplier) == 0x000004, "Wrong size on SQVehicleMovementComponentInterface_SetEngineBoostTorqueMultiplier");
static_assert(offsetof(SQVehicleMovementComponentInterface_SetEngineBoostTorqueMultiplier, InEngineBoostTorqueMultiplier) == 0x000000, "Member 'SQVehicleMovementComponentInterface_SetEngineBoostTorqueMultiplier::InEngineBoostTorqueMultiplier' has a wrong offset!");

// Function Squad.SQVehicleMovementComponentInterface.SetRawSteeringInput
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleMovementComponentInterface_SetRawSteeringInput final
{
public:
	float                                         RawInput;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleMovementComponentInterface_SetRawSteeringInput) == 0x000004, "Wrong alignment on SQVehicleMovementComponentInterface_SetRawSteeringInput");
static_assert(sizeof(SQVehicleMovementComponentInterface_SetRawSteeringInput) == 0x000004, "Wrong size on SQVehicleMovementComponentInterface_SetRawSteeringInput");
static_assert(offsetof(SQVehicleMovementComponentInterface_SetRawSteeringInput, RawInput) == 0x000000, "Member 'SQVehicleMovementComponentInterface_SetRawSteeringInput::RawInput' has a wrong offset!");

// Function Squad.SQVehicleMovementComponentInterface.SetRawThrottleInput
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleMovementComponentInterface_SetRawThrottleInput final
{
public:
	float                                         RawInput;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleMovementComponentInterface_SetRawThrottleInput) == 0x000004, "Wrong alignment on SQVehicleMovementComponentInterface_SetRawThrottleInput");
static_assert(sizeof(SQVehicleMovementComponentInterface_SetRawThrottleInput) == 0x000004, "Wrong size on SQVehicleMovementComponentInterface_SetRawThrottleInput");
static_assert(offsetof(SQVehicleMovementComponentInterface_SetRawThrottleInput, RawInput) == 0x000000, "Member 'SQVehicleMovementComponentInterface_SetRawThrottleInput::RawInput' has a wrong offset!");

// Function Squad.SQVehicleMovementComponentInterface.SetShouldSimulate
// 0x0001 (0x0001 - 0x0000)
struct SQVehicleMovementComponentInterface_SetShouldSimulate final
{
public:
	bool                                          InbShouldSimulate;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleMovementComponentInterface_SetShouldSimulate) == 0x000001, "Wrong alignment on SQVehicleMovementComponentInterface_SetShouldSimulate");
static_assert(sizeof(SQVehicleMovementComponentInterface_SetShouldSimulate) == 0x000001, "Wrong size on SQVehicleMovementComponentInterface_SetShouldSimulate");
static_assert(offsetof(SQVehicleMovementComponentInterface_SetShouldSimulate, InbShouldSimulate) == 0x000000, "Member 'SQVehicleMovementComponentInterface_SetShouldSimulate::InbShouldSimulate' has a wrong offset!");

// Function Squad.SQVehicleMovementComponentInterface.SetSteeringInput
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleMovementComponentInterface_SetSteeringInput final
{
public:
	float                                         Input;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleMovementComponentInterface_SetSteeringInput) == 0x000004, "Wrong alignment on SQVehicleMovementComponentInterface_SetSteeringInput");
static_assert(sizeof(SQVehicleMovementComponentInterface_SetSteeringInput) == 0x000004, "Wrong size on SQVehicleMovementComponentInterface_SetSteeringInput");
static_assert(offsetof(SQVehicleMovementComponentInterface_SetSteeringInput, Input) == 0x000000, "Member 'SQVehicleMovementComponentInterface_SetSteeringInput::Input' has a wrong offset!");

// Function Squad.SQVehicleMovementComponentInterface.SetThrottleInput
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleMovementComponentInterface_SetThrottleInput final
{
public:
	float                                         Input;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleMovementComponentInterface_SetThrottleInput) == 0x000004, "Wrong alignment on SQVehicleMovementComponentInterface_SetThrottleInput");
static_assert(sizeof(SQVehicleMovementComponentInterface_SetThrottleInput) == 0x000004, "Wrong size on SQVehicleMovementComponentInterface_SetThrottleInput");
static_assert(offsetof(SQVehicleMovementComponentInterface_SetThrottleInput, Input) == 0x000000, "Member 'SQVehicleMovementComponentInterface_SetThrottleInput::Input' has a wrong offset!");

// Function Squad.SQVehicleMovementComponentInterface.GetBrakeInput
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleMovementComponentInterface_GetBrakeInput final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleMovementComponentInterface_GetBrakeInput) == 0x000004, "Wrong alignment on SQVehicleMovementComponentInterface_GetBrakeInput");
static_assert(sizeof(SQVehicleMovementComponentInterface_GetBrakeInput) == 0x000004, "Wrong size on SQVehicleMovementComponentInterface_GetBrakeInput");
static_assert(offsetof(SQVehicleMovementComponentInterface_GetBrakeInput, ReturnValue) == 0x000000, "Member 'SQVehicleMovementComponentInterface_GetBrakeInput::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleMovementComponentInterface.GetHandbrakeInput
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleMovementComponentInterface_GetHandbrakeInput final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleMovementComponentInterface_GetHandbrakeInput) == 0x000004, "Wrong alignment on SQVehicleMovementComponentInterface_GetHandbrakeInput");
static_assert(sizeof(SQVehicleMovementComponentInterface_GetHandbrakeInput) == 0x000004, "Wrong size on SQVehicleMovementComponentInterface_GetHandbrakeInput");
static_assert(offsetof(SQVehicleMovementComponentInterface_GetHandbrakeInput, ReturnValue) == 0x000000, "Member 'SQVehicleMovementComponentInterface_GetHandbrakeInput::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleMovementComponentInterface.GetMaxSpringForce
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleMovementComponentInterface_GetMaxSpringForce final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleMovementComponentInterface_GetMaxSpringForce) == 0x000004, "Wrong alignment on SQVehicleMovementComponentInterface_GetMaxSpringForce");
static_assert(sizeof(SQVehicleMovementComponentInterface_GetMaxSpringForce) == 0x000004, "Wrong size on SQVehicleMovementComponentInterface_GetMaxSpringForce");
static_assert(offsetof(SQVehicleMovementComponentInterface_GetMaxSpringForce, ReturnValue) == 0x000000, "Member 'SQVehicleMovementComponentInterface_GetMaxSpringForce::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleMovementComponentInterface.GetRawSteeringInput
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleMovementComponentInterface_GetRawSteeringInput final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleMovementComponentInterface_GetRawSteeringInput) == 0x000004, "Wrong alignment on SQVehicleMovementComponentInterface_GetRawSteeringInput");
static_assert(sizeof(SQVehicleMovementComponentInterface_GetRawSteeringInput) == 0x000004, "Wrong size on SQVehicleMovementComponentInterface_GetRawSteeringInput");
static_assert(offsetof(SQVehicleMovementComponentInterface_GetRawSteeringInput, ReturnValue) == 0x000000, "Member 'SQVehicleMovementComponentInterface_GetRawSteeringInput::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleMovementComponentInterface.GetRawThrottleInput
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleMovementComponentInterface_GetRawThrottleInput final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleMovementComponentInterface_GetRawThrottleInput) == 0x000004, "Wrong alignment on SQVehicleMovementComponentInterface_GetRawThrottleInput");
static_assert(sizeof(SQVehicleMovementComponentInterface_GetRawThrottleInput) == 0x000004, "Wrong size on SQVehicleMovementComponentInterface_GetRawThrottleInput");
static_assert(offsetof(SQVehicleMovementComponentInterface_GetRawThrottleInput, ReturnValue) == 0x000000, "Member 'SQVehicleMovementComponentInterface_GetRawThrottleInput::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleMovementComponentInterface.GetShouldSimulate
// 0x0001 (0x0001 - 0x0000)
struct SQVehicleMovementComponentInterface_GetShouldSimulate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleMovementComponentInterface_GetShouldSimulate) == 0x000001, "Wrong alignment on SQVehicleMovementComponentInterface_GetShouldSimulate");
static_assert(sizeof(SQVehicleMovementComponentInterface_GetShouldSimulate) == 0x000001, "Wrong size on SQVehicleMovementComponentInterface_GetShouldSimulate");
static_assert(offsetof(SQVehicleMovementComponentInterface_GetShouldSimulate, ReturnValue) == 0x000000, "Member 'SQVehicleMovementComponentInterface_GetShouldSimulate::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleMovementComponentInterface.GetSteeringInput
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleMovementComponentInterface_GetSteeringInput final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleMovementComponentInterface_GetSteeringInput) == 0x000004, "Wrong alignment on SQVehicleMovementComponentInterface_GetSteeringInput");
static_assert(sizeof(SQVehicleMovementComponentInterface_GetSteeringInput) == 0x000004, "Wrong size on SQVehicleMovementComponentInterface_GetSteeringInput");
static_assert(offsetof(SQVehicleMovementComponentInterface_GetSteeringInput, ReturnValue) == 0x000000, "Member 'SQVehicleMovementComponentInterface_GetSteeringInput::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleMovementComponentInterface.GetThrottleInput
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleMovementComponentInterface_GetThrottleInput final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleMovementComponentInterface_GetThrottleInput) == 0x000004, "Wrong alignment on SQVehicleMovementComponentInterface_GetThrottleInput");
static_assert(sizeof(SQVehicleMovementComponentInterface_GetThrottleInput) == 0x000004, "Wrong size on SQVehicleMovementComponentInterface_GetThrottleInput");
static_assert(offsetof(SQVehicleMovementComponentInterface_GetThrottleInput, ReturnValue) == 0x000000, "Member 'SQVehicleMovementComponentInterface_GetThrottleInput::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleMovementComponentInterface.GetTrueEngineMaxRotationSpeed
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleMovementComponentInterface_GetTrueEngineMaxRotationSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleMovementComponentInterface_GetTrueEngineMaxRotationSpeed) == 0x000004, "Wrong alignment on SQVehicleMovementComponentInterface_GetTrueEngineMaxRotationSpeed");
static_assert(sizeof(SQVehicleMovementComponentInterface_GetTrueEngineMaxRotationSpeed) == 0x000004, "Wrong size on SQVehicleMovementComponentInterface_GetTrueEngineMaxRotationSpeed");
static_assert(offsetof(SQVehicleMovementComponentInterface_GetTrueEngineMaxRotationSpeed, ReturnValue) == 0x000000, "Member 'SQVehicleMovementComponentInterface_GetTrueEngineMaxRotationSpeed::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleMovementComponentInterface.GetTrueEngineRotationSpeed
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleMovementComponentInterface_GetTrueEngineRotationSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleMovementComponentInterface_GetTrueEngineRotationSpeed) == 0x000004, "Wrong alignment on SQVehicleMovementComponentInterface_GetTrueEngineRotationSpeed");
static_assert(sizeof(SQVehicleMovementComponentInterface_GetTrueEngineRotationSpeed) == 0x000004, "Wrong size on SQVehicleMovementComponentInterface_GetTrueEngineRotationSpeed");
static_assert(offsetof(SQVehicleMovementComponentInterface_GetTrueEngineRotationSpeed, ReturnValue) == 0x000000, "Member 'SQVehicleMovementComponentInterface_GetTrueEngineRotationSpeed::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleMovementComponentInterface.GetTrueForwardSpeed
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleMovementComponentInterface_GetTrueForwardSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleMovementComponentInterface_GetTrueForwardSpeed) == 0x000004, "Wrong alignment on SQVehicleMovementComponentInterface_GetTrueForwardSpeed");
static_assert(sizeof(SQVehicleMovementComponentInterface_GetTrueForwardSpeed) == 0x000004, "Wrong size on SQVehicleMovementComponentInterface_GetTrueForwardSpeed");
static_assert(offsetof(SQVehicleMovementComponentInterface_GetTrueForwardSpeed, ReturnValue) == 0x000000, "Member 'SQVehicleMovementComponentInterface_GetTrueForwardSpeed::ReturnValue' has a wrong offset!");

// Function Squad.SQProjectileMovement.ConsumeJitterImpulse
// 0x0004 (0x0004 - 0x0000)
struct SQProjectileMovement_ConsumeJitterImpulse final
{
public:
	float                                         InDeltaTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQProjectileMovement_ConsumeJitterImpulse) == 0x000004, "Wrong alignment on SQProjectileMovement_ConsumeJitterImpulse");
static_assert(sizeof(SQProjectileMovement_ConsumeJitterImpulse) == 0x000004, "Wrong size on SQProjectileMovement_ConsumeJitterImpulse");
static_assert(offsetof(SQProjectileMovement_ConsumeJitterImpulse, InDeltaTime) == 0x000000, "Member 'SQProjectileMovement_ConsumeJitterImpulse::InDeltaTime' has a wrong offset!");

// Function Squad.SQProjectileMovement.SetUseAdditiveJitter
// 0x0001 (0x0001 - 0x0000)
struct SQProjectileMovement_SetUseAdditiveJitter final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQProjectileMovement_SetUseAdditiveJitter) == 0x000001, "Wrong alignment on SQProjectileMovement_SetUseAdditiveJitter");
static_assert(sizeof(SQProjectileMovement_SetUseAdditiveJitter) == 0x000001, "Wrong size on SQProjectileMovement_SetUseAdditiveJitter");
static_assert(offsetof(SQProjectileMovement_SetUseAdditiveJitter, NewValue) == 0x000000, "Member 'SQProjectileMovement_SetUseAdditiveJitter::NewValue' has a wrong offset!");

// Function Squad.SQProjectileMovement.GetCurrentMovementMode
// 0x0008 (0x0008 - 0x0000)
struct SQProjectileMovement_GetCurrentMovementMode final
{
public:
	class USQMovementModeDataAsset*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQProjectileMovement_GetCurrentMovementMode) == 0x000008, "Wrong alignment on SQProjectileMovement_GetCurrentMovementMode");
static_assert(sizeof(SQProjectileMovement_GetCurrentMovementMode) == 0x000008, "Wrong size on SQProjectileMovement_GetCurrentMovementMode");
static_assert(offsetof(SQProjectileMovement_GetCurrentMovementMode, ReturnValue) == 0x000000, "Member 'SQProjectileMovement_GetCurrentMovementMode::ReturnValue' has a wrong offset!");

// Function Squad.SQSquad.GiveSquadLeader
// 0x0010 (0x0010 - 0x0000)
struct SQSquad_GiveSquadLeader final
{
public:
	class ASQPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130A[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSquad_GiveSquadLeader) == 0x000008, "Wrong alignment on SQSquad_GiveSquadLeader");
static_assert(sizeof(SQSquad_GiveSquadLeader) == 0x000010, "Wrong size on SQSquad_GiveSquadLeader");
static_assert(offsetof(SQSquad_GiveSquadLeader, PlayerState) == 0x000000, "Member 'SQSquad_GiveSquadLeader::PlayerState' has a wrong offset!");
static_assert(offsetof(SQSquad_GiveSquadLeader, ReturnValue) == 0x000008, "Member 'SQSquad_GiveSquadLeader::ReturnValue' has a wrong offset!");

// DelegateFunction Squad.SQSquad.OnFireteamChangedEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct SQSquad_OnFireteamChangedEvent__DelegateSignature final
{
public:
	class ASQSquad*                               Squad;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FireTeamId;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130B[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSquad_OnFireteamChangedEvent__DelegateSignature) == 0x000008, "Wrong alignment on SQSquad_OnFireteamChangedEvent__DelegateSignature");
static_assert(sizeof(SQSquad_OnFireteamChangedEvent__DelegateSignature) == 0x000010, "Wrong size on SQSquad_OnFireteamChangedEvent__DelegateSignature");
static_assert(offsetof(SQSquad_OnFireteamChangedEvent__DelegateSignature, Squad) == 0x000000, "Member 'SQSquad_OnFireteamChangedEvent__DelegateSignature::Squad' has a wrong offset!");
static_assert(offsetof(SQSquad_OnFireteamChangedEvent__DelegateSignature, FireTeamId) == 0x000008, "Member 'SQSquad_OnFireteamChangedEvent__DelegateSignature::FireTeamId' has a wrong offset!");

// DelegateFunction Squad.SQSquad.OnPlayerJoinPartSquadEvent__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct SQSquad_OnPlayerJoinPartSquadEvent__DelegateSignature final
{
public:
	class ASQSquad*                               Squad;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerController*                    Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSquad_OnPlayerJoinPartSquadEvent__DelegateSignature) == 0x000008, "Wrong alignment on SQSquad_OnPlayerJoinPartSquadEvent__DelegateSignature");
static_assert(sizeof(SQSquad_OnPlayerJoinPartSquadEvent__DelegateSignature) == 0x000010, "Wrong size on SQSquad_OnPlayerJoinPartSquadEvent__DelegateSignature");
static_assert(offsetof(SQSquad_OnPlayerJoinPartSquadEvent__DelegateSignature, Squad) == 0x000000, "Member 'SQSquad_OnPlayerJoinPartSquadEvent__DelegateSignature::Squad' has a wrong offset!");
static_assert(offsetof(SQSquad_OnPlayerJoinPartSquadEvent__DelegateSignature, Player) == 0x000008, "Member 'SQSquad_OnPlayerJoinPartSquadEvent__DelegateSignature::Player' has a wrong offset!");

// Function Squad.SQSquad.TryClaimVehicle
// 0x0010 (0x0010 - 0x0000)
struct SQSquad_TryClaimVehicle final
{
public:
	class ASQVehicle*                             Vehicle;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130C[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSquad_TryClaimVehicle) == 0x000008, "Wrong alignment on SQSquad_TryClaimVehicle");
static_assert(sizeof(SQSquad_TryClaimVehicle) == 0x000010, "Wrong size on SQSquad_TryClaimVehicle");
static_assert(offsetof(SQSquad_TryClaimVehicle, Vehicle) == 0x000000, "Member 'SQSquad_TryClaimVehicle::Vehicle' has a wrong offset!");
static_assert(offsetof(SQSquad_TryClaimVehicle, ReturnValue) == 0x000008, "Member 'SQSquad_TryClaimVehicle::ReturnValue' has a wrong offset!");

// Function Squad.SQSquad.GetBlockingDirectVehicleClaims
// 0x0010 (0x0010 - 0x0000)
struct SQSquad_GetBlockingDirectVehicleClaims final
{
public:
	TArray<class USQVehicleClaim*>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSquad_GetBlockingDirectVehicleClaims) == 0x000008, "Wrong alignment on SQSquad_GetBlockingDirectVehicleClaims");
static_assert(sizeof(SQSquad_GetBlockingDirectVehicleClaims) == 0x000010, "Wrong size on SQSquad_GetBlockingDirectVehicleClaims");
static_assert(offsetof(SQSquad_GetBlockingDirectVehicleClaims, ReturnValue) == 0x000000, "Member 'SQSquad_GetBlockingDirectVehicleClaims::ReturnValue' has a wrong offset!");

// Function Squad.SQSquad.GetBlockingPartyVehicleClaims
// 0x0010 (0x0010 - 0x0000)
struct SQSquad_GetBlockingPartyVehicleClaims final
{
public:
	TArray<class USQVehicleClaim*>                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSquad_GetBlockingPartyVehicleClaims) == 0x000008, "Wrong alignment on SQSquad_GetBlockingPartyVehicleClaims");
static_assert(sizeof(SQSquad_GetBlockingPartyVehicleClaims) == 0x000010, "Wrong size on SQSquad_GetBlockingPartyVehicleClaims");
static_assert(offsetof(SQSquad_GetBlockingPartyVehicleClaims, ReturnValue) == 0x000000, "Member 'SQSquad_GetBlockingPartyVehicleClaims::ReturnValue' has a wrong offset!");

// Function Squad.SQProtectionZone.OnCompBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct SQProtectionZone_OnCompBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1311[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQProtectionZone_OnCompBeginOverlap) == 0x000008, "Wrong alignment on SQProtectionZone_OnCompBeginOverlap");
static_assert(sizeof(SQProtectionZone_OnCompBeginOverlap) == 0x0000A8, "Wrong size on SQProtectionZone_OnCompBeginOverlap");
static_assert(offsetof(SQProtectionZone_OnCompBeginOverlap, OverlappedComponent) == 0x000000, "Member 'SQProtectionZone_OnCompBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SQProtectionZone_OnCompBeginOverlap, OtherActor) == 0x000008, "Member 'SQProtectionZone_OnCompBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SQProtectionZone_OnCompBeginOverlap, OtherComp) == 0x000010, "Member 'SQProtectionZone_OnCompBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(SQProtectionZone_OnCompBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'SQProtectionZone_OnCompBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SQProtectionZone_OnCompBeginOverlap, bFromSweep) == 0x00001C, "Member 'SQProtectionZone_OnCompBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(SQProtectionZone_OnCompBeginOverlap, SweepResult) == 0x000020, "Member 'SQProtectionZone_OnCompBeginOverlap::SweepResult' has a wrong offset!");

// Function Squad.SQProtectionZone.OnCompExit
// 0x0020 (0x0020 - 0x0000)
struct SQProtectionZone_OnCompExit final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1312[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQProtectionZone_OnCompExit) == 0x000008, "Wrong alignment on SQProtectionZone_OnCompExit");
static_assert(sizeof(SQProtectionZone_OnCompExit) == 0x000020, "Wrong size on SQProtectionZone_OnCompExit");
static_assert(offsetof(SQProtectionZone_OnCompExit, OverlappedComponent) == 0x000000, "Member 'SQProtectionZone_OnCompExit::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SQProtectionZone_OnCompExit, OtherActor) == 0x000008, "Member 'SQProtectionZone_OnCompExit::OtherActor' has a wrong offset!");
static_assert(offsetof(SQProtectionZone_OnCompExit, OtherComp) == 0x000010, "Member 'SQProtectionZone_OnCompExit::OtherComp' has a wrong offset!");
static_assert(offsetof(SQProtectionZone_OnCompExit, OtherBodyIndex) == 0x000018, "Member 'SQProtectionZone_OnCompExit::OtherBodyIndex' has a wrong offset!");

// Function Squad.SQQuickPlaySearch.GetSquadGameInstance
// 0x0008 (0x0008 - 0x0000)
struct SQQuickPlaySearch_GetSquadGameInstance final
{
public:
	class USQGameInstance*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQQuickPlaySearch_GetSquadGameInstance) == 0x000008, "Wrong alignment on SQQuickPlaySearch_GetSquadGameInstance");
static_assert(sizeof(SQQuickPlaySearch_GetSquadGameInstance) == 0x000008, "Wrong size on SQQuickPlaySearch_GetSquadGameInstance");
static_assert(offsetof(SQQuickPlaySearch_GetSquadGameInstance, ReturnValue) == 0x000000, "Member 'SQQuickPlaySearch_GetSquadGameInstance::ReturnValue' has a wrong offset!");

// Function Squad.SQQuickPlaySearch.IsSessionFilteredOut
// 0x0110 (0x0110 - 0x0000)
struct SQQuickPlaySearch_IsSessionFilteredOut final
{
public:
	struct FBlueprintSessionResult                Session;                                           // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0108(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1315[0x7];                                     // 0x0109(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQQuickPlaySearch_IsSessionFilteredOut) == 0x000008, "Wrong alignment on SQQuickPlaySearch_IsSessionFilteredOut");
static_assert(sizeof(SQQuickPlaySearch_IsSessionFilteredOut) == 0x000110, "Wrong size on SQQuickPlaySearch_IsSessionFilteredOut");
static_assert(offsetof(SQQuickPlaySearch_IsSessionFilteredOut, Session) == 0x000000, "Member 'SQQuickPlaySearch_IsSessionFilteredOut::Session' has a wrong offset!");
static_assert(offsetof(SQQuickPlaySearch_IsSessionFilteredOut, ReturnValue) == 0x000108, "Member 'SQQuickPlaySearch_IsSessionFilteredOut::ReturnValue' has a wrong offset!");

// Function Squad.SQQuickPlaySearch.OnFindSessionsCompleted
// 0x0018 (0x0018 - 0x0000)
struct SQQuickPlaySearch_OnFindSessionsCompleted final
{
public:
	TArray<struct FBlueprintSessionResult>        Results;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1316[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQQuickPlaySearch_OnFindSessionsCompleted) == 0x000008, "Wrong alignment on SQQuickPlaySearch_OnFindSessionsCompleted");
static_assert(sizeof(SQQuickPlaySearch_OnFindSessionsCompleted) == 0x000018, "Wrong size on SQQuickPlaySearch_OnFindSessionsCompleted");
static_assert(offsetof(SQQuickPlaySearch_OnFindSessionsCompleted, Results) == 0x000000, "Member 'SQQuickPlaySearch_OnFindSessionsCompleted::Results' has a wrong offset!");
static_assert(offsetof(SQQuickPlaySearch_OnFindSessionsCompleted, bSuccess) == 0x000010, "Member 'SQQuickPlaySearch_OnFindSessionsCompleted::bSuccess' has a wrong offset!");

// Function Squad.SQQuickPlaySearch.OnFindSessionsNewSessionUpdate
// 0x0108 (0x0108 - 0x0000)
struct SQQuickPlaySearch_OnFindSessionsNewSessionUpdate final
{
public:
	struct FBlueprintSessionResult                SessionResult;                                     // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQQuickPlaySearch_OnFindSessionsNewSessionUpdate) == 0x000008, "Wrong alignment on SQQuickPlaySearch_OnFindSessionsNewSessionUpdate");
static_assert(sizeof(SQQuickPlaySearch_OnFindSessionsNewSessionUpdate) == 0x000108, "Wrong size on SQQuickPlaySearch_OnFindSessionsNewSessionUpdate");
static_assert(offsetof(SQQuickPlaySearch_OnFindSessionsNewSessionUpdate, SessionResult) == 0x000000, "Member 'SQQuickPlaySearch_OnFindSessionsNewSessionUpdate::SessionResult' has a wrong offset!");

// Function Squad.SQQuickPlaySearch.PreferencesToJson
// 0x0008 (0x0008 - 0x0000)
struct SQQuickPlaySearch_PreferencesToJson final
{
public:
	class UPlayFabJsonObject*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQQuickPlaySearch_PreferencesToJson) == 0x000008, "Wrong alignment on SQQuickPlaySearch_PreferencesToJson");
static_assert(sizeof(SQQuickPlaySearch_PreferencesToJson) == 0x000008, "Wrong size on SQQuickPlaySearch_PreferencesToJson");
static_assert(offsetof(SQQuickPlaySearch_PreferencesToJson, ReturnValue) == 0x000000, "Member 'SQQuickPlaySearch_PreferencesToJson::ReturnValue' has a wrong offset!");

// Function Squad.SQQuickPlaySearch.SetShowEmptyServers
// 0x0001 (0x0001 - 0x0000)
struct SQQuickPlaySearch_SetShowEmptyServers final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQQuickPlaySearch_SetShowEmptyServers) == 0x000001, "Wrong alignment on SQQuickPlaySearch_SetShowEmptyServers");
static_assert(sizeof(SQQuickPlaySearch_SetShowEmptyServers) == 0x000001, "Wrong size on SQQuickPlaySearch_SetShowEmptyServers");
static_assert(offsetof(SQQuickPlaySearch_SetShowEmptyServers, bNewValue) == 0x000000, "Member 'SQQuickPlaySearch_SetShowEmptyServers::bNewValue' has a wrong offset!");

// Function Squad.SQQuickPlaySearch.SetShowFullServers
// 0x0001 (0x0001 - 0x0000)
struct SQQuickPlaySearch_SetShowFullServers final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQQuickPlaySearch_SetShowFullServers) == 0x000001, "Wrong alignment on SQQuickPlaySearch_SetShowFullServers");
static_assert(sizeof(SQQuickPlaySearch_SetShowFullServers) == 0x000001, "Wrong size on SQQuickPlaySearch_SetShowFullServers");
static_assert(offsetof(SQQuickPlaySearch_SetShowFullServers, bNewValue) == 0x000000, "Member 'SQQuickPlaySearch_SetShowFullServers::bNewValue' has a wrong offset!");

// Function Squad.SQQuickPlaySearch.SetShowModdedServers
// 0x0001 (0x0001 - 0x0000)
struct SQQuickPlaySearch_SetShowModdedServers final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQQuickPlaySearch_SetShowModdedServers) == 0x000001, "Wrong alignment on SQQuickPlaySearch_SetShowModdedServers");
static_assert(sizeof(SQQuickPlaySearch_SetShowModdedServers) == 0x000001, "Wrong size on SQQuickPlaySearch_SetShowModdedServers");
static_assert(offsetof(SQQuickPlaySearch_SetShowModdedServers, bNewValue) == 0x000000, "Member 'SQQuickPlaySearch_SetShowModdedServers::bNewValue' has a wrong offset!");

// Function Squad.SQQuickPlaySearch.SimplifyFilters
// 0x0001 (0x0001 - 0x0000)
struct SQQuickPlaySearch_SimplifyFilters final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQQuickPlaySearch_SimplifyFilters) == 0x000001, "Wrong alignment on SQQuickPlaySearch_SimplifyFilters");
static_assert(sizeof(SQQuickPlaySearch_SimplifyFilters) == 0x000001, "Wrong size on SQQuickPlaySearch_SimplifyFilters");
static_assert(offsetof(SQQuickPlaySearch_SimplifyFilters, ReturnValue) == 0x000000, "Member 'SQQuickPlaySearch_SimplifyFilters::ReturnValue' has a wrong offset!");

// Function Squad.SQQuickPlaySearch.SortResults
// 0x0010 (0x0010 - 0x0000)
struct SQQuickPlaySearch_SortResults final
{
public:
	TArray<class FString>                         Favorites;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQQuickPlaySearch_SortResults) == 0x000008, "Wrong alignment on SQQuickPlaySearch_SortResults");
static_assert(sizeof(SQQuickPlaySearch_SortResults) == 0x000010, "Wrong size on SQQuickPlaySearch_SortResults");
static_assert(offsetof(SQQuickPlaySearch_SortResults, Favorites) == 0x000000, "Member 'SQQuickPlaySearch_SortResults::Favorites' has a wrong offset!");

// Function Squad.SQQuickPlaySearch.UpdateTags
// 0x0018 (0x0018 - 0x0000)
struct SQQuickPlaySearch_UpdateTags final
{
public:
	TArray<class FName>                           Tags;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1317[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQQuickPlaySearch_UpdateTags) == 0x000008, "Wrong alignment on SQQuickPlaySearch_UpdateTags");
static_assert(sizeof(SQQuickPlaySearch_UpdateTags) == 0x000018, "Wrong size on SQQuickPlaySearch_UpdateTags");
static_assert(offsetof(SQQuickPlaySearch_UpdateTags, Tags) == 0x000000, "Member 'SQQuickPlaySearch_UpdateTags::Tags' has a wrong offset!");
static_assert(offsetof(SQQuickPlaySearch_UpdateTags, ReturnValue) == 0x000010, "Member 'SQQuickPlaySearch_UpdateTags::ReturnValue' has a wrong offset!");

// Function Squad.SQQuickPlaySearch.IsSearching
// 0x0001 (0x0001 - 0x0000)
struct SQQuickPlaySearch_IsSearching final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQQuickPlaySearch_IsSearching) == 0x000001, "Wrong alignment on SQQuickPlaySearch_IsSearching");
static_assert(sizeof(SQQuickPlaySearch_IsSearching) == 0x000001, "Wrong size on SQQuickPlaySearch_IsSearching");
static_assert(offsetof(SQQuickPlaySearch_IsSearching, ReturnValue) == 0x000000, "Member 'SQQuickPlaySearch_IsSearching::ReturnValue' has a wrong offset!");

// Function Squad.SQRandomizer.BPFRandRange
// 0x000C (0x000C - 0x0000)
struct SQRandomizer_BPFRandRange final
{
public:
	float                                         Min;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRandomizer_BPFRandRange) == 0x000004, "Wrong alignment on SQRandomizer_BPFRandRange");
static_assert(sizeof(SQRandomizer_BPFRandRange) == 0x00000C, "Wrong size on SQRandomizer_BPFRandRange");
static_assert(offsetof(SQRandomizer_BPFRandRange, Min) == 0x000000, "Member 'SQRandomizer_BPFRandRange::Min' has a wrong offset!");
static_assert(offsetof(SQRandomizer_BPFRandRange, Max) == 0x000004, "Member 'SQRandomizer_BPFRandRange::Max' has a wrong offset!");
static_assert(offsetof(SQRandomizer_BPFRandRange, ReturnValue) == 0x000008, "Member 'SQRandomizer_BPFRandRange::ReturnValue' has a wrong offset!");

// Function Squad.SQRandomizer.BPRandColor
// 0x0050 (0x0050 - 0x0000)
struct SQRandomizer_BPRandColor final
{
public:
	struct FLinearColor                           BaseColor;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandomizeRed;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1321[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinRed;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRed;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandomizeGreen;                                   // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1322[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinGreen;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxGreen;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandomizeBlue;                                    // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1323[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinBlue;                                           // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxBlue;                                           // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandomizeAlpha;                                   // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1324[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinAlpha;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAlpha;                                          // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRandomizer_BPRandColor) == 0x000004, "Wrong alignment on SQRandomizer_BPRandColor");
static_assert(sizeof(SQRandomizer_BPRandColor) == 0x000050, "Wrong size on SQRandomizer_BPRandColor");
static_assert(offsetof(SQRandomizer_BPRandColor, BaseColor) == 0x000000, "Member 'SQRandomizer_BPRandColor::BaseColor' has a wrong offset!");
static_assert(offsetof(SQRandomizer_BPRandColor, bRandomizeRed) == 0x000010, "Member 'SQRandomizer_BPRandColor::bRandomizeRed' has a wrong offset!");
static_assert(offsetof(SQRandomizer_BPRandColor, MinRed) == 0x000014, "Member 'SQRandomizer_BPRandColor::MinRed' has a wrong offset!");
static_assert(offsetof(SQRandomizer_BPRandColor, MaxRed) == 0x000018, "Member 'SQRandomizer_BPRandColor::MaxRed' has a wrong offset!");
static_assert(offsetof(SQRandomizer_BPRandColor, bRandomizeGreen) == 0x00001C, "Member 'SQRandomizer_BPRandColor::bRandomizeGreen' has a wrong offset!");
static_assert(offsetof(SQRandomizer_BPRandColor, MinGreen) == 0x000020, "Member 'SQRandomizer_BPRandColor::MinGreen' has a wrong offset!");
static_assert(offsetof(SQRandomizer_BPRandColor, MaxGreen) == 0x000024, "Member 'SQRandomizer_BPRandColor::MaxGreen' has a wrong offset!");
static_assert(offsetof(SQRandomizer_BPRandColor, bRandomizeBlue) == 0x000028, "Member 'SQRandomizer_BPRandColor::bRandomizeBlue' has a wrong offset!");
static_assert(offsetof(SQRandomizer_BPRandColor, MinBlue) == 0x00002C, "Member 'SQRandomizer_BPRandColor::MinBlue' has a wrong offset!");
static_assert(offsetof(SQRandomizer_BPRandColor, MaxBlue) == 0x000030, "Member 'SQRandomizer_BPRandColor::MaxBlue' has a wrong offset!");
static_assert(offsetof(SQRandomizer_BPRandColor, bRandomizeAlpha) == 0x000034, "Member 'SQRandomizer_BPRandColor::bRandomizeAlpha' has a wrong offset!");
static_assert(offsetof(SQRandomizer_BPRandColor, MinAlpha) == 0x000038, "Member 'SQRandomizer_BPRandColor::MinAlpha' has a wrong offset!");
static_assert(offsetof(SQRandomizer_BPRandColor, MaxAlpha) == 0x00003C, "Member 'SQRandomizer_BPRandColor::MaxAlpha' has a wrong offset!");
static_assert(offsetof(SQRandomizer_BPRandColor, ReturnValue) == 0x000040, "Member 'SQRandomizer_BPRandColor::ReturnValue' has a wrong offset!");

// Function Squad.SQRandomizer.BPRandHSVColor
// 0x0050 (0x0050 - 0x0000)
struct SQRandomizer_BPRandHSVColor final
{
public:
	struct FLinearColor                           BaseColor;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandomizeHue;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1325[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinHue;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHue;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandomizeSaturation;                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1326[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinSaturation;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSaturation;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandomizeValue;                                   // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1327[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinValue;                                          // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandomizeAlpha;                                   // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1328[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinAlpha;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAlpha;                                          // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRandomizer_BPRandHSVColor) == 0x000004, "Wrong alignment on SQRandomizer_BPRandHSVColor");
static_assert(sizeof(SQRandomizer_BPRandHSVColor) == 0x000050, "Wrong size on SQRandomizer_BPRandHSVColor");
static_assert(offsetof(SQRandomizer_BPRandHSVColor, BaseColor) == 0x000000, "Member 'SQRandomizer_BPRandHSVColor::BaseColor' has a wrong offset!");
static_assert(offsetof(SQRandomizer_BPRandHSVColor, bRandomizeHue) == 0x000010, "Member 'SQRandomizer_BPRandHSVColor::bRandomizeHue' has a wrong offset!");
static_assert(offsetof(SQRandomizer_BPRandHSVColor, MinHue) == 0x000014, "Member 'SQRandomizer_BPRandHSVColor::MinHue' has a wrong offset!");
static_assert(offsetof(SQRandomizer_BPRandHSVColor, MaxHue) == 0x000018, "Member 'SQRandomizer_BPRandHSVColor::MaxHue' has a wrong offset!");
static_assert(offsetof(SQRandomizer_BPRandHSVColor, bRandomizeSaturation) == 0x00001C, "Member 'SQRandomizer_BPRandHSVColor::bRandomizeSaturation' has a wrong offset!");
static_assert(offsetof(SQRandomizer_BPRandHSVColor, MinSaturation) == 0x000020, "Member 'SQRandomizer_BPRandHSVColor::MinSaturation' has a wrong offset!");
static_assert(offsetof(SQRandomizer_BPRandHSVColor, MaxSaturation) == 0x000024, "Member 'SQRandomizer_BPRandHSVColor::MaxSaturation' has a wrong offset!");
static_assert(offsetof(SQRandomizer_BPRandHSVColor, bRandomizeValue) == 0x000028, "Member 'SQRandomizer_BPRandHSVColor::bRandomizeValue' has a wrong offset!");
static_assert(offsetof(SQRandomizer_BPRandHSVColor, MinValue) == 0x00002C, "Member 'SQRandomizer_BPRandHSVColor::MinValue' has a wrong offset!");
static_assert(offsetof(SQRandomizer_BPRandHSVColor, MaxValue) == 0x000030, "Member 'SQRandomizer_BPRandHSVColor::MaxValue' has a wrong offset!");
static_assert(offsetof(SQRandomizer_BPRandHSVColor, bRandomizeAlpha) == 0x000034, "Member 'SQRandomizer_BPRandHSVColor::bRandomizeAlpha' has a wrong offset!");
static_assert(offsetof(SQRandomizer_BPRandHSVColor, MinAlpha) == 0x000038, "Member 'SQRandomizer_BPRandHSVColor::MinAlpha' has a wrong offset!");
static_assert(offsetof(SQRandomizer_BPRandHSVColor, MaxAlpha) == 0x00003C, "Member 'SQRandomizer_BPRandHSVColor::MaxAlpha' has a wrong offset!");
static_assert(offsetof(SQRandomizer_BPRandHSVColor, ReturnValue) == 0x000040, "Member 'SQRandomizer_BPRandHSVColor::ReturnValue' has a wrong offset!");

// Function Squad.SQRandomizer.BPRandRange
// 0x000C (0x000C - 0x0000)
struct SQRandomizer_BPRandRange final
{
public:
	int32                                         Min;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRandomizer_BPRandRange) == 0x000004, "Wrong alignment on SQRandomizer_BPRandRange");
static_assert(sizeof(SQRandomizer_BPRandRange) == 0x00000C, "Wrong size on SQRandomizer_BPRandRange");
static_assert(offsetof(SQRandomizer_BPRandRange, Min) == 0x000000, "Member 'SQRandomizer_BPRandRange::Min' has a wrong offset!");
static_assert(offsetof(SQRandomizer_BPRandRange, Max) == 0x000004, "Member 'SQRandomizer_BPRandRange::Max' has a wrong offset!");
static_assert(offsetof(SQRandomizer_BPRandRange, ReturnValue) == 0x000008, "Member 'SQRandomizer_BPRandRange::ReturnValue' has a wrong offset!");

// Function Squad.SQSteamInventoryUIBlueprintFunctionLibrary.GetSteamInventory
// 0x0010 (0x0010 - 0x0000)
struct SQSteamInventoryUIBlueprintFunctionLibrary_GetSteamInventory final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQSteamInventoryUI*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSteamInventoryUIBlueprintFunctionLibrary_GetSteamInventory) == 0x000008, "Wrong alignment on SQSteamInventoryUIBlueprintFunctionLibrary_GetSteamInventory");
static_assert(sizeof(SQSteamInventoryUIBlueprintFunctionLibrary_GetSteamInventory) == 0x000010, "Wrong size on SQSteamInventoryUIBlueprintFunctionLibrary_GetSteamInventory");
static_assert(offsetof(SQSteamInventoryUIBlueprintFunctionLibrary_GetSteamInventory, WorldContextObject) == 0x000000, "Member 'SQSteamInventoryUIBlueprintFunctionLibrary_GetSteamInventory::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQSteamInventoryUIBlueprintFunctionLibrary_GetSteamInventory, ReturnValue) == 0x000008, "Member 'SQSteamInventoryUIBlueprintFunctionLibrary_GetSteamInventory::ReturnValue' has a wrong offset!");

// Function Squad.SQRandomizer_StaticMesh.SetMesh
// 0x0004 (0x0004 - 0x0000)
struct SQRandomizer_StaticMesh_SetMesh final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRandomizer_StaticMesh_SetMesh) == 0x000004, "Wrong alignment on SQRandomizer_StaticMesh_SetMesh");
static_assert(sizeof(SQRandomizer_StaticMesh_SetMesh) == 0x000004, "Wrong size on SQRandomizer_StaticMesh_SetMesh");
static_assert(offsetof(SQRandomizer_StaticMesh_SetMesh, Param_Index) == 0x000000, "Member 'SQRandomizer_StaticMesh_SetMesh::Param_Index' has a wrong offset!");

// Function Squad.SQRepairTool.ServerStartRepairing
// 0x0008 (0x0008 - 0x0000)
struct SQRepairTool_ServerStartRepairing final
{
public:
	class ASQVehicle*                             RepairedVehicle;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRepairTool_ServerStartRepairing) == 0x000008, "Wrong alignment on SQRepairTool_ServerStartRepairing");
static_assert(sizeof(SQRepairTool_ServerStartRepairing) == 0x000008, "Wrong size on SQRepairTool_ServerStartRepairing");
static_assert(offsetof(SQRepairTool_ServerStartRepairing, RepairedVehicle) == 0x000000, "Member 'SQRepairTool_ServerStartRepairing::RepairedVehicle' has a wrong offset!");

// Function Squad.SQReplaySubsystem.IsValidReplayPath
// 0x0018 (0x0018 - 0x0000)
struct SQReplaySubsystem_IsValidReplayPath final
{
public:
	class FString                                 ReplayPath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1331[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQReplaySubsystem_IsValidReplayPath) == 0x000008, "Wrong alignment on SQReplaySubsystem_IsValidReplayPath");
static_assert(sizeof(SQReplaySubsystem_IsValidReplayPath) == 0x000018, "Wrong size on SQReplaySubsystem_IsValidReplayPath");
static_assert(offsetof(SQReplaySubsystem_IsValidReplayPath, ReplayPath) == 0x000000, "Member 'SQReplaySubsystem_IsValidReplayPath::ReplayPath' has a wrong offset!");
static_assert(offsetof(SQReplaySubsystem_IsValidReplayPath, ReturnValue) == 0x000010, "Member 'SQReplaySubsystem_IsValidReplayPath::ReturnValue' has a wrong offset!");

// Function Squad.SQReplaySubsystem.DeleteReplay
// 0x0018 (0x0018 - 0x0000)
struct SQReplaySubsystem_DeleteReplay final
{
public:
	class FString                                 ReplayPath;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNamedReplay;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1332[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQReplaySubsystem_DeleteReplay) == 0x000008, "Wrong alignment on SQReplaySubsystem_DeleteReplay");
static_assert(sizeof(SQReplaySubsystem_DeleteReplay) == 0x000018, "Wrong size on SQReplaySubsystem_DeleteReplay");
static_assert(offsetof(SQReplaySubsystem_DeleteReplay, ReplayPath) == 0x000000, "Member 'SQReplaySubsystem_DeleteReplay::ReplayPath' has a wrong offset!");
static_assert(offsetof(SQReplaySubsystem_DeleteReplay, bIsNamedReplay) == 0x000010, "Member 'SQReplaySubsystem_DeleteReplay::bIsNamedReplay' has a wrong offset!");
static_assert(offsetof(SQReplaySubsystem_DeleteReplay, ReturnValue) == 0x000011, "Member 'SQReplaySubsystem_DeleteReplay::ReturnValue' has a wrong offset!");

// Function Squad.SQReplaySubsystem.GetListOfDatedReplays
// 0x0018 (0x0018 - 0x0000)
struct SQReplaySubsystem_GetListOfDatedReplays final
{
public:
	TArray<class FString>                         OutReplayPaths;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIncludePath;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeExtension;                                 // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1333[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQReplaySubsystem_GetListOfDatedReplays) == 0x000008, "Wrong alignment on SQReplaySubsystem_GetListOfDatedReplays");
static_assert(sizeof(SQReplaySubsystem_GetListOfDatedReplays) == 0x000018, "Wrong size on SQReplaySubsystem_GetListOfDatedReplays");
static_assert(offsetof(SQReplaySubsystem_GetListOfDatedReplays, OutReplayPaths) == 0x000000, "Member 'SQReplaySubsystem_GetListOfDatedReplays::OutReplayPaths' has a wrong offset!");
static_assert(offsetof(SQReplaySubsystem_GetListOfDatedReplays, bIncludePath) == 0x000010, "Member 'SQReplaySubsystem_GetListOfDatedReplays::bIncludePath' has a wrong offset!");
static_assert(offsetof(SQReplaySubsystem_GetListOfDatedReplays, bIncludeExtension) == 0x000011, "Member 'SQReplaySubsystem_GetListOfDatedReplays::bIncludeExtension' has a wrong offset!");

// Function Squad.SQReplaySubsystem.GetListOfNamedReplays
// 0x0018 (0x0018 - 0x0000)
struct SQReplaySubsystem_GetListOfNamedReplays final
{
public:
	TArray<class FString>                         OutReplayPaths;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bIncludePath;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeExtension;                                 // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1334[0x6];                                     // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQReplaySubsystem_GetListOfNamedReplays) == 0x000008, "Wrong alignment on SQReplaySubsystem_GetListOfNamedReplays");
static_assert(sizeof(SQReplaySubsystem_GetListOfNamedReplays) == 0x000018, "Wrong size on SQReplaySubsystem_GetListOfNamedReplays");
static_assert(offsetof(SQReplaySubsystem_GetListOfNamedReplays, OutReplayPaths) == 0x000000, "Member 'SQReplaySubsystem_GetListOfNamedReplays::OutReplayPaths' has a wrong offset!");
static_assert(offsetof(SQReplaySubsystem_GetListOfNamedReplays, bIncludePath) == 0x000010, "Member 'SQReplaySubsystem_GetListOfNamedReplays::bIncludePath' has a wrong offset!");
static_assert(offsetof(SQReplaySubsystem_GetListOfNamedReplays, bIncludeExtension) == 0x000011, "Member 'SQReplaySubsystem_GetListOfNamedReplays::bIncludeExtension' has a wrong offset!");

// Function Squad.SQReplaySubsystem.NameDatedReplay
// 0x0028 (0x0028 - 0x0000)
struct SQReplaySubsystem_NameDatedReplay final
{
public:
	class FString                                 ReplayName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewReplayName;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQRenameReplayResponse                       ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1335[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQReplaySubsystem_NameDatedReplay) == 0x000008, "Wrong alignment on SQReplaySubsystem_NameDatedReplay");
static_assert(sizeof(SQReplaySubsystem_NameDatedReplay) == 0x000028, "Wrong size on SQReplaySubsystem_NameDatedReplay");
static_assert(offsetof(SQReplaySubsystem_NameDatedReplay, ReplayName) == 0x000000, "Member 'SQReplaySubsystem_NameDatedReplay::ReplayName' has a wrong offset!");
static_assert(offsetof(SQReplaySubsystem_NameDatedReplay, NewReplayName) == 0x000010, "Member 'SQReplaySubsystem_NameDatedReplay::NewReplayName' has a wrong offset!");
static_assert(offsetof(SQReplaySubsystem_NameDatedReplay, ReturnValue) == 0x000020, "Member 'SQReplaySubsystem_NameDatedReplay::ReturnValue' has a wrong offset!");

// Function Squad.SQReplaySubsystem.PlayExistingReplay
// 0x0018 (0x0018 - 0x0000)
struct SQReplaySubsystem_PlayExistingReplay final
{
public:
	class FString                                 ReplayToPlay;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNamedReplay;                                    // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1336[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQReplaySubsystem_PlayExistingReplay) == 0x000008, "Wrong alignment on SQReplaySubsystem_PlayExistingReplay");
static_assert(sizeof(SQReplaySubsystem_PlayExistingReplay) == 0x000018, "Wrong size on SQReplaySubsystem_PlayExistingReplay");
static_assert(offsetof(SQReplaySubsystem_PlayExistingReplay, ReplayToPlay) == 0x000000, "Member 'SQReplaySubsystem_PlayExistingReplay::ReplayToPlay' has a wrong offset!");
static_assert(offsetof(SQReplaySubsystem_PlayExistingReplay, bIsNamedReplay) == 0x000010, "Member 'SQReplaySubsystem_PlayExistingReplay::bIsNamedReplay' has a wrong offset!");

// Function Squad.SQReplaySubsystem.RenameNamedReplay
// 0x0028 (0x0028 - 0x0000)
struct SQReplaySubsystem_RenameNamedReplay final
{
public:
	class FString                                 ReplayName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewReplayName;                                     // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQRenameReplayResponse                       ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1337[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQReplaySubsystem_RenameNamedReplay) == 0x000008, "Wrong alignment on SQReplaySubsystem_RenameNamedReplay");
static_assert(sizeof(SQReplaySubsystem_RenameNamedReplay) == 0x000028, "Wrong size on SQReplaySubsystem_RenameNamedReplay");
static_assert(offsetof(SQReplaySubsystem_RenameNamedReplay, ReplayName) == 0x000000, "Member 'SQReplaySubsystem_RenameNamedReplay::ReplayName' has a wrong offset!");
static_assert(offsetof(SQReplaySubsystem_RenameNamedReplay, NewReplayName) == 0x000010, "Member 'SQReplaySubsystem_RenameNamedReplay::NewReplayName' has a wrong offset!");
static_assert(offsetof(SQReplaySubsystem_RenameNamedReplay, ReturnValue) == 0x000020, "Member 'SQReplaySubsystem_RenameNamedReplay::ReturnValue' has a wrong offset!");

// Function Squad.SQReplaySubsystem.StartRecordingDatedReplay
// 0x0001 (0x0001 - 0x0000)
struct SQReplaySubsystem_StartRecordingDatedReplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQReplaySubsystem_StartRecordingDatedReplay) == 0x000001, "Wrong alignment on SQReplaySubsystem_StartRecordingDatedReplay");
static_assert(sizeof(SQReplaySubsystem_StartRecordingDatedReplay) == 0x000001, "Wrong size on SQReplaySubsystem_StartRecordingDatedReplay");
static_assert(offsetof(SQReplaySubsystem_StartRecordingDatedReplay, ReturnValue) == 0x000000, "Member 'SQReplaySubsystem_StartRecordingDatedReplay::ReturnValue' has a wrong offset!");

// Function Squad.SQReplaySubsystem.StartRecordingNamedReplay
// 0x0018 (0x0018 - 0x0000)
struct SQReplaySubsystem_StartRecordingNamedReplay final
{
public:
	class FString                                 ReplayName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1338[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQReplaySubsystem_StartRecordingNamedReplay) == 0x000008, "Wrong alignment on SQReplaySubsystem_StartRecordingNamedReplay");
static_assert(sizeof(SQReplaySubsystem_StartRecordingNamedReplay) == 0x000018, "Wrong size on SQReplaySubsystem_StartRecordingNamedReplay");
static_assert(offsetof(SQReplaySubsystem_StartRecordingNamedReplay, ReplayName) == 0x000000, "Member 'SQReplaySubsystem_StartRecordingNamedReplay::ReplayName' has a wrong offset!");
static_assert(offsetof(SQReplaySubsystem_StartRecordingNamedReplay, ReturnValue) == 0x000010, "Member 'SQReplaySubsystem_StartRecordingNamedReplay::ReturnValue' has a wrong offset!");

// Function Squad.SQReplaySubsystem.CanRecordOnServer
// 0x0001 (0x0001 - 0x0000)
struct SQReplaySubsystem_CanRecordOnServer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQReplaySubsystem_CanRecordOnServer) == 0x000001, "Wrong alignment on SQReplaySubsystem_CanRecordOnServer");
static_assert(sizeof(SQReplaySubsystem_CanRecordOnServer) == 0x000001, "Wrong size on SQReplaySubsystem_CanRecordOnServer");
static_assert(offsetof(SQReplaySubsystem_CanRecordOnServer, ReturnValue) == 0x000000, "Member 'SQReplaySubsystem_CanRecordOnServer::ReturnValue' has a wrong offset!");

// Function Squad.SQReplaySubsystem.GetIsRecording
// 0x0001 (0x0001 - 0x0000)
struct SQReplaySubsystem_GetIsRecording final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQReplaySubsystem_GetIsRecording) == 0x000001, "Wrong alignment on SQReplaySubsystem_GetIsRecording");
static_assert(sizeof(SQReplaySubsystem_GetIsRecording) == 0x000001, "Wrong size on SQReplaySubsystem_GetIsRecording");
static_assert(offsetof(SQReplaySubsystem_GetIsRecording, ReturnValue) == 0x000000, "Member 'SQReplaySubsystem_GetIsRecording::ReturnValue' has a wrong offset!");

// Function Squad.SQRestriction_Cost.CanPlayerBuy
// 0x0020 (0x0020 - 0x0000)
struct SQRestriction_Cost_CanPlayerBuy final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    OutRestrictionReason;                              // 0x0008(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1340[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRestriction_Cost_CanPlayerBuy) == 0x000008, "Wrong alignment on SQRestriction_Cost_CanPlayerBuy");
static_assert(sizeof(SQRestriction_Cost_CanPlayerBuy) == 0x000020, "Wrong size on SQRestriction_Cost_CanPlayerBuy");
static_assert(offsetof(SQRestriction_Cost_CanPlayerBuy, InPlayer) == 0x000000, "Member 'SQRestriction_Cost_CanPlayerBuy::InPlayer' has a wrong offset!");
static_assert(offsetof(SQRestriction_Cost_CanPlayerBuy, OutRestrictionReason) == 0x000008, "Member 'SQRestriction_Cost_CanPlayerBuy::OutRestrictionReason' has a wrong offset!");
static_assert(offsetof(SQRestriction_Cost_CanPlayerBuy, ReturnValue) == 0x000018, "Member 'SQRestriction_Cost_CanPlayerBuy::ReturnValue' has a wrong offset!");

// Function Squad.SQRestriction_Cost.CanTeamBuy
// 0x0020 (0x0020 - 0x0000)
struct SQRestriction_Cost_CanTeamBuy final
{
public:
	class ASQTeam*                                InTeam;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    OutRestrictionReason;                              // 0x0008(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1341[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRestriction_Cost_CanTeamBuy) == 0x000008, "Wrong alignment on SQRestriction_Cost_CanTeamBuy");
static_assert(sizeof(SQRestriction_Cost_CanTeamBuy) == 0x000020, "Wrong size on SQRestriction_Cost_CanTeamBuy");
static_assert(offsetof(SQRestriction_Cost_CanTeamBuy, InTeam) == 0x000000, "Member 'SQRestriction_Cost_CanTeamBuy::InTeam' has a wrong offset!");
static_assert(offsetof(SQRestriction_Cost_CanTeamBuy, OutRestrictionReason) == 0x000008, "Member 'SQRestriction_Cost_CanTeamBuy::OutRestrictionReason' has a wrong offset!");
static_assert(offsetof(SQRestriction_Cost_CanTeamBuy, ReturnValue) == 0x000018, "Member 'SQRestriction_Cost_CanTeamBuy::ReturnValue' has a wrong offset!");

// Function Squad.SQRestriction_Cost.HasPlayerBasedCost
// 0x0001 (0x0001 - 0x0000)
struct SQRestriction_Cost_HasPlayerBasedCost final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRestriction_Cost_HasPlayerBasedCost) == 0x000001, "Wrong alignment on SQRestriction_Cost_HasPlayerBasedCost");
static_assert(sizeof(SQRestriction_Cost_HasPlayerBasedCost) == 0x000001, "Wrong size on SQRestriction_Cost_HasPlayerBasedCost");
static_assert(offsetof(SQRestriction_Cost_HasPlayerBasedCost, ReturnValue) == 0x000000, "Member 'SQRestriction_Cost_HasPlayerBasedCost::ReturnValue' has a wrong offset!");

// Function Squad.SQRestriction_Cost.HasTeamBasedCost
// 0x0001 (0x0001 - 0x0000)
struct SQRestriction_Cost_HasTeamBasedCost final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRestriction_Cost_HasTeamBasedCost) == 0x000001, "Wrong alignment on SQRestriction_Cost_HasTeamBasedCost");
static_assert(sizeof(SQRestriction_Cost_HasTeamBasedCost) == 0x000001, "Wrong size on SQRestriction_Cost_HasTeamBasedCost");
static_assert(offsetof(SQRestriction_Cost_HasTeamBasedCost, ReturnValue) == 0x000000, "Member 'SQRestriction_Cost_HasTeamBasedCost::ReturnValue' has a wrong offset!");

// Function Squad.SQRestriction_Cost.PayCostForPlayer
// 0x0008 (0x0008 - 0x0000)
struct SQRestriction_Cost_PayCostForPlayer final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRestriction_Cost_PayCostForPlayer) == 0x000008, "Wrong alignment on SQRestriction_Cost_PayCostForPlayer");
static_assert(sizeof(SQRestriction_Cost_PayCostForPlayer) == 0x000008, "Wrong size on SQRestriction_Cost_PayCostForPlayer");
static_assert(offsetof(SQRestriction_Cost_PayCostForPlayer, InPlayer) == 0x000000, "Member 'SQRestriction_Cost_PayCostForPlayer::InPlayer' has a wrong offset!");

// Function Squad.SQRestriction_Cost.PayCostForTeam
// 0x0008 (0x0008 - 0x0000)
struct SQRestriction_Cost_PayCostForTeam final
{
public:
	class ASQTeam*                                InTeam;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRestriction_Cost_PayCostForTeam) == 0x000008, "Wrong alignment on SQRestriction_Cost_PayCostForTeam");
static_assert(sizeof(SQRestriction_Cost_PayCostForTeam) == 0x000008, "Wrong size on SQRestriction_Cost_PayCostForTeam");
static_assert(offsetof(SQRestriction_Cost_PayCostForTeam, InTeam) == 0x000000, "Member 'SQRestriction_Cost_PayCostForTeam::InTeam' has a wrong offset!");

// Function Squad.SQRestriction_Cost.RefundCostForPlayer
// 0x0010 (0x0010 - 0x0000)
struct SQRestriction_Cost_RefundCostForPlayer final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPercentage;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1342[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRestriction_Cost_RefundCostForPlayer) == 0x000008, "Wrong alignment on SQRestriction_Cost_RefundCostForPlayer");
static_assert(sizeof(SQRestriction_Cost_RefundCostForPlayer) == 0x000010, "Wrong size on SQRestriction_Cost_RefundCostForPlayer");
static_assert(offsetof(SQRestriction_Cost_RefundCostForPlayer, InPlayer) == 0x000000, "Member 'SQRestriction_Cost_RefundCostForPlayer::InPlayer' has a wrong offset!");
static_assert(offsetof(SQRestriction_Cost_RefundCostForPlayer, InPercentage) == 0x000008, "Member 'SQRestriction_Cost_RefundCostForPlayer::InPercentage' has a wrong offset!");

// Function Squad.SQRestriction_Cost.RefundCostForTeam
// 0x0010 (0x0010 - 0x0000)
struct SQRestriction_Cost_RefundCostForTeam final
{
public:
	class ASQTeam*                                InTeam;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPercentage;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1343[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRestriction_Cost_RefundCostForTeam) == 0x000008, "Wrong alignment on SQRestriction_Cost_RefundCostForTeam");
static_assert(sizeof(SQRestriction_Cost_RefundCostForTeam) == 0x000010, "Wrong size on SQRestriction_Cost_RefundCostForTeam");
static_assert(offsetof(SQRestriction_Cost_RefundCostForTeam, InTeam) == 0x000000, "Member 'SQRestriction_Cost_RefundCostForTeam::InTeam' has a wrong offset!");
static_assert(offsetof(SQRestriction_Cost_RefundCostForTeam, InPercentage) == 0x000008, "Member 'SQRestriction_Cost_RefundCostForTeam::InPercentage' has a wrong offset!");

// Function Squad.SQRestriction_Count.GetAvailabilityForPlayer
// 0x0020 (0x0020 - 0x0000)
struct SQRestriction_Count_GetAvailabilityForPlayer final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutAvailable;                                      // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1347[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    OutRestrictionReason;                              // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRestriction_Count_GetAvailabilityForPlayer) == 0x000008, "Wrong alignment on SQRestriction_Count_GetAvailabilityForPlayer");
static_assert(sizeof(SQRestriction_Count_GetAvailabilityForPlayer) == 0x000020, "Wrong size on SQRestriction_Count_GetAvailabilityForPlayer");
static_assert(offsetof(SQRestriction_Count_GetAvailabilityForPlayer, InPlayer) == 0x000000, "Member 'SQRestriction_Count_GetAvailabilityForPlayer::InPlayer' has a wrong offset!");
static_assert(offsetof(SQRestriction_Count_GetAvailabilityForPlayer, OutAvailable) == 0x000008, "Member 'SQRestriction_Count_GetAvailabilityForPlayer::OutAvailable' has a wrong offset!");
static_assert(offsetof(SQRestriction_Count_GetAvailabilityForPlayer, OutRestrictionReason) == 0x000010, "Member 'SQRestriction_Count_GetAvailabilityForPlayer::OutRestrictionReason' has a wrong offset!");

// Function Squad.SQRestriction_Count.GetAvailabilityForTeam
// 0x0020 (0x0020 - 0x0000)
struct SQRestriction_Count_GetAvailabilityForTeam final
{
public:
	class ASQTeam*                                InTeam;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutAvailable;                                      // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1348[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    OutRestrictionReason;                              // 0x0010(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRestriction_Count_GetAvailabilityForTeam) == 0x000008, "Wrong alignment on SQRestriction_Count_GetAvailabilityForTeam");
static_assert(sizeof(SQRestriction_Count_GetAvailabilityForTeam) == 0x000020, "Wrong size on SQRestriction_Count_GetAvailabilityForTeam");
static_assert(offsetof(SQRestriction_Count_GetAvailabilityForTeam, InTeam) == 0x000000, "Member 'SQRestriction_Count_GetAvailabilityForTeam::InTeam' has a wrong offset!");
static_assert(offsetof(SQRestriction_Count_GetAvailabilityForTeam, OutAvailable) == 0x000008, "Member 'SQRestriction_Count_GetAvailabilityForTeam::OutAvailable' has a wrong offset!");
static_assert(offsetof(SQRestriction_Count_GetAvailabilityForTeam, OutRestrictionReason) == 0x000010, "Member 'SQRestriction_Count_GetAvailabilityForTeam::OutRestrictionReason' has a wrong offset!");

// Function Squad.SQRestriction_Count.OnPlayerAddUsage
// 0x0010 (0x0010 - 0x0000)
struct SQRestriction_Count_OnPlayerAddUsage final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutAddedUsage;                                     // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1349[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRestriction_Count_OnPlayerAddUsage) == 0x000008, "Wrong alignment on SQRestriction_Count_OnPlayerAddUsage");
static_assert(sizeof(SQRestriction_Count_OnPlayerAddUsage) == 0x000010, "Wrong size on SQRestriction_Count_OnPlayerAddUsage");
static_assert(offsetof(SQRestriction_Count_OnPlayerAddUsage, InPlayer) == 0x000000, "Member 'SQRestriction_Count_OnPlayerAddUsage::InPlayer' has a wrong offset!");
static_assert(offsetof(SQRestriction_Count_OnPlayerAddUsage, OutAddedUsage) == 0x000008, "Member 'SQRestriction_Count_OnPlayerAddUsage::OutAddedUsage' has a wrong offset!");

// Function Squad.SQRestriction_Count.OnPlayerRemoveUsage
// 0x0010 (0x0010 - 0x0000)
struct SQRestriction_Count_OnPlayerRemoveUsage final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutRemovedUsage;                                   // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134A[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRestriction_Count_OnPlayerRemoveUsage) == 0x000008, "Wrong alignment on SQRestriction_Count_OnPlayerRemoveUsage");
static_assert(sizeof(SQRestriction_Count_OnPlayerRemoveUsage) == 0x000010, "Wrong size on SQRestriction_Count_OnPlayerRemoveUsage");
static_assert(offsetof(SQRestriction_Count_OnPlayerRemoveUsage, InPlayer) == 0x000000, "Member 'SQRestriction_Count_OnPlayerRemoveUsage::InPlayer' has a wrong offset!");
static_assert(offsetof(SQRestriction_Count_OnPlayerRemoveUsage, OutRemovedUsage) == 0x000008, "Member 'SQRestriction_Count_OnPlayerRemoveUsage::OutRemovedUsage' has a wrong offset!");

// Function Squad.SQRestriction_Count.OnTeamAddUsage
// 0x0010 (0x0010 - 0x0000)
struct SQRestriction_Count_OnTeamAddUsage final
{
public:
	class ASQTeam*                                InTeam;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutAddedUsage;                                     // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134B[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRestriction_Count_OnTeamAddUsage) == 0x000008, "Wrong alignment on SQRestriction_Count_OnTeamAddUsage");
static_assert(sizeof(SQRestriction_Count_OnTeamAddUsage) == 0x000010, "Wrong size on SQRestriction_Count_OnTeamAddUsage");
static_assert(offsetof(SQRestriction_Count_OnTeamAddUsage, InTeam) == 0x000000, "Member 'SQRestriction_Count_OnTeamAddUsage::InTeam' has a wrong offset!");
static_assert(offsetof(SQRestriction_Count_OnTeamAddUsage, OutAddedUsage) == 0x000008, "Member 'SQRestriction_Count_OnTeamAddUsage::OutAddedUsage' has a wrong offset!");

// Function Squad.SQRestriction_Count.OnTeamRemoveUsage
// 0x0010 (0x0010 - 0x0000)
struct SQRestriction_Count_OnTeamRemoveUsage final
{
public:
	class ASQTeam*                                InTeam;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutRemovedUsage;                                   // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134C[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRestriction_Count_OnTeamRemoveUsage) == 0x000008, "Wrong alignment on SQRestriction_Count_OnTeamRemoveUsage");
static_assert(sizeof(SQRestriction_Count_OnTeamRemoveUsage) == 0x000010, "Wrong size on SQRestriction_Count_OnTeamRemoveUsage");
static_assert(offsetof(SQRestriction_Count_OnTeamRemoveUsage, InTeam) == 0x000000, "Member 'SQRestriction_Count_OnTeamRemoveUsage::InTeam' has a wrong offset!");
static_assert(offsetof(SQRestriction_Count_OnTeamRemoveUsage, OutRemovedUsage) == 0x000008, "Member 'SQRestriction_Count_OnTeamRemoveUsage::OutRemovedUsage' has a wrong offset!");

// Function Squad.SQRestriction_DeployableInRange.IsAuthorizedWithDeployableInRange
// 0x0018 (0x0018 - 0x0000)
struct SQRestriction_DeployableInRange_IsAuthorizedWithDeployableInRange final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASQDeployable*                    InDeployableInRange;                               // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134F[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRestriction_DeployableInRange_IsAuthorizedWithDeployableInRange) == 0x000008, "Wrong alignment on SQRestriction_DeployableInRange_IsAuthorizedWithDeployableInRange");
static_assert(sizeof(SQRestriction_DeployableInRange_IsAuthorizedWithDeployableInRange) == 0x000018, "Wrong size on SQRestriction_DeployableInRange_IsAuthorizedWithDeployableInRange");
static_assert(offsetof(SQRestriction_DeployableInRange_IsAuthorizedWithDeployableInRange, InPlayer) == 0x000000, "Member 'SQRestriction_DeployableInRange_IsAuthorizedWithDeployableInRange::InPlayer' has a wrong offset!");
static_assert(offsetof(SQRestriction_DeployableInRange_IsAuthorizedWithDeployableInRange, InDeployableInRange) == 0x000008, "Member 'SQRestriction_DeployableInRange_IsAuthorizedWithDeployableInRange::InDeployableInRange' has a wrong offset!");
static_assert(offsetof(SQRestriction_DeployableInRange_IsAuthorizedWithDeployableInRange, ReturnValue) == 0x000010, "Member 'SQRestriction_DeployableInRange_IsAuthorizedWithDeployableInRange::ReturnValue' has a wrong offset!");

// Function Squad.SQRestriction_DeployableInRange.IsRestrictedWithDeployablesInRange
// 0x0020 (0x0020 - 0x0000)
struct SQRestriction_DeployableInRange_IsRestrictedWithDeployablesInRange final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ASQDeployable*>                  InDeployablesInRange;                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1350[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRestriction_DeployableInRange_IsRestrictedWithDeployablesInRange) == 0x000008, "Wrong alignment on SQRestriction_DeployableInRange_IsRestrictedWithDeployablesInRange");
static_assert(sizeof(SQRestriction_DeployableInRange_IsRestrictedWithDeployablesInRange) == 0x000020, "Wrong size on SQRestriction_DeployableInRange_IsRestrictedWithDeployablesInRange");
static_assert(offsetof(SQRestriction_DeployableInRange_IsRestrictedWithDeployablesInRange, InPlayer) == 0x000000, "Member 'SQRestriction_DeployableInRange_IsRestrictedWithDeployablesInRange::InPlayer' has a wrong offset!");
static_assert(offsetof(SQRestriction_DeployableInRange_IsRestrictedWithDeployablesInRange, InDeployablesInRange) == 0x000008, "Member 'SQRestriction_DeployableInRange_IsRestrictedWithDeployablesInRange::InDeployablesInRange' has a wrong offset!");
static_assert(offsetof(SQRestriction_DeployableInRange_IsRestrictedWithDeployablesInRange, ReturnValue) == 0x000018, "Member 'SQRestriction_DeployableInRange_IsRestrictedWithDeployablesInRange::ReturnValue' has a wrong offset!");

// Function Squad.SQRestriction_PlayerInRange.IsAuthorizedWithPlayerInRange
// 0x0018 (0x0018 - 0x0000)
struct SQRestriction_PlayerInRange_IsAuthorizedWithPlayerInRange final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASQPlayerState*                   InPlayerInRange;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1353[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRestriction_PlayerInRange_IsAuthorizedWithPlayerInRange) == 0x000008, "Wrong alignment on SQRestriction_PlayerInRange_IsAuthorizedWithPlayerInRange");
static_assert(sizeof(SQRestriction_PlayerInRange_IsAuthorizedWithPlayerInRange) == 0x000018, "Wrong size on SQRestriction_PlayerInRange_IsAuthorizedWithPlayerInRange");
static_assert(offsetof(SQRestriction_PlayerInRange_IsAuthorizedWithPlayerInRange, InPlayer) == 0x000000, "Member 'SQRestriction_PlayerInRange_IsAuthorizedWithPlayerInRange::InPlayer' has a wrong offset!");
static_assert(offsetof(SQRestriction_PlayerInRange_IsAuthorizedWithPlayerInRange, InPlayerInRange) == 0x000008, "Member 'SQRestriction_PlayerInRange_IsAuthorizedWithPlayerInRange::InPlayerInRange' has a wrong offset!");
static_assert(offsetof(SQRestriction_PlayerInRange_IsAuthorizedWithPlayerInRange, ReturnValue) == 0x000010, "Member 'SQRestriction_PlayerInRange_IsAuthorizedWithPlayerInRange::ReturnValue' has a wrong offset!");

// Function Squad.SQRestriction_PlayerInRange.IsRestrictedWithPlayersInRange
// 0x0020 (0x0020 - 0x0000)
struct SQRestriction_PlayerInRange_IsRestrictedWithPlayersInRange final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ASQPlayerState*>                 InPlayersInRange;                                  // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1354[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRestriction_PlayerInRange_IsRestrictedWithPlayersInRange) == 0x000008, "Wrong alignment on SQRestriction_PlayerInRange_IsRestrictedWithPlayersInRange");
static_assert(sizeof(SQRestriction_PlayerInRange_IsRestrictedWithPlayersInRange) == 0x000020, "Wrong size on SQRestriction_PlayerInRange_IsRestrictedWithPlayersInRange");
static_assert(offsetof(SQRestriction_PlayerInRange_IsRestrictedWithPlayersInRange, InPlayer) == 0x000000, "Member 'SQRestriction_PlayerInRange_IsRestrictedWithPlayersInRange::InPlayer' has a wrong offset!");
static_assert(offsetof(SQRestriction_PlayerInRange_IsRestrictedWithPlayersInRange, InPlayersInRange) == 0x000008, "Member 'SQRestriction_PlayerInRange_IsRestrictedWithPlayersInRange::InPlayersInRange' has a wrong offset!");
static_assert(offsetof(SQRestriction_PlayerInRange_IsRestrictedWithPlayersInRange, ReturnValue) == 0x000018, "Member 'SQRestriction_PlayerInRange_IsRestrictedWithPlayersInRange::ReturnValue' has a wrong offset!");

// Function Squad.SQRestriction_VehicleInRange.IsAuthorizedWithVehicleInRange
// 0x0018 (0x0018 - 0x0000)
struct SQRestriction_VehicleInRange_IsAuthorizedWithVehicleInRange final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASQVehicle*                       InVehicleInRange;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1357[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRestriction_VehicleInRange_IsAuthorizedWithVehicleInRange) == 0x000008, "Wrong alignment on SQRestriction_VehicleInRange_IsAuthorizedWithVehicleInRange");
static_assert(sizeof(SQRestriction_VehicleInRange_IsAuthorizedWithVehicleInRange) == 0x000018, "Wrong size on SQRestriction_VehicleInRange_IsAuthorizedWithVehicleInRange");
static_assert(offsetof(SQRestriction_VehicleInRange_IsAuthorizedWithVehicleInRange, InPlayer) == 0x000000, "Member 'SQRestriction_VehicleInRange_IsAuthorizedWithVehicleInRange::InPlayer' has a wrong offset!");
static_assert(offsetof(SQRestriction_VehicleInRange_IsAuthorizedWithVehicleInRange, InVehicleInRange) == 0x000008, "Member 'SQRestriction_VehicleInRange_IsAuthorizedWithVehicleInRange::InVehicleInRange' has a wrong offset!");
static_assert(offsetof(SQRestriction_VehicleInRange_IsAuthorizedWithVehicleInRange, ReturnValue) == 0x000010, "Member 'SQRestriction_VehicleInRange_IsAuthorizedWithVehicleInRange::ReturnValue' has a wrong offset!");

// Function Squad.SQRestriction_VehicleInRange.IsRestrictedWithVehiclesInRange
// 0x0020 (0x0020 - 0x0000)
struct SQRestriction_VehicleInRange_IsRestrictedWithVehiclesInRange final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ASQVehicle*>                     InVehiclesInRange;                                 // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1358[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQRestriction_VehicleInRange_IsRestrictedWithVehiclesInRange) == 0x000008, "Wrong alignment on SQRestriction_VehicleInRange_IsRestrictedWithVehiclesInRange");
static_assert(sizeof(SQRestriction_VehicleInRange_IsRestrictedWithVehiclesInRange) == 0x000020, "Wrong size on SQRestriction_VehicleInRange_IsRestrictedWithVehiclesInRange");
static_assert(offsetof(SQRestriction_VehicleInRange_IsRestrictedWithVehiclesInRange, InPlayer) == 0x000000, "Member 'SQRestriction_VehicleInRange_IsRestrictedWithVehiclesInRange::InPlayer' has a wrong offset!");
static_assert(offsetof(SQRestriction_VehicleInRange_IsRestrictedWithVehiclesInRange, InVehiclesInRange) == 0x000008, "Member 'SQRestriction_VehicleInRange_IsRestrictedWithVehiclesInRange::InVehiclesInRange' has a wrong offset!");
static_assert(offsetof(SQRestriction_VehicleInRange_IsRestrictedWithVehiclesInRange, ReturnValue) == 0x000018, "Member 'SQRestriction_VehicleInRange_IsRestrictedWithVehiclesInRange::ReturnValue' has a wrong offset!");

// Function Squad.SQRotatingMovementComponent.AddRotationInput
// 0x000C (0x000C - 0x0000)
struct SQRotatingMovementComponent_AddRotationInput final
{
public:
	struct FRotator                               InRotationInput;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRotatingMovementComponent_AddRotationInput) == 0x000004, "Wrong alignment on SQRotatingMovementComponent_AddRotationInput");
static_assert(sizeof(SQRotatingMovementComponent_AddRotationInput) == 0x00000C, "Wrong size on SQRotatingMovementComponent_AddRotationInput");
static_assert(offsetof(SQRotatingMovementComponent_AddRotationInput, InRotationInput) == 0x000000, "Member 'SQRotatingMovementComponent_AddRotationInput::InRotationInput' has a wrong offset!");

// Function Squad.SQRotatingMovementComponent.GetCurrentRotationVelocity
// 0x000C (0x000C - 0x0000)
struct SQRotatingMovementComponent_GetCurrentRotationVelocity final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRotatingMovementComponent_GetCurrentRotationVelocity) == 0x000004, "Wrong alignment on SQRotatingMovementComponent_GetCurrentRotationVelocity");
static_assert(sizeof(SQRotatingMovementComponent_GetCurrentRotationVelocity) == 0x00000C, "Wrong size on SQRotatingMovementComponent_GetCurrentRotationVelocity");
static_assert(offsetof(SQRotatingMovementComponent_GetCurrentRotationVelocity, ReturnValue) == 0x000000, "Member 'SQRotatingMovementComponent_GetCurrentRotationVelocity::ReturnValue' has a wrong offset!");

// Function Squad.SQRotorWashEffectListener.BPEmitterRegistered
// 0x0008 (0x0008 - 0x0000)
struct SQRotorWashEffectListener_BPEmitterRegistered final
{
public:
	class USQRotorWashEffectSender*               Emitter;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRotorWashEffectListener_BPEmitterRegistered) == 0x000008, "Wrong alignment on SQRotorWashEffectListener_BPEmitterRegistered");
static_assert(sizeof(SQRotorWashEffectListener_BPEmitterRegistered) == 0x000008, "Wrong size on SQRotorWashEffectListener_BPEmitterRegistered");
static_assert(offsetof(SQRotorWashEffectListener_BPEmitterRegistered, Emitter) == 0x000000, "Member 'SQRotorWashEffectListener_BPEmitterRegistered::Emitter' has a wrong offset!");

// Function Squad.SQRotorWashEffectListener.BPEmitterUnregistered
// 0x0008 (0x0008 - 0x0000)
struct SQRotorWashEffectListener_BPEmitterUnregistered final
{
public:
	class USQRotorWashEffectSender*               Emitter;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRotorWashEffectListener_BPEmitterUnregistered) == 0x000008, "Wrong alignment on SQRotorWashEffectListener_BPEmitterUnregistered");
static_assert(sizeof(SQRotorWashEffectListener_BPEmitterUnregistered) == 0x000008, "Wrong size on SQRotorWashEffectListener_BPEmitterUnregistered");
static_assert(offsetof(SQRotorWashEffectListener_BPEmitterUnregistered, Emitter) == 0x000000, "Member 'SQRotorWashEffectListener_BPEmitterUnregistered::Emitter' has a wrong offset!");

// Function Squad.SQRotorWashEffectListener.GetEmittersCulled
// 0x0010 (0x0010 - 0x0000)
struct SQRotorWashEffectListener_GetEmittersCulled final
{
public:
	TArray<class USQRotorWashEffectSender*>       OutEmitters;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRotorWashEffectListener_GetEmittersCulled) == 0x000008, "Wrong alignment on SQRotorWashEffectListener_GetEmittersCulled");
static_assert(sizeof(SQRotorWashEffectListener_GetEmittersCulled) == 0x000010, "Wrong size on SQRotorWashEffectListener_GetEmittersCulled");
static_assert(offsetof(SQRotorWashEffectListener_GetEmittersCulled, OutEmitters) == 0x000000, "Member 'SQRotorWashEffectListener_GetEmittersCulled::OutEmitters' has a wrong offset!");

// Function Squad.SQRotorWashEffectListener.RegisterRotorWashEffectEmitter
// 0x0008 (0x0008 - 0x0000)
struct SQRotorWashEffectListener_RegisterRotorWashEffectEmitter final
{
public:
	class USQRotorWashEffectSender*               Emitter;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRotorWashEffectListener_RegisterRotorWashEffectEmitter) == 0x000008, "Wrong alignment on SQRotorWashEffectListener_RegisterRotorWashEffectEmitter");
static_assert(sizeof(SQRotorWashEffectListener_RegisterRotorWashEffectEmitter) == 0x000008, "Wrong size on SQRotorWashEffectListener_RegisterRotorWashEffectEmitter");
static_assert(offsetof(SQRotorWashEffectListener_RegisterRotorWashEffectEmitter, Emitter) == 0x000000, "Member 'SQRotorWashEffectListener_RegisterRotorWashEffectEmitter::Emitter' has a wrong offset!");

// Function Squad.SQRotorWashEffectListener.SetEmitterCullDistance
// 0x0004 (0x0004 - 0x0000)
struct SQRotorWashEffectListener_SetEmitterCullDistance final
{
public:
	float                                         NewCullDistance;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRotorWashEffectListener_SetEmitterCullDistance) == 0x000004, "Wrong alignment on SQRotorWashEffectListener_SetEmitterCullDistance");
static_assert(sizeof(SQRotorWashEffectListener_SetEmitterCullDistance) == 0x000004, "Wrong size on SQRotorWashEffectListener_SetEmitterCullDistance");
static_assert(offsetof(SQRotorWashEffectListener_SetEmitterCullDistance, NewCullDistance) == 0x000000, "Member 'SQRotorWashEffectListener_SetEmitterCullDistance::NewCullDistance' has a wrong offset!");

// Function Squad.SQRotorWashEffectListener.UnregisterRotorWashEffectEmitter
// 0x0008 (0x0008 - 0x0000)
struct SQRotorWashEffectListener_UnregisterRotorWashEffectEmitter final
{
public:
	class USQRotorWashEffectSender*               Emitter;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQRotorWashEffectListener_UnregisterRotorWashEffectEmitter) == 0x000008, "Wrong alignment on SQRotorWashEffectListener_UnregisterRotorWashEffectEmitter");
static_assert(sizeof(SQRotorWashEffectListener_UnregisterRotorWashEffectEmitter) == 0x000008, "Wrong size on SQRotorWashEffectListener_UnregisterRotorWashEffectEmitter");
static_assert(offsetof(SQRotorWashEffectListener_UnregisterRotorWashEffectEmitter, Emitter) == 0x000000, "Member 'SQRotorWashEffectListener_UnregisterRotorWashEffectEmitter::Emitter' has a wrong offset!");

// Function Squad.SQSaveGameWrapper.SetSavedGame
// 0x0008 (0x0008 - 0x0000)
struct SQSaveGameWrapper_SetSavedGame final
{
public:
	class USaveGame*                              NewSaveGame;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSaveGameWrapper_SetSavedGame) == 0x000008, "Wrong alignment on SQSaveGameWrapper_SetSavedGame");
static_assert(sizeof(SQSaveGameWrapper_SetSavedGame) == 0x000008, "Wrong size on SQSaveGameWrapper_SetSavedGame");
static_assert(offsetof(SQSaveGameWrapper_SetSavedGame, NewSaveGame) == 0x000000, "Member 'SQSaveGameWrapper_SetSavedGame::NewSaveGame' has a wrong offset!");

// Function Squad.SQSaveGameWrapper.GetSavedGame
// 0x0008 (0x0008 - 0x0000)
struct SQSaveGameWrapper_GetSavedGame final
{
public:
	class USaveGame*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSaveGameWrapper_GetSavedGame) == 0x000008, "Wrong alignment on SQSaveGameWrapper_GetSavedGame");
static_assert(sizeof(SQSaveGameWrapper_GetSavedGame) == 0x000008, "Wrong size on SQSaveGameWrapper_GetSavedGame");
static_assert(offsetof(SQSaveGameWrapper_GetSavedGame, ReturnValue) == 0x000000, "Member 'SQSaveGameWrapper_GetSavedGame::ReturnValue' has a wrong offset!");

// Function Squad.SQScoreboardPlayer.ChangeVoipColor
// 0x0001 (0x0001 - 0x0000)
struct SQScoreboardPlayer_ChangeVoipColor final
{
public:
	ESQVoiceChannel                               Channel;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQScoreboardPlayer_ChangeVoipColor) == 0x000001, "Wrong alignment on SQScoreboardPlayer_ChangeVoipColor");
static_assert(sizeof(SQScoreboardPlayer_ChangeVoipColor) == 0x000001, "Wrong size on SQScoreboardPlayer_ChangeVoipColor");
static_assert(offsetof(SQScoreboardPlayer_ChangeVoipColor, Channel) == 0x000000, "Member 'SQScoreboardPlayer_ChangeVoipColor::Channel' has a wrong offset!");

// Function Squad.SQScoreboardPlayer.GetRoleIcon
// 0x0008 (0x0008 - 0x0000)
struct SQScoreboardPlayer_GetRoleIcon final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQScoreboardPlayer_GetRoleIcon) == 0x000008, "Wrong alignment on SQScoreboardPlayer_GetRoleIcon");
static_assert(sizeof(SQScoreboardPlayer_GetRoleIcon) == 0x000008, "Wrong size on SQScoreboardPlayer_GetRoleIcon");
static_assert(offsetof(SQScoreboardPlayer_GetRoleIcon, ReturnValue) == 0x000000, "Member 'SQScoreboardPlayer_GetRoleIcon::ReturnValue' has a wrong offset!");

// Function Squad.SQScoreboardPlayer.OnMutePlayer
// 0x0004 (0x0004 - 0x0000)
struct SQScoreboardPlayer_OnMutePlayer final
{
public:
	int32                                         CurrentState;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQScoreboardPlayer_OnMutePlayer) == 0x000004, "Wrong alignment on SQScoreboardPlayer_OnMutePlayer");
static_assert(sizeof(SQScoreboardPlayer_OnMutePlayer) == 0x000004, "Wrong size on SQScoreboardPlayer_OnMutePlayer");
static_assert(offsetof(SQScoreboardPlayer_OnMutePlayer, CurrentState) == 0x000000, "Member 'SQScoreboardPlayer_OnMutePlayer::CurrentState' has a wrong offset!");

// Function Squad.SQScoreboardTeam.CreateNewPlayer
// 0x0010 (0x0010 - 0x0000)
struct SQScoreboardTeam_CreateNewPlayer final
{
public:
	class ASQTeamState*                           Team;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerState*                         Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQScoreboardTeam_CreateNewPlayer) == 0x000008, "Wrong alignment on SQScoreboardTeam_CreateNewPlayer");
static_assert(sizeof(SQScoreboardTeam_CreateNewPlayer) == 0x000010, "Wrong size on SQScoreboardTeam_CreateNewPlayer");
static_assert(offsetof(SQScoreboardTeam_CreateNewPlayer, Team) == 0x000000, "Member 'SQScoreboardTeam_CreateNewPlayer::Team' has a wrong offset!");
static_assert(offsetof(SQScoreboardTeam_CreateNewPlayer, Player) == 0x000008, "Member 'SQScoreboardTeam_CreateNewPlayer::Player' has a wrong offset!");

// Function Squad.SQScoreboardTeam.CreateNewSquad
// 0x0008 (0x0008 - 0x0000)
struct SQScoreboardTeam_CreateNewSquad final
{
public:
	class ASQSquadState*                          NewSquad;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQScoreboardTeam_CreateNewSquad) == 0x000008, "Wrong alignment on SQScoreboardTeam_CreateNewSquad");
static_assert(sizeof(SQScoreboardTeam_CreateNewSquad) == 0x000008, "Wrong size on SQScoreboardTeam_CreateNewSquad");
static_assert(offsetof(SQScoreboardTeam_CreateNewSquad, NewSquad) == 0x000000, "Member 'SQScoreboardTeam_CreateNewSquad::NewSquad' has a wrong offset!");

// Function Squad.SQScoreboardTeam.UpdateAllSpeakers
// 0x0010 (0x0010 - 0x0000)
struct SQScoreboardTeam_UpdateAllSpeakers final
{
public:
	TArray<struct FSQRemoteTalkerDisplayInfo>     CurrentTalkers;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQScoreboardTeam_UpdateAllSpeakers) == 0x000008, "Wrong alignment on SQScoreboardTeam_UpdateAllSpeakers");
static_assert(sizeof(SQScoreboardTeam_UpdateAllSpeakers) == 0x000010, "Wrong size on SQScoreboardTeam_UpdateAllSpeakers");
static_assert(offsetof(SQScoreboardTeam_UpdateAllSpeakers, CurrentTalkers) == 0x000000, "Member 'SQScoreboardTeam_UpdateAllSpeakers::CurrentTalkers' has a wrong offset!");

// Function Squad.SQScoreboardTeam.UpdatePlayerJoinedSquad
// 0x0008 (0x0008 - 0x0000)
struct SQScoreboardTeam_UpdatePlayerJoinedSquad final
{
public:
	class ASQPlayerState*                         Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQScoreboardTeam_UpdatePlayerJoinedSquad) == 0x000008, "Wrong alignment on SQScoreboardTeam_UpdatePlayerJoinedSquad");
static_assert(sizeof(SQScoreboardTeam_UpdatePlayerJoinedSquad) == 0x000008, "Wrong size on SQScoreboardTeam_UpdatePlayerJoinedSquad");
static_assert(offsetof(SQScoreboardTeam_UpdatePlayerJoinedSquad, Player) == 0x000000, "Member 'SQScoreboardTeam_UpdatePlayerJoinedSquad::Player' has a wrong offset!");

// Function Squad.SQScriptAction.BPExecute
// 0x0008 (0x0008 - 0x0000)
struct SQScriptAction_BPExecute final
{
public:
	class AActor*                                 ContextObject;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQScriptAction_BPExecute) == 0x000008, "Wrong alignment on SQScriptAction_BPExecute");
static_assert(sizeof(SQScriptAction_BPExecute) == 0x000008, "Wrong size on SQScriptAction_BPExecute");
static_assert(offsetof(SQScriptAction_BPExecute, ContextObject) == 0x000000, "Member 'SQScriptAction_BPExecute::ContextObject' has a wrong offset!");

// Function Squad.SQScriptAction.Execute
// 0x0008 (0x0008 - 0x0000)
struct SQScriptAction_Execute final
{
public:
	class AActor*                                 Context;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQScriptAction_Execute) == 0x000008, "Wrong alignment on SQScriptAction_Execute");
static_assert(sizeof(SQScriptAction_Execute) == 0x000008, "Wrong size on SQScriptAction_Execute");
static_assert(offsetof(SQScriptAction_Execute, Context) == 0x000000, "Member 'SQScriptAction_Execute::Context' has a wrong offset!");

// Function Squad.SQServerBrowserWidget.GetCurrentSearchString
// 0x0010 (0x0010 - 0x0000)
struct SQServerBrowserWidget_GetCurrentSearchString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQServerBrowserWidget_GetCurrentSearchString) == 0x000008, "Wrong alignment on SQServerBrowserWidget_GetCurrentSearchString");
static_assert(sizeof(SQServerBrowserWidget_GetCurrentSearchString) == 0x000010, "Wrong size on SQServerBrowserWidget_GetCurrentSearchString");
static_assert(offsetof(SQServerBrowserWidget_GetCurrentSearchString, ReturnValue) == 0x000000, "Member 'SQServerBrowserWidget_GetCurrentSearchString::ReturnValue' has a wrong offset!");

// Function Squad.SQServerBrowserWidget.OnFindSessionsCompleted
// 0x0018 (0x0018 - 0x0000)
struct SQServerBrowserWidget_OnFindSessionsCompleted final
{
public:
	TArray<struct FBlueprintSessionResult>        Results;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bSuccess;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_136D[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQServerBrowserWidget_OnFindSessionsCompleted) == 0x000008, "Wrong alignment on SQServerBrowserWidget_OnFindSessionsCompleted");
static_assert(sizeof(SQServerBrowserWidget_OnFindSessionsCompleted) == 0x000018, "Wrong size on SQServerBrowserWidget_OnFindSessionsCompleted");
static_assert(offsetof(SQServerBrowserWidget_OnFindSessionsCompleted, Results) == 0x000000, "Member 'SQServerBrowserWidget_OnFindSessionsCompleted::Results' has a wrong offset!");
static_assert(offsetof(SQServerBrowserWidget_OnFindSessionsCompleted, bSuccess) == 0x000010, "Member 'SQServerBrowserWidget_OnFindSessionsCompleted::bSuccess' has a wrong offset!");

// Function Squad.SQServerBrowserWidget.OnFindSessionsNewSessionUpdate
// 0x0108 (0x0108 - 0x0000)
struct SQServerBrowserWidget_OnFindSessionsNewSessionUpdate final
{
public:
	struct FBlueprintSessionResult                SessionResult;                                     // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQServerBrowserWidget_OnFindSessionsNewSessionUpdate) == 0x000008, "Wrong alignment on SQServerBrowserWidget_OnFindSessionsNewSessionUpdate");
static_assert(sizeof(SQServerBrowserWidget_OnFindSessionsNewSessionUpdate) == 0x000108, "Wrong size on SQServerBrowserWidget_OnFindSessionsNewSessionUpdate");
static_assert(offsetof(SQServerBrowserWidget_OnFindSessionsNewSessionUpdate, SessionResult) == 0x000000, "Member 'SQServerBrowserWidget_OnFindSessionsNewSessionUpdate::SessionResult' has a wrong offset!");

// Function Squad.SQServerBrowserWidget.OnSuccess
// 0x0010 (0x0010 - 0x0000)
struct SQServerBrowserWidget_OnSuccess final
{
public:
	TArray<struct FBlueprintSessionResult>        Results;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQServerBrowserWidget_OnSuccess) == 0x000008, "Wrong alignment on SQServerBrowserWidget_OnSuccess");
static_assert(sizeof(SQServerBrowserWidget_OnSuccess) == 0x000010, "Wrong size on SQServerBrowserWidget_OnSuccess");
static_assert(offsetof(SQServerBrowserWidget_OnSuccess, Results) == 0x000000, "Member 'SQServerBrowserWidget_OnSuccess::Results' has a wrong offset!");

// Function Squad.SQServerBrowserWidget.OnUpdateSession
// 0x0010 (0x0010 - 0x0000)
struct SQServerBrowserWidget_OnUpdateSession final
{
public:
	TArray<struct FBlueprintSessionResult>        Results;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQServerBrowserWidget_OnUpdateSession) == 0x000008, "Wrong alignment on SQServerBrowserWidget_OnUpdateSession");
static_assert(sizeof(SQServerBrowserWidget_OnUpdateSession) == 0x000010, "Wrong size on SQServerBrowserWidget_OnUpdateSession");
static_assert(offsetof(SQServerBrowserWidget_OnUpdateSession, Results) == 0x000000, "Member 'SQServerBrowserWidget_OnUpdateSession::Results' has a wrong offset!");

// Function Squad.SQServerBrowserWidget.SortByName
// 0x0002 (0x0002 - 0x0000)
struct SQServerBrowserWidget_SortByName final
{
public:
	ESQSortLevels                                 SortByColumn;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAscending;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQServerBrowserWidget_SortByName) == 0x000001, "Wrong alignment on SQServerBrowserWidget_SortByName");
static_assert(sizeof(SQServerBrowserWidget_SortByName) == 0x000002, "Wrong size on SQServerBrowserWidget_SortByName");
static_assert(offsetof(SQServerBrowserWidget_SortByName, SortByColumn) == 0x000000, "Member 'SQServerBrowserWidget_SortByName::SortByColumn' has a wrong offset!");
static_assert(offsetof(SQServerBrowserWidget_SortByName, bIsAscending) == 0x000001, "Member 'SQServerBrowserWidget_SortByName::bIsAscending' has a wrong offset!");

// Function Squad.SQServerBrowserWidget.SortGameMode
// 0x0001 (0x0001 - 0x0000)
struct SQServerBrowserWidget_SortGameMode final
{
public:
	bool                                          bIsAscending;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQServerBrowserWidget_SortGameMode) == 0x000001, "Wrong alignment on SQServerBrowserWidget_SortGameMode");
static_assert(sizeof(SQServerBrowserWidget_SortGameMode) == 0x000001, "Wrong size on SQServerBrowserWidget_SortGameMode");
static_assert(offsetof(SQServerBrowserWidget_SortGameMode, bIsAscending) == 0x000000, "Member 'SQServerBrowserWidget_SortGameMode::bIsAscending' has a wrong offset!");

// Function Squad.SQServerBrowserWidget.SortMapName
// 0x0001 (0x0001 - 0x0000)
struct SQServerBrowserWidget_SortMapName final
{
public:
	bool                                          bIsAscending;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQServerBrowserWidget_SortMapName) == 0x000001, "Wrong alignment on SQServerBrowserWidget_SortMapName");
static_assert(sizeof(SQServerBrowserWidget_SortMapName) == 0x000001, "Wrong size on SQServerBrowserWidget_SortMapName");
static_assert(offsetof(SQServerBrowserWidget_SortMapName, bIsAscending) == 0x000000, "Member 'SQServerBrowserWidget_SortMapName::bIsAscending' has a wrong offset!");

// Function Squad.SQServerBrowserWidget.SortNumPlayers
// 0x0001 (0x0001 - 0x0000)
struct SQServerBrowserWidget_SortNumPlayers final
{
public:
	bool                                          bIsAscending;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQServerBrowserWidget_SortNumPlayers) == 0x000001, "Wrong alignment on SQServerBrowserWidget_SortNumPlayers");
static_assert(sizeof(SQServerBrowserWidget_SortNumPlayers) == 0x000001, "Wrong size on SQServerBrowserWidget_SortNumPlayers");
static_assert(offsetof(SQServerBrowserWidget_SortNumPlayers, bIsAscending) == 0x000000, "Member 'SQServerBrowserWidget_SortNumPlayers::bIsAscending' has a wrong offset!");

// Function Squad.SQServerBrowserWidget.SortPing
// 0x0001 (0x0001 - 0x0000)
struct SQServerBrowserWidget_SortPing final
{
public:
	bool                                          bIsAscending;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQServerBrowserWidget_SortPing) == 0x000001, "Wrong alignment on SQServerBrowserWidget_SortPing");
static_assert(sizeof(SQServerBrowserWidget_SortPing) == 0x000001, "Wrong size on SQServerBrowserWidget_SortPing");
static_assert(offsetof(SQServerBrowserWidget_SortPing, bIsAscending) == 0x000000, "Member 'SQServerBrowserWidget_SortPing::bIsAscending' has a wrong offset!");

// Function Squad.SQServerBrowserWidget.SortServerName
// 0x0001 (0x0001 - 0x0000)
struct SQServerBrowserWidget_SortServerName final
{
public:
	bool                                          bIsAscending;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQServerBrowserWidget_SortServerName) == 0x000001, "Wrong alignment on SQServerBrowserWidget_SortServerName");
static_assert(sizeof(SQServerBrowserWidget_SortServerName) == 0x000001, "Wrong size on SQServerBrowserWidget_SortServerName");
static_assert(offsetof(SQServerBrowserWidget_SortServerName, bIsAscending) == 0x000000, "Member 'SQServerBrowserWidget_SortServerName::bIsAscending' has a wrong offset!");

// Function Squad.SQServerBrowserWidget.StartFindSessions
// 0x0004 (0x0004 - 0x0000)
struct SQServerBrowserWidget_StartFindSessions final
{
public:
	bool                                          bWithFilters;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLicensedServerSearch;                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFavoriteServerSearch;                           // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRecentServerSearch;                             // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQServerBrowserWidget_StartFindSessions) == 0x000001, "Wrong alignment on SQServerBrowserWidget_StartFindSessions");
static_assert(sizeof(SQServerBrowserWidget_StartFindSessions) == 0x000004, "Wrong size on SQServerBrowserWidget_StartFindSessions");
static_assert(offsetof(SQServerBrowserWidget_StartFindSessions, bWithFilters) == 0x000000, "Member 'SQServerBrowserWidget_StartFindSessions::bWithFilters' has a wrong offset!");
static_assert(offsetof(SQServerBrowserWidget_StartFindSessions, bIsLicensedServerSearch) == 0x000001, "Member 'SQServerBrowserWidget_StartFindSessions::bIsLicensedServerSearch' has a wrong offset!");
static_assert(offsetof(SQServerBrowserWidget_StartFindSessions, bIsFavoriteServerSearch) == 0x000002, "Member 'SQServerBrowserWidget_StartFindSessions::bIsFavoriteServerSearch' has a wrong offset!");
static_assert(offsetof(SQServerBrowserWidget_StartFindSessions, bIsRecentServerSearch) == 0x000003, "Member 'SQServerBrowserWidget_StartFindSessions::bIsRecentServerSearch' has a wrong offset!");

// Function Squad.SQServerBrowserWidget.UpdateSortedState
// 0x0001 (0x0001 - 0x0000)
struct SQServerBrowserWidget_UpdateSortedState final
{
public:
	ESQSortLevels                                 SortLevel;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQServerBrowserWidget_UpdateSortedState) == 0x000001, "Wrong alignment on SQServerBrowserWidget_UpdateSortedState");
static_assert(sizeof(SQServerBrowserWidget_UpdateSortedState) == 0x000001, "Wrong size on SQServerBrowserWidget_UpdateSortedState");
static_assert(offsetof(SQServerBrowserWidget_UpdateSortedState, SortLevel) == 0x000000, "Member 'SQServerBrowserWidget_UpdateSortedState::SortLevel' has a wrong offset!");

// Function Squad.SQSessionInfo.CheckMissingMods
// 0x0010 (0x0010 - 0x0000)
struct SQSessionInfo_CheckMissingMods final
{
public:
	TArray<struct FSQModLoadProgress>             ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSessionInfo_CheckMissingMods) == 0x000008, "Wrong alignment on SQSessionInfo_CheckMissingMods");
static_assert(sizeof(SQSessionInfo_CheckMissingMods) == 0x000010, "Wrong size on SQSessionInfo_CheckMissingMods");
static_assert(offsetof(SQSessionInfo_CheckMissingMods, ReturnValue) == 0x000000, "Member 'SQSessionInfo_CheckMissingMods::ReturnValue' has a wrong offset!");

// Function Squad.SQSessionInfo.SetSession
// 0x0110 (0x0110 - 0x0000)
struct SQSessionInfo_SetSession final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0108(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1371[0x7];                                     // 0x0109(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSessionInfo_SetSession) == 0x000008, "Wrong alignment on SQSessionInfo_SetSession");
static_assert(sizeof(SQSessionInfo_SetSession) == 0x000110, "Wrong size on SQSessionInfo_SetSession");
static_assert(offsetof(SQSessionInfo_SetSession, Result) == 0x000000, "Member 'SQSessionInfo_SetSession::Result' has a wrong offset!");
static_assert(offsetof(SQSessionInfo_SetSession, ReturnValue) == 0x000108, "Member 'SQSessionInfo_SetSession::ReturnValue' has a wrong offset!");

// Function Squad.SQSettingsService.TryGetAvailableFactions
// 0x0028 (0x0028 - 0x0000)
struct SQSettingsService_TryGetAvailableFactions final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQFaction>                 FactionClass;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USQFaction*>                     OutAvailableFactions;                              // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1372[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSettingsService_TryGetAvailableFactions) == 0x000008, "Wrong alignment on SQSettingsService_TryGetAvailableFactions");
static_assert(sizeof(SQSettingsService_TryGetAvailableFactions) == 0x000028, "Wrong size on SQSettingsService_TryGetAvailableFactions");
static_assert(offsetof(SQSettingsService_TryGetAvailableFactions, WorldContextObject) == 0x000000, "Member 'SQSettingsService_TryGetAvailableFactions::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetAvailableFactions, FactionClass) == 0x000008, "Member 'SQSettingsService_TryGetAvailableFactions::FactionClass' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetAvailableFactions, OutAvailableFactions) == 0x000010, "Member 'SQSettingsService_TryGetAvailableFactions::OutAvailableFactions' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetAvailableFactions, ReturnValue) == 0x000020, "Member 'SQSettingsService_TryGetAvailableFactions::ReturnValue' has a wrong offset!");

// Function Squad.SQSettingsService.TryGetAvailableFactionSetups
// 0x0028 (0x0028 - 0x0000)
struct SQSettingsService_TryGetAvailableFactionSetups final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQFactionSetup>            FactionSetupClass;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USQFactionSetup*>                OutAvailableFactionSetups;                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1373[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSettingsService_TryGetAvailableFactionSetups) == 0x000008, "Wrong alignment on SQSettingsService_TryGetAvailableFactionSetups");
static_assert(sizeof(SQSettingsService_TryGetAvailableFactionSetups) == 0x000028, "Wrong size on SQSettingsService_TryGetAvailableFactionSetups");
static_assert(offsetof(SQSettingsService_TryGetAvailableFactionSetups, WorldContextObject) == 0x000000, "Member 'SQSettingsService_TryGetAvailableFactionSetups::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetAvailableFactionSetups, FactionSetupClass) == 0x000008, "Member 'SQSettingsService_TryGetAvailableFactionSetups::FactionSetupClass' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetAvailableFactionSetups, OutAvailableFactionSetups) == 0x000010, "Member 'SQSettingsService_TryGetAvailableFactionSetups::OutAvailableFactionSetups' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetAvailableFactionSetups, ReturnValue) == 0x000020, "Member 'SQSettingsService_TryGetAvailableFactionSetups::ReturnValue' has a wrong offset!");

// Function Squad.SQSettingsService.TryGetAvailableLayers
// 0x0028 (0x0028 - 0x0000)
struct SQSettingsService_TryGetAvailableLayers final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQLayer>                   LayerClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USQLayer*>                       OutAvailableLayers;                                // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1374[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSettingsService_TryGetAvailableLayers) == 0x000008, "Wrong alignment on SQSettingsService_TryGetAvailableLayers");
static_assert(sizeof(SQSettingsService_TryGetAvailableLayers) == 0x000028, "Wrong size on SQSettingsService_TryGetAvailableLayers");
static_assert(offsetof(SQSettingsService_TryGetAvailableLayers, WorldContextObject) == 0x000000, "Member 'SQSettingsService_TryGetAvailableLayers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetAvailableLayers, LayerClass) == 0x000008, "Member 'SQSettingsService_TryGetAvailableLayers::LayerClass' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetAvailableLayers, OutAvailableLayers) == 0x000010, "Member 'SQSettingsService_TryGetAvailableLayers::OutAvailableLayers' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetAvailableLayers, ReturnValue) == 0x000020, "Member 'SQSettingsService_TryGetAvailableLayers::ReturnValue' has a wrong offset!");

// Function Squad.SQSettingsService.TryGetAvailableLevels
// 0x0028 (0x0028 - 0x0000)
struct SQSettingsService_TryGetAvailableLevels final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQLevel>                   LevelClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USQLevel*>                       OutAvailableLevels;                                // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1375[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSettingsService_TryGetAvailableLevels) == 0x000008, "Wrong alignment on SQSettingsService_TryGetAvailableLevels");
static_assert(sizeof(SQSettingsService_TryGetAvailableLevels) == 0x000028, "Wrong size on SQSettingsService_TryGetAvailableLevels");
static_assert(offsetof(SQSettingsService_TryGetAvailableLevels, WorldContextObject) == 0x000000, "Member 'SQSettingsService_TryGetAvailableLevels::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetAvailableLevels, LevelClass) == 0x000008, "Member 'SQSettingsService_TryGetAvailableLevels::LevelClass' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetAvailableLevels, OutAvailableLevels) == 0x000010, "Member 'SQSettingsService_TryGetAvailableLevels::OutAvailableLevels' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetAvailableLevels, ReturnValue) == 0x000020, "Member 'SQSettingsService_TryGetAvailableLevels::ReturnValue' has a wrong offset!");

// Function Squad.SQSettingsService.TryGetCurrentFaction
// 0x0028 (0x0028 - 0x0000)
struct SQSettingsService_TryGetCurrentFaction final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1376[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USQFaction>                 FactionClass;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQFaction*                             OutFaction;                                        // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1377[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSettingsService_TryGetCurrentFaction) == 0x000008, "Wrong alignment on SQSettingsService_TryGetCurrentFaction");
static_assert(sizeof(SQSettingsService_TryGetCurrentFaction) == 0x000028, "Wrong size on SQSettingsService_TryGetCurrentFaction");
static_assert(offsetof(SQSettingsService_TryGetCurrentFaction, WorldContextObject) == 0x000000, "Member 'SQSettingsService_TryGetCurrentFaction::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetCurrentFaction, TeamId) == 0x000008, "Member 'SQSettingsService_TryGetCurrentFaction::TeamId' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetCurrentFaction, FactionClass) == 0x000010, "Member 'SQSettingsService_TryGetCurrentFaction::FactionClass' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetCurrentFaction, OutFaction) == 0x000018, "Member 'SQSettingsService_TryGetCurrentFaction::OutFaction' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetCurrentFaction, ReturnValue) == 0x000020, "Member 'SQSettingsService_TryGetCurrentFaction::ReturnValue' has a wrong offset!");

// Function Squad.SQSettingsService.TryGetCurrentFactionSetup
// 0x0028 (0x0028 - 0x0000)
struct SQSettingsService_TryGetCurrentFactionSetup final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1378[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USQFactionSetup>            FactionSetupClass;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQFactionSetup*                        OutFactionSetup;                                   // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1379[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSettingsService_TryGetCurrentFactionSetup) == 0x000008, "Wrong alignment on SQSettingsService_TryGetCurrentFactionSetup");
static_assert(sizeof(SQSettingsService_TryGetCurrentFactionSetup) == 0x000028, "Wrong size on SQSettingsService_TryGetCurrentFactionSetup");
static_assert(offsetof(SQSettingsService_TryGetCurrentFactionSetup, WorldContextObject) == 0x000000, "Member 'SQSettingsService_TryGetCurrentFactionSetup::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetCurrentFactionSetup, TeamId) == 0x000008, "Member 'SQSettingsService_TryGetCurrentFactionSetup::TeamId' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetCurrentFactionSetup, FactionSetupClass) == 0x000010, "Member 'SQSettingsService_TryGetCurrentFactionSetup::FactionSetupClass' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetCurrentFactionSetup, OutFactionSetup) == 0x000018, "Member 'SQSettingsService_TryGetCurrentFactionSetup::OutFactionSetup' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetCurrentFactionSetup, ReturnValue) == 0x000020, "Member 'SQSettingsService_TryGetCurrentFactionSetup::ReturnValue' has a wrong offset!");

// Function Squad.SQSettingsService.TryGetCurrentLayer
// 0x0020 (0x0020 - 0x0000)
struct SQSettingsService_TryGetCurrentLayer final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQLayer>                   LayerClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQLayer*                               OutLayer;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_137A[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSettingsService_TryGetCurrentLayer) == 0x000008, "Wrong alignment on SQSettingsService_TryGetCurrentLayer");
static_assert(sizeof(SQSettingsService_TryGetCurrentLayer) == 0x000020, "Wrong size on SQSettingsService_TryGetCurrentLayer");
static_assert(offsetof(SQSettingsService_TryGetCurrentLayer, WorldContextObject) == 0x000000, "Member 'SQSettingsService_TryGetCurrentLayer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetCurrentLayer, LayerClass) == 0x000008, "Member 'SQSettingsService_TryGetCurrentLayer::LayerClass' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetCurrentLayer, OutLayer) == 0x000010, "Member 'SQSettingsService_TryGetCurrentLayer::OutLayer' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetCurrentLayer, ReturnValue) == 0x000018, "Member 'SQSettingsService_TryGetCurrentLayer::ReturnValue' has a wrong offset!");

// Function Squad.SQSettingsService.TryGetCurrentLevel
// 0x0020 (0x0020 - 0x0000)
struct SQSettingsService_TryGetCurrentLevel final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQLevel>                   LevelClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQLevel*                               OutLevel;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_137B[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSettingsService_TryGetCurrentLevel) == 0x000008, "Wrong alignment on SQSettingsService_TryGetCurrentLevel");
static_assert(sizeof(SQSettingsService_TryGetCurrentLevel) == 0x000020, "Wrong size on SQSettingsService_TryGetCurrentLevel");
static_assert(offsetof(SQSettingsService_TryGetCurrentLevel, WorldContextObject) == 0x000000, "Member 'SQSettingsService_TryGetCurrentLevel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetCurrentLevel, LevelClass) == 0x000008, "Member 'SQSettingsService_TryGetCurrentLevel::LevelClass' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetCurrentLevel, OutLevel) == 0x000010, "Member 'SQSettingsService_TryGetCurrentLevel::OutLevel' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetCurrentLevel, ReturnValue) == 0x000018, "Member 'SQSettingsService_TryGetCurrentLevel::ReturnValue' has a wrong offset!");

// Function Squad.SQSettingsService.TryGetFaction
// 0x0028 (0x0028 - 0x0000)
struct SQSettingsService_TryGetFaction final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FactionID;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQFaction>                 FactionClass;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQFaction*                             OutFaction;                                        // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_137C[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSettingsService_TryGetFaction) == 0x000008, "Wrong alignment on SQSettingsService_TryGetFaction");
static_assert(sizeof(SQSettingsService_TryGetFaction) == 0x000028, "Wrong size on SQSettingsService_TryGetFaction");
static_assert(offsetof(SQSettingsService_TryGetFaction, WorldContextObject) == 0x000000, "Member 'SQSettingsService_TryGetFaction::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetFaction, FactionID) == 0x000008, "Member 'SQSettingsService_TryGetFaction::FactionID' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetFaction, FactionClass) == 0x000010, "Member 'SQSettingsService_TryGetFaction::FactionClass' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetFaction, OutFaction) == 0x000018, "Member 'SQSettingsService_TryGetFaction::OutFaction' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetFaction, ReturnValue) == 0x000020, "Member 'SQSettingsService_TryGetFaction::ReturnValue' has a wrong offset!");

// Function Squad.SQSettingsService.TryGetFactionSetup
// 0x0028 (0x0028 - 0x0000)
struct SQSettingsService_TryGetFactionSetup final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FactionSetupId;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQFactionSetup>            FactionSetupClass;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQFactionSetup*                        OutFactionSetup;                                   // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_137D[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSettingsService_TryGetFactionSetup) == 0x000008, "Wrong alignment on SQSettingsService_TryGetFactionSetup");
static_assert(sizeof(SQSettingsService_TryGetFactionSetup) == 0x000028, "Wrong size on SQSettingsService_TryGetFactionSetup");
static_assert(offsetof(SQSettingsService_TryGetFactionSetup, WorldContextObject) == 0x000000, "Member 'SQSettingsService_TryGetFactionSetup::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetFactionSetup, FactionSetupId) == 0x000008, "Member 'SQSettingsService_TryGetFactionSetup::FactionSetupId' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetFactionSetup, FactionSetupClass) == 0x000010, "Member 'SQSettingsService_TryGetFactionSetup::FactionSetupClass' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetFactionSetup, OutFactionSetup) == 0x000018, "Member 'SQSettingsService_TryGetFactionSetup::OutFactionSetup' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetFactionSetup, ReturnValue) == 0x000020, "Member 'SQSettingsService_TryGetFactionSetup::ReturnValue' has a wrong offset!");

// Function Squad.SQSettingsService.TryGetLocalPlayerFaction
// 0x0020 (0x0020 - 0x0000)
struct SQSettingsService_TryGetLocalPlayerFaction final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQFaction>                 FactionClass;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQFaction*                             OutFaction;                                        // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_137E[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSettingsService_TryGetLocalPlayerFaction) == 0x000008, "Wrong alignment on SQSettingsService_TryGetLocalPlayerFaction");
static_assert(sizeof(SQSettingsService_TryGetLocalPlayerFaction) == 0x000020, "Wrong size on SQSettingsService_TryGetLocalPlayerFaction");
static_assert(offsetof(SQSettingsService_TryGetLocalPlayerFaction, WorldContextObject) == 0x000000, "Member 'SQSettingsService_TryGetLocalPlayerFaction::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetLocalPlayerFaction, FactionClass) == 0x000008, "Member 'SQSettingsService_TryGetLocalPlayerFaction::FactionClass' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetLocalPlayerFaction, OutFaction) == 0x000010, "Member 'SQSettingsService_TryGetLocalPlayerFaction::OutFaction' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetLocalPlayerFaction, ReturnValue) == 0x000018, "Member 'SQSettingsService_TryGetLocalPlayerFaction::ReturnValue' has a wrong offset!");

// Function Squad.SQSettingsService.TryGetLocalPlayerFactionSetup
// 0x0020 (0x0020 - 0x0000)
struct SQSettingsService_TryGetLocalPlayerFactionSetup final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQFactionSetup>            FactionSetupClass;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQFactionSetup*                        OutFactionSetup;                                   // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_137F[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSettingsService_TryGetLocalPlayerFactionSetup) == 0x000008, "Wrong alignment on SQSettingsService_TryGetLocalPlayerFactionSetup");
static_assert(sizeof(SQSettingsService_TryGetLocalPlayerFactionSetup) == 0x000020, "Wrong size on SQSettingsService_TryGetLocalPlayerFactionSetup");
static_assert(offsetof(SQSettingsService_TryGetLocalPlayerFactionSetup, WorldContextObject) == 0x000000, "Member 'SQSettingsService_TryGetLocalPlayerFactionSetup::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetLocalPlayerFactionSetup, FactionSetupClass) == 0x000008, "Member 'SQSettingsService_TryGetLocalPlayerFactionSetup::FactionSetupClass' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetLocalPlayerFactionSetup, OutFactionSetup) == 0x000010, "Member 'SQSettingsService_TryGetLocalPlayerFactionSetup::OutFactionSetup' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetLocalPlayerFactionSetup, ReturnValue) == 0x000018, "Member 'SQSettingsService_TryGetLocalPlayerFactionSetup::ReturnValue' has a wrong offset!");

// Function Squad.SQSettingsService.TryGetLocalPlayerTeamLayerConfig
// 0x0020 (0x0020 - 0x0000)
struct SQSettingsService_TryGetLocalPlayerTeamLayerConfig final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQLayerTeamConfig>         LayerTeamConfigClass;                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQLayerTeamConfig*                     OutTeamConfig;                                     // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1380[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSettingsService_TryGetLocalPlayerTeamLayerConfig) == 0x000008, "Wrong alignment on SQSettingsService_TryGetLocalPlayerTeamLayerConfig");
static_assert(sizeof(SQSettingsService_TryGetLocalPlayerTeamLayerConfig) == 0x000020, "Wrong size on SQSettingsService_TryGetLocalPlayerTeamLayerConfig");
static_assert(offsetof(SQSettingsService_TryGetLocalPlayerTeamLayerConfig, WorldContextObject) == 0x000000, "Member 'SQSettingsService_TryGetLocalPlayerTeamLayerConfig::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetLocalPlayerTeamLayerConfig, LayerTeamConfigClass) == 0x000008, "Member 'SQSettingsService_TryGetLocalPlayerTeamLayerConfig::LayerTeamConfigClass' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetLocalPlayerTeamLayerConfig, OutTeamConfig) == 0x000010, "Member 'SQSettingsService_TryGetLocalPlayerTeamLayerConfig::OutTeamConfig' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetLocalPlayerTeamLayerConfig, ReturnValue) == 0x000018, "Member 'SQSettingsService_TryGetLocalPlayerTeamLayerConfig::ReturnValue' has a wrong offset!");

// Function Squad.SQSettingsService.TryGetTeamLayerConfig
// 0x0028 (0x0028 - 0x0000)
struct SQSettingsService_TryGetTeamLayerConfig final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamId;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1381[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USQLayerTeamConfig>         LayerTeamConfigClass;                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQLayerTeamConfig*                     OutTeamConfig;                                     // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1382[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSettingsService_TryGetTeamLayerConfig) == 0x000008, "Wrong alignment on SQSettingsService_TryGetTeamLayerConfig");
static_assert(sizeof(SQSettingsService_TryGetTeamLayerConfig) == 0x000028, "Wrong size on SQSettingsService_TryGetTeamLayerConfig");
static_assert(offsetof(SQSettingsService_TryGetTeamLayerConfig, WorldContextObject) == 0x000000, "Member 'SQSettingsService_TryGetTeamLayerConfig::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetTeamLayerConfig, TeamId) == 0x000008, "Member 'SQSettingsService_TryGetTeamLayerConfig::TeamId' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetTeamLayerConfig, LayerTeamConfigClass) == 0x000010, "Member 'SQSettingsService_TryGetTeamLayerConfig::LayerTeamConfigClass' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetTeamLayerConfig, OutTeamConfig) == 0x000018, "Member 'SQSettingsService_TryGetTeamLayerConfig::OutTeamConfig' has a wrong offset!");
static_assert(offsetof(SQSettingsService_TryGetTeamLayerConfig, ReturnValue) == 0x000020, "Member 'SQSettingsService_TryGetTeamLayerConfig::ReturnValue' has a wrong offset!");

// Function Squad.SQSimpleMovementComponent.AddMoveInput
// 0x000C (0x000C - 0x0000)
struct SQSimpleMovementComponent_AddMoveInput final
{
public:
	struct FVector                                InMoveInput;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSimpleMovementComponent_AddMoveInput) == 0x000004, "Wrong alignment on SQSimpleMovementComponent_AddMoveInput");
static_assert(sizeof(SQSimpleMovementComponent_AddMoveInput) == 0x00000C, "Wrong size on SQSimpleMovementComponent_AddMoveInput");
static_assert(offsetof(SQSimpleMovementComponent_AddMoveInput, InMoveInput) == 0x000000, "Member 'SQSimpleMovementComponent_AddMoveInput::InMoveInput' has a wrong offset!");

// Function Squad.SQSimpleMovementComponent.AddRotationInput
// 0x000C (0x000C - 0x0000)
struct SQSimpleMovementComponent_AddRotationInput final
{
public:
	struct FRotator                               InRotationInput;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSimpleMovementComponent_AddRotationInput) == 0x000004, "Wrong alignment on SQSimpleMovementComponent_AddRotationInput");
static_assert(sizeof(SQSimpleMovementComponent_AddRotationInput) == 0x00000C, "Wrong size on SQSimpleMovementComponent_AddRotationInput");
static_assert(offsetof(SQSimpleMovementComponent_AddRotationInput, InRotationInput) == 0x000000, "Member 'SQSimpleMovementComponent_AddRotationInput::InRotationInput' has a wrong offset!");

// Function Squad.SQSpawnableGhost.ConfirmRequirements
// 0x0001 (0x0001 - 0x0000)
struct SQSpawnableGhost_ConfirmRequirements final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSpawnableGhost_ConfirmRequirements) == 0x000001, "Wrong alignment on SQSpawnableGhost_ConfirmRequirements");
static_assert(sizeof(SQSpawnableGhost_ConfirmRequirements) == 0x000001, "Wrong size on SQSpawnableGhost_ConfirmRequirements");
static_assert(offsetof(SQSpawnableGhost_ConfirmRequirements, ReturnValue) == 0x000000, "Member 'SQSpawnableGhost_ConfirmRequirements::ReturnValue' has a wrong offset!");

// Function Squad.SQSpawnableGhost.IsFullyLoaded
// 0x0001 (0x0001 - 0x0000)
struct SQSpawnableGhost_IsFullyLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSpawnableGhost_IsFullyLoaded) == 0x000001, "Wrong alignment on SQSpawnableGhost_IsFullyLoaded");
static_assert(sizeof(SQSpawnableGhost_IsFullyLoaded) == 0x000001, "Wrong size on SQSpawnableGhost_IsFullyLoaded");
static_assert(offsetof(SQSpawnableGhost_IsFullyLoaded, ReturnValue) == 0x000000, "Member 'SQSpawnableGhost_IsFullyLoaded::ReturnValue' has a wrong offset!");

// Function Squad.SQSpawnableGhost.SpawnIfReady
// 0x0001 (0x0001 - 0x0000)
struct SQSpawnableGhost_SpawnIfReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSpawnableGhost_SpawnIfReady) == 0x000001, "Wrong alignment on SQSpawnableGhost_SpawnIfReady");
static_assert(sizeof(SQSpawnableGhost_SpawnIfReady) == 0x000001, "Wrong size on SQSpawnableGhost_SpawnIfReady");
static_assert(offsetof(SQSpawnableGhost_SpawnIfReady, ReturnValue) == 0x000000, "Member 'SQSpawnableGhost_SpawnIfReady::ReturnValue' has a wrong offset!");

// Function Squad.SQSpectatorMan.DrawHUD
// 0x0010 (0x0010 - 0x0000)
struct SQSpectatorMan_DrawHUD final
{
public:
	class ASQHUD*                                 SquadHUD;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvas*                                Canvas;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSpectatorMan_DrawHUD) == 0x000008, "Wrong alignment on SQSpectatorMan_DrawHUD");
static_assert(sizeof(SQSpectatorMan_DrawHUD) == 0x000010, "Wrong size on SQSpectatorMan_DrawHUD");
static_assert(offsetof(SQSpectatorMan_DrawHUD, SquadHUD) == 0x000000, "Member 'SQSpectatorMan_DrawHUD::SquadHUD' has a wrong offset!");
static_assert(offsetof(SQSpectatorMan_DrawHUD, Canvas) == 0x000008, "Member 'SQSpectatorMan_DrawHUD::Canvas' has a wrong offset!");

// Function Squad.SQSpectatorMan.ServerSetDecelerationTarget
// 0x0004 (0x0004 - 0x0000)
struct SQSpectatorMan_ServerSetDecelerationTarget final
{
public:
	float                                         InDecelerationTarget;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSpectatorMan_ServerSetDecelerationTarget) == 0x000004, "Wrong alignment on SQSpectatorMan_ServerSetDecelerationTarget");
static_assert(sizeof(SQSpectatorMan_ServerSetDecelerationTarget) == 0x000004, "Wrong size on SQSpectatorMan_ServerSetDecelerationTarget");
static_assert(offsetof(SQSpectatorMan_ServerSetDecelerationTarget, InDecelerationTarget) == 0x000000, "Member 'SQSpectatorMan_ServerSetDecelerationTarget::InDecelerationTarget' has a wrong offset!");

// Function Squad.SQSpectatorMan.ServerSetFlySpeedTarget
// 0x0004 (0x0004 - 0x0000)
struct SQSpectatorMan_ServerSetFlySpeedTarget final
{
public:
	float                                         InFlySpeedTarget;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSpectatorMan_ServerSetFlySpeedTarget) == 0x000004, "Wrong alignment on SQSpectatorMan_ServerSetFlySpeedTarget");
static_assert(sizeof(SQSpectatorMan_ServerSetFlySpeedTarget) == 0x000004, "Wrong size on SQSpectatorMan_ServerSetFlySpeedTarget");
static_assert(offsetof(SQSpectatorMan_ServerSetFlySpeedTarget, InFlySpeedTarget) == 0x000000, "Member 'SQSpectatorMan_ServerSetFlySpeedTarget::InFlySpeedTarget' has a wrong offset!");

// Function Squad.SQSquadMemberListItem.ShowActionMenu
// 0x0004 (0x0004 - 0x0000)
struct SQSquadMemberListItem_ShowActionMenu final
{
public:
	int32                                         MenuIdx;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSquadMemberListItem_ShowActionMenu) == 0x000004, "Wrong alignment on SQSquadMemberListItem_ShowActionMenu");
static_assert(sizeof(SQSquadMemberListItem_ShowActionMenu) == 0x000004, "Wrong size on SQSquadMemberListItem_ShowActionMenu");
static_assert(offsetof(SQSquadMemberListItem_ShowActionMenu, MenuIdx) == 0x000000, "Member 'SQSquadMemberListItem_ShowActionMenu::MenuIdx' has a wrong offset!");

// Function Squad.SQSquadState.AddPlayerState
// 0x0008 (0x0008 - 0x0000)
struct SQSquadState_AddPlayerState final
{
public:
	class ASQPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSquadState_AddPlayerState) == 0x000008, "Wrong alignment on SQSquadState_AddPlayerState");
static_assert(sizeof(SQSquadState_AddPlayerState) == 0x000008, "Wrong size on SQSquadState_AddPlayerState");
static_assert(offsetof(SQSquadState_AddPlayerState, PlayerState) == 0x000000, "Member 'SQSquadState_AddPlayerState::PlayerState' has a wrong offset!");

// Function Squad.SQSquadState.BroadcastLeaderChangeEvent
// 0x0008 (0x0008 - 0x0000)
struct SQSquadState_BroadcastLeaderChangeEvent final
{
public:
	class ASQPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSquadState_BroadcastLeaderChangeEvent) == 0x000008, "Wrong alignment on SQSquadState_BroadcastLeaderChangeEvent");
static_assert(sizeof(SQSquadState_BroadcastLeaderChangeEvent) == 0x000008, "Wrong size on SQSquadState_BroadcastLeaderChangeEvent");
static_assert(offsetof(SQSquadState_BroadcastLeaderChangeEvent, PlayerState) == 0x000000, "Member 'SQSquadState_BroadcastLeaderChangeEvent::PlayerState' has a wrong offset!");

// Function Squad.SQSquadState.BroadcastPlayerJoinEvent
// 0x0008 (0x0008 - 0x0000)
struct SQSquadState_BroadcastPlayerJoinEvent final
{
public:
	class ASQPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSquadState_BroadcastPlayerJoinEvent) == 0x000008, "Wrong alignment on SQSquadState_BroadcastPlayerJoinEvent");
static_assert(sizeof(SQSquadState_BroadcastPlayerJoinEvent) == 0x000008, "Wrong size on SQSquadState_BroadcastPlayerJoinEvent");
static_assert(offsetof(SQSquadState_BroadcastPlayerJoinEvent, PlayerState) == 0x000000, "Member 'SQSquadState_BroadcastPlayerJoinEvent::PlayerState' has a wrong offset!");

// Function Squad.SQSquadState.BroadcastPlayerLeaveEvent
// 0x0008 (0x0008 - 0x0000)
struct SQSquadState_BroadcastPlayerLeaveEvent final
{
public:
	class ASQPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSquadState_BroadcastPlayerLeaveEvent) == 0x000008, "Wrong alignment on SQSquadState_BroadcastPlayerLeaveEvent");
static_assert(sizeof(SQSquadState_BroadcastPlayerLeaveEvent) == 0x000008, "Wrong size on SQSquadState_BroadcastPlayerLeaveEvent");
static_assert(offsetof(SQSquadState_BroadcastPlayerLeaveEvent, PlayerState) == 0x000000, "Member 'SQSquadState_BroadcastPlayerLeaveEvent::PlayerState' has a wrong offset!");

// Function Squad.SQSquadState.OnRep_LeaderState
// 0x0008 (0x0008 - 0x0000)
struct SQSquadState_OnRep_LeaderState final
{
public:
	class ASQPlayerState*                         LastLeaderState;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSquadState_OnRep_LeaderState) == 0x000008, "Wrong alignment on SQSquadState_OnRep_LeaderState");
static_assert(sizeof(SQSquadState_OnRep_LeaderState) == 0x000008, "Wrong size on SQSquadState_OnRep_LeaderState");
static_assert(offsetof(SQSquadState_OnRep_LeaderState, LastLeaderState) == 0x000000, "Member 'SQSquadState_OnRep_LeaderState::LastLeaderState' has a wrong offset!");

// Function Squad.SQSquadState.RemovePlayerState
// 0x0008 (0x0008 - 0x0000)
struct SQSquadState_RemovePlayerState final
{
public:
	class ASQPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSquadState_RemovePlayerState) == 0x000008, "Wrong alignment on SQSquadState_RemovePlayerState");
static_assert(sizeof(SQSquadState_RemovePlayerState) == 0x000008, "Wrong size on SQSquadState_RemovePlayerState");
static_assert(offsetof(SQSquadState_RemovePlayerState, PlayerState) == 0x000000, "Member 'SQSquadState_RemovePlayerState::PlayerState' has a wrong offset!");

// Function Squad.SQSquadState.ScorePoints
// 0x0020 (0x0020 - 0x0000)
struct SQSquadState_ScorePoints final
{
public:
	int32                                         Points;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139F[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Reason;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ScoreGroup;                                        // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSquadState_ScorePoints) == 0x000008, "Wrong alignment on SQSquadState_ScorePoints");
static_assert(sizeof(SQSquadState_ScorePoints) == 0x000020, "Wrong size on SQSquadState_ScorePoints");
static_assert(offsetof(SQSquadState_ScorePoints, Points) == 0x000000, "Member 'SQSquadState_ScorePoints::Points' has a wrong offset!");
static_assert(offsetof(SQSquadState_ScorePoints, Reason) == 0x000008, "Member 'SQSquadState_ScorePoints::Reason' has a wrong offset!");
static_assert(offsetof(SQSquadState_ScorePoints, ScoreGroup) == 0x000018, "Member 'SQSquadState_ScorePoints::ScoreGroup' has a wrong offset!");

// Function Squad.SQSquadState.ScorePointsDelayed
// 0x0020 (0x0020 - 0x0000)
struct SQSquadState_ScorePointsDelayed final
{
public:
	int32                                         Points;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A0[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Reason;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ScoreGroup;                                        // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSquadState_ScorePointsDelayed) == 0x000008, "Wrong alignment on SQSquadState_ScorePointsDelayed");
static_assert(sizeof(SQSquadState_ScorePointsDelayed) == 0x000020, "Wrong size on SQSquadState_ScorePointsDelayed");
static_assert(offsetof(SQSquadState_ScorePointsDelayed, Points) == 0x000000, "Member 'SQSquadState_ScorePointsDelayed::Points' has a wrong offset!");
static_assert(offsetof(SQSquadState_ScorePointsDelayed, Reason) == 0x000008, "Member 'SQSquadState_ScorePointsDelayed::Reason' has a wrong offset!");
static_assert(offsetof(SQSquadState_ScorePointsDelayed, ScoreGroup) == 0x000018, "Member 'SQSquadState_ScorePointsDelayed::ScoreGroup' has a wrong offset!");

// Function Squad.SQSquadState.GetPlayerCount
// 0x0004 (0x0004 - 0x0000)
struct SQSquadState_GetPlayerCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSquadState_GetPlayerCount) == 0x000004, "Wrong alignment on SQSquadState_GetPlayerCount");
static_assert(sizeof(SQSquadState_GetPlayerCount) == 0x000004, "Wrong size on SQSquadState_GetPlayerCount");
static_assert(offsetof(SQSquadState_GetPlayerCount, ReturnValue) == 0x000000, "Member 'SQSquadState_GetPlayerCount::ReturnValue' has a wrong offset!");

// Function Squad.SQSquadStateDataHABInterface.GetGameSpawn
// 0x0008 (0x0008 - 0x0000)
struct SQSquadStateDataHABInterface_GetGameSpawn final
{
public:
	class ASQGameSpawn*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSquadStateDataHABInterface_GetGameSpawn) == 0x000008, "Wrong alignment on SQSquadStateDataHABInterface_GetGameSpawn");
static_assert(sizeof(SQSquadStateDataHABInterface_GetGameSpawn) == 0x000008, "Wrong size on SQSquadStateDataHABInterface_GetGameSpawn");
static_assert(offsetof(SQSquadStateDataHABInterface_GetGameSpawn, ReturnValue) == 0x000000, "Member 'SQSquadStateDataHABInterface_GetGameSpawn::ReturnValue' has a wrong offset!");

// Function Squad.SQSquadStateDataPlayerState.GetPlayerName
// 0x0010 (0x0010 - 0x0000)
struct SQSquadStateDataPlayerState_GetPlayerName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSquadStateDataPlayerState_GetPlayerName) == 0x000008, "Wrong alignment on SQSquadStateDataPlayerState_GetPlayerName");
static_assert(sizeof(SQSquadStateDataPlayerState_GetPlayerName) == 0x000010, "Wrong size on SQSquadStateDataPlayerState_GetPlayerName");
static_assert(offsetof(SQSquadStateDataPlayerState_GetPlayerName, ReturnValue) == 0x000000, "Member 'SQSquadStateDataPlayerState_GetPlayerName::ReturnValue' has a wrong offset!");

// Function Squad.SQStatefulButton.ChangeImage
// 0x0004 (0x0004 - 0x0000)
struct SQStatefulButton_ChangeImage final
{
public:
	int32                                         ImageIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQStatefulButton_ChangeImage) == 0x000004, "Wrong alignment on SQStatefulButton_ChangeImage");
static_assert(sizeof(SQStatefulButton_ChangeImage) == 0x000004, "Wrong size on SQStatefulButton_ChangeImage");
static_assert(offsetof(SQStatefulButton_ChangeImage, ImageIndex) == 0x000000, "Member 'SQStatefulButton_ChangeImage::ImageIndex' has a wrong offset!");

// Function Squad.SQStatefulButton.GetCurrentState
// 0x0004 (0x0004 - 0x0000)
struct SQStatefulButton_GetCurrentState final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQStatefulButton_GetCurrentState) == 0x000004, "Wrong alignment on SQStatefulButton_GetCurrentState");
static_assert(sizeof(SQStatefulButton_GetCurrentState) == 0x000004, "Wrong size on SQStatefulButton_GetCurrentState");
static_assert(offsetof(SQStatefulButton_GetCurrentState, ReturnValue) == 0x000000, "Member 'SQStatefulButton_GetCurrentState::ReturnValue' has a wrong offset!");

// Function Squad.SQSteamInventoryUI.GetFirstIncompatibleItem
// 0x0018 (0x0018 - 0x0000)
struct SQSteamInventoryUI_GetFirstIncompatibleItem final
{
public:
	const class USQSteamItem*                     ItemToCheckFor;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabledOnly;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13B2[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQSteamItem*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSteamInventoryUI_GetFirstIncompatibleItem) == 0x000008, "Wrong alignment on SQSteamInventoryUI_GetFirstIncompatibleItem");
static_assert(sizeof(SQSteamInventoryUI_GetFirstIncompatibleItem) == 0x000018, "Wrong size on SQSteamInventoryUI_GetFirstIncompatibleItem");
static_assert(offsetof(SQSteamInventoryUI_GetFirstIncompatibleItem, ItemToCheckFor) == 0x000000, "Member 'SQSteamInventoryUI_GetFirstIncompatibleItem::ItemToCheckFor' has a wrong offset!");
static_assert(offsetof(SQSteamInventoryUI_GetFirstIncompatibleItem, bEnabledOnly) == 0x000008, "Member 'SQSteamInventoryUI_GetFirstIncompatibleItem::bEnabledOnly' has a wrong offset!");
static_assert(offsetof(SQSteamInventoryUI_GetFirstIncompatibleItem, ReturnValue) == 0x000010, "Member 'SQSteamInventoryUI_GetFirstIncompatibleItem::ReturnValue' has a wrong offset!");

// Function Squad.SQSteamInventoryUI.GetIncompatibleItems
// 0x0020 (0x0020 - 0x0000)
struct SQSteamInventoryUI_GetIncompatibleItems final
{
public:
	const class USQSteamItem*                     ItemToCheckFor;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabledOnly;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13B3[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USQSteamItem*>                   ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSteamInventoryUI_GetIncompatibleItems) == 0x000008, "Wrong alignment on SQSteamInventoryUI_GetIncompatibleItems");
static_assert(sizeof(SQSteamInventoryUI_GetIncompatibleItems) == 0x000020, "Wrong size on SQSteamInventoryUI_GetIncompatibleItems");
static_assert(offsetof(SQSteamInventoryUI_GetIncompatibleItems, ItemToCheckFor) == 0x000000, "Member 'SQSteamInventoryUI_GetIncompatibleItems::ItemToCheckFor' has a wrong offset!");
static_assert(offsetof(SQSteamInventoryUI_GetIncompatibleItems, bEnabledOnly) == 0x000008, "Member 'SQSteamInventoryUI_GetIncompatibleItems::bEnabledOnly' has a wrong offset!");
static_assert(offsetof(SQSteamInventoryUI_GetIncompatibleItems, ReturnValue) == 0x000010, "Member 'SQSteamInventoryUI_GetIncompatibleItems::ReturnValue' has a wrong offset!");

// Function Squad.SQSteamInventoryUI.GetItemsOfClass
// 0x0018 (0x0018 - 0x0000)
struct SQSteamInventoryUI_GetItemsOfClass final
{
public:
	TSubclassOf<class USQSteamItem>               ItemClass;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USQSteamItem*>                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSteamInventoryUI_GetItemsOfClass) == 0x000008, "Wrong alignment on SQSteamInventoryUI_GetItemsOfClass");
static_assert(sizeof(SQSteamInventoryUI_GetItemsOfClass) == 0x000018, "Wrong size on SQSteamInventoryUI_GetItemsOfClass");
static_assert(offsetof(SQSteamInventoryUI_GetItemsOfClass, ItemClass) == 0x000000, "Member 'SQSteamInventoryUI_GetItemsOfClass::ItemClass' has a wrong offset!");
static_assert(offsetof(SQSteamInventoryUI_GetItemsOfClass, ReturnValue) == 0x000008, "Member 'SQSteamInventoryUI_GetItemsOfClass::ReturnValue' has a wrong offset!");

// Function Squad.SQSteamInventoryUI.OnGetCacheSuccess
// 0x0020 (0x0020 - 0x0000)
struct SQSteamInventoryUI_OnGetCacheSuccess final
{
public:
	struct FODKBazaarCacheCompletedData           Results;                                           // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSteamInventoryUI_OnGetCacheSuccess) == 0x000008, "Wrong alignment on SQSteamInventoryUI_OnGetCacheSuccess");
static_assert(sizeof(SQSteamInventoryUI_OnGetCacheSuccess) == 0x000020, "Wrong size on SQSteamInventoryUI_OnGetCacheSuccess");
static_assert(offsetof(SQSteamInventoryUI_OnGetCacheSuccess, Results) == 0x000000, "Member 'SQSteamInventoryUI_OnGetCacheSuccess::Results' has a wrong offset!");

// Function Squad.SQSteamItem.SetEnabled
// 0x0003 (0x0003 - 0x0000)
struct SQSteamItem_SetEnabled final
{
public:
	bool                                          bNewEnable;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideIncompatibles;                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSteamItem_SetEnabled) == 0x000001, "Wrong alignment on SQSteamItem_SetEnabled");
static_assert(sizeof(SQSteamItem_SetEnabled) == 0x000003, "Wrong size on SQSteamItem_SetEnabled");
static_assert(offsetof(SQSteamItem_SetEnabled, bNewEnable) == 0x000000, "Member 'SQSteamItem_SetEnabled::bNewEnable' has a wrong offset!");
static_assert(offsetof(SQSteamItem_SetEnabled, bOverrideIncompatibles) == 0x000001, "Member 'SQSteamItem_SetEnabled::bOverrideIncompatibles' has a wrong offset!");
static_assert(offsetof(SQSteamItem_SetEnabled, ReturnValue) == 0x000002, "Member 'SQSteamItem_SetEnabled::ReturnValue' has a wrong offset!");

// Function Squad.SQSteamItem.IsCompatibleWith
// 0x0010 (0x0010 - 0x0000)
struct SQSteamItem_IsCompatibleWith final
{
public:
	const class USQSteamItem*                     OtherItem;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13B5[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSteamItem_IsCompatibleWith) == 0x000008, "Wrong alignment on SQSteamItem_IsCompatibleWith");
static_assert(sizeof(SQSteamItem_IsCompatibleWith) == 0x000010, "Wrong size on SQSteamItem_IsCompatibleWith");
static_assert(offsetof(SQSteamItem_IsCompatibleWith, OtherItem) == 0x000000, "Member 'SQSteamItem_IsCompatibleWith::OtherItem' has a wrong offset!");
static_assert(offsetof(SQSteamItem_IsCompatibleWith, ReturnValue) == 0x000008, "Member 'SQSteamItem_IsCompatibleWith::ReturnValue' has a wrong offset!");

// Function Squad.SQTeamInterface.OnTeamChange
// 0x0004 (0x0004 - 0x0000)
struct SQTeamInterface_OnTeamChange final
{
public:
	int32                                         PreviousTeam;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamInterface_OnTeamChange) == 0x000004, "Wrong alignment on SQTeamInterface_OnTeamChange");
static_assert(sizeof(SQTeamInterface_OnTeamChange) == 0x000004, "Wrong size on SQTeamInterface_OnTeamChange");
static_assert(offsetof(SQTeamInterface_OnTeamChange, PreviousTeam) == 0x000000, "Member 'SQTeamInterface_OnTeamChange::PreviousTeam' has a wrong offset!");

// Function Squad.SQTeamInterface.GetTeamId
// 0x0004 (0x0004 - 0x0000)
struct SQTeamInterface_GetTeamId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamInterface_GetTeamId) == 0x000004, "Wrong alignment on SQTeamInterface_GetTeamId");
static_assert(sizeof(SQTeamInterface_GetTeamId) == 0x000004, "Wrong size on SQTeamInterface_GetTeamId");
static_assert(offsetof(SQTeamInterface_GetTeamId, ReturnValue) == 0x000000, "Member 'SQTeamInterface_GetTeamId::ReturnValue' has a wrong offset!");

// Function Squad.SQTeamState.AddPlayerState
// 0x0008 (0x0008 - 0x0000)
struct SQTeamState_AddPlayerState final
{
public:
	class ASQPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamState_AddPlayerState) == 0x000008, "Wrong alignment on SQTeamState_AddPlayerState");
static_assert(sizeof(SQTeamState_AddPlayerState) == 0x000008, "Wrong size on SQTeamState_AddPlayerState");
static_assert(offsetof(SQTeamState_AddPlayerState, PlayerState) == 0x000000, "Member 'SQTeamState_AddPlayerState::PlayerState' has a wrong offset!");

// Function Squad.SQTeamState.AdjustTickets
// 0x0004 (0x0004 - 0x0000)
struct SQTeamState_AdjustTickets final
{
public:
	int32                                         InDelta;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamState_AdjustTickets) == 0x000004, "Wrong alignment on SQTeamState_AdjustTickets");
static_assert(sizeof(SQTeamState_AdjustTickets) == 0x000004, "Wrong size on SQTeamState_AdjustTickets");
static_assert(offsetof(SQTeamState_AdjustTickets, InDelta) == 0x000000, "Member 'SQTeamState_AdjustTickets::InDelta' has a wrong offset!");

// Function Squad.SQTeamState.GetFirstAvailableSquadId
// 0x0004 (0x0004 - 0x0000)
struct SQTeamState_GetFirstAvailableSquadId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamState_GetFirstAvailableSquadId) == 0x000004, "Wrong alignment on SQTeamState_GetFirstAvailableSquadId");
static_assert(sizeof(SQTeamState_GetFirstAvailableSquadId) == 0x000004, "Wrong size on SQTeamState_GetFirstAvailableSquadId");
static_assert(offsetof(SQTeamState_GetFirstAvailableSquadId, ReturnValue) == 0x000000, "Member 'SQTeamState_GetFirstAvailableSquadId::ReturnValue' has a wrong offset!");

// Function Squad.SQTeamState.RemovePlayerState
// 0x0008 (0x0008 - 0x0000)
struct SQTeamState_RemovePlayerState final
{
public:
	class ASQPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamState_RemovePlayerState) == 0x000008, "Wrong alignment on SQTeamState_RemovePlayerState");
static_assert(sizeof(SQTeamState_RemovePlayerState) == 0x000008, "Wrong size on SQTeamState_RemovePlayerState");
static_assert(offsetof(SQTeamState_RemovePlayerState, PlayerState) == 0x000000, "Member 'SQTeamState_RemovePlayerState::PlayerState' has a wrong offset!");

// Function Squad.SQTeamState.ScorePoints
// 0x0020 (0x0020 - 0x0000)
struct SQTeamState_ScorePoints final
{
public:
	int32                                         Points;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13BE[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Reason;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ScoreGroup;                                        // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamState_ScorePoints) == 0x000008, "Wrong alignment on SQTeamState_ScorePoints");
static_assert(sizeof(SQTeamState_ScorePoints) == 0x000020, "Wrong size on SQTeamState_ScorePoints");
static_assert(offsetof(SQTeamState_ScorePoints, Points) == 0x000000, "Member 'SQTeamState_ScorePoints::Points' has a wrong offset!");
static_assert(offsetof(SQTeamState_ScorePoints, Reason) == 0x000008, "Member 'SQTeamState_ScorePoints::Reason' has a wrong offset!");
static_assert(offsetof(SQTeamState_ScorePoints, ScoreGroup) == 0x000018, "Member 'SQTeamState_ScorePoints::ScoreGroup' has a wrong offset!");

// Function Squad.SQTeamState.ScorePointsDelayed
// 0x0020 (0x0020 - 0x0000)
struct SQTeamState_ScorePointsDelayed final
{
public:
	int32                                         Points;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13BF[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Reason;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ScoreGroup;                                        // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamState_ScorePointsDelayed) == 0x000008, "Wrong alignment on SQTeamState_ScorePointsDelayed");
static_assert(sizeof(SQTeamState_ScorePointsDelayed) == 0x000020, "Wrong size on SQTeamState_ScorePointsDelayed");
static_assert(offsetof(SQTeamState_ScorePointsDelayed, Points) == 0x000000, "Member 'SQTeamState_ScorePointsDelayed::Points' has a wrong offset!");
static_assert(offsetof(SQTeamState_ScorePointsDelayed, Reason) == 0x000008, "Member 'SQTeamState_ScorePointsDelayed::Reason' has a wrong offset!");
static_assert(offsetof(SQTeamState_ScorePointsDelayed, ScoreGroup) == 0x000018, "Member 'SQTeamState_ScorePointsDelayed::ScoreGroup' has a wrong offset!");

// Function Squad.SQTeamState.SetTickets
// 0x0004 (0x0004 - 0x0000)
struct SQTeamState_SetTickets final
{
public:
	int32                                         InTickets;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamState_SetTickets) == 0x000004, "Wrong alignment on SQTeamState_SetTickets");
static_assert(sizeof(SQTeamState_SetTickets) == 0x000004, "Wrong size on SQTeamState_SetTickets");
static_assert(offsetof(SQTeamState_SetTickets, InTickets) == 0x000000, "Member 'SQTeamState_SetTickets::InTickets' has a wrong offset!");

// Function Squad.SQTeamState.GetActions
// 0x0018 (0x0018 - 0x0000)
struct SQTeamState_GetActions final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSQAvailabilityState_Action>    OutActions;                                        // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamState_GetActions) == 0x000008, "Wrong alignment on SQTeamState_GetActions");
static_assert(sizeof(SQTeamState_GetActions) == 0x000018, "Wrong size on SQTeamState_GetActions");
static_assert(offsetof(SQTeamState_GetActions, InPlayer) == 0x000000, "Member 'SQTeamState_GetActions::InPlayer' has a wrong offset!");
static_assert(offsetof(SQTeamState_GetActions, OutActions) == 0x000008, "Member 'SQTeamState_GetActions::OutActions' has a wrong offset!");

// Function Squad.SQTeamState.GetDefaultRole
// 0x0008 (0x0008 - 0x0000)
struct SQTeamState_GetDefaultRole final
{
public:
	class USQRoleSettings*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamState_GetDefaultRole) == 0x000008, "Wrong alignment on SQTeamState_GetDefaultRole");
static_assert(sizeof(SQTeamState_GetDefaultRole) == 0x000008, "Wrong size on SQTeamState_GetDefaultRole");
static_assert(offsetof(SQTeamState_GetDefaultRole, ReturnValue) == 0x000000, "Member 'SQTeamState_GetDefaultRole::ReturnValue' has a wrong offset!");

// Function Squad.SQTeamState.GetDefaultSquadLeaderRole
// 0x0008 (0x0008 - 0x0000)
struct SQTeamState_GetDefaultSquadLeaderRole final
{
public:
	class USQRoleSettings*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamState_GetDefaultSquadLeaderRole) == 0x000008, "Wrong alignment on SQTeamState_GetDefaultSquadLeaderRole");
static_assert(sizeof(SQTeamState_GetDefaultSquadLeaderRole) == 0x000008, "Wrong size on SQTeamState_GetDefaultSquadLeaderRole");
static_assert(offsetof(SQTeamState_GetDefaultSquadLeaderRole, ReturnValue) == 0x000000, "Member 'SQTeamState_GetDefaultSquadLeaderRole::ReturnValue' has a wrong offset!");

// Function Squad.SQTeamState.GetDeployables
// 0x0018 (0x0018 - 0x0000)
struct SQTeamState_GetDeployables final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSQAvailabilityState_Deployable> OutDeployables;                                    // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamState_GetDeployables) == 0x000008, "Wrong alignment on SQTeamState_GetDeployables");
static_assert(sizeof(SQTeamState_GetDeployables) == 0x000018, "Wrong size on SQTeamState_GetDeployables");
static_assert(offsetof(SQTeamState_GetDeployables, InPlayer) == 0x000000, "Member 'SQTeamState_GetDeployables::InPlayer' has a wrong offset!");
static_assert(offsetof(SQTeamState_GetDeployables, OutDeployables) == 0x000008, "Member 'SQTeamState_GetDeployables::OutDeployables' has a wrong offset!");

// Function Squad.SQTeamState.GetDeployablesForTeam
// 0x0010 (0x0010 - 0x0000)
struct SQTeamState_GetDeployablesForTeam final
{
public:
	TArray<struct FSQAvailabilityState_Deployable> OutDeployables;                                    // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamState_GetDeployablesForTeam) == 0x000008, "Wrong alignment on SQTeamState_GetDeployablesForTeam");
static_assert(sizeof(SQTeamState_GetDeployablesForTeam) == 0x000010, "Wrong size on SQTeamState_GetDeployablesForTeam");
static_assert(offsetof(SQTeamState_GetDeployablesForTeam, OutDeployables) == 0x000000, "Member 'SQTeamState_GetDeployablesForTeam::OutDeployables' has a wrong offset!");

// Function Squad.SQTeamState.GetFaction
// 0x0008 (0x0008 - 0x0000)
struct SQTeamState_GetFaction final
{
public:
	class USQFaction*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamState_GetFaction) == 0x000008, "Wrong alignment on SQTeamState_GetFaction");
static_assert(sizeof(SQTeamState_GetFaction) == 0x000008, "Wrong size on SQTeamState_GetFaction");
static_assert(offsetof(SQTeamState_GetFaction, ReturnValue) == 0x000000, "Member 'SQTeamState_GetFaction::ReturnValue' has a wrong offset!");

// Function Squad.SQTeamState.GetFactionDisplayName
// 0x0010 (0x0010 - 0x0000)
struct SQTeamState_GetFactionDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamState_GetFactionDisplayName) == 0x000008, "Wrong alignment on SQTeamState_GetFactionDisplayName");
static_assert(sizeof(SQTeamState_GetFactionDisplayName) == 0x000010, "Wrong size on SQTeamState_GetFactionDisplayName");
static_assert(offsetof(SQTeamState_GetFactionDisplayName, ReturnValue) == 0x000000, "Member 'SQTeamState_GetFactionDisplayName::ReturnValue' has a wrong offset!");

// Function Squad.SQTeamState.GetFactionId
// 0x0008 (0x0008 - 0x0000)
struct SQTeamState_GetFactionId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamState_GetFactionId) == 0x000004, "Wrong alignment on SQTeamState_GetFactionId");
static_assert(sizeof(SQTeamState_GetFactionId) == 0x000008, "Wrong size on SQTeamState_GetFactionId");
static_assert(offsetof(SQTeamState_GetFactionId, ReturnValue) == 0x000000, "Member 'SQTeamState_GetFactionId::ReturnValue' has a wrong offset!");

// Function Squad.SQTeamState.GetFactionSetupDisplayName
// 0x0010 (0x0010 - 0x0000)
struct SQTeamState_GetFactionSetupDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamState_GetFactionSetupDisplayName) == 0x000008, "Wrong alignment on SQTeamState_GetFactionSetupDisplayName");
static_assert(sizeof(SQTeamState_GetFactionSetupDisplayName) == 0x000010, "Wrong size on SQTeamState_GetFactionSetupDisplayName");
static_assert(offsetof(SQTeamState_GetFactionSetupDisplayName, ReturnValue) == 0x000000, "Member 'SQTeamState_GetFactionSetupDisplayName::ReturnValue' has a wrong offset!");

// Function Squad.SQTeamState.GetLeaveSquadRole
// 0x0008 (0x0008 - 0x0000)
struct SQTeamState_GetLeaveSquadRole final
{
public:
	class USQRoleSettings*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamState_GetLeaveSquadRole) == 0x000008, "Wrong alignment on SQTeamState_GetLeaveSquadRole");
static_assert(sizeof(SQTeamState_GetLeaveSquadRole) == 0x000008, "Wrong size on SQTeamState_GetLeaveSquadRole");
static_assert(offsetof(SQTeamState_GetLeaveSquadRole, ReturnValue) == 0x000000, "Member 'SQTeamState_GetLeaveSquadRole::ReturnValue' has a wrong offset!");

// Function Squad.SQTeamState.GetPlayerCount
// 0x0004 (0x0004 - 0x0000)
struct SQTeamState_GetPlayerCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamState_GetPlayerCount) == 0x000004, "Wrong alignment on SQTeamState_GetPlayerCount");
static_assert(sizeof(SQTeamState_GetPlayerCount) == 0x000004, "Wrong size on SQTeamState_GetPlayerCount");
static_assert(offsetof(SQTeamState_GetPlayerCount, ReturnValue) == 0x000000, "Member 'SQTeamState_GetPlayerCount::ReturnValue' has a wrong offset!");

// Function Squad.SQTeamState.GetRoles
// 0x0018 (0x0018 - 0x0000)
struct SQTeamState_GetRoles final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSQAvailabilityState_Role>      OutRoles;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamState_GetRoles) == 0x000008, "Wrong alignment on SQTeamState_GetRoles");
static_assert(sizeof(SQTeamState_GetRoles) == 0x000018, "Wrong size on SQTeamState_GetRoles");
static_assert(offsetof(SQTeamState_GetRoles, InPlayer) == 0x000000, "Member 'SQTeamState_GetRoles::InPlayer' has a wrong offset!");
static_assert(offsetof(SQTeamState_GetRoles, OutRoles) == 0x000008, "Member 'SQTeamState_GetRoles::OutRoles' has a wrong offset!");

// Function Squad.SQTeamState.GetRolesForRearm
// 0x0028 (0x0028 - 0x0000)
struct SQTeamState_GetRolesForRearm final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ISQRearmSource>        InRearmSource;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FSQAvailabilityState_Role>      OutRoles;                                          // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamState_GetRolesForRearm) == 0x000008, "Wrong alignment on SQTeamState_GetRolesForRearm");
static_assert(sizeof(SQTeamState_GetRolesForRearm) == 0x000028, "Wrong size on SQTeamState_GetRolesForRearm");
static_assert(offsetof(SQTeamState_GetRolesForRearm, InPlayer) == 0x000000, "Member 'SQTeamState_GetRolesForRearm::InPlayer' has a wrong offset!");
static_assert(offsetof(SQTeamState_GetRolesForRearm, InRearmSource) == 0x000008, "Member 'SQTeamState_GetRolesForRearm::InRearmSource' has a wrong offset!");
static_assert(offsetof(SQTeamState_GetRolesForRearm, OutRoles) == 0x000018, "Member 'SQTeamState_GetRolesForRearm::OutRoles' has a wrong offset!");

// Function Squad.SQTeamState.GetTickets
// 0x0004 (0x0004 - 0x0000)
struct SQTeamState_GetTickets final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamState_GetTickets) == 0x000004, "Wrong alignment on SQTeamState_GetTickets");
static_assert(sizeof(SQTeamState_GetTickets) == 0x000004, "Wrong size on SQTeamState_GetTickets");
static_assert(offsetof(SQTeamState_GetTickets, ReturnValue) == 0x000000, "Member 'SQTeamState_GetTickets::ReturnValue' has a wrong offset!");

// Function Squad.SQTeamState.GetVehicles
// 0x0018 (0x0018 - 0x0000)
struct SQTeamState_GetVehicles final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSQAvailabilityState_Vehicle>   OutVehicles;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamState_GetVehicles) == 0x000008, "Wrong alignment on SQTeamState_GetVehicles");
static_assert(sizeof(SQTeamState_GetVehicles) == 0x000018, "Wrong size on SQTeamState_GetVehicles");
static_assert(offsetof(SQTeamState_GetVehicles, InPlayer) == 0x000000, "Member 'SQTeamState_GetVehicles::InPlayer' has a wrong offset!");
static_assert(offsetof(SQTeamState_GetVehicles, OutVehicles) == 0x000008, "Member 'SQTeamState_GetVehicles::OutVehicles' has a wrong offset!");

// Function Squad.SQTeamState.GetVehiclesForTeam
// 0x0010 (0x0010 - 0x0000)
struct SQTeamState_GetVehiclesForTeam final
{
public:
	TArray<struct FSQAvailabilityState_Vehicle>   OutVehicles;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamState_GetVehiclesForTeam) == 0x000008, "Wrong alignment on SQTeamState_GetVehiclesForTeam");
static_assert(sizeof(SQTeamState_GetVehiclesForTeam) == 0x000010, "Wrong size on SQTeamState_GetVehiclesForTeam");
static_assert(offsetof(SQTeamState_GetVehiclesForTeam, OutVehicles) == 0x000000, "Member 'SQTeamState_GetVehiclesForTeam::OutVehicles' has a wrong offset!");

// Function Squad.SQTeamState.IsConfigured
// 0x0001 (0x0001 - 0x0000)
struct SQTeamState_IsConfigured final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTeamState_IsConfigured) == 0x000001, "Wrong alignment on SQTeamState_IsConfigured");
static_assert(sizeof(SQTeamState_IsConfigured) == 0x000001, "Wrong size on SQTeamState_IsConfigured");
static_assert(offsetof(SQTeamState_IsConfigured, ReturnValue) == 0x000000, "Member 'SQTeamState_IsConfigured::ReturnValue' has a wrong offset!");

// Function Squad.SQTeamState.TryGetActionAvailability
// 0x0068 (0x0068 - 0x0000)
struct SQTeamState_TryGetActionAvailability final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USQActionSettings*                InActionSetting;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState_Action            OutUpdatedActionState;                             // 0x0010(0x0050)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C0[0x7];                                     // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQTeamState_TryGetActionAvailability) == 0x000008, "Wrong alignment on SQTeamState_TryGetActionAvailability");
static_assert(sizeof(SQTeamState_TryGetActionAvailability) == 0x000068, "Wrong size on SQTeamState_TryGetActionAvailability");
static_assert(offsetof(SQTeamState_TryGetActionAvailability, InPlayer) == 0x000000, "Member 'SQTeamState_TryGetActionAvailability::InPlayer' has a wrong offset!");
static_assert(offsetof(SQTeamState_TryGetActionAvailability, InActionSetting) == 0x000008, "Member 'SQTeamState_TryGetActionAvailability::InActionSetting' has a wrong offset!");
static_assert(offsetof(SQTeamState_TryGetActionAvailability, OutUpdatedActionState) == 0x000010, "Member 'SQTeamState_TryGetActionAvailability::OutUpdatedActionState' has a wrong offset!");
static_assert(offsetof(SQTeamState_TryGetActionAvailability, ReturnValue) == 0x000060, "Member 'SQTeamState_TryGetActionAvailability::ReturnValue' has a wrong offset!");

// Function Squad.SQTeamState.TryGetActiveRoleAvailability
// 0x0068 (0x0068 - 0x0000)
struct SQTeamState_TryGetActiveRoleAvailability final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState_Role              OutActiveRoleState;                                // 0x0008(0x0058)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C1[0x7];                                     // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQTeamState_TryGetActiveRoleAvailability) == 0x000008, "Wrong alignment on SQTeamState_TryGetActiveRoleAvailability");
static_assert(sizeof(SQTeamState_TryGetActiveRoleAvailability) == 0x000068, "Wrong size on SQTeamState_TryGetActiveRoleAvailability");
static_assert(offsetof(SQTeamState_TryGetActiveRoleAvailability, InPlayer) == 0x000000, "Member 'SQTeamState_TryGetActiveRoleAvailability::InPlayer' has a wrong offset!");
static_assert(offsetof(SQTeamState_TryGetActiveRoleAvailability, OutActiveRoleState) == 0x000008, "Member 'SQTeamState_TryGetActiveRoleAvailability::OutActiveRoleState' has a wrong offset!");
static_assert(offsetof(SQTeamState_TryGetActiveRoleAvailability, ReturnValue) == 0x000060, "Member 'SQTeamState_TryGetActiveRoleAvailability::ReturnValue' has a wrong offset!");

// Function Squad.SQTeamState.TryGetDeployableAvailability
// 0x0068 (0x0068 - 0x0000)
struct SQTeamState_TryGetDeployableAvailability final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USQDeployableSettings*            InDeployableSetting;                               // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState_Deployable        OutUpdatedDeployableState;                         // 0x0010(0x0050)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C2[0x7];                                     // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQTeamState_TryGetDeployableAvailability) == 0x000008, "Wrong alignment on SQTeamState_TryGetDeployableAvailability");
static_assert(sizeof(SQTeamState_TryGetDeployableAvailability) == 0x000068, "Wrong size on SQTeamState_TryGetDeployableAvailability");
static_assert(offsetof(SQTeamState_TryGetDeployableAvailability, InPlayer) == 0x000000, "Member 'SQTeamState_TryGetDeployableAvailability::InPlayer' has a wrong offset!");
static_assert(offsetof(SQTeamState_TryGetDeployableAvailability, InDeployableSetting) == 0x000008, "Member 'SQTeamState_TryGetDeployableAvailability::InDeployableSetting' has a wrong offset!");
static_assert(offsetof(SQTeamState_TryGetDeployableAvailability, OutUpdatedDeployableState) == 0x000010, "Member 'SQTeamState_TryGetDeployableAvailability::OutUpdatedDeployableState' has a wrong offset!");
static_assert(offsetof(SQTeamState_TryGetDeployableAvailability, ReturnValue) == 0x000060, "Member 'SQTeamState_TryGetDeployableAvailability::ReturnValue' has a wrong offset!");

// Function Squad.SQTeamState.TryGetFactionDisplayName
// 0x0020 (0x0020 - 0x0000)
struct SQTeamState_TryGetFactionDisplayName final
{
public:
	class FText                                   OutDisplayName;                                    // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C3[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQTeamState_TryGetFactionDisplayName) == 0x000008, "Wrong alignment on SQTeamState_TryGetFactionDisplayName");
static_assert(sizeof(SQTeamState_TryGetFactionDisplayName) == 0x000020, "Wrong size on SQTeamState_TryGetFactionDisplayName");
static_assert(offsetof(SQTeamState_TryGetFactionDisplayName, OutDisplayName) == 0x000000, "Member 'SQTeamState_TryGetFactionDisplayName::OutDisplayName' has a wrong offset!");
static_assert(offsetof(SQTeamState_TryGetFactionDisplayName, ReturnValue) == 0x000018, "Member 'SQTeamState_TryGetFactionDisplayName::ReturnValue' has a wrong offset!");

// Function Squad.SQTeamState.TryGetFactionSetupDisplayName
// 0x0020 (0x0020 - 0x0000)
struct SQTeamState_TryGetFactionSetupDisplayName final
{
public:
	class FText                                   OutDisplayName;                                    // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C4[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQTeamState_TryGetFactionSetupDisplayName) == 0x000008, "Wrong alignment on SQTeamState_TryGetFactionSetupDisplayName");
static_assert(sizeof(SQTeamState_TryGetFactionSetupDisplayName) == 0x000020, "Wrong size on SQTeamState_TryGetFactionSetupDisplayName");
static_assert(offsetof(SQTeamState_TryGetFactionSetupDisplayName, OutDisplayName) == 0x000000, "Member 'SQTeamState_TryGetFactionSetupDisplayName::OutDisplayName' has a wrong offset!");
static_assert(offsetof(SQTeamState_TryGetFactionSetupDisplayName, ReturnValue) == 0x000018, "Member 'SQTeamState_TryGetFactionSetupDisplayName::ReturnValue' has a wrong offset!");

// Function Squad.SQTeamState.TryGetFactionShortName
// 0x0020 (0x0020 - 0x0000)
struct SQTeamState_TryGetFactionShortName final
{
public:
	class FText                                   OutShortName;                                      // 0x0000(0x0018)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C5[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQTeamState_TryGetFactionShortName) == 0x000008, "Wrong alignment on SQTeamState_TryGetFactionShortName");
static_assert(sizeof(SQTeamState_TryGetFactionShortName) == 0x000020, "Wrong size on SQTeamState_TryGetFactionShortName");
static_assert(offsetof(SQTeamState_TryGetFactionShortName, OutShortName) == 0x000000, "Member 'SQTeamState_TryGetFactionShortName::OutShortName' has a wrong offset!");
static_assert(offsetof(SQTeamState_TryGetFactionShortName, ReturnValue) == 0x000018, "Member 'SQTeamState_TryGetFactionShortName::ReturnValue' has a wrong offset!");

// Function Squad.SQTeamState.TryGetRoleAvailability
// 0x0070 (0x0070 - 0x0000)
struct SQTeamState_TryGetRoleAvailability final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USQRoleSettings*                  InRoleSetting;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState_Role              OutUpdatedRoleState;                               // 0x0010(0x0058)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C6[0x7];                                     // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQTeamState_TryGetRoleAvailability) == 0x000008, "Wrong alignment on SQTeamState_TryGetRoleAvailability");
static_assert(sizeof(SQTeamState_TryGetRoleAvailability) == 0x000070, "Wrong size on SQTeamState_TryGetRoleAvailability");
static_assert(offsetof(SQTeamState_TryGetRoleAvailability, InPlayer) == 0x000000, "Member 'SQTeamState_TryGetRoleAvailability::InPlayer' has a wrong offset!");
static_assert(offsetof(SQTeamState_TryGetRoleAvailability, InRoleSetting) == 0x000008, "Member 'SQTeamState_TryGetRoleAvailability::InRoleSetting' has a wrong offset!");
static_assert(offsetof(SQTeamState_TryGetRoleAvailability, OutUpdatedRoleState) == 0x000010, "Member 'SQTeamState_TryGetRoleAvailability::OutUpdatedRoleState' has a wrong offset!");
static_assert(offsetof(SQTeamState_TryGetRoleAvailability, ReturnValue) == 0x000068, "Member 'SQTeamState_TryGetRoleAvailability::ReturnValue' has a wrong offset!");

// Function Squad.SQTeamState.TryGetRoleRearmAvailability
// 0x0080 (0x0080 - 0x0000)
struct SQTeamState_TryGetRoleRearmAvailability final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ISQRearmSource>        InRearmSource;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	const class USQRoleSettings*                  InRoleSetting;                                     // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState_Role              OutUpdatedRoleState;                               // 0x0020(0x0058)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         OutCost;                                           // 0x0078(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x007C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C7[0x3];                                     // 0x007D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQTeamState_TryGetRoleRearmAvailability) == 0x000008, "Wrong alignment on SQTeamState_TryGetRoleRearmAvailability");
static_assert(sizeof(SQTeamState_TryGetRoleRearmAvailability) == 0x000080, "Wrong size on SQTeamState_TryGetRoleRearmAvailability");
static_assert(offsetof(SQTeamState_TryGetRoleRearmAvailability, InPlayer) == 0x000000, "Member 'SQTeamState_TryGetRoleRearmAvailability::InPlayer' has a wrong offset!");
static_assert(offsetof(SQTeamState_TryGetRoleRearmAvailability, InRearmSource) == 0x000008, "Member 'SQTeamState_TryGetRoleRearmAvailability::InRearmSource' has a wrong offset!");
static_assert(offsetof(SQTeamState_TryGetRoleRearmAvailability, InRoleSetting) == 0x000018, "Member 'SQTeamState_TryGetRoleRearmAvailability::InRoleSetting' has a wrong offset!");
static_assert(offsetof(SQTeamState_TryGetRoleRearmAvailability, OutUpdatedRoleState) == 0x000020, "Member 'SQTeamState_TryGetRoleRearmAvailability::OutUpdatedRoleState' has a wrong offset!");
static_assert(offsetof(SQTeamState_TryGetRoleRearmAvailability, OutCost) == 0x000078, "Member 'SQTeamState_TryGetRoleRearmAvailability::OutCost' has a wrong offset!");
static_assert(offsetof(SQTeamState_TryGetRoleRearmAvailability, ReturnValue) == 0x00007C, "Member 'SQTeamState_TryGetRoleRearmAvailability::ReturnValue' has a wrong offset!");

// Function Squad.SQTeamState.TryGetVehicleAvailability
// 0x0068 (0x0068 - 0x0000)
struct SQTeamState_TryGetVehicleAvailability final
{
public:
	class ASQPlayerController*                    InPlayer;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USQVehicleSettings*               InVehicleSetting;                                  // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState_Vehicle           OutUpdatedVehicleState;                            // 0x0010(0x0050)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C8[0x7];                                     // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQTeamState_TryGetVehicleAvailability) == 0x000008, "Wrong alignment on SQTeamState_TryGetVehicleAvailability");
static_assert(sizeof(SQTeamState_TryGetVehicleAvailability) == 0x000068, "Wrong size on SQTeamState_TryGetVehicleAvailability");
static_assert(offsetof(SQTeamState_TryGetVehicleAvailability, InPlayer) == 0x000000, "Member 'SQTeamState_TryGetVehicleAvailability::InPlayer' has a wrong offset!");
static_assert(offsetof(SQTeamState_TryGetVehicleAvailability, InVehicleSetting) == 0x000008, "Member 'SQTeamState_TryGetVehicleAvailability::InVehicleSetting' has a wrong offset!");
static_assert(offsetof(SQTeamState_TryGetVehicleAvailability, OutUpdatedVehicleState) == 0x000010, "Member 'SQTeamState_TryGetVehicleAvailability::OutUpdatedVehicleState' has a wrong offset!");
static_assert(offsetof(SQTeamState_TryGetVehicleAvailability, ReturnValue) == 0x000060, "Member 'SQTeamState_TryGetVehicleAvailability::ReturnValue' has a wrong offset!");

// Function Squad.SQTemperatureComponent.AdjustTemperature
// 0x0010 (0x0010 - 0x0000)
struct SQTemperatureComponent_AdjustTemperature final
{
public:
	float                                         DegressOfAdjustment;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13CA[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            TempChanger;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTemperatureComponent_AdjustTemperature) == 0x000008, "Wrong alignment on SQTemperatureComponent_AdjustTemperature");
static_assert(sizeof(SQTemperatureComponent_AdjustTemperature) == 0x000010, "Wrong size on SQTemperatureComponent_AdjustTemperature");
static_assert(offsetof(SQTemperatureComponent_AdjustTemperature, DegressOfAdjustment) == 0x000000, "Member 'SQTemperatureComponent_AdjustTemperature::DegressOfAdjustment' has a wrong offset!");
static_assert(offsetof(SQTemperatureComponent_AdjustTemperature, TempChanger) == 0x000008, "Member 'SQTemperatureComponent_AdjustTemperature::TempChanger' has a wrong offset!");

// Function Squad.SQTemperatureComponent.OnRep_CurrentTemperature
// 0x0004 (0x0004 - 0x0000)
struct SQTemperatureComponent_OnRep_CurrentTemperature final
{
public:
	float                                         PreviousTemperature;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQTemperatureComponent_OnRep_CurrentTemperature) == 0x000004, "Wrong alignment on SQTemperatureComponent_OnRep_CurrentTemperature");
static_assert(sizeof(SQTemperatureComponent_OnRep_CurrentTemperature) == 0x000004, "Wrong size on SQTemperatureComponent_OnRep_CurrentTemperature");
static_assert(offsetof(SQTemperatureComponent_OnRep_CurrentTemperature, PreviousTemperature) == 0x000000, "Member 'SQTemperatureComponent_OnRep_CurrentTemperature::PreviousTemperature' has a wrong offset!");

// Function Squad.SQToastWidget.SetLifetime
// 0x0004 (0x0004 - 0x0000)
struct SQToastWidget_SetLifetime final
{
public:
	float                                         InLifetime;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQToastWidget_SetLifetime) == 0x000004, "Wrong alignment on SQToastWidget_SetLifetime");
static_assert(sizeof(SQToastWidget_SetLifetime) == 0x000004, "Wrong size on SQToastWidget_SetLifetime");
static_assert(offsetof(SQToastWidget_SetLifetime, InLifetime) == 0x000000, "Member 'SQToastWidget_SetLifetime::InLifetime' has a wrong offset!");

// Function Squad.SQToastWidget.SetToastText
// 0x0018 (0x0018 - 0x0000)
struct SQToastWidget_SetToastText final
{
public:
	class FText                                   InToastText;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQToastWidget_SetToastText) == 0x000008, "Wrong alignment on SQToastWidget_SetToastText");
static_assert(sizeof(SQToastWidget_SetToastText) == 0x000018, "Wrong size on SQToastWidget_SetToastText");
static_assert(offsetof(SQToastWidget_SetToastText, InToastText) == 0x000000, "Member 'SQToastWidget_SetToastText::InToastText' has a wrong offset!");

// DelegateFunction Squad.SQToastWidget.ToastTextUpdatedEvent__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct SQToastWidget_ToastTextUpdatedEvent__DelegateSignature final
{
public:
	class FText                                   Param_ToastText;                                   // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQToastWidget_ToastTextUpdatedEvent__DelegateSignature) == 0x000008, "Wrong alignment on SQToastWidget_ToastTextUpdatedEvent__DelegateSignature");
static_assert(sizeof(SQToastWidget_ToastTextUpdatedEvent__DelegateSignature) == 0x000018, "Wrong size on SQToastWidget_ToastTextUpdatedEvent__DelegateSignature");
static_assert(offsetof(SQToastWidget_ToastTextUpdatedEvent__DelegateSignature, Param_ToastText) == 0x000000, "Member 'SQToastWidget_ToastTextUpdatedEvent__DelegateSignature::Param_ToastText' has a wrong offset!");

// Function Squad.SQToastWidget.GetToastText
// 0x0018 (0x0018 - 0x0000)
struct SQToastWidget_GetToastText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQToastWidget_GetToastText) == 0x000008, "Wrong alignment on SQToastWidget_GetToastText");
static_assert(sizeof(SQToastWidget_GetToastText) == 0x000018, "Wrong size on SQToastWidget_GetToastText");
static_assert(offsetof(SQToastWidget_GetToastText, ReturnValue) == 0x000000, "Member 'SQToastWidget_GetToastText::ReturnValue' has a wrong offset!");

// Function Squad.SQVelocityRotatingMovementComponent.AddRotationInput
// 0x000C (0x000C - 0x0000)
struct SQVelocityRotatingMovementComponent_AddRotationInput final
{
public:
	struct FRotator                               InRotationInput;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVelocityRotatingMovementComponent_AddRotationInput) == 0x000004, "Wrong alignment on SQVelocityRotatingMovementComponent_AddRotationInput");
static_assert(sizeof(SQVelocityRotatingMovementComponent_AddRotationInput) == 0x00000C, "Wrong size on SQVelocityRotatingMovementComponent_AddRotationInput");
static_assert(offsetof(SQVelocityRotatingMovementComponent_AddRotationInput, InRotationInput) == 0x000000, "Member 'SQVelocityRotatingMovementComponent_AddRotationInput::InRotationInput' has a wrong offset!");

// Function Squad.SQVelocityRotatingMovementComponent.ClientSetStabilizationTargetHeading
// 0x000C (0x000C - 0x0000)
struct SQVelocityRotatingMovementComponent_ClientSetStabilizationTargetHeading final
{
public:
	struct FRotator                               InTargetHeading;                                   // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVelocityRotatingMovementComponent_ClientSetStabilizationTargetHeading) == 0x000004, "Wrong alignment on SQVelocityRotatingMovementComponent_ClientSetStabilizationTargetHeading");
static_assert(sizeof(SQVelocityRotatingMovementComponent_ClientSetStabilizationTargetHeading) == 0x00000C, "Wrong size on SQVelocityRotatingMovementComponent_ClientSetStabilizationTargetHeading");
static_assert(offsetof(SQVelocityRotatingMovementComponent_ClientSetStabilizationTargetHeading, InTargetHeading) == 0x000000, "Member 'SQVelocityRotatingMovementComponent_ClientSetStabilizationTargetHeading::InTargetHeading' has a wrong offset!");

// Function Squad.SQVelocityRotatingMovementComponent.ServerSetStabilizationTargetHeading
// 0x000C (0x000C - 0x0000)
struct SQVelocityRotatingMovementComponent_ServerSetStabilizationTargetHeading final
{
public:
	struct FRotator                               InTargetHeading;                                   // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVelocityRotatingMovementComponent_ServerSetStabilizationTargetHeading) == 0x000004, "Wrong alignment on SQVelocityRotatingMovementComponent_ServerSetStabilizationTargetHeading");
static_assert(sizeof(SQVelocityRotatingMovementComponent_ServerSetStabilizationTargetHeading) == 0x00000C, "Wrong size on SQVelocityRotatingMovementComponent_ServerSetStabilizationTargetHeading");
static_assert(offsetof(SQVelocityRotatingMovementComponent_ServerSetStabilizationTargetHeading, InTargetHeading) == 0x000000, "Member 'SQVelocityRotatingMovementComponent_ServerSetStabilizationTargetHeading::InTargetHeading' has a wrong offset!");

// Function Squad.SQVelocityRotatingMovementComponent.SetStabilizationEnabled
// 0x0001 (0x0001 - 0x0000)
struct SQVelocityRotatingMovementComponent_SetStabilizationEnabled final
{
public:
	bool                                          bInIsStabilizationEnabled;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVelocityRotatingMovementComponent_SetStabilizationEnabled) == 0x000001, "Wrong alignment on SQVelocityRotatingMovementComponent_SetStabilizationEnabled");
static_assert(sizeof(SQVelocityRotatingMovementComponent_SetStabilizationEnabled) == 0x000001, "Wrong size on SQVelocityRotatingMovementComponent_SetStabilizationEnabled");
static_assert(offsetof(SQVelocityRotatingMovementComponent_SetStabilizationEnabled, bInIsStabilizationEnabled) == 0x000000, "Member 'SQVelocityRotatingMovementComponent_SetStabilizationEnabled::bInIsStabilizationEnabled' has a wrong offset!");

// Function Squad.SQVelocityRotatingMovementComponent.SetStabilizationTargetHeading
// 0x000C (0x000C - 0x0000)
struct SQVelocityRotatingMovementComponent_SetStabilizationTargetHeading final
{
public:
	struct FRotator                               InTargetHeading;                                   // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVelocityRotatingMovementComponent_SetStabilizationTargetHeading) == 0x000004, "Wrong alignment on SQVelocityRotatingMovementComponent_SetStabilizationTargetHeading");
static_assert(sizeof(SQVelocityRotatingMovementComponent_SetStabilizationTargetHeading) == 0x00000C, "Wrong size on SQVelocityRotatingMovementComponent_SetStabilizationTargetHeading");
static_assert(offsetof(SQVelocityRotatingMovementComponent_SetStabilizationTargetHeading, InTargetHeading) == 0x000000, "Member 'SQVelocityRotatingMovementComponent_SetStabilizationTargetHeading::InTargetHeading' has a wrong offset!");

// Function Squad.SQVelocityRotatingMovementComponent.ToggleStabilization
// 0x0001 (0x0001 - 0x0000)
struct SQVelocityRotatingMovementComponent_ToggleStabilization final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVelocityRotatingMovementComponent_ToggleStabilization) == 0x000001, "Wrong alignment on SQVelocityRotatingMovementComponent_ToggleStabilization");
static_assert(sizeof(SQVelocityRotatingMovementComponent_ToggleStabilization) == 0x000001, "Wrong size on SQVelocityRotatingMovementComponent_ToggleStabilization");
static_assert(offsetof(SQVelocityRotatingMovementComponent_ToggleStabilization, ReturnValue) == 0x000000, "Member 'SQVelocityRotatingMovementComponent_ToggleStabilization::ReturnValue' has a wrong offset!");

// Function Squad.SQVelocityRotatingMovementComponent.GetCurrentLocation
// 0x000C (0x000C - 0x0000)
struct SQVelocityRotatingMovementComponent_GetCurrentLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVelocityRotatingMovementComponent_GetCurrentLocation) == 0x000004, "Wrong alignment on SQVelocityRotatingMovementComponent_GetCurrentLocation");
static_assert(sizeof(SQVelocityRotatingMovementComponent_GetCurrentLocation) == 0x00000C, "Wrong size on SQVelocityRotatingMovementComponent_GetCurrentLocation");
static_assert(offsetof(SQVelocityRotatingMovementComponent_GetCurrentLocation, ReturnValue) == 0x000000, "Member 'SQVelocityRotatingMovementComponent_GetCurrentLocation::ReturnValue' has a wrong offset!");

// Function Squad.SQVelocityRotatingMovementComponent.GetCurrentRotation
// 0x000C (0x000C - 0x0000)
struct SQVelocityRotatingMovementComponent_GetCurrentRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVelocityRotatingMovementComponent_GetCurrentRotation) == 0x000004, "Wrong alignment on SQVelocityRotatingMovementComponent_GetCurrentRotation");
static_assert(sizeof(SQVelocityRotatingMovementComponent_GetCurrentRotation) == 0x00000C, "Wrong size on SQVelocityRotatingMovementComponent_GetCurrentRotation");
static_assert(offsetof(SQVelocityRotatingMovementComponent_GetCurrentRotation, ReturnValue) == 0x000000, "Member 'SQVelocityRotatingMovementComponent_GetCurrentRotation::ReturnValue' has a wrong offset!");

// Function Squad.SQVelocityRotatingMovementComponent.GetWorldRotation
// 0x0010 (0x0010 - 0x0000)
struct SQVelocityRotatingMovementComponent_GetWorldRotation final
{
public:
	struct FQuat                                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVelocityRotatingMovementComponent_GetWorldRotation) == 0x000010, "Wrong alignment on SQVelocityRotatingMovementComponent_GetWorldRotation");
static_assert(sizeof(SQVelocityRotatingMovementComponent_GetWorldRotation) == 0x000010, "Wrong size on SQVelocityRotatingMovementComponent_GetWorldRotation");
static_assert(offsetof(SQVelocityRotatingMovementComponent_GetWorldRotation, ReturnValue) == 0x000000, "Member 'SQVelocityRotatingMovementComponent_GetWorldRotation::ReturnValue' has a wrong offset!");

// Function Squad.SQVelocityRotatingMovementComponent.IsStabilizationEnabled
// 0x0001 (0x0001 - 0x0000)
struct SQVelocityRotatingMovementComponent_IsStabilizationEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVelocityRotatingMovementComponent_IsStabilizationEnabled) == 0x000001, "Wrong alignment on SQVelocityRotatingMovementComponent_IsStabilizationEnabled");
static_assert(sizeof(SQVelocityRotatingMovementComponent_IsStabilizationEnabled) == 0x000001, "Wrong size on SQVelocityRotatingMovementComponent_IsStabilizationEnabled");
static_assert(offsetof(SQVelocityRotatingMovementComponent_IsStabilizationEnabled, ReturnValue) == 0x000000, "Member 'SQVelocityRotatingMovementComponent_IsStabilizationEnabled::ReturnValue' has a wrong offset!");

// Function Squad.SQUpdateSessionsCallbackProxy.GetAnticheatProtected
// 0x0110 (0x0110 - 0x0000)
struct SQUpdateSessionsCallbackProxy_GetAnticheatProtected final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0108(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13D3[0x7];                                     // 0x0109(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQUpdateSessionsCallbackProxy_GetAnticheatProtected) == 0x000008, "Wrong alignment on SQUpdateSessionsCallbackProxy_GetAnticheatProtected");
static_assert(sizeof(SQUpdateSessionsCallbackProxy_GetAnticheatProtected) == 0x000110, "Wrong size on SQUpdateSessionsCallbackProxy_GetAnticheatProtected");
static_assert(offsetof(SQUpdateSessionsCallbackProxy_GetAnticheatProtected, Result) == 0x000000, "Member 'SQUpdateSessionsCallbackProxy_GetAnticheatProtected::Result' has a wrong offset!");
static_assert(offsetof(SQUpdateSessionsCallbackProxy_GetAnticheatProtected, ReturnValue) == 0x000108, "Member 'SQUpdateSessionsCallbackProxy_GetAnticheatProtected::ReturnValue' has a wrong offset!");

// Function Squad.SQUpdateSessionsCallbackProxy.GetCurrentPlayers
// 0x0110 (0x0110 - 0x0000)
struct SQUpdateSessionsCallbackProxy_GetCurrentPlayers final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0108(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13D4[0x4];                                     // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQUpdateSessionsCallbackProxy_GetCurrentPlayers) == 0x000008, "Wrong alignment on SQUpdateSessionsCallbackProxy_GetCurrentPlayers");
static_assert(sizeof(SQUpdateSessionsCallbackProxy_GetCurrentPlayers) == 0x000110, "Wrong size on SQUpdateSessionsCallbackProxy_GetCurrentPlayers");
static_assert(offsetof(SQUpdateSessionsCallbackProxy_GetCurrentPlayers, Result) == 0x000000, "Member 'SQUpdateSessionsCallbackProxy_GetCurrentPlayers::Result' has a wrong offset!");
static_assert(offsetof(SQUpdateSessionsCallbackProxy_GetCurrentPlayers, ReturnValue) == 0x000108, "Member 'SQUpdateSessionsCallbackProxy_GetCurrentPlayers::ReturnValue' has a wrong offset!");

// Function Squad.SQUpdateSessionsCallbackProxy.GetGameMode
// 0x0118 (0x0118 - 0x0000)
struct SQUpdateSessionsCallbackProxy_GetGameMode final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0108(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQUpdateSessionsCallbackProxy_GetGameMode) == 0x000008, "Wrong alignment on SQUpdateSessionsCallbackProxy_GetGameMode");
static_assert(sizeof(SQUpdateSessionsCallbackProxy_GetGameMode) == 0x000118, "Wrong size on SQUpdateSessionsCallbackProxy_GetGameMode");
static_assert(offsetof(SQUpdateSessionsCallbackProxy_GetGameMode, Result) == 0x000000, "Member 'SQUpdateSessionsCallbackProxy_GetGameMode::Result' has a wrong offset!");
static_assert(offsetof(SQUpdateSessionsCallbackProxy_GetGameMode, ReturnValue) == 0x000108, "Member 'SQUpdateSessionsCallbackProxy_GetGameMode::ReturnValue' has a wrong offset!");

// Function Squad.SQUpdateSessionsCallbackProxy.GetGameVersion
// 0x0118 (0x0118 - 0x0000)
struct SQUpdateSessionsCallbackProxy_GetGameVersion final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0108(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQUpdateSessionsCallbackProxy_GetGameVersion) == 0x000008, "Wrong alignment on SQUpdateSessionsCallbackProxy_GetGameVersion");
static_assert(sizeof(SQUpdateSessionsCallbackProxy_GetGameVersion) == 0x000118, "Wrong size on SQUpdateSessionsCallbackProxy_GetGameVersion");
static_assert(offsetof(SQUpdateSessionsCallbackProxy_GetGameVersion, Result) == 0x000000, "Member 'SQUpdateSessionsCallbackProxy_GetGameVersion::Result' has a wrong offset!");
static_assert(offsetof(SQUpdateSessionsCallbackProxy_GetGameVersion, ReturnValue) == 0x000108, "Member 'SQUpdateSessionsCallbackProxy_GetGameVersion::ReturnValue' has a wrong offset!");

// Function Squad.SQUpdateSessionsCallbackProxy.GetLicensedServer
// 0x0118 (0x0118 - 0x0000)
struct SQUpdateSessionsCallbackProxy_GetLicensedServer final
{
public:
	class UObject*                                Param_WorldContextObject;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlueprintSessionResult                Result;                                            // 0x0008(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13D5[0x7];                                     // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQUpdateSessionsCallbackProxy_GetLicensedServer) == 0x000008, "Wrong alignment on SQUpdateSessionsCallbackProxy_GetLicensedServer");
static_assert(sizeof(SQUpdateSessionsCallbackProxy_GetLicensedServer) == 0x000118, "Wrong size on SQUpdateSessionsCallbackProxy_GetLicensedServer");
static_assert(offsetof(SQUpdateSessionsCallbackProxy_GetLicensedServer, Param_WorldContextObject) == 0x000000, "Member 'SQUpdateSessionsCallbackProxy_GetLicensedServer::Param_WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQUpdateSessionsCallbackProxy_GetLicensedServer, Result) == 0x000008, "Member 'SQUpdateSessionsCallbackProxy_GetLicensedServer::Result' has a wrong offset!");
static_assert(offsetof(SQUpdateSessionsCallbackProxy_GetLicensedServer, ReturnValue) == 0x000110, "Member 'SQUpdateSessionsCallbackProxy_GetLicensedServer::ReturnValue' has a wrong offset!");

// Function Squad.SQUpdateSessionsCallbackProxy.GetMapName
// 0x0118 (0x0118 - 0x0000)
struct SQUpdateSessionsCallbackProxy_GetMapName final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0108(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQUpdateSessionsCallbackProxy_GetMapName) == 0x000008, "Wrong alignment on SQUpdateSessionsCallbackProxy_GetMapName");
static_assert(sizeof(SQUpdateSessionsCallbackProxy_GetMapName) == 0x000118, "Wrong size on SQUpdateSessionsCallbackProxy_GetMapName");
static_assert(offsetof(SQUpdateSessionsCallbackProxy_GetMapName, Result) == 0x000000, "Member 'SQUpdateSessionsCallbackProxy_GetMapName::Result' has a wrong offset!");
static_assert(offsetof(SQUpdateSessionsCallbackProxy_GetMapName, ReturnValue) == 0x000108, "Member 'SQUpdateSessionsCallbackProxy_GetMapName::ReturnValue' has a wrong offset!");

// Function Squad.SQUpdateSessionsCallbackProxy.GetMatchTimeout
// 0x0110 (0x0110 - 0x0000)
struct SQUpdateSessionsCallbackProxy_GetMatchTimeout final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0108(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13D6[0x4];                                     // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQUpdateSessionsCallbackProxy_GetMatchTimeout) == 0x000008, "Wrong alignment on SQUpdateSessionsCallbackProxy_GetMatchTimeout");
static_assert(sizeof(SQUpdateSessionsCallbackProxy_GetMatchTimeout) == 0x000110, "Wrong size on SQUpdateSessionsCallbackProxy_GetMatchTimeout");
static_assert(offsetof(SQUpdateSessionsCallbackProxy_GetMatchTimeout, Result) == 0x000000, "Member 'SQUpdateSessionsCallbackProxy_GetMatchTimeout::Result' has a wrong offset!");
static_assert(offsetof(SQUpdateSessionsCallbackProxy_GetMatchTimeout, ReturnValue) == 0x000108, "Member 'SQUpdateSessionsCallbackProxy_GetMatchTimeout::ReturnValue' has a wrong offset!");

// Function Squad.SQUpdateSessionsCallbackProxy.GetMaxPlayers
// 0x0110 (0x0110 - 0x0000)
struct SQUpdateSessionsCallbackProxy_GetMaxPlayers final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0108(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13D7[0x4];                                     // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQUpdateSessionsCallbackProxy_GetMaxPlayers) == 0x000008, "Wrong alignment on SQUpdateSessionsCallbackProxy_GetMaxPlayers");
static_assert(sizeof(SQUpdateSessionsCallbackProxy_GetMaxPlayers) == 0x000110, "Wrong size on SQUpdateSessionsCallbackProxy_GetMaxPlayers");
static_assert(offsetof(SQUpdateSessionsCallbackProxy_GetMaxPlayers, Result) == 0x000000, "Member 'SQUpdateSessionsCallbackProxy_GetMaxPlayers::Result' has a wrong offset!");
static_assert(offsetof(SQUpdateSessionsCallbackProxy_GetMaxPlayers, ReturnValue) == 0x000108, "Member 'SQUpdateSessionsCallbackProxy_GetMaxPlayers::ReturnValue' has a wrong offset!");

// Function Squad.SQUpdateSessionsCallbackProxy.GetPasswordProtected
// 0x0110 (0x0110 - 0x0000)
struct SQUpdateSessionsCallbackProxy_GetPasswordProtected final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0108(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13D8[0x7];                                     // 0x0109(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQUpdateSessionsCallbackProxy_GetPasswordProtected) == 0x000008, "Wrong alignment on SQUpdateSessionsCallbackProxy_GetPasswordProtected");
static_assert(sizeof(SQUpdateSessionsCallbackProxy_GetPasswordProtected) == 0x000110, "Wrong size on SQUpdateSessionsCallbackProxy_GetPasswordProtected");
static_assert(offsetof(SQUpdateSessionsCallbackProxy_GetPasswordProtected, Result) == 0x000000, "Member 'SQUpdateSessionsCallbackProxy_GetPasswordProtected::Result' has a wrong offset!");
static_assert(offsetof(SQUpdateSessionsCallbackProxy_GetPasswordProtected, ReturnValue) == 0x000108, "Member 'SQUpdateSessionsCallbackProxy_GetPasswordProtected::ReturnValue' has a wrong offset!");

// Function Squad.SQUpdateSessionsCallbackProxy.GetPingInMs
// 0x0110 (0x0110 - 0x0000)
struct SQUpdateSessionsCallbackProxy_GetPingInMs final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0108(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13D9[0x4];                                     // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQUpdateSessionsCallbackProxy_GetPingInMs) == 0x000008, "Wrong alignment on SQUpdateSessionsCallbackProxy_GetPingInMs");
static_assert(sizeof(SQUpdateSessionsCallbackProxy_GetPingInMs) == 0x000110, "Wrong size on SQUpdateSessionsCallbackProxy_GetPingInMs");
static_assert(offsetof(SQUpdateSessionsCallbackProxy_GetPingInMs, Result) == 0x000000, "Member 'SQUpdateSessionsCallbackProxy_GetPingInMs::Result' has a wrong offset!");
static_assert(offsetof(SQUpdateSessionsCallbackProxy_GetPingInMs, ReturnValue) == 0x000108, "Member 'SQUpdateSessionsCallbackProxy_GetPingInMs::ReturnValue' has a wrong offset!");

// Function Squad.SQUpdateSessionsCallbackProxy.GetSearchKeywords
// 0x0118 (0x0118 - 0x0000)
struct SQUpdateSessionsCallbackProxy_GetSearchKeywords final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0108(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQUpdateSessionsCallbackProxy_GetSearchKeywords) == 0x000008, "Wrong alignment on SQUpdateSessionsCallbackProxy_GetSearchKeywords");
static_assert(sizeof(SQUpdateSessionsCallbackProxy_GetSearchKeywords) == 0x000118, "Wrong size on SQUpdateSessionsCallbackProxy_GetSearchKeywords");
static_assert(offsetof(SQUpdateSessionsCallbackProxy_GetSearchKeywords, Result) == 0x000000, "Member 'SQUpdateSessionsCallbackProxy_GetSearchKeywords::Result' has a wrong offset!");
static_assert(offsetof(SQUpdateSessionsCallbackProxy_GetSearchKeywords, ReturnValue) == 0x000108, "Member 'SQUpdateSessionsCallbackProxy_GetSearchKeywords::ReturnValue' has a wrong offset!");

// Function Squad.SQUpdateSessionsCallbackProxy.GetServerName
// 0x0118 (0x0118 - 0x0000)
struct SQUpdateSessionsCallbackProxy_GetServerName final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0108(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQUpdateSessionsCallbackProxy_GetServerName) == 0x000008, "Wrong alignment on SQUpdateSessionsCallbackProxy_GetServerName");
static_assert(sizeof(SQUpdateSessionsCallbackProxy_GetServerName) == 0x000118, "Wrong size on SQUpdateSessionsCallbackProxy_GetServerName");
static_assert(offsetof(SQUpdateSessionsCallbackProxy_GetServerName, Result) == 0x000000, "Member 'SQUpdateSessionsCallbackProxy_GetServerName::Result' has a wrong offset!");
static_assert(offsetof(SQUpdateSessionsCallbackProxy_GetServerName, ReturnValue) == 0x000108, "Member 'SQUpdateSessionsCallbackProxy_GetServerName::ReturnValue' has a wrong offset!");

// Function Squad.SQUpdateSessionsCallbackProxy.GetSessionFlagStruct
// 0x0110 (0x0110 - 0x0000)
struct SQUpdateSessionsCallbackProxy_GetSessionFlagStruct final
{
public:
	struct FBlueprintSessionResult                Result;                                            // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSQSessionFlagStruct                   ReturnValue;                                       // 0x0108(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQUpdateSessionsCallbackProxy_GetSessionFlagStruct) == 0x000008, "Wrong alignment on SQUpdateSessionsCallbackProxy_GetSessionFlagStruct");
static_assert(sizeof(SQUpdateSessionsCallbackProxy_GetSessionFlagStruct) == 0x000110, "Wrong size on SQUpdateSessionsCallbackProxy_GetSessionFlagStruct");
static_assert(offsetof(SQUpdateSessionsCallbackProxy_GetSessionFlagStruct, Result) == 0x000000, "Member 'SQUpdateSessionsCallbackProxy_GetSessionFlagStruct::Result' has a wrong offset!");
static_assert(offsetof(SQUpdateSessionsCallbackProxy_GetSessionFlagStruct, ReturnValue) == 0x000108, "Member 'SQUpdateSessionsCallbackProxy_GetSessionFlagStruct::ReturnValue' has a wrong offset!");

// Function Squad.SQUpdateSessionsCallbackProxy.UpdateSession
// 0x0020 (0x0020 - 0x0000)
struct SQUpdateSessionsCallbackProxy_UpdateSession final
{
public:
	class UObject*                                Param_WorldContextObject;                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      PlayerController;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SessionName;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQUpdateSessionsCallbackProxy*         ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQUpdateSessionsCallbackProxy_UpdateSession) == 0x000008, "Wrong alignment on SQUpdateSessionsCallbackProxy_UpdateSession");
static_assert(sizeof(SQUpdateSessionsCallbackProxy_UpdateSession) == 0x000020, "Wrong size on SQUpdateSessionsCallbackProxy_UpdateSession");
static_assert(offsetof(SQUpdateSessionsCallbackProxy_UpdateSession, Param_WorldContextObject) == 0x000000, "Member 'SQUpdateSessionsCallbackProxy_UpdateSession::Param_WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQUpdateSessionsCallbackProxy_UpdateSession, PlayerController) == 0x000008, "Member 'SQUpdateSessionsCallbackProxy_UpdateSession::PlayerController' has a wrong offset!");
static_assert(offsetof(SQUpdateSessionsCallbackProxy_UpdateSession, SessionName) == 0x000010, "Member 'SQUpdateSessionsCallbackProxy_UpdateSession::SessionName' has a wrong offset!");
static_assert(offsetof(SQUpdateSessionsCallbackProxy_UpdateSession, ReturnValue) == 0x000018, "Member 'SQUpdateSessionsCallbackProxy_UpdateSession::ReturnValue' has a wrong offset!");

// Function Squad.SQUsable.BPDisplayPrompt
// 0x0008 (0x0008 - 0x0000)
struct SQUsable_BPDisplayPrompt final
{
public:
	class AController*                            User;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQUsable_BPDisplayPrompt) == 0x000008, "Wrong alignment on SQUsable_BPDisplayPrompt");
static_assert(sizeof(SQUsable_BPDisplayPrompt) == 0x000008, "Wrong size on SQUsable_BPDisplayPrompt");
static_assert(offsetof(SQUsable_BPDisplayPrompt, User) == 0x000000, "Member 'SQUsable_BPDisplayPrompt::User' has a wrong offset!");

// Function Squad.SQUsable.BPOnUsed
// 0x0008 (0x0008 - 0x0000)
struct SQUsable_BPOnUsed final
{
public:
	class AController*                            User;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQUsable_BPOnUsed) == 0x000008, "Wrong alignment on SQUsable_BPOnUsed");
static_assert(sizeof(SQUsable_BPOnUsed) == 0x000008, "Wrong size on SQUsable_BPOnUsed");
static_assert(offsetof(SQUsable_BPOnUsed, User) == 0x000000, "Member 'SQUsable_BPOnUsed::User' has a wrong offset!");

// Function Squad.SQUsable.BPStopUsed
// 0x0008 (0x0008 - 0x0000)
struct SQUsable_BPStopUsed final
{
public:
	class AController*                            User;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQUsable_BPStopUsed) == 0x000008, "Wrong alignment on SQUsable_BPStopUsed");
static_assert(sizeof(SQUsable_BPStopUsed) == 0x000008, "Wrong size on SQUsable_BPStopUsed");
static_assert(offsetof(SQUsable_BPStopUsed, User) == 0x000000, "Member 'SQUsable_BPStopUsed::User' has a wrong offset!");

// Function Squad.SQUsable.GetInterfaceTeam
// 0x0004 (0x0004 - 0x0000)
struct SQUsable_GetInterfaceTeam final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQUsable_GetInterfaceTeam) == 0x000004, "Wrong alignment on SQUsable_GetInterfaceTeam");
static_assert(sizeof(SQUsable_GetInterfaceTeam) == 0x000004, "Wrong size on SQUsable_GetInterfaceTeam");
static_assert(offsetof(SQUsable_GetInterfaceTeam, ReturnValue) == 0x000000, "Member 'SQUsable_GetInterfaceTeam::ReturnValue' has a wrong offset!");

// Function Squad.SQUsable.GetUsableData
// 0x0040 (0x0040 - 0x0000)
struct SQUsable_GetUsableData final
{
public:
	struct FSQUsableData                          ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQUsable_GetUsableData) == 0x000008, "Wrong alignment on SQUsable_GetUsableData");
static_assert(sizeof(SQUsable_GetUsableData) == 0x000040, "Wrong size on SQUsable_GetUsableData");
static_assert(offsetof(SQUsable_GetUsableData, ReturnValue) == 0x000000, "Member 'SQUsable_GetUsableData::ReturnValue' has a wrong offset!");

// Function Squad.SQUsable.ServerOnUsed
// 0x0008 (0x0008 - 0x0000)
struct SQUsable_ServerOnUsed final
{
public:
	class AController*                            User;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQUsable_ServerOnUsed) == 0x000008, "Wrong alignment on SQUsable_ServerOnUsed");
static_assert(sizeof(SQUsable_ServerOnUsed) == 0x000008, "Wrong size on SQUsable_ServerOnUsed");
static_assert(offsetof(SQUsable_ServerOnUsed, User) == 0x000000, "Member 'SQUsable_ServerOnUsed::User' has a wrong offset!");

// Function Squad.SQUsable.ServerStopUsed
// 0x0008 (0x0008 - 0x0000)
struct SQUsable_ServerStopUsed final
{
public:
	class AController*                            User;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQUsable_ServerStopUsed) == 0x000008, "Wrong alignment on SQUsable_ServerStopUsed");
static_assert(sizeof(SQUsable_ServerStopUsed) == 0x000008, "Wrong size on SQUsable_ServerStopUsed");
static_assert(offsetof(SQUsable_ServerStopUsed, User) == 0x000000, "Member 'SQUsable_ServerStopUsed::User' has a wrong offset!");

// Function Squad.SQUsable.ShouldDisplayPrompt
// 0x0010 (0x0010 - 0x0000)
struct SQUsable_ShouldDisplayPrompt final
{
public:
	class AController*                            User;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13DA[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQUsable_ShouldDisplayPrompt) == 0x000008, "Wrong alignment on SQUsable_ShouldDisplayPrompt");
static_assert(sizeof(SQUsable_ShouldDisplayPrompt) == 0x000010, "Wrong size on SQUsable_ShouldDisplayPrompt");
static_assert(offsetof(SQUsable_ShouldDisplayPrompt, User) == 0x000000, "Member 'SQUsable_ShouldDisplayPrompt::User' has a wrong offset!");
static_assert(offsetof(SQUsable_ShouldDisplayPrompt, ReturnValue) == 0x000008, "Member 'SQUsable_ShouldDisplayPrompt::ReturnValue' has a wrong offset!");

// Function Squad.SQUserWidget_StoreScreen.OnPurchaseCompleted
// 0x0010 (0x0010 - 0x0000)
struct SQUserWidget_StoreScreen_OnPurchaseCompleted final
{
public:
	struct FODKBazaarPurchaseCompletedData        PurchaseCompletedData;                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQUserWidget_StoreScreen_OnPurchaseCompleted) == 0x000008, "Wrong alignment on SQUserWidget_StoreScreen_OnPurchaseCompleted");
static_assert(sizeof(SQUserWidget_StoreScreen_OnPurchaseCompleted) == 0x000010, "Wrong size on SQUserWidget_StoreScreen_OnPurchaseCompleted");
static_assert(offsetof(SQUserWidget_StoreScreen_OnPurchaseCompleted, PurchaseCompletedData) == 0x000000, "Member 'SQUserWidget_StoreScreen_OnPurchaseCompleted::PurchaseCompletedData' has a wrong offset!");

// Function Squad.SQUserWidget_StoreScreen.PreviewBundleScreen
// 0x0008 (0x0008 - 0x0000)
struct SQUserWidget_StoreScreen_PreviewBundleScreen final
{
public:
	const class UODKBazaarBundle*                 BazaarBundle;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQUserWidget_StoreScreen_PreviewBundleScreen) == 0x000008, "Wrong alignment on SQUserWidget_StoreScreen_PreviewBundleScreen");
static_assert(sizeof(SQUserWidget_StoreScreen_PreviewBundleScreen) == 0x000008, "Wrong size on SQUserWidget_StoreScreen_PreviewBundleScreen");
static_assert(offsetof(SQUserWidget_StoreScreen_PreviewBundleScreen, BazaarBundle) == 0x000000, "Member 'SQUserWidget_StoreScreen_PreviewBundleScreen::BazaarBundle' has a wrong offset!");

// Function Squad.SQUserWidget_StoreScreen.RefreshStoreLoadout
// 0x0001 (0x0001 - 0x0000)
struct SQUserWidget_StoreScreen_RefreshStoreLoadout final
{
public:
	EBundleCategory                               CategoryToDisplay;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQUserWidget_StoreScreen_RefreshStoreLoadout) == 0x000001, "Wrong alignment on SQUserWidget_StoreScreen_RefreshStoreLoadout");
static_assert(sizeof(SQUserWidget_StoreScreen_RefreshStoreLoadout) == 0x000001, "Wrong size on SQUserWidget_StoreScreen_RefreshStoreLoadout");
static_assert(offsetof(SQUserWidget_StoreScreen_RefreshStoreLoadout, CategoryToDisplay) == 0x000000, "Member 'SQUserWidget_StoreScreen_RefreshStoreLoadout::CategoryToDisplay' has a wrong offset!");

// Function Squad.SQUserWidget_StoreScreen.SetupWidget
// 0x0098 (0x0098 - 0x0000)
struct SQUserWidget_StoreScreen_SetupWidget final
{
public:
	struct FTitleData                             TitleData;                                         // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQUserWidget_StoreScreen_SetupWidget) == 0x000008, "Wrong alignment on SQUserWidget_StoreScreen_SetupWidget");
static_assert(sizeof(SQUserWidget_StoreScreen_SetupWidget) == 0x000098, "Wrong size on SQUserWidget_StoreScreen_SetupWidget");
static_assert(offsetof(SQUserWidget_StoreScreen_SetupWidget, TitleData) == 0x000000, "Member 'SQUserWidget_StoreScreen_SetupWidget::TitleData' has a wrong offset!");

// Function Squad.SQUserWidget_StoreScreen.ToggleShowOwnedBundles
// 0x0001 (0x0001 - 0x0000)
struct SQUserWidget_StoreScreen_ToggleShowOwnedBundles final
{
public:
	bool                                          bNewShowOwnedBundles;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQUserWidget_StoreScreen_ToggleShowOwnedBundles) == 0x000001, "Wrong alignment on SQUserWidget_StoreScreen_ToggleShowOwnedBundles");
static_assert(sizeof(SQUserWidget_StoreScreen_ToggleShowOwnedBundles) == 0x000001, "Wrong size on SQUserWidget_StoreScreen_ToggleShowOwnedBundles");
static_assert(offsetof(SQUserWidget_StoreScreen_ToggleShowOwnedBundles, bNewShowOwnedBundles) == 0x000000, "Member 'SQUserWidget_StoreScreen_ToggleShowOwnedBundles::bNewShowOwnedBundles' has a wrong offset!");

// Function Squad.SQUserWidget_StoreScreen.TryGotoPurchaseForBundle
// 0x0008 (0x0008 - 0x0000)
struct SQUserWidget_StoreScreen_TryGotoPurchaseForBundle final
{
public:
	class UODKBazaarBundle*                       BazaarBundle;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQUserWidget_StoreScreen_TryGotoPurchaseForBundle) == 0x000008, "Wrong alignment on SQUserWidget_StoreScreen_TryGotoPurchaseForBundle");
static_assert(sizeof(SQUserWidget_StoreScreen_TryGotoPurchaseForBundle) == 0x000008, "Wrong size on SQUserWidget_StoreScreen_TryGotoPurchaseForBundle");
static_assert(offsetof(SQUserWidget_StoreScreen_TryGotoPurchaseForBundle, BazaarBundle) == 0x000000, "Member 'SQUserWidget_StoreScreen_TryGotoPurchaseForBundle::BazaarBundle' has a wrong offset!");

// Function Squad.SQVehicleCenterOfMassFXComponent.OnCenterOfMassFXComponentBeginOverlap
// 0x00A8 (0x00A8 - 0x0000)
struct SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13DE[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentBeginOverlap) == 0x000008, "Wrong alignment on SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentBeginOverlap");
static_assert(sizeof(SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentBeginOverlap) == 0x0000A8, "Wrong size on SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentBeginOverlap");
static_assert(offsetof(SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentBeginOverlap, OverlappedComponent) == 0x000000, "Member 'SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentBeginOverlap, OtherActor) == 0x000008, "Member 'SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentBeginOverlap, OtherComp) == 0x000010, "Member 'SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentBeginOverlap, SweepResult) == 0x000020, "Member 'SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentBeginOverlap::SweepResult' has a wrong offset!");

// Function Squad.SQVehicleCenterOfMassFXComponent.OnCenterOfMassFXComponentEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13DF[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentEndOverlap) == 0x000008, "Wrong alignment on SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentEndOverlap");
static_assert(sizeof(SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentEndOverlap) == 0x000020, "Wrong size on SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentEndOverlap");
static_assert(offsetof(SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentEndOverlap, OverlappedComponent) == 0x000000, "Member 'SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentEndOverlap, OtherActor) == 0x000008, "Member 'SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentEndOverlap, OtherComp) == 0x000010, "Member 'SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentEndOverlap, OtherBodyIndex) == 0x000018, "Member 'SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function Squad.SQVehicleClaim.GetClaimingSquad
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleClaim_GetClaimingSquad final
{
public:
	class ASQSquad*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleClaim_GetClaimingSquad) == 0x000008, "Wrong alignment on SQVehicleClaim_GetClaimingSquad");
static_assert(sizeof(SQVehicleClaim_GetClaimingSquad) == 0x000008, "Wrong size on SQVehicleClaim_GetClaimingSquad");
static_assert(offsetof(SQVehicleClaim_GetClaimingSquad, ReturnValue) == 0x000000, "Member 'SQVehicleClaim_GetClaimingSquad::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleClaim.GetStatus
// 0x0001 (0x0001 - 0x0000)
struct SQVehicleClaim_GetStatus final
{
public:
	ESQVehicleClaimStatus                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleClaim_GetStatus) == 0x000001, "Wrong alignment on SQVehicleClaim_GetStatus");
static_assert(sizeof(SQVehicleClaim_GetStatus) == 0x000001, "Wrong size on SQVehicleClaim_GetStatus");
static_assert(offsetof(SQVehicleClaim_GetStatus, ReturnValue) == 0x000000, "Member 'SQVehicleClaim_GetStatus::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleClaim.GetTimeOfClaim
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleClaim_GetTimeOfClaim final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleClaim_GetTimeOfClaim) == 0x000004, "Wrong alignment on SQVehicleClaim_GetTimeOfClaim");
static_assert(sizeof(SQVehicleClaim_GetTimeOfClaim) == 0x000004, "Wrong size on SQVehicleClaim_GetTimeOfClaim");
static_assert(offsetof(SQVehicleClaim_GetTimeOfClaim, ReturnValue) == 0x000000, "Member 'SQVehicleClaim_GetTimeOfClaim::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleClaim.GetTimeUntilExpiration
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleClaim_GetTimeUntilExpiration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleClaim_GetTimeUntilExpiration) == 0x000004, "Wrong alignment on SQVehicleClaim_GetTimeUntilExpiration");
static_assert(sizeof(SQVehicleClaim_GetTimeUntilExpiration) == 0x000004, "Wrong size on SQVehicleClaim_GetTimeUntilExpiration");
static_assert(offsetof(SQVehicleClaim_GetTimeUntilExpiration, ReturnValue) == 0x000000, "Member 'SQVehicleClaim_GetTimeUntilExpiration::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleClaim.GetVehicleClaimed
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleClaim_GetVehicleClaimed final
{
public:
	class ASQVehicle*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleClaim_GetVehicleClaimed) == 0x000008, "Wrong alignment on SQVehicleClaim_GetVehicleClaimed");
static_assert(sizeof(SQVehicleClaim_GetVehicleClaimed) == 0x000008, "Wrong size on SQVehicleClaim_GetVehicleClaimed");
static_assert(offsetof(SQVehicleClaim_GetVehicleClaimed, ReturnValue) == 0x000000, "Member 'SQVehicleClaim_GetVehicleClaimed::ReturnValue' has a wrong offset!");

// Function Squad.SQEmergencyRecoverySettings.EmergencyRecoveryCustom
// 0x0018 (0x0018 - 0x0000)
struct SQEmergencyRecoverySettings_EmergencyRecoveryCustom final
{
public:
	class ASQVehicle*                             Vehicle;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Instigator;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13E5[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEmergencyRecoverySettings_EmergencyRecoveryCustom) == 0x000008, "Wrong alignment on SQEmergencyRecoverySettings_EmergencyRecoveryCustom");
static_assert(sizeof(SQEmergencyRecoverySettings_EmergencyRecoveryCustom) == 0x000018, "Wrong size on SQEmergencyRecoverySettings_EmergencyRecoveryCustom");
static_assert(offsetof(SQEmergencyRecoverySettings_EmergencyRecoveryCustom, Vehicle) == 0x000000, "Member 'SQEmergencyRecoverySettings_EmergencyRecoveryCustom::Vehicle' has a wrong offset!");
static_assert(offsetof(SQEmergencyRecoverySettings_EmergencyRecoveryCustom, Instigator) == 0x000008, "Member 'SQEmergencyRecoverySettings_EmergencyRecoveryCustom::Instigator' has a wrong offset!");
static_assert(offsetof(SQEmergencyRecoverySettings_EmergencyRecoveryCustom, ReturnValue) == 0x000010, "Member 'SQEmergencyRecoverySettings_EmergencyRecoveryCustom::ReturnValue' has a wrong offset!");

// Function Squad.SQEmergencyRecoverySettings.CanUseEmergencyRecovery
// 0x0010 (0x0010 - 0x0000)
struct SQEmergencyRecoverySettings_CanUseEmergencyRecovery final
{
public:
	const class USQVehicleEmergencyRecoveryComponent* RecoveryComponent;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQVehicleRecoveryMethod                      RecoveryMethod;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13E6[0x6];                                     // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQEmergencyRecoverySettings_CanUseEmergencyRecovery) == 0x000008, "Wrong alignment on SQEmergencyRecoverySettings_CanUseEmergencyRecovery");
static_assert(sizeof(SQEmergencyRecoverySettings_CanUseEmergencyRecovery) == 0x000010, "Wrong size on SQEmergencyRecoverySettings_CanUseEmergencyRecovery");
static_assert(offsetof(SQEmergencyRecoverySettings_CanUseEmergencyRecovery, RecoveryComponent) == 0x000000, "Member 'SQEmergencyRecoverySettings_CanUseEmergencyRecovery::RecoveryComponent' has a wrong offset!");
static_assert(offsetof(SQEmergencyRecoverySettings_CanUseEmergencyRecovery, RecoveryMethod) == 0x000008, "Member 'SQEmergencyRecoverySettings_CanUseEmergencyRecovery::RecoveryMethod' has a wrong offset!");
static_assert(offsetof(SQEmergencyRecoverySettings_CanUseEmergencyRecovery, ReturnValue) == 0x000009, "Member 'SQEmergencyRecoverySettings_CanUseEmergencyRecovery::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleResourceWeaponInventoryComponent.SetStaticMeshResourcesAmmo
// 0x0010 (0x0010 - 0x0000)
struct SQVehicleResourceWeaponInventoryComponent_SetStaticMeshResourcesAmmo final
{
public:
	TArray<class UStaticMeshComponent*>           InStaticMeshResources;                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleResourceWeaponInventoryComponent_SetStaticMeshResourcesAmmo) == 0x000008, "Wrong alignment on SQVehicleResourceWeaponInventoryComponent_SetStaticMeshResourcesAmmo");
static_assert(sizeof(SQVehicleResourceWeaponInventoryComponent_SetStaticMeshResourcesAmmo) == 0x000010, "Wrong size on SQVehicleResourceWeaponInventoryComponent_SetStaticMeshResourcesAmmo");
static_assert(offsetof(SQVehicleResourceWeaponInventoryComponent_SetStaticMeshResourcesAmmo, InStaticMeshResources) == 0x000000, "Member 'SQVehicleResourceWeaponInventoryComponent_SetStaticMeshResourcesAmmo::InStaticMeshResources' has a wrong offset!");

// Function Squad.SQVehicleResourceWeaponInventoryComponent.SetStaticMeshResourcesConstruction
// 0x0010 (0x0010 - 0x0000)
struct SQVehicleResourceWeaponInventoryComponent_SetStaticMeshResourcesConstruction final
{
public:
	TArray<class UStaticMeshComponent*>           InStaticMeshResources;                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleResourceWeaponInventoryComponent_SetStaticMeshResourcesConstruction) == 0x000008, "Wrong alignment on SQVehicleResourceWeaponInventoryComponent_SetStaticMeshResourcesConstruction");
static_assert(sizeof(SQVehicleResourceWeaponInventoryComponent_SetStaticMeshResourcesConstruction) == 0x000010, "Wrong size on SQVehicleResourceWeaponInventoryComponent_SetStaticMeshResourcesConstruction");
static_assert(offsetof(SQVehicleResourceWeaponInventoryComponent_SetStaticMeshResourcesConstruction, InStaticMeshResources) == 0x000000, "Member 'SQVehicleResourceWeaponInventoryComponent_SetStaticMeshResourcesConstruction::InStaticMeshResources' has a wrong offset!");

// Function Squad.SQVehicleResourceWeaponInventoryComponent.FindAmmoWeapon
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleResourceWeaponInventoryComponent_FindAmmoWeapon final
{
public:
	class ASQVehicleResource*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleResourceWeaponInventoryComponent_FindAmmoWeapon) == 0x000008, "Wrong alignment on SQVehicleResourceWeaponInventoryComponent_FindAmmoWeapon");
static_assert(sizeof(SQVehicleResourceWeaponInventoryComponent_FindAmmoWeapon) == 0x000008, "Wrong size on SQVehicleResourceWeaponInventoryComponent_FindAmmoWeapon");
static_assert(offsetof(SQVehicleResourceWeaponInventoryComponent_FindAmmoWeapon, ReturnValue) == 0x000000, "Member 'SQVehicleResourceWeaponInventoryComponent_FindAmmoWeapon::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleResourceWeaponInventoryComponent.FindConstructionWeapon
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleResourceWeaponInventoryComponent_FindConstructionWeapon final
{
public:
	class ASQVehicleResource*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleResourceWeaponInventoryComponent_FindConstructionWeapon) == 0x000008, "Wrong alignment on SQVehicleResourceWeaponInventoryComponent_FindConstructionWeapon");
static_assert(sizeof(SQVehicleResourceWeaponInventoryComponent_FindConstructionWeapon) == 0x000008, "Wrong size on SQVehicleResourceWeaponInventoryComponent_FindConstructionWeapon");
static_assert(offsetof(SQVehicleResourceWeaponInventoryComponent_FindConstructionWeapon, ReturnValue) == 0x000000, "Member 'SQVehicleResourceWeaponInventoryComponent_FindConstructionWeapon::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleResourceWeaponInventoryComponent.GetAmmoPoints
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleResourceWeaponInventoryComponent_GetAmmoPoints final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleResourceWeaponInventoryComponent_GetAmmoPoints) == 0x000004, "Wrong alignment on SQVehicleResourceWeaponInventoryComponent_GetAmmoPoints");
static_assert(sizeof(SQVehicleResourceWeaponInventoryComponent_GetAmmoPoints) == 0x000004, "Wrong size on SQVehicleResourceWeaponInventoryComponent_GetAmmoPoints");
static_assert(offsetof(SQVehicleResourceWeaponInventoryComponent_GetAmmoPoints, ReturnValue) == 0x000000, "Member 'SQVehicleResourceWeaponInventoryComponent_GetAmmoPoints::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleResourceWeaponInventoryComponent.GetCurrentSharedResourceAmount
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleResourceWeaponInventoryComponent_GetCurrentSharedResourceAmount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleResourceWeaponInventoryComponent_GetCurrentSharedResourceAmount) == 0x000004, "Wrong alignment on SQVehicleResourceWeaponInventoryComponent_GetCurrentSharedResourceAmount");
static_assert(sizeof(SQVehicleResourceWeaponInventoryComponent_GetCurrentSharedResourceAmount) == 0x000004, "Wrong size on SQVehicleResourceWeaponInventoryComponent_GetCurrentSharedResourceAmount");
static_assert(offsetof(SQVehicleResourceWeaponInventoryComponent_GetCurrentSharedResourceAmount, ReturnValue) == 0x000000, "Member 'SQVehicleResourceWeaponInventoryComponent_GetCurrentSharedResourceAmount::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleResourceWeaponInventoryComponent.GetTotalSharedResourceAmount
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleResourceWeaponInventoryComponent_GetTotalSharedResourceAmount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleResourceWeaponInventoryComponent_GetTotalSharedResourceAmount) == 0x000004, "Wrong alignment on SQVehicleResourceWeaponInventoryComponent_GetTotalSharedResourceAmount");
static_assert(sizeof(SQVehicleResourceWeaponInventoryComponent_GetTotalSharedResourceAmount) == 0x000004, "Wrong size on SQVehicleResourceWeaponInventoryComponent_GetTotalSharedResourceAmount");
static_assert(offsetof(SQVehicleResourceWeaponInventoryComponent_GetTotalSharedResourceAmount, ReturnValue) == 0x000000, "Member 'SQVehicleResourceWeaponInventoryComponent_GetTotalSharedResourceAmount::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleResourceWeaponInventoryComponent.HasConstructionWeapon
// 0x0001 (0x0001 - 0x0000)
struct SQVehicleResourceWeaponInventoryComponent_HasConstructionWeapon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleResourceWeaponInventoryComponent_HasConstructionWeapon) == 0x000001, "Wrong alignment on SQVehicleResourceWeaponInventoryComponent_HasConstructionWeapon");
static_assert(sizeof(SQVehicleResourceWeaponInventoryComponent_HasConstructionWeapon) == 0x000001, "Wrong size on SQVehicleResourceWeaponInventoryComponent_HasConstructionWeapon");
static_assert(offsetof(SQVehicleResourceWeaponInventoryComponent_HasConstructionWeapon, ReturnValue) == 0x000000, "Member 'SQVehicleResourceWeaponInventoryComponent_HasConstructionWeapon::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleSeatComponent.CanSeatBeRepaired
// 0x0002 (0x0002 - 0x0000)
struct SQVehicleSeatComponent_CanSeatBeRepaired final
{
public:
	ESQRepairSource                               RepairSource;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleSeatComponent_CanSeatBeRepaired) == 0x000001, "Wrong alignment on SQVehicleSeatComponent_CanSeatBeRepaired");
static_assert(sizeof(SQVehicleSeatComponent_CanSeatBeRepaired) == 0x000002, "Wrong size on SQVehicleSeatComponent_CanSeatBeRepaired");
static_assert(offsetof(SQVehicleSeatComponent_CanSeatBeRepaired, RepairSource) == 0x000000, "Member 'SQVehicleSeatComponent_CanSeatBeRepaired::RepairSource' has a wrong offset!");
static_assert(offsetof(SQVehicleSeatComponent_CanSeatBeRepaired, ReturnValue) == 0x000001, "Member 'SQVehicleSeatComponent_CanSeatBeRepaired::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleSeatComponent.ChangeSeatState
// 0x0004 (0x0004 - 0x0000)
struct SQVehicleSeatComponent_ChangeSeatState final
{
public:
	int32                                         StateIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleSeatComponent_ChangeSeatState) == 0x000004, "Wrong alignment on SQVehicleSeatComponent_ChangeSeatState");
static_assert(sizeof(SQVehicleSeatComponent_ChangeSeatState) == 0x000004, "Wrong size on SQVehicleSeatComponent_ChangeSeatState");
static_assert(offsetof(SQVehicleSeatComponent_ChangeSeatState, StateIndex) == 0x000000, "Member 'SQVehicleSeatComponent_ChangeSeatState::StateIndex' has a wrong offset!");

// Function Squad.SQVehicleSeatComponent.GetSeatPawn
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleSeatComponent_GetSeatPawn final
{
public:
	class ASQVehicleSeat*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleSeatComponent_GetSeatPawn) == 0x000008, "Wrong alignment on SQVehicleSeatComponent_GetSeatPawn");
static_assert(sizeof(SQVehicleSeatComponent_GetSeatPawn) == 0x000008, "Wrong size on SQVehicleSeatComponent_GetSeatPawn");
static_assert(offsetof(SQVehicleSeatComponent_GetSeatPawn, ReturnValue) == 0x000000, "Member 'SQVehicleSeatComponent_GetSeatPawn::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleSeatComponent.GetSeatPawnEquipableItem
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleSeatComponent_GetSeatPawnEquipableItem final
{
public:
	class ASQEquipableItem*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleSeatComponent_GetSeatPawnEquipableItem) == 0x000008, "Wrong alignment on SQVehicleSeatComponent_GetSeatPawnEquipableItem");
static_assert(sizeof(SQVehicleSeatComponent_GetSeatPawnEquipableItem) == 0x000008, "Wrong size on SQVehicleSeatComponent_GetSeatPawnEquipableItem");
static_assert(offsetof(SQVehicleSeatComponent_GetSeatPawnEquipableItem, ReturnValue) == 0x000000, "Member 'SQVehicleSeatComponent_GetSeatPawnEquipableItem::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleSeatComponent.GetSeatPawnInventory
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleSeatComponent_GetSeatPawnInventory final
{
public:
	class USQVehicleInventoryComponent*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleSeatComponent_GetSeatPawnInventory) == 0x000008, "Wrong alignment on SQVehicleSeatComponent_GetSeatPawnInventory");
static_assert(sizeof(SQVehicleSeatComponent_GetSeatPawnInventory) == 0x000008, "Wrong size on SQVehicleSeatComponent_GetSeatPawnInventory");
static_assert(offsetof(SQVehicleSeatComponent_GetSeatPawnInventory, ReturnValue) == 0x000000, "Member 'SQVehicleSeatComponent_GetSeatPawnInventory::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleSeatComponent.GetSoldierSeatState
// 0x0001 (0x0001 - 0x0000)
struct SQVehicleSeatComponent_GetSoldierSeatState final
{
public:
	ESQSoldierSeatState                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleSeatComponent_GetSoldierSeatState) == 0x000001, "Wrong alignment on SQVehicleSeatComponent_GetSoldierSeatState");
static_assert(sizeof(SQVehicleSeatComponent_GetSoldierSeatState) == 0x000001, "Wrong size on SQVehicleSeatComponent_GetSoldierSeatState");
static_assert(offsetof(SQVehicleSeatComponent_GetSoldierSeatState, ReturnValue) == 0x000000, "Member 'SQVehicleSeatComponent_GetSoldierSeatState::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleSeatComponent.TransitionComplete
// 0x0001 (0x0001 - 0x0000)
struct SQVehicleSeatComponent_TransitionComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleSeatComponent_TransitionComplete) == 0x000001, "Wrong alignment on SQVehicleSeatComponent_TransitionComplete");
static_assert(sizeof(SQVehicleSeatComponent_TransitionComplete) == 0x000001, "Wrong size on SQVehicleSeatComponent_TransitionComplete");
static_assert(offsetof(SQVehicleSeatComponent_TransitionComplete, ReturnValue) == 0x000000, "Member 'SQVehicleSeatComponent_TransitionComplete::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleSpawner.OnVehicleLoaded
// 0x0038 (0x0038 - 0x0000)
struct SQVehicleSpawner_OnVehicleLoaded final
{
public:
	TSoftClassPtr<class UClass>                   InVehicleReference;                                // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQVehicleSettingEntry                 InVehicleSetting;                                  // 0x0028(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleSpawner_OnVehicleLoaded) == 0x000008, "Wrong alignment on SQVehicleSpawner_OnVehicleLoaded");
static_assert(sizeof(SQVehicleSpawner_OnVehicleLoaded) == 0x000038, "Wrong size on SQVehicleSpawner_OnVehicleLoaded");
static_assert(offsetof(SQVehicleSpawner_OnVehicleLoaded, InVehicleReference) == 0x000000, "Member 'SQVehicleSpawner_OnVehicleLoaded::InVehicleReference' has a wrong offset!");
static_assert(offsetof(SQVehicleSpawner_OnVehicleLoaded, InVehicleSetting) == 0x000028, "Member 'SQVehicleSpawner_OnVehicleLoaded::InVehicleSetting' has a wrong offset!");

// Function Squad.SQVehicleSpawner.OnVehicleSpawned
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleSpawner_OnVehicleSpawned final
{
public:
	class ASQVehicle*                             OutVehicle;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleSpawner_OnVehicleSpawned) == 0x000008, "Wrong alignment on SQVehicleSpawner_OnVehicleSpawned");
static_assert(sizeof(SQVehicleSpawner_OnVehicleSpawned) == 0x000008, "Wrong size on SQVehicleSpawner_OnVehicleSpawned");
static_assert(offsetof(SQVehicleSpawner_OnVehicleSpawned, OutVehicle) == 0x000000, "Member 'SQVehicleSpawner_OnVehicleSpawned::OutVehicle' has a wrong offset!");

// Function Squad.SQVehicleSpawner.StartLoadAndSpawnVehicle
// 0x0010 (0x0010 - 0x0000)
struct SQVehicleSpawner_StartLoadAndSpawnVehicle final
{
public:
	struct FSQVehicleSettingEntry                 InVehicleSettings;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleSpawner_StartLoadAndSpawnVehicle) == 0x000008, "Wrong alignment on SQVehicleSpawner_StartLoadAndSpawnVehicle");
static_assert(sizeof(SQVehicleSpawner_StartLoadAndSpawnVehicle) == 0x000010, "Wrong size on SQVehicleSpawner_StartLoadAndSpawnVehicle");
static_assert(offsetof(SQVehicleSpawner_StartLoadAndSpawnVehicle, InVehicleSettings) == 0x000000, "Member 'SQVehicleSpawner_StartLoadAndSpawnVehicle::InVehicleSettings' has a wrong offset!");

// Function Squad.SQVehicleSpawner.CanSpawnVehicle
// 0x0010 (0x0010 - 0x0000)
struct SQVehicleSpawner_CanSpawnVehicle final
{
public:
	const class USQVehicleSettings*               InAvailableVehicle;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13EE[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVehicleSpawner_CanSpawnVehicle) == 0x000008, "Wrong alignment on SQVehicleSpawner_CanSpawnVehicle");
static_assert(sizeof(SQVehicleSpawner_CanSpawnVehicle) == 0x000010, "Wrong size on SQVehicleSpawner_CanSpawnVehicle");
static_assert(offsetof(SQVehicleSpawner_CanSpawnVehicle, InAvailableVehicle) == 0x000000, "Member 'SQVehicleSpawner_CanSpawnVehicle::InAvailableVehicle' has a wrong offset!");
static_assert(offsetof(SQVehicleSpawner_CanSpawnVehicle, ReturnValue) == 0x000008, "Member 'SQVehicleSpawner_CanSpawnVehicle::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleSpawner.GetVehiclePriority
// 0x0058 (0x0058 - 0x0000)
struct SQVehicleSpawner_GetVehiclePriority final
{
public:
	struct FSQAvailabilityState_Vehicle           InAvailableVehicle;                                // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13EF[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVehicleSpawner_GetVehiclePriority) == 0x000008, "Wrong alignment on SQVehicleSpawner_GetVehiclePriority");
static_assert(sizeof(SQVehicleSpawner_GetVehiclePriority) == 0x000058, "Wrong size on SQVehicleSpawner_GetVehiclePriority");
static_assert(offsetof(SQVehicleSpawner_GetVehiclePriority, InAvailableVehicle) == 0x000000, "Member 'SQVehicleSpawner_GetVehiclePriority::InAvailableVehicle' has a wrong offset!");
static_assert(offsetof(SQVehicleSpawner_GetVehiclePriority, ReturnValue) == 0x000050, "Member 'SQVehicleSpawner_GetVehiclePriority::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleSpawner.GetVehicleReference
// 0x0030 (0x0030 - 0x0000)
struct SQVehicleSpawner_GetVehicleReference final
{
public:
	class USQVehicleSettings*                     InVehicleSettings;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   OutVehicleReference;                               // 0x0008(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleSpawner_GetVehicleReference) == 0x000008, "Wrong alignment on SQVehicleSpawner_GetVehicleReference");
static_assert(sizeof(SQVehicleSpawner_GetVehicleReference) == 0x000030, "Wrong size on SQVehicleSpawner_GetVehicleReference");
static_assert(offsetof(SQVehicleSpawner_GetVehicleReference, InVehicleSettings) == 0x000000, "Member 'SQVehicleSpawner_GetVehicleReference::InVehicleSettings' has a wrong offset!");
static_assert(offsetof(SQVehicleSpawner_GetVehicleReference, OutVehicleReference) == 0x000008, "Member 'SQVehicleSpawner_GetVehicleReference::OutVehicleReference' has a wrong offset!");

// Function Squad.SQVehicleSpawner.GetVehicleToSpawn
// 0x0068 (0x0068 - 0x0000)
struct SQVehicleSpawner_GetVehicleToSpawn final
{
public:
	TArray<struct FSQAvailabilityState_Vehicle>   InVehicleAvailabilityStates;                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState_Vehicle           OutSelectedVehicle;                                // 0x0010(0x0050)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         OutSelectedIndex;                                  // 0x0060(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0064(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13F0[0x3];                                     // 0x0065(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVehicleSpawner_GetVehicleToSpawn) == 0x000008, "Wrong alignment on SQVehicleSpawner_GetVehicleToSpawn");
static_assert(sizeof(SQVehicleSpawner_GetVehicleToSpawn) == 0x000068, "Wrong size on SQVehicleSpawner_GetVehicleToSpawn");
static_assert(offsetof(SQVehicleSpawner_GetVehicleToSpawn, InVehicleAvailabilityStates) == 0x000000, "Member 'SQVehicleSpawner_GetVehicleToSpawn::InVehicleAvailabilityStates' has a wrong offset!");
static_assert(offsetof(SQVehicleSpawner_GetVehicleToSpawn, OutSelectedVehicle) == 0x000010, "Member 'SQVehicleSpawner_GetVehicleToSpawn::OutSelectedVehicle' has a wrong offset!");
static_assert(offsetof(SQVehicleSpawner_GetVehicleToSpawn, OutSelectedIndex) == 0x000060, "Member 'SQVehicleSpawner_GetVehicleToSpawn::OutSelectedIndex' has a wrong offset!");
static_assert(offsetof(SQVehicleSpawner_GetVehicleToSpawn, ReturnValue) == 0x000064, "Member 'SQVehicleSpawner_GetVehicleToSpawn::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleSpawnerSettings.IsVehicleMatching
// 0x0010 (0x0010 - 0x0000)
struct SQVehicleSpawnerSettings_IsVehicleMatching final
{
public:
	const class USQVehicleSettings*               InAvailableVehicle;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13F1[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVehicleSpawnerSettings_IsVehicleMatching) == 0x000008, "Wrong alignment on SQVehicleSpawnerSettings_IsVehicleMatching");
static_assert(sizeof(SQVehicleSpawnerSettings_IsVehicleMatching) == 0x000010, "Wrong size on SQVehicleSpawnerSettings_IsVehicleMatching");
static_assert(offsetof(SQVehicleSpawnerSettings_IsVehicleMatching, InAvailableVehicle) == 0x000000, "Member 'SQVehicleSpawnerSettings_IsVehicleMatching::InAvailableVehicle' has a wrong offset!");
static_assert(offsetof(SQVehicleSpawnerSettings_IsVehicleMatching, ReturnValue) == 0x000008, "Member 'SQVehicleSpawnerSettings_IsVehicleMatching::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleSpawnerSettings.SelectVehicleToSpawn
// 0x0068 (0x0068 - 0x0000)
struct SQVehicleSpawnerSettings_SelectVehicleToSpawn final
{
public:
	TArray<struct FSQAvailabilityState_Vehicle>   InVehicles;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState_Vehicle           OutSelectVehicle;                                  // 0x0010(0x0050)(Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13F2[0x7];                                     // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVehicleSpawnerSettings_SelectVehicleToSpawn) == 0x000008, "Wrong alignment on SQVehicleSpawnerSettings_SelectVehicleToSpawn");
static_assert(sizeof(SQVehicleSpawnerSettings_SelectVehicleToSpawn) == 0x000068, "Wrong size on SQVehicleSpawnerSettings_SelectVehicleToSpawn");
static_assert(offsetof(SQVehicleSpawnerSettings_SelectVehicleToSpawn, InVehicles) == 0x000000, "Member 'SQVehicleSpawnerSettings_SelectVehicleToSpawn::InVehicles' has a wrong offset!");
static_assert(offsetof(SQVehicleSpawnerSettings_SelectVehicleToSpawn, OutSelectVehicle) == 0x000010, "Member 'SQVehicleSpawnerSettings_SelectVehicleToSpawn::OutSelectVehicle' has a wrong offset!");
static_assert(offsetof(SQVehicleSpawnerSettings_SelectVehicleToSpawn, ReturnValue) == 0x000060, "Member 'SQVehicleSpawnerSettings_SelectVehicleToSpawn::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleTurretClosedTop.IsStabilizationEnabled
// 0x0001 (0x0001 - 0x0000)
struct SQVehicleTurretClosedTop_IsStabilizationEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleTurretClosedTop_IsStabilizationEnabled) == 0x000001, "Wrong alignment on SQVehicleTurretClosedTop_IsStabilizationEnabled");
static_assert(sizeof(SQVehicleTurretClosedTop_IsStabilizationEnabled) == 0x000001, "Wrong size on SQVehicleTurretClosedTop_IsStabilizationEnabled");
static_assert(offsetof(SQVehicleTurretClosedTop_IsStabilizationEnabled, ReturnValue) == 0x000000, "Member 'SQVehicleTurretClosedTop_IsStabilizationEnabled::ReturnValue' has a wrong offset!");

// Function Squad.SQVehicleWheel.GetBoneName
// 0x0008 (0x0008 - 0x0000)
struct SQVehicleWheel_GetBoneName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVehicleWheel_GetBoneName) == 0x000004, "Wrong alignment on SQVehicleWheel_GetBoneName");
static_assert(sizeof(SQVehicleWheel_GetBoneName) == 0x000008, "Wrong size on SQVehicleWheel_GetBoneName");
static_assert(offsetof(SQVehicleWheel_GetBoneName, ReturnValue) == 0x000000, "Member 'SQVehicleWheel_GetBoneName::ReturnValue' has a wrong offset!");

// Function Squad.SQVoteSessionAuthority.AddVote
// 0x0010 (0x0010 - 0x0000)
struct SQVoteSessionAuthority_AddVote final
{
public:
	class FName                                   ChoiceId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USQVotingComponent*               Voter;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVoteSessionAuthority_AddVote) == 0x000008, "Wrong alignment on SQVoteSessionAuthority_AddVote");
static_assert(sizeof(SQVoteSessionAuthority_AddVote) == 0x000010, "Wrong size on SQVoteSessionAuthority_AddVote");
static_assert(offsetof(SQVoteSessionAuthority_AddVote, ChoiceId) == 0x000000, "Member 'SQVoteSessionAuthority_AddVote::ChoiceId' has a wrong offset!");
static_assert(offsetof(SQVoteSessionAuthority_AddVote, Voter) == 0x000008, "Member 'SQVoteSessionAuthority_AddVote::Voter' has a wrong offset!");

// Function Squad.SQVoteSessionAuthority.AddVoter
// 0x0010 (0x0010 - 0x0000)
struct SQVoteSessionAuthority_AddVoter final
{
public:
	class USQVotingComponent*                     Voter;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NotifyVoter;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13FE[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVoteSessionAuthority_AddVoter) == 0x000008, "Wrong alignment on SQVoteSessionAuthority_AddVoter");
static_assert(sizeof(SQVoteSessionAuthority_AddVoter) == 0x000010, "Wrong size on SQVoteSessionAuthority_AddVoter");
static_assert(offsetof(SQVoteSessionAuthority_AddVoter, Voter) == 0x000000, "Member 'SQVoteSessionAuthority_AddVoter::Voter' has a wrong offset!");
static_assert(offsetof(SQVoteSessionAuthority_AddVoter, NotifyVoter) == 0x000008, "Member 'SQVoteSessionAuthority_AddVoter::NotifyVoter' has a wrong offset!");

// Function Squad.SQVoteSessionAuthority.BP_Tick
// 0x0004 (0x0004 - 0x0000)
struct SQVoteSessionAuthority_BP_Tick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVoteSessionAuthority_BP_Tick) == 0x000004, "Wrong alignment on SQVoteSessionAuthority_BP_Tick");
static_assert(sizeof(SQVoteSessionAuthority_BP_Tick) == 0x000004, "Wrong size on SQVoteSessionAuthority_BP_Tick");
static_assert(offsetof(SQVoteSessionAuthority_BP_Tick, DeltaTime) == 0x000000, "Member 'SQVoteSessionAuthority_BP_Tick::DeltaTime' has a wrong offset!");

// Function Squad.SQVoteSessionAuthority.Finalize
// 0x0008 (0x0008 - 0x0000)
struct SQVoteSessionAuthority_Finalize final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVoteSessionAuthority_Finalize) == 0x000004, "Wrong alignment on SQVoteSessionAuthority_Finalize");
static_assert(sizeof(SQVoteSessionAuthority_Finalize) == 0x000008, "Wrong size on SQVoteSessionAuthority_Finalize");
static_assert(offsetof(SQVoteSessionAuthority_Finalize, ReturnValue) == 0x000000, "Member 'SQVoteSessionAuthority_Finalize::ReturnValue' has a wrong offset!");

// Function Squad.SQVoteSessionAuthority.OnAddVote
// 0x0018 (0x0018 - 0x0000)
struct SQVoteSessionAuthority_OnAddVote final
{
public:
	class FName                                   ChoiceId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USQVotingComponent*               Voter;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddedVotes;                                        // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13FF[0x3];                                     // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVoteSessionAuthority_OnAddVote) == 0x000008, "Wrong alignment on SQVoteSessionAuthority_OnAddVote");
static_assert(sizeof(SQVoteSessionAuthority_OnAddVote) == 0x000018, "Wrong size on SQVoteSessionAuthority_OnAddVote");
static_assert(offsetof(SQVoteSessionAuthority_OnAddVote, ChoiceId) == 0x000000, "Member 'SQVoteSessionAuthority_OnAddVote::ChoiceId' has a wrong offset!");
static_assert(offsetof(SQVoteSessionAuthority_OnAddVote, Voter) == 0x000008, "Member 'SQVoteSessionAuthority_OnAddVote::Voter' has a wrong offset!");
static_assert(offsetof(SQVoteSessionAuthority_OnAddVote, AddedVotes) == 0x000010, "Member 'SQVoteSessionAuthority_OnAddVote::AddedVotes' has a wrong offset!");
static_assert(offsetof(SQVoteSessionAuthority_OnAddVote, ReturnValue) == 0x000014, "Member 'SQVoteSessionAuthority_OnAddVote::ReturnValue' has a wrong offset!");

// Function Squad.SQVoteSessionAuthority.OnAddVoter
// 0x0010 (0x0010 - 0x0000)
struct SQVoteSessionAuthority_OnAddVoter final
{
public:
	const class USQVotingComponent*               Voter;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutAddVotesCount;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1400[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVoteSessionAuthority_OnAddVoter) == 0x000008, "Wrong alignment on SQVoteSessionAuthority_OnAddVoter");
static_assert(sizeof(SQVoteSessionAuthority_OnAddVoter) == 0x000010, "Wrong size on SQVoteSessionAuthority_OnAddVoter");
static_assert(offsetof(SQVoteSessionAuthority_OnAddVoter, Voter) == 0x000000, "Member 'SQVoteSessionAuthority_OnAddVoter::Voter' has a wrong offset!");
static_assert(offsetof(SQVoteSessionAuthority_OnAddVoter, OutAddVotesCount) == 0x000008, "Member 'SQVoteSessionAuthority_OnAddVoter::OutAddVotesCount' has a wrong offset!");
static_assert(offsetof(SQVoteSessionAuthority_OnAddVoter, ReturnValue) == 0x00000C, "Member 'SQVoteSessionAuthority_OnAddVoter::ReturnValue' has a wrong offset!");

// Function Squad.SQVoteSessionAuthority.OnRemoveVote
// 0x0018 (0x0018 - 0x0000)
struct SQVoteSessionAuthority_OnRemoveVote final
{
public:
	class FName                                   ChoiceId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USQVotingComponent*               Voter;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1401[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVoteSessionAuthority_OnRemoveVote) == 0x000008, "Wrong alignment on SQVoteSessionAuthority_OnRemoveVote");
static_assert(sizeof(SQVoteSessionAuthority_OnRemoveVote) == 0x000018, "Wrong size on SQVoteSessionAuthority_OnRemoveVote");
static_assert(offsetof(SQVoteSessionAuthority_OnRemoveVote, ChoiceId) == 0x000000, "Member 'SQVoteSessionAuthority_OnRemoveVote::ChoiceId' has a wrong offset!");
static_assert(offsetof(SQVoteSessionAuthority_OnRemoveVote, Voter) == 0x000008, "Member 'SQVoteSessionAuthority_OnRemoveVote::Voter' has a wrong offset!");
static_assert(offsetof(SQVoteSessionAuthority_OnRemoveVote, ReturnValue) == 0x000010, "Member 'SQVoteSessionAuthority_OnRemoveVote::ReturnValue' has a wrong offset!");

// Function Squad.SQVoteSessionAuthority.OnRemoveVoter
// 0x0010 (0x0010 - 0x0000)
struct SQVoteSessionAuthority_OnRemoveVoter final
{
public:
	const class USQVotingComponent*               Voter;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1402[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVoteSessionAuthority_OnRemoveVoter) == 0x000008, "Wrong alignment on SQVoteSessionAuthority_OnRemoveVoter");
static_assert(sizeof(SQVoteSessionAuthority_OnRemoveVoter) == 0x000010, "Wrong size on SQVoteSessionAuthority_OnRemoveVoter");
static_assert(offsetof(SQVoteSessionAuthority_OnRemoveVoter, Voter) == 0x000000, "Member 'SQVoteSessionAuthority_OnRemoveVoter::Voter' has a wrong offset!");
static_assert(offsetof(SQVoteSessionAuthority_OnRemoveVoter, ReturnValue) == 0x000008, "Member 'SQVoteSessionAuthority_OnRemoveVoter::ReturnValue' has a wrong offset!");

// Function Squad.SQVoteSessionAuthority.OnRemoveVotesFrom
// 0x0010 (0x0010 - 0x0000)
struct SQVoteSessionAuthority_OnRemoveVotesFrom final
{
public:
	const class USQVotingComponent*               Voter;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1403[0x4];                                     // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVoteSessionAuthority_OnRemoveVotesFrom) == 0x000008, "Wrong alignment on SQVoteSessionAuthority_OnRemoveVotesFrom");
static_assert(sizeof(SQVoteSessionAuthority_OnRemoveVotesFrom) == 0x000010, "Wrong size on SQVoteSessionAuthority_OnRemoveVotesFrom");
static_assert(offsetof(SQVoteSessionAuthority_OnRemoveVotesFrom, Voter) == 0x000000, "Member 'SQVoteSessionAuthority_OnRemoveVotesFrom::Voter' has a wrong offset!");
static_assert(offsetof(SQVoteSessionAuthority_OnRemoveVotesFrom, ReturnValue) == 0x000008, "Member 'SQVoteSessionAuthority_OnRemoveVotesFrom::ReturnValue' has a wrong offset!");

// Function Squad.SQVoteSessionAuthority.RemoveVote
// 0x0010 (0x0010 - 0x0000)
struct SQVoteSessionAuthority_RemoveVote final
{
public:
	class FName                                   ChoiceId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USQVotingComponent*               Voter;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVoteSessionAuthority_RemoveVote) == 0x000008, "Wrong alignment on SQVoteSessionAuthority_RemoveVote");
static_assert(sizeof(SQVoteSessionAuthority_RemoveVote) == 0x000010, "Wrong size on SQVoteSessionAuthority_RemoveVote");
static_assert(offsetof(SQVoteSessionAuthority_RemoveVote, ChoiceId) == 0x000000, "Member 'SQVoteSessionAuthority_RemoveVote::ChoiceId' has a wrong offset!");
static_assert(offsetof(SQVoteSessionAuthority_RemoveVote, Voter) == 0x000008, "Member 'SQVoteSessionAuthority_RemoveVote::Voter' has a wrong offset!");

// Function Squad.SQVoteSessionAuthority.RemoveVoter
// 0x0008 (0x0008 - 0x0000)
struct SQVoteSessionAuthority_RemoveVoter final
{
public:
	class USQVotingComponent*                     Voter;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVoteSessionAuthority_RemoveVoter) == 0x000008, "Wrong alignment on SQVoteSessionAuthority_RemoveVoter");
static_assert(sizeof(SQVoteSessionAuthority_RemoveVoter) == 0x000008, "Wrong size on SQVoteSessionAuthority_RemoveVoter");
static_assert(offsetof(SQVoteSessionAuthority_RemoveVoter, Voter) == 0x000000, "Member 'SQVoteSessionAuthority_RemoveVoter::Voter' has a wrong offset!");

// Function Squad.SQVoteSessionAuthority.Start
// 0x0048 (0x0048 - 0x0000)
struct SQVoteSessionAuthority_Start final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQVote                                VoteTemplate;                                      // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class USQVotingComponent*>             InitialVoters;                                     // 0x0038(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVoteSessionAuthority_Start) == 0x000008, "Wrong alignment on SQVoteSessionAuthority_Start");
static_assert(sizeof(SQVoteSessionAuthority_Start) == 0x000048, "Wrong size on SQVoteSessionAuthority_Start");
static_assert(offsetof(SQVoteSessionAuthority_Start, WorldContextObject) == 0x000000, "Member 'SQVoteSessionAuthority_Start::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQVoteSessionAuthority_Start, VoteTemplate) == 0x000008, "Member 'SQVoteSessionAuthority_Start::VoteTemplate' has a wrong offset!");
static_assert(offsetof(SQVoteSessionAuthority_Start, InitialVoters) == 0x000038, "Member 'SQVoteSessionAuthority_Start::InitialVoters' has a wrong offset!");

// Function Squad.SQVoteSessionAuthority.AreAllVoteRecieved
// 0x0001 (0x0001 - 0x0000)
struct SQVoteSessionAuthority_AreAllVoteRecieved final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVoteSessionAuthority_AreAllVoteRecieved) == 0x000001, "Wrong alignment on SQVoteSessionAuthority_AreAllVoteRecieved");
static_assert(sizeof(SQVoteSessionAuthority_AreAllVoteRecieved) == 0x000001, "Wrong size on SQVoteSessionAuthority_AreAllVoteRecieved");
static_assert(offsetof(SQVoteSessionAuthority_AreAllVoteRecieved, ReturnValue) == 0x000000, "Member 'SQVoteSessionAuthority_AreAllVoteRecieved::ReturnValue' has a wrong offset!");

// Function Squad.SQVoteSessionAuthority.GetWorld
// 0x0008 (0x0008 - 0x0000)
struct SQVoteSessionAuthority_GetWorld final
{
public:
	class UWorld*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVoteSessionAuthority_GetWorld) == 0x000008, "Wrong alignment on SQVoteSessionAuthority_GetWorld");
static_assert(sizeof(SQVoteSessionAuthority_GetWorld) == 0x000008, "Wrong size on SQVoteSessionAuthority_GetWorld");
static_assert(offsetof(SQVoteSessionAuthority_GetWorld, ReturnValue) == 0x000000, "Member 'SQVoteSessionAuthority_GetWorld::ReturnValue' has a wrong offset!");

// Function Squad.SQVoteSessionAuthority.ShouldFinalize
// 0x0001 (0x0001 - 0x0000)
struct SQVoteSessionAuthority_ShouldFinalize final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVoteSessionAuthority_ShouldFinalize) == 0x000001, "Wrong alignment on SQVoteSessionAuthority_ShouldFinalize");
static_assert(sizeof(SQVoteSessionAuthority_ShouldFinalize) == 0x000001, "Wrong size on SQVoteSessionAuthority_ShouldFinalize");
static_assert(offsetof(SQVoteSessionAuthority_ShouldFinalize, ReturnValue) == 0x000000, "Member 'SQVoteSessionAuthority_ShouldFinalize::ReturnValue' has a wrong offset!");

// Function Squad.SQVotingComponent.AddVoteByIds
// 0x0010 (0x0010 - 0x0000)
struct SQVotingComponent_AddVoteByIds final
{
public:
	class FName                                   VoteId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChoiceId;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVotingComponent_AddVoteByIds) == 0x000004, "Wrong alignment on SQVotingComponent_AddVoteByIds");
static_assert(sizeof(SQVotingComponent_AddVoteByIds) == 0x000010, "Wrong size on SQVotingComponent_AddVoteByIds");
static_assert(offsetof(SQVotingComponent_AddVoteByIds, VoteId) == 0x000000, "Member 'SQVotingComponent_AddVoteByIds::VoteId' has a wrong offset!");
static_assert(offsetof(SQVotingComponent_AddVoteByIds, ChoiceId) == 0x000008, "Member 'SQVotingComponent_AddVoteByIds::ChoiceId' has a wrong offset!");

// Function Squad.SQVotingComponent.OnVoteEnded
// 0x0020 (0x0020 - 0x0000)
struct SQVotingComponent_OnVoteEnded final
{
public:
	class USQVoteSessionClient*                   VoteSession;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQChoice                              Winner;                                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVotingComponent_OnVoteEnded) == 0x000008, "Wrong alignment on SQVotingComponent_OnVoteEnded");
static_assert(sizeof(SQVotingComponent_OnVoteEnded) == 0x000020, "Wrong size on SQVotingComponent_OnVoteEnded");
static_assert(offsetof(SQVotingComponent_OnVoteEnded, VoteSession) == 0x000000, "Member 'SQVotingComponent_OnVoteEnded::VoteSession' has a wrong offset!");
static_assert(offsetof(SQVotingComponent_OnVoteEnded, Winner) == 0x000008, "Member 'SQVotingComponent_OnVoteEnded::Winner' has a wrong offset!");

// Function Squad.SQVotingComponent.OnVoteInput
// 0x0004 (0x0004 - 0x0000)
struct SQVotingComponent_OnVoteInput final
{
public:
	int32                                         ChoiceIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVotingComponent_OnVoteInput) == 0x000004, "Wrong alignment on SQVotingComponent_OnVoteInput");
static_assert(sizeof(SQVotingComponent_OnVoteInput) == 0x000004, "Wrong size on SQVotingComponent_OnVoteInput");
static_assert(offsetof(SQVotingComponent_OnVoteInput, ChoiceIndex) == 0x000000, "Member 'SQVotingComponent_OnVoteInput::ChoiceIndex' has a wrong offset!");

// Function Squad.SQVotingComponent.OnVoteStarted
// 0x0010 (0x0010 - 0x0000)
struct SQVotingComponent_OnVoteStarted final
{
public:
	class USQVoteSessionClient*                   VoteSession;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWithVoteAccess;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1404[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVotingComponent_OnVoteStarted) == 0x000008, "Wrong alignment on SQVotingComponent_OnVoteStarted");
static_assert(sizeof(SQVotingComponent_OnVoteStarted) == 0x000010, "Wrong size on SQVotingComponent_OnVoteStarted");
static_assert(offsetof(SQVotingComponent_OnVoteStarted, VoteSession) == 0x000000, "Member 'SQVotingComponent_OnVoteStarted::VoteSession' has a wrong offset!");
static_assert(offsetof(SQVotingComponent_OnVoteStarted, bWithVoteAccess) == 0x000008, "Member 'SQVotingComponent_OnVoteStarted::bWithVoteAccess' has a wrong offset!");

// Function Squad.SQVotingComponent.OnVoteUpdated
// 0x0008 (0x0008 - 0x0000)
struct SQVotingComponent_OnVoteUpdated final
{
public:
	class USQVoteSessionClient*                   VoteSession;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVotingComponent_OnVoteUpdated) == 0x000008, "Wrong alignment on SQVotingComponent_OnVoteUpdated");
static_assert(sizeof(SQVotingComponent_OnVoteUpdated) == 0x000008, "Wrong size on SQVotingComponent_OnVoteUpdated");
static_assert(offsetof(SQVotingComponent_OnVoteUpdated, VoteSession) == 0x000000, "Member 'SQVotingComponent_OnVoteUpdated::VoteSession' has a wrong offset!");

// Function Squad.SQVotingComponent.RemoveVoteByIds
// 0x0010 (0x0010 - 0x0000)
struct SQVotingComponent_RemoveVoteByIds final
{
public:
	class FName                                   VoteId;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChoiceId;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVotingComponent_RemoveVoteByIds) == 0x000004, "Wrong alignment on SQVotingComponent_RemoveVoteByIds");
static_assert(sizeof(SQVotingComponent_RemoveVoteByIds) == 0x000010, "Wrong size on SQVotingComponent_RemoveVoteByIds");
static_assert(offsetof(SQVotingComponent_RemoveVoteByIds, VoteId) == 0x000000, "Member 'SQVotingComponent_RemoveVoteByIds::VoteId' has a wrong offset!");
static_assert(offsetof(SQVotingComponent_RemoveVoteByIds, ChoiceId) == 0x000008, "Member 'SQVotingComponent_RemoveVoteByIds::ChoiceId' has a wrong offset!");

// Function Squad.SQVotingComponent.Server_AddVoteByIds
// 0x0010 (0x0010 - 0x0000)
struct SQVotingComponent_Server_AddVoteByIds final
{
public:
	class FName                                   VoteId;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChoiceId;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVotingComponent_Server_AddVoteByIds) == 0x000004, "Wrong alignment on SQVotingComponent_Server_AddVoteByIds");
static_assert(sizeof(SQVotingComponent_Server_AddVoteByIds) == 0x000010, "Wrong size on SQVotingComponent_Server_AddVoteByIds");
static_assert(offsetof(SQVotingComponent_Server_AddVoteByIds, VoteId) == 0x000000, "Member 'SQVotingComponent_Server_AddVoteByIds::VoteId' has a wrong offset!");
static_assert(offsetof(SQVotingComponent_Server_AddVoteByIds, ChoiceId) == 0x000008, "Member 'SQVotingComponent_Server_AddVoteByIds::ChoiceId' has a wrong offset!");

// Function Squad.SQVotingComponent.Server_RemoveVoteByIds
// 0x0010 (0x0010 - 0x0000)
struct SQVotingComponent_Server_RemoveVoteByIds final
{
public:
	class FName                                   VoteId;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChoiceId;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVotingComponent_Server_RemoveVoteByIds) == 0x000004, "Wrong alignment on SQVotingComponent_Server_RemoveVoteByIds");
static_assert(sizeof(SQVotingComponent_Server_RemoveVoteByIds) == 0x000010, "Wrong size on SQVotingComponent_Server_RemoveVoteByIds");
static_assert(offsetof(SQVotingComponent_Server_RemoveVoteByIds, VoteId) == 0x000000, "Member 'SQVotingComponent_Server_RemoveVoteByIds::VoteId' has a wrong offset!");
static_assert(offsetof(SQVotingComponent_Server_RemoveVoteByIds, ChoiceId) == 0x000008, "Member 'SQVotingComponent_Server_RemoveVoteByIds::ChoiceId' has a wrong offset!");

// Function Squad.SQVotingComponent.CanVoteInCurrentPhase
// 0x0001 (0x0001 - 0x0000)
struct SQVotingComponent_CanVoteInCurrentPhase final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVotingComponent_CanVoteInCurrentPhase) == 0x000001, "Wrong alignment on SQVotingComponent_CanVoteInCurrentPhase");
static_assert(sizeof(SQVotingComponent_CanVoteInCurrentPhase) == 0x000001, "Wrong size on SQVotingComponent_CanVoteInCurrentPhase");
static_assert(offsetof(SQVotingComponent_CanVoteInCurrentPhase, ReturnValue) == 0x000000, "Member 'SQVotingComponent_CanVoteInCurrentPhase::ReturnValue' has a wrong offset!");

// Function Squad.SQVotingComponent.GetPlayerIdentifier
// 0x0008 (0x0008 - 0x0000)
struct SQVotingComponent_GetPlayerIdentifier final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVotingComponent_GetPlayerIdentifier) == 0x000004, "Wrong alignment on SQVotingComponent_GetPlayerIdentifier");
static_assert(sizeof(SQVotingComponent_GetPlayerIdentifier) == 0x000008, "Wrong size on SQVotingComponent_GetPlayerIdentifier");
static_assert(offsetof(SQVotingComponent_GetPlayerIdentifier, ReturnValue) == 0x000000, "Member 'SQVotingComponent_GetPlayerIdentifier::ReturnValue' has a wrong offset!");

// Function Squad.SQVotingComponent.HasVoteInProgress
// 0x0001 (0x0001 - 0x0000)
struct SQVotingComponent_HasVoteInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVotingComponent_HasVoteInProgress) == 0x000001, "Wrong alignment on SQVotingComponent_HasVoteInProgress");
static_assert(sizeof(SQVotingComponent_HasVoteInProgress) == 0x000001, "Wrong size on SQVotingComponent_HasVoteInProgress");
static_assert(offsetof(SQVotingComponent_HasVoteInProgress, ReturnValue) == 0x000000, "Member 'SQVotingComponent_HasVoteInProgress::ReturnValue' has a wrong offset!");

// Function Squad.SQVotingService.GetLocalVotingComponent
// 0x0010 (0x0010 - 0x0000)
struct SQVotingService_GetLocalVotingComponent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQVotingComponent*                     ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVotingService_GetLocalVotingComponent) == 0x000008, "Wrong alignment on SQVotingService_GetLocalVotingComponent");
static_assert(sizeof(SQVotingService_GetLocalVotingComponent) == 0x000010, "Wrong size on SQVotingService_GetLocalVotingComponent");
static_assert(offsetof(SQVotingService_GetLocalVotingComponent, WorldContextObject) == 0x000000, "Member 'SQVotingService_GetLocalVotingComponent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQVotingService_GetLocalVotingComponent, ReturnValue) == 0x000008, "Member 'SQVotingService_GetLocalVotingComponent::ReturnValue' has a wrong offset!");

// Function Squad.SQVotingService.IsAnyFactionVoteInProgress
// 0x0010 (0x0010 - 0x0000)
struct SQVotingService_IsAnyFactionVoteInProgress final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1405[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVotingService_IsAnyFactionVoteInProgress) == 0x000008, "Wrong alignment on SQVotingService_IsAnyFactionVoteInProgress");
static_assert(sizeof(SQVotingService_IsAnyFactionVoteInProgress) == 0x000010, "Wrong size on SQVotingService_IsAnyFactionVoteInProgress");
static_assert(offsetof(SQVotingService_IsAnyFactionVoteInProgress, WorldContextObject) == 0x000000, "Member 'SQVotingService_IsAnyFactionVoteInProgress::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQVotingService_IsAnyFactionVoteInProgress, ReturnValue) == 0x000008, "Member 'SQVotingService_IsAnyFactionVoteInProgress::ReturnValue' has a wrong offset!");

// Function Squad.SQVotingService.IsAnyVoteInProgress
// 0x0010 (0x0010 - 0x0000)
struct SQVotingService_IsAnyVoteInProgress final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1406[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVotingService_IsAnyVoteInProgress) == 0x000008, "Wrong alignment on SQVotingService_IsAnyVoteInProgress");
static_assert(sizeof(SQVotingService_IsAnyVoteInProgress) == 0x000010, "Wrong size on SQVotingService_IsAnyVoteInProgress");
static_assert(offsetof(SQVotingService_IsAnyVoteInProgress, WorldContextObject) == 0x000000, "Member 'SQVotingService_IsAnyVoteInProgress::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQVotingService_IsAnyVoteInProgress, ReturnValue) == 0x000008, "Member 'SQVotingService_IsAnyVoteInProgress::ReturnValue' has a wrong offset!");

// Function Squad.SQVotingService.IsEndMatchVoteInProgress
// 0x0010 (0x0010 - 0x0000)
struct SQVotingService_IsEndMatchVoteInProgress final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1407[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVotingService_IsEndMatchVoteInProgress) == 0x000008, "Wrong alignment on SQVotingService_IsEndMatchVoteInProgress");
static_assert(sizeof(SQVotingService_IsEndMatchVoteInProgress) == 0x000010, "Wrong size on SQVotingService_IsEndMatchVoteInProgress");
static_assert(offsetof(SQVotingService_IsEndMatchVoteInProgress, WorldContextObject) == 0x000000, "Member 'SQVotingService_IsEndMatchVoteInProgress::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQVotingService_IsEndMatchVoteInProgress, ReturnValue) == 0x000008, "Member 'SQVotingService_IsEndMatchVoteInProgress::ReturnValue' has a wrong offset!");

// Function Squad.SQVotingService.IsFactionVoteId
// 0x0010 (0x0010 - 0x0000)
struct SQVotingService_IsFactionVoteId final
{
public:
	class FName                                   InVoteId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutTeamId;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1408[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVotingService_IsFactionVoteId) == 0x000004, "Wrong alignment on SQVotingService_IsFactionVoteId");
static_assert(sizeof(SQVotingService_IsFactionVoteId) == 0x000010, "Wrong size on SQVotingService_IsFactionVoteId");
static_assert(offsetof(SQVotingService_IsFactionVoteId, InVoteId) == 0x000000, "Member 'SQVotingService_IsFactionVoteId::InVoteId' has a wrong offset!");
static_assert(offsetof(SQVotingService_IsFactionVoteId, OutTeamId) == 0x000008, "Member 'SQVotingService_IsFactionVoteId::OutTeamId' has a wrong offset!");
static_assert(offsetof(SQVotingService_IsFactionVoteId, ReturnValue) == 0x00000C, "Member 'SQVotingService_IsFactionVoteId::ReturnValue' has a wrong offset!");

// Function Squad.SQVotingService.IsFactionVoteInProgress
// 0x0010 (0x0010 - 0x0000)
struct SQVotingService_IsFactionVoteInProgress final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamId;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1409[0x3];                                     // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVotingService_IsFactionVoteInProgress) == 0x000008, "Wrong alignment on SQVotingService_IsFactionVoteInProgress");
static_assert(sizeof(SQVotingService_IsFactionVoteInProgress) == 0x000010, "Wrong size on SQVotingService_IsFactionVoteInProgress");
static_assert(offsetof(SQVotingService_IsFactionVoteInProgress, WorldContextObject) == 0x000000, "Member 'SQVotingService_IsFactionVoteInProgress::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQVotingService_IsFactionVoteInProgress, TeamId) == 0x000008, "Member 'SQVotingService_IsFactionVoteInProgress::TeamId' has a wrong offset!");
static_assert(offsetof(SQVotingService_IsFactionVoteInProgress, ReturnValue) == 0x00000C, "Member 'SQVotingService_IsFactionVoteInProgress::ReturnValue' has a wrong offset!");

// Function Squad.SQVotingService.IsGenericVoteInProgress
// 0x0010 (0x0010 - 0x0000)
struct SQVotingService_IsGenericVoteInProgress final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_140A[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVotingService_IsGenericVoteInProgress) == 0x000008, "Wrong alignment on SQVotingService_IsGenericVoteInProgress");
static_assert(sizeof(SQVotingService_IsGenericVoteInProgress) == 0x000010, "Wrong size on SQVotingService_IsGenericVoteInProgress");
static_assert(offsetof(SQVotingService_IsGenericVoteInProgress, WorldContextObject) == 0x000000, "Member 'SQVotingService_IsGenericVoteInProgress::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQVotingService_IsGenericVoteInProgress, ReturnValue) == 0x000008, "Member 'SQVotingService_IsGenericVoteInProgress::ReturnValue' has a wrong offset!");

// Function Squad.SQVotingService.IsLayerVoteId
// 0x000C (0x000C - 0x0000)
struct SQVotingService_IsLayerVoteId final
{
public:
	class FName                                   InVoteId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_140B[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVotingService_IsLayerVoteId) == 0x000004, "Wrong alignment on SQVotingService_IsLayerVoteId");
static_assert(sizeof(SQVotingService_IsLayerVoteId) == 0x00000C, "Wrong size on SQVotingService_IsLayerVoteId");
static_assert(offsetof(SQVotingService_IsLayerVoteId, InVoteId) == 0x000000, "Member 'SQVotingService_IsLayerVoteId::InVoteId' has a wrong offset!");
static_assert(offsetof(SQVotingService_IsLayerVoteId, ReturnValue) == 0x000008, "Member 'SQVotingService_IsLayerVoteId::ReturnValue' has a wrong offset!");

// Function Squad.SQVotingService.IsLayerVoteInProgress
// 0x0010 (0x0010 - 0x0000)
struct SQVotingService_IsLayerVoteInProgress final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_140C[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVotingService_IsLayerVoteInProgress) == 0x000008, "Wrong alignment on SQVotingService_IsLayerVoteInProgress");
static_assert(sizeof(SQVotingService_IsLayerVoteInProgress) == 0x000010, "Wrong size on SQVotingService_IsLayerVoteInProgress");
static_assert(offsetof(SQVotingService_IsLayerVoteInProgress, WorldContextObject) == 0x000000, "Member 'SQVotingService_IsLayerVoteInProgress::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQVotingService_IsLayerVoteInProgress, ReturnValue) == 0x000008, "Member 'SQVotingService_IsLayerVoteInProgress::ReturnValue' has a wrong offset!");

// Function Squad.SQVotingService.IsLevelVoteId
// 0x000C (0x000C - 0x0000)
struct SQVotingService_IsLevelVoteId final
{
public:
	class FName                                   InVoteId;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_140D[0x3];                                     // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVotingService_IsLevelVoteId) == 0x000004, "Wrong alignment on SQVotingService_IsLevelVoteId");
static_assert(sizeof(SQVotingService_IsLevelVoteId) == 0x00000C, "Wrong size on SQVotingService_IsLevelVoteId");
static_assert(offsetof(SQVotingService_IsLevelVoteId, InVoteId) == 0x000000, "Member 'SQVotingService_IsLevelVoteId::InVoteId' has a wrong offset!");
static_assert(offsetof(SQVotingService_IsLevelVoteId, ReturnValue) == 0x000008, "Member 'SQVotingService_IsLevelVoteId::ReturnValue' has a wrong offset!");

// Function Squad.SQVotingService.IsLevelVoteInProgress
// 0x0010 (0x0010 - 0x0000)
struct SQVotingService_IsLevelVoteInProgress final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_140E[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVotingService_IsLevelVoteInProgress) == 0x000008, "Wrong alignment on SQVotingService_IsLevelVoteInProgress");
static_assert(sizeof(SQVotingService_IsLevelVoteInProgress) == 0x000010, "Wrong size on SQVotingService_IsLevelVoteInProgress");
static_assert(offsetof(SQVotingService_IsLevelVoteInProgress, WorldContextObject) == 0x000000, "Member 'SQVotingService_IsLevelVoteInProgress::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQVotingService_IsLevelVoteInProgress, ReturnValue) == 0x000008, "Member 'SQVotingService_IsLevelVoteInProgress::ReturnValue' has a wrong offset!");

// Function Squad.SQVotingService.IsUsingFactionVote
// 0x0010 (0x0010 - 0x0000)
struct SQVotingService_IsUsingFactionVote final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_140F[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVotingService_IsUsingFactionVote) == 0x000008, "Wrong alignment on SQVotingService_IsUsingFactionVote");
static_assert(sizeof(SQVotingService_IsUsingFactionVote) == 0x000010, "Wrong size on SQVotingService_IsUsingFactionVote");
static_assert(offsetof(SQVotingService_IsUsingFactionVote, WorldContextObject) == 0x000000, "Member 'SQVotingService_IsUsingFactionVote::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQVotingService_IsUsingFactionVote, ReturnValue) == 0x000008, "Member 'SQVotingService_IsUsingFactionVote::ReturnValue' has a wrong offset!");

// Function Squad.SQVotingService.IsUsingLayerVote
// 0x0010 (0x0010 - 0x0000)
struct SQVotingService_IsUsingLayerVote final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1410[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVotingService_IsUsingLayerVote) == 0x000008, "Wrong alignment on SQVotingService_IsUsingLayerVote");
static_assert(sizeof(SQVotingService_IsUsingLayerVote) == 0x000010, "Wrong size on SQVotingService_IsUsingLayerVote");
static_assert(offsetof(SQVotingService_IsUsingLayerVote, WorldContextObject) == 0x000000, "Member 'SQVotingService_IsUsingLayerVote::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQVotingService_IsUsingLayerVote, ReturnValue) == 0x000008, "Member 'SQVotingService_IsUsingLayerVote::ReturnValue' has a wrong offset!");

// Function Squad.SQVotingService.IsUsingLevelVote
// 0x0010 (0x0010 - 0x0000)
struct SQVotingService_IsUsingLevelVote final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1411[0x7];                                     // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVotingService_IsUsingLevelVote) == 0x000008, "Wrong alignment on SQVotingService_IsUsingLevelVote");
static_assert(sizeof(SQVotingService_IsUsingLevelVote) == 0x000010, "Wrong size on SQVotingService_IsUsingLevelVote");
static_assert(offsetof(SQVotingService_IsUsingLevelVote, WorldContextObject) == 0x000000, "Member 'SQVotingService_IsUsingLevelVote::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQVotingService_IsUsingLevelVote, ReturnValue) == 0x000008, "Member 'SQVotingService_IsUsingLevelVote::ReturnValue' has a wrong offset!");

// Function Squad.SQVotingService.JoinPlayerToCurrentVotes
// 0x0010 (0x0010 - 0x0000)
struct SQVotingService_JoinPlayerToCurrentVotes final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      NewPlayer;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVotingService_JoinPlayerToCurrentVotes) == 0x000008, "Wrong alignment on SQVotingService_JoinPlayerToCurrentVotes");
static_assert(sizeof(SQVotingService_JoinPlayerToCurrentVotes) == 0x000010, "Wrong size on SQVotingService_JoinPlayerToCurrentVotes");
static_assert(offsetof(SQVotingService_JoinPlayerToCurrentVotes, WorldContextObject) == 0x000000, "Member 'SQVotingService_JoinPlayerToCurrentVotes::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQVotingService_JoinPlayerToCurrentVotes, NewPlayer) == 0x000008, "Member 'SQVotingService_JoinPlayerToCurrentVotes::NewPlayer' has a wrong offset!");

// Function Squad.SQVotingService.RemovePlayerFromCurrentVotes
// 0x0010 (0x0010 - 0x0000)
struct SQVotingService_RemovePlayerFromCurrentVotes final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      LeavingPlayer;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVotingService_RemovePlayerFromCurrentVotes) == 0x000008, "Wrong alignment on SQVotingService_RemovePlayerFromCurrentVotes");
static_assert(sizeof(SQVotingService_RemovePlayerFromCurrentVotes) == 0x000010, "Wrong size on SQVotingService_RemovePlayerFromCurrentVotes");
static_assert(offsetof(SQVotingService_RemovePlayerFromCurrentVotes, WorldContextObject) == 0x000000, "Member 'SQVotingService_RemovePlayerFromCurrentVotes::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQVotingService_RemovePlayerFromCurrentVotes, LeavingPlayer) == 0x000008, "Member 'SQVotingService_RemovePlayerFromCurrentVotes::LeavingPlayer' has a wrong offset!");

// Function Squad.SQVotingService.StartVote_FactionSetup
// 0x0030 (0x0030 - 0x0000)
struct SQVotingService_StartVote_FactionSetup final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamId;                                            // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1412[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USQFactionSetup*>                InFactionsSetups;                                  // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class USQVoteSessionAuthority*                OutAuthoritySession;                               // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1413[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVotingService_StartVote_FactionSetup) == 0x000008, "Wrong alignment on SQVotingService_StartVote_FactionSetup");
static_assert(sizeof(SQVotingService_StartVote_FactionSetup) == 0x000030, "Wrong size on SQVotingService_StartVote_FactionSetup");
static_assert(offsetof(SQVotingService_StartVote_FactionSetup, WorldContextObject) == 0x000000, "Member 'SQVotingService_StartVote_FactionSetup::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQVotingService_StartVote_FactionSetup, TeamId) == 0x000008, "Member 'SQVotingService_StartVote_FactionSetup::TeamId' has a wrong offset!");
static_assert(offsetof(SQVotingService_StartVote_FactionSetup, InFactionsSetups) == 0x000010, "Member 'SQVotingService_StartVote_FactionSetup::InFactionsSetups' has a wrong offset!");
static_assert(offsetof(SQVotingService_StartVote_FactionSetup, OutAuthoritySession) == 0x000020, "Member 'SQVotingService_StartVote_FactionSetup::OutAuthoritySession' has a wrong offset!");
static_assert(offsetof(SQVotingService_StartVote_FactionSetup, ReturnValue) == 0x000028, "Member 'SQVotingService_StartVote_FactionSetup::ReturnValue' has a wrong offset!");

// Function Squad.SQVotingService.StartVote_FullSequence
// 0x0008 (0x0008 - 0x0000)
struct SQVotingService_StartVote_FullSequence final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVotingService_StartVote_FullSequence) == 0x000008, "Wrong alignment on SQVotingService_StartVote_FullSequence");
static_assert(sizeof(SQVotingService_StartVote_FullSequence) == 0x000008, "Wrong size on SQVotingService_StartVote_FullSequence");
static_assert(offsetof(SQVotingService_StartVote_FullSequence, WorldContextObject) == 0x000000, "Member 'SQVotingService_StartVote_FullSequence::WorldContextObject' has a wrong offset!");

// Function Squad.SQVotingService.StartVote_Generic
// 0x0068 (0x0068 - 0x0000)
struct SQVotingService_StartVote_Generic final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQVoteConfig                          InVoteConfig;                                      // 0x0008(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FSQChoice>                      InChoices;                                         // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class USQVoteSessionAuthority*                OutAuthoritySession;                               // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1414[0x7];                                     // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVotingService_StartVote_Generic) == 0x000008, "Wrong alignment on SQVotingService_StartVote_Generic");
static_assert(sizeof(SQVotingService_StartVote_Generic) == 0x000068, "Wrong size on SQVotingService_StartVote_Generic");
static_assert(offsetof(SQVotingService_StartVote_Generic, WorldContextObject) == 0x000000, "Member 'SQVotingService_StartVote_Generic::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQVotingService_StartVote_Generic, InVoteConfig) == 0x000008, "Member 'SQVotingService_StartVote_Generic::InVoteConfig' has a wrong offset!");
static_assert(offsetof(SQVotingService_StartVote_Generic, InChoices) == 0x000048, "Member 'SQVotingService_StartVote_Generic::InChoices' has a wrong offset!");
static_assert(offsetof(SQVotingService_StartVote_Generic, OutAuthoritySession) == 0x000058, "Member 'SQVotingService_StartVote_Generic::OutAuthoritySession' has a wrong offset!");
static_assert(offsetof(SQVotingService_StartVote_Generic, ReturnValue) == 0x000060, "Member 'SQVotingService_StartVote_Generic::ReturnValue' has a wrong offset!");

// Function Squad.SQVotingService.StartVote_Layer
// 0x0028 (0x0028 - 0x0000)
struct SQVotingService_StartVote_Layer final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USQLayer*>                       InLayers;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class USQVoteSessionAuthority*                OutAuthoritySession;                               // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1415[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVotingService_StartVote_Layer) == 0x000008, "Wrong alignment on SQVotingService_StartVote_Layer");
static_assert(sizeof(SQVotingService_StartVote_Layer) == 0x000028, "Wrong size on SQVotingService_StartVote_Layer");
static_assert(offsetof(SQVotingService_StartVote_Layer, WorldContextObject) == 0x000000, "Member 'SQVotingService_StartVote_Layer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQVotingService_StartVote_Layer, InLayers) == 0x000008, "Member 'SQVotingService_StartVote_Layer::InLayers' has a wrong offset!");
static_assert(offsetof(SQVotingService_StartVote_Layer, OutAuthoritySession) == 0x000018, "Member 'SQVotingService_StartVote_Layer::OutAuthoritySession' has a wrong offset!");
static_assert(offsetof(SQVotingService_StartVote_Layer, ReturnValue) == 0x000020, "Member 'SQVotingService_StartVote_Layer::ReturnValue' has a wrong offset!");

// Function Squad.SQVotingService.StartVote_Level
// 0x0028 (0x0028 - 0x0000)
struct SQVotingService_StartVote_Level final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USQLevel*>                       InLevels;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class USQVoteSessionAuthority*                OutAuthoritySession;                               // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1416[0x7];                                     // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVotingService_StartVote_Level) == 0x000008, "Wrong alignment on SQVotingService_StartVote_Level");
static_assert(sizeof(SQVotingService_StartVote_Level) == 0x000028, "Wrong size on SQVotingService_StartVote_Level");
static_assert(offsetof(SQVotingService_StartVote_Level, WorldContextObject) == 0x000000, "Member 'SQVotingService_StartVote_Level::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SQVotingService_StartVote_Level, InLevels) == 0x000008, "Member 'SQVotingService_StartVote_Level::InLevels' has a wrong offset!");
static_assert(offsetof(SQVotingService_StartVote_Level, OutAuthoritySession) == 0x000018, "Member 'SQVotingService_StartVote_Level::OutAuthoritySession' has a wrong offset!");
static_assert(offsetof(SQVotingService_StartVote_Level, ReturnValue) == 0x000020, "Member 'SQVotingService_StartVote_Level::ReturnValue' has a wrong offset!");

// Function Squad.SQVotingState.ApplySlomoFactor
// 0x0004 (0x0004 - 0x0000)
struct SQVotingState_ApplySlomoFactor final
{
public:
	float                                         TimeDilationFactor;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVotingState_ApplySlomoFactor) == 0x000004, "Wrong alignment on SQVotingState_ApplySlomoFactor");
static_assert(sizeof(SQVotingState_ApplySlomoFactor) == 0x000004, "Wrong size on SQVotingState_ApplySlomoFactor");
static_assert(offsetof(SQVotingState_ApplySlomoFactor, TimeDilationFactor) == 0x000000, "Member 'SQVotingState_ApplySlomoFactor::TimeDilationFactor' has a wrong offset!");

// Function Squad.SQVotingState.HandleSequenceResult
// 0x0020 (0x0020 - 0x0000)
struct SQVotingState_HandleSequenceResult final
{
public:
	class USQVoteSession*                         VoteSession;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQChoice                              Winner;                                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVotingState_HandleSequenceResult) == 0x000008, "Wrong alignment on SQVotingState_HandleSequenceResult");
static_assert(sizeof(SQVotingState_HandleSequenceResult) == 0x000020, "Wrong size on SQVotingState_HandleSequenceResult");
static_assert(offsetof(SQVotingState_HandleSequenceResult, VoteSession) == 0x000000, "Member 'SQVotingState_HandleSequenceResult::VoteSession' has a wrong offset!");
static_assert(offsetof(SQVotingState_HandleSequenceResult, Winner) == 0x000008, "Member 'SQVotingState_HandleSequenceResult::Winner' has a wrong offset!");

// Function Squad.SQVotingState.JoinPlayerToCurrentVotes
// 0x0008 (0x0008 - 0x0000)
struct SQVotingState_JoinPlayerToCurrentVotes final
{
public:
	class APlayerController*                      NewPlayer;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVotingState_JoinPlayerToCurrentVotes) == 0x000008, "Wrong alignment on SQVotingState_JoinPlayerToCurrentVotes");
static_assert(sizeof(SQVotingState_JoinPlayerToCurrentVotes) == 0x000008, "Wrong size on SQVotingState_JoinPlayerToCurrentVotes");
static_assert(offsetof(SQVotingState_JoinPlayerToCurrentVotes, NewPlayer) == 0x000000, "Member 'SQVotingState_JoinPlayerToCurrentVotes::NewPlayer' has a wrong offset!");

// Function Squad.SQVotingState.RemovePlayerFromCurrentVotes
// 0x0008 (0x0008 - 0x0000)
struct SQVotingState_RemovePlayerFromCurrentVotes final
{
public:
	class APlayerController*                      LeavingPlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVotingState_RemovePlayerFromCurrentVotes) == 0x000008, "Wrong alignment on SQVotingState_RemovePlayerFromCurrentVotes");
static_assert(sizeof(SQVotingState_RemovePlayerFromCurrentVotes) == 0x000008, "Wrong size on SQVotingState_RemovePlayerFromCurrentVotes");
static_assert(offsetof(SQVotingState_RemovePlayerFromCurrentVotes, LeavingPlayer) == 0x000000, "Member 'SQVotingState_RemovePlayerFromCurrentVotes::LeavingPlayer' has a wrong offset!");

// Function Squad.SQVotingState.StartVote_FactionSetup
// 0x0038 (0x0038 - 0x0000)
struct SQVotingState_StartVote_FactionSetup final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141B[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USQFactionSetup*>                InFactionsSetups;                                  // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class USQVoteSessionAuthority*                OutAuthoritySession;                               // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           OverrideIDs;                                       // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141C[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVotingState_StartVote_FactionSetup) == 0x000008, "Wrong alignment on SQVotingState_StartVote_FactionSetup");
static_assert(sizeof(SQVotingState_StartVote_FactionSetup) == 0x000038, "Wrong size on SQVotingState_StartVote_FactionSetup");
static_assert(offsetof(SQVotingState_StartVote_FactionSetup, TeamId) == 0x000000, "Member 'SQVotingState_StartVote_FactionSetup::TeamId' has a wrong offset!");
static_assert(offsetof(SQVotingState_StartVote_FactionSetup, InFactionsSetups) == 0x000008, "Member 'SQVotingState_StartVote_FactionSetup::InFactionsSetups' has a wrong offset!");
static_assert(offsetof(SQVotingState_StartVote_FactionSetup, OutAuthoritySession) == 0x000018, "Member 'SQVotingState_StartVote_FactionSetup::OutAuthoritySession' has a wrong offset!");
static_assert(offsetof(SQVotingState_StartVote_FactionSetup, OverrideIDs) == 0x000020, "Member 'SQVotingState_StartVote_FactionSetup::OverrideIDs' has a wrong offset!");
static_assert(offsetof(SQVotingState_StartVote_FactionSetup, ReturnValue) == 0x000030, "Member 'SQVotingState_StartVote_FactionSetup::ReturnValue' has a wrong offset!");

// Function Squad.SQVotingState.StartVote_Generic
// 0x0060 (0x0060 - 0x0000)
struct SQVotingState_StartVote_Generic final
{
public:
	struct FSQVoteConfig                          InVoteConfig;                                      // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FSQChoice>                      InChoices;                                         // 0x0040(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class USQVoteSessionAuthority*                OutAuthoritySession;                               // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0058(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141D[0x7];                                     // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVotingState_StartVote_Generic) == 0x000008, "Wrong alignment on SQVotingState_StartVote_Generic");
static_assert(sizeof(SQVotingState_StartVote_Generic) == 0x000060, "Wrong size on SQVotingState_StartVote_Generic");
static_assert(offsetof(SQVotingState_StartVote_Generic, InVoteConfig) == 0x000000, "Member 'SQVotingState_StartVote_Generic::InVoteConfig' has a wrong offset!");
static_assert(offsetof(SQVotingState_StartVote_Generic, InChoices) == 0x000040, "Member 'SQVotingState_StartVote_Generic::InChoices' has a wrong offset!");
static_assert(offsetof(SQVotingState_StartVote_Generic, OutAuthoritySession) == 0x000050, "Member 'SQVotingState_StartVote_Generic::OutAuthoritySession' has a wrong offset!");
static_assert(offsetof(SQVotingState_StartVote_Generic, ReturnValue) == 0x000058, "Member 'SQVotingState_StartVote_Generic::ReturnValue' has a wrong offset!");

// Function Squad.SQVotingState.StartVote_Layer
// 0x0030 (0x0030 - 0x0000)
struct SQVotingState_StartVote_Layer final
{
public:
	TArray<class USQLayer*>                       InLayers;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class USQVoteSessionAuthority*                OutAuthoritySession;                               // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           OverrideIDs;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141E[0x7];                                     // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVotingState_StartVote_Layer) == 0x000008, "Wrong alignment on SQVotingState_StartVote_Layer");
static_assert(sizeof(SQVotingState_StartVote_Layer) == 0x000030, "Wrong size on SQVotingState_StartVote_Layer");
static_assert(offsetof(SQVotingState_StartVote_Layer, InLayers) == 0x000000, "Member 'SQVotingState_StartVote_Layer::InLayers' has a wrong offset!");
static_assert(offsetof(SQVotingState_StartVote_Layer, OutAuthoritySession) == 0x000010, "Member 'SQVotingState_StartVote_Layer::OutAuthoritySession' has a wrong offset!");
static_assert(offsetof(SQVotingState_StartVote_Layer, OverrideIDs) == 0x000018, "Member 'SQVotingState_StartVote_Layer::OverrideIDs' has a wrong offset!");
static_assert(offsetof(SQVotingState_StartVote_Layer, ReturnValue) == 0x000028, "Member 'SQVotingState_StartVote_Layer::ReturnValue' has a wrong offset!");

// Function Squad.SQVotingState.StartVote_Level
// 0x0020 (0x0020 - 0x0000)
struct SQVotingState_StartVote_Level final
{
public:
	TArray<class USQLevel*>                       InLevels;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class USQVoteSessionAuthority*                OutAuthoritySession;                               // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141F[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVotingState_StartVote_Level) == 0x000008, "Wrong alignment on SQVotingState_StartVote_Level");
static_assert(sizeof(SQVotingState_StartVote_Level) == 0x000020, "Wrong size on SQVotingState_StartVote_Level");
static_assert(offsetof(SQVotingState_StartVote_Level, InLevels) == 0x000000, "Member 'SQVotingState_StartVote_Level::InLevels' has a wrong offset!");
static_assert(offsetof(SQVotingState_StartVote_Level, OutAuthoritySession) == 0x000010, "Member 'SQVotingState_StartVote_Level::OutAuthoritySession' has a wrong offset!");
static_assert(offsetof(SQVotingState_StartVote_Level, ReturnValue) == 0x000018, "Member 'SQVotingState_StartVote_Level::ReturnValue' has a wrong offset!");

// Function Squad.SQVotingState.GetLayersVotingPool
// 0x0018 (0x0018 - 0x0000)
struct SQVotingState_GetLayersVotingPool final
{
public:
	TArray<struct FSQLayerSettingsPair>           OutLayers;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PoolSize;                                          // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1420[0x4];                                     // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQVotingState_GetLayersVotingPool) == 0x000008, "Wrong alignment on SQVotingState_GetLayersVotingPool");
static_assert(sizeof(SQVotingState_GetLayersVotingPool) == 0x000018, "Wrong size on SQVotingState_GetLayersVotingPool");
static_assert(offsetof(SQVotingState_GetLayersVotingPool, OutLayers) == 0x000000, "Member 'SQVotingState_GetLayersVotingPool::OutLayers' has a wrong offset!");
static_assert(offsetof(SQVotingState_GetLayersVotingPool, PoolSize) == 0x000010, "Member 'SQVotingState_GetLayersVotingPool::PoolSize' has a wrong offset!");

// Function Squad.SQVotingState.HasAnyVoteInProgress
// 0x0001 (0x0001 - 0x0000)
struct SQVotingState_HasAnyVoteInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQVotingState_HasAnyVoteInProgress) == 0x000001, "Wrong alignment on SQVotingState_HasAnyVoteInProgress");
static_assert(sizeof(SQVotingState_HasAnyVoteInProgress) == 0x000001, "Wrong size on SQVotingState_HasAnyVoteInProgress");
static_assert(offsetof(SQVotingState_HasAnyVoteInProgress, ReturnValue) == 0x000000, "Member 'SQVotingState_HasAnyVoteInProgress::ReturnValue' has a wrong offset!");

// Function Squad.SQWeaponAttachment_Scope.SetMeshTransitionSetting
// 0x0040 (0x0040 - 0x0000)
struct SQWeaponAttachment_Scope_SetMeshTransitionSetting final
{
public:
	struct FSQMeshTransitionSettings              MeshTransitionSetting;                             // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeaponAttachment_Scope_SetMeshTransitionSetting) == 0x000010, "Wrong alignment on SQWeaponAttachment_Scope_SetMeshTransitionSetting");
static_assert(sizeof(SQWeaponAttachment_Scope_SetMeshTransitionSetting) == 0x000040, "Wrong size on SQWeaponAttachment_Scope_SetMeshTransitionSetting");
static_assert(offsetof(SQWeaponAttachment_Scope_SetMeshTransitionSetting, MeshTransitionSetting) == 0x000000, "Member 'SQWeaponAttachment_Scope_SetMeshTransitionSetting::MeshTransitionSetting' has a wrong offset!");

// Function Squad.SQItemSkinRestrictions.IsValidForCurrentConditions
// 0x0040 (0x0040 - 0x0000)
struct SQItemSkinRestrictions_IsValidForCurrentConditions final
{
public:
	struct FSQItemSkinRestrictionParameters       Params_0;                                          // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1427[0x7];                                     // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQItemSkinRestrictions_IsValidForCurrentConditions) == 0x000008, "Wrong alignment on SQItemSkinRestrictions_IsValidForCurrentConditions");
static_assert(sizeof(SQItemSkinRestrictions_IsValidForCurrentConditions) == 0x000040, "Wrong size on SQItemSkinRestrictions_IsValidForCurrentConditions");
static_assert(offsetof(SQItemSkinRestrictions_IsValidForCurrentConditions, Params_0) == 0x000000, "Member 'SQItemSkinRestrictions_IsValidForCurrentConditions::Params_0' has a wrong offset!");
static_assert(offsetof(SQItemSkinRestrictions_IsValidForCurrentConditions, ReturnValue) == 0x000038, "Member 'SQItemSkinRestrictions_IsValidForCurrentConditions::ReturnValue' has a wrong offset!");

// Function Squad.SQItemSkinRestrictions.OverrideConflictingSkins
// 0x0038 (0x0038 - 0x0000)
struct SQItemSkinRestrictions_OverrideConflictingSkins final
{
public:
	struct FSQItemSkinRestrictionParameters       Params_0;                                          // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQItemSkinRestrictions_OverrideConflictingSkins) == 0x000008, "Wrong alignment on SQItemSkinRestrictions_OverrideConflictingSkins");
static_assert(sizeof(SQItemSkinRestrictions_OverrideConflictingSkins) == 0x000038, "Wrong size on SQItemSkinRestrictions_OverrideConflictingSkins");
static_assert(offsetof(SQItemSkinRestrictions_OverrideConflictingSkins, Params_0) == 0x000000, "Member 'SQItemSkinRestrictions_OverrideConflictingSkins::Params_0' has a wrong offset!");

// Function Squad.SQItemSkinSubsystem.GetFallbackRestrictionsObject
// 0x0008 (0x0008 - 0x0000)
struct SQItemSkinSubsystem_GetFallbackRestrictionsObject final
{
public:
	TSubclassOf<class USQItemSkinRestrictions>    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQItemSkinSubsystem_GetFallbackRestrictionsObject) == 0x000008, "Wrong alignment on SQItemSkinSubsystem_GetFallbackRestrictionsObject");
static_assert(sizeof(SQItemSkinSubsystem_GetFallbackRestrictionsObject) == 0x000008, "Wrong size on SQItemSkinSubsystem_GetFallbackRestrictionsObject");
static_assert(offsetof(SQItemSkinSubsystem_GetFallbackRestrictionsObject, ReturnValue) == 0x000000, "Member 'SQItemSkinSubsystem_GetFallbackRestrictionsObject::ReturnValue' has a wrong offset!");

// Function Squad.SQItemSkinSubsystem.GetSkinCollectionsForBundle
// 0x0020 (0x0020 - 0x0000)
struct SQItemSkinSubsystem_GetSkinCollectionsForBundle final
{
public:
	TArray<class USQItemSkinCollection*>          OutputArray;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UODKBazaarItem*                         Item;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1429[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQItemSkinSubsystem_GetSkinCollectionsForBundle) == 0x000008, "Wrong alignment on SQItemSkinSubsystem_GetSkinCollectionsForBundle");
static_assert(sizeof(SQItemSkinSubsystem_GetSkinCollectionsForBundle) == 0x000020, "Wrong size on SQItemSkinSubsystem_GetSkinCollectionsForBundle");
static_assert(offsetof(SQItemSkinSubsystem_GetSkinCollectionsForBundle, OutputArray) == 0x000000, "Member 'SQItemSkinSubsystem_GetSkinCollectionsForBundle::OutputArray' has a wrong offset!");
static_assert(offsetof(SQItemSkinSubsystem_GetSkinCollectionsForBundle, Item) == 0x000010, "Member 'SQItemSkinSubsystem_GetSkinCollectionsForBundle::Item' has a wrong offset!");
static_assert(offsetof(SQItemSkinSubsystem_GetSkinCollectionsForBundle, ReturnValue) == 0x000018, "Member 'SQItemSkinSubsystem_GetSkinCollectionsForBundle::ReturnValue' has a wrong offset!");

// Function Squad.SQItemSkinSubsystem.GetSkinDisplayClassForBundle
// 0x0018 (0x0018 - 0x0000)
struct SQItemSkinSubsystem_GetSkinDisplayClassForBundle final
{
public:
	class UClass*                                 OutputPtr;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UODKBazaarItem*                         Item;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_142A[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQItemSkinSubsystem_GetSkinDisplayClassForBundle) == 0x000008, "Wrong alignment on SQItemSkinSubsystem_GetSkinDisplayClassForBundle");
static_assert(sizeof(SQItemSkinSubsystem_GetSkinDisplayClassForBundle) == 0x000018, "Wrong size on SQItemSkinSubsystem_GetSkinDisplayClassForBundle");
static_assert(offsetof(SQItemSkinSubsystem_GetSkinDisplayClassForBundle, OutputPtr) == 0x000000, "Member 'SQItemSkinSubsystem_GetSkinDisplayClassForBundle::OutputPtr' has a wrong offset!");
static_assert(offsetof(SQItemSkinSubsystem_GetSkinDisplayClassForBundle, Item) == 0x000008, "Member 'SQItemSkinSubsystem_GetSkinDisplayClassForBundle::Item' has a wrong offset!");
static_assert(offsetof(SQItemSkinSubsystem_GetSkinDisplayClassForBundle, ReturnValue) == 0x000010, "Member 'SQItemSkinSubsystem_GetSkinDisplayClassForBundle::ReturnValue' has a wrong offset!");

// Function Squad.SQItemSkinSubsystem.GetSkinUIBadgeForKey
// 0x0080 (0x0080 - 0x0000)
struct SQItemSkinSubsystem_GetSkinUIBadgeForKey final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomBadge;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_142B[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQSkinUIBadge                         ReturnValue;                                       // 0x0010(0x0070)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQItemSkinSubsystem_GetSkinUIBadgeForKey) == 0x000008, "Wrong alignment on SQItemSkinSubsystem_GetSkinUIBadgeForKey");
static_assert(sizeof(SQItemSkinSubsystem_GetSkinUIBadgeForKey) == 0x000080, "Wrong size on SQItemSkinSubsystem_GetSkinUIBadgeForKey");
static_assert(offsetof(SQItemSkinSubsystem_GetSkinUIBadgeForKey, Key) == 0x000000, "Member 'SQItemSkinSubsystem_GetSkinUIBadgeForKey::Key' has a wrong offset!");
static_assert(offsetof(SQItemSkinSubsystem_GetSkinUIBadgeForKey, bCustomBadge) == 0x000008, "Member 'SQItemSkinSubsystem_GetSkinUIBadgeForKey::bCustomBadge' has a wrong offset!");
static_assert(offsetof(SQItemSkinSubsystem_GetSkinUIBadgeForKey, ReturnValue) == 0x000010, "Member 'SQItemSkinSubsystem_GetSkinUIBadgeForKey::ReturnValue' has a wrong offset!");

// Function Squad.SQItemSkinSubsystem.GetSkinUIBadgesForKeys
// 0x0028 (0x0028 - 0x0000)
struct SQItemSkinSubsystem_GetSkinUIBadgesForKeys final
{
public:
	TArray<class FName>                           Keys;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bCustomBadges;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_142C[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQSkinUIBadge>                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQItemSkinSubsystem_GetSkinUIBadgesForKeys) == 0x000008, "Wrong alignment on SQItemSkinSubsystem_GetSkinUIBadgesForKeys");
static_assert(sizeof(SQItemSkinSubsystem_GetSkinUIBadgesForKeys) == 0x000028, "Wrong size on SQItemSkinSubsystem_GetSkinUIBadgesForKeys");
static_assert(offsetof(SQItemSkinSubsystem_GetSkinUIBadgesForKeys, Keys) == 0x000000, "Member 'SQItemSkinSubsystem_GetSkinUIBadgesForKeys::Keys' has a wrong offset!");
static_assert(offsetof(SQItemSkinSubsystem_GetSkinUIBadgesForKeys, bCustomBadges) == 0x000010, "Member 'SQItemSkinSubsystem_GetSkinUIBadgesForKeys::bCustomBadges' has a wrong offset!");
static_assert(offsetof(SQItemSkinSubsystem_GetSkinUIBadgesForKeys, ReturnValue) == 0x000018, "Member 'SQItemSkinSubsystem_GetSkinUIBadgesForKeys::ReturnValue' has a wrong offset!");

// Function Squad.SQSkinBlueprintLibrary.AreAllSkinsOwned
// 0x0020 (0x0020 - 0x0000)
struct SQSkinBlueprintLibrary_AreAllSkinsOwned final
{
public:
	class ASQPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SkinNames;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_142D[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSkinBlueprintLibrary_AreAllSkinsOwned) == 0x000008, "Wrong alignment on SQSkinBlueprintLibrary_AreAllSkinsOwned");
static_assert(sizeof(SQSkinBlueprintLibrary_AreAllSkinsOwned) == 0x000020, "Wrong size on SQSkinBlueprintLibrary_AreAllSkinsOwned");
static_assert(offsetof(SQSkinBlueprintLibrary_AreAllSkinsOwned, PlayerState) == 0x000000, "Member 'SQSkinBlueprintLibrary_AreAllSkinsOwned::PlayerState' has a wrong offset!");
static_assert(offsetof(SQSkinBlueprintLibrary_AreAllSkinsOwned, SkinNames) == 0x000008, "Member 'SQSkinBlueprintLibrary_AreAllSkinsOwned::SkinNames' has a wrong offset!");
static_assert(offsetof(SQSkinBlueprintLibrary_AreAllSkinsOwned, ReturnValue) == 0x000018, "Member 'SQSkinBlueprintLibrary_AreAllSkinsOwned::ReturnValue' has a wrong offset!");

// Function Squad.SQSkinBlueprintLibrary.AreAllSkinsUsableInContext
// 0x0020 (0x0020 - 0x0000)
struct SQSkinBlueprintLibrary_AreAllSkinsUsableInContext final
{
public:
	class ASQPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SkinNames;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_142E[0x7];                                     // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSkinBlueprintLibrary_AreAllSkinsUsableInContext) == 0x000008, "Wrong alignment on SQSkinBlueprintLibrary_AreAllSkinsUsableInContext");
static_assert(sizeof(SQSkinBlueprintLibrary_AreAllSkinsUsableInContext) == 0x000020, "Wrong size on SQSkinBlueprintLibrary_AreAllSkinsUsableInContext");
static_assert(offsetof(SQSkinBlueprintLibrary_AreAllSkinsUsableInContext, PlayerState) == 0x000000, "Member 'SQSkinBlueprintLibrary_AreAllSkinsUsableInContext::PlayerState' has a wrong offset!");
static_assert(offsetof(SQSkinBlueprintLibrary_AreAllSkinsUsableInContext, SkinNames) == 0x000008, "Member 'SQSkinBlueprintLibrary_AreAllSkinsUsableInContext::SkinNames' has a wrong offset!");
static_assert(offsetof(SQSkinBlueprintLibrary_AreAllSkinsUsableInContext, ReturnValue) == 0x000018, "Member 'SQSkinBlueprintLibrary_AreAllSkinsUsableInContext::ReturnValue' has a wrong offset!");

// Function Squad.SQSkinBlueprintLibrary.AreSkinsUsingSameSkinSlot
// 0x0014 (0x0014 - 0x0000)
struct SQSkinBlueprintLibrary_AreSkinsUsingSameSkinSlot final
{
public:
	class FName                                   Skin1;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Skin2;                                             // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_142F[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSkinBlueprintLibrary_AreSkinsUsingSameSkinSlot) == 0x000004, "Wrong alignment on SQSkinBlueprintLibrary_AreSkinsUsingSameSkinSlot");
static_assert(sizeof(SQSkinBlueprintLibrary_AreSkinsUsingSameSkinSlot) == 0x000014, "Wrong size on SQSkinBlueprintLibrary_AreSkinsUsingSameSkinSlot");
static_assert(offsetof(SQSkinBlueprintLibrary_AreSkinsUsingSameSkinSlot, Skin1) == 0x000000, "Member 'SQSkinBlueprintLibrary_AreSkinsUsingSameSkinSlot::Skin1' has a wrong offset!");
static_assert(offsetof(SQSkinBlueprintLibrary_AreSkinsUsingSameSkinSlot, Skin2) == 0x000008, "Member 'SQSkinBlueprintLibrary_AreSkinsUsingSameSkinSlot::Skin2' has a wrong offset!");
static_assert(offsetof(SQSkinBlueprintLibrary_AreSkinsUsingSameSkinSlot, ReturnValue) == 0x000010, "Member 'SQSkinBlueprintLibrary_AreSkinsUsingSameSkinSlot::ReturnValue' has a wrong offset!");

// Function Squad.SQSkinBlueprintLibrary.FilterSkinsOwned
// 0x0018 (0x0018 - 0x0000)
struct SQSkinBlueprintLibrary_FilterSkinsOwned final
{
public:
	class ASQPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SkinNames;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSkinBlueprintLibrary_FilterSkinsOwned) == 0x000008, "Wrong alignment on SQSkinBlueprintLibrary_FilterSkinsOwned");
static_assert(sizeof(SQSkinBlueprintLibrary_FilterSkinsOwned) == 0x000018, "Wrong size on SQSkinBlueprintLibrary_FilterSkinsOwned");
static_assert(offsetof(SQSkinBlueprintLibrary_FilterSkinsOwned, PlayerState) == 0x000000, "Member 'SQSkinBlueprintLibrary_FilterSkinsOwned::PlayerState' has a wrong offset!");
static_assert(offsetof(SQSkinBlueprintLibrary_FilterSkinsOwned, SkinNames) == 0x000008, "Member 'SQSkinBlueprintLibrary_FilterSkinsOwned::SkinNames' has a wrong offset!");

// Function Squad.SQSkinBlueprintLibrary.FilterSkinsUnowned
// 0x0018 (0x0018 - 0x0000)
struct SQSkinBlueprintLibrary_FilterSkinsUnowned final
{
public:
	class ASQPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SkinNames;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSkinBlueprintLibrary_FilterSkinsUnowned) == 0x000008, "Wrong alignment on SQSkinBlueprintLibrary_FilterSkinsUnowned");
static_assert(sizeof(SQSkinBlueprintLibrary_FilterSkinsUnowned) == 0x000018, "Wrong size on SQSkinBlueprintLibrary_FilterSkinsUnowned");
static_assert(offsetof(SQSkinBlueprintLibrary_FilterSkinsUnowned, PlayerState) == 0x000000, "Member 'SQSkinBlueprintLibrary_FilterSkinsUnowned::PlayerState' has a wrong offset!");
static_assert(offsetof(SQSkinBlueprintLibrary_FilterSkinsUnowned, SkinNames) == 0x000008, "Member 'SQSkinBlueprintLibrary_FilterSkinsUnowned::SkinNames' has a wrong offset!");

// Function Squad.SQSkinBlueprintLibrary.FilterSkinsUsableInContext
// 0x0018 (0x0018 - 0x0000)
struct SQSkinBlueprintLibrary_FilterSkinsUsableInContext final
{
public:
	class ASQPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           SkinNames;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSkinBlueprintLibrary_FilterSkinsUsableInContext) == 0x000008, "Wrong alignment on SQSkinBlueprintLibrary_FilterSkinsUsableInContext");
static_assert(sizeof(SQSkinBlueprintLibrary_FilterSkinsUsableInContext) == 0x000018, "Wrong size on SQSkinBlueprintLibrary_FilterSkinsUsableInContext");
static_assert(offsetof(SQSkinBlueprintLibrary_FilterSkinsUsableInContext, PlayerState) == 0x000000, "Member 'SQSkinBlueprintLibrary_FilterSkinsUsableInContext::PlayerState' has a wrong offset!");
static_assert(offsetof(SQSkinBlueprintLibrary_FilterSkinsUsableInContext, SkinNames) == 0x000008, "Member 'SQSkinBlueprintLibrary_FilterSkinsUsableInContext::SkinNames' has a wrong offset!");

// Function Squad.SQSkinBlueprintLibrary.FilterSkinsUsingSameSkinSlots
// 0x0010 (0x0010 - 0x0000)
struct SQSkinBlueprintLibrary_FilterSkinsUsingSameSkinSlots final
{
public:
	TArray<class FName>                           SkinNames;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSkinBlueprintLibrary_FilterSkinsUsingSameSkinSlots) == 0x000008, "Wrong alignment on SQSkinBlueprintLibrary_FilterSkinsUsingSameSkinSlots");
static_assert(sizeof(SQSkinBlueprintLibrary_FilterSkinsUsingSameSkinSlots) == 0x000010, "Wrong size on SQSkinBlueprintLibrary_FilterSkinsUsingSameSkinSlots");
static_assert(offsetof(SQSkinBlueprintLibrary_FilterSkinsUsingSameSkinSlots, SkinNames) == 0x000000, "Member 'SQSkinBlueprintLibrary_FilterSkinsUsingSameSkinSlots::SkinNames' has a wrong offset!");

// Function Squad.SQSkinBlueprintLibrary.FindSkin
// 0x0010 (0x0010 - 0x0000)
struct SQSkinBlueprintLibrary_FindSkin final
{
public:
	class FName                                   SkinName;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USQItemSkinCollection*            ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSkinBlueprintLibrary_FindSkin) == 0x000008, "Wrong alignment on SQSkinBlueprintLibrary_FindSkin");
static_assert(sizeof(SQSkinBlueprintLibrary_FindSkin) == 0x000010, "Wrong size on SQSkinBlueprintLibrary_FindSkin");
static_assert(offsetof(SQSkinBlueprintLibrary_FindSkin, SkinName) == 0x000000, "Member 'SQSkinBlueprintLibrary_FindSkin::SkinName' has a wrong offset!");
static_assert(offsetof(SQSkinBlueprintLibrary_FindSkin, ReturnValue) == 0x000008, "Member 'SQSkinBlueprintLibrary_FindSkin::ReturnValue' has a wrong offset!");

// Function Squad.SQSkinBlueprintLibrary.GetAllSkinNames
// 0x0010 (0x0010 - 0x0000)
struct SQSkinBlueprintLibrary_GetAllSkinNames final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSkinBlueprintLibrary_GetAllSkinNames) == 0x000008, "Wrong alignment on SQSkinBlueprintLibrary_GetAllSkinNames");
static_assert(sizeof(SQSkinBlueprintLibrary_GetAllSkinNames) == 0x000010, "Wrong size on SQSkinBlueprintLibrary_GetAllSkinNames");
static_assert(offsetof(SQSkinBlueprintLibrary_GetAllSkinNames, ReturnValue) == 0x000000, "Member 'SQSkinBlueprintLibrary_GetAllSkinNames::ReturnValue' has a wrong offset!");

// Function Squad.SQSkinBlueprintLibrary.GetAllSkinsForFaction
// 0x0028 (0x0028 - 0x0000)
struct SQSkinBlueprintLibrary_GetAllSkinsForFaction final
{
public:
	class UObject*                                WCO;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FactionName;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeIfNoFactions;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1430[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSkinBlueprintLibrary_GetAllSkinsForFaction) == 0x000008, "Wrong alignment on SQSkinBlueprintLibrary_GetAllSkinsForFaction");
static_assert(sizeof(SQSkinBlueprintLibrary_GetAllSkinsForFaction) == 0x000028, "Wrong size on SQSkinBlueprintLibrary_GetAllSkinsForFaction");
static_assert(offsetof(SQSkinBlueprintLibrary_GetAllSkinsForFaction, WCO) == 0x000000, "Member 'SQSkinBlueprintLibrary_GetAllSkinsForFaction::WCO' has a wrong offset!");
static_assert(offsetof(SQSkinBlueprintLibrary_GetAllSkinsForFaction, FactionName) == 0x000008, "Member 'SQSkinBlueprintLibrary_GetAllSkinsForFaction::FactionName' has a wrong offset!");
static_assert(offsetof(SQSkinBlueprintLibrary_GetAllSkinsForFaction, bIncludeIfNoFactions) == 0x000010, "Member 'SQSkinBlueprintLibrary_GetAllSkinsForFaction::bIncludeIfNoFactions' has a wrong offset!");
static_assert(offsetof(SQSkinBlueprintLibrary_GetAllSkinsForFaction, ReturnValue) == 0x000018, "Member 'SQSkinBlueprintLibrary_GetAllSkinsForFaction::ReturnValue' has a wrong offset!");

// Function Squad.SQSkinBlueprintLibrary.GetIsSkinEnabledForFaction
// 0x0014 (0x0014 - 0x0000)
struct SQSkinBlueprintLibrary_GetIsSkinEnabledForFaction final
{
public:
	class FName                                   Faction;                                           // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkinName;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1431[0x3];                                     // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSkinBlueprintLibrary_GetIsSkinEnabledForFaction) == 0x000004, "Wrong alignment on SQSkinBlueprintLibrary_GetIsSkinEnabledForFaction");
static_assert(sizeof(SQSkinBlueprintLibrary_GetIsSkinEnabledForFaction) == 0x000014, "Wrong size on SQSkinBlueprintLibrary_GetIsSkinEnabledForFaction");
static_assert(offsetof(SQSkinBlueprintLibrary_GetIsSkinEnabledForFaction, Faction) == 0x000000, "Member 'SQSkinBlueprintLibrary_GetIsSkinEnabledForFaction::Faction' has a wrong offset!");
static_assert(offsetof(SQSkinBlueprintLibrary_GetIsSkinEnabledForFaction, SkinName) == 0x000008, "Member 'SQSkinBlueprintLibrary_GetIsSkinEnabledForFaction::SkinName' has a wrong offset!");
static_assert(offsetof(SQSkinBlueprintLibrary_GetIsSkinEnabledForFaction, ReturnValue) == 0x000010, "Member 'SQSkinBlueprintLibrary_GetIsSkinEnabledForFaction::ReturnValue' has a wrong offset!");

// Function Squad.SQSkinBlueprintLibrary.GetSkinDataTable
// 0x0008 (0x0008 - 0x0000)
struct SQSkinBlueprintLibrary_GetSkinDataTable final
{
public:
	const class UDataTable*                       ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSkinBlueprintLibrary_GetSkinDataTable) == 0x000008, "Wrong alignment on SQSkinBlueprintLibrary_GetSkinDataTable");
static_assert(sizeof(SQSkinBlueprintLibrary_GetSkinDataTable) == 0x000008, "Wrong size on SQSkinBlueprintLibrary_GetSkinDataTable");
static_assert(offsetof(SQSkinBlueprintLibrary_GetSkinDataTable, ReturnValue) == 0x000000, "Member 'SQSkinBlueprintLibrary_GetSkinDataTable::ReturnValue' has a wrong offset!");

// Function Squad.SQSkinBlueprintLibrary.GetUserInterfacePreviewWeapon
// 0x0120 (0x0120 - 0x0000)
struct SQSkinBlueprintLibrary_GetUserInterfacePreviewWeapon final
{
public:
	struct FSQItemSkinSlot                        SkinSlot;                                          // 0x0000(0x00F8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x00F8(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQSkinBlueprintLibrary_GetUserInterfacePreviewWeapon) == 0x000008, "Wrong alignment on SQSkinBlueprintLibrary_GetUserInterfacePreviewWeapon");
static_assert(sizeof(SQSkinBlueprintLibrary_GetUserInterfacePreviewWeapon) == 0x000120, "Wrong size on SQSkinBlueprintLibrary_GetUserInterfacePreviewWeapon");
static_assert(offsetof(SQSkinBlueprintLibrary_GetUserInterfacePreviewWeapon, SkinSlot) == 0x000000, "Member 'SQSkinBlueprintLibrary_GetUserInterfacePreviewWeapon::SkinSlot' has a wrong offset!");
static_assert(offsetof(SQSkinBlueprintLibrary_GetUserInterfacePreviewWeapon, ReturnValue) == 0x0000F8, "Member 'SQSkinBlueprintLibrary_GetUserInterfacePreviewWeapon::ReturnValue' has a wrong offset!");

// Function Squad.SQSkinBlueprintLibrary.IsSkinOwned
// 0x0018 (0x0018 - 0x0000)
struct SQSkinBlueprintLibrary_IsSkinOwned final
{
public:
	class ASQPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkinName;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1432[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSkinBlueprintLibrary_IsSkinOwned) == 0x000008, "Wrong alignment on SQSkinBlueprintLibrary_IsSkinOwned");
static_assert(sizeof(SQSkinBlueprintLibrary_IsSkinOwned) == 0x000018, "Wrong size on SQSkinBlueprintLibrary_IsSkinOwned");
static_assert(offsetof(SQSkinBlueprintLibrary_IsSkinOwned, PlayerState) == 0x000000, "Member 'SQSkinBlueprintLibrary_IsSkinOwned::PlayerState' has a wrong offset!");
static_assert(offsetof(SQSkinBlueprintLibrary_IsSkinOwned, SkinName) == 0x000008, "Member 'SQSkinBlueprintLibrary_IsSkinOwned::SkinName' has a wrong offset!");
static_assert(offsetof(SQSkinBlueprintLibrary_IsSkinOwned, ReturnValue) == 0x000010, "Member 'SQSkinBlueprintLibrary_IsSkinOwned::ReturnValue' has a wrong offset!");

// Function Squad.SQSkinBlueprintLibrary.IsSkinUsableInContext
// 0x0018 (0x0018 - 0x0000)
struct SQSkinBlueprintLibrary_IsSkinUsableInContext final
{
public:
	class ASQPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkinName;                                          // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1433[0x7];                                     // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSkinBlueprintLibrary_IsSkinUsableInContext) == 0x000008, "Wrong alignment on SQSkinBlueprintLibrary_IsSkinUsableInContext");
static_assert(sizeof(SQSkinBlueprintLibrary_IsSkinUsableInContext) == 0x000018, "Wrong size on SQSkinBlueprintLibrary_IsSkinUsableInContext");
static_assert(offsetof(SQSkinBlueprintLibrary_IsSkinUsableInContext, PlayerState) == 0x000000, "Member 'SQSkinBlueprintLibrary_IsSkinUsableInContext::PlayerState' has a wrong offset!");
static_assert(offsetof(SQSkinBlueprintLibrary_IsSkinUsableInContext, SkinName) == 0x000008, "Member 'SQSkinBlueprintLibrary_IsSkinUsableInContext::SkinName' has a wrong offset!");
static_assert(offsetof(SQSkinBlueprintLibrary_IsSkinUsableInContext, ReturnValue) == 0x000010, "Member 'SQSkinBlueprintLibrary_IsSkinUsableInContext::ReturnValue' has a wrong offset!");

// Function Squad.SQSkinBlueprintLibrary.SetSkinEnabledForFaction
// 0x0020 (0x0020 - 0x0000)
struct SQSkinBlueprintLibrary_SetSkinEnabledForFaction final
{
public:
	class ASQPlayerState*                         PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Faction;                                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SkinName;                                          // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveNonUniqueSkinGroups;                        // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQSkinEnableResult                           ReturnValue;                                       // 0x001A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1434[0x5];                                     // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SQSkinBlueprintLibrary_SetSkinEnabledForFaction) == 0x000008, "Wrong alignment on SQSkinBlueprintLibrary_SetSkinEnabledForFaction");
static_assert(sizeof(SQSkinBlueprintLibrary_SetSkinEnabledForFaction) == 0x000020, "Wrong size on SQSkinBlueprintLibrary_SetSkinEnabledForFaction");
static_assert(offsetof(SQSkinBlueprintLibrary_SetSkinEnabledForFaction, PlayerState) == 0x000000, "Member 'SQSkinBlueprintLibrary_SetSkinEnabledForFaction::PlayerState' has a wrong offset!");
static_assert(offsetof(SQSkinBlueprintLibrary_SetSkinEnabledForFaction, Faction) == 0x000008, "Member 'SQSkinBlueprintLibrary_SetSkinEnabledForFaction::Faction' has a wrong offset!");
static_assert(offsetof(SQSkinBlueprintLibrary_SetSkinEnabledForFaction, SkinName) == 0x000010, "Member 'SQSkinBlueprintLibrary_SetSkinEnabledForFaction::SkinName' has a wrong offset!");
static_assert(offsetof(SQSkinBlueprintLibrary_SetSkinEnabledForFaction, bEnable) == 0x000018, "Member 'SQSkinBlueprintLibrary_SetSkinEnabledForFaction::bEnable' has a wrong offset!");
static_assert(offsetof(SQSkinBlueprintLibrary_SetSkinEnabledForFaction, bRemoveNonUniqueSkinGroups) == 0x000019, "Member 'SQSkinBlueprintLibrary_SetSkinEnabledForFaction::bRemoveNonUniqueSkinGroups' has a wrong offset!");
static_assert(offsetof(SQSkinBlueprintLibrary_SetSkinEnabledForFaction, ReturnValue) == 0x00001A, "Member 'SQSkinBlueprintLibrary_SetSkinEnabledForFaction::ReturnValue' has a wrong offset!");

// Function Squad.SQWeaponSkinWidget.IsNew
// 0x0001 (0x0001 - 0x0000)
struct SQWeaponSkinWidget_IsNew final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeaponSkinWidget_IsNew) == 0x000001, "Wrong alignment on SQWeaponSkinWidget_IsNew");
static_assert(sizeof(SQWeaponSkinWidget_IsNew) == 0x000001, "Wrong size on SQWeaponSkinWidget_IsNew");
static_assert(offsetof(SQWeaponSkinWidget_IsNew, ReturnValue) == 0x000000, "Member 'SQWeaponSkinWidget_IsNew::ReturnValue' has a wrong offset!");

// Function Squad.SQWeaponSkinWidget.IsOwned
// 0x0001 (0x0001 - 0x0000)
struct SQWeaponSkinWidget_IsOwned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWeaponSkinWidget_IsOwned) == 0x000001, "Wrong alignment on SQWeaponSkinWidget_IsOwned");
static_assert(sizeof(SQWeaponSkinWidget_IsOwned) == 0x000001, "Wrong size on SQWeaponSkinWidget_IsOwned");
static_assert(offsetof(SQWeaponSkinWidget_IsOwned, ReturnValue) == 0x000000, "Member 'SQWeaponSkinWidget_IsOwned::ReturnValue' has a wrong offset!");

// Function Squad.SQWidget_RadialWheel.GetCurrentSection
// 0x0008 (0x0008 - 0x0000)
struct SQWidget_RadialWheel_GetCurrentSection final
{
public:
	float                                         CurrentAngle;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWidget_RadialWheel_GetCurrentSection) == 0x000004, "Wrong alignment on SQWidget_RadialWheel_GetCurrentSection");
static_assert(sizeof(SQWidget_RadialWheel_GetCurrentSection) == 0x000008, "Wrong size on SQWidget_RadialWheel_GetCurrentSection");
static_assert(offsetof(SQWidget_RadialWheel_GetCurrentSection, CurrentAngle) == 0x000000, "Member 'SQWidget_RadialWheel_GetCurrentSection::CurrentAngle' has a wrong offset!");
static_assert(offsetof(SQWidget_RadialWheel_GetCurrentSection, ReturnValue) == 0x000004, "Member 'SQWidget_RadialWheel_GetCurrentSection::ReturnValue' has a wrong offset!");

// Function Squad.SQWidget_RadialWheel.GetSectionBounds
// 0x0004 (0x0004 - 0x0000)
struct SQWidget_RadialWheel_GetSectionBounds final
{
public:
	int32                                         InSectionCount;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWidget_RadialWheel_GetSectionBounds) == 0x000004, "Wrong alignment on SQWidget_RadialWheel_GetSectionBounds");
static_assert(sizeof(SQWidget_RadialWheel_GetSectionBounds) == 0x000004, "Wrong size on SQWidget_RadialWheel_GetSectionBounds");
static_assert(offsetof(SQWidget_RadialWheel_GetSectionBounds, InSectionCount) == 0x000000, "Member 'SQWidget_RadialWheel_GetSectionBounds::InSectionCount' has a wrong offset!");

// Function Squad.SQWidget_RadialWheel.GetProperRotation
// 0x0004 (0x0004 - 0x0000)
struct SQWidget_RadialWheel_GetProperRotation final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWidget_RadialWheel_GetProperRotation) == 0x000004, "Wrong alignment on SQWidget_RadialWheel_GetProperRotation");
static_assert(sizeof(SQWidget_RadialWheel_GetProperRotation) == 0x000004, "Wrong size on SQWidget_RadialWheel_GetProperRotation");
static_assert(offsetof(SQWidget_RadialWheel_GetProperRotation, ReturnValue) == 0x000000, "Member 'SQWidget_RadialWheel_GetProperRotation::ReturnValue' has a wrong offset!");

// Function Squad.SQWorldSettings.SetMapTexture
// 0x0008 (0x0008 - 0x0000)
struct SQWorldSettings_SetMapTexture final
{
public:
	class UTexture*                               Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWorldSettings_SetMapTexture) == 0x000008, "Wrong alignment on SQWorldSettings_SetMapTexture");
static_assert(sizeof(SQWorldSettings_SetMapTexture) == 0x000008, "Wrong size on SQWorldSettings_SetMapTexture");
static_assert(offsetof(SQWorldSettings_SetMapTexture, Value) == 0x000000, "Member 'SQWorldSettings_SetMapTexture::Value' has a wrong offset!");

// Function Squad.SQWorldSettings.CanSwitchTo3rdPerson
// 0x0001 (0x0001 - 0x0000)
struct SQWorldSettings_CanSwitchTo3rdPerson final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SQWorldSettings_CanSwitchTo3rdPerson) == 0x000001, "Wrong alignment on SQWorldSettings_CanSwitchTo3rdPerson");
static_assert(sizeof(SQWorldSettings_CanSwitchTo3rdPerson) == 0x000001, "Wrong size on SQWorldSettings_CanSwitchTo3rdPerson");
static_assert(offsetof(SQWorldSettings_CanSwitchTo3rdPerson, ReturnValue) == 0x000000, "Member 'SQWorldSettings_CanSwitchTo3rdPerson::ReturnValue' has a wrong offset!");

}

