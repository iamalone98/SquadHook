#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UMG_MapPreviewPOI

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UMG_MapPreviewPOI.UMG_MapPreviewPOI_C
// 0x0098 (0x02F8 - 0x0260)
class UUMG_MapPreviewPOI_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCanvasPanel*                           ElementsCanvas;                                    // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 MainImage;                                         // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int32                                         TextureSize;                                       // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4246[0x4];                                     // 0x027C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 RenderTarget;                                      // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MID_RendTex;                                       // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FLinearColor>                   ColorList;                                         // 0x0290(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UUMG_MapPreviewPOI_Element_C*>   POIElements;                                       // 0x02A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<struct FVector2D>                      LinesPos;                                          // 0x02B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UUMG_MapPreviewPOI_Name_C*              POIName;                                           // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvas*                                DrawCanvas;                                        // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDrawToRenderTargetContext             DrawContext;                                       // 0x02D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FLinearColor                           ConnectionLineColor;                               // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultPointSize;                                  // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_UMG_MapPreviewPOI(int32 EntryPoint);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Construct();
	void FillTexture(class UTexture2D* Minimap, class USQLayer* Layer);
	void ConvertObjectiveLocation(const struct FVector& InLocation, class USQLayer* InLayer, struct FVector2D* TexturePos);
	void GetColorForOrder(int32 Order, class FName Mode, struct FLinearColor* Color);
	void GetPOIElement(int32 Param_Index, class UUMG_MapPreviewPOI_Element_C** Element);
	void ShouldShowConnectLines(class USQLayer* Layer, bool* Show);
	void UpdateLinesVisual();
	void PoiHovered(class UUMG_MapPreviewPOI_Element_C* POI, bool Hovered);
	void GetOrderID(bool Invert, int32 ObjNum, int32 Param_Index, int32* Order);
	void GetLastObjectiveIndex(class USQLayer* Layer, int32* LastObjIndex);
	void ShouldShowPoints(class USQLayer* Layer, bool* Show);
	void GetDisplayMode(class USQLayer* InLayer, int32* Mode, float* Size);
	void ShouldRevertPoints(class USQLayer* Layer, bool* Revert);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UMG_MapPreviewPOI_C">();
	}
	static class UUMG_MapPreviewPOI_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUMG_MapPreviewPOI_C>();
	}
};
static_assert(alignof(UUMG_MapPreviewPOI_C) == 0x000008, "Wrong alignment on UUMG_MapPreviewPOI_C");
static_assert(sizeof(UUMG_MapPreviewPOI_C) == 0x0002F8, "Wrong size on UUMG_MapPreviewPOI_C");
static_assert(offsetof(UUMG_MapPreviewPOI_C, UberGraphFrame) == 0x000260, "Member 'UUMG_MapPreviewPOI_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUMG_MapPreviewPOI_C, ElementsCanvas) == 0x000268, "Member 'UUMG_MapPreviewPOI_C::ElementsCanvas' has a wrong offset!");
static_assert(offsetof(UUMG_MapPreviewPOI_C, MainImage) == 0x000270, "Member 'UUMG_MapPreviewPOI_C::MainImage' has a wrong offset!");
static_assert(offsetof(UUMG_MapPreviewPOI_C, TextureSize) == 0x000278, "Member 'UUMG_MapPreviewPOI_C::TextureSize' has a wrong offset!");
static_assert(offsetof(UUMG_MapPreviewPOI_C, RenderTarget) == 0x000280, "Member 'UUMG_MapPreviewPOI_C::RenderTarget' has a wrong offset!");
static_assert(offsetof(UUMG_MapPreviewPOI_C, MID_RendTex) == 0x000288, "Member 'UUMG_MapPreviewPOI_C::MID_RendTex' has a wrong offset!");
static_assert(offsetof(UUMG_MapPreviewPOI_C, ColorList) == 0x000290, "Member 'UUMG_MapPreviewPOI_C::ColorList' has a wrong offset!");
static_assert(offsetof(UUMG_MapPreviewPOI_C, POIElements) == 0x0002A0, "Member 'UUMG_MapPreviewPOI_C::POIElements' has a wrong offset!");
static_assert(offsetof(UUMG_MapPreviewPOI_C, LinesPos) == 0x0002B0, "Member 'UUMG_MapPreviewPOI_C::LinesPos' has a wrong offset!");
static_assert(offsetof(UUMG_MapPreviewPOI_C, POIName) == 0x0002C0, "Member 'UUMG_MapPreviewPOI_C::POIName' has a wrong offset!");
static_assert(offsetof(UUMG_MapPreviewPOI_C, DrawCanvas) == 0x0002C8, "Member 'UUMG_MapPreviewPOI_C::DrawCanvas' has a wrong offset!");
static_assert(offsetof(UUMG_MapPreviewPOI_C, DrawContext) == 0x0002D0, "Member 'UUMG_MapPreviewPOI_C::DrawContext' has a wrong offset!");
static_assert(offsetof(UUMG_MapPreviewPOI_C, ConnectionLineColor) == 0x0002E0, "Member 'UUMG_MapPreviewPOI_C::ConnectionLineColor' has a wrong offset!");
static_assert(offsetof(UUMG_MapPreviewPOI_C, DefaultPointSize) == 0x0002F0, "Member 'UUMG_MapPreviewPOI_C::DefaultPointSize' has a wrong offset!");

}

