#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GraphMercyBleedComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GraphMercyBleedComponent.GraphMercyBleedComponent_C
// 0x0038 (0x00E8 - 0x00B0)
class UGraphMercyBleedComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         TicketLoss;                                        // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TicketGain;                                        // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CapturezonesByTeam;                                // 0x00C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 CurrentLosers;                                     // 0x00D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         TickFrequencyInSeconds;                            // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GraphMercyBleedComponent(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void OnLatticeUpdated_Event_0();
	void ReceiveBeginPlay();
	void TickBleed();
	void CountCaptureZonesByTeam();
	void FindLosers();
	bool IsLoser(int32 CaptureZones, int32 Team);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GraphMercyBleedComponent_C">();
	}
	static class UGraphMercyBleedComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGraphMercyBleedComponent_C>();
	}
};
static_assert(alignof(UGraphMercyBleedComponent_C) == 0x000008, "Wrong alignment on UGraphMercyBleedComponent_C");
static_assert(sizeof(UGraphMercyBleedComponent_C) == 0x0000E8, "Wrong size on UGraphMercyBleedComponent_C");
static_assert(offsetof(UGraphMercyBleedComponent_C, UberGraphFrame) == 0x0000B0, "Member 'UGraphMercyBleedComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGraphMercyBleedComponent_C, TicketLoss) == 0x0000B8, "Member 'UGraphMercyBleedComponent_C::TicketLoss' has a wrong offset!");
static_assert(offsetof(UGraphMercyBleedComponent_C, TicketGain) == 0x0000BC, "Member 'UGraphMercyBleedComponent_C::TicketGain' has a wrong offset!");
static_assert(offsetof(UGraphMercyBleedComponent_C, CapturezonesByTeam) == 0x0000C0, "Member 'UGraphMercyBleedComponent_C::CapturezonesByTeam' has a wrong offset!");
static_assert(offsetof(UGraphMercyBleedComponent_C, CurrentLosers) == 0x0000D0, "Member 'UGraphMercyBleedComponent_C::CurrentLosers' has a wrong offset!");
static_assert(offsetof(UGraphMercyBleedComponent_C, TickFrequencyInSeconds) == 0x0000E0, "Member 'UGraphMercyBleedComponent_C::TickFrequencyInSeconds' has a wrong offset!");

}

