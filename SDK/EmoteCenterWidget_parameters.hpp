#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EmoteCenterWidget

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function EmoteCenterWidget.EmoteCenterWidget_C.ExecuteUbergraph_EmoteCenterWidget
// 0x00C0 (0x00C0 - 0x0000)
struct EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USQRadialButton*                        CallFunc_GetHoverWidget_HoverWidget;               // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3148[0x6];                                     // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0050(0x0018)()
	class UEmoteRadialEntry_C*                    K2Node_DynamicCast_AsEmote_Radial_Entry;           // 0x0068(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3149[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_EmotesMenu_RadialEntry_C*           K2Node_DynamicCast_AsBP_Emotes_Menu_Radial_Entry;  // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_314A[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_1;                              // 0x0088(0x0018)()
	bool                                          Temp_bool_Variable;                                // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_314B[0x7];                                     // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x00A8(0x0018)()
};
static_assert(alignof(EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget) == 0x000008, "Wrong alignment on EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget");
static_assert(sizeof(EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget) == 0x0000C0, "Wrong size on EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget");
static_assert(offsetof(EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget, EntryPoint) == 0x000000, "Member 'EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget::EntryPoint' has a wrong offset!");
static_assert(offsetof(EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget, K2Node_Event_MyGeometry) == 0x000004, "Member 'EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget, CallFunc_GetHoverWidget_HoverWidget) == 0x000040, "Member 'EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget::CallFunc_GetHoverWidget_HoverWidget' has a wrong offset!");
static_assert(offsetof(EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget, CallFunc_IsValid_ReturnValue_1) == 0x000049, "Member 'EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget, Temp_text_Variable) == 0x000050, "Member 'EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget, K2Node_DynamicCast_AsEmote_Radial_Entry) == 0x000068, "Member 'EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget::K2Node_DynamicCast_AsEmote_Radial_Entry' has a wrong offset!");
static_assert(offsetof(EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget, K2Node_DynamicCast_AsBP_Emotes_Menu_Radial_Entry) == 0x000078, "Member 'EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget::K2Node_DynamicCast_AsBP_Emotes_Menu_Radial_Entry' has a wrong offset!");
static_assert(offsetof(EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget, K2Node_DynamicCast_bSuccess_1) == 0x000080, "Member 'EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget, Temp_text_Variable_1) == 0x000088, "Member 'EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget, Temp_bool_Variable) == 0x0000A0, "Member 'EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget, K2Node_Select_Default) == 0x0000A8, "Member 'EmoteCenterWidget_C_ExecuteUbergraph_EmoteCenterWidget::K2Node_Select_Default' has a wrong offset!");

// Function EmoteCenterWidget.EmoteCenterWidget_C.Tick
// 0x003C (0x003C - 0x0000)
struct EmoteCenterWidget_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(EmoteCenterWidget_C_Tick) == 0x000004, "Wrong alignment on EmoteCenterWidget_C_Tick");
static_assert(sizeof(EmoteCenterWidget_C_Tick) == 0x00003C, "Wrong size on EmoteCenterWidget_C_Tick");
static_assert(offsetof(EmoteCenterWidget_C_Tick, MyGeometry) == 0x000000, "Member 'EmoteCenterWidget_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(EmoteCenterWidget_C_Tick, InDeltaTime) == 0x000038, "Member 'EmoteCenterWidget_C_Tick::InDeltaTime' has a wrong offset!");

// Function EmoteCenterWidget.EmoteCenterWidget_C.GetCenterText
// 0x0040 (0x0040 - 0x0000)
struct EmoteCenterWidget_C_GetCenterText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_314C[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQRadialButton*                        CallFunc_GetHoverWidget_HoverWidget;               // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetWidgetText_DisplayText;                // 0x0028(0x0018)()
};
static_assert(alignof(EmoteCenterWidget_C_GetCenterText) == 0x000008, "Wrong alignment on EmoteCenterWidget_C_GetCenterText");
static_assert(sizeof(EmoteCenterWidget_C_GetCenterText) == 0x000040, "Wrong size on EmoteCenterWidget_C_GetCenterText");
static_assert(offsetof(EmoteCenterWidget_C_GetCenterText, ReturnValue) == 0x000000, "Member 'EmoteCenterWidget_C_GetCenterText::ReturnValue' has a wrong offset!");
static_assert(offsetof(EmoteCenterWidget_C_GetCenterText, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'EmoteCenterWidget_C_GetCenterText::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(EmoteCenterWidget_C_GetCenterText, CallFunc_GetHoverWidget_HoverWidget) == 0x000020, "Member 'EmoteCenterWidget_C_GetCenterText::CallFunc_GetHoverWidget_HoverWidget' has a wrong offset!");
static_assert(offsetof(EmoteCenterWidget_C_GetCenterText, CallFunc_GetWidgetText_DisplayText) == 0x000028, "Member 'EmoteCenterWidget_C_GetCenterText::CallFunc_GetWidgetText_DisplayText' has a wrong offset!");

// Function EmoteCenterWidget.EmoteCenterWidget_C.GetWidgetText
// 0x0080 (0x0080 - 0x0000)
struct EmoteCenterWidget_C_GetWidgetText final
{
public:
	class USQRadialButton*                        Widget;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   DisplayText;                                       // 0x0008(0x0018)(Parm, OutParm)
	class URadialItem_Deployable_C*               K2Node_DynamicCast_AsRadial_Item_Deployable;       // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_314D[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UIconRadialEntry_C*                     K2Node_DynamicCast_AsIcon_Radial_Entry;            // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_314E[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarkerRadialEntry_C*                   K2Node_DynamicCast_AsMarker_Radial_Entry;          // 0x0040(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_314F[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UIconRadialGotoEntry_C*                 K2Node_DynamicCast_AsIcon_Radial_Goto_Entry;       // 0x0050(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3150[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlaceMarkerActionModel_C*           K2Node_DynamicCast_AsBP_Place_Marker_Action_Model; // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3151[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GotoMenuActionModel_C*              K2Node_DynamicCast_AsBP_Goto_Menu_Action_Model;    // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(EmoteCenterWidget_C_GetWidgetText) == 0x000008, "Wrong alignment on EmoteCenterWidget_C_GetWidgetText");
static_assert(sizeof(EmoteCenterWidget_C_GetWidgetText) == 0x000080, "Wrong size on EmoteCenterWidget_C_GetWidgetText");
static_assert(offsetof(EmoteCenterWidget_C_GetWidgetText, Widget) == 0x000000, "Member 'EmoteCenterWidget_C_GetWidgetText::Widget' has a wrong offset!");
static_assert(offsetof(EmoteCenterWidget_C_GetWidgetText, DisplayText) == 0x000008, "Member 'EmoteCenterWidget_C_GetWidgetText::DisplayText' has a wrong offset!");
static_assert(offsetof(EmoteCenterWidget_C_GetWidgetText, K2Node_DynamicCast_AsRadial_Item_Deployable) == 0x000020, "Member 'EmoteCenterWidget_C_GetWidgetText::K2Node_DynamicCast_AsRadial_Item_Deployable' has a wrong offset!");
static_assert(offsetof(EmoteCenterWidget_C_GetWidgetText, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'EmoteCenterWidget_C_GetWidgetText::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(EmoteCenterWidget_C_GetWidgetText, K2Node_DynamicCast_AsIcon_Radial_Entry) == 0x000030, "Member 'EmoteCenterWidget_C_GetWidgetText::K2Node_DynamicCast_AsIcon_Radial_Entry' has a wrong offset!");
static_assert(offsetof(EmoteCenterWidget_C_GetWidgetText, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'EmoteCenterWidget_C_GetWidgetText::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(EmoteCenterWidget_C_GetWidgetText, K2Node_DynamicCast_AsMarker_Radial_Entry) == 0x000040, "Member 'EmoteCenterWidget_C_GetWidgetText::K2Node_DynamicCast_AsMarker_Radial_Entry' has a wrong offset!");
static_assert(offsetof(EmoteCenterWidget_C_GetWidgetText, K2Node_DynamicCast_bSuccess_2) == 0x000048, "Member 'EmoteCenterWidget_C_GetWidgetText::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(EmoteCenterWidget_C_GetWidgetText, K2Node_DynamicCast_AsIcon_Radial_Goto_Entry) == 0x000050, "Member 'EmoteCenterWidget_C_GetWidgetText::K2Node_DynamicCast_AsIcon_Radial_Goto_Entry' has a wrong offset!");
static_assert(offsetof(EmoteCenterWidget_C_GetWidgetText, K2Node_DynamicCast_bSuccess_3) == 0x000058, "Member 'EmoteCenterWidget_C_GetWidgetText::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(EmoteCenterWidget_C_GetWidgetText, K2Node_DynamicCast_AsBP_Place_Marker_Action_Model) == 0x000060, "Member 'EmoteCenterWidget_C_GetWidgetText::K2Node_DynamicCast_AsBP_Place_Marker_Action_Model' has a wrong offset!");
static_assert(offsetof(EmoteCenterWidget_C_GetWidgetText, K2Node_DynamicCast_bSuccess_4) == 0x000068, "Member 'EmoteCenterWidget_C_GetWidgetText::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(EmoteCenterWidget_C_GetWidgetText, K2Node_DynamicCast_AsBP_Goto_Menu_Action_Model) == 0x000070, "Member 'EmoteCenterWidget_C_GetWidgetText::K2Node_DynamicCast_AsBP_Goto_Menu_Action_Model' has a wrong offset!");
static_assert(offsetof(EmoteCenterWidget_C_GetWidgetText, K2Node_DynamicCast_bSuccess_5) == 0x000078, "Member 'EmoteCenterWidget_C_GetWidgetText::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");

}

