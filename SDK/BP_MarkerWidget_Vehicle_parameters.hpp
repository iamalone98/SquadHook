#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MarkerWidget_Vehicle

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_MarkerWidget_Vehicle.BP_MarkerWidget_Vehicle_C.ExecuteUbergraph_BP_MarkerWidget_Vehicle
// 0x0090 (0x0090 - 0x0000)
struct BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E49[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0020(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E4A[0x4];                                     // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimerDelegate_ReturnValue;          // 0x0060(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldMarkerUpdate_ReturnValue;           // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E4B[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E4C[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQPlayerController*                    K2Node_DynamicCast_AsSQPlayer_Controller;          // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle) == 0x000008, "Wrong alignment on BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle");
static_assert(sizeof(BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle) == 0x000090, "Wrong size on BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle, EntryPoint) == 0x000000, "Member 'BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle, Temp_bool_Variable) == 0x000004, "Member 'BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle, Temp_int_Variable) == 0x000018, "Member 'BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle, Temp_int_Variable_1) == 0x00001C, "Member 'BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle, K2Node_Event_MyGeometry) == 0x000020, "Member 'BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle, K2Node_Event_InDeltaTime) == 0x000058, "Member 'BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle, CallFunc_K2_SetTimerDelegate_ReturnValue) == 0x000060, "Member 'BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle::CallFunc_K2_SetTimerDelegate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle, CallFunc_ShouldMarkerUpdate_ReturnValue) == 0x000068, "Member 'BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle::CallFunc_ShouldMarkerUpdate_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle, CallFunc_GetOwningPlayer_ReturnValue) == 0x000070, "Member 'BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle, K2Node_Select_Default) == 0x000078, "Member 'BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle, K2Node_DynamicCast_AsSQPlayer_Controller) == 0x000080, "Member 'BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle::K2Node_DynamicCast_AsSQPlayer_Controller' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle, K2Node_DynamicCast_bSuccess) == 0x000088, "Member 'BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle, CallFunc_IsValid_ReturnValue) == 0x000089, "Member 'BP_MarkerWidget_Vehicle_C_ExecuteUbergraph_BP_MarkerWidget_Vehicle::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_MarkerWidget_Vehicle.BP_MarkerWidget_Vehicle_C.Tick
// 0x003C (0x003C - 0x0000)
struct BP_MarkerWidget_Vehicle_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MarkerWidget_Vehicle_C_Tick) == 0x000004, "Wrong alignment on BP_MarkerWidget_Vehicle_C_Tick");
static_assert(sizeof(BP_MarkerWidget_Vehicle_C_Tick) == 0x00003C, "Wrong size on BP_MarkerWidget_Vehicle_C_Tick");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Tick, MyGeometry) == 0x000000, "Member 'BP_MarkerWidget_Vehicle_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Tick, InDeltaTime) == 0x000038, "Member 'BP_MarkerWidget_Vehicle_C_Tick::InDeltaTime' has a wrong offset!");

// Function BP_MarkerWidget_Vehicle.BP_MarkerWidget_Vehicle_C.UpdateVehicleBrush
// 0x0158 (0x0158 - 0x0000)
struct BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_2;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_3;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVehicleEmpty_Empty;                     // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E4D[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetSquadColor_ReturnValue;                // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetNeutralColor_ReturnValue;              // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetFriendlyColor_ReturnValue;             // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetEnemyColor_ReturnValue;                // 0x0044(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNeutralTeam_IsNeutralTeam;              // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E4E[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E4F[0x3];                                     // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default_1;                           // 0x006C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E50[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               CallFunc_GetVehicleIcon_NewParam;                  // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_2;                           // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_3;                           // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x00A8(0x0028)()
	struct FSlateBrush                            K2Node_MakeStruct_SlateBrush;                      // 0x00D0(0x0088)()
};
static_assert(alignof(BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush) == 0x000008, "Wrong alignment on BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush");
static_assert(sizeof(BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush) == 0x000158, "Wrong size on BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush, Temp_bool_Variable) == 0x000000, "Member 'BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush, Temp_bool_Variable_1) == 0x000001, "Member 'BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush, Temp_bool_Variable_2) == 0x000002, "Member 'BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush, Temp_bool_Variable_3) == 0x000003, "Member 'BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush, CallFunc_SelectFloat_ReturnValue) == 0x000004, "Member 'BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000008, "Member 'BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush, CallFunc_IsVehicleEmpty_Empty) == 0x000010, "Member 'BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush::CallFunc_IsVehicleEmpty_Empty' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush, CallFunc_GetSquadColor_ReturnValue) == 0x000014, "Member 'BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush::CallFunc_GetSquadColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush, CallFunc_GetNeutralColor_ReturnValue) == 0x000024, "Member 'BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush::CallFunc_GetNeutralColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush, CallFunc_GetFriendlyColor_ReturnValue) == 0x000034, "Member 'BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush::CallFunc_GetFriendlyColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush, CallFunc_GetEnemyColor_ReturnValue) == 0x000044, "Member 'BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush::CallFunc_GetEnemyColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush, CallFunc_IsNeutralTeam_IsNeutralTeam) == 0x000054, "Member 'BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush::CallFunc_IsNeutralTeam_IsNeutralTeam' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush, K2Node_Select_Default) == 0x000058, "Member 'BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush, CallFunc_BooleanOR_ReturnValue) == 0x000068, "Member 'BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush, K2Node_Select_Default_1) == 0x00006C, "Member 'BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush, CallFunc_GetVehicleIcon_NewParam) == 0x000080, "Member 'BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush::CallFunc_GetVehicleIcon_NewParam' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush, K2Node_Select_Default_2) == 0x000088, "Member 'BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush, K2Node_Select_Default_3) == 0x000098, "Member 'BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush, K2Node_MakeStruct_SlateColor) == 0x0000A8, "Member 'BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush, K2Node_MakeStruct_SlateBrush) == 0x0000D0, "Member 'BP_MarkerWidget_Vehicle_C_UpdateVehicleBrush::K2Node_MakeStruct_SlateBrush' has a wrong offset!");

// Function BP_MarkerWidget_Vehicle.BP_MarkerWidget_Vehicle_C.GetVehicleIcon
// 0x0020 (0x0020 - 0x0000)
struct BP_MarkerWidget_Vehicle_C_GetVehicleIcon final
{
public:
	class UTexture*                               NewParam;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E51[0x7];                                     // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQMapIconComponent*                    K2Node_DynamicCast_AsSQMap_Icon_Component;         // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MarkerWidget_Vehicle_C_GetVehicleIcon) == 0x000008, "Wrong alignment on BP_MarkerWidget_Vehicle_C_GetVehicleIcon");
static_assert(sizeof(BP_MarkerWidget_Vehicle_C_GetVehicleIcon) == 0x000020, "Wrong size on BP_MarkerWidget_Vehicle_C_GetVehicleIcon");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_GetVehicleIcon, NewParam) == 0x000000, "Member 'BP_MarkerWidget_Vehicle_C_GetVehicleIcon::NewParam' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_GetVehicleIcon, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_MarkerWidget_Vehicle_C_GetVehicleIcon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_GetVehicleIcon, K2Node_DynamicCast_AsSQMap_Icon_Component) == 0x000010, "Member 'BP_MarkerWidget_Vehicle_C_GetVehicleIcon::K2Node_DynamicCast_AsSQMap_Icon_Component' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_GetVehicleIcon, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_MarkerWidget_Vehicle_C_GetVehicleIcon::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_MarkerWidget_Vehicle.BP_MarkerWidget_Vehicle_C.IsNeutralTeam
// 0x0005 (0x0005 - 0x0000)
struct BP_MarkerWidget_Vehicle_C_IsNeutralTeam final
{
public:
	bool                                          Param_IsNeutralTeam;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MarkerWidget_Vehicle_C_IsNeutralTeam) == 0x000001, "Wrong alignment on BP_MarkerWidget_Vehicle_C_IsNeutralTeam");
static_assert(sizeof(BP_MarkerWidget_Vehicle_C_IsNeutralTeam) == 0x000005, "Wrong size on BP_MarkerWidget_Vehicle_C_IsNeutralTeam");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsNeutralTeam, Param_IsNeutralTeam) == 0x000000, "Member 'BP_MarkerWidget_Vehicle_C_IsNeutralTeam::Param_IsNeutralTeam' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsNeutralTeam, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_MarkerWidget_Vehicle_C_IsNeutralTeam::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsNeutralTeam, CallFunc_Conv_IntToByte_ReturnValue) == 0x000002, "Member 'BP_MarkerWidget_Vehicle_C_IsNeutralTeam::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsNeutralTeam, CallFunc_GetValidValue_ReturnValue) == 0x000003, "Member 'BP_MarkerWidget_Vehicle_C_IsNeutralTeam::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsNeutralTeam, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000004, "Member 'BP_MarkerWidget_Vehicle_C_IsNeutralTeam::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_MarkerWidget_Vehicle.BP_MarkerWidget_Vehicle_C.IsSameTeam
// 0x0048 (0x0048 - 0x0000)
struct BP_MarkerWidget_Vehicle_C_IsSameTeam final
{
public:
	bool                                          SameTeam;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E52[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E53[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  K2Node_DynamicCast_AsPawn;                         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E54[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQPlayerState*                         K2Node_DynamicCast_AsSQPlayer_State;               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E55[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQTeamState*                           CallFunc_GetTeamState_ReturnValue;                 // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MarkerWidget_Vehicle_C_IsSameTeam) == 0x000008, "Wrong alignment on BP_MarkerWidget_Vehicle_C_IsSameTeam");
static_assert(sizeof(BP_MarkerWidget_Vehicle_C_IsSameTeam) == 0x000048, "Wrong size on BP_MarkerWidget_Vehicle_C_IsSameTeam");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsSameTeam, SameTeam) == 0x000000, "Member 'BP_MarkerWidget_Vehicle_C_IsSameTeam::SameTeam' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsSameTeam, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_MarkerWidget_Vehicle_C_IsSameTeam::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsSameTeam, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_MarkerWidget_Vehicle_C_IsSameTeam::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsSameTeam, K2Node_DynamicCast_AsPawn) == 0x000018, "Member 'BP_MarkerWidget_Vehicle_C_IsSameTeam::K2Node_DynamicCast_AsPawn' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsSameTeam, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_MarkerWidget_Vehicle_C_IsSameTeam::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsSameTeam, K2Node_DynamicCast_AsSQPlayer_State) == 0x000028, "Member 'BP_MarkerWidget_Vehicle_C_IsSameTeam::K2Node_DynamicCast_AsSQPlayer_State' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsSameTeam, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'BP_MarkerWidget_Vehicle_C_IsSameTeam::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsSameTeam, CallFunc_GetTeamState_ReturnValue) == 0x000038, "Member 'BP_MarkerWidget_Vehicle_C_IsSameTeam::CallFunc_GetTeamState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsSameTeam, CallFunc_IsValid_ReturnValue_1) == 0x000040, "Member 'BP_MarkerWidget_Vehicle_C_IsSameTeam::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsSameTeam, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000041, "Member 'BP_MarkerWidget_Vehicle_C_IsSameTeam::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsSameTeam, CallFunc_BooleanAND_ReturnValue) == 0x000042, "Member 'BP_MarkerWidget_Vehicle_C_IsSameTeam::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_MarkerWidget_Vehicle.BP_MarkerWidget_Vehicle_C.IsSameSquad
// 0x0050 (0x0050 - 0x0000)
struct BP_MarkerWidget_Vehicle_C_IsSameSquad final
{
public:
	bool                                          SquadVehicle;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSameTeam_SameTeam;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E56[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASQPlayerState*                         K2Node_DynamicCast_AsSQPlayer_State;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E57[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQVehicle*                             CallFunc_GetVehicle_Vehicle;                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASQSquadState*                          CallFunc_GetSquadState_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E58[0x6];                                     // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USQVehicleSeatComponent*                CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASQSquadState*                          CallFunc_GetSquadState_ReturnValue_1;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MarkerWidget_Vehicle_C_IsSameSquad) == 0x000008, "Wrong alignment on BP_MarkerWidget_Vehicle_C_IsSameSquad");
static_assert(sizeof(BP_MarkerWidget_Vehicle_C_IsSameSquad) == 0x000050, "Wrong size on BP_MarkerWidget_Vehicle_C_IsSameSquad");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsSameSquad, SquadVehicle) == 0x000000, "Member 'BP_MarkerWidget_Vehicle_C_IsSameSquad::SquadVehicle' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsSameSquad, CallFunc_IsSameTeam_SameTeam) == 0x000001, "Member 'BP_MarkerWidget_Vehicle_C_IsSameSquad::CallFunc_IsSameTeam_SameTeam' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsSameSquad, CallFunc_GetOwningPlayer_ReturnValue) == 0x000008, "Member 'BP_MarkerWidget_Vehicle_C_IsSameSquad::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsSameSquad, K2Node_DynamicCast_AsSQPlayer_State) == 0x000010, "Member 'BP_MarkerWidget_Vehicle_C_IsSameSquad::K2Node_DynamicCast_AsSQPlayer_State' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsSameSquad, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_MarkerWidget_Vehicle_C_IsSameSquad::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsSameSquad, CallFunc_GetVehicle_Vehicle) == 0x000020, "Member 'BP_MarkerWidget_Vehicle_C_IsSameSquad::CallFunc_GetVehicle_Vehicle' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsSameSquad, CallFunc_GetSquadState_ReturnValue) == 0x000028, "Member 'BP_MarkerWidget_Vehicle_C_IsSameSquad::CallFunc_GetSquadState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsSameSquad, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BP_MarkerWidget_Vehicle_C_IsSameSquad::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsSameSquad, CallFunc_IsValid_ReturnValue_1) == 0x000031, "Member 'BP_MarkerWidget_Vehicle_C_IsSameSquad::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsSameSquad, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_MarkerWidget_Vehicle_C_IsSameSquad::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsSameSquad, CallFunc_GetSquadState_ReturnValue_1) == 0x000040, "Member 'BP_MarkerWidget_Vehicle_C_IsSameSquad::CallFunc_GetSquadState_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsSameSquad, CallFunc_IsValid_ReturnValue_2) == 0x000048, "Member 'BP_MarkerWidget_Vehicle_C_IsSameSquad::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsSameSquad, CallFunc_IsValid_ReturnValue_3) == 0x000049, "Member 'BP_MarkerWidget_Vehicle_C_IsSameSquad::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsSameSquad, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00004A, "Member 'BP_MarkerWidget_Vehicle_C_IsSameSquad::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_MarkerWidget_Vehicle.BP_MarkerWidget_Vehicle_C.GetVehicle
// 0x0028 (0x0028 - 0x0000)
struct BP_MarkerWidget_Vehicle_C_GetVehicle final
{
public:
	class ASQVehicle*                             Vehicle;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E59[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQVehicle*                             K2Node_DynamicCast_AsSQVehicle;                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MarkerWidget_Vehicle_C_GetVehicle) == 0x000008, "Wrong alignment on BP_MarkerWidget_Vehicle_C_GetVehicle");
static_assert(sizeof(BP_MarkerWidget_Vehicle_C_GetVehicle) == 0x000028, "Wrong size on BP_MarkerWidget_Vehicle_C_GetVehicle");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_GetVehicle, Vehicle) == 0x000000, "Member 'BP_MarkerWidget_Vehicle_C_GetVehicle::Vehicle' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_GetVehicle, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_MarkerWidget_Vehicle_C_GetVehicle::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_GetVehicle, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_MarkerWidget_Vehicle_C_GetVehicle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_GetVehicle, K2Node_DynamicCast_AsSQVehicle) == 0x000018, "Member 'BP_MarkerWidget_Vehicle_C_GetVehicle::K2Node_DynamicCast_AsSQVehicle' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_GetVehicle, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_MarkerWidget_Vehicle_C_GetVehicle::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_MarkerWidget_Vehicle.BP_MarkerWidget_Vehicle_C.IsVehicleEmpty
// 0x0018 (0x0018 - 0x0000)
struct BP_MarkerWidget_Vehicle_C_IsVehicleEmpty final
{
public:
	bool                                          Empty;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E5A[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQVehicle*                             CallFunc_GetVehicle_Vehicle;                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsVehicleEmpty_ReturnValue;               // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MarkerWidget_Vehicle_C_IsVehicleEmpty) == 0x000008, "Wrong alignment on BP_MarkerWidget_Vehicle_C_IsVehicleEmpty");
static_assert(sizeof(BP_MarkerWidget_Vehicle_C_IsVehicleEmpty) == 0x000018, "Wrong size on BP_MarkerWidget_Vehicle_C_IsVehicleEmpty");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsVehicleEmpty, Empty) == 0x000000, "Member 'BP_MarkerWidget_Vehicle_C_IsVehicleEmpty::Empty' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsVehicleEmpty, CallFunc_GetVehicle_Vehicle) == 0x000008, "Member 'BP_MarkerWidget_Vehicle_C_IsVehicleEmpty::CallFunc_GetVehicle_Vehicle' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsVehicleEmpty, CallFunc_IsVehicleEmpty_ReturnValue) == 0x000010, "Member 'BP_MarkerWidget_Vehicle_C_IsVehicleEmpty::CallFunc_IsVehicleEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsVehicleEmpty, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'BP_MarkerWidget_Vehicle_C_IsVehicleEmpty::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_MarkerWidget_Vehicle.BP_MarkerWidget_Vehicle_C.UpdateVehicleConeVisbility
// 0x0005 (0x0005 - 0x0000)
struct BP_MarkerWidget_Vehicle_C_UpdateVehicleConeVisbility final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInVehicle_InVehicle;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MarkerWidget_Vehicle_C_UpdateVehicleConeVisbility) == 0x000001, "Wrong alignment on BP_MarkerWidget_Vehicle_C_UpdateVehicleConeVisbility");
static_assert(sizeof(BP_MarkerWidget_Vehicle_C_UpdateVehicleConeVisbility) == 0x000005, "Wrong size on BP_MarkerWidget_Vehicle_C_UpdateVehicleConeVisbility");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateVehicleConeVisbility, Temp_bool_Variable) == 0x000000, "Member 'BP_MarkerWidget_Vehicle_C_UpdateVehicleConeVisbility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateVehicleConeVisbility, Temp_byte_Variable) == 0x000001, "Member 'BP_MarkerWidget_Vehicle_C_UpdateVehicleConeVisbility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateVehicleConeVisbility, Temp_byte_Variable_1) == 0x000002, "Member 'BP_MarkerWidget_Vehicle_C_UpdateVehicleConeVisbility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateVehicleConeVisbility, CallFunc_IsInVehicle_InVehicle) == 0x000003, "Member 'BP_MarkerWidget_Vehicle_C_UpdateVehicleConeVisbility::CallFunc_IsInVehicle_InVehicle' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateVehicleConeVisbility, K2Node_Select_Default) == 0x000004, "Member 'BP_MarkerWidget_Vehicle_C_UpdateVehicleConeVisbility::K2Node_Select_Default' has a wrong offset!");

// Function BP_MarkerWidget_Vehicle.BP_MarkerWidget_Vehicle_C.IsInVehicle
// 0x0048 (0x0048 - 0x0000)
struct BP_MarkerWidget_Vehicle_C_IsInVehicle final
{
public:
	bool                                          InVehicle;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E5B[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQVehicle*                             CallFunc_GetVehicle_Vehicle;                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASQPlayerState*                         K2Node_DynamicCast_AsSQPlayer_State;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E5C[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQSoldier*                             CallFunc_GetSoldier_ReturnValue;                   // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E5D[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQVehicle*                             CallFunc_GetCurrentVehicle_ReturnValue;            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MarkerWidget_Vehicle_C_IsInVehicle) == 0x000008, "Wrong alignment on BP_MarkerWidget_Vehicle_C_IsInVehicle");
static_assert(sizeof(BP_MarkerWidget_Vehicle_C_IsInVehicle) == 0x000048, "Wrong size on BP_MarkerWidget_Vehicle_C_IsInVehicle");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsInVehicle, InVehicle) == 0x000000, "Member 'BP_MarkerWidget_Vehicle_C_IsInVehicle::InVehicle' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsInVehicle, CallFunc_GetVehicle_Vehicle) == 0x000008, "Member 'BP_MarkerWidget_Vehicle_C_IsInVehicle::CallFunc_GetVehicle_Vehicle' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsInVehicle, CallFunc_GetOwningPlayer_ReturnValue) == 0x000010, "Member 'BP_MarkerWidget_Vehicle_C_IsInVehicle::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsInVehicle, K2Node_DynamicCast_AsSQPlayer_State) == 0x000018, "Member 'BP_MarkerWidget_Vehicle_C_IsInVehicle::K2Node_DynamicCast_AsSQPlayer_State' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsInVehicle, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_MarkerWidget_Vehicle_C_IsInVehicle::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsInVehicle, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'BP_MarkerWidget_Vehicle_C_IsInVehicle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsInVehicle, CallFunc_GetSoldier_ReturnValue) == 0x000028, "Member 'BP_MarkerWidget_Vehicle_C_IsInVehicle::CallFunc_GetSoldier_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsInVehicle, CallFunc_IsValid_ReturnValue_1) == 0x000030, "Member 'BP_MarkerWidget_Vehicle_C_IsInVehicle::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsInVehicle, CallFunc_GetCurrentVehicle_ReturnValue) == 0x000038, "Member 'BP_MarkerWidget_Vehicle_C_IsInVehicle::CallFunc_GetCurrentVehicle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsInVehicle, CallFunc_IsValid_ReturnValue_2) == 0x000040, "Member 'BP_MarkerWidget_Vehicle_C_IsInVehicle::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsInVehicle, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000041, "Member 'BP_MarkerWidget_Vehicle_C_IsInVehicle::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BP_MarkerWidget_Vehicle.BP_MarkerWidget_Vehicle_C.UpdateAngles
// 0x0058 (0x0058 - 0x0000)
struct BP_MarkerWidget_Vehicle_C_UpdateAngles final
{
public:
	class ASQVehicle*                             CallFunc_GetVehicle_Vehicle;                       // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E5E[0x2];                                     // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E5F[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue;            // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInVehicle_InVehicle;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E60[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MarkerWidget_Vehicle_C_UpdateAngles) == 0x000008, "Wrong alignment on BP_MarkerWidget_Vehicle_C_UpdateAngles");
static_assert(sizeof(BP_MarkerWidget_Vehicle_C_UpdateAngles) == 0x000058, "Wrong size on BP_MarkerWidget_Vehicle_C_UpdateAngles");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateAngles, CallFunc_GetVehicle_Vehicle) == 0x000000, "Member 'BP_MarkerWidget_Vehicle_C_UpdateAngles::CallFunc_GetVehicle_Vehicle' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateAngles, CallFunc_GetOwningPlayer_ReturnValue) == 0x000008, "Member 'BP_MarkerWidget_Vehicle_C_UpdateAngles::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateAngles, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_MarkerWidget_Vehicle_C_UpdateAngles::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateAngles, CallFunc_IsValid_ReturnValue_1) == 0x000011, "Member 'BP_MarkerWidget_Vehicle_C_UpdateAngles::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateAngles, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000014, "Member 'BP_MarkerWidget_Vehicle_C_UpdateAngles::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateAngles, CallFunc_IsValid_ReturnValue_2) == 0x000020, "Member 'BP_MarkerWidget_Vehicle_C_UpdateAngles::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateAngles, CallFunc_BreakRotator_Roll) == 0x000024, "Member 'BP_MarkerWidget_Vehicle_C_UpdateAngles::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateAngles, CallFunc_BreakRotator_Pitch) == 0x000028, "Member 'BP_MarkerWidget_Vehicle_C_UpdateAngles::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateAngles, CallFunc_BreakRotator_Yaw) == 0x00002C, "Member 'BP_MarkerWidget_Vehicle_C_UpdateAngles::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateAngles, CallFunc_Add_FloatFloat_ReturnValue) == 0x000030, "Member 'BP_MarkerWidget_Vehicle_C_UpdateAngles::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateAngles, CallFunc_GetCameraRotation_ReturnValue) == 0x000034, "Member 'BP_MarkerWidget_Vehicle_C_UpdateAngles::CallFunc_GetCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateAngles, CallFunc_IsInVehicle_InVehicle) == 0x000040, "Member 'BP_MarkerWidget_Vehicle_C_UpdateAngles::CallFunc_IsInVehicle_InVehicle' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateAngles, CallFunc_BreakRotator_Roll_1) == 0x000044, "Member 'BP_MarkerWidget_Vehicle_C_UpdateAngles::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateAngles, CallFunc_BreakRotator_Pitch_1) == 0x000048, "Member 'BP_MarkerWidget_Vehicle_C_UpdateAngles::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateAngles, CallFunc_BreakRotator_Yaw_1) == 0x00004C, "Member 'BP_MarkerWidget_Vehicle_C_UpdateAngles::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateAngles, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000050, "Member 'BP_MarkerWidget_Vehicle_C_UpdateAngles::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function BP_MarkerWidget_Vehicle.BP_MarkerWidget_Vehicle_C.IsLocalInDriverSeat
// 0x0030 (0x0030 - 0x0000)
struct BP_MarkerWidget_Vehicle_C_IsLocalInDriverSeat final
{
public:
	bool                                          Driver;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E61[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQVehicle*                             CallFunc_GetVehicle_Vehicle;                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USQVehicleSeatComponent*                CallFunc_GetLocalSeat_Seat;                        // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E62[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USQVehicleSeatComponent*                CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInVehicle_InVehicle;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MarkerWidget_Vehicle_C_IsLocalInDriverSeat) == 0x000008, "Wrong alignment on BP_MarkerWidget_Vehicle_C_IsLocalInDriverSeat");
static_assert(sizeof(BP_MarkerWidget_Vehicle_C_IsLocalInDriverSeat) == 0x000030, "Wrong size on BP_MarkerWidget_Vehicle_C_IsLocalInDriverSeat");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsLocalInDriverSeat, Driver) == 0x000000, "Member 'BP_MarkerWidget_Vehicle_C_IsLocalInDriverSeat::Driver' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsLocalInDriverSeat, CallFunc_GetVehicle_Vehicle) == 0x000008, "Member 'BP_MarkerWidget_Vehicle_C_IsLocalInDriverSeat::CallFunc_GetVehicle_Vehicle' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsLocalInDriverSeat, CallFunc_GetLocalSeat_Seat) == 0x000010, "Member 'BP_MarkerWidget_Vehicle_C_IsLocalInDriverSeat::CallFunc_GetLocalSeat_Seat' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsLocalInDriverSeat, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_MarkerWidget_Vehicle_C_IsLocalInDriverSeat::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsLocalInDriverSeat, CallFunc_IsValid_ReturnValue_1) == 0x000019, "Member 'BP_MarkerWidget_Vehicle_C_IsLocalInDriverSeat::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsLocalInDriverSeat, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_MarkerWidget_Vehicle_C_IsLocalInDriverSeat::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsLocalInDriverSeat, CallFunc_IsInVehicle_InVehicle) == 0x000028, "Member 'BP_MarkerWidget_Vehicle_C_IsLocalInDriverSeat::CallFunc_IsInVehicle_InVehicle' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsLocalInDriverSeat, CallFunc_IsValid_ReturnValue_2) == 0x000029, "Member 'BP_MarkerWidget_Vehicle_C_IsLocalInDriverSeat::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_IsLocalInDriverSeat, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00002A, "Member 'BP_MarkerWidget_Vehicle_C_IsLocalInDriverSeat::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BP_MarkerWidget_Vehicle.BP_MarkerWidget_Vehicle_C.GetLocalSeat
// 0x0038 (0x0038 - 0x0000)
struct BP_MarkerWidget_Vehicle_C_GetLocalSeat final
{
public:
	class USQVehicleSeatComponent*                Seat;                                              // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASQPlayerState*                         K2Node_DynamicCast_AsSQPlayer_State;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E63[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQSoldier*                             CallFunc_GetSoldier_ReturnValue;                   // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USQVehicleSeatComponent*                CallFunc_GetCurrentSeat_ReturnValue;               // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MarkerWidget_Vehicle_C_GetLocalSeat) == 0x000008, "Wrong alignment on BP_MarkerWidget_Vehicle_C_GetLocalSeat");
static_assert(sizeof(BP_MarkerWidget_Vehicle_C_GetLocalSeat) == 0x000038, "Wrong size on BP_MarkerWidget_Vehicle_C_GetLocalSeat");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_GetLocalSeat, Seat) == 0x000000, "Member 'BP_MarkerWidget_Vehicle_C_GetLocalSeat::Seat' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_GetLocalSeat, CallFunc_GetOwningPlayer_ReturnValue) == 0x000008, "Member 'BP_MarkerWidget_Vehicle_C_GetLocalSeat::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_GetLocalSeat, K2Node_DynamicCast_AsSQPlayer_State) == 0x000010, "Member 'BP_MarkerWidget_Vehicle_C_GetLocalSeat::K2Node_DynamicCast_AsSQPlayer_State' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_GetLocalSeat, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_MarkerWidget_Vehicle_C_GetLocalSeat::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_GetLocalSeat, CallFunc_GetSoldier_ReturnValue) == 0x000020, "Member 'BP_MarkerWidget_Vehicle_C_GetLocalSeat::CallFunc_GetSoldier_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_GetLocalSeat, CallFunc_GetCurrentSeat_ReturnValue) == 0x000028, "Member 'BP_MarkerWidget_Vehicle_C_GetLocalSeat::CallFunc_GetCurrentSeat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_GetLocalSeat, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'BP_MarkerWidget_Vehicle_C_GetLocalSeat::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_MarkerWidget_Vehicle.BP_MarkerWidget_Vehicle_C.Get Claimed By
// 0x0020 (0x0020 - 0x0000)
struct BP_MarkerWidget_Vehicle_C_Get_Claimed_By final
{
public:
	bool                                          Is_Claimed;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E64[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Claim_ID;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Has_Same_Team;                                     // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Has_Player;                                        // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E65[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQVehicle*                             CallFunc_GetVehicle_Vehicle;                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MarkerWidget_Vehicle_C_Get_Claimed_By) == 0x000008, "Wrong alignment on BP_MarkerWidget_Vehicle_C_Get_Claimed_By");
static_assert(sizeof(BP_MarkerWidget_Vehicle_C_Get_Claimed_By) == 0x000020, "Wrong size on BP_MarkerWidget_Vehicle_C_Get_Claimed_By");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_Claimed_By, Is_Claimed) == 0x000000, "Member 'BP_MarkerWidget_Vehicle_C_Get_Claimed_By::Is_Claimed' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_Claimed_By, Claim_ID) == 0x000004, "Member 'BP_MarkerWidget_Vehicle_C_Get_Claimed_By::Claim_ID' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_Claimed_By, Has_Same_Team) == 0x000008, "Member 'BP_MarkerWidget_Vehicle_C_Get_Claimed_By::Has_Same_Team' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_Claimed_By, Has_Player) == 0x000009, "Member 'BP_MarkerWidget_Vehicle_C_Get_Claimed_By::Has_Player' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_Claimed_By, CallFunc_GetVehicle_Vehicle) == 0x000010, "Member 'BP_MarkerWidget_Vehicle_C_Get_Claimed_By::CallFunc_GetVehicle_Vehicle' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_Claimed_By, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_MarkerWidget_Vehicle_C_Get_Claimed_By::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_Claimed_By, CallFunc_IsValid_ReturnValue_1) == 0x000019, "Member 'BP_MarkerWidget_Vehicle_C_Get_Claimed_By::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_MarkerWidget_Vehicle.BP_MarkerWidget_Vehicle_C.UpdateSquadInfo
// 0x01F8 (0x01F8 - 0x0000)
struct BP_MarkerWidget_Vehicle_C_UpdateSquadInfo final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E66[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E67[0x3];                                     // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E68[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x003C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_4;                            // 0x004C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E69[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_5;                            // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_6;                            // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E6A[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_7;                            // 0x0084(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0096(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x0097(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                           Temp_struct_Variable_8;                            // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_7;                              // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E6B[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x00B0(0x0018)()
	bool                                          Temp_bool_Variable_8;                              // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_9;                              // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Get_Claimed_By_Is_Claimed;                // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E6C[0x1];                                     // 0x00CB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Get_Claimed_By_Claim_ID;                  // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default;                             // 0x00D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Get_1st_Occupant_Info_Success;            // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Get_1st_Occupant_Info_Leader;             // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Get_1st_Occupant_Info_Same_Squad;         // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E6D[0x5];                                     // 0x00E3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Get_1st_Occupant_Info_ID;                 // 0x00E8(0x0018)()
	struct FLinearColor                           K2Node_Select_Default_1;                           // 0x0100(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E6E[0x3];                                     // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default_2;                           // 0x0114(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_3;                           // 0x0124(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsSameTeam_SameTeam;                      // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E6F[0x3];                                     // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default_4;                           // 0x0138(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_5;                           // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Get_Claimed_By_Is_Claimed_1;              // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E70[0x2];                                     // 0x014A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Get_Claimed_By_Claim_ID_1;                // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0150(0x0018)()
	bool                                          CallFunc_Get_1st_Occupant_Info_Success_1;          // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Get_1st_Occupant_Info_Leader_1;           // 0x0169(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Get_1st_Occupant_Info_Same_Squad_1;       // 0x016A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E71[0x5];                                     // 0x016B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Get_1st_Occupant_Info_ID_1;               // 0x0170(0x0018)()
	class FText                                   K2Node_Select_Default_6;                           // 0x0188(0x0018)()
	bool                                          CallFunc_Get_1st_Occupant_Info_Success_2;          // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Get_1st_Occupant_Info_Leader_2;           // 0x01A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Get_1st_Occupant_Info_Same_Squad_2;       // 0x01A2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E72[0x5];                                     // 0x01A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Get_1st_Occupant_Info_ID_2;               // 0x01A8(0x0018)()
	class FText                                   K2Node_Select_Default_7;                           // 0x01C0(0x0018)()
	struct FLinearColor                           K2Node_Select_Default_8;                           // 0x01D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_9;                           // 0x01E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo) == 0x000008, "Wrong alignment on BP_MarkerWidget_Vehicle_C_UpdateSquadInfo");
static_assert(sizeof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo) == 0x0001F8, "Wrong size on BP_MarkerWidget_Vehicle_C_UpdateSquadInfo");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, Temp_bool_Variable) == 0x000000, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, Temp_struct_Variable) == 0x000004, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, Temp_bool_Variable_1) == 0x000014, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, Temp_struct_Variable_1) == 0x000018, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, Temp_struct_Variable_2) == 0x000028, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, Temp_bool_Variable_2) == 0x000038, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, Temp_struct_Variable_3) == 0x00003C, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, Temp_struct_Variable_4) == 0x00004C, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, Temp_bool_Variable_3) == 0x00005C, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, Temp_struct_Variable_5) == 0x000060, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, Temp_struct_Variable_6) == 0x000070, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, Temp_bool_Variable_4) == 0x000080, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, Temp_struct_Variable_7) == 0x000084, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, Temp_bool_Variable_5) == 0x000094, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, Temp_byte_Variable) == 0x000095, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, Temp_byte_Variable_1) == 0x000096, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, Temp_bool_Variable_6) == 0x000097, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, Temp_struct_Variable_8) == 0x000098, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::Temp_struct_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, Temp_bool_Variable_7) == 0x0000A8, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, Temp_text_Variable) == 0x0000B0, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, Temp_bool_Variable_8) == 0x0000C8, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, Temp_bool_Variable_9) == 0x0000C9, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, CallFunc_Get_Claimed_By_Is_Claimed) == 0x0000CA, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::CallFunc_Get_Claimed_By_Is_Claimed' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, CallFunc_Get_Claimed_By_Claim_ID) == 0x0000CC, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::CallFunc_Get_Claimed_By_Claim_ID' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, K2Node_Select_Default) == 0x0000D0, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, CallFunc_Get_1st_Occupant_Info_Success) == 0x0000E0, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::CallFunc_Get_1st_Occupant_Info_Success' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, CallFunc_Get_1st_Occupant_Info_Leader) == 0x0000E1, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::CallFunc_Get_1st_Occupant_Info_Leader' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, CallFunc_Get_1st_Occupant_Info_Same_Squad) == 0x0000E2, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::CallFunc_Get_1st_Occupant_Info_Same_Squad' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, CallFunc_Get_1st_Occupant_Info_ID) == 0x0000E8, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::CallFunc_Get_1st_Occupant_Info_ID' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, K2Node_Select_Default_1) == 0x000100, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, CallFunc_BooleanAND_ReturnValue) == 0x000110, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, K2Node_Select_Default_2) == 0x000114, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, K2Node_Select_Default_3) == 0x000124, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, CallFunc_IsSameTeam_SameTeam) == 0x000134, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::CallFunc_IsSameTeam_SameTeam' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, K2Node_Select_Default_4) == 0x000138, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, K2Node_Select_Default_5) == 0x000148, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, CallFunc_Get_Claimed_By_Is_Claimed_1) == 0x000149, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::CallFunc_Get_Claimed_By_Is_Claimed_1' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, CallFunc_Get_Claimed_By_Claim_ID_1) == 0x00014C, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::CallFunc_Get_Claimed_By_Claim_ID_1' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, CallFunc_Conv_IntToText_ReturnValue) == 0x000150, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, CallFunc_Get_1st_Occupant_Info_Success_1) == 0x000168, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::CallFunc_Get_1st_Occupant_Info_Success_1' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, CallFunc_Get_1st_Occupant_Info_Leader_1) == 0x000169, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::CallFunc_Get_1st_Occupant_Info_Leader_1' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, CallFunc_Get_1st_Occupant_Info_Same_Squad_1) == 0x00016A, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::CallFunc_Get_1st_Occupant_Info_Same_Squad_1' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, CallFunc_Get_1st_Occupant_Info_ID_1) == 0x000170, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::CallFunc_Get_1st_Occupant_Info_ID_1' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, K2Node_Select_Default_6) == 0x000188, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, CallFunc_Get_1st_Occupant_Info_Success_2) == 0x0001A0, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::CallFunc_Get_1st_Occupant_Info_Success_2' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, CallFunc_Get_1st_Occupant_Info_Leader_2) == 0x0001A1, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::CallFunc_Get_1st_Occupant_Info_Leader_2' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, CallFunc_Get_1st_Occupant_Info_Same_Squad_2) == 0x0001A2, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::CallFunc_Get_1st_Occupant_Info_Same_Squad_2' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, CallFunc_Get_1st_Occupant_Info_ID_2) == 0x0001A8, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::CallFunc_Get_1st_Occupant_Info_ID_2' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, K2Node_Select_Default_7) == 0x0001C0, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, K2Node_Select_Default_8) == 0x0001D8, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::K2Node_Select_Default_8' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_UpdateSquadInfo, K2Node_Select_Default_9) == 0x0001E8, "Member 'BP_MarkerWidget_Vehicle_C_UpdateSquadInfo::K2Node_Select_Default_9' has a wrong offset!");

// Function BP_MarkerWidget_Vehicle.BP_MarkerWidget_Vehicle_C.Get 1st Occupant Info
// 0x00A8 (0x00A8 - 0x0000)
struct BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Leader;                                            // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Same_Squad;                                        // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E73[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ID;                                                // 0x0008(0x0018)(Parm, OutParm)
	int32                                         Local_Squad_ID;                                    // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Has_Same_Team;                                     // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Has_Player;                                        // 0x0025(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E74[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0035(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E75[0x2];                                     // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQVehicle*                             CallFunc_GetVehicle_Vehicle;                       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class USQVehicleSeatComponent*>        CallFunc_GetSeats_ReturnValue;                     // 0x0040(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E76[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQVehicleSeatComponent*                CallFunc_Array_Get_Item;                           // 0x0058(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsSquadLeader_ReturnValue;                // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0067(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0068(0x0018)()
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E77[0x7];                                     // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue_1;             // 0x0088(0x0018)()
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info) == 0x000008, "Wrong alignment on BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info");
static_assert(sizeof(BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info) == 0x0000A8, "Wrong size on BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info, Success) == 0x000000, "Member 'BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info::Success' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info, Leader) == 0x000001, "Member 'BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info::Leader' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info, Same_Squad) == 0x000002, "Member 'BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info::Same_Squad' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info, ID) == 0x000008, "Member 'BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info::ID' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info, Local_Squad_ID) == 0x000020, "Member 'BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info::Local_Squad_ID' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info, Has_Same_Team) == 0x000024, "Member 'BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info::Has_Same_Team' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info, Has_Player) == 0x000025, "Member 'BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info::Has_Player' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info, Temp_int_Array_Index_Variable) == 0x000028, "Member 'BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info, CallFunc_IsValid_ReturnValue) == 0x000034, "Member 'BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info, CallFunc_IsValid_ReturnValue_1) == 0x000035, "Member 'BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info, CallFunc_GetVehicle_Vehicle) == 0x000038, "Member 'BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info::CallFunc_GetVehicle_Vehicle' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info, CallFunc_GetSeats_ReturnValue) == 0x000040, "Member 'BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info::CallFunc_GetSeats_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info, CallFunc_IsValid_ReturnValue_2) == 0x000050, "Member 'BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info, CallFunc_Array_Get_Item) == 0x000058, "Member 'BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info, CallFunc_IsValid_ReturnValue_3) == 0x000064, "Member 'BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info, CallFunc_Less_IntInt_ReturnValue) == 0x000065, "Member 'BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info, CallFunc_IsSquadLeader_ReturnValue) == 0x000066, "Member 'BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info::CallFunc_IsSquadLeader_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info, CallFunc_IsValid_ReturnValue_4) == 0x000067, "Member 'BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info, CallFunc_Conv_IntToText_ReturnValue) == 0x000068, "Member 'BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000080, "Member 'BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info, CallFunc_Conv_IntToText_ReturnValue_1) == 0x000088, "Member 'BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info::CallFunc_Conv_IntToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x0000A0, "Member 'BP_MarkerWidget_Vehicle_C_Get_1st_Occupant_Info::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");

}

