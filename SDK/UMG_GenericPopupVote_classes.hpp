#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UMG_GenericPopupVote

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UMG_GenericPopupVote.UMG_GenericPopupVote_C
// 0x0030 (0x0290 - 0x0260)
class UUMG_GenericPopupVote_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UVerticalBox*                           VoteBox;                                           // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             VoteTitle;                                         // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         Result_Presentation_Duration;                      // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C5F[0x4];                                     // 0x027C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUMG_GenericPopupVoteEntry_C*>   AllChoiceWidgets;                                  // 0x0280(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void ExecuteUbergraph_UMG_GenericPopupVote(int32 EntryPoint);
	void SetVoteScreenActive(bool Activated);
	void OnVoteUpdated(class USQVoteSessionClient* VoteSession, int32 PlayerCurrentVoteCount);
	void OnVoteStarted(class USQVoteSessionClient* VoteSession, bool VotePossible);
	void OnVoteEnded(class USQVoteSessionClient* VoteSession, const struct FSQChoice& Winner);
	void OnVoteUpdatedByID(class FName ChoiceId);
	void Cleanup();
	void ConfigureVoteWindow(class USQVoteSession* In_Vote_Session, TArray<struct FSQChoice>* Out_Choices);
	void ConfigureChoices(TArray<struct FSQChoice>& In_Choices, class USQVoteSessionClient* In_Vote_Session);
	void Generate_Items(class USQVoteSessionClient* Vote_Session);
	void Update_Choices(class USQVoteSessionClient* Vote_Session, int32 Player_Current_Vote_Count);
	void Display_Result(class USQVoteSessionClient* Vote_Session, const struct FSQChoice& Winner);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UMG_GenericPopupVote_C">();
	}
	static class UUMG_GenericPopupVote_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUMG_GenericPopupVote_C>();
	}
};
static_assert(alignof(UUMG_GenericPopupVote_C) == 0x000008, "Wrong alignment on UUMG_GenericPopupVote_C");
static_assert(sizeof(UUMG_GenericPopupVote_C) == 0x000290, "Wrong size on UUMG_GenericPopupVote_C");
static_assert(offsetof(UUMG_GenericPopupVote_C, UberGraphFrame) == 0x000260, "Member 'UUMG_GenericPopupVote_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUMG_GenericPopupVote_C, VoteBox) == 0x000268, "Member 'UUMG_GenericPopupVote_C::VoteBox' has a wrong offset!");
static_assert(offsetof(UUMG_GenericPopupVote_C, VoteTitle) == 0x000270, "Member 'UUMG_GenericPopupVote_C::VoteTitle' has a wrong offset!");
static_assert(offsetof(UUMG_GenericPopupVote_C, Result_Presentation_Duration) == 0x000278, "Member 'UUMG_GenericPopupVote_C::Result_Presentation_Duration' has a wrong offset!");
static_assert(offsetof(UUMG_GenericPopupVote_C, AllChoiceWidgets) == 0x000280, "Member 'UUMG_GenericPopupVote_C::AllChoiceWidgets' has a wrong offset!");

}

