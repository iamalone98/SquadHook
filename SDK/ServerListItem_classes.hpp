#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ServerListItem

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Squad_structs.hpp"
#include "Squad_classes.hpp"
#include "OnlineSubsystemUtils_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass ServerListItem.ServerListItem_C
// 0x02E8 (0x0568 - 0x0280)
class UServerListItem_C final : public USQServerListItemWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0280(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBorder*                                Border_Colour;                                     // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMainMenu_Button_C*                     Button_Fave;                                       // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Flag_TeamOne;                                      // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Flag_TeamTwo;                                      // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               GameModeOverlay;                                   // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image;                                             // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_1;                                           // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_2;                                           // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_3;                                           // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_4;                                           // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_5;                                           // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_6;                                           // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_7;                                           // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_8;                                           // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_9;                                           // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_10;                                          // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_11;                                          // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_12;                                          // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_13;                                          // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_14;                                          // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_107;                                         // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ImageHealth;                                       // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Locked;                                            // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               MapNameOverlay;                                    // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ModIcon;                                           // 0x0348(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UButton*                                Server_Button;                                     // 0x0350(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               ServerNameOverlay;                                 // 0x0358(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         ServerTagBox;                                      // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TB_GameModeName;                                   // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TB_MapName;                                        // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TB_Ping;                                           // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TB_Players;                                        // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TB_PlayTime;                                       // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TB_ServerName;                                     // 0x0390(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 VAC;                                               // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UServerBrowserWindow_C*                 BrowserWindow;                                     // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UTexture2D*                             PasswordedImage;                                   // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             UnpasswordedImage;                                 // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             RequestJoin;                                       // 0x03B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UTexture2D*                             VacOn;                                             // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             VACOff;                                            // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             FavoritesOn;                                       // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             FavoritesOff;                                      // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SelectedColor;                                     // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           UnselectedColor;                                   // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HoveredColor;                                      // 0x0408(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Licensed_;                                         // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_3BAB[0x3];                                     // 0x0419(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           JoiningColor;                                      // 0x041C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BAC[0x4];                                     // 0x042C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Marquee_String;                                    // 0x0430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UFriendsBrowserWindow_C*                Friend_List;                                       // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBlueprintSessionResult                In_Session;                                        // 0x0448(0x0108)(Edit, BlueprintVisible, ExposeOnSpawn)
	bool                                          Enabled;                                           // 0x0550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_3BAD[0x7];                                     // 0x0551(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           FlagTimerHandle;                                   // 0x0558(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          FlagOneSet;                                        // 0x0560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FlagTwoSet;                                        // 0x0561(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3BAE[0x2];                                     // 0x0562(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastClickTime;                                     // 0x0564(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void RequestJoin__DelegateSignature(class USQSessionInfo* Session);
	void ExecuteUbergraph_ServerListItem(int32 EntryPoint);
	void Finished_Refresh_Event_0();
	void BndEvt__ServerListItem_Server_Button_K2Node_ComponentBoundEvent_1_OnButtonClickedEvent__DelegateSignature();
	void UpdateTeam_Flags();
	void BndEvt__Button_Fave_K2Node_ComponentBoundEvent_0_OnButtonClickedEvent__DelegateSignature();
	void UpdateFriendsBrowser();
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void Construct();
	void ClientJoinAccepted();
	void Init();
	struct FLinearColor Get_Main_Color();
	void IsSelected(bool* Selected);
	void UpdatePlayerCounts();
	void Get_Queue_Object(bool* In_Queue);
	void IsJoinServer(bool* Selected);
	void Set_Friend_Count();
	void Is_Whitelisted(bool* Param_Is_Whitelisted);
	bool Is_Modded();
	struct FLinearColor Get_Modded_Icon_Color();
	class UWidget* TooltipModIcon();
	class UWidget* TooltipLocked();
	class UWidget* TooltipVAC();
	class UWidget* TooltipFavourite();
	struct FLinearColor GetFavouriteColor();
	void Toggle_Favourite(bool* Valid, bool* Favourite);
	void UpdateFlags();
	void IsValidFavourite(TArray<class FString>& Favourites, class FString& UniqueID, bool Licensed, bool* Valid);
	void UpdateTags();
	void UpdateLayerName();
	class UWidget* Get_ImageHealth_ToolTipWidget_0();
	void CreateMorqueeText(class UOverlay* Overlay, int32 LettersLimit, class UTextBlock* FromText, bool DotsEnding, class UUI_MarqueeText_C** MarqueeText);
	void SelectCurrentServer();
	void UpdateTextFields();

	class FText GetPlayTime() const;
	void GetMapName(class FText* MapName) const;
	class FString GetGameModeString() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ServerListItem_C">();
	}
	static class UServerListItem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UServerListItem_C>();
	}
};
static_assert(alignof(UServerListItem_C) == 0x000008, "Wrong alignment on UServerListItem_C");
static_assert(sizeof(UServerListItem_C) == 0x000568, "Wrong size on UServerListItem_C");
static_assert(offsetof(UServerListItem_C, UberGraphFrame) == 0x000280, "Member 'UServerListItem_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, Border_Colour) == 0x000288, "Member 'UServerListItem_C::Border_Colour' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, Button_Fave) == 0x000290, "Member 'UServerListItem_C::Button_Fave' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, Flag_TeamOne) == 0x000298, "Member 'UServerListItem_C::Flag_TeamOne' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, Flag_TeamTwo) == 0x0002A0, "Member 'UServerListItem_C::Flag_TeamTwo' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, GameModeOverlay) == 0x0002A8, "Member 'UServerListItem_C::GameModeOverlay' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, Image) == 0x0002B0, "Member 'UServerListItem_C::Image' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, Image_1) == 0x0002B8, "Member 'UServerListItem_C::Image_1' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, Image_2) == 0x0002C0, "Member 'UServerListItem_C::Image_2' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, Image_3) == 0x0002C8, "Member 'UServerListItem_C::Image_3' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, Image_4) == 0x0002D0, "Member 'UServerListItem_C::Image_4' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, Image_5) == 0x0002D8, "Member 'UServerListItem_C::Image_5' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, Image_6) == 0x0002E0, "Member 'UServerListItem_C::Image_6' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, Image_7) == 0x0002E8, "Member 'UServerListItem_C::Image_7' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, Image_8) == 0x0002F0, "Member 'UServerListItem_C::Image_8' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, Image_9) == 0x0002F8, "Member 'UServerListItem_C::Image_9' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, Image_10) == 0x000300, "Member 'UServerListItem_C::Image_10' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, Image_11) == 0x000308, "Member 'UServerListItem_C::Image_11' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, Image_12) == 0x000310, "Member 'UServerListItem_C::Image_12' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, Image_13) == 0x000318, "Member 'UServerListItem_C::Image_13' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, Image_14) == 0x000320, "Member 'UServerListItem_C::Image_14' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, Image_107) == 0x000328, "Member 'UServerListItem_C::Image_107' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, ImageHealth) == 0x000330, "Member 'UServerListItem_C::ImageHealth' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, Locked) == 0x000338, "Member 'UServerListItem_C::Locked' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, MapNameOverlay) == 0x000340, "Member 'UServerListItem_C::MapNameOverlay' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, ModIcon) == 0x000348, "Member 'UServerListItem_C::ModIcon' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, Server_Button) == 0x000350, "Member 'UServerListItem_C::Server_Button' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, ServerNameOverlay) == 0x000358, "Member 'UServerListItem_C::ServerNameOverlay' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, ServerTagBox) == 0x000360, "Member 'UServerListItem_C::ServerTagBox' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, TB_GameModeName) == 0x000368, "Member 'UServerListItem_C::TB_GameModeName' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, TB_MapName) == 0x000370, "Member 'UServerListItem_C::TB_MapName' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, TB_Ping) == 0x000378, "Member 'UServerListItem_C::TB_Ping' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, TB_Players) == 0x000380, "Member 'UServerListItem_C::TB_Players' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, TB_PlayTime) == 0x000388, "Member 'UServerListItem_C::TB_PlayTime' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, TB_ServerName) == 0x000390, "Member 'UServerListItem_C::TB_ServerName' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, VAC) == 0x000398, "Member 'UServerListItem_C::VAC' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, BrowserWindow) == 0x0003A0, "Member 'UServerListItem_C::BrowserWindow' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, PasswordedImage) == 0x0003A8, "Member 'UServerListItem_C::PasswordedImage' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, UnpasswordedImage) == 0x0003B0, "Member 'UServerListItem_C::UnpasswordedImage' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, RequestJoin) == 0x0003B8, "Member 'UServerListItem_C::RequestJoin' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, VacOn) == 0x0003C8, "Member 'UServerListItem_C::VacOn' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, VACOff) == 0x0003D0, "Member 'UServerListItem_C::VACOff' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, FavoritesOn) == 0x0003D8, "Member 'UServerListItem_C::FavoritesOn' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, FavoritesOff) == 0x0003E0, "Member 'UServerListItem_C::FavoritesOff' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, SelectedColor) == 0x0003E8, "Member 'UServerListItem_C::SelectedColor' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, UnselectedColor) == 0x0003F8, "Member 'UServerListItem_C::UnselectedColor' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, HoveredColor) == 0x000408, "Member 'UServerListItem_C::HoveredColor' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, Licensed_) == 0x000418, "Member 'UServerListItem_C::Licensed_' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, JoiningColor) == 0x00041C, "Member 'UServerListItem_C::JoiningColor' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, Marquee_String) == 0x000430, "Member 'UServerListItem_C::Marquee_String' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, Friend_List) == 0x000440, "Member 'UServerListItem_C::Friend_List' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, In_Session) == 0x000448, "Member 'UServerListItem_C::In_Session' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, Enabled) == 0x000550, "Member 'UServerListItem_C::Enabled' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, FlagTimerHandle) == 0x000558, "Member 'UServerListItem_C::FlagTimerHandle' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, FlagOneSet) == 0x000560, "Member 'UServerListItem_C::FlagOneSet' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, FlagTwoSet) == 0x000561, "Member 'UServerListItem_C::FlagTwoSet' has a wrong offset!");
static_assert(offsetof(UServerListItem_C, LastClickTime) == 0x000564, "Member 'UServerListItem_C::LastClickTime' has a wrong offset!");

}

