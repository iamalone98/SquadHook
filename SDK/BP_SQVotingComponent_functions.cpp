#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SQVotingComponent

#include "Basic.hpp"

#include "BP_SQVotingComponent_classes.hpp"
#include "BP_SQVotingComponent_parameters.hpp"


namespace SDK
{

// Function BP_SQVotingComponent.BP_SQVotingComponent_C.ExecuteUbergraph_BP_SQVotingComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SQVotingComponent_C::ExecuteUbergraph_BP_SQVotingComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQVotingComponent_C", "ExecuteUbergraph_BP_SQVotingComponent");

	Params::BP_SQVotingComponent_C_ExecuteUbergraph_BP_SQVotingComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SQVotingComponent.BP_SQVotingComponent_C.Debug_OnVoteResult
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQVoteSession*                   VoteSession                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSQChoice                        Winner                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void UBP_SQVotingComponent_C::Debug_OnVoteResult(class USQVoteSession* VoteSession, const struct FSQChoice& Winner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQVotingComponent_C", "Debug_OnVoteResult");

	Params::BP_SQVotingComponent_C_Debug_OnVoteResult Parms{};

	Parms.VoteSession = VoteSession;
	Parms.Winner = std::move(Winner);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SQVotingComponent.BP_SQVotingComponent_C.Debug_StartVoteOnServer
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void UBP_SQVotingComponent_C::Debug_StartVoteOnServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQVotingComponent_C", "Debug_StartVoteOnServer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SQVotingComponent.BP_SQVotingComponent_C.OnVoteStarted
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQVoteSessionClient*             VoteSession                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bWithVoteAccess                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_SQVotingComponent_C::OnVoteStarted(class USQVoteSessionClient* VoteSession, bool bWithVoteAccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQVotingComponent_C", "OnVoteStarted");

	Params::BP_SQVotingComponent_C_OnVoteStarted Parms{};

	Parms.VoteSession = VoteSession;
	Parms.bWithVoteAccess = bWithVoteAccess;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SQVotingComponent.BP_SQVotingComponent_C.OnVoteUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQVoteSessionClient*             VoteSession                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SQVotingComponent_C::OnVoteUpdated(class USQVoteSessionClient* VoteSession)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQVotingComponent_C", "OnVoteUpdated");

	Params::BP_SQVotingComponent_C_OnVoteUpdated Parms{};

	Parms.VoteSession = VoteSession;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SQVotingComponent.BP_SQVotingComponent_C.OnVoteEnded
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQVoteSessionClient*             VoteSession                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSQChoice                        Winner                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void UBP_SQVotingComponent_C::OnVoteEnded(class USQVoteSessionClient* VoteSession, const struct FSQChoice& Winner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQVotingComponent_C", "OnVoteEnded");

	Params::BP_SQVotingComponent_C_OnVoteEnded Parms{};

	Parms.VoteSession = VoteSession;
	Parms.Winner = std::move(Winner);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SQVotingComponent.BP_SQVotingComponent_C.GetInterface
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TScriptInterface<class IBPI_VoteScreen_C>VoteScreen                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_SQVotingComponent_C::GetInterface(bool* Success, TScriptInterface<class IBPI_VoteScreen_C>* VoteScreen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQVotingComponent_C", "GetInterface");

	Params::BP_SQVotingComponent_C_GetInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (VoteScreen != nullptr)
		*VoteScreen = Parms.VoteScreen;
}


// Function BP_SQVotingComponent.BP_SQVotingComponent_C.CountLocalPlayerVotes
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USQVoteSession*                   VoteSession                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerCurrentVotes                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SQVotingComponent_C::CountLocalPlayerVotes(class USQVoteSession* VoteSession, int32* PlayerCurrentVotes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQVotingComponent_C", "CountLocalPlayerVotes");

	Params::BP_SQVotingComponent_C_CountLocalPlayerVotes Parms{};

	Parms.VoteSession = VoteSession;

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerCurrentVotes != nullptr)
		*PlayerCurrentVotes = Parms.PlayerCurrentVotes;
}


// Function BP_SQVotingComponent.BP_SQVotingComponent_C.CloseScoreboard
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_SQVotingComponent_C::CloseScoreboard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQVotingComponent_C", "CloseScoreboard");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SQVotingComponent.BP_SQVotingComponent_C.GetVoteType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USQVoteSession*                   InVoteSession                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESQVoteType                             OutVoteType                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SQVotingComponent_C::GetVoteType(class USQVoteSession* InVoteSession, ESQVoteType* OutVoteType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQVotingComponent_C", "GetVoteType");

	Params::BP_SQVotingComponent_C_GetVoteType Parms{};

	Parms.InVoteSession = InVoteSession;

	UObject::ProcessEvent(Func, &Parms);

	if (OutVoteType != nullptr)
		*OutVoteType = Parms.OutVoteType;
}

}

