#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_MathCurves

#include "Basic.hpp"

#include "Squad_structs.hpp"


namespace SDK::Params
{

// Function BPFL_MathCurves.BPFL_MathCurves_C.CurveType
// 0x0098 (0x0098 - 0x0000)
struct BPFL_MathCurves_C_CurveType final
{
public:
	struct FSQJoyStickConfig                      Config;                                            // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
	float                                         In;                                                // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36E7[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Out;                                               // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36E8[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_1;                     // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36E9[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Lerp_ReturnValue;                         // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36EA[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_FClamp_ReturnValue_2;                     // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_1; // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESQJoystickCurveTypes                         Temp_byte_Variable;                                // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36EB[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_1;                           // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_3;                     // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue_4;                     // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_2;                           // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPFL_MathCurves_C_CurveType) == 0x000008, "Wrong alignment on BPFL_MathCurves_C_CurveType");
static_assert(sizeof(BPFL_MathCurves_C_CurveType) == 0x000098, "Wrong size on BPFL_MathCurves_C_CurveType");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, Config) == 0x000000, "Member 'BPFL_MathCurves_C_CurveType::Config' has a wrong offset!");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, In) == 0x000010, "Member 'BPFL_MathCurves_C_CurveType::In' has a wrong offset!");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, __WorldContext) == 0x000018, "Member 'BPFL_MathCurves_C_CurveType::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, Out) == 0x000020, "Member 'BPFL_MathCurves_C_CurveType::Out' has a wrong offset!");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, Temp_bool_Variable) == 0x000024, "Member 'BPFL_MathCurves_C_CurveType::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, CallFunc_FClamp_ReturnValue) == 0x000028, "Member 'BPFL_MathCurves_C_CurveType::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, CallFunc_Abs_ReturnValue) == 0x00002C, "Member 'BPFL_MathCurves_C_CurveType::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000030, "Member 'BPFL_MathCurves_C_CurveType::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, CallFunc_FClamp_ReturnValue_1) == 0x000034, "Member 'BPFL_MathCurves_C_CurveType::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000038, "Member 'BPFL_MathCurves_C_CurveType::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00003C, "Member 'BPFL_MathCurves_C_CurveType::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000040, "Member 'BPFL_MathCurves_C_CurveType::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, CallFunc_Lerp_ReturnValue) == 0x000044, "Member 'BPFL_MathCurves_C_CurveType::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, Temp_bool_Variable_1) == 0x000048, "Member 'BPFL_MathCurves_C_CurveType::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, CallFunc_FClamp_ReturnValue_2) == 0x00004C, "Member 'BPFL_MathCurves_C_CurveType::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x000050, "Member 'BPFL_MathCurves_C_CurveType::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000054, "Member 'BPFL_MathCurves_C_CurveType::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, Temp_float_Variable) == 0x000058, "Member 'BPFL_MathCurves_C_CurveType::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_1) == 0x00005C, "Member 'BPFL_MathCurves_C_CurveType::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, CallFunc_Add_FloatFloat_ReturnValue) == 0x000060, "Member 'BPFL_MathCurves_C_CurveType::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, Temp_float_Variable_1) == 0x000064, "Member 'BPFL_MathCurves_C_CurveType::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000068, "Member 'BPFL_MathCurves_C_CurveType::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00006C, "Member 'BPFL_MathCurves_C_CurveType::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, K2Node_Select_Default) == 0x000070, "Member 'BPFL_MathCurves_C_CurveType::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x000074, "Member 'BPFL_MathCurves_C_CurveType::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, Temp_byte_Variable) == 0x000078, "Member 'BPFL_MathCurves_C_CurveType::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, K2Node_Select_Default_1) == 0x00007C, "Member 'BPFL_MathCurves_C_CurveType::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, CallFunc_FClamp_ReturnValue_3) == 0x000080, "Member 'BPFL_MathCurves_C_CurveType::CallFunc_FClamp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000084, "Member 'BPFL_MathCurves_C_CurveType::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, CallFunc_FClamp_ReturnValue_4) == 0x000088, "Member 'BPFL_MathCurves_C_CurveType::CallFunc_FClamp_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x00008C, "Member 'BPFL_MathCurves_C_CurveType::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPFL_MathCurves_C_CurveType, K2Node_Select_Default_2) == 0x000090, "Member 'BPFL_MathCurves_C_CurveType::K2Node_Select_Default_2' has a wrong offset!");

}

