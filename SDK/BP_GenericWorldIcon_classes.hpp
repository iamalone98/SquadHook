#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GenericWorldIcon

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GenericWorldIcon.BP_GenericWorldIcon_C
// 0x0058 (0x0280 - 0x0228)
class ABP_GenericWorldIcon_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0228(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    Billboard;                                         // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       Icon;                                              // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Texture;                                           // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinDistance;                                       // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDistance;                                       // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RefreshRate;                                       // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D73[0x4];                                     // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_WorldIcon_C*                         MyWorldIcon;                                       // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Maximum_View_Angle;                                // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color_and_Opacity;                                 // 0x0264(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Draw_Size;                                         // 0x0274(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Icon_Active;                                       // 0x027C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_GenericWorldIcon(int32 EntryPoint);
	void OverrideDoFade(bool Fade_In);
	void OnDestroyed_Event_0(class AActor* DestroyedActor);
	void Check_Distance();
	void ReceiveBeginPlay();
	void UserConstructionScript();
	bool Should_Be_Visible();
	bool Is_Player_Aiming_Down_Sights();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GenericWorldIcon_C">();
	}
	static class ABP_GenericWorldIcon_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GenericWorldIcon_C>();
	}
};
static_assert(alignof(ABP_GenericWorldIcon_C) == 0x000008, "Wrong alignment on ABP_GenericWorldIcon_C");
static_assert(sizeof(ABP_GenericWorldIcon_C) == 0x000280, "Wrong size on ABP_GenericWorldIcon_C");
static_assert(offsetof(ABP_GenericWorldIcon_C, UberGraphFrame) == 0x000228, "Member 'ABP_GenericWorldIcon_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GenericWorldIcon_C, Billboard) == 0x000230, "Member 'ABP_GenericWorldIcon_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_GenericWorldIcon_C, Icon) == 0x000238, "Member 'ABP_GenericWorldIcon_C::Icon' has a wrong offset!");
static_assert(offsetof(ABP_GenericWorldIcon_C, Texture) == 0x000240, "Member 'ABP_GenericWorldIcon_C::Texture' has a wrong offset!");
static_assert(offsetof(ABP_GenericWorldIcon_C, MinDistance) == 0x000248, "Member 'ABP_GenericWorldIcon_C::MinDistance' has a wrong offset!");
static_assert(offsetof(ABP_GenericWorldIcon_C, MaxDistance) == 0x00024C, "Member 'ABP_GenericWorldIcon_C::MaxDistance' has a wrong offset!");
static_assert(offsetof(ABP_GenericWorldIcon_C, RefreshRate) == 0x000250, "Member 'ABP_GenericWorldIcon_C::RefreshRate' has a wrong offset!");
static_assert(offsetof(ABP_GenericWorldIcon_C, MyWorldIcon) == 0x000258, "Member 'ABP_GenericWorldIcon_C::MyWorldIcon' has a wrong offset!");
static_assert(offsetof(ABP_GenericWorldIcon_C, Maximum_View_Angle) == 0x000260, "Member 'ABP_GenericWorldIcon_C::Maximum_View_Angle' has a wrong offset!");
static_assert(offsetof(ABP_GenericWorldIcon_C, Color_and_Opacity) == 0x000264, "Member 'ABP_GenericWorldIcon_C::Color_and_Opacity' has a wrong offset!");
static_assert(offsetof(ABP_GenericWorldIcon_C, Draw_Size) == 0x000274, "Member 'ABP_GenericWorldIcon_C::Draw_Size' has a wrong offset!");
static_assert(offsetof(ABP_GenericWorldIcon_C, Icon_Active) == 0x00027C, "Member 'ABP_GenericWorldIcon_C::Icon_Active' has a wrong offset!");

}

