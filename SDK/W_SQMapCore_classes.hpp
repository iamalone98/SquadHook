#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_SQMapCore

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "InputCore_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_SQMapCore.W_SQMapCore_C
// 0x0210 (0x0470 - 0x0260)
class UW_SQMapCore_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UW_SQMapBody_C*                         MapBody;                                           // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	float                                         ZoomAmount;                                        // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48D0[0x4];                                     // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               MapMaterialInstance;                               // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 SL_Menu_Class;                                     // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_GridMenu_C*                          SL_Grid_Menu;                                      // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsPanning;                                        // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_48D1[0x7];                                     // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   PanButton;                                         // 0x0298(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	float                                         ZoomScrollRate;                                    // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZoomMax;                                           // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZoomMin;                                           // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TargetZoom;                                        // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              FollowPosition;                                    // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FollowPositionRelative;                            // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Following;                                         // 0x02C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_48D2[0x2];                                     // 0x02CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Edge_Padding;                                      // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartingZoom;                                      // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxZoomFactor;                                     // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZoomSpeed;                                         // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinimumMaxZoomClamp;                               // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USQCoreStateMapComponent*               MapComponent;                                      // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CachedMouseLocationCoords;                         // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 CachedPlayerLocationCoords;                        // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          ZoomCenterOnPlayer;                                // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_48D3[0x3];                                     // 0x0309(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Required_Pan_Delta;                                // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Did_Pan;                                           // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_48D4[0x7];                                     // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_MousePosition_C*                     REF_Widget_Mouse_Pos;                              // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 MarkedMouseLocationCoords;                         // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          Can_Ping;                                          // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_48D5[0x7];                                     // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Ping_Timer;                                        // 0x0338(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bZoomCenterToCursor;                               // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_48D6[0x3];                                     // 0x0341(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Last_World_Location_Zero_Based;                    // 0x0344(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Show_Mouse_Coords;                             // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_48D7[0x7];                                     // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerEvent                          Last_Click_Event;                                  // 0x0358(0x0070)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             Mouse_Down;                                        // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Can_Create_Map_Menu;                               // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_48D8[0x7];                                     // 0x03D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Fireteam_Menu_Class;                               // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_GridMenu_C*                          Fireteam_Menu;                                     // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPointerEvent                          Mouse_Move_Event;                                  // 0x03F0(0x0070)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             OnUpdateZoom;                                      // 0x0460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void Mouse_Down__DelegateSignature(const struct FPointerEvent& Mouse_Event, const struct FVector& World_Location);
	void OnUpdateZoom__DelegateSignature();
	void ExecuteUbergraph_W_SQMapCore(int32 EntryPoint);
	void Allow_Ping();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	void Construct();
	void Zoom(bool Instant, float Amount, bool IsUpdate);
	void InitialiseMapTexture();
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void Hide_SL_Menu(bool New_Visible, const struct FGeometry& Visible_Geometry, const struct FPointerEvent& Mouse_Event);
	void Create_Actions_Menu();
	void Remove_Floating_Widgets();
	void StartPan();
	void EndPan();
	struct FEventReply OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void MovePan(const struct FVector2D& Delta, bool IsScreenDelta, float ClampCacheScale);
	void ScreenToPanVector(const struct FVector2D& ScreenVector, class UPanelWidget* PanLayer, struct FVector2D* PanVector);
	void ClampPanPosition(const struct FVector2D& Position, float CacheScale, class UUserWidget* RootLayer, class UPanelWidget* PanLayer, struct FVector2D* Result);
	void Follow(bool Instant, const struct FVector2D& FocusPosition, bool RelativePosition, float ClampCacheScale);
	void ScreenToPanPosition(const struct FVector2D& ScreenPosition, struct FVector2D* PanPosition);
	void Unfollow();
	void UpdateZoom(float DeltaTime);
	void UpdateFollow();
	void Clear_Selections();
	void GetElementRoot(class UPanelWidget** Out_Root);
	void PerformZoom(float Param_TargetZoom, const struct FVector2D& ZoomPosition, class UUserWidget* RootLayer, class UPanelWidget* ZoomLayer, class UPanelWidget* PanLayer);
	void PerformPan(const struct FVector2D& Vector, bool IsScreenDelta, float CacheScale, class UUserWidget* RootLayer, class UPanelWidget* PanLayer);
	void PerformFollow(class UPanelWidget* PanLayer, const struct FVector2D& FocusPosition, bool RelativePosition, float CacheScale, class UUserWidget* RootLayer);
	void Setup(class USQCoreStateMapComponent* Param_MapComponent);
	void ScreenLocationToMapLocation(const struct FVector2D& ScreenLocation, struct FVector2D* MapLocation);
	void UpdateCursorGridLocationString(const struct FPointerEvent& MouseInput);
	void UpdatePlayerCoordinates();
	void OnMouseWheelZoom(float MouseAxis);
	struct FEventReply OnMouseWheel(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void Remove_Mouse_Pos();
	void AdjustHorizontalBarPadding(float Param_TargetZoom);
	void AdjustVerticalBarPadding(float Param_TargetZoom);
	void InitializeZoomLevels();
	void SetMapTexture(class UTexture* Value);
	void FindZoomLocation(struct FVector2D* OutScreenLocation);
	void Can_Place_Map_Menu(bool* Valid);
	void Create_Fireteam_Actions_Menu();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_SQMapCore_C">();
	}
	static class UW_SQMapCore_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_SQMapCore_C>();
	}
};
static_assert(alignof(UW_SQMapCore_C) == 0x000008, "Wrong alignment on UW_SQMapCore_C");
static_assert(sizeof(UW_SQMapCore_C) == 0x000470, "Wrong size on UW_SQMapCore_C");
static_assert(offsetof(UW_SQMapCore_C, UberGraphFrame) == 0x000260, "Member 'UW_SQMapCore_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, MapBody) == 0x000268, "Member 'UW_SQMapCore_C::MapBody' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, ZoomAmount) == 0x000270, "Member 'UW_SQMapCore_C::ZoomAmount' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, MapMaterialInstance) == 0x000278, "Member 'UW_SQMapCore_C::MapMaterialInstance' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, SL_Menu_Class) == 0x000280, "Member 'UW_SQMapCore_C::SL_Menu_Class' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, SL_Grid_Menu) == 0x000288, "Member 'UW_SQMapCore_C::SL_Grid_Menu' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, bIsPanning) == 0x000290, "Member 'UW_SQMapCore_C::bIsPanning' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, PanButton) == 0x000298, "Member 'UW_SQMapCore_C::PanButton' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, ZoomScrollRate) == 0x0002B0, "Member 'UW_SQMapCore_C::ZoomScrollRate' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, ZoomMax) == 0x0002B4, "Member 'UW_SQMapCore_C::ZoomMax' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, ZoomMin) == 0x0002B8, "Member 'UW_SQMapCore_C::ZoomMin' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, TargetZoom) == 0x0002BC, "Member 'UW_SQMapCore_C::TargetZoom' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, FollowPosition) == 0x0002C0, "Member 'UW_SQMapCore_C::FollowPosition' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, FollowPositionRelative) == 0x0002C8, "Member 'UW_SQMapCore_C::FollowPositionRelative' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, Following) == 0x0002C9, "Member 'UW_SQMapCore_C::Following' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, Edge_Padding) == 0x0002CC, "Member 'UW_SQMapCore_C::Edge_Padding' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, StartingZoom) == 0x0002D0, "Member 'UW_SQMapCore_C::StartingZoom' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, MaxZoomFactor) == 0x0002D4, "Member 'UW_SQMapCore_C::MaxZoomFactor' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, ZoomSpeed) == 0x0002D8, "Member 'UW_SQMapCore_C::ZoomSpeed' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, MinimumMaxZoomClamp) == 0x0002DC, "Member 'UW_SQMapCore_C::MinimumMaxZoomClamp' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, MapComponent) == 0x0002E0, "Member 'UW_SQMapCore_C::MapComponent' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, CachedMouseLocationCoords) == 0x0002E8, "Member 'UW_SQMapCore_C::CachedMouseLocationCoords' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, CachedPlayerLocationCoords) == 0x0002F8, "Member 'UW_SQMapCore_C::CachedPlayerLocationCoords' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, ZoomCenterOnPlayer) == 0x000308, "Member 'UW_SQMapCore_C::ZoomCenterOnPlayer' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, Required_Pan_Delta) == 0x00030C, "Member 'UW_SQMapCore_C::Required_Pan_Delta' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, Did_Pan) == 0x000310, "Member 'UW_SQMapCore_C::Did_Pan' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, REF_Widget_Mouse_Pos) == 0x000318, "Member 'UW_SQMapCore_C::REF_Widget_Mouse_Pos' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, MarkedMouseLocationCoords) == 0x000320, "Member 'UW_SQMapCore_C::MarkedMouseLocationCoords' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, Can_Ping) == 0x000330, "Member 'UW_SQMapCore_C::Can_Ping' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, Ping_Timer) == 0x000338, "Member 'UW_SQMapCore_C::Ping_Timer' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, bZoomCenterToCursor) == 0x000340, "Member 'UW_SQMapCore_C::bZoomCenterToCursor' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, Last_World_Location_Zero_Based) == 0x000344, "Member 'UW_SQMapCore_C::Last_World_Location_Zero_Based' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, Can_Show_Mouse_Coords) == 0x000350, "Member 'UW_SQMapCore_C::Can_Show_Mouse_Coords' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, Last_Click_Event) == 0x000358, "Member 'UW_SQMapCore_C::Last_Click_Event' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, Mouse_Down) == 0x0003C8, "Member 'UW_SQMapCore_C::Mouse_Down' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, Can_Create_Map_Menu) == 0x0003D8, "Member 'UW_SQMapCore_C::Can_Create_Map_Menu' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, Fireteam_Menu_Class) == 0x0003E0, "Member 'UW_SQMapCore_C::Fireteam_Menu_Class' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, Fireteam_Menu) == 0x0003E8, "Member 'UW_SQMapCore_C::Fireteam_Menu' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, Mouse_Move_Event) == 0x0003F0, "Member 'UW_SQMapCore_C::Mouse_Move_Event' has a wrong offset!");
static_assert(offsetof(UW_SQMapCore_C, OnUpdateZoom) == 0x000460, "Member 'UW_SQMapCore_C::OnUpdateZoom' has a wrong offset!");

}

