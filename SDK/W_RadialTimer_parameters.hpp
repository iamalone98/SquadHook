#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_RadialTimer

#include "Basic.hpp"


namespace SDK::Params
{

// Function W_RadialTimer.W_RadialTimer_C.ExecuteUbergraph_W_RadialTimer
// 0x0010 (0x0010 - 0x0000)
struct W_RadialTimer_C_ExecuteUbergraph_W_RadialTimer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_RemainingPct;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RadialTimer_C_ExecuteUbergraph_W_RadialTimer) == 0x000008, "Wrong alignment on W_RadialTimer_C_ExecuteUbergraph_W_RadialTimer");
static_assert(sizeof(W_RadialTimer_C_ExecuteUbergraph_W_RadialTimer) == 0x000010, "Wrong size on W_RadialTimer_C_ExecuteUbergraph_W_RadialTimer");
static_assert(offsetof(W_RadialTimer_C_ExecuteUbergraph_W_RadialTimer, EntryPoint) == 0x000000, "Member 'W_RadialTimer_C_ExecuteUbergraph_W_RadialTimer::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_RadialTimer_C_ExecuteUbergraph_W_RadialTimer, K2Node_Event_RemainingPct) == 0x000004, "Member 'W_RadialTimer_C_ExecuteUbergraph_W_RadialTimer::K2Node_Event_RemainingPct' has a wrong offset!");
static_assert(offsetof(W_RadialTimer_C_ExecuteUbergraph_W_RadialTimer, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000008, "Member 'W_RadialTimer_C_ExecuteUbergraph_W_RadialTimer::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function W_RadialTimer.W_RadialTimer_C.BPOnTimerProgress
// 0x0004 (0x0004 - 0x0000)
struct W_RadialTimer_C_BPOnTimerProgress final
{
public:
	float                                         RemainingPct;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RadialTimer_C_BPOnTimerProgress) == 0x000004, "Wrong alignment on W_RadialTimer_C_BPOnTimerProgress");
static_assert(sizeof(W_RadialTimer_C_BPOnTimerProgress) == 0x000004, "Wrong size on W_RadialTimer_C_BPOnTimerProgress");
static_assert(offsetof(W_RadialTimer_C_BPOnTimerProgress, RemainingPct) == 0x000000, "Member 'W_RadialTimer_C_BPOnTimerProgress::RemainingPct' has a wrong offset!");

// Function W_RadialTimer.W_RadialTimer_C.SetProgress
// 0x0008 (0x0008 - 0x0000)
struct W_RadialTimer_C_SetProgress final
{
public:
	float                                         ProgressPct;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RadialTimer_C_SetProgress) == 0x000004, "Wrong alignment on W_RadialTimer_C_SetProgress");
static_assert(sizeof(W_RadialTimer_C_SetProgress) == 0x000008, "Wrong size on W_RadialTimer_C_SetProgress");
static_assert(offsetof(W_RadialTimer_C_SetProgress, ProgressPct) == 0x000000, "Member 'W_RadialTimer_C_SetProgress::ProgressPct' has a wrong offset!");
static_assert(offsetof(W_RadialTimer_C_SetProgress, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000004, "Member 'W_RadialTimer_C_SetProgress::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");

}

