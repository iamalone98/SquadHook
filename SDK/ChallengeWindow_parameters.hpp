#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ChallengeWindow

#include "Basic.hpp"


namespace SDK::Params
{

// Function ChallengeWindow.ChallengeWindow_C.ExecuteUbergraph_ChallengeWindow
// 0x0020 (0x0020 - 0x0000)
struct ChallengeWindow_C_ExecuteUbergraph_ChallengeWindow final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bSelected;              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_327D[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMainMenu_Button_C*                     K2Node_ComponentBoundEvent_Button;                 // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_ComponentBoundEvent_bSelected_1;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_327E[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMainMenu_Button_C*                     K2Node_ComponentBoundEvent_Button_1;               // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeWindow_C_ExecuteUbergraph_ChallengeWindow) == 0x000008, "Wrong alignment on ChallengeWindow_C_ExecuteUbergraph_ChallengeWindow");
static_assert(sizeof(ChallengeWindow_C_ExecuteUbergraph_ChallengeWindow) == 0x000020, "Wrong size on ChallengeWindow_C_ExecuteUbergraph_ChallengeWindow");
static_assert(offsetof(ChallengeWindow_C_ExecuteUbergraph_ChallengeWindow, EntryPoint) == 0x000000, "Member 'ChallengeWindow_C_ExecuteUbergraph_ChallengeWindow::EntryPoint' has a wrong offset!");
static_assert(offsetof(ChallengeWindow_C_ExecuteUbergraph_ChallengeWindow, K2Node_ComponentBoundEvent_bSelected) == 0x000004, "Member 'ChallengeWindow_C_ExecuteUbergraph_ChallengeWindow::K2Node_ComponentBoundEvent_bSelected' has a wrong offset!");
static_assert(offsetof(ChallengeWindow_C_ExecuteUbergraph_ChallengeWindow, K2Node_ComponentBoundEvent_Button) == 0x000008, "Member 'ChallengeWindow_C_ExecuteUbergraph_ChallengeWindow::K2Node_ComponentBoundEvent_Button' has a wrong offset!");
static_assert(offsetof(ChallengeWindow_C_ExecuteUbergraph_ChallengeWindow, K2Node_Event_IsDesignTime) == 0x000010, "Member 'ChallengeWindow_C_ExecuteUbergraph_ChallengeWindow::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(ChallengeWindow_C_ExecuteUbergraph_ChallengeWindow, K2Node_ComponentBoundEvent_bSelected_1) == 0x000011, "Member 'ChallengeWindow_C_ExecuteUbergraph_ChallengeWindow::K2Node_ComponentBoundEvent_bSelected_1' has a wrong offset!");
static_assert(offsetof(ChallengeWindow_C_ExecuteUbergraph_ChallengeWindow, K2Node_ComponentBoundEvent_Button_1) == 0x000018, "Member 'ChallengeWindow_C_ExecuteUbergraph_ChallengeWindow::K2Node_ComponentBoundEvent_Button_1' has a wrong offset!");

// Function ChallengeWindow.ChallengeWindow_C.BndEvt__DenyButton_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct ChallengeWindow_C_BndEvt__DenyButton_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_327F[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMainMenu_Button_C*                     Button;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeWindow_C_BndEvt__DenyButton_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature) == 0x000008, "Wrong alignment on ChallengeWindow_C_BndEvt__DenyButton_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature");
static_assert(sizeof(ChallengeWindow_C_BndEvt__DenyButton_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature) == 0x000010, "Wrong size on ChallengeWindow_C_BndEvt__DenyButton_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature");
static_assert(offsetof(ChallengeWindow_C_BndEvt__DenyButton_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature, bSelected) == 0x000000, "Member 'ChallengeWindow_C_BndEvt__DenyButton_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature::bSelected' has a wrong offset!");
static_assert(offsetof(ChallengeWindow_C_BndEvt__DenyButton_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature, Button) == 0x000008, "Member 'ChallengeWindow_C_BndEvt__DenyButton_K2Node_ComponentBoundEvent_2_OnClicked__DelegateSignature::Button' has a wrong offset!");

// Function ChallengeWindow.ChallengeWindow_C.BndEvt__AcceptButton_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct ChallengeWindow_C_BndEvt__AcceptButton_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature final
{
public:
	bool                                          bSelected;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3280[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMainMenu_Button_C*                     Button;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ChallengeWindow_C_BndEvt__AcceptButton_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature) == 0x000008, "Wrong alignment on ChallengeWindow_C_BndEvt__AcceptButton_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature");
static_assert(sizeof(ChallengeWindow_C_BndEvt__AcceptButton_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature) == 0x000010, "Wrong size on ChallengeWindow_C_BndEvt__AcceptButton_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature");
static_assert(offsetof(ChallengeWindow_C_BndEvt__AcceptButton_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature, bSelected) == 0x000000, "Member 'ChallengeWindow_C_BndEvt__AcceptButton_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature::bSelected' has a wrong offset!");
static_assert(offsetof(ChallengeWindow_C_BndEvt__AcceptButton_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature, Button) == 0x000008, "Member 'ChallengeWindow_C_BndEvt__AcceptButton_K2Node_ComponentBoundEvent_1_OnClicked__DelegateSignature::Button' has a wrong offset!");

// Function ChallengeWindow.ChallengeWindow_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct ChallengeWindow_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ChallengeWindow_C_PreConstruct) == 0x000001, "Wrong alignment on ChallengeWindow_C_PreConstruct");
static_assert(sizeof(ChallengeWindow_C_PreConstruct) == 0x000001, "Wrong size on ChallengeWindow_C_PreConstruct");
static_assert(offsetof(ChallengeWindow_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'ChallengeWindow_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function ChallengeWindow.ChallengeWindow_C.SetDescription
// 0x0018 (0x0018 - 0x0000)
struct ChallengeWindow_C_SetDescription final
{
public:
	class FText                                   InDescription;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(ChallengeWindow_C_SetDescription) == 0x000008, "Wrong alignment on ChallengeWindow_C_SetDescription");
static_assert(sizeof(ChallengeWindow_C_SetDescription) == 0x000018, "Wrong size on ChallengeWindow_C_SetDescription");
static_assert(offsetof(ChallengeWindow_C_SetDescription, InDescription) == 0x000000, "Member 'ChallengeWindow_C_SetDescription::InDescription' has a wrong offset!");

}

