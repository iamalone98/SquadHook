#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SteelSeriesGameSense

#include "Basic.hpp"


namespace SDK
{

// Enum SteelSeriesGameSense.ESSGS_IlluminationMode
// NumValues: 0x0004
enum class ESSGS_IlluminationMode : uint8
{
	Color                                    = 0,
	Percent                                  = 1,
	Count                                    = 2,
	ESSGS_MAX                                = 3,
};

// Enum SteelSeriesGameSense.ESSGS_ColorEffect
// NumValues: 0x0004
enum class ESSGS_ColorEffect : uint8
{
	Static                                   = 0,
	Gradient                                 = 1,
	Ranges                                   = 2,
	ESSGS_MAX                                = 3,
};

// Enum SteelSeriesGameSense.ESSGS_EventIconId
// NumValues: 0x002A
enum class ESSGS_EventIconId : uint8
{
	Default                                  = 0,
	Health                                   = 1,
	Armor                                    = 2,
	Ammo                                     = 3,
	Money                                    = 4,
	Flashbang                                = 5,
	Kills                                    = 6,
	Headshot                                 = 7,
	Helmet                                   = 8,
	Hunger                                   = 10,
	Air                                      = 11,
	Compass                                  = 12,
	Tool                                     = 13,
	Mana                                     = 14,
	Clock                                    = 15,
	Lightning                                = 16,
	Item                                     = 17,
	AtSymbol                                 = 18,
	Muted                                    = 19,
	Talking                                  = 20,
	Connect                                  = 21,
	Disconnect                               = 22,
	Music                                    = 23,
	Play                                     = 24,
	Pause                                    = 25,
	CPU                                      = 27,
	GPU                                      = 28,
	RAM                                      = 29,
	Assists                                  = 30,
	CreepScore                               = 31,
	Dead                                     = 32,
	Dragon                                   = 33,
	Enemies                                  = 35,
	GameStart                                = 36,
	Gold                                     = 37,
	Health2                                  = 38,
	Kill2                                    = 39,
	Mana2                                    = 40,
	Teammates                                = 41,
	Timer                                    = 42,
	Temperature                              = 43,
	ESSGS_MAX                                = 44,
};

// ScriptStruct SteelSeriesGameSense.SSGS_RGB
// 0x0003 (0x0003 - 0x0000)
struct FSSGS_RGB final
{
public:
	uint8                                         Red;                                               // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Green;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Blue;                                              // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSGS_RGB) == 0x000001, "Wrong alignment on FSSGS_RGB");
static_assert(sizeof(FSSGS_RGB) == 0x000003, "Wrong size on FSSGS_RGB");
static_assert(offsetof(FSSGS_RGB, Red) == 0x000000, "Member 'FSSGS_RGB::Red' has a wrong offset!");
static_assert(offsetof(FSSGS_RGB, Green) == 0x000001, "Member 'FSSGS_RGB::Green' has a wrong offset!");
static_assert(offsetof(FSSGS_RGB, Blue) == 0x000002, "Member 'FSSGS_RGB::Blue' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_Gradient
// 0x0006 (0x0006 - 0x0000)
struct FSSGS_Gradient final
{
public:
	struct FSSGS_RGB                              Zero;                                              // 0x0000(0x0003)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSSGS_RGB                              Hundred;                                           // 0x0003(0x0003)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSGS_Gradient) == 0x000001, "Wrong alignment on FSSGS_Gradient");
static_assert(sizeof(FSSGS_Gradient) == 0x000006, "Wrong size on FSSGS_Gradient");
static_assert(offsetof(FSSGS_Gradient, Zero) == 0x000000, "Member 'FSSGS_Gradient::Zero' has a wrong offset!");
static_assert(offsetof(FSSGS_Gradient, Hundred) == 0x000003, "Member 'FSSGS_Gradient::Hundred' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_ColorGradient
// 0x0006 (0x0006 - 0x0000)
struct FSSGS_ColorGradient final
{
public:
	struct FSSGS_Gradient                         Gradient;                                          // 0x0000(0x0006)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSGS_ColorGradient) == 0x000001, "Wrong alignment on FSSGS_ColorGradient");
static_assert(sizeof(FSSGS_ColorGradient) == 0x000006, "Wrong size on FSSGS_ColorGradient");
static_assert(offsetof(FSSGS_ColorGradient, Gradient) == 0x000000, "Member 'FSSGS_ColorGradient::Gradient' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_JsonConvertable
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSSGS_JsonConvertable
{
public:
	uint8                                         Pad_17D4[0x8];                                     // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSGS_JsonConvertable) == 0x000008, "Wrong alignment on FSSGS_JsonConvertable");
static_assert(sizeof(FSSGS_JsonConvertable) == 0x000008, "Wrong size on FSSGS_JsonConvertable");

// ScriptStruct SteelSeriesGameSense.SSGS_ColorRange
// 0x0018 (0x0020 - 0x0008)
struct FSSGS_ColorRange final : public FSSGS_JsonConvertable
{
public:
	uint8                                         Pad_17D5[0x18];                                    // 0x0008(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSGS_ColorRange) == 0x000008, "Wrong alignment on FSSGS_ColorRange");
static_assert(sizeof(FSSGS_ColorRange) == 0x000020, "Wrong size on FSSGS_ColorRange");

// ScriptStruct SteelSeriesGameSense.SSGS_ColorRangeGradient
// 0x0010 (0x0010 - 0x0000)
struct FSSGS_ColorRangeGradient final
{
public:
	int32                                         Low;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         High;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSGS_ColorGradient                    Color;                                             // 0x0008(0x0006)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_17D6[0x2];                                     // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSGS_ColorRangeGradient) == 0x000004, "Wrong alignment on FSSGS_ColorRangeGradient");
static_assert(sizeof(FSSGS_ColorRangeGradient) == 0x000010, "Wrong size on FSSGS_ColorRangeGradient");
static_assert(offsetof(FSSGS_ColorRangeGradient, Low) == 0x000000, "Member 'FSSGS_ColorRangeGradient::Low' has a wrong offset!");
static_assert(offsetof(FSSGS_ColorRangeGradient, High) == 0x000004, "Member 'FSSGS_ColorRangeGradient::High' has a wrong offset!");
static_assert(offsetof(FSSGS_ColorRangeGradient, Color) == 0x000008, "Member 'FSSGS_ColorRangeGradient::Color' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_ColorRangeStatic
// 0x000C (0x000C - 0x0000)
struct FSSGS_ColorRangeStatic final
{
public:
	int32                                         Low;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         High;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSGS_RGB                              Color;                                             // 0x0008(0x0003)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_17D7[0x1];                                     // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSGS_ColorRangeStatic) == 0x000004, "Wrong alignment on FSSGS_ColorRangeStatic");
static_assert(sizeof(FSSGS_ColorRangeStatic) == 0x00000C, "Wrong size on FSSGS_ColorRangeStatic");
static_assert(offsetof(FSSGS_ColorRangeStatic, Low) == 0x000000, "Member 'FSSGS_ColorRangeStatic::Low' has a wrong offset!");
static_assert(offsetof(FSSGS_ColorRangeStatic, High) == 0x000004, "Member 'FSSGS_ColorRangeStatic::High' has a wrong offset!");
static_assert(offsetof(FSSGS_ColorRangeStatic, Color) == 0x000008, "Member 'FSSGS_ColorRangeStatic::Color' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_ScreenDeviceZone
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FSSGS_ScreenDeviceZone final
{
public:
	uint8                                         Pad_17D8[0x28];                                    // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSGS_ScreenDeviceZone) == 0x000008, "Wrong alignment on FSSGS_ScreenDeviceZone");
static_assert(sizeof(FSSGS_ScreenDeviceZone) == 0x000028, "Wrong size on FSSGS_ScreenDeviceZone");

// ScriptStruct SteelSeriesGameSense.SSGS_TactileDeviceZone
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FSSGS_TactileDeviceZone final
{
public:
	uint8                                         Pad_17D9[0x20];                                    // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSGS_TactileDeviceZone) == 0x000008, "Wrong alignment on FSSGS_TactileDeviceZone");
static_assert(sizeof(FSSGS_TactileDeviceZone) == 0x000020, "Wrong size on FSSGS_TactileDeviceZone");

// ScriptStruct SteelSeriesGameSense.SSGS_IlluminationDeviceZone
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FSSGS_IlluminationDeviceZone final
{
public:
	uint8                                         Pad_17DA[0x38];                                    // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSGS_IlluminationDeviceZone) == 0x000008, "Wrong alignment on FSSGS_IlluminationDeviceZone");
static_assert(sizeof(FSSGS_IlluminationDeviceZone) == 0x000038, "Wrong size on FSSGS_IlluminationDeviceZone");

// ScriptStruct SteelSeriesGameSense.SSGS_EventData
// 0x0010 (0x0018 - 0x0008)
struct FSSGS_EventData final : public FSSGS_JsonConvertable
{
public:
	int32                                         Value;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17DB[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USSGS_Frame*                            Frame;                                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSGS_EventData) == 0x000008, "Wrong alignment on FSSGS_EventData");
static_assert(sizeof(FSSGS_EventData) == 0x000018, "Wrong size on FSSGS_EventData");
static_assert(offsetof(FSSGS_EventData, Value) == 0x000008, "Member 'FSSGS_EventData::Value' has a wrong offset!");
static_assert(offsetof(FSSGS_EventData, Frame) == 0x000010, "Member 'FSSGS_EventData::Frame' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_FrameData
// 0x00A0 (0x00A8 - 0x0008)
struct FSSGS_FrameData final : public FSSGS_JsonConvertable
{
public:
	uint8                                         Pad_17DC[0xA0];                                    // 0x0008(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSGS_FrameData) == 0x000008, "Wrong alignment on FSSGS_FrameData");
static_assert(sizeof(FSSGS_FrameData) == 0x0000A8, "Wrong size on FSSGS_FrameData");

// ScriptStruct SteelSeriesGameSense.SSGS_FrameModifiers
// 0x0010 (0x0018 - 0x0008)
struct FSSGS_FrameModifiers final : public FSSGS_JsonConvertable
{
public:
	int32                                         Length_millis;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17DD[0xC];                                     // 0x000C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSGS_FrameModifiers) == 0x000008, "Wrong alignment on FSSGS_FrameModifiers");
static_assert(sizeof(FSSGS_FrameModifiers) == 0x000018, "Wrong size on FSSGS_FrameModifiers");
static_assert(offsetof(FSSGS_FrameModifiers, Length_millis) == 0x000008, "Member 'FSSGS_FrameModifiers::Length_millis' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_FrameDataImage
// 0x0050 (0x0058 - 0x0008)
struct FSSGS_FrameDataImage final : public FSSGS_JsonConvertable
{
public:
	TArray<uint8>                                 ImageData;                                         // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSSGS_FrameModifiers                   FrameModifiers;                                    // 0x0018(0x0018)(NativeAccessSpecifierPublic)
	uint8                                         Pad_17DE[0x28];                                    // 0x0030(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSGS_FrameDataImage) == 0x000008, "Wrong alignment on FSSGS_FrameDataImage");
static_assert(sizeof(FSSGS_FrameDataImage) == 0x000058, "Wrong size on FSSGS_FrameDataImage");
static_assert(offsetof(FSSGS_FrameDataImage, ImageData) == 0x000008, "Member 'FSSGS_FrameDataImage::ImageData' has a wrong offset!");
static_assert(offsetof(FSSGS_FrameDataImage, FrameModifiers) == 0x000018, "Member 'FSSGS_FrameDataImage::FrameModifiers' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_LineData
// 0x0060 (0x0068 - 0x0008)
struct FSSGS_LineData final : public FSSGS_JsonConvertable
{
public:
	uint8                                         Pad_17DF[0x60];                                    // 0x0008(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSGS_LineData) == 0x000008, "Wrong alignment on FSSGS_LineData");
static_assert(sizeof(FSSGS_LineData) == 0x000068, "Wrong size on FSSGS_LineData");

// ScriptStruct SteelSeriesGameSense.SSGS_FrameDataMultiLine
// 0x0030 (0x0038 - 0x0008)
struct FSSGS_FrameDataMultiLine final : public FSSGS_JsonConvertable
{
public:
	TArray<struct FSSGS_LineData>                 Lines;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSSGS_FrameModifiers                   FrameModifiers;                                    // 0x0018(0x0018)(NativeAccessSpecifierPublic)
	ESSGS_EventIconId                             Icon_id;                                           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17E0[0x7];                                     // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSGS_FrameDataMultiLine) == 0x000008, "Wrong alignment on FSSGS_FrameDataMultiLine");
static_assert(sizeof(FSSGS_FrameDataMultiLine) == 0x000038, "Wrong size on FSSGS_FrameDataMultiLine");
static_assert(offsetof(FSSGS_FrameDataMultiLine, Lines) == 0x000008, "Member 'FSSGS_FrameDataMultiLine::Lines' has a wrong offset!");
static_assert(offsetof(FSSGS_FrameDataMultiLine, FrameModifiers) == 0x000018, "Member 'FSSGS_FrameDataMultiLine::FrameModifiers' has a wrong offset!");
static_assert(offsetof(FSSGS_FrameDataMultiLine, Icon_id) == 0x000030, "Member 'FSSGS_FrameDataMultiLine::Icon_id' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_FrameDataRange
// 0x0018 (0x0020 - 0x0008)
struct FSSGS_FrameDataRange final : public FSSGS_JsonConvertable
{
public:
	int32                                         Low;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         High;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSSGS_FrameData>                Datas;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSGS_FrameDataRange) == 0x000008, "Wrong alignment on FSSGS_FrameDataRange");
static_assert(sizeof(FSSGS_FrameDataRange) == 0x000020, "Wrong size on FSSGS_FrameDataRange");
static_assert(offsetof(FSSGS_FrameDataRange, Low) == 0x000008, "Member 'FSSGS_FrameDataRange::Low' has a wrong offset!");
static_assert(offsetof(FSSGS_FrameDataRange, High) == 0x00000C, "Member 'FSSGS_FrameDataRange::High' has a wrong offset!");
static_assert(offsetof(FSSGS_FrameDataRange, Datas) == 0x000010, "Member 'FSSGS_FrameDataRange::Datas' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_FrameDataSingleLine
// 0x0088 (0x0090 - 0x0008)
struct FSSGS_FrameDataSingleLine final : public FSSGS_JsonConvertable
{
public:
	struct FSSGS_LineData                         LineData;                                          // 0x0008(0x0068)(NativeAccessSpecifierPublic)
	struct FSSGS_FrameModifiers                   FrameModifiers;                                    // 0x0070(0x0018)(NativeAccessSpecifierPublic)
	ESSGS_EventIconId                             Icon_id;                                           // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17E1[0x7];                                     // 0x0089(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSGS_FrameDataSingleLine) == 0x000008, "Wrong alignment on FSSGS_FrameDataSingleLine");
static_assert(sizeof(FSSGS_FrameDataSingleLine) == 0x000090, "Wrong size on FSSGS_FrameDataSingleLine");
static_assert(offsetof(FSSGS_FrameDataSingleLine, LineData) == 0x000008, "Member 'FSSGS_FrameDataSingleLine::LineData' has a wrong offset!");
static_assert(offsetof(FSSGS_FrameDataSingleLine, FrameModifiers) == 0x000070, "Member 'FSSGS_FrameDataSingleLine::FrameModifiers' has a wrong offset!");
static_assert(offsetof(FSSGS_FrameDataSingleLine, Icon_id) == 0x000088, "Member 'FSSGS_FrameDataSingleLine::Icon_id' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_KeyValuePair
// 0x0038 (0x0040 - 0x0008)
struct FSSGS_KeyValuePair final : public FSSGS_JsonConvertable
{
public:
	uint8                                         Pad_17E2[0x38];                                    // 0x0008(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSGS_KeyValuePair) == 0x000008, "Wrong alignment on FSSGS_KeyValuePair");
static_assert(sizeof(FSSGS_KeyValuePair) == 0x000040, "Wrong size on FSSGS_KeyValuePair");

// ScriptStruct SteelSeriesGameSense.SSGS_PropertyContainer
// 0x0010 (0x0010 - 0x0000)
struct FSSGS_PropertyContainer final
{
public:
	TArray<struct FSSGS_KeyValuePair>             Properties;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSGS_PropertyContainer) == 0x000008, "Wrong alignment on FSSGS_PropertyContainer");
static_assert(sizeof(FSSGS_PropertyContainer) == 0x000010, "Wrong size on FSSGS_PropertyContainer");
static_assert(offsetof(FSSGS_PropertyContainer, Properties) == 0x000000, "Member 'FSSGS_PropertyContainer::Properties' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_Frequency
// 0x000C (0x000C - 0x0000)
struct FSSGS_Frequency final
{
public:
	int32                                         Low;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         High;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Frequency;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSGS_Frequency) == 0x000004, "Wrong alignment on FSSGS_Frequency");
static_assert(sizeof(FSSGS_Frequency) == 0x00000C, "Wrong size on FSSGS_Frequency");
static_assert(offsetof(FSSGS_Frequency, Low) == 0x000000, "Member 'FSSGS_Frequency::Low' has a wrong offset!");
static_assert(offsetof(FSSGS_Frequency, High) == 0x000004, "Member 'FSSGS_Frequency::High' has a wrong offset!");
static_assert(offsetof(FSSGS_Frequency, Frequency) == 0x000008, "Member 'FSSGS_Frequency::Frequency' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_FrequencyRepeatLimitPair
// 0x0010 (0x0010 - 0x0000)
struct FSSGS_FrequencyRepeatLimitPair final
{
public:
	int32                                         Low;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         High;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Frequency;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Repeat_limit;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSGS_FrequencyRepeatLimitPair) == 0x000004, "Wrong alignment on FSSGS_FrequencyRepeatLimitPair");
static_assert(sizeof(FSSGS_FrequencyRepeatLimitPair) == 0x000010, "Wrong size on FSSGS_FrequencyRepeatLimitPair");
static_assert(offsetof(FSSGS_FrequencyRepeatLimitPair, Low) == 0x000000, "Member 'FSSGS_FrequencyRepeatLimitPair::Low' has a wrong offset!");
static_assert(offsetof(FSSGS_FrequencyRepeatLimitPair, High) == 0x000004, "Member 'FSSGS_FrequencyRepeatLimitPair::High' has a wrong offset!");
static_assert(offsetof(FSSGS_FrequencyRepeatLimitPair, Frequency) == 0x000008, "Member 'FSSGS_FrequencyRepeatLimitPair::Frequency' has a wrong offset!");
static_assert(offsetof(FSSGS_FrequencyRepeatLimitPair, Repeat_limit) == 0x00000C, "Member 'FSSGS_FrequencyRepeatLimitPair::Repeat_limit' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_HandlerColor
// 0x0050 (0x0058 - 0x0008)
struct FSSGS_HandlerColor final : public FSSGS_JsonConvertable
{
public:
	struct FSSGS_IlluminationDeviceZone           DeviceZone;                                        // 0x0008(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	ESSGS_IlluminationMode                        Mode;                                              // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17E3[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USSGS_ColorEffectSpecification*         Color;                                             // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSGS_RateSpecification*                Rate;                                              // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSGS_HandlerColor) == 0x000008, "Wrong alignment on FSSGS_HandlerColor");
static_assert(sizeof(FSSGS_HandlerColor) == 0x000058, "Wrong size on FSSGS_HandlerColor");
static_assert(offsetof(FSSGS_HandlerColor, DeviceZone) == 0x000008, "Member 'FSSGS_HandlerColor::DeviceZone' has a wrong offset!");
static_assert(offsetof(FSSGS_HandlerColor, Mode) == 0x000040, "Member 'FSSGS_HandlerColor::Mode' has a wrong offset!");
static_assert(offsetof(FSSGS_HandlerColor, Color) == 0x000048, "Member 'FSSGS_HandlerColor::Color' has a wrong offset!");
static_assert(offsetof(FSSGS_HandlerColor, Rate) == 0x000050, "Member 'FSSGS_HandlerColor::Rate' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_HandlerScreen
// 0x0040 (0x0048 - 0x0008)
struct FSSGS_HandlerScreen final : public FSSGS_JsonConvertable
{
public:
	struct FSSGS_ScreenDeviceZone                 DeviceZone;                                        // 0x0008(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Mode;                                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSGS_ScreenDataSpecification*          Data;                                              // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSGS_HandlerScreen) == 0x000008, "Wrong alignment on FSSGS_HandlerScreen");
static_assert(sizeof(FSSGS_HandlerScreen) == 0x000048, "Wrong size on FSSGS_HandlerScreen");
static_assert(offsetof(FSSGS_HandlerScreen, DeviceZone) == 0x000008, "Member 'FSSGS_HandlerScreen::DeviceZone' has a wrong offset!");
static_assert(offsetof(FSSGS_HandlerScreen, Mode) == 0x000030, "Member 'FSSGS_HandlerScreen::Mode' has a wrong offset!");
static_assert(offsetof(FSSGS_HandlerScreen, Data) == 0x000040, "Member 'FSSGS_HandlerScreen::Data' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_HandlerTactile
// 0x0040 (0x0048 - 0x0008)
struct FSSGS_HandlerTactile final : public FSSGS_JsonConvertable
{
public:
	struct FSSGS_TactileDeviceZone                DeviceZone;                                        // 0x0008(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Mode;                                              // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSGS_TactilePatternSpecification*      Pattern;                                           // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USSGS_RateSpecification*                Rate;                                              // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSGS_HandlerTactile) == 0x000008, "Wrong alignment on FSSGS_HandlerTactile");
static_assert(sizeof(FSSGS_HandlerTactile) == 0x000048, "Wrong size on FSSGS_HandlerTactile");
static_assert(offsetof(FSSGS_HandlerTactile, DeviceZone) == 0x000008, "Member 'FSSGS_HandlerTactile::DeviceZone' has a wrong offset!");
static_assert(offsetof(FSSGS_HandlerTactile, Mode) == 0x000028, "Member 'FSSGS_HandlerTactile::Mode' has a wrong offset!");
static_assert(offsetof(FSSGS_HandlerTactile, Pattern) == 0x000038, "Member 'FSSGS_HandlerTactile::Pattern' has a wrong offset!");
static_assert(offsetof(FSSGS_HandlerTactile, Rate) == 0x000040, "Member 'FSSGS_HandlerTactile::Rate' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_LineDataText
// 0x0030 (0x0030 - 0x0000)
struct FSSGS_LineDataText final
{
public:
	bool                                          Has_text;                                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17E4[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Prefix;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Suffix;                                            // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bold;                                              // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17E5[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Wrap;                                              // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSGS_LineDataText) == 0x000008, "Wrong alignment on FSSGS_LineDataText");
static_assert(sizeof(FSSGS_LineDataText) == 0x000030, "Wrong size on FSSGS_LineDataText");
static_assert(offsetof(FSSGS_LineDataText, Has_text) == 0x000000, "Member 'FSSGS_LineDataText::Has_text' has a wrong offset!");
static_assert(offsetof(FSSGS_LineDataText, Prefix) == 0x000008, "Member 'FSSGS_LineDataText::Prefix' has a wrong offset!");
static_assert(offsetof(FSSGS_LineDataText, Suffix) == 0x000018, "Member 'FSSGS_LineDataText::Suffix' has a wrong offset!");
static_assert(offsetof(FSSGS_LineDataText, Bold) == 0x000028, "Member 'FSSGS_LineDataText::Bold' has a wrong offset!");
static_assert(offsetof(FSSGS_LineDataText, Wrap) == 0x00002C, "Member 'FSSGS_LineDataText::Wrap' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_LineDataAccessor
// 0x0018 (0x0020 - 0x0008)
struct FSSGS_LineDataAccessor final : public FSSGS_JsonConvertable
{
public:
	uint8                                         Pad_17E6[0x18];                                    // 0x0008(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSGS_LineDataAccessor) == 0x000008, "Wrong alignment on FSSGS_LineDataAccessor");
static_assert(sizeof(FSSGS_LineDataAccessor) == 0x000020, "Wrong size on FSSGS_LineDataAccessor");

// ScriptStruct SteelSeriesGameSense.ServerProps
// 0x0010 (0x0010 - 0x0000)
struct FServerProps final
{
public:
	class FString                                 Address;                                           // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerProps) == 0x000008, "Wrong alignment on FServerProps");
static_assert(sizeof(FServerProps) == 0x000010, "Wrong size on FServerProps");
static_assert(offsetof(FServerProps, Address) == 0x000000, "Member 'FServerProps::Address' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_EventUpdate
// 0x0038 (0x0040 - 0x0008)
struct FSSGS_EventUpdate final : public FSSGS_JsonConvertable
{
public:
	class FString                                 Game;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSSGS_EventData                        Data;                                              // 0x0028(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSGS_EventUpdate) == 0x000008, "Wrong alignment on FSSGS_EventUpdate");
static_assert(sizeof(FSSGS_EventUpdate) == 0x000040, "Wrong size on FSSGS_EventUpdate");
static_assert(offsetof(FSSGS_EventUpdate, Game) == 0x000008, "Member 'FSSGS_EventUpdate::Game' has a wrong offset!");
static_assert(offsetof(FSSGS_EventUpdate, EventName) == 0x000018, "Member 'FSSGS_EventUpdate::EventName' has a wrong offset!");
static_assert(offsetof(FSSGS_EventUpdate, Data) == 0x000028, "Member 'FSSGS_EventUpdate::Data' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_MultiEventUpdate
// 0x0020 (0x0028 - 0x0008)
struct FSSGS_MultiEventUpdate final : public FSSGS_JsonConvertable
{
public:
	class FString                                 Game;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSSGS_EventUpdate>              _events;                                           // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSGS_MultiEventUpdate) == 0x000008, "Wrong alignment on FSSGS_MultiEventUpdate");
static_assert(sizeof(FSSGS_MultiEventUpdate) == 0x000028, "Wrong size on FSSGS_MultiEventUpdate");
static_assert(offsetof(FSSGS_MultiEventUpdate, Game) == 0x000008, "Member 'FSSGS_MultiEventUpdate::Game' has a wrong offset!");
static_assert(offsetof(FSSGS_MultiEventUpdate, _events) == 0x000018, "Member 'FSSGS_MultiEventUpdate::_events' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_Game
// 0x0010 (0x0018 - 0x0008)
struct FSSGS_Game final : public FSSGS_JsonConvertable
{
public:
	class FString                                 Game;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSGS_Game) == 0x000008, "Wrong alignment on FSSGS_Game");
static_assert(sizeof(FSSGS_Game) == 0x000018, "Wrong size on FSSGS_Game");
static_assert(offsetof(FSSGS_Game, Game) == 0x000008, "Member 'FSSGS_Game::Game' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_Event
// 0x0020 (0x0028 - 0x0008)
struct FSSGS_Event final : public FSSGS_JsonConvertable
{
public:
	class FString                                 Game;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSGS_Event) == 0x000008, "Wrong alignment on FSSGS_Event");
static_assert(sizeof(FSSGS_Event) == 0x000028, "Wrong size on FSSGS_Event");
static_assert(offsetof(FSSGS_Event, Game) == 0x000008, "Member 'FSSGS_Event::Game' has a wrong offset!");
static_assert(offsetof(FSSGS_Event, EventName) == 0x000018, "Member 'FSSGS_Event::EventName' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_EventBinding
// 0x0038 (0x0040 - 0x0008)
struct FSSGS_EventBinding final : public FSSGS_JsonConvertable
{
public:
	class FString                                 Game;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinValue;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxValue;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSGS_EventIconId                             IconId;                                            // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ValueOptional;                                     // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17E7[0x6];                                     // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USSGS_HandlerCollection*                Handlers;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSGS_EventBinding) == 0x000008, "Wrong alignment on FSSGS_EventBinding");
static_assert(sizeof(FSSGS_EventBinding) == 0x000040, "Wrong size on FSSGS_EventBinding");
static_assert(offsetof(FSSGS_EventBinding, Game) == 0x000008, "Member 'FSSGS_EventBinding::Game' has a wrong offset!");
static_assert(offsetof(FSSGS_EventBinding, EventName) == 0x000018, "Member 'FSSGS_EventBinding::EventName' has a wrong offset!");
static_assert(offsetof(FSSGS_EventBinding, MinValue) == 0x000028, "Member 'FSSGS_EventBinding::MinValue' has a wrong offset!");
static_assert(offsetof(FSSGS_EventBinding, MaxValue) == 0x00002C, "Member 'FSSGS_EventBinding::MaxValue' has a wrong offset!");
static_assert(offsetof(FSSGS_EventBinding, IconId) == 0x000030, "Member 'FSSGS_EventBinding::IconId' has a wrong offset!");
static_assert(offsetof(FSSGS_EventBinding, ValueOptional) == 0x000031, "Member 'FSSGS_EventBinding::ValueOptional' has a wrong offset!");
static_assert(offsetof(FSSGS_EventBinding, Handlers) == 0x000038, "Member 'FSSGS_EventBinding::Handlers' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_EventInfo
// 0x0030 (0x0038 - 0x0008)
struct FSSGS_EventInfo final : public FSSGS_JsonConvertable
{
public:
	class FString                                 Game;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinValue;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxValue;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESSGS_EventIconId                             IconId;                                            // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ValueOptional;                                     // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17E8[0x6];                                     // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSGS_EventInfo) == 0x000008, "Wrong alignment on FSSGS_EventInfo");
static_assert(sizeof(FSSGS_EventInfo) == 0x000038, "Wrong size on FSSGS_EventInfo");
static_assert(offsetof(FSSGS_EventInfo, Game) == 0x000008, "Member 'FSSGS_EventInfo::Game' has a wrong offset!");
static_assert(offsetof(FSSGS_EventInfo, EventName) == 0x000018, "Member 'FSSGS_EventInfo::EventName' has a wrong offset!");
static_assert(offsetof(FSSGS_EventInfo, MinValue) == 0x000028, "Member 'FSSGS_EventInfo::MinValue' has a wrong offset!");
static_assert(offsetof(FSSGS_EventInfo, MaxValue) == 0x00002C, "Member 'FSSGS_EventInfo::MaxValue' has a wrong offset!");
static_assert(offsetof(FSSGS_EventInfo, IconId) == 0x000030, "Member 'FSSGS_EventInfo::IconId' has a wrong offset!");
static_assert(offsetof(FSSGS_EventInfo, ValueOptional) == 0x000031, "Member 'FSSGS_EventInfo::ValueOptional' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_GameInfo
// 0x0030 (0x0038 - 0x0008)
struct FSSGS_GameInfo final : public FSSGS_JsonConvertable
{
public:
	class FString                                 Game;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameDisplayName;                                   // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Developer;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSGS_GameInfo) == 0x000008, "Wrong alignment on FSSGS_GameInfo");
static_assert(sizeof(FSSGS_GameInfo) == 0x000038, "Wrong size on FSSGS_GameInfo");
static_assert(offsetof(FSSGS_GameInfo, Game) == 0x000008, "Member 'FSSGS_GameInfo::Game' has a wrong offset!");
static_assert(offsetof(FSSGS_GameInfo, GameDisplayName) == 0x000018, "Member 'FSSGS_GameInfo::GameDisplayName' has a wrong offset!");
static_assert(offsetof(FSSGS_GameInfo, Developer) == 0x000028, "Member 'FSSGS_GameInfo::Developer' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_PredefinedTactilePattern
// 0x0010 (0x0010 - 0x0000)
struct FSSGS_PredefinedTactilePattern final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSGS_PredefinedTactilePattern) == 0x000008, "Wrong alignment on FSSGS_PredefinedTactilePattern");
static_assert(sizeof(FSSGS_PredefinedTactilePattern) == 0x000010, "Wrong size on FSSGS_PredefinedTactilePattern");
static_assert(offsetof(FSSGS_PredefinedTactilePattern, Name) == 0x000000, "Member 'FSSGS_PredefinedTactilePattern::Name' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_RepeatLimit
// 0x000C (0x000C - 0x0000)
struct FSSGS_RepeatLimit final
{
public:
	int32                                         Low;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         High;                                              // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Repeat_limit;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSGS_RepeatLimit) == 0x000004, "Wrong alignment on FSSGS_RepeatLimit");
static_assert(sizeof(FSSGS_RepeatLimit) == 0x00000C, "Wrong size on FSSGS_RepeatLimit");
static_assert(offsetof(FSSGS_RepeatLimit, Low) == 0x000000, "Member 'FSSGS_RepeatLimit::Low' has a wrong offset!");
static_assert(offsetof(FSSGS_RepeatLimit, High) == 0x000004, "Member 'FSSGS_RepeatLimit::High' has a wrong offset!");
static_assert(offsetof(FSSGS_RepeatLimit, Repeat_limit) == 0x000008, "Member 'FSSGS_RepeatLimit::Repeat_limit' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_RateRange
// 0x0020 (0x0020 - 0x0000)
struct FSSGS_RateRange final
{
public:
	TArray<struct FSSGS_Frequency>                Frequency;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSSGS_RepeatLimit>              Repeat_limit;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSGS_RateRange) == 0x000008, "Wrong alignment on FSSGS_RateRange");
static_assert(sizeof(FSSGS_RateRange) == 0x000020, "Wrong size on FSSGS_RateRange");
static_assert(offsetof(FSSGS_RateRange, Frequency) == 0x000000, "Member 'FSSGS_RateRange::Frequency' has a wrong offset!");
static_assert(offsetof(FSSGS_RateRange, Repeat_limit) == 0x000010, "Member 'FSSGS_RateRange::Repeat_limit' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_RateStatic
// 0x0008 (0x0008 - 0x0000)
struct FSSGS_RateStatic final
{
public:
	int32                                         Frequency;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Repeat_limit;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSGS_RateStatic) == 0x000004, "Wrong alignment on FSSGS_RateStatic");
static_assert(sizeof(FSSGS_RateStatic) == 0x000008, "Wrong size on FSSGS_RateStatic");
static_assert(offsetof(FSSGS_RateStatic, Frequency) == 0x000000, "Member 'FSSGS_RateStatic::Frequency' has a wrong offset!");
static_assert(offsetof(FSSGS_RateStatic, Repeat_limit) == 0x000004, "Member 'FSSGS_RateStatic::Repeat_limit' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_TactileEffectCustom
// 0x0018 (0x0020 - 0x0008)
struct FSSGS_TactileEffectCustom final : public FSSGS_JsonConvertable
{
public:
	int32                                         Length_ms;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Delay_ms;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17E9[0x10];                                    // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSGS_TactileEffectCustom) == 0x000008, "Wrong alignment on FSSGS_TactileEffectCustom");
static_assert(sizeof(FSSGS_TactileEffectCustom) == 0x000020, "Wrong size on FSSGS_TactileEffectCustom");
static_assert(offsetof(FSSGS_TactileEffectCustom, Length_ms) == 0x000008, "Member 'FSSGS_TactileEffectCustom::Length_ms' has a wrong offset!");
static_assert(offsetof(FSSGS_TactileEffectCustom, Delay_ms) == 0x00000C, "Member 'FSSGS_TactileEffectCustom::Delay_ms' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_TactileEffectPredefined
// 0x0018 (0x0020 - 0x0008)
struct FSSGS_TactileEffectPredefined final : public FSSGS_JsonConvertable
{
public:
	struct FSSGS_PredefinedTactilePattern         Type;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Delay_ms;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17EA[0x4];                                     // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSGS_TactileEffectPredefined) == 0x000008, "Wrong alignment on FSSGS_TactileEffectPredefined");
static_assert(sizeof(FSSGS_TactileEffectPredefined) == 0x000020, "Wrong size on FSSGS_TactileEffectPredefined");
static_assert(offsetof(FSSGS_TactileEffectPredefined, Type) == 0x000008, "Member 'FSSGS_TactileEffectPredefined::Type' has a wrong offset!");
static_assert(offsetof(FSSGS_TactileEffectPredefined, Delay_ms) == 0x000018, "Member 'FSSGS_TactileEffectPredefined::Delay_ms' has a wrong offset!");

// ScriptStruct SteelSeriesGameSense.SSGS_TactilePatternStatic
// 0x0030 (0x0038 - 0x0008)
struct FSSGS_TactilePatternStatic final : public FSSGS_JsonConvertable
{
public:
	uint8                                         Pad_17EB[0x30];                                    // 0x0008(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSSGS_TactilePatternStatic) == 0x000008, "Wrong alignment on FSSGS_TactilePatternStatic");
static_assert(sizeof(FSSGS_TactilePatternStatic) == 0x000038, "Wrong size on FSSGS_TactilePatternStatic");

// ScriptStruct SteelSeriesGameSense.SSGS_TactilePatternRange
// 0x0018 (0x0020 - 0x0008)
struct FSSGS_TactilePatternRange final : public FSSGS_JsonConvertable
{
public:
	int32                                         Low;                                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         High;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSSGS_TactilePatternStatic>     Pattern;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSSGS_TactilePatternRange) == 0x000008, "Wrong alignment on FSSGS_TactilePatternRange");
static_assert(sizeof(FSSGS_TactilePatternRange) == 0x000020, "Wrong size on FSSGS_TactilePatternRange");
static_assert(offsetof(FSSGS_TactilePatternRange, Low) == 0x000008, "Member 'FSSGS_TactilePatternRange::Low' has a wrong offset!");
static_assert(offsetof(FSSGS_TactilePatternRange, High) == 0x00000C, "Member 'FSSGS_TactilePatternRange::High' has a wrong offset!");
static_assert(offsetof(FSSGS_TactilePatternRange, Pattern) == 0x000010, "Member 'FSSGS_TactilePatternRange::Pattern' has a wrong offset!");

}

