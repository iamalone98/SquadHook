#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UMG_VoteFaction

#include "Basic.hpp"

#include "Squad_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "SQFactionSetupEntry_structs.hpp"
#include "SQFactionEntry_structs.hpp"


namespace SDK::Params
{

// Function UMG_VoteFaction.UMG_VoteFaction_C.FactionInfoRequested__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct UMG_VoteFaction_C_FactionInfoRequested__DelegateSignature final
{
public:
	class FName                                   Faction;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_VoteFaction_C_FactionInfoRequested__DelegateSignature) == 0x000004, "Wrong alignment on UMG_VoteFaction_C_FactionInfoRequested__DelegateSignature");
static_assert(sizeof(UMG_VoteFaction_C_FactionInfoRequested__DelegateSignature) == 0x000008, "Wrong size on UMG_VoteFaction_C_FactionInfoRequested__DelegateSignature");
static_assert(offsetof(UMG_VoteFaction_C_FactionInfoRequested__DelegateSignature, Faction) == 0x000000, "Member 'UMG_VoteFaction_C_FactionInfoRequested__DelegateSignature::Faction' has a wrong offset!");

// Function UMG_VoteFaction.UMG_VoteFaction_C.ExecuteUbergraph_UMG_VoteFaction
// 0x0060 (0x0060 - 0x0000)
struct UMG_VoteFaction_C_ExecuteUbergraph_UMG_VoteFaction final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41E4[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class USQVoteSessionClient*                   K2Node_Event_VoteSession_1;                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_PlayerCurrentVoteCount;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41E5[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQVoteSessionClient*                   K2Node_Event_VoteSession;                          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_VotePossible;                         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Event_Activated;                            // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0023(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0024(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_VoteFaction_C_ExecuteUbergraph_UMG_VoteFaction) == 0x000008, "Wrong alignment on UMG_VoteFaction_C_ExecuteUbergraph_UMG_VoteFaction");
static_assert(sizeof(UMG_VoteFaction_C_ExecuteUbergraph_UMG_VoteFaction) == 0x000060, "Wrong size on UMG_VoteFaction_C_ExecuteUbergraph_UMG_VoteFaction");
static_assert(offsetof(UMG_VoteFaction_C_ExecuteUbergraph_UMG_VoteFaction, EntryPoint) == 0x000000, "Member 'UMG_VoteFaction_C_ExecuteUbergraph_UMG_VoteFaction::EntryPoint' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_ExecuteUbergraph_UMG_VoteFaction, Temp_byte_Variable) == 0x000004, "Member 'UMG_VoteFaction_C_ExecuteUbergraph_UMG_VoteFaction::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_ExecuteUbergraph_UMG_VoteFaction, Temp_byte_Variable_1) == 0x000005, "Member 'UMG_VoteFaction_C_ExecuteUbergraph_UMG_VoteFaction::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_ExecuteUbergraph_UMG_VoteFaction, K2Node_Event_VoteSession_1) == 0x000008, "Member 'UMG_VoteFaction_C_ExecuteUbergraph_UMG_VoteFaction::K2Node_Event_VoteSession_1' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_ExecuteUbergraph_UMG_VoteFaction, K2Node_Event_PlayerCurrentVoteCount) == 0x000010, "Member 'UMG_VoteFaction_C_ExecuteUbergraph_UMG_VoteFaction::K2Node_Event_PlayerCurrentVoteCount' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_ExecuteUbergraph_UMG_VoteFaction, K2Node_Event_VoteSession) == 0x000018, "Member 'UMG_VoteFaction_C_ExecuteUbergraph_UMG_VoteFaction::K2Node_Event_VoteSession' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_ExecuteUbergraph_UMG_VoteFaction, K2Node_Event_VotePossible) == 0x000020, "Member 'UMG_VoteFaction_C_ExecuteUbergraph_UMG_VoteFaction::K2Node_Event_VotePossible' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_ExecuteUbergraph_UMG_VoteFaction, K2Node_Event_Activated) == 0x000021, "Member 'UMG_VoteFaction_C_ExecuteUbergraph_UMG_VoteFaction::K2Node_Event_Activated' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_ExecuteUbergraph_UMG_VoteFaction, Temp_bool_Variable) == 0x000022, "Member 'UMG_VoteFaction_C_ExecuteUbergraph_UMG_VoteFaction::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_ExecuteUbergraph_UMG_VoteFaction, K2Node_Select_Default) == 0x000023, "Member 'UMG_VoteFaction_C_ExecuteUbergraph_UMG_VoteFaction::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_ExecuteUbergraph_UMG_VoteFaction, K2Node_Event_MyGeometry) == 0x000024, "Member 'UMG_VoteFaction_C_ExecuteUbergraph_UMG_VoteFaction::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_ExecuteUbergraph_UMG_VoteFaction, K2Node_Event_InDeltaTime) == 0x00005C, "Member 'UMG_VoteFaction_C_ExecuteUbergraph_UMG_VoteFaction::K2Node_Event_InDeltaTime' has a wrong offset!");

// Function UMG_VoteFaction.UMG_VoteFaction_C.Tick
// 0x003C (0x003C - 0x0000)
struct UMG_VoteFaction_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_VoteFaction_C_Tick) == 0x000004, "Wrong alignment on UMG_VoteFaction_C_Tick");
static_assert(sizeof(UMG_VoteFaction_C_Tick) == 0x00003C, "Wrong size on UMG_VoteFaction_C_Tick");
static_assert(offsetof(UMG_VoteFaction_C_Tick, MyGeometry) == 0x000000, "Member 'UMG_VoteFaction_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Tick, InDeltaTime) == 0x000038, "Member 'UMG_VoteFaction_C_Tick::InDeltaTime' has a wrong offset!");

// Function UMG_VoteFaction.UMG_VoteFaction_C.SetVoteScreenActive
// 0x0001 (0x0001 - 0x0000)
struct UMG_VoteFaction_C_SetVoteScreenActive final
{
public:
	bool                                          Activated;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UMG_VoteFaction_C_SetVoteScreenActive) == 0x000001, "Wrong alignment on UMG_VoteFaction_C_SetVoteScreenActive");
static_assert(sizeof(UMG_VoteFaction_C_SetVoteScreenActive) == 0x000001, "Wrong size on UMG_VoteFaction_C_SetVoteScreenActive");
static_assert(offsetof(UMG_VoteFaction_C_SetVoteScreenActive, Activated) == 0x000000, "Member 'UMG_VoteFaction_C_SetVoteScreenActive::Activated' has a wrong offset!");

// Function UMG_VoteFaction.UMG_VoteFaction_C.OnVoteStarted
// 0x0010 (0x0010 - 0x0000)
struct UMG_VoteFaction_C_OnVoteStarted final
{
public:
	class USQVoteSessionClient*                   VoteSession;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VotePossible;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UMG_VoteFaction_C_OnVoteStarted) == 0x000008, "Wrong alignment on UMG_VoteFaction_C_OnVoteStarted");
static_assert(sizeof(UMG_VoteFaction_C_OnVoteStarted) == 0x000010, "Wrong size on UMG_VoteFaction_C_OnVoteStarted");
static_assert(offsetof(UMG_VoteFaction_C_OnVoteStarted, VoteSession) == 0x000000, "Member 'UMG_VoteFaction_C_OnVoteStarted::VoteSession' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_OnVoteStarted, VotePossible) == 0x000008, "Member 'UMG_VoteFaction_C_OnVoteStarted::VotePossible' has a wrong offset!");

// Function UMG_VoteFaction.UMG_VoteFaction_C.OnVoteUpdated
// 0x0010 (0x0010 - 0x0000)
struct UMG_VoteFaction_C_OnVoteUpdated final
{
public:
	class USQVoteSessionClient*                   VoteSession;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayerCurrentVoteCount;                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_VoteFaction_C_OnVoteUpdated) == 0x000008, "Wrong alignment on UMG_VoteFaction_C_OnVoteUpdated");
static_assert(sizeof(UMG_VoteFaction_C_OnVoteUpdated) == 0x000010, "Wrong size on UMG_VoteFaction_C_OnVoteUpdated");
static_assert(offsetof(UMG_VoteFaction_C_OnVoteUpdated, VoteSession) == 0x000000, "Member 'UMG_VoteFaction_C_OnVoteUpdated::VoteSession' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_OnVoteUpdated, PlayerCurrentVoteCount) == 0x000008, "Member 'UMG_VoteFaction_C_OnVoteUpdated::PlayerCurrentVoteCount' has a wrong offset!");

// Function UMG_VoteFaction.UMG_VoteFaction_C.GetTeamWidget
// 0x0038 (0x0038 - 0x0000)
struct UMG_VoteFaction_C_GetTeamWidget final
{
public:
	int32                                         TeamId;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41E6[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMG_VoteFactionTeam_C*                 TeamWidget;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41E7[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMG_VoteFactionTeam_C*                 Temp_object_Variable;                              // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMG_VoteFactionTeam_C*                 Temp_object_Variable_1;                            // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMG_VoteFactionTeam_C*                 Temp_object_Variable_2;                            // 0x0028(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMG_VoteFactionTeam_C*                 K2Node_Select_Default;                             // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_VoteFaction_C_GetTeamWidget) == 0x000008, "Wrong alignment on UMG_VoteFaction_C_GetTeamWidget");
static_assert(sizeof(UMG_VoteFaction_C_GetTeamWidget) == 0x000038, "Wrong size on UMG_VoteFaction_C_GetTeamWidget");
static_assert(offsetof(UMG_VoteFaction_C_GetTeamWidget, TeamId) == 0x000000, "Member 'UMG_VoteFaction_C_GetTeamWidget::TeamId' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_GetTeamWidget, TeamWidget) == 0x000008, "Member 'UMG_VoteFaction_C_GetTeamWidget::TeamWidget' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_GetTeamWidget, Temp_int_Variable) == 0x000010, "Member 'UMG_VoteFaction_C_GetTeamWidget::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_GetTeamWidget, Temp_object_Variable) == 0x000018, "Member 'UMG_VoteFaction_C_GetTeamWidget::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_GetTeamWidget, Temp_object_Variable_1) == 0x000020, "Member 'UMG_VoteFaction_C_GetTeamWidget::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_GetTeamWidget, Temp_object_Variable_2) == 0x000028, "Member 'UMG_VoteFaction_C_GetTeamWidget::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_GetTeamWidget, K2Node_Select_Default) == 0x000030, "Member 'UMG_VoteFaction_C_GetTeamWidget::K2Node_Select_Default' has a wrong offset!");

// Function UMG_VoteFaction.UMG_VoteFaction_C.SelectWidget
// 0x0028 (0x0028 - 0x0000)
struct UMG_VoteFaction_C_SelectWidget final
{
public:
	class USQVoteSession*                         VoteSession;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMG_VoteFactionTeam_C*                 TeamWidget;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetId_ReturnValue;                        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_IsFactionVoteId_OutTeamId;                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFactionVoteId_ReturnValue;              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41E8[0x3];                                     // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMG_VoteFactionTeam_C*                 CallFunc_GetTeamWidget_TeamWidget;                 // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_VoteFaction_C_SelectWidget) == 0x000008, "Wrong alignment on UMG_VoteFaction_C_SelectWidget");
static_assert(sizeof(UMG_VoteFaction_C_SelectWidget) == 0x000028, "Wrong size on UMG_VoteFaction_C_SelectWidget");
static_assert(offsetof(UMG_VoteFaction_C_SelectWidget, VoteSession) == 0x000000, "Member 'UMG_VoteFaction_C_SelectWidget::VoteSession' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_SelectWidget, TeamWidget) == 0x000008, "Member 'UMG_VoteFaction_C_SelectWidget::TeamWidget' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_SelectWidget, CallFunc_GetId_ReturnValue) == 0x000010, "Member 'UMG_VoteFaction_C_SelectWidget::CallFunc_GetId_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_SelectWidget, CallFunc_IsFactionVoteId_OutTeamId) == 0x000018, "Member 'UMG_VoteFaction_C_SelectWidget::CallFunc_IsFactionVoteId_OutTeamId' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_SelectWidget, CallFunc_IsFactionVoteId_ReturnValue) == 0x00001C, "Member 'UMG_VoteFaction_C_SelectWidget::CallFunc_IsFactionVoteId_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_SelectWidget, CallFunc_GetTeamWidget_TeamWidget) == 0x000020, "Member 'UMG_VoteFaction_C_SelectWidget::CallFunc_GetTeamWidget_TeamWidget' has a wrong offset!");

// Function UMG_VoteFaction.UMG_VoteFaction_C.UpdateActivations
// 0x0010 (0x0010 - 0x0000)
struct UMG_VoteFaction_C_UpdateActivations final
{
public:
	class UUMG_VoteFactionTeam_C*                 VoteFactionTeam;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Active;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UMG_VoteFaction_C_UpdateActivations) == 0x000008, "Wrong alignment on UMG_VoteFaction_C_UpdateActivations");
static_assert(sizeof(UMG_VoteFaction_C_UpdateActivations) == 0x000010, "Wrong size on UMG_VoteFaction_C_UpdateActivations");
static_assert(offsetof(UMG_VoteFaction_C_UpdateActivations, VoteFactionTeam) == 0x000000, "Member 'UMG_VoteFaction_C_UpdateActivations::VoteFactionTeam' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_UpdateActivations, Active) == 0x000008, "Member 'UMG_VoteFaction_C_UpdateActivations::Active' has a wrong offset!");

// Function UMG_VoteFaction.UMG_VoteFaction_C.Generate Items
// 0x0818 (0x0818 - 0x0000)
struct UMG_VoteFaction_C_Generate_Items final
{
public:
	class USQVoteSessionClient*                   Vote_Session;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Local_TeamTexture;                                 // 0x0008(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class FName                                   Local_ChoiceID;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Local_ArrayIndex;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisplayVoteCount;                                  // 0x003C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41E9[0x3];                                     // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetId_ReturnValue;                        // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_IsFactionVoteId_OutTeamId;                // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFactionVoteId_ReturnValue;              // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41EA[0x3];                                     // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41EB[0x7];                                     // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQChoice                              CallFunc_Array_Get_Item;                           // 0x0068(0x0018)(NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41EC[0x3];                                     // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMG_VoteItem_C*                        CallFunc_Create_ReturnValue;                       // 0x0088(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName ChoiceId)>         K2Node_CreateDelegate_OutputDelegate;              // 0x0094(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_41ED[0x4];                                     // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQGameState*                           CallFunc_GetSquadGameState_Return_Value;           // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASQGameState*                           CallFunc_GetSquadGameState_Return_Value_1;         // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName Choice)>           K2Node_CreateDelegate_OutputDelegate_1;            // 0x00B8(0x0010)(ZeroConstructor, NoDestructor)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateChildSize                        K2Node_MakeStruct_SlateChildSize;                  // 0x00D0(0x0008)(NoDestructor)
	class UHorizontalBox*                         K2Node_Select_Default;                             // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USQGameInstance*                        CallFunc_GetSquadGameInstance_ReturnValue;         // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBoxSlot*                     CallFunc_AddChildToHorizontalBox_ReturnValue;      // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USQLayer*                               CallFunc_DetermineLayerFromName_OutLayer;          // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DetermineLayerFromName_ReturnValue;       // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41EE[0x7];                                     // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_SQLayer_C*                          K2Node_DynamicCast_AsBP_SQLayer;                   // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41EF[0x7];                                     // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQFactionSetup*                        CallFunc_GetFactionSetupByID_ReturnValue;          // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetOuterLevel_Out_Success;                // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41F0[0x7];                                     // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_SQLevel_C*                          CallFunc_GetOuterLevel_OuterLevel;                 // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_SQFactionSetup_C*                   K2Node_DynamicCast_AsBP_SQFaction_Setup;           // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41F1[0x6];                                     // 0x0132(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              CallFunc_GetUnitTypeIcon_Icon;                     // 0x0138(0x0028)(HasGetValueTypeHash)
	class FText                                   CallFunc_GetUnitTypeIcon_TypeName;                 // 0x0160(0x0018)()
	bool                                          CallFunc_TryGetFactionSetupEntry_Success;          // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41F2[0x7];                                     // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQFactionSetupEntry                   CallFunc_TryGetFactionSetupEntry_FactionSetupEntry; // 0x0180(0x00A8)(HasGetValueTypeHash)
	bool                                          CallFunc_TryGetFactionEntry_Success;               // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41F3[0x7];                                     // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQFactionEntry                        CallFunc_TryGetFactionEntry_FactionEntry;          // 0x0230(0x0580)(HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UTexture2D>>      CallFunc_Map_Values_Values;                        // 0x07B0(0x0010)(ReferenceParm)
	TSoftObjectPtr<class UTexture2D>              CallFunc_Array_Get_Item_1;                         // 0x07C0(0x0028)(HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              CallFunc_Map_Find_Value;                           // 0x07E8(0x0028)(HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0810(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UMG_VoteFaction_C_Generate_Items) == 0x000008, "Wrong alignment on UMG_VoteFaction_C_Generate_Items");
static_assert(sizeof(UMG_VoteFaction_C_Generate_Items) == 0x000818, "Wrong size on UMG_VoteFaction_C_Generate_Items");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, Vote_Session) == 0x000000, "Member 'UMG_VoteFaction_C_Generate_Items::Vote_Session' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, Local_TeamTexture) == 0x000008, "Member 'UMG_VoteFaction_C_Generate_Items::Local_TeamTexture' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, Local_ChoiceID) == 0x000030, "Member 'UMG_VoteFaction_C_Generate_Items::Local_ChoiceID' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, Local_ArrayIndex) == 0x000038, "Member 'UMG_VoteFaction_C_Generate_Items::Local_ArrayIndex' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, DisplayVoteCount) == 0x00003C, "Member 'UMG_VoteFaction_C_Generate_Items::DisplayVoteCount' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, Temp_int_Array_Index_Variable) == 0x000040, "Member 'UMG_VoteFaction_C_Generate_Items::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, Temp_int_Loop_Counter_Variable) == 0x000044, "Member 'UMG_VoteFaction_C_Generate_Items::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_GetId_ReturnValue) == 0x000048, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_GetId_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_Add_IntInt_ReturnValue) == 0x000050, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_IsFactionVoteId_OutTeamId) == 0x000054, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_IsFactionVoteId_OutTeamId' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_IsFactionVoteId_ReturnValue) == 0x000058, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_IsFactionVoteId_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_Add_IntInt_ReturnValue_1) == 0x00005C, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_IsValid_ReturnValue) == 0x000060, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_Array_Get_Item) == 0x000068, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_Array_Length_ReturnValue) == 0x000080, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_Less_IntInt_ReturnValue) == 0x000084, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_Create_ReturnValue) == 0x000088, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_Divide_IntInt_ReturnValue) == 0x000090, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, K2Node_CreateDelegate_OutputDelegate) == 0x000094, "Member 'UMG_VoteFaction_C_Generate_Items::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_GetSquadGameState_Return_Value) == 0x0000A8, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_GetSquadGameState_Return_Value' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_GetSquadGameState_Return_Value_1) == 0x0000B0, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_GetSquadGameState_Return_Value_1' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, K2Node_CreateDelegate_OutputDelegate_1) == 0x0000B8, "Member 'UMG_VoteFaction_C_Generate_Items::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_Array_Add_ReturnValue) == 0x0000C8, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, Temp_int_Variable) == 0x0000CC, "Member 'UMG_VoteFaction_C_Generate_Items::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, K2Node_MakeStruct_SlateChildSize) == 0x0000D0, "Member 'UMG_VoteFaction_C_Generate_Items::K2Node_MakeStruct_SlateChildSize' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, K2Node_Select_Default) == 0x0000D8, "Member 'UMG_VoteFaction_C_Generate_Items::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_GetSquadGameInstance_ReturnValue) == 0x0000E0, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_GetSquadGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_AddChildToHorizontalBox_ReturnValue) == 0x0000E8, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_AddChildToHorizontalBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_DetermineLayerFromName_OutLayer) == 0x0000F0, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_DetermineLayerFromName_OutLayer' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_DetermineLayerFromName_ReturnValue) == 0x0000F8, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_DetermineLayerFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, K2Node_DynamicCast_AsBP_SQLayer) == 0x000100, "Member 'UMG_VoteFaction_C_Generate_Items::K2Node_DynamicCast_AsBP_SQLayer' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, K2Node_DynamicCast_bSuccess) == 0x000108, "Member 'UMG_VoteFaction_C_Generate_Items::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_GetFactionSetupByID_ReturnValue) == 0x000110, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_GetFactionSetupByID_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_GetOuterLevel_Out_Success) == 0x000118, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_GetOuterLevel_Out_Success' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_GetOuterLevel_OuterLevel) == 0x000120, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_GetOuterLevel_OuterLevel' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, K2Node_DynamicCast_AsBP_SQFaction_Setup) == 0x000128, "Member 'UMG_VoteFaction_C_Generate_Items::K2Node_DynamicCast_AsBP_SQFaction_Setup' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, K2Node_DynamicCast_bSuccess_1) == 0x000130, "Member 'UMG_VoteFaction_C_Generate_Items::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_IsValid_ReturnValue_1) == 0x000131, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_GetUnitTypeIcon_Icon) == 0x000138, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_GetUnitTypeIcon_Icon' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_GetUnitTypeIcon_TypeName) == 0x000160, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_GetUnitTypeIcon_TypeName' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_TryGetFactionSetupEntry_Success) == 0x000178, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_TryGetFactionSetupEntry_Success' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_TryGetFactionSetupEntry_FactionSetupEntry) == 0x000180, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_TryGetFactionSetupEntry_FactionSetupEntry' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_TryGetFactionEntry_Success) == 0x000228, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_TryGetFactionEntry_Success' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_TryGetFactionEntry_FactionEntry) == 0x000230, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_TryGetFactionEntry_FactionEntry' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_Map_Values_Values) == 0x0007B0, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_Array_Get_Item_1) == 0x0007C0, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_Map_Find_Value) == 0x0007E8, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Generate_Items, CallFunc_Map_Find_ReturnValue) == 0x000810, "Member 'UMG_VoteFaction_C_Generate_Items::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function UMG_VoteFaction.UMG_VoteFaction_C.UpdateChoiceByID
// 0x0028 (0x0028 - 0x0000)
struct UMG_VoteFaction_C_UpdateChoiceByID final
{
public:
	class FName                                   ChoiceId;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMG_VoteItem_C*                        CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UMG_VoteFaction_C_UpdateChoiceByID) == 0x000008, "Wrong alignment on UMG_VoteFaction_C_UpdateChoiceByID");
static_assert(sizeof(UMG_VoteFaction_C_UpdateChoiceByID) == 0x000028, "Wrong size on UMG_VoteFaction_C_UpdateChoiceByID");
static_assert(offsetof(UMG_VoteFaction_C_UpdateChoiceByID, ChoiceId) == 0x000000, "Member 'UMG_VoteFaction_C_UpdateChoiceByID::ChoiceId' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_UpdateChoiceByID, Temp_int_Array_Index_Variable) == 0x000008, "Member 'UMG_VoteFaction_C_UpdateChoiceByID::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_UpdateChoiceByID, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'UMG_VoteFaction_C_UpdateChoiceByID::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_UpdateChoiceByID, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'UMG_VoteFaction_C_UpdateChoiceByID::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_UpdateChoiceByID, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'UMG_VoteFaction_C_UpdateChoiceByID::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_UpdateChoiceByID, CallFunc_Array_Get_Item) == 0x000018, "Member 'UMG_VoteFaction_C_UpdateChoiceByID::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_UpdateChoiceByID, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'UMG_VoteFaction_C_UpdateChoiceByID::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_UpdateChoiceByID, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000021, "Member 'UMG_VoteFaction_C_UpdateChoiceByID::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function UMG_VoteFaction.UMG_VoteFaction_C.OnChoiceSelected
// 0x0008 (0x0008 - 0x0000)
struct UMG_VoteFaction_C_OnChoiceSelected final
{
public:
	class FName                                   Choice;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_VoteFaction_C_OnChoiceSelected) == 0x000004, "Wrong alignment on UMG_VoteFaction_C_OnChoiceSelected");
static_assert(sizeof(UMG_VoteFaction_C_OnChoiceSelected) == 0x000008, "Wrong size on UMG_VoteFaction_C_OnChoiceSelected");
static_assert(offsetof(UMG_VoteFaction_C_OnChoiceSelected, Choice) == 0x000000, "Member 'UMG_VoteFaction_C_OnChoiceSelected::Choice' has a wrong offset!");

// Function UMG_VoteFaction.UMG_VoteFaction_C.Update Choices
// 0x0030 (0x0030 - 0x0000)
struct UMG_VoteFaction_C_Update_Choices final
{
public:
	class USQVoteSessionClient*                   Vote_Session;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Player_Current_Vote_Count;                         // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41F4[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMG_VoteItem_C*                        CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UMG_VoteFaction_C_Update_Choices) == 0x000008, "Wrong alignment on UMG_VoteFaction_C_Update_Choices");
static_assert(sizeof(UMG_VoteFaction_C_Update_Choices) == 0x000030, "Wrong size on UMG_VoteFaction_C_Update_Choices");
static_assert(offsetof(UMG_VoteFaction_C_Update_Choices, Vote_Session) == 0x000000, "Member 'UMG_VoteFaction_C_Update_Choices::Vote_Session' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Update_Choices, Player_Current_Vote_Count) == 0x000008, "Member 'UMG_VoteFaction_C_Update_Choices::Player_Current_Vote_Count' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Update_Choices, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'UMG_VoteFaction_C_Update_Choices::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Update_Choices, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'UMG_VoteFaction_C_Update_Choices::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Update_Choices, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'UMG_VoteFaction_C_Update_Choices::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Update_Choices, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'UMG_VoteFaction_C_Update_Choices::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Update_Choices, CallFunc_Array_Get_Item) == 0x000020, "Member 'UMG_VoteFaction_C_Update_Choices::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(UMG_VoteFaction_C_Update_Choices, CallFunc_Less_IntInt_ReturnValue) == 0x000028, "Member 'UMG_VoteFaction_C_Update_Choices::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function UMG_VoteFaction.UMG_VoteFaction_C.OnInfoSelected
// 0x0008 (0x0008 - 0x0000)
struct UMG_VoteFaction_C_OnInfoSelected final
{
public:
	class FName                                   ChoiceId;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_VoteFaction_C_OnInfoSelected) == 0x000004, "Wrong alignment on UMG_VoteFaction_C_OnInfoSelected");
static_assert(sizeof(UMG_VoteFaction_C_OnInfoSelected) == 0x000008, "Wrong size on UMG_VoteFaction_C_OnInfoSelected");
static_assert(offsetof(UMG_VoteFaction_C_OnInfoSelected, ChoiceId) == 0x000000, "Member 'UMG_VoteFaction_C_OnInfoSelected::ChoiceId' has a wrong offset!");

}

