#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_R2T_Weapon

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Squad_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_R2T_Weapon.BP_R2T_Weapon_C
// 0x0230 (0x0470 - 0x0240)
class ABP_R2T_Weapon_C final : public ASceneCapture2D
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0240(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPointLightComponent*                   PointLight2;                                       // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight1;                                        // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight1;                                       // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Preview_Weapon;                                    // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        WeaponCenter;                                      // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          R2T_Weapon_Rendering_Active;                       // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32E6[0x7];                                     // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshComponent*>           AttachmentMeshes3P;                                // 0x0280(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class UClass*, class UStaticMeshComponent*> AttachmentToMeshes3P;                              // 0x0290(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UClass*                                 Cache_Weapon;                                      // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   WeaponToDisplay;                                   // 0x02E8(0x0028)(Edit, BlueprintVisible, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class USQItemSkinCollection>   SkinToDisplay;                                     // 0x0310(0x0028)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	float                                         RotationRate;                                      // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               DefaultRotation;                                   // 0x033C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         DefaultDistance;                                   // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeUntilReturn;                                   // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSQItemSkinSlot                        CurrentSkinSlot;                                   // 0x0350(0x00F8)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         TargetZoom;                                        // 0x0448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseConstruction;                                  // 0x044C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_32E7[0x3];                                     // 0x044D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotationInterpSpeed;                               // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotationReturnSpeed;                               // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TargetRotation;                                    // 0x0458(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bRotating;                                         // 0x0464(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32E8[0x3];                                     // 0x0465(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ReturnRotationTimerHandle;                         // 0x0468(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_R2T_Weapon(int32 EntryPoint);
	void ReleaseClick();
	void SetZoom(float Zoom);
	void MouseWheel(float WheelAxis);
	void UpdateCamera();
	void StopReturnRotation();
	void BeginReturnRotation();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void Set_Render_Weapon_Mesh();
	void Set_Rendering(bool Active);
	void Get_Role_Info(class USkeletalMeshComponent** Soldier_Mesh, class USkeletalMeshComponent** Weapon_Mesh);
	void Manage_Attachments(bool Create);
	void UpdateRenderMesh(TSoftClassPtr<class UClass> Weapon, TSoftObjectPtr<class USQItemSkinCollection> Skin);
	void ApplySkin(class USQItemSkinCollection* SkinCollection);
	void ApplyAttachmentSkins(class USQItemSkinCollection* SkinCollection);
	void ClearAttachments();
	void MouseMoveAxis(float XAxisValue, float YAxisValue);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_R2T_Weapon_C">();
	}
	static class ABP_R2T_Weapon_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_R2T_Weapon_C>();
	}
};
static_assert(alignof(ABP_R2T_Weapon_C) == 0x000008, "Wrong alignment on ABP_R2T_Weapon_C");
static_assert(sizeof(ABP_R2T_Weapon_C) == 0x000470, "Wrong size on ABP_R2T_Weapon_C");
static_assert(offsetof(ABP_R2T_Weapon_C, UberGraphFrame) == 0x000240, "Member 'ABP_R2T_Weapon_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_R2T_Weapon_C, PointLight2) == 0x000248, "Member 'ABP_R2T_Weapon_C::PointLight2' has a wrong offset!");
static_assert(offsetof(ABP_R2T_Weapon_C, SpotLight1) == 0x000250, "Member 'ABP_R2T_Weapon_C::SpotLight1' has a wrong offset!");
static_assert(offsetof(ABP_R2T_Weapon_C, SpotLight) == 0x000258, "Member 'ABP_R2T_Weapon_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_R2T_Weapon_C, PointLight1) == 0x000260, "Member 'ABP_R2T_Weapon_C::PointLight1' has a wrong offset!");
static_assert(offsetof(ABP_R2T_Weapon_C, Preview_Weapon) == 0x000268, "Member 'ABP_R2T_Weapon_C::Preview_Weapon' has a wrong offset!");
static_assert(offsetof(ABP_R2T_Weapon_C, WeaponCenter) == 0x000270, "Member 'ABP_R2T_Weapon_C::WeaponCenter' has a wrong offset!");
static_assert(offsetof(ABP_R2T_Weapon_C, R2T_Weapon_Rendering_Active) == 0x000278, "Member 'ABP_R2T_Weapon_C::R2T_Weapon_Rendering_Active' has a wrong offset!");
static_assert(offsetof(ABP_R2T_Weapon_C, AttachmentMeshes3P) == 0x000280, "Member 'ABP_R2T_Weapon_C::AttachmentMeshes3P' has a wrong offset!");
static_assert(offsetof(ABP_R2T_Weapon_C, AttachmentToMeshes3P) == 0x000290, "Member 'ABP_R2T_Weapon_C::AttachmentToMeshes3P' has a wrong offset!");
static_assert(offsetof(ABP_R2T_Weapon_C, Cache_Weapon) == 0x0002E0, "Member 'ABP_R2T_Weapon_C::Cache_Weapon' has a wrong offset!");
static_assert(offsetof(ABP_R2T_Weapon_C, WeaponToDisplay) == 0x0002E8, "Member 'ABP_R2T_Weapon_C::WeaponToDisplay' has a wrong offset!");
static_assert(offsetof(ABP_R2T_Weapon_C, SkinToDisplay) == 0x000310, "Member 'ABP_R2T_Weapon_C::SkinToDisplay' has a wrong offset!");
static_assert(offsetof(ABP_R2T_Weapon_C, RotationRate) == 0x000338, "Member 'ABP_R2T_Weapon_C::RotationRate' has a wrong offset!");
static_assert(offsetof(ABP_R2T_Weapon_C, DefaultRotation) == 0x00033C, "Member 'ABP_R2T_Weapon_C::DefaultRotation' has a wrong offset!");
static_assert(offsetof(ABP_R2T_Weapon_C, DefaultDistance) == 0x000348, "Member 'ABP_R2T_Weapon_C::DefaultDistance' has a wrong offset!");
static_assert(offsetof(ABP_R2T_Weapon_C, TimeUntilReturn) == 0x00034C, "Member 'ABP_R2T_Weapon_C::TimeUntilReturn' has a wrong offset!");
static_assert(offsetof(ABP_R2T_Weapon_C, CurrentSkinSlot) == 0x000350, "Member 'ABP_R2T_Weapon_C::CurrentSkinSlot' has a wrong offset!");
static_assert(offsetof(ABP_R2T_Weapon_C, TargetZoom) == 0x000448, "Member 'ABP_R2T_Weapon_C::TargetZoom' has a wrong offset!");
static_assert(offsetof(ABP_R2T_Weapon_C, bUseConstruction) == 0x00044C, "Member 'ABP_R2T_Weapon_C::bUseConstruction' has a wrong offset!");
static_assert(offsetof(ABP_R2T_Weapon_C, RotationInterpSpeed) == 0x000450, "Member 'ABP_R2T_Weapon_C::RotationInterpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_R2T_Weapon_C, RotationReturnSpeed) == 0x000454, "Member 'ABP_R2T_Weapon_C::RotationReturnSpeed' has a wrong offset!");
static_assert(offsetof(ABP_R2T_Weapon_C, TargetRotation) == 0x000458, "Member 'ABP_R2T_Weapon_C::TargetRotation' has a wrong offset!");
static_assert(offsetof(ABP_R2T_Weapon_C, bRotating) == 0x000464, "Member 'ABP_R2T_Weapon_C::bRotating' has a wrong offset!");
static_assert(offsetof(ABP_R2T_Weapon_C, ReturnRotationTimerHandle) == 0x000468, "Member 'ABP_R2T_Weapon_C::ReturnRotationTimerHandle' has a wrong offset!");

}

