#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SquadLoadingScreen

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class SquadLoadingScreen.SQLoadingScreenSettings
// 0x04D0 (0x0508 - 0x0038)
class USQLoadingScreenSettings final : public UDeveloperSettings
{
public:
	TSoftObjectPtr<class UTexture2D>              DefaultLoadingScreen;                              // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              DefaultLoadingScreenUltraWide;                     // 0x0060(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              DefaultPreviewImage;                               // 0x0088(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              FallbackLoadingScreen;                             // 0x00B0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              FallbackLoadingScreenUltraWide;                    // 0x00D8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              TipTable;                                          // 0x0100(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   NowDeployingText;                                  // 0x0128(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)
	class FText                                   TipsHeaderText;                                    // 0x0140(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush_DescriptionBorder;                           // 0x0158(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)
	struct FSlateBrush                            Brush_Throbber;                                    // 0x01E0(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)
	int32                                         ThrobberSpriteSheetWidth;                          // 0x0268(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThrobberSpriteSheetHeight;                         // 0x026C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThrobberFlipBookSpeed;                             // 0x0270(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bThrobberAnimateHorizontally;                      // 0x0274(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bThrobberAnimateVertically;                        // 0x0275(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bThrobberAnimateOpacity;                           // 0x0276(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1761[0x1];                                     // 0x0277(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         Font_NowDeployingText;                             // 0x0278(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font_Description;                                  // 0x02D0(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font_Level;                                        // 0x0328(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font_Layer;                                        // 0x0380(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font_GameMode;                                     // 0x03D8(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font_TipsHeader;                                   // 0x0430(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         Font_Tip;                                          // 0x0488(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color_Base;                                        // 0x04E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color_Accent;                                      // 0x04F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TipRotateTime;                                     // 0x0500(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1762[0x4];                                     // 0x0504(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQLoadingScreenSettings">();
	}
	static class USQLoadingScreenSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQLoadingScreenSettings>();
	}
};
static_assert(alignof(USQLoadingScreenSettings) == 0x000008, "Wrong alignment on USQLoadingScreenSettings");
static_assert(sizeof(USQLoadingScreenSettings) == 0x000508, "Wrong size on USQLoadingScreenSettings");
static_assert(offsetof(USQLoadingScreenSettings, DefaultLoadingScreen) == 0x000038, "Member 'USQLoadingScreenSettings::DefaultLoadingScreen' has a wrong offset!");
static_assert(offsetof(USQLoadingScreenSettings, DefaultLoadingScreenUltraWide) == 0x000060, "Member 'USQLoadingScreenSettings::DefaultLoadingScreenUltraWide' has a wrong offset!");
static_assert(offsetof(USQLoadingScreenSettings, DefaultPreviewImage) == 0x000088, "Member 'USQLoadingScreenSettings::DefaultPreviewImage' has a wrong offset!");
static_assert(offsetof(USQLoadingScreenSettings, FallbackLoadingScreen) == 0x0000B0, "Member 'USQLoadingScreenSettings::FallbackLoadingScreen' has a wrong offset!");
static_assert(offsetof(USQLoadingScreenSettings, FallbackLoadingScreenUltraWide) == 0x0000D8, "Member 'USQLoadingScreenSettings::FallbackLoadingScreenUltraWide' has a wrong offset!");
static_assert(offsetof(USQLoadingScreenSettings, TipTable) == 0x000100, "Member 'USQLoadingScreenSettings::TipTable' has a wrong offset!");
static_assert(offsetof(USQLoadingScreenSettings, NowDeployingText) == 0x000128, "Member 'USQLoadingScreenSettings::NowDeployingText' has a wrong offset!");
static_assert(offsetof(USQLoadingScreenSettings, TipsHeaderText) == 0x000140, "Member 'USQLoadingScreenSettings::TipsHeaderText' has a wrong offset!");
static_assert(offsetof(USQLoadingScreenSettings, Brush_DescriptionBorder) == 0x000158, "Member 'USQLoadingScreenSettings::Brush_DescriptionBorder' has a wrong offset!");
static_assert(offsetof(USQLoadingScreenSettings, Brush_Throbber) == 0x0001E0, "Member 'USQLoadingScreenSettings::Brush_Throbber' has a wrong offset!");
static_assert(offsetof(USQLoadingScreenSettings, ThrobberSpriteSheetWidth) == 0x000268, "Member 'USQLoadingScreenSettings::ThrobberSpriteSheetWidth' has a wrong offset!");
static_assert(offsetof(USQLoadingScreenSettings, ThrobberSpriteSheetHeight) == 0x00026C, "Member 'USQLoadingScreenSettings::ThrobberSpriteSheetHeight' has a wrong offset!");
static_assert(offsetof(USQLoadingScreenSettings, ThrobberFlipBookSpeed) == 0x000270, "Member 'USQLoadingScreenSettings::ThrobberFlipBookSpeed' has a wrong offset!");
static_assert(offsetof(USQLoadingScreenSettings, bThrobberAnimateHorizontally) == 0x000274, "Member 'USQLoadingScreenSettings::bThrobberAnimateHorizontally' has a wrong offset!");
static_assert(offsetof(USQLoadingScreenSettings, bThrobberAnimateVertically) == 0x000275, "Member 'USQLoadingScreenSettings::bThrobberAnimateVertically' has a wrong offset!");
static_assert(offsetof(USQLoadingScreenSettings, bThrobberAnimateOpacity) == 0x000276, "Member 'USQLoadingScreenSettings::bThrobberAnimateOpacity' has a wrong offset!");
static_assert(offsetof(USQLoadingScreenSettings, Font_NowDeployingText) == 0x000278, "Member 'USQLoadingScreenSettings::Font_NowDeployingText' has a wrong offset!");
static_assert(offsetof(USQLoadingScreenSettings, Font_Description) == 0x0002D0, "Member 'USQLoadingScreenSettings::Font_Description' has a wrong offset!");
static_assert(offsetof(USQLoadingScreenSettings, Font_Level) == 0x000328, "Member 'USQLoadingScreenSettings::Font_Level' has a wrong offset!");
static_assert(offsetof(USQLoadingScreenSettings, Font_Layer) == 0x000380, "Member 'USQLoadingScreenSettings::Font_Layer' has a wrong offset!");
static_assert(offsetof(USQLoadingScreenSettings, Font_GameMode) == 0x0003D8, "Member 'USQLoadingScreenSettings::Font_GameMode' has a wrong offset!");
static_assert(offsetof(USQLoadingScreenSettings, Font_TipsHeader) == 0x000430, "Member 'USQLoadingScreenSettings::Font_TipsHeader' has a wrong offset!");
static_assert(offsetof(USQLoadingScreenSettings, Font_Tip) == 0x000488, "Member 'USQLoadingScreenSettings::Font_Tip' has a wrong offset!");
static_assert(offsetof(USQLoadingScreenSettings, Color_Base) == 0x0004E0, "Member 'USQLoadingScreenSettings::Color_Base' has a wrong offset!");
static_assert(offsetof(USQLoadingScreenSettings, Color_Accent) == 0x0004F0, "Member 'USQLoadingScreenSettings::Color_Accent' has a wrong offset!");
static_assert(offsetof(USQLoadingScreenSettings, TipRotateTime) == 0x000500, "Member 'USQLoadingScreenSettings::TipRotateTime' has a wrong offset!");

}

