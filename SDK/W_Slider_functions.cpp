#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Slider

#include "Basic.hpp"

#include "W_Slider_classes.hpp"
#include "W_Slider_parameters.hpp"


namespace SDK
{

// Function W_Slider.W_Slider_C.OnValueChanged__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Slider_C::OnValueChanged__DelegateSignature(float NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Slider_C", "OnValueChanged__DelegateSignature");

	Params::W_Slider_C_OnValueChanged__DelegateSignature Parms{};

	Parms.NewParam = NewParam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Slider.W_Slider_C.OnCaptureEnd__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_Value                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Slider_C::OnCaptureEnd__DelegateSignature(float Param_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Slider_C", "OnCaptureEnd__DelegateSignature");

	Params::W_Slider_C_OnCaptureEnd__DelegateSignature Parms{};

	Parms.Param_Value = Param_Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Slider.W_Slider_C.ExecuteUbergraph_W_Slider
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Slider_C::ExecuteUbergraph_W_Slider(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Slider_C", "ExecuteUbergraph_W_Slider");

	Params::W_Slider_C_ExecuteUbergraph_W_Slider Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Slider.W_Slider_C.BndEvt__BaseSlider_K2Node_ComponentBoundEvent_3_OnMouseCaptureEndEvent__DelegateSignature
// (BlueprintEvent)

void UW_Slider_C::BndEvt__BaseSlider_K2Node_ComponentBoundEvent_3_OnMouseCaptureEndEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Slider_C", "BndEvt__BaseSlider_K2Node_ComponentBoundEvent_3_OnMouseCaptureEndEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Slider.W_Slider_C.BndEvt__SliderValue_K2Node_ComponentBoundEvent_2_OnEditableTextCommittedEvent__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// ETextCommit                             CommitMethod                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Slider_C::BndEvt__SliderValue_K2Node_ComponentBoundEvent_2_OnEditableTextCommittedEvent__DelegateSignature(const class FText& Text, ETextCommit CommitMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Slider_C", "BndEvt__SliderValue_K2Node_ComponentBoundEvent_2_OnEditableTextCommittedEvent__DelegateSignature");

	Params::W_Slider_C_BndEvt__SliderValue_K2Node_ComponentBoundEvent_2_OnEditableTextCommittedEvent__DelegateSignature Parms{};

	Parms.Text = std::move(Text);
	Parms.CommitMethod = CommitMethod;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Slider.W_Slider_C.BndEvt__SliderValue_K2Node_ComponentBoundEvent_1_OnEditableTextChangedEvent__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UW_Slider_C::BndEvt__SliderValue_K2Node_ComponentBoundEvent_1_OnEditableTextChangedEvent__DelegateSignature(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Slider_C", "BndEvt__SliderValue_K2Node_ComponentBoundEvent_1_OnEditableTextChangedEvent__DelegateSignature");

	Params::W_Slider_C_BndEvt__SliderValue_K2Node_ComponentBoundEvent_1_OnEditableTextChangedEvent__DelegateSignature Parms{};

	Parms.Text = std::move(Text);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Slider.W_Slider_C.BndEvt__BaseSlider_K2Node_ComponentBoundEvent_0_OnFloatValueChangedEvent__DelegateSignature
// (BlueprintEvent)
// Parameters:
// float                                   Param_Value                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Slider_C::BndEvt__BaseSlider_K2Node_ComponentBoundEvent_0_OnFloatValueChangedEvent__DelegateSignature(float Param_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Slider_C", "BndEvt__BaseSlider_K2Node_ComponentBoundEvent_0_OnFloatValueChangedEvent__DelegateSignature");

	Params::W_Slider_C_BndEvt__BaseSlider_K2Node_ComponentBoundEvent_0_OnFloatValueChangedEvent__DelegateSignature Parms{};

	Parms.Param_Value = Param_Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Slider.W_Slider_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UW_Slider_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Slider_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Slider.W_Slider_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UW_Slider_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Slider_C", "PreConstruct");

	Params::W_Slider_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Slider.W_Slider_C.SetValue
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_Value                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_Slider_C::SetValue(float Param_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Slider_C", "SetValue");

	Params::W_Slider_C_SetValue Parms{};

	Parms.Param_Value = Param_Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_Slider.W_Slider_C.UpdateSliderTextValue
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UW_Slider_C::UpdateSliderTextValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Slider_C", "UpdateSliderTextValue");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Slider.W_Slider_C.UpdateSliderValue
// (Public, BlueprintCallable, BlueprintEvent)

void UW_Slider_C::UpdateSliderValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Slider_C", "UpdateSliderValue");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Slider.W_Slider_C.RemovePercentage
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             InText                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FText                             OutText                                                (Parm, OutParm)

void UW_Slider_C::RemovePercentage(const class FText& InText, class FText* OutText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Slider_C", "RemovePercentage");

	Params::W_Slider_C_RemovePercentage Parms{};

	Parms.InText = std::move(InText);

	UObject::ProcessEvent(Func, &Parms);

	if (OutText != nullptr)
		*OutText = std::move(Parms.OutText);
}


// Function W_Slider.W_Slider_C.GetTextColor
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Param_Value                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor                     Param_TextColor                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             WarningText                                            (Parm, OutParm)

void UW_Slider_C::GetTextColor(float Param_Value, struct FLinearColor* Param_TextColor, class FText* WarningText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Slider_C", "GetTextColor");

	Params::W_Slider_C_GetTextColor Parms{};

	Parms.Param_Value = Param_Value;

	UObject::ProcessEvent(Func, &Parms);

	if (Param_TextColor != nullptr)
		*Param_TextColor = std::move(Parms.Param_TextColor);

	if (WarningText != nullptr)
		*WarningText = std::move(Parms.WarningText);
}


// Function W_Slider.W_Slider_C.UpdateStyle
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UW_Slider_C::UpdateStyle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Slider_C", "UpdateStyle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_Slider.W_Slider_C.RoundingToPower
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   InputPin                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UW_Slider_C::RoundingToPower(float InputPin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Slider_C", "RoundingToPower");

	Params::W_Slider_C_RoundingToPower Parms{};

	Parms.InputPin = InputPin;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_Slider.W_Slider_C.UpdateSliderStyle
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSliderStyle                     WidgetStyle                                            (BlueprintVisible, BlueprintReadOnly, Parm)
// struct FSliderStyle                     NewParam                                               (Parm, OutParm)

void UW_Slider_C::UpdateSliderStyle(const struct FSliderStyle& WidgetStyle, struct FSliderStyle* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_Slider_C", "UpdateSliderStyle");

	Params::W_Slider_C_UpdateSliderStyle Parms{};

	Parms.WidgetStyle = std::move(WidgetStyle);

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = std::move(Parms.NewParam);
}

}

