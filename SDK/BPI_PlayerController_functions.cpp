#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_PlayerController

#include "Basic.hpp"

#include "BPI_PlayerController_classes.hpp"
#include "BPI_PlayerController_parameters.hpp"


namespace SDK
{

// Function BPI_PlayerController.BPI_PlayerController_C.Trace Marker
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          End                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USQMapMarkerDataAsset*            Marker                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Hotkey                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Emote                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UClass*                           MarkerClass                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerController_C::Trace_Marker(const struct FVector& Start, const struct FVector& End, class USQMapMarkerDataAsset* Marker, bool Hotkey, bool Emote, class UClass* MarkerClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerController_C", "Trace Marker");

	Params::BPI_PlayerController_C_Trace_Marker Parms{};

	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.Marker = Marker;
	Parms.Hotkey = Hotkey;
	Parms.Emote = Emote;
	Parms.MarkerClass = MarkerClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerController.BPI_PlayerController_C.Set Selected Marker
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQMapWidgetMapMarkerSelectable*  Marker_Ref                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerController_C::Set_Selected_Marker(class USQMapWidgetMapMarkerSelectable* Marker_Ref)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerController_C", "Set Selected Marker");

	Params::BPI_PlayerController_C_Set_Selected_Marker Parms{};

	Parms.Marker_Ref = Marker_Ref;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerController.BPI_PlayerController_C.Clear Selected Marker
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_PlayerController_C::Clear_Selected_Marker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerController_C", "Clear Selected Marker");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_PlayerController.BPI_PlayerController_C.bCan Place Marker
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Can_Place                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_PlayerController_C::bCan_Place_Marker(bool* Can_Place)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerController_C", "bCan Place Marker");

	Params::BPI_PlayerController_C_bCan_Place_Marker Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Can_Place != nullptr)
		*Can_Place = Parms.Can_Place;
}


// Function BPI_PlayerController.BPI_PlayerController_C.bCan Remove Marker
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Can_Remove                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_PlayerController_C::bCan_Remove_Marker(bool* Can_Remove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerController_C", "bCan Remove Marker");

	Params::BPI_PlayerController_C_bCan_Remove_Marker Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Can_Remove != nullptr)
		*Can_Remove = Parms.Can_Remove;
}


// Function BPI_PlayerController.BPI_PlayerController_C.SetAllowAdminCam
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bAllowAdminCam                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_PlayerController_C::SetAllowAdminCam(bool bAllowAdminCam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerController_C", "SetAllowAdminCam");

	Params::BPI_PlayerController_C_SetAllowAdminCam Parms{};

	Parms.bAllowAdminCam = bAllowAdminCam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerController.BPI_PlayerController_C.Play Emote
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESQEmotes                               Emote                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             Param_Name                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerController_C::Play_Emote(ESQEmotes Emote, class FName Param_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerController_C", "Play Emote");

	Params::BPI_PlayerController_C_Play_Emote Parms{};

	Parms.Emote = Emote;
	Parms.Param_Name = Param_Name;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerController.BPI_PlayerController_C.Request Map Marker
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Squad_ID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ESQTeam                                 Team_ID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Fire_Team_ID                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector_NetQuantize              Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FVector_NetQuantize              DistanceRotation                                       (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class USQMapMarkerDataAsset*            Map_Marker_Data                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerController_C::Request_Map_Marker(int32 Squad_ID, ESQTeam Team_ID, int32 Fire_Team_ID, const struct FVector_NetQuantize& Location, const struct FVector_NetQuantize& DistanceRotation, class USQMapMarkerDataAsset* Map_Marker_Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerController_C", "Request Map Marker");

	Params::BPI_PlayerController_C_Request_Map_Marker Parms{};

	Parms.Squad_ID = Squad_ID;
	Parms.Team_ID = Team_ID;
	Parms.Fire_Team_ID = Fire_Team_ID;
	Parms.Location = std::move(Location);
	Parms.DistanceRotation = std::move(DistanceRotation);
	Parms.Map_Marker_Data = Map_Marker_Data;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerController.BPI_PlayerController_C.Request Marker
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Marker_Class                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Fire_Team_ID                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Emote                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_PlayerController_C::Request_Marker(class UClass* Marker_Class, const struct FVector& Location, int32 Fire_Team_ID, bool Emote)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerController_C", "Request Marker");

	Params::BPI_PlayerController_C_Request_Marker Parms{};

	Parms.Marker_Class = Marker_Class;
	Parms.Location = std::move(Location);
	Parms.Fire_Team_ID = Fire_Team_ID;
	Parms.Emote = Emote;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerController.BPI_PlayerController_C.Remove Map Marker New
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   MapMarkerID                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerController_C::Remove_Map_Marker_New(uint8 MapMarkerID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerController_C", "Remove Map Marker New");

	Params::BPI_PlayerController_C_Remove_Map_Marker_New Parms{};

	Parms.MapMarkerID = MapMarkerID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerController.BPI_PlayerController_C.Request Director Marker
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Director_Marker                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Squad_ID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerController_C::Request_Director_Marker(class UClass* Director_Marker, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, float Distance, int32 Squad_ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerController_C", "Request Director Marker");

	Params::BPI_PlayerController_C_Request_Director_Marker Parms{};

	Parms.Director_Marker = Director_Marker;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Scale = std::move(Scale);
	Parms.Distance = Distance;
	Parms.Squad_ID = Squad_ID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerController.BPI_PlayerController_C.Request Command Marker
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Command_Marker                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// float                                   Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerController_C::Request_Command_Marker(class UClass* Command_Marker, const struct FTransform& Transform, float Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerController_C", "Request Command Marker");

	Params::BPI_PlayerController_C_Request_Command_Marker Parms{};

	Parms.Command_Marker = Command_Marker;
	Parms.Transform = std::move(Transform);
	Parms.Distance = Distance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerController.BPI_PlayerController_C.Remove Selected Marker
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_PlayerController_C::Remove_Selected_Marker()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerController_C", "Remove Selected Marker");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_PlayerController.BPI_PlayerController_C.Get Last Selected Marker
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQMapWidgetMapMarkerSelectable*  Marker                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerController_C::Get_Last_Selected_Marker(class USQMapWidgetMapMarkerSelectable** Marker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerController_C", "Get Last Selected Marker");

	Params::BPI_PlayerController_C_Get_Last_Selected_Marker Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Marker != nullptr)
		*Marker = Parms.Marker;
}


// Function BPI_PlayerController.BPI_PlayerController_C.Get Command Action Condition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Condition_Class                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerController_C::Get_Command_Action_Condition(class UClass** Condition_Class)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerController_C", "Get Command Action Condition");

	Params::BPI_PlayerController_C_Get_Command_Action_Condition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Condition_Class != nullptr)
		*Condition_Class = Parms.Condition_Class;
}


// Function BPI_PlayerController.BPI_PlayerController_C.Accept Deny Command Request
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_MapMarker_Command_Request_C*  Marker                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Accepted                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_PlayerController_C::Accept_Deny_Command_Request(class ABP_MapMarker_Command_Request_C* Marker, bool Accepted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerController_C", "Accept Deny Command Request");

	Params::BPI_PlayerController_C_Accept_Deny_Command_Request Parms{};

	Parms.Marker = Marker;
	Parms.Accepted = Accepted;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerController.BPI_PlayerController_C.Get Command Request Available
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Available                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Remaining_Time                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerController_C::Get_Command_Request_Available(bool* Available, float* Remaining_Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerController_C", "Get Command Request Available");

	Params::BPI_PlayerController_C_Get_Command_Request_Available Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Available != nullptr)
		*Available = Parms.Available;

	if (Remaining_Time != nullptr)
		*Remaining_Time = Parms.Remaining_Time;
}


// Function BPI_PlayerController.BPI_PlayerController_C.Set Last Command Request Time
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_PlayerController_C::Set_Last_Command_Request_Time()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerController_C", "Set Last Command Request Time");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPI_PlayerController.BPI_PlayerController_C.bCanRemoveMapMarkerNew
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_MapMarker_Selectable_C*       Map_Marker                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Can_Remove                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_PlayerController_C::bCanRemoveMapMarkerNew(class UBP_MapMarker_Selectable_C* Map_Marker, bool* Can_Remove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPI_PlayerController_C", "bCanRemoveMapMarkerNew");

	Params::BPI_PlayerController_C_bCanRemoveMapMarkerNew Parms{};

	Parms.Map_Marker = Map_Marker;

	UObject::ProcessEvent(Func, &Parms);

	if (Can_Remove != nullptr)
		*Can_Remove = Parms.Can_Remove;
}

}

