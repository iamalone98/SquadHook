#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_RoleItem

#include "Basic.hpp"

#include "W_RoleItem_classes.hpp"
#include "W_RoleItem_parameters.hpp"


namespace SDK
{

// Function W_RoleItem.W_RoleItem_C.Role Selected__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQRoleSettings*                  Role                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_RoleItem_C::Role_Selected__DelegateSignature(class USQRoleSettings* Role)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "Role Selected__DelegateSignature");

	Params::W_RoleItem_C_Role_Selected__DelegateSignature Parms{};

	Parms.Role = Role;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_RoleItem.W_RoleItem_C.Role Hovered__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQRoleSettings*                  Role                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Hovered                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UW_RoleItem_C*                    Button_Reference                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bSubRole                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UW_RoleItem_C::Role_Hovered__DelegateSignature(class USQRoleSettings* Role, bool Hovered, class UW_RoleItem_C* Button_Reference, bool bSubRole)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "Role Hovered__DelegateSignature");

	Params::W_RoleItem_C_Role_Hovered__DelegateSignature Parms{};

	Parms.Role = Role;
	Parms.Hovered = Hovered;
	Parms.Button_Reference = Button_Reference;
	Parms.bSubRole = bSubRole;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_RoleItem.W_RoleItem_C.ExecuteUbergraph_W_RoleItem
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_RoleItem_C::ExecuteUbergraph_W_RoleItem(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "ExecuteUbergraph_W_RoleItem");

	Params::W_RoleItem_C_ExecuteUbergraph_W_RoleItem Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_RoleItem.W_RoleItem_C.On Button Pressed
// (BlueprintCallable, BlueprintEvent)

void UW_RoleItem_C::On_Button_Pressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "On Button Pressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_RoleItem.W_RoleItem_C.OnRoleChange
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQRoleSettings*                  In_Current_Role                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_RoleItem_C::OnRoleChange(class USQRoleSettings* In_Current_Role)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "OnRoleChange");

	Params::W_RoleItem_C_OnRoleChange Parms{};

	Parms.In_Current_Role = In_Current_Role;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_RoleItem.W_RoleItem_C.On Tick
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSQAvailabilityState_Role>In_Player_Role_States                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void UW_RoleItem_C::On_Tick(const TArray<struct FSQAvailabilityState_Role>& In_Player_Role_States)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "On Tick");

	Params::W_RoleItem_C_On_Tick Parms{};

	Parms.In_Player_Role_States = std::move(In_Player_Role_States);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_RoleItem.W_RoleItem_C.SubRole Selected
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQRoleSettings*                  Role                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_RoleItem_C::SubRole_Selected(class USQRoleSettings* Role)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "SubRole Selected");

	Params::W_RoleItem_C_SubRole_Selected Parms{};

	Parms.Role = Role;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_RoleItem.W_RoleItem_C.Select Role
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQRoleSettings*                  In_Selected_Role                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_RoleItem_C::Select_Role(class USQRoleSettings* In_Selected_Role)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "Select Role");

	Params::W_RoleItem_C_Select_Role Parms{};

	Parms.In_Selected_Role = In_Selected_Role;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_RoleItem.W_RoleItem_C.BndEvt__Button_SquadMember_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature
// (BlueprintEvent)

void UW_RoleItem_C::BndEvt__Button_SquadMember_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "BndEvt__Button_SquadMember_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_RoleItem.W_RoleItem_C.BndEvt__Button_SquadMember_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature
// (BlueprintEvent)

void UW_RoleItem_C::BndEvt__Button_SquadMember_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "BndEvt__Button_SquadMember_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_RoleItem.W_RoleItem_C.BndEvt__Button_SquadMember_K2Node_ComponentBoundEvent_16_OnButtonPressedEvent__DelegateSignature
// (BlueprintEvent)

void UW_RoleItem_C::BndEvt__Button_SquadMember_K2Node_ComponentBoundEvent_16_OnButtonPressedEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "BndEvt__Button_SquadMember_K2Node_ComponentBoundEvent_16_OnButtonPressedEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_RoleItem.W_RoleItem_C.Get State Color
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    In_Selected                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    In_Locked                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FLinearColor                     Out_Color                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_RoleItem_C::Get_State_Color(bool In_Selected, bool In_Locked, struct FLinearColor* Out_Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "Get State Color");

	Params::W_RoleItem_C_Get_State_Color Parms{};

	Parms.In_Selected = In_Selected;
	Parms.In_Locked = In_Locked;

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Color != nullptr)
		*Out_Color = std::move(Parms.Out_Color);
}


// Function W_RoleItem.W_RoleItem_C.Open Sub Roles
// (Public, BlueprintCallable, BlueprintEvent)

void UW_RoleItem_C::Open_Sub_Roles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "Open Sub Roles");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_RoleItem.W_RoleItem_C.AddSubRoleItem
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSQAvailabilityState_Role        InTeamRoleAvailabilityState                            (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)

void UW_RoleItem_C::AddSubRoleItem(const struct FSQAvailabilityState_Role& InTeamRoleAvailabilityState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "AddSubRoleItem");

	Params::W_RoleItem_C_AddSubRoleItem Parms{};

	Parms.InTeamRoleAvailabilityState = std::move(InTeamRoleAvailabilityState);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_RoleItem.W_RoleItem_C.CreateSubRoleWidget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSQAvailabilityState_Role        InState                                                (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)

void UW_RoleItem_C::CreateSubRoleWidget(const struct FSQAvailabilityState_Role& InState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "CreateSubRoleWidget");

	Params::W_RoleItem_C_CreateSubRoleWidget Parms{};

	Parms.InState = std::move(InState);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_RoleItem.W_RoleItem_C.HasThisTagGrouping
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FSQRoleGroupingStrategy          InTagGrouping                                          (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    OutHasMatchingTagGrouping                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UW_RoleItem_C::HasThisTagGrouping(const struct FSQRoleGroupingStrategy& InTagGrouping, bool* OutHasMatchingTagGrouping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "HasThisTagGrouping");

	Params::W_RoleItem_C_HasThisTagGrouping Parms{};

	Parms.InTagGrouping = std::move(InTagGrouping);

	UObject::ProcessEvent(Func, &Parms);

	if (OutHasMatchingTagGrouping != nullptr)
		*OutHasMatchingTagGrouping = Parms.OutHasMatchingTagGrouping;
}


// Function W_RoleItem.W_RoleItem_C.SetTagGrouping
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSQRoleGroupingStrategy          InTagGroupingStrategy                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UW_RoleItem_C::SetTagGrouping(const struct FSQRoleGroupingStrategy& InTagGroupingStrategy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "SetTagGrouping");

	Params::W_RoleItem_C_SetTagGrouping Parms{};

	Parms.InTagGroupingStrategy = std::move(InTagGroupingStrategy);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_RoleItem.W_RoleItem_C.GetRoleEntry
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   In_Index                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FFSQRoleEntry                    OutEntry                                               (Parm, OutParm, HasGetValueTypeHash)

void UW_RoleItem_C::GetRoleEntry(int32 In_Index, struct FFSQRoleEntry* OutEntry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "GetRoleEntry");

	Params::W_RoleItem_C_GetRoleEntry Parms{};

	Parms.In_Index = In_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (OutEntry != nullptr)
		*OutEntry = std::move(Parms.OutEntry);
}


// Function W_RoleItem.W_RoleItem_C.GetIcon
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   InIndex                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSoftObjectPtr<class UTexture2D>        OutIcon                                                (Parm, OutParm, HasGetValueTypeHash)

void UW_RoleItem_C::GetIcon(int32 InIndex, TSoftObjectPtr<class UTexture2D>* OutIcon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "GetIcon");

	Params::W_RoleItem_C_GetIcon Parms{};

	Parms.InIndex = InIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (OutIcon != nullptr)
		*OutIcon = Parms.OutIcon;
}


// Function W_RoleItem.W_RoleItem_C.GetDisplayName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   InIndex                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             OutDisplayName                                         (Parm, OutParm)

void UW_RoleItem_C::GetDisplayName(int32 InIndex, class FText* OutDisplayName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "GetDisplayName");

	Params::W_RoleItem_C_GetDisplayName Parms{};

	Parms.InIndex = InIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (OutDisplayName != nullptr)
		*OutDisplayName = std::move(Parms.OutDisplayName);
}


// Function W_RoleItem.W_RoleItem_C.GetWeaponImage
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   InIndex                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSoftObjectPtr<class UTexture2D>        OutIcon                                                (Parm, OutParm, HasGetValueTypeHash)

void UW_RoleItem_C::GetWeaponImage(int32 InIndex, TSoftObjectPtr<class UTexture2D>* OutIcon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "GetWeaponImage");

	Params::W_RoleItem_C_GetWeaponImage Parms{};

	Parms.InIndex = InIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (OutIcon != nullptr)
		*OutIcon = Parms.OutIcon;
}


// Function W_RoleItem.W_RoleItem_C.SetupExposition
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UW_RoleItem_C::SetupExposition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "SetupExposition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_RoleItem.W_RoleItem_C.PlayerIsNotSpawned
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Out_Is_NOT_Spawned                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UW_RoleItem_C::PlayerIsNotSpawned(bool* Out_Is_NOT_Spawned)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "PlayerIsNotSpawned");

	Params::W_RoleItem_C_PlayerIsNotSpawned Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Is_NOT_Spawned != nullptr)
		*Out_Is_NOT_Spawned = Parms.Out_Is_NOT_Spawned;
}


// Function W_RoleItem.W_RoleItem_C.TryGetFirstRole
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Out_Success                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class USQRoleSettings*                  Out_Role_Setting                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_RoleItem_C::TryGetFirstRole(bool* Out_Success, class USQRoleSettings** Out_Role_Setting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "TryGetFirstRole");

	Params::W_RoleItem_C_TryGetFirstRole Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Success != nullptr)
		*Out_Success = Parms.Out_Success;

	if (Out_Role_Setting != nullptr)
		*Out_Role_Setting = Parms.Out_Role_Setting;
}


// Function W_RoleItem.W_RoleItem_C.IsRoleAlreadySelected
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USQRoleSettings*                  In_Role_Setting                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Out_Not_Selected_Yet                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UW_RoleItem_C::IsRoleAlreadySelected(class USQRoleSettings* In_Role_Setting, bool* Out_Not_Selected_Yet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "IsRoleAlreadySelected");

	Params::W_RoleItem_C_IsRoleAlreadySelected Parms{};

	Parms.In_Role_Setting = In_Role_Setting;

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Not_Selected_Yet != nullptr)
		*Out_Not_Selected_Yet = Parms.Out_Not_Selected_Yet;
}


// Function W_RoleItem.W_RoleItem_C.ShouldHideThisItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Out_ShouldHide                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UW_RoleItem_C::ShouldHideThisItem(bool* Out_ShouldHide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "ShouldHideThisItem");

	Params::W_RoleItem_C_ShouldHideThisItem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out_ShouldHide != nullptr)
		*Out_ShouldHide = Parms.Out_ShouldHide;
}


// Function W_RoleItem.W_RoleItem_C.SetRoleVisible
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InVisible                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UW_RoleItem_C::SetRoleVisible(bool InVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "SetRoleVisible");

	Params::W_RoleItem_C_SetRoleVisible Parms{};

	Parms.InVisible = InVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_RoleItem.W_RoleItem_C.UpdateLocalStates
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSQAvailabilityState_Role>In_Player_Role_States                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void UW_RoleItem_C::UpdateLocalStates(TArray<struct FSQAvailabilityState_Role>& In_Player_Role_States)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "UpdateLocalStates");

	Params::W_RoleItem_C_UpdateLocalStates Parms{};

	Parms.In_Player_Role_States = std::move(In_Player_Role_States);

	UObject::ProcessEvent(Func, &Parms);

	In_Player_Role_States = std::move(Parms.In_Player_Role_States);
}


// Function W_RoleItem.W_RoleItem_C.UpdateSubOptions
// (Public, BlueprintCallable, BlueprintEvent)

void UW_RoleItem_C::UpdateSubOptions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "UpdateSubOptions");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_RoleItem.W_RoleItem_C.IsAvailable
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Out_Is_Available                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UW_RoleItem_C::IsAvailable(bool* Out_Is_Available)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "IsAvailable");

	Params::W_RoleItem_C_IsAvailable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Is_Available != nullptr)
		*Out_Is_Available = Parms.Out_Is_Available;
}


// Function W_RoleItem.W_RoleItem_C.GetWidgetSwitcherIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   In_Availability                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Out_Widget_Switcher_Index                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_RoleItem_C::GetWidgetSwitcherIndex(int32 In_Availability, int32* Out_Widget_Switcher_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "GetWidgetSwitcherIndex");

	Params::W_RoleItem_C_GetWidgetSwitcherIndex Parms{};

	Parms.In_Availability = In_Availability;

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Widget_Switcher_Index != nullptr)
		*Out_Widget_Switcher_Index = Parms.Out_Widget_Switcher_Index;
}


// Function W_RoleItem.W_RoleItem_C.GetCounts
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Out_Used                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Out_Availability                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_RoleItem_C::GetCounts(int32* Out_Used, int32* Out_Availability)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "GetCounts");

	Params::W_RoleItem_C_GetCounts Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Used != nullptr)
		*Out_Used = Parms.Out_Used;

	if (Out_Availability != nullptr)
		*Out_Availability = Parms.Out_Availability;
}


// Function W_RoleItem.W_RoleItem_C.IsSelectedRole
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Out_Selected                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UW_RoleItem_C::IsSelectedRole(bool* Out_Selected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "IsSelectedRole");

	Params::W_RoleItem_C_IsSelectedRole Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Selected != nullptr)
		*Out_Selected = Parms.Out_Selected;
}


// Function W_RoleItem.W_RoleItem_C.UpdateExposition
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UW_RoleItem_C::UpdateExposition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "UpdateExposition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_RoleItem.W_RoleItem_C.GetUnavailabilityReason
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   InIndex                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             OutReason                                              (Parm, OutParm)

void UW_RoleItem_C::GetUnavailabilityReason(int32 InIndex, class FText* OutReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "GetUnavailabilityReason");

	Params::W_RoleItem_C_GetUnavailabilityReason Parms{};

	Parms.InIndex = InIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (OutReason != nullptr)
		*OutReason = std::move(Parms.OutReason);
}


// Function W_RoleItem.W_RoleItem_C.IsItemMatching
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USQRoleSettings*                  In_Setting                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Is_Matching                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UW_RoleItem_C::IsItemMatching(class USQRoleSettings* In_Setting, bool* Is_Matching)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "IsItemMatching");

	Params::W_RoleItem_C_IsItemMatching Parms{};

	Parms.In_Setting = In_Setting;

	UObject::ProcessEvent(Func, &Parms);

	if (Is_Matching != nullptr)
		*Is_Matching = Parms.Is_Matching;
}


// Function W_RoleItem.W_RoleItem_C.IsButtonHovered
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Is_Hovered                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UW_RoleItem_C::IsButtonHovered(bool* Is_Hovered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "IsButtonHovered");

	Params::W_RoleItem_C_IsButtonHovered Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Is_Hovered != nullptr)
		*Is_Hovered = Parms.Is_Hovered;
}


// Function W_RoleItem.W_RoleItem_C.Close Sub Roles
// (Public, BlueprintCallable, BlueprintEvent)

void UW_RoleItem_C::Close_Sub_Roles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "Close Sub Roles");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_RoleItem.W_RoleItem_C.GetRole
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   In_Index                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Out_Success                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UBP_SQRoleSettings_C*             OutEntry                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_RoleItem_C::GetRole(int32 In_Index, bool* Out_Success, class UBP_SQRoleSettings_C** OutEntry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "GetRole");

	Params::W_RoleItem_C_GetRole Parms{};

	Parms.In_Index = In_Index;

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Success != nullptr)
		*Out_Success = Parms.Out_Success;

	if (OutEntry != nullptr)
		*OutEntry = Parms.OutEntry;
}


// Function W_RoleItem.W_RoleItem_C.GetCountText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             Out_CountText                                          (Parm, OutParm)

void UW_RoleItem_C::GetCountText(class FText* Out_CountText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RoleItem_C", "GetCountText");

	Params::W_RoleItem_C_GetCountText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out_CountText != nullptr)
		*Out_CountText = std::move(Parms.Out_CountText);
}

}

