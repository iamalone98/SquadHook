#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SQFactionSetup

#include "Basic.hpp"

#include "BP_SQFactionSetup_classes.hpp"
#include "BP_SQFactionSetup_parameters.hpp"


namespace SDK
{

// Function BP_SQFactionSetup.BP_SQFactionSetup_C.TryGetRoleGroupingStrategies
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<struct FSQRoleGroupingStrategy>  Param_RoleGroupingStrategies                           (Parm, OutParm)

void UBP_SQFactionSetup_C::TryGetRoleGroupingStrategies(bool* Success, TArray<struct FSQRoleGroupingStrategy>* Param_RoleGroupingStrategies)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQFactionSetup_C", "TryGetRoleGroupingStrategies");

	Params::BP_SQFactionSetup_C_TryGetRoleGroupingStrategies Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (Param_RoleGroupingStrategies != nullptr)
		*Param_RoleGroupingStrategies = std::move(Parms.Param_RoleGroupingStrategies);
}


// Function BP_SQFactionSetup.BP_SQFactionSetup_C.TryGetRoleCategories
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    OutSuccess                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<struct FSQRoleGroupingStrategy>  OutRoleCategories                                      (Parm, OutParm)

void UBP_SQFactionSetup_C::TryGetRoleCategories(bool* OutSuccess, TArray<struct FSQRoleGroupingStrategy>* OutRoleCategories)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQFactionSetup_C", "TryGetRoleCategories");

	Params::BP_SQFactionSetup_C_TryGetRoleCategories Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutSuccess != nullptr)
		*OutSuccess = Parms.OutSuccess;

	if (OutRoleCategories != nullptr)
		*OutRoleCategories = std::move(Parms.OutRoleCategories);
}


// Function BP_SQFactionSetup.BP_SQFactionSetup_C.TryGetRoleGroupingTags
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    OutSuccess                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<struct FSQRoleGroupingStrategy>  OutGroupTags                                           (Parm, OutParm)

void UBP_SQFactionSetup_C::TryGetRoleGroupingTags(bool* OutSuccess, TArray<struct FSQRoleGroupingStrategy>* OutGroupTags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQFactionSetup_C", "TryGetRoleGroupingTags");

	Params::BP_SQFactionSetup_C_TryGetRoleGroupingTags Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutSuccess != nullptr)
		*OutSuccess = Parms.OutSuccess;

	if (OutGroupTags != nullptr)
		*OutGroupTags = std::move(Parms.OutGroupTags);
}


// Function BP_SQFactionSetup.BP_SQFactionSetup_C.TryGetDeployableGroupingStrategies
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<struct FSQDeployableGroupingStrategy>Grouping_Strategies                                    (Parm, OutParm)

void UBP_SQFactionSetup_C::TryGetDeployableGroupingStrategies(bool* Success, TArray<struct FSQDeployableGroupingStrategy>* Grouping_Strategies)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQFactionSetup_C", "TryGetDeployableGroupingStrategies");

	Params::BP_SQFactionSetup_C_TryGetDeployableGroupingStrategies Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (Grouping_Strategies != nullptr)
		*Grouping_Strategies = std::move(Parms.Grouping_Strategies);
}


// Function BP_SQFactionSetup.BP_SQFactionSetup_C.TryGetActionGroupingStrategies
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<struct FSQActionGroupingStrategy>Grouping_Strategies                                    (Parm, OutParm)

void UBP_SQFactionSetup_C::TryGetActionGroupingStrategies(bool* Success, TArray<struct FSQActionGroupingStrategy>* Grouping_Strategies)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQFactionSetup_C", "TryGetActionGroupingStrategies");

	Params::BP_SQFactionSetup_C_TryGetActionGroupingStrategies Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (Grouping_Strategies != nullptr)
		*Grouping_Strategies = std::move(Parms.Grouping_Strategies);
}


// Function BP_SQFactionSetup.BP_SQFactionSetup_C.HasIntel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ESQIntelligence                         In_Intel                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Out_Has_Intel                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_SQFactionSetup_C::HasIntel(ESQIntelligence In_Intel, bool* Out_Has_Intel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQFactionSetup_C", "HasIntel");

	Params::BP_SQFactionSetup_C_HasIntel Parms{};

	Parms.In_Intel = In_Intel;

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Has_Intel != nullptr)
		*Out_Has_Intel = Parms.Out_Has_Intel;
}


// Function BP_SQFactionSetup.BP_SQFactionSetup_C.GetUnitTypeIcon
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        Icon                                                   (Parm, OutParm, HasGetValueTypeHash)
// class FText                             TypeName                                               (Parm, OutParm)

void UBP_SQFactionSetup_C::GetUnitTypeIcon(TSoftObjectPtr<class UTexture2D>* Icon, class FText* TypeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQFactionSetup_C", "GetUnitTypeIcon");

	Params::BP_SQFactionSetup_C_GetUnitTypeIcon Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Icon != nullptr)
		*Icon = Parms.Icon;

	if (TypeName != nullptr)
		*TypeName = std::move(Parms.TypeName);
}


// Function BP_SQFactionSetup.BP_SQFactionSetup_C.TryGetFactionSetupEntry
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FSQFactionSetupEntry             FactionSetupEntry                                      (Parm, OutParm, HasGetValueTypeHash)

void UBP_SQFactionSetup_C::TryGetFactionSetupEntry(bool* Success, struct FSQFactionSetupEntry* FactionSetupEntry) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQFactionSetup_C", "TryGetFactionSetupEntry");

	Params::BP_SQFactionSetup_C_TryGetFactionSetupEntry Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (FactionSetupEntry != nullptr)
		*FactionSetupEntry = std::move(Parms.FactionSetupEntry);
}


// Function BP_SQFactionSetup.BP_SQFactionSetup_C.TryGetFactionEntry
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FSQFactionEntry                  FactionEntry                                           (Parm, OutParm, HasGetValueTypeHash)

void UBP_SQFactionSetup_C::TryGetFactionEntry(bool* Success, struct FSQFactionEntry* FactionEntry) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQFactionSetup_C", "TryGetFactionEntry");

	Params::BP_SQFactionSetup_C_TryGetFactionEntry Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (FactionEntry != nullptr)
		*FactionEntry = std::move(Parms.FactionEntry);
}


// Function BP_SQFactionSetup.BP_SQFactionSetup_C.GetOuterFaction
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    Out_Success                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UBP_SQFaction_C*                  Param_OuterFaction                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SQFactionSetup_C::GetOuterFaction(bool* Out_Success, class UBP_SQFaction_C** Param_OuterFaction) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQFactionSetup_C", "GetOuterFaction");

	Params::BP_SQFactionSetup_C_GetOuterFaction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Success != nullptr)
		*Out_Success = Parms.Out_Success;

	if (Param_OuterFaction != nullptr)
		*Param_OuterFaction = Parms.Param_OuterFaction;
}


// Function BP_SQFactionSetup.BP_SQFactionSetup_C.GetUnitSymbol
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        Out_Symbol                                             (Parm, OutParm, HasGetValueTypeHash)

void UBP_SQFactionSetup_C::GetUnitSymbol(TSoftObjectPtr<class UTexture2D>* Out_Symbol) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQFactionSetup_C", "GetUnitSymbol");

	Params::BP_SQFactionSetup_C_GetUnitSymbol Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Symbol != nullptr)
		*Out_Symbol = Parms.Out_Symbol;
}


// Function BP_SQFactionSetup.BP_SQFactionSetup_C.CanPlayAgainst
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USQFactionSetup*                  OtherFaction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_SQFactionSetup_C::CanPlayAgainst(const class USQFactionSetup* OtherFaction) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQFactionSetup_C", "CanPlayAgainst");

	Params::BP_SQFactionSetup_C_CanPlayAgainst Parms{};

	Parms.OtherFaction = OtherFaction;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SQFactionSetup.BP_SQFactionSetup_C.GetFactionTypeName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class FName UBP_SQFactionSetup_C::GetFactionTypeName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQFactionSetup_C", "GetFactionTypeName");

	Params::BP_SQFactionSetup_C_GetFactionTypeName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

