#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_ModList

#include "Basic.hpp"


namespace SDK::Params
{

// Function W_ModList.W_ModList_C.ExecuteUbergraph_W_ModList
// 0x0010 (0x0010 - 0x0000)
struct W_ModList_C_ExecuteUbergraph_W_ModList final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AE3[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQSessionInfo*                         K2Node_CustomEvent_SessionInfo;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ModList_C_ExecuteUbergraph_W_ModList) == 0x000008, "Wrong alignment on W_ModList_C_ExecuteUbergraph_W_ModList");
static_assert(sizeof(W_ModList_C_ExecuteUbergraph_W_ModList) == 0x000010, "Wrong size on W_ModList_C_ExecuteUbergraph_W_ModList");
static_assert(offsetof(W_ModList_C_ExecuteUbergraph_W_ModList, EntryPoint) == 0x000000, "Member 'W_ModList_C_ExecuteUbergraph_W_ModList::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_ModList_C_ExecuteUbergraph_W_ModList, K2Node_CustomEvent_SessionInfo) == 0x000008, "Member 'W_ModList_C_ExecuteUbergraph_W_ModList::K2Node_CustomEvent_SessionInfo' has a wrong offset!");

// Function W_ModList.W_ModList_C.Init
// 0x0008 (0x0008 - 0x0000)
struct W_ModList_C_Init final
{
public:
	class USQSessionInfo*                         Param_SessionInfo;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_ModList_C_Init) == 0x000008, "Wrong alignment on W_ModList_C_Init");
static_assert(sizeof(W_ModList_C_Init) == 0x000008, "Wrong size on W_ModList_C_Init");
static_assert(offsetof(W_ModList_C_Init, Param_SessionInfo) == 0x000000, "Member 'W_ModList_C_Init::Param_SessionInfo' has a wrong offset!");

// Function W_ModList.W_ModList_C.Display Mods
// 0x0020 (0x0020 - 0x0000)
struct W_ModList_C_Display_Mods final
{
public:
	class UW_ModTooltipItem_C*                    CallFunc_Create_ReturnValue;                       // 0x0000(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UVerticalBoxSlot*                       CallFunc_AddChildToVerticalBox_ReturnValue;        // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_ModList_C_Display_Mods) == 0x000008, "Wrong alignment on W_ModList_C_Display_Mods");
static_assert(sizeof(W_ModList_C_Display_Mods) == 0x000020, "Wrong size on W_ModList_C_Display_Mods");
static_assert(offsetof(W_ModList_C_Display_Mods, CallFunc_Create_ReturnValue) == 0x000000, "Member 'W_ModList_C_Display_Mods::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ModList_C_Display_Mods, Temp_int_Variable) == 0x000008, "Member 'W_ModList_C_Display_Mods::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(W_ModList_C_Display_Mods, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'W_ModList_C_Display_Mods::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ModList_C_Display_Mods, CallFunc_AddChildToVerticalBox_ReturnValue) == 0x000010, "Member 'W_ModList_C_Display_Mods::CallFunc_AddChildToVerticalBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ModList_C_Display_Mods, CallFunc_Array_LastIndex_ReturnValue) == 0x000018, "Member 'W_ModList_C_Display_Mods::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ModList_C_Display_Mods, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00001C, "Member 'W_ModList_C_Display_Mods::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");

// Function W_ModList.W_ModList_C.Get_TB_Whitelist_Text_0
// 0x00A8 (0x00A8 - 0x0000)
struct W_ModList_C_Get_TB_Whitelist_Text_0 final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3AE4[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0020(0x0018)()
	class FText                                   Temp_text_Variable_1;                              // 0x0038(0x0018)()
	bool                                          Temp_bool_Variable_1;                              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3AE5[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_2;                              // 0x0058(0x0018)()
	bool                                          CallFunc_Is_Modded_ReturnValue;                    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Is_Whitelisted_Is_Whitelisted;            // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3AE6[0x6];                                     // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0078(0x0018)()
	class FText                                   K2Node_Select_Default_1;                           // 0x0090(0x0018)()
};
static_assert(alignof(W_ModList_C_Get_TB_Whitelist_Text_0) == 0x000008, "Wrong alignment on W_ModList_C_Get_TB_Whitelist_Text_0");
static_assert(sizeof(W_ModList_C_Get_TB_Whitelist_Text_0) == 0x0000A8, "Wrong size on W_ModList_C_Get_TB_Whitelist_Text_0");
static_assert(offsetof(W_ModList_C_Get_TB_Whitelist_Text_0, ReturnValue) == 0x000000, "Member 'W_ModList_C_Get_TB_Whitelist_Text_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ModList_C_Get_TB_Whitelist_Text_0, Temp_bool_Variable) == 0x000018, "Member 'W_ModList_C_Get_TB_Whitelist_Text_0::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_ModList_C_Get_TB_Whitelist_Text_0, Temp_text_Variable) == 0x000020, "Member 'W_ModList_C_Get_TB_Whitelist_Text_0::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(W_ModList_C_Get_TB_Whitelist_Text_0, Temp_text_Variable_1) == 0x000038, "Member 'W_ModList_C_Get_TB_Whitelist_Text_0::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(W_ModList_C_Get_TB_Whitelist_Text_0, Temp_bool_Variable_1) == 0x000050, "Member 'W_ModList_C_Get_TB_Whitelist_Text_0::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_ModList_C_Get_TB_Whitelist_Text_0, Temp_text_Variable_2) == 0x000058, "Member 'W_ModList_C_Get_TB_Whitelist_Text_0::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(W_ModList_C_Get_TB_Whitelist_Text_0, CallFunc_Is_Modded_ReturnValue) == 0x000070, "Member 'W_ModList_C_Get_TB_Whitelist_Text_0::CallFunc_Is_Modded_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ModList_C_Get_TB_Whitelist_Text_0, CallFunc_Is_Whitelisted_Is_Whitelisted) == 0x000071, "Member 'W_ModList_C_Get_TB_Whitelist_Text_0::CallFunc_Is_Whitelisted_Is_Whitelisted' has a wrong offset!");
static_assert(offsetof(W_ModList_C_Get_TB_Whitelist_Text_0, K2Node_Select_Default) == 0x000078, "Member 'W_ModList_C_Get_TB_Whitelist_Text_0::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_ModList_C_Get_TB_Whitelist_Text_0, K2Node_Select_Default_1) == 0x000090, "Member 'W_ModList_C_Get_TB_Whitelist_Text_0::K2Node_Select_Default_1' has a wrong offset!");

// Function W_ModList.W_ModList_C.Is Whitelisted
// 0x0002 (0x0002 - 0x0000)
struct W_ModList_C_Is_Whitelisted final
{
public:
	bool                                          Param_Is_Whitelisted;                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_ModList_C_Is_Whitelisted) == 0x000001, "Wrong alignment on W_ModList_C_Is_Whitelisted");
static_assert(sizeof(W_ModList_C_Is_Whitelisted) == 0x000002, "Wrong size on W_ModList_C_Is_Whitelisted");
static_assert(offsetof(W_ModList_C_Is_Whitelisted, Param_Is_Whitelisted) == 0x000000, "Member 'W_ModList_C_Is_Whitelisted::Param_Is_Whitelisted' has a wrong offset!");
static_assert(offsetof(W_ModList_C_Is_Whitelisted, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'W_ModList_C_Is_Whitelisted::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function W_ModList.W_ModList_C.Is Modded
// 0x0002 (0x0002 - 0x0000)
struct W_ModList_C_Is_Modded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_ModList_C_Is_Modded) == 0x000001, "Wrong alignment on W_ModList_C_Is_Modded");
static_assert(sizeof(W_ModList_C_Is_Modded) == 0x000002, "Wrong size on W_ModList_C_Is_Modded");
static_assert(offsetof(W_ModList_C_Is_Modded, ReturnValue) == 0x000000, "Member 'W_ModList_C_Is_Modded::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_ModList_C_Is_Modded, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'W_ModList_C_Is_Modded::CallFunc_IsValid_ReturnValue' has a wrong offset!");

}

