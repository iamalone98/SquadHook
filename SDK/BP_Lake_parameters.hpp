#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Lake

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Lake.BP_Lake_C.UserConstructionScript
// 0x0164 (0x0164 - 0x0000)
struct BP_Lake_C_UserConstructionScript final
{
public:
	float                                         CallFunc_BreakVector_X;                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0048(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_1;  // 0x00DC(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Lake_C_UserConstructionScript) == 0x000004, "Wrong alignment on BP_Lake_C_UserConstructionScript");
static_assert(sizeof(BP_Lake_C_UserConstructionScript) == 0x000164, "Wrong size on BP_Lake_C_UserConstructionScript");
static_assert(offsetof(BP_Lake_C_UserConstructionScript, CallFunc_BreakVector_X) == 0x000000, "Member 'BP_Lake_C_UserConstructionScript::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Lake_C_UserConstructionScript, CallFunc_BreakVector_Y) == 0x000004, "Member 'BP_Lake_C_UserConstructionScript::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Lake_C_UserConstructionScript, CallFunc_BreakVector_Z) == 0x000008, "Member 'BP_Lake_C_UserConstructionScript::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_Lake_C_UserConstructionScript, CallFunc_BreakVector_X_1) == 0x00000C, "Member 'BP_Lake_C_UserConstructionScript::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_Lake_C_UserConstructionScript, CallFunc_BreakVector_Y_1) == 0x000010, "Member 'BP_Lake_C_UserConstructionScript::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_Lake_C_UserConstructionScript, CallFunc_BreakVector_Z_1) == 0x000014, "Member 'BP_Lake_C_UserConstructionScript::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_Lake_C_UserConstructionScript, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000018, "Member 'BP_Lake_C_UserConstructionScript::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lake_C_UserConstructionScript, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x00001C, "Member 'BP_Lake_C_UserConstructionScript::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Lake_C_UserConstructionScript, CallFunc_Add_FloatFloat_ReturnValue) == 0x000020, "Member 'BP_Lake_C_UserConstructionScript::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lake_C_UserConstructionScript, CallFunc_BreakVector_X_2) == 0x000024, "Member 'BP_Lake_C_UserConstructionScript::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(BP_Lake_C_UserConstructionScript, CallFunc_BreakVector_Y_2) == 0x000028, "Member 'BP_Lake_C_UserConstructionScript::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(BP_Lake_C_UserConstructionScript, CallFunc_BreakVector_Z_2) == 0x00002C, "Member 'BP_Lake_C_UserConstructionScript::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(BP_Lake_C_UserConstructionScript, CallFunc_MakeVector_ReturnValue) == 0x000030, "Member 'BP_Lake_C_UserConstructionScript::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lake_C_UserConstructionScript, CallFunc_BreakVector_X_3) == 0x00003C, "Member 'BP_Lake_C_UserConstructionScript::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(BP_Lake_C_UserConstructionScript, CallFunc_BreakVector_Y_3) == 0x000040, "Member 'BP_Lake_C_UserConstructionScript::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(BP_Lake_C_UserConstructionScript, CallFunc_BreakVector_Z_3) == 0x000044, "Member 'BP_Lake_C_UserConstructionScript::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(BP_Lake_C_UserConstructionScript, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000048, "Member 'BP_Lake_C_UserConstructionScript::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Lake_C_UserConstructionScript, CallFunc_MakeVector_ReturnValue_1) == 0x0000D0, "Member 'BP_Lake_C_UserConstructionScript::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Lake_C_UserConstructionScript, CallFunc_K2_SetRelativeLocation_SweepHitResult_1) == 0x0000DC, "Member 'BP_Lake_C_UserConstructionScript::CallFunc_K2_SetRelativeLocation_SweepHitResult_1' has a wrong offset!");

// Function BP_Lake.BP_Lake_C.Create Lake MID
// 0x0040 (0x0040 - 0x0000)
struct BP_Lake_C_Create_Lake_MID final
{
public:
	struct FWeightedBlendable                     K2Node_MakeStruct_WeightedBlendable;               // 0x0000(0x0010)(NoDestructor)
	TArray<struct FWeightedBlendable>             K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm)
	struct FWeightedBlendables                    K2Node_MakeStruct_WeightedBlendables;              // 0x0020(0x0010)()
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue_1; // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Lake_C_Create_Lake_MID) == 0x000008, "Wrong alignment on BP_Lake_C_Create_Lake_MID");
static_assert(sizeof(BP_Lake_C_Create_Lake_MID) == 0x000040, "Wrong size on BP_Lake_C_Create_Lake_MID");
static_assert(offsetof(BP_Lake_C_Create_Lake_MID, K2Node_MakeStruct_WeightedBlendable) == 0x000000, "Member 'BP_Lake_C_Create_Lake_MID::K2Node_MakeStruct_WeightedBlendable' has a wrong offset!");
static_assert(offsetof(BP_Lake_C_Create_Lake_MID, K2Node_MakeArray_Array) == 0x000010, "Member 'BP_Lake_C_Create_Lake_MID::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Lake_C_Create_Lake_MID, K2Node_MakeStruct_WeightedBlendables) == 0x000020, "Member 'BP_Lake_C_Create_Lake_MID::K2Node_MakeStruct_WeightedBlendables' has a wrong offset!");
static_assert(offsetof(BP_Lake_C_Create_Lake_MID, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000030, "Member 'BP_Lake_C_Create_Lake_MID::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lake_C_Create_Lake_MID, CallFunc_CreateDynamicMaterialInstance_ReturnValue_1) == 0x000038, "Member 'BP_Lake_C_Create_Lake_MID::CallFunc_CreateDynamicMaterialInstance_ReturnValue_1' has a wrong offset!");

// Function BP_Lake.BP_Lake_C.Set Shader Params
// 0x0030 (0x0030 - 0x0000)
struct BP_Lake_C_Set_Shader_Params final
{
public:
	float                                         CallFunc_BreakVector2D_X;                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Lake_C_Set_Shader_Params) == 0x000004, "Wrong alignment on BP_Lake_C_Set_Shader_Params");
static_assert(sizeof(BP_Lake_C_Set_Shader_Params) == 0x000030, "Wrong size on BP_Lake_C_Set_Shader_Params");
static_assert(offsetof(BP_Lake_C_Set_Shader_Params, CallFunc_BreakVector2D_X) == 0x000000, "Member 'BP_Lake_C_Set_Shader_Params::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BP_Lake_C_Set_Shader_Params, CallFunc_BreakVector2D_Y) == 0x000004, "Member 'BP_Lake_C_Set_Shader_Params::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BP_Lake_C_Set_Shader_Params, K2Node_MakeStruct_LinearColor) == 0x000008, "Member 'BP_Lake_C_Set_Shader_Params::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(BP_Lake_C_Set_Shader_Params, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'BP_Lake_C_Set_Shader_Params::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Lake_C_Set_Shader_Params, CallFunc_BreakVector_X) == 0x000024, "Member 'BP_Lake_C_Set_Shader_Params::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_Lake_C_Set_Shader_Params, CallFunc_BreakVector_Y) == 0x000028, "Member 'BP_Lake_C_Set_Shader_Params::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_Lake_C_Set_Shader_Params, CallFunc_BreakVector_Z) == 0x00002C, "Member 'BP_Lake_C_Set_Shader_Params::CallFunc_BreakVector_Z' has a wrong offset!");

// Function BP_Lake.BP_Lake_C.Set FFTs
// 0x0010 (0x0010 - 0x0000)
struct BP_Lake_C_Set_FFTs final
{
public:
	class UMaterialInstanceDynamic*               Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Setup_Normal;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Lake_C_Set_FFTs) == 0x000008, "Wrong alignment on BP_Lake_C_Set_FFTs");
static_assert(sizeof(BP_Lake_C_Set_FFTs) == 0x000010, "Wrong size on BP_Lake_C_Set_FFTs");
static_assert(offsetof(BP_Lake_C_Set_FFTs, Target) == 0x000000, "Member 'BP_Lake_C_Set_FFTs::Target' has a wrong offset!");
static_assert(offsetof(BP_Lake_C_Set_FFTs, Setup_Normal) == 0x000008, "Member 'BP_Lake_C_Set_FFTs::Setup_Normal' has a wrong offset!");

}

