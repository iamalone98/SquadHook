#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CommandZone

#include "Basic.hpp"

#include "BP_CommandZone_classes.hpp"
#include "BP_CommandZone_parameters.hpp"


namespace SDK
{

// Function BP_CommandZone.BP_CommandZone_C.ExecuteUbergraph_BP_CommandZone
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CommandZone_C::ExecuteUbergraph_BP_CommandZone(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CommandZone_C", "ExecuteUbergraph_BP_CommandZone");

	Params::BP_CommandZone_C_ExecuteUbergraph_BP_CommandZone Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CommandZone.BP_CommandZone_C.Begin Role Checks
// (BlueprintCallable, BlueprintEvent)

void ABP_CommandZone_C::Begin_Role_Checks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CommandZone_C", "Begin Role Checks");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CommandZone.BP_CommandZone_C.BndEvt__Collision_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CommandZone_C::BndEvt__Collision_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CommandZone_C", "BndEvt__Collision_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature");

	Params::BP_CommandZone_C_BndEvt__Collision_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CommandZone.BP_CommandZone_C.BndEvt__Collision_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_CommandZone_C::BndEvt__Collision_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CommandZone_C", "BndEvt__Collision_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_CommandZone_C_BndEvt__Collision_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CommandZone.BP_CommandZone_C.Commander Changed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASQPlayerState*                   OldCommander                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ASQPlayerState*                   NewCommander                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CommandZone_C::Commander_Changed(class ASQPlayerState* OldCommander, class ASQPlayerState* NewCommander)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CommandZone_C", "Commander Changed");

	Params::BP_CommandZone_C_Commander_Changed Parms{};

	Parms.OldCommander = OldCommander;
	Parms.NewCommander = NewCommander;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CommandZone.BP_CommandZone_C.Refresh Commander Actions Allowed
// (BlueprintCallable, BlueprintEvent)

void ABP_CommandZone_C::Refresh_Commander_Actions_Allowed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CommandZone_C", "Refresh Commander Actions Allowed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CommandZone.BP_CommandZone_C.Bind Commander Changed
// (BlueprintCallable, BlueprintEvent)

void ABP_CommandZone_C::Bind_Commander_Changed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CommandZone_C", "Bind Commander Changed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CommandZone.BP_CommandZone_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_CommandZone_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CommandZone_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CommandZone.BP_CommandZone_C.Set Actions Allowed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASQPlayerController*              Target_PC                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bNewActionsEnabled                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CommandZone_C::Set_Actions_Allowed(class ASQPlayerController* Target_PC, bool bNewActionsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CommandZone_C", "Set Actions Allowed");

	Params::BP_CommandZone_C_Set_Actions_Allowed Parms{};

	Parms.Target_PC = Target_PC;
	Parms.bNewActionsEnabled = bNewActionsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CommandZone.BP_CommandZone_C.OnCommanderRevivedEvent_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASQPlayerState*                   CommanderPS                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CommandZone_C::OnCommanderRevivedEvent_Event_0(class ASQPlayerState* CommanderPS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CommandZone_C", "OnCommanderRevivedEvent_Event_0");

	Params::BP_CommandZone_C_OnCommanderRevivedEvent_Event_0 Parms{};

	Parms.CommanderPS = CommanderPS;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CommandZone.BP_CommandZone_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_CommandZone_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CommandZone_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CommandZone.BP_CommandZone_C.Get Overlapping Commander
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ASQPlayerController*              AsSQPlayer_Controller                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_CommandZone_C::Get_Overlapping_Commander(class ASQPlayerController** AsSQPlayer_Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CommandZone_C", "Get Overlapping Commander");

	Params::BP_CommandZone_C_Get_Overlapping_Commander Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AsSQPlayer_Controller != nullptr)
		*AsSQPlayer_Controller = Parms.AsSQPlayer_Controller;
}


// Function BP_CommandZone.BP_CommandZone_C.Compare Teams
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Same_Team                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CommandZone_C::Compare_Teams(int32 B, bool* Same_Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CommandZone_C", "Compare Teams");

	Params::BP_CommandZone_C_Compare_Teams Parms{};

	Parms.B = B;

	UObject::ProcessEvent(Func, &Parms);

	if (Same_Team != nullptr)
		*Same_Team = Parms.Same_Team;
}


// Function BP_CommandZone.BP_CommandZone_C.Can Allow Actions
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Allow_Actions                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_CommandZone_C::Can_Allow_Actions(bool* Allow_Actions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CommandZone_C", "Can Allow Actions");

	Params::BP_CommandZone_C_Can_Allow_Actions Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Allow_Actions != nullptr)
		*Allow_Actions = Parms.Allow_Actions;
}


// Function BP_CommandZone.BP_CommandZone_C.Leader Role Check
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_CommandZone_C::Leader_Role_Check()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CommandZone_C", "Leader Role Check");

	UObject::ProcessEvent(Func, nullptr);
}

}

