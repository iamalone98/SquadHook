#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_InteractableItem_HelicopterRepair

#include "Basic.hpp"

#include "W_InteractableItem_Master_classes.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_InteractableItem_HelicopterRepair.W_InteractableItem_HelicopterRepair_C
// 0x0078 (0x0338 - 0x02C0)
class UW_InteractableItem_HelicopterRepair_C final : public UW_InteractableItem_Master_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_W_InteractableItem_HelicopterRepair_C; // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Fade;                                              // 0x02C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UHorizontalBox*                         FormatBox;                                         // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_0;                                           // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Line;                                              // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           ProgressBar_Hull;                                  // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TB_RotorCollision;                                 // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VerticalBox_Health;                                // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_HelicopterStatusSmall_C*             W_HelicopterStatusSmall;                           // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          Last_Is_Full;                                      // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4D6F[0x7];                                     // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   Image;                                             // 0x0310(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_W_InteractableItem_HelicopterRepair(int32 EntryPoint);
	void Format_Text();
	void Update_Vehicle_Health();
	void Get_Format_Box(class UHorizontalBox** Param_FormatBox);
	void Set_Main_Health(class ASQVehicle* Vehicle, bool* Limit_Reached, bool* Max_Health);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_InteractableItem_HelicopterRepair_C">();
	}
	static class UW_InteractableItem_HelicopterRepair_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_InteractableItem_HelicopterRepair_C>();
	}
};
static_assert(alignof(UW_InteractableItem_HelicopterRepair_C) == 0x000008, "Wrong alignment on UW_InteractableItem_HelicopterRepair_C");
static_assert(sizeof(UW_InteractableItem_HelicopterRepair_C) == 0x000338, "Wrong size on UW_InteractableItem_HelicopterRepair_C");
static_assert(offsetof(UW_InteractableItem_HelicopterRepair_C, UberGraphFrame_W_InteractableItem_HelicopterRepair_C) == 0x0002C0, "Member 'UW_InteractableItem_HelicopterRepair_C::UberGraphFrame_W_InteractableItem_HelicopterRepair_C' has a wrong offset!");
static_assert(offsetof(UW_InteractableItem_HelicopterRepair_C, Fade) == 0x0002C8, "Member 'UW_InteractableItem_HelicopterRepair_C::Fade' has a wrong offset!");
static_assert(offsetof(UW_InteractableItem_HelicopterRepair_C, FormatBox) == 0x0002D0, "Member 'UW_InteractableItem_HelicopterRepair_C::FormatBox' has a wrong offset!");
static_assert(offsetof(UW_InteractableItem_HelicopterRepair_C, Image_0) == 0x0002D8, "Member 'UW_InteractableItem_HelicopterRepair_C::Image_0' has a wrong offset!");
static_assert(offsetof(UW_InteractableItem_HelicopterRepair_C, Line) == 0x0002E0, "Member 'UW_InteractableItem_HelicopterRepair_C::Line' has a wrong offset!");
static_assert(offsetof(UW_InteractableItem_HelicopterRepair_C, ProgressBar_Hull) == 0x0002E8, "Member 'UW_InteractableItem_HelicopterRepair_C::ProgressBar_Hull' has a wrong offset!");
static_assert(offsetof(UW_InteractableItem_HelicopterRepair_C, TB_RotorCollision) == 0x0002F0, "Member 'UW_InteractableItem_HelicopterRepair_C::TB_RotorCollision' has a wrong offset!");
static_assert(offsetof(UW_InteractableItem_HelicopterRepair_C, VerticalBox_Health) == 0x0002F8, "Member 'UW_InteractableItem_HelicopterRepair_C::VerticalBox_Health' has a wrong offset!");
static_assert(offsetof(UW_InteractableItem_HelicopterRepair_C, W_HelicopterStatusSmall) == 0x000300, "Member 'UW_InteractableItem_HelicopterRepair_C::W_HelicopterStatusSmall' has a wrong offset!");
static_assert(offsetof(UW_InteractableItem_HelicopterRepair_C, Last_Is_Full) == 0x000308, "Member 'UW_InteractableItem_HelicopterRepair_C::Last_Is_Full' has a wrong offset!");
static_assert(offsetof(UW_InteractableItem_HelicopterRepair_C, Image) == 0x000310, "Member 'UW_InteractableItem_HelicopterRepair_C::Image' has a wrong offset!");

}

