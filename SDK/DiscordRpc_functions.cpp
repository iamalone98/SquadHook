#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DiscordRpc

#include "Basic.hpp"

#include "DiscordRpc_classes.hpp"
#include "DiscordRpc_parameters.hpp"


namespace SDK
{

// Function DiscordRpc.DiscordRpc.ClearPresence
// (Final, Native, Public, BlueprintCallable)

void UDiscordRpc::ClearPresence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DiscordRpc", "ClearPresence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DiscordRpc.DiscordRpc.Initialize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ApplicationId                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AutoRegister                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OptionalSteamId                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDiscordRpc::Initialize(const class FString& ApplicationId, bool AutoRegister, const class FString& OptionalSteamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DiscordRpc", "Initialize");

	Params::DiscordRpc_Initialize Parms{};

	Parms.ApplicationId = std::move(ApplicationId);
	Parms.AutoRegister = AutoRegister;
	Parms.OptionalSteamId = std::move(OptionalSteamId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DiscordRpc.DiscordRpc.Respond
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           UserId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Reply                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDiscordRpc::Respond(const class FString& UserId, int32 Reply)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DiscordRpc", "Respond");

	Params::DiscordRpc_Respond Parms{};

	Parms.UserId = std::move(UserId);
	Parms.Reply = Reply;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DiscordRpc.DiscordRpc.RunCallbacks
// (Final, Native, Public, BlueprintCallable)

void UDiscordRpc::RunCallbacks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DiscordRpc", "RunCallbacks");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DiscordRpc.DiscordRpc.Shutdown
// (Final, Native, Public, BlueprintCallable)

void UDiscordRpc::Shutdown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DiscordRpc", "Shutdown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DiscordRpc.DiscordRpc.UpdatePresence
// (Final, Native, Public, BlueprintCallable)

void UDiscordRpc::UpdatePresence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DiscordRpc", "UpdatePresence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

