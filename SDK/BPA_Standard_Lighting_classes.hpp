#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPA_Standard_Lighting

#include "Basic.hpp"

#include "TonemapperSettingsEnum_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "ColorGradingSettingsEnum_structs.hpp"
#include "Vector4Struct_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPA_Standard_Lighting.BPA_Standard_Lighting_C
// 0x0258 (0x0480 - 0x0228)
class ABPA_Standard_Lighting_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0228(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkyAtmosphereComponent*                SkyAtmosphere;                                     // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UObject*                                BP_StandardLightingEditor;                         // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SkySphere;                                         // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PostProcess;                                       // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UExponentialHeightFogComponent*         ExponentialHeightFog;                              // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     SkyLight;                                          // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             DirectionalLight;                                  // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               SkySphere_Texture;                                 // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hemisphere_;                                       // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Enable_Lightning_WIP;                              // 0x0279(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23C3[0x2];                                     // 0x027A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkyboxSquish;                                      // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sky_Sphere_Brightness;                             // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sky_Sphere_Contrast;                               // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sky_Sphere_Desaturation;                           // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sky_Sphere_Rotation;                               // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sky_Sun_Brightness;                                // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sky_Sun_Radius;                                    // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Sky_Sun_Color;                                     // 0x0298(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Dome_Position_Offset;                              // 0x02A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23C4[0x4];                                     // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               Sky_material;                                      // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sun_Height;                                        // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ST_Camera_Vector_Multiplier;                       // 0x02C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sun_Position;                                      // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sun_Roll;                                          // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sunlight_Brightness;                               // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sunlight_Temp;                                     // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Sunlight_Color;                                    // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sunlight_Light_Shaft_Intensity;                    // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Fog_Density;                                       // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Fog_Height;                                        // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Fog_Start_Distance;                                // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Fog_Height_Falloff;                                // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Fog_Inscattering_Color;                            // 0x0304(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Fog_Directional_Inscattering_Color;                // 0x0314(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Cloud_Shadows_;                                // 0x0324(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23C5[0x3];                                     // 0x0325(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EColorGradingSettingsEnum, struct FVector4Struct> Color_Grading_Settings;                            // 0x0328(0x0050)(Edit, BlueprintVisible)
	TMap<ETonemapperSettingsEnum, float>          Tonemapper_Settings;                               // 0x0378(0x0050)(Edit, BlueprintVisible)
	float                                         LUT_Intensity;                                     // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23C6[0x4];                                     // 0x03CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               LUT_Texture;                                       // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Ambient_Cubemap_Intensity;                         // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23C7[0x4];                                     // 0x03DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureCube*                           Ambient_Cubemap_Texture;                           // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Max_Brightness;                                    // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Min_Brightness;                                    // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Exposure_Bias;                                     // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enabled_;                                          // 0x03F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_23C8[0x3];                                     // 0x03F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Sky_Sun_Cover_Multi;                               // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sky_Sun_Cover_Power;                               // 0x03FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Sky_Sun_Tint;                                      // 0x0400(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sky_Wind_Speed;                                    // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sky_Wind_Strength;                                 // 0x0414(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Sky_Wind_Direction;                                // 0x0418(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Ambient_Occlusion_Intensity;                       // 0x041C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Ambient_Occlusion_Radius;                          // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23C9[0x4];                                     // 0x0424(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWeightedBlendables                    Blendables;                                        // 0x0428(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         TimeOffset;                                        // 0x0438(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Ambient_Occlusion_Fade_Distance;                   // 0x043C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Ambient_Occlusion_Fade_Radius;                     // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lens_Flare_Intensity;                              // 0x0444(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Indirect_Lighting_Intensity;                       // 0x0448(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CAUTION_Minus_ShadowDistOverride;                  // 0x044C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxSkyBrightness;                                  // 0x0450(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23CA[0x4];                                     // 0x0454(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureCube*                           CubeMap_Legacy_;                                   // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CubeMapIntensity_Legacy_;                          // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           _Intensity;                                        // 0x0464(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Lightning_Frequency;                               // 0x0474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               CloudTex_Lightning_;                               // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BPA_Standard_Lighting(int32 EntryPoint);
	void OnGameUserSettingsChanged(const class USQGameUserSettings* UserSettings);
	void Init();
	void StopUpdate();
	void LiveUpdate();
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void Update_Skysphere();
	void Update_Directional_Light();
	void Recapture_Skylight();
	void Update_Fog();
	void Update_Post_Processing();
	void Update_Skylight();
	void EditorTick();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPA_Standard_Lighting_C">();
	}
	static class ABPA_Standard_Lighting_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABPA_Standard_Lighting_C>();
	}
};
static_assert(alignof(ABPA_Standard_Lighting_C) == 0x000008, "Wrong alignment on ABPA_Standard_Lighting_C");
static_assert(sizeof(ABPA_Standard_Lighting_C) == 0x000480, "Wrong size on ABPA_Standard_Lighting_C");
static_assert(offsetof(ABPA_Standard_Lighting_C, UberGraphFrame) == 0x000228, "Member 'ABPA_Standard_Lighting_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, SkyAtmosphere) == 0x000230, "Member 'ABPA_Standard_Lighting_C::SkyAtmosphere' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, BP_StandardLightingEditor) == 0x000238, "Member 'ABPA_Standard_Lighting_C::BP_StandardLightingEditor' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, SkySphere) == 0x000240, "Member 'ABPA_Standard_Lighting_C::SkySphere' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, PostProcess) == 0x000248, "Member 'ABPA_Standard_Lighting_C::PostProcess' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, ExponentialHeightFog) == 0x000250, "Member 'ABPA_Standard_Lighting_C::ExponentialHeightFog' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, SkyLight) == 0x000258, "Member 'ABPA_Standard_Lighting_C::SkyLight' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, DirectionalLight) == 0x000260, "Member 'ABPA_Standard_Lighting_C::DirectionalLight' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, DefaultSceneRoot) == 0x000268, "Member 'ABPA_Standard_Lighting_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, SkySphere_Texture) == 0x000270, "Member 'ABPA_Standard_Lighting_C::SkySphere_Texture' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Hemisphere_) == 0x000278, "Member 'ABPA_Standard_Lighting_C::Hemisphere_' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Enable_Lightning_WIP) == 0x000279, "Member 'ABPA_Standard_Lighting_C::Enable_Lightning_WIP' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, SkyboxSquish) == 0x00027C, "Member 'ABPA_Standard_Lighting_C::SkyboxSquish' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Sky_Sphere_Brightness) == 0x000280, "Member 'ABPA_Standard_Lighting_C::Sky_Sphere_Brightness' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Sky_Sphere_Contrast) == 0x000284, "Member 'ABPA_Standard_Lighting_C::Sky_Sphere_Contrast' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Sky_Sphere_Desaturation) == 0x000288, "Member 'ABPA_Standard_Lighting_C::Sky_Sphere_Desaturation' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Sky_Sphere_Rotation) == 0x00028C, "Member 'ABPA_Standard_Lighting_C::Sky_Sphere_Rotation' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Sky_Sun_Brightness) == 0x000290, "Member 'ABPA_Standard_Lighting_C::Sky_Sun_Brightness' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Sky_Sun_Radius) == 0x000294, "Member 'ABPA_Standard_Lighting_C::Sky_Sun_Radius' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Sky_Sun_Color) == 0x000298, "Member 'ABPA_Standard_Lighting_C::Sky_Sun_Color' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Dome_Position_Offset) == 0x0002A8, "Member 'ABPA_Standard_Lighting_C::Dome_Position_Offset' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Sky_material) == 0x0002B8, "Member 'ABPA_Standard_Lighting_C::Sky_material' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Sun_Height) == 0x0002C0, "Member 'ABPA_Standard_Lighting_C::Sun_Height' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, ST_Camera_Vector_Multiplier) == 0x0002C4, "Member 'ABPA_Standard_Lighting_C::ST_Camera_Vector_Multiplier' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Sun_Position) == 0x0002D0, "Member 'ABPA_Standard_Lighting_C::Sun_Position' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Sun_Roll) == 0x0002D4, "Member 'ABPA_Standard_Lighting_C::Sun_Roll' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Sunlight_Brightness) == 0x0002D8, "Member 'ABPA_Standard_Lighting_C::Sunlight_Brightness' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Sunlight_Temp) == 0x0002DC, "Member 'ABPA_Standard_Lighting_C::Sunlight_Temp' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Sunlight_Color) == 0x0002E0, "Member 'ABPA_Standard_Lighting_C::Sunlight_Color' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Sunlight_Light_Shaft_Intensity) == 0x0002F0, "Member 'ABPA_Standard_Lighting_C::Sunlight_Light_Shaft_Intensity' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Fog_Density) == 0x0002F4, "Member 'ABPA_Standard_Lighting_C::Fog_Density' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Fog_Height) == 0x0002F8, "Member 'ABPA_Standard_Lighting_C::Fog_Height' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Fog_Start_Distance) == 0x0002FC, "Member 'ABPA_Standard_Lighting_C::Fog_Start_Distance' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Fog_Height_Falloff) == 0x000300, "Member 'ABPA_Standard_Lighting_C::Fog_Height_Falloff' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Fog_Inscattering_Color) == 0x000304, "Member 'ABPA_Standard_Lighting_C::Fog_Inscattering_Color' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Fog_Directional_Inscattering_Color) == 0x000314, "Member 'ABPA_Standard_Lighting_C::Fog_Directional_Inscattering_Color' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Use_Cloud_Shadows_) == 0x000324, "Member 'ABPA_Standard_Lighting_C::Use_Cloud_Shadows_' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Color_Grading_Settings) == 0x000328, "Member 'ABPA_Standard_Lighting_C::Color_Grading_Settings' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Tonemapper_Settings) == 0x000378, "Member 'ABPA_Standard_Lighting_C::Tonemapper_Settings' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, LUT_Intensity) == 0x0003C8, "Member 'ABPA_Standard_Lighting_C::LUT_Intensity' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, LUT_Texture) == 0x0003D0, "Member 'ABPA_Standard_Lighting_C::LUT_Texture' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Ambient_Cubemap_Intensity) == 0x0003D8, "Member 'ABPA_Standard_Lighting_C::Ambient_Cubemap_Intensity' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Ambient_Cubemap_Texture) == 0x0003E0, "Member 'ABPA_Standard_Lighting_C::Ambient_Cubemap_Texture' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Max_Brightness) == 0x0003E8, "Member 'ABPA_Standard_Lighting_C::Max_Brightness' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Min_Brightness) == 0x0003EC, "Member 'ABPA_Standard_Lighting_C::Min_Brightness' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Exposure_Bias) == 0x0003F0, "Member 'ABPA_Standard_Lighting_C::Exposure_Bias' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Enabled_) == 0x0003F4, "Member 'ABPA_Standard_Lighting_C::Enabled_' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Sky_Sun_Cover_Multi) == 0x0003F8, "Member 'ABPA_Standard_Lighting_C::Sky_Sun_Cover_Multi' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Sky_Sun_Cover_Power) == 0x0003FC, "Member 'ABPA_Standard_Lighting_C::Sky_Sun_Cover_Power' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Sky_Sun_Tint) == 0x000400, "Member 'ABPA_Standard_Lighting_C::Sky_Sun_Tint' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Sky_Wind_Speed) == 0x000410, "Member 'ABPA_Standard_Lighting_C::Sky_Wind_Speed' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Sky_Wind_Strength) == 0x000414, "Member 'ABPA_Standard_Lighting_C::Sky_Wind_Strength' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Sky_Wind_Direction) == 0x000418, "Member 'ABPA_Standard_Lighting_C::Sky_Wind_Direction' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Ambient_Occlusion_Intensity) == 0x00041C, "Member 'ABPA_Standard_Lighting_C::Ambient_Occlusion_Intensity' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Ambient_Occlusion_Radius) == 0x000420, "Member 'ABPA_Standard_Lighting_C::Ambient_Occlusion_Radius' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Blendables) == 0x000428, "Member 'ABPA_Standard_Lighting_C::Blendables' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, TimeOffset) == 0x000438, "Member 'ABPA_Standard_Lighting_C::TimeOffset' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Ambient_Occlusion_Fade_Distance) == 0x00043C, "Member 'ABPA_Standard_Lighting_C::Ambient_Occlusion_Fade_Distance' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Ambient_Occlusion_Fade_Radius) == 0x000440, "Member 'ABPA_Standard_Lighting_C::Ambient_Occlusion_Fade_Radius' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Lens_Flare_Intensity) == 0x000444, "Member 'ABPA_Standard_Lighting_C::Lens_Flare_Intensity' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Indirect_Lighting_Intensity) == 0x000448, "Member 'ABPA_Standard_Lighting_C::Indirect_Lighting_Intensity' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, CAUTION_Minus_ShadowDistOverride) == 0x00044C, "Member 'ABPA_Standard_Lighting_C::CAUTION_Minus_ShadowDistOverride' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, MaxSkyBrightness) == 0x000450, "Member 'ABPA_Standard_Lighting_C::MaxSkyBrightness' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, CubeMap_Legacy_) == 0x000458, "Member 'ABPA_Standard_Lighting_C::CubeMap_Legacy_' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, CubeMapIntensity_Legacy_) == 0x000460, "Member 'ABPA_Standard_Lighting_C::CubeMapIntensity_Legacy_' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, _Intensity) == 0x000464, "Member 'ABPA_Standard_Lighting_C::_Intensity' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, Lightning_Frequency) == 0x000474, "Member 'ABPA_Standard_Lighting_C::Lightning_Frequency' has a wrong offset!");
static_assert(offsetof(ABPA_Standard_Lighting_C, CloudTex_Lightning_) == 0x000478, "Member 'ABPA_Standard_Lighting_C::CloudTex_Lightning_' has a wrong offset!");

}

