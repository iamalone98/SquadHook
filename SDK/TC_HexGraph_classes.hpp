#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TC_HexGraph

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass TC_HexGraph.TC_HexGraph_C
// 0x0108 (0x0330 - 0x0228)
class ATC_HexGraph_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0228(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTCScalableBleedComponent_C*            TCScalableBleedComponent;                          // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          NoCollisionDebugExtent;                            // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    HexBillboard;                                      // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Hex_Extent;                                        // 0x0250(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B79[0x4];                                     // 0x025C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ATC_HexZone_C*>                  TC_Zones;                                          // 0x0260(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<float>                                 Hex_Max_Distance_From_Spline;                      // 0x0270(0x0010)(Edit, BlueprintVisible)
	float                                         Hex_XY_Scale;                                      // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Start_Spline_Ownership;                            // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         End_Spline_Ownership;                              // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Test_Setup_Once;                                   // 0x028C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Use_Hex_Control___as_Win_Condition;                // 0x028D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B7A[0x2];                                     // 0x028E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Hex_Control___Target_to_Win;                       // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Test_Constant;                                     // 0x0294(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B7B[0x3];                                     // 0x0295(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Hex_Z_Scale;                                       // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Flip_Teams;                                        // 0x029C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B7C[0x3];                                     // 0x029D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Width_Spacer;                                      // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Height_Spacer;                                     // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Hex_Widths;                                        // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Hex_Lengths;                                       // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTransform>                     Hex_Transform_Array;                               // 0x02B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         Start_Random_Anchor_Distance;                      // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         End_Random_Anchor_Distance;                        // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ATC_HexZone_C*>                  Team_1_Anchors;                                    // 0x02C8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class ATC_HexZone_C*>                  Team_2_Anchors;                                    // 0x02D8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class ATC_HexZone_C*                          Team_1_Anchor;                                     // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATC_HexZone_C*                          Team_2_Anchor;                                     // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ATC_HexZone_C*>                  Current_Hexes_in_Round;                            // 0x02F8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<int32>                                 Team_Hex_Ownership;                                // 0x0308(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	int32                                         Target_Zones_To_Capture;                           // 0x0318(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B7D[0x4];                                     // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 Hex_Class;                                         // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Nearby_Hexes_Required_to_Cap;                      // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_TC_HexGraph(int32 EntryPoint);
	void Cache_Team_Hex_Ownership();
	void State_Changed(class USQCaptureZoneComponent* CaptureZone, uint8 Team);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void Can_Spawn_Hex(const struct FVector& WorldLocation, bool* Can_Spawn);
	void Create_Hex_Zones();
	void Destroy_Hex_Zones();
	void Init_Play_Hex_Data();
	void Clamp_Ownership();
	void Get_Team_Zone_Capture(int32 Team, int32* Num_Zones_Owned, float* Percentage_Owned);
	void Get_Start_Zones(class ATC_HexZone_C** Start_Team_1, class ATC_HexZone_C** Start_Team_2);
	void Init_Start_Zones();
	void Refresh_Zones();
	void Construct_Hex_Data(TArray<class ATC_HexZone_C*>& In_Zones);
	void Check_Win_Condition();
	void Update_Anchor_Flags();
	void Get_Neighbour_Chain(TArray<class ATC_HexZone_C*>& Chain, int32 Team, class ATC_HexZone_C* Zone, TArray<class ATC_HexZone_C*>* Out_Chain);
	void Get_Valid_Anchor_Hexes(TArray<class ATC_HexZone_C*>* Out_Team_1_Hexes, TArray<class ATC_HexZone_C*>* Out_Team_2_Hexes);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TC_HexGraph_C">();
	}
	static class ATC_HexGraph_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATC_HexGraph_C>();
	}
};
static_assert(alignof(ATC_HexGraph_C) == 0x000008, "Wrong alignment on ATC_HexGraph_C");
static_assert(sizeof(ATC_HexGraph_C) == 0x000330, "Wrong size on ATC_HexGraph_C");
static_assert(offsetof(ATC_HexGraph_C, UberGraphFrame) == 0x000228, "Member 'ATC_HexGraph_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, TCScalableBleedComponent) == 0x000230, "Member 'ATC_HexGraph_C::TCScalableBleedComponent' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, NoCollisionDebugExtent) == 0x000238, "Member 'ATC_HexGraph_C::NoCollisionDebugExtent' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, HexBillboard) == 0x000240, "Member 'ATC_HexGraph_C::HexBillboard' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, Spline) == 0x000248, "Member 'ATC_HexGraph_C::Spline' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, Hex_Extent) == 0x000250, "Member 'ATC_HexGraph_C::Hex_Extent' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, TC_Zones) == 0x000260, "Member 'ATC_HexGraph_C::TC_Zones' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, Hex_Max_Distance_From_Spline) == 0x000270, "Member 'ATC_HexGraph_C::Hex_Max_Distance_From_Spline' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, Hex_XY_Scale) == 0x000280, "Member 'ATC_HexGraph_C::Hex_XY_Scale' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, Start_Spline_Ownership) == 0x000284, "Member 'ATC_HexGraph_C::Start_Spline_Ownership' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, End_Spline_Ownership) == 0x000288, "Member 'ATC_HexGraph_C::End_Spline_Ownership' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, Test_Setup_Once) == 0x00028C, "Member 'ATC_HexGraph_C::Test_Setup_Once' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, Use_Hex_Control___as_Win_Condition) == 0x00028D, "Member 'ATC_HexGraph_C::Use_Hex_Control___as_Win_Condition' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, Hex_Control___Target_to_Win) == 0x000290, "Member 'ATC_HexGraph_C::Hex_Control___Target_to_Win' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, Test_Constant) == 0x000294, "Member 'ATC_HexGraph_C::Test_Constant' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, Hex_Z_Scale) == 0x000298, "Member 'ATC_HexGraph_C::Hex_Z_Scale' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, Flip_Teams) == 0x00029C, "Member 'ATC_HexGraph_C::Flip_Teams' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, Width_Spacer) == 0x0002A0, "Member 'ATC_HexGraph_C::Width_Spacer' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, Height_Spacer) == 0x0002A4, "Member 'ATC_HexGraph_C::Height_Spacer' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, Hex_Widths) == 0x0002A8, "Member 'ATC_HexGraph_C::Hex_Widths' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, Hex_Lengths) == 0x0002AC, "Member 'ATC_HexGraph_C::Hex_Lengths' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, Hex_Transform_Array) == 0x0002B0, "Member 'ATC_HexGraph_C::Hex_Transform_Array' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, Start_Random_Anchor_Distance) == 0x0002C0, "Member 'ATC_HexGraph_C::Start_Random_Anchor_Distance' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, End_Random_Anchor_Distance) == 0x0002C4, "Member 'ATC_HexGraph_C::End_Random_Anchor_Distance' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, Team_1_Anchors) == 0x0002C8, "Member 'ATC_HexGraph_C::Team_1_Anchors' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, Team_2_Anchors) == 0x0002D8, "Member 'ATC_HexGraph_C::Team_2_Anchors' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, Team_1_Anchor) == 0x0002E8, "Member 'ATC_HexGraph_C::Team_1_Anchor' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, Team_2_Anchor) == 0x0002F0, "Member 'ATC_HexGraph_C::Team_2_Anchor' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, Current_Hexes_in_Round) == 0x0002F8, "Member 'ATC_HexGraph_C::Current_Hexes_in_Round' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, Team_Hex_Ownership) == 0x000308, "Member 'ATC_HexGraph_C::Team_Hex_Ownership' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, Target_Zones_To_Capture) == 0x000318, "Member 'ATC_HexGraph_C::Target_Zones_To_Capture' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, Hex_Class) == 0x000320, "Member 'ATC_HexGraph_C::Hex_Class' has a wrong offset!");
static_assert(offsetof(ATC_HexGraph_C, Nearby_Hexes_Required_to_Cap) == 0x000328, "Member 'ATC_HexGraph_C::Nearby_Hexes_Required_to_Cap' has a wrong offset!");

}

