#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Director_Line

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function W_Director_Line.W_Director_Line_C.ExecuteUbergraph_W_Director_Line
// 0x00A0 (0x00A0 - 0x0000)
struct W_Director_Line_C_ExecuteUbergraph_W_Director_Line final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45F8[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsGrid_Data_Base_Option;   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45F9[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 K2Node_ClassDynamicCast_AsGrid_Data_Director_Option; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ClassDynamicCast_bSuccess_1;                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45FA[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Get_Angle_Widget_Angle;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Get_Angle_World_Rotation;                 // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Get_Pixel_Distance_Distance;              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MapMarkersEnabledDefined_ReturnValue;     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_45FB[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQColorsDataAsset*                     CallFunc_Get_SQHUD_Colors_ColorsDataAsset;         // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGridData_DirectorOption_C*             CallFunc_SpawnObject_ReturnValue;                  // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0050(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetColor_ReturnValue;                     // 0x008C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Director_Line_C_ExecuteUbergraph_W_Director_Line) == 0x000008, "Wrong alignment on W_Director_Line_C_ExecuteUbergraph_W_Director_Line");
static_assert(sizeof(W_Director_Line_C_ExecuteUbergraph_W_Director_Line) == 0x0000A0, "Wrong size on W_Director_Line_C_ExecuteUbergraph_W_Director_Line");
static_assert(offsetof(W_Director_Line_C_ExecuteUbergraph_W_Director_Line, EntryPoint) == 0x000000, "Member 'W_Director_Line_C_ExecuteUbergraph_W_Director_Line::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_Director_Line_C_ExecuteUbergraph_W_Director_Line, K2Node_ClassDynamicCast_AsGrid_Data_Base_Option) == 0x000008, "Member 'W_Director_Line_C_ExecuteUbergraph_W_Director_Line::K2Node_ClassDynamicCast_AsGrid_Data_Base_Option' has a wrong offset!");
static_assert(offsetof(W_Director_Line_C_ExecuteUbergraph_W_Director_Line, K2Node_ClassDynamicCast_bSuccess) == 0x000010, "Member 'W_Director_Line_C_ExecuteUbergraph_W_Director_Line::K2Node_ClassDynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_Director_Line_C_ExecuteUbergraph_W_Director_Line, K2Node_ClassDynamicCast_AsGrid_Data_Director_Option) == 0x000018, "Member 'W_Director_Line_C_ExecuteUbergraph_W_Director_Line::K2Node_ClassDynamicCast_AsGrid_Data_Director_Option' has a wrong offset!");
static_assert(offsetof(W_Director_Line_C_ExecuteUbergraph_W_Director_Line, K2Node_ClassDynamicCast_bSuccess_1) == 0x000020, "Member 'W_Director_Line_C_ExecuteUbergraph_W_Director_Line::K2Node_ClassDynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(W_Director_Line_C_ExecuteUbergraph_W_Director_Line, CallFunc_Get_Angle_Widget_Angle) == 0x000024, "Member 'W_Director_Line_C_ExecuteUbergraph_W_Director_Line::CallFunc_Get_Angle_Widget_Angle' has a wrong offset!");
static_assert(offsetof(W_Director_Line_C_ExecuteUbergraph_W_Director_Line, CallFunc_Get_Angle_World_Rotation) == 0x000028, "Member 'W_Director_Line_C_ExecuteUbergraph_W_Director_Line::CallFunc_Get_Angle_World_Rotation' has a wrong offset!");
static_assert(offsetof(W_Director_Line_C_ExecuteUbergraph_W_Director_Line, CallFunc_Get_Pixel_Distance_Distance) == 0x000034, "Member 'W_Director_Line_C_ExecuteUbergraph_W_Director_Line::CallFunc_Get_Pixel_Distance_Distance' has a wrong offset!");
static_assert(offsetof(W_Director_Line_C_ExecuteUbergraph_W_Director_Line, CallFunc_MapMarkersEnabledDefined_ReturnValue) == 0x000038, "Member 'W_Director_Line_C_ExecuteUbergraph_W_Director_Line::CallFunc_MapMarkersEnabledDefined_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Director_Line_C_ExecuteUbergraph_W_Director_Line, CallFunc_Get_SQHUD_Colors_ColorsDataAsset) == 0x000040, "Member 'W_Director_Line_C_ExecuteUbergraph_W_Director_Line::CallFunc_Get_SQHUD_Colors_ColorsDataAsset' has a wrong offset!");
static_assert(offsetof(W_Director_Line_C_ExecuteUbergraph_W_Director_Line, CallFunc_SpawnObject_ReturnValue) == 0x000048, "Member 'W_Director_Line_C_ExecuteUbergraph_W_Director_Line::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Director_Line_C_ExecuteUbergraph_W_Director_Line, K2Node_Event_MyGeometry) == 0x000050, "Member 'W_Director_Line_C_ExecuteUbergraph_W_Director_Line::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(W_Director_Line_C_ExecuteUbergraph_W_Director_Line, K2Node_Event_InDeltaTime) == 0x000088, "Member 'W_Director_Line_C_ExecuteUbergraph_W_Director_Line::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(W_Director_Line_C_ExecuteUbergraph_W_Director_Line, CallFunc_GetColor_ReturnValue) == 0x00008C, "Member 'W_Director_Line_C_ExecuteUbergraph_W_Director_Line::CallFunc_GetColor_ReturnValue' has a wrong offset!");

// Function W_Director_Line.W_Director_Line_C.Tick
// 0x003C (0x003C - 0x0000)
struct W_Director_Line_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Director_Line_C_Tick) == 0x000004, "Wrong alignment on W_Director_Line_C_Tick");
static_assert(sizeof(W_Director_Line_C_Tick) == 0x00003C, "Wrong size on W_Director_Line_C_Tick");
static_assert(offsetof(W_Director_Line_C_Tick, MyGeometry) == 0x000000, "Member 'W_Director_Line_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_Director_Line_C_Tick, InDeltaTime) == 0x000038, "Member 'W_Director_Line_C_Tick::InDeltaTime' has a wrong offset!");

}

