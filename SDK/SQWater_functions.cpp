#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SQWater

#include "Basic.hpp"

#include "SQWater_classes.hpp"
#include "SQWater_parameters.hpp"


namespace SDK
{

// Function SQWater.SQWaterPointTestComponent.OnEnteredWaterBody
// (Native, Public)

void USQWaterPointTestComponent::OnEnteredWaterBody()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWaterPointTestComponent", "OnEnteredWaterBody");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SQWater.SQWaterPointTestComponent.OnExitedWaterBody
// (Native, Public)

void USQWaterPointTestComponent::OnExitedWaterBody()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWaterPointTestComponent", "OnExitedWaterBody");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SQWater.SQWaterPointTestComponent.SetBaseWaterComponent
// (Native, Public, BlueprintCallable)
// Parameters:
// class USQBaseWaterComponent*            Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQWaterPointTestComponent::SetBaseWaterComponent(class USQBaseWaterComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWaterPointTestComponent", "SetBaseWaterComponent");

	Params::SQWaterPointTestComponent_SetBaseWaterComponent Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SQWater.SQWaterPointTestComponent.GetImmersionDepth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQWaterPointTestComponent::GetImmersionDepth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWaterPointTestComponent", "GetImmersionDepth");

	Params::SQWaterPointTestComponent_GetImmersionDepth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SQWater.SQWaterPointTestComponent.GetWaterDensity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQWaterPointTestComponent::GetWaterDensity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWaterPointTestComponent", "GetWaterDensity");

	Params::SQWaterPointTestComponent_GetWaterDensity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SQWater.SQWaterPointTestComponent.IsOverlappingWaterBody
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQWaterPointTestComponent::IsOverlappingWaterBody() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWaterPointTestComponent", "IsOverlappingWaterBody");

	Params::SQWaterPointTestComponent_IsOverlappingWaterBody Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SQWater.ODKWaterIntensityData.GetMaskingData
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// float                                   OutIntensity                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Clipping                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UODKWaterIntensityData::GetMaskingData(float* OutIntensity, bool* Clipping, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ODKWaterIntensityData", "GetMaskingData");

	Params::ODKWaterIntensityData_GetMaskingData Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutIntensity != nullptr)
		*OutIntensity = Parms.OutIntensity;

	if (Clipping != nullptr)
		*Clipping = Parms.Clipping;
}


// Function SQWater.ODKWaterDamageComponent.InflictDamage
// (Final, Native, Private)

void UODKWaterDamageComponent::InflictDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ODKWaterDamageComponent", "InflictDamage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SQWater.SQBaseWaterComponent.GetCurrentWaterBodiesRef
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class ASQWaterBody*>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ASQWaterBody*> USQBaseWaterComponent::GetCurrentWaterBodiesRef()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBaseWaterComponent", "GetCurrentWaterBodiesRef");

	Params::SQBaseWaterComponent_GetCurrentWaterBodiesRef Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SQWater.SQBaseWaterComponent.GetWaterDepth
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Location                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Depth                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBaseWaterComponent::GetWaterDepth(const struct FVector& Location, float* Depth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBaseWaterComponent", "GetWaterDepth");

	Params::SQBaseWaterComponent_GetWaterDepth Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Depth != nullptr)
		*Depth = Parms.Depth;

	return Parms.ReturnValue;
}


// Function SQWater.SQBaseWaterComponent.GetWaterHeight
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DefaultHeight                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQBaseWaterComponent::GetWaterHeight(const struct FVector& Location, float DefaultHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBaseWaterComponent", "GetWaterHeight");

	Params::SQBaseWaterComponent_GetWaterHeight Parms{};

	Parms.Location = std::move(Location);
	Parms.DefaultHeight = DefaultHeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SQWater.SQBaseWaterComponent.GetWaterImmersionDepth
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Location                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQBaseWaterComponent::GetWaterImmersionDepth(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBaseWaterComponent", "GetWaterImmersionDepth");

	Params::SQBaseWaterComponent_GetWaterImmersionDepth Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SQWater.SQBaseWaterComponent.GetCurrentWaterBodies
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class ASQWaterBody*>       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class ASQWaterBody*> USQBaseWaterComponent::GetCurrentWaterBodies() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBaseWaterComponent", "GetCurrentWaterBodies");

	Params::SQBaseWaterComponent_GetCurrentWaterBodies Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SQWater.SQBaseWaterComponent.GetSimulatedComponent
// (Final, Native, Public, Const)
// Parameters:
// class UPrimitiveComponent*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPrimitiveComponent* USQBaseWaterComponent::GetSimulatedComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBaseWaterComponent", "GetSimulatedComponent");

	Params::SQBaseWaterComponent_GetSimulatedComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SQWater.SQBaseWaterComponent.GetWaterLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQWaterBody*                     OutWaterBody                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutWaterSurfaceLocation                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutWaterNormal                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBaseWaterComponent::GetWaterLocation(const struct FVector& Location, class ASQWaterBody** OutWaterBody, struct FVector* OutWaterSurfaceLocation, struct FVector* OutWaterNormal) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBaseWaterComponent", "GetWaterLocation");

	Params::SQBaseWaterComponent_GetWaterLocation Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutWaterBody != nullptr)
		*OutWaterBody = Parms.OutWaterBody;

	if (OutWaterSurfaceLocation != nullptr)
		*OutWaterSurfaceLocation = std::move(Parms.OutWaterSurfaceLocation);

	if (OutWaterNormal != nullptr)
		*OutWaterNormal = std::move(Parms.OutWaterNormal);

	return Parms.ReturnValue;
}


// Function SQWater.SQBaseWaterComponent.IsInValidWaterBody
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBaseWaterComponent::IsInValidWaterBody() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBaseWaterComponent", "IsInValidWaterBody");

	Params::SQBaseWaterComponent_IsInValidWaterBody Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SQWater.SQBaseWaterComponent.IsInWaterBody
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBaseWaterComponent::IsInWaterBody() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBaseWaterComponent", "IsInWaterBody");

	Params::SQBaseWaterComponent_IsInWaterBody Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SQWater.SQBaseWaterComponent.IsOverlappingWaterBody
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBaseWaterComponent::IsOverlappingWaterBody() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBaseWaterComponent", "IsOverlappingWaterBody");

	Params::SQBaseWaterComponent_IsOverlappingWaterBody Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SQWater.SQBuoyancyComponent.AddCustomPontoon
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InRelativeLocation                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBuoyancyComponent::AddCustomPontoon(float Radius, const struct FVector& InRelativeLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBuoyancyComponent", "AddCustomPontoon");

	Params::SQBuoyancyComponent_AddCustomPontoon Parms{};

	Parms.Radius = Radius;
	Parms.InRelativeLocation = std::move(InRelativeLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SQWater.SQBuoyancyComponent.AddCustomPontoonSocket
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             CenterSocketName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBuoyancyComponent::AddCustomPontoonSocket(float Radius, class FName CenterSocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBuoyancyComponent", "AddCustomPontoonSocket");

	Params::SQBuoyancyComponent_AddCustomPontoonSocket Parms{};

	Parms.Radius = Radius;
	Parms.CenterSocketName = CenterSocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SQWater.SQBuoyancyComponent.GeneratePontoonsFromBounds
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FBoxSphereBounds                 Bounds                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void USQBuoyancyComponent::GeneratePontoonsFromBounds(const struct FBoxSphereBounds& Bounds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBuoyancyComponent", "GeneratePontoonsFromBounds");

	Params::SQBuoyancyComponent_GeneratePontoonsFromBounds Parms{};

	Parms.Bounds = std::move(Bounds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SQWater.SQBuoyancyComponent.OnPontoonEnteredWater
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FODKSphericalPontoon             Pontoon                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USQBuoyancyComponent::OnPontoonEnteredWater(const struct FODKSphericalPontoon& Pontoon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBuoyancyComponent", "OnPontoonEnteredWater");

	Params::SQBuoyancyComponent_OnPontoonEnteredWater Parms{};

	Parms.Pontoon = std::move(Pontoon);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SQWater.SQBuoyancyComponent.OnPontoonExitedWater
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FODKSphericalPontoon             Pontoon                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USQBuoyancyComponent::OnPontoonExitedWater(const struct FODKSphericalPontoon& Pontoon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBuoyancyComponent", "OnPontoonExitedWater");

	Params::SQBuoyancyComponent_OnPontoonExitedWater Parms{};

	Parms.Pontoon = std::move(Pontoon);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SQWater.SQBuoyancyComponent.SetWaterDampeningTransform
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       NewTransform                                           (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void USQBuoyancyComponent::SetWaterDampeningTransform(const struct FTransform& NewTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBuoyancyComponent", "SetWaterDampeningTransform");

	Params::SQBuoyancyComponent_SetWaterDampeningTransform Parms{};

	Parms.NewTransform = std::move(NewTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SQWater.SQBuoyancyComponent.ShowPontoonVisualizer
// (Final, Native, Public)

void USQBuoyancyComponent::ShowPontoonVisualizer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBuoyancyComponent", "ShowPontoonVisualizer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SQWater.SQBuoyancyComponent.HasPontoons
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBuoyancyComponent::HasPontoons() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBuoyancyComponent", "HasPontoons");

	Params::SQBuoyancyComponent_HasPontoons Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SQWater.ODKWaterMovementComponent.AddMechanism
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UODKWaterMechanismComponent*      Mechanism                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UODKWaterMovementComponent::AddMechanism(class UODKWaterMechanismComponent* Mechanism, int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ODKWaterMovementComponent", "AddMechanism");

	Params::ODKWaterMovementComponent_AddMechanism Parms{};

	Parms.Mechanism = Mechanism;
	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SQWater.ODKWaterMovementComponent.ApplyMovement
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UODKWaterMovementComponent::ApplyMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ODKWaterMovementComponent", "ApplyMovement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SQWater.ODKWaterMovementComponent.GetBuoyancyComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USQBuoyancyComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQBuoyancyComponent* UODKWaterMovementComponent::GetBuoyancyComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ODKWaterMovementComponent", "GetBuoyancyComponent");

	Params::ODKWaterMovementComponent_GetBuoyancyComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SQWater.ODKWaterMovementComponent.GetMaxRPM
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UODKWaterMovementComponent::GetMaxRPM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ODKWaterMovementComponent", "GetMaxRPM");

	Params::ODKWaterMovementComponent_GetMaxRPM Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SQWater.ODKWaterMovementComponent.GetRPM
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UODKWaterMovementComponent::GetRPM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ODKWaterMovementComponent", "GetRPM");

	Params::ODKWaterMovementComponent_GetRPM Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SQWater.ODKWaterMovementComponent.GetWaterVehicleVelocity
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UODKWaterMovementComponent::GetWaterVehicleVelocity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ODKWaterMovementComponent", "GetWaterVehicleVelocity");

	Params::ODKWaterMovementComponent_GetWaterVehicleVelocity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SQWater.ODKWaterMovementComponent.OnEnteredWater
// (Final, Native, Public)

void UODKWaterMovementComponent::OnEnteredWater()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ODKWaterMovementComponent", "OnEnteredWater");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SQWater.ODKWaterMovementComponent.OnExitWater
// (Final, Native, Public)

void UODKWaterMovementComponent::OnExitWater()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ODKWaterMovementComponent", "OnExitWater");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SQWater.ODKWaterMovementComponent.OnMechanismAdded
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UODKWaterMechanismComponent*      InMechanismComponent                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UODKWaterMovementComponent::OnMechanismAdded(class UODKWaterMechanismComponent* InMechanismComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ODKWaterMovementComponent", "OnMechanismAdded");

	Params::ODKWaterMovementComponent_OnMechanismAdded Parms{};

	Parms.InMechanismComponent = InMechanismComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SQWater.ODKWaterMovementComponent.ProcessInputs
// (Final, Native, Public, BlueprintCallable)

void UODKWaterMovementComponent::ProcessInputs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ODKWaterMovementComponent", "ProcessInputs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SQWater.ODKWaterMovementComponent.ProcessInputsServer
// (Net, Native, Event, Public, NetServer)
// Parameters:
// float                                   RawThrottle                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RawSteering                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UODKWaterMovementComponent::ProcessInputsServer(const float RawThrottle, const float RawSteering)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ODKWaterMovementComponent", "ProcessInputsServer");

	Params::ODKWaterMovementComponent_ProcessInputsServer Parms{};

	Parms.RawThrottle = RawThrottle;
	Parms.RawSteering = RawSteering;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SQWater.ODKWaterMovementComponent.SetBuoyancyComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USQBuoyancyComponent*             Param_BuoyancyComponent                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UODKWaterMovementComponent::SetBuoyancyComponent(class USQBuoyancyComponent* Param_BuoyancyComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ODKWaterMovementComponent", "SetBuoyancyComponent");

	Params::ODKWaterMovementComponent_SetBuoyancyComponent Parms{};

	Parms.Param_BuoyancyComponent = Param_BuoyancyComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SQWater.ODKWaterMovementComponent.GetSimulatedComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPrimitiveComponent*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPrimitiveComponent* UODKWaterMovementComponent::GetSimulatedComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ODKWaterMovementComponent", "GetSimulatedComponent");

	Params::ODKWaterMovementComponent_GetSimulatedComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SQWater.ODKWaterIntensityDrawComponent.PackMaskingVolumeData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FODKMaskingVolume>        Volumes                                                (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UODKWaterIntensityDrawComponent::PackMaskingVolumeData(TArray<struct FODKMaskingVolume>& Volumes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ODKWaterIntensityDrawComponent", "PackMaskingVolumeData");

	Params::ODKWaterIntensityDrawComponent_PackMaskingVolumeData Parms{};

	Parms.Volumes = std::move(Volumes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Volumes = std::move(Parms.Volumes);
}


// Function SQWater.ODKWaterIntensityDrawComponent.SetMIDParams
// (Final, Native, Public)

void UODKWaterIntensityDrawComponent::SetMIDParams()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ODKWaterIntensityDrawComponent", "SetMIDParams");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SQWater.ODKWaterIntensityDrawComponent.UpdateMIDParams
// (Final, Native, Public, BlueprintCallable)

void UODKWaterIntensityDrawComponent::UpdateMIDParams()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ODKWaterIntensityDrawComponent", "UpdateMIDParams");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SQWater.ODKWaterIntensityDrawComponent.UpdateWaterIntensityMasks
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FODKMaskingVolume>        Volumes                                                (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UODKWaterIntensityDrawComponent::UpdateWaterIntensityMasks(TArray<struct FODKMaskingVolume>& Volumes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ODKWaterIntensityDrawComponent", "UpdateWaterIntensityMasks");

	Params::ODKWaterIntensityDrawComponent_UpdateWaterIntensityMasks Parms{};

	Parms.Volumes = std::move(Volumes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Volumes = std::move(Parms.Volumes);
}


// Function SQWater.ODKWaterMechanismComponent.ApplySteering
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InSteeringInput                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UODKWaterMechanismComponent::ApplySteering(const float InSteeringInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ODKWaterMechanismComponent", "ApplySteering");

	Params::ODKWaterMechanismComponent_ApplySteering Parms{};

	Parms.InSteeringInput = InSteeringInput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SQWater.ODKWaterMechanismComponent.ApplyThrottle
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InThrottleInput                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UODKWaterMechanismComponent::ApplyThrottle(const float InThrottleInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ODKWaterMechanismComponent", "ApplyThrottle");

	Params::ODKWaterMechanismComponent_ApplyThrottle Parms{};

	Parms.InThrottleInput = InThrottleInput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SQWater.ODKWaterMechanismComponent.SetSimulatedComponent
// (Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              InSimulatedComponent                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UODKWaterMechanismComponent::SetSimulatedComponent(class UPrimitiveComponent* InSimulatedComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ODKWaterMechanismComponent", "SetSimulatedComponent");

	Params::ODKWaterMechanismComponent_SetSimulatedComponent Parms{};

	Parms.InSimulatedComponent = InSimulatedComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SQWater.SQWaterBody.GetMaxWaveHeight
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQWaterBody::GetMaxWaveHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWaterBody", "GetMaxWaveHeight");

	Params::SQWaterBody_GetMaxWaveHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SQWater.SQWaterBody.GetWaveReferenceTime
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQWaterBody::GetWaveReferenceTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWaterBody", "GetWaveReferenceTime");

	Params::SQWaterBody_GetWaveReferenceTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SQWater.SQOcean.DebugCPUIterations
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Iterations                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   WaveSetToSample                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutPos                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutNormal                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQOcean::DebugCPUIterations(const struct FVector& Position, int32 Iterations, int32 WaveSetToSample, struct FVector* OutPos, struct FVector* OutNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQOcean", "DebugCPUIterations");

	Params::SQOcean_DebugCPUIterations Parms{};

	Parms.Position = std::move(Position);
	Parms.Iterations = Iterations;
	Parms.WaveSetToSample = WaveSetToSample;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPos != nullptr)
		*OutPos = std::move(Parms.OutPos);

	if (OutNormal != nullptr)
		*OutNormal = std::move(Parms.OutNormal);
}


// Function SQWater.SQOcean.DebugWaveVisualization
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Spacing                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Lifetime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQOcean::DebugWaveVisualization(const struct FVector& Position, int32 Amount, float Spacing, float Lifetime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQOcean", "DebugWaveVisualization");

	Params::SQOcean_DebugWaveVisualization Parms{};

	Parms.Position = std::move(Position);
	Parms.Amount = Amount;
	Parms.Spacing = Spacing;
	Parms.Lifetime = Lifetime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SQWater.SQOcean.GetWaterHeight
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQOcean::GetWaterHeight(const struct FVector& Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQOcean", "GetWaterHeight");

	Params::SQOcean_GetWaterHeight Parms{};

	Parms.Position = std::move(Position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SQWater.SQOcean.InitializeWaterBody
// (Final, Native, Public, BlueprintCallable)

void ASQOcean::InitializeWaterBody()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQOcean", "InitializeWaterBody");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SQWater.SQOcean.OnPackedDataUpdated
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UTextureRenderTarget2D*           InPackedData                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQOcean::OnPackedDataUpdated(class UTextureRenderTarget2D* InPackedData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQOcean", "OnPackedDataUpdated");

	Params::SQOcean_OnPackedDataUpdated Parms{};

	Parms.InPackedData = InPackedData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SQWater.SQOcean.PackWaveData
// (Final, Native, Public, BlueprintCallable)

void ASQOcean::PackWaveData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQOcean", "PackWaveData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SQWater.SQOcean.GetWaterBody
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UStaticMeshComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStaticMeshComponent* ASQOcean::GetWaterBody() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQOcean", "GetWaterBody");

	Params::SQOcean_GetWaterBody Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SQWater.SQWaterBlueprintLibrary.CalculateDrag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   Coefficient                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Velocity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Density                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SurfaceArea                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BodyMass                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQWaterBlueprintLibrary::CalculateDrag(float Coefficient, float Velocity, float Density, float SurfaceArea, float DeltaTime, float BodyMass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQWaterBlueprintLibrary", "CalculateDrag");

	Params::SQWaterBlueprintLibrary_CalculateDrag Parms{};

	Parms.Coefficient = Coefficient;
	Parms.Velocity = Velocity;
	Parms.Density = Density;
	Parms.SurfaceArea = SurfaceArea;
	Parms.DeltaTime = DeltaTime;
	Parms.BodyMass = BodyMass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SQWater.SQWaterBlueprintLibrary.CmsToKmh
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   SpeedCms                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const float USQWaterBlueprintLibrary::CmsToKmh(float SpeedCms)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQWaterBlueprintLibrary", "CmsToKmh");

	Params::SQWaterBlueprintLibrary_CmsToKmh Parms{};

	Parms.SpeedCms = SpeedCms;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SQWater.SQWaterBlueprintLibrary.ConvertLocationToUVs
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        Offset                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        Size                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D USQWaterBlueprintLibrary::ConvertLocationToUVs(const struct FVector& Location, const struct FVector2D& Offset, const struct FVector2D& Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQWaterBlueprintLibrary", "ConvertLocationToUVs");

	Params::SQWaterBlueprintLibrary_ConvertLocationToUVs Parms{};

	Parms.Location = std::move(Location);
	Parms.Offset = std::move(Offset);
	Parms.Size = std::move(Size);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SQWater.SQWaterBlueprintLibrary.ConvertUVsToLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D                        UVs                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        Offset                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        Size                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USQWaterBlueprintLibrary::ConvertUVsToLocation(const struct FVector2D& UVs, const struct FVector2D& Offset, const struct FVector2D& Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQWaterBlueprintLibrary", "ConvertUVsToLocation");

	Params::SQWaterBlueprintLibrary_ConvertUVsToLocation Parms{};

	Parms.UVs = std::move(UVs);
	Parms.Offset = std::move(Offset);
	Parms.Size = std::move(Size);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SQWater.SQWaterBlueprintLibrary.GetDefaultWaterDensity
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQWaterBlueprintLibrary::GetDefaultWaterDensity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQWaterBlueprintLibrary", "GetDefaultWaterDensity");

	Params::SQWaterBlueprintLibrary_GetDefaultWaterDensity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SQWater.SQWaterRudderComponent.CalculateDrag
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          Velocity                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Rot                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   WaterDensity                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USQWaterRudderComponent::CalculateDrag(const struct FVector& Velocity, const float Rot, const float WaterDensity) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWaterRudderComponent", "CalculateDrag");

	Params::SQWaterRudderComponent_CalculateDrag Parms{};

	Parms.Velocity = std::move(Velocity);
	Parms.Rot = Rot;
	Parms.WaterDensity = WaterDensity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SQWater.SQWaterRudderComponent.CalculateNormalForce
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          Velocity                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Rot                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   WaterDensity                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USQWaterRudderComponent::CalculateNormalForce(const struct FVector& Velocity, const float Rot, const float WaterDensity) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWaterRudderComponent", "CalculateNormalForce");

	Params::SQWaterRudderComponent_CalculateNormalForce Parms{};

	Parms.Velocity = std::move(Velocity);
	Parms.Rot = Rot;
	Parms.WaterDensity = WaterDensity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SQWater.SQWaterRudderComponent.CalculateTorque
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          Velocity                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Rot                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   WaterDensity                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USQWaterRudderComponent::CalculateTorque(const struct FVector& Velocity, const float Rot, const float WaterDensity) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWaterRudderComponent", "CalculateTorque");

	Params::SQWaterRudderComponent_CalculateTorque Parms{};

	Parms.Velocity = std::move(Velocity);
	Parms.Rot = Rot;
	Parms.WaterDensity = WaterDensity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SQWater.SQWaterSubsystem.GetSmoothedWorldTimeSeconds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQWaterSubsystem::GetSmoothedWorldTimeSeconds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWaterSubsystem", "GetSmoothedWorldTimeSeconds");

	Params::SQWaterSubsystem_GetSmoothedWorldTimeSeconds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SQWater.SQWaterSubsystem.GetWaterTimeSeconds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQWaterSubsystem::GetWaterTimeSeconds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWaterSubsystem", "GetWaterTimeSeconds");

	Params::SQWaterSubsystem_GetWaterTimeSeconds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SQWater.WaterIntensityVolume.ConvertPosToGradient
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UWaterIntensityVolume::ConvertPosToGradient(const struct FVector& Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WaterIntensityVolume", "ConvertPosToGradient");

	Params::WaterIntensityVolume_ConvertPosToGradient Parms{};

	Parms.Position = std::move(Position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

