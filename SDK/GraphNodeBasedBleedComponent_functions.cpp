#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GraphNodeBasedBleedComponent

#include "Basic.hpp"

#include "GraphNodeBasedBleedComponent_classes.hpp"
#include "GraphNodeBasedBleedComponent_parameters.hpp"


namespace SDK
{

// Function GraphNodeBasedBleedComponent.GraphNodeBasedBleedComponent_C.ExecuteUbergraph_GraphNodeBasedBleedComponent
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGraphNodeBasedBleedComponent_C::ExecuteUbergraph_GraphNodeBasedBleedComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GraphNodeBasedBleedComponent_C", "ExecuteUbergraph_GraphNodeBasedBleedComponent");

	Params::GraphNodeBasedBleedComponent_C_ExecuteUbergraph_GraphNodeBasedBleedComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GraphNodeBasedBleedComponent.GraphNodeBasedBleedComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGraphNodeBasedBleedComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GraphNodeBasedBleedComponent_C", "ReceiveTick");

	Params::GraphNodeBasedBleedComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GraphNodeBasedBleedComponent.GraphNodeBasedBleedComponent_C.RecalculateBleedValues
// (BlueprintCallable, BlueprintEvent)

void UGraphNodeBasedBleedComponent_C::RecalculateBleedValues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GraphNodeBasedBleedComponent_C", "RecalculateBleedValues");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GraphNodeBasedBleedComponent.GraphNodeBasedBleedComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UGraphNodeBasedBleedComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GraphNodeBasedBleedComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GraphNodeBasedBleedComponent.GraphNodeBasedBleedComponent_C.TickBleed
// (Public, BlueprintCallable, BlueprintEvent)

void UGraphNodeBasedBleedComponent_C::TickBleed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GraphNodeBasedBleedComponent_C", "TickBleed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GraphNodeBasedBleedComponent.GraphNodeBasedBleedComponent_C.CleanArrays
// (Public, BlueprintCallable, BlueprintEvent)

void UGraphNodeBasedBleedComponent_C::CleanArrays()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GraphNodeBasedBleedComponent_C", "CleanArrays");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GraphNodeBasedBleedComponent.GraphNodeBasedBleedComponent_C.CountCaptureZonesByTeam
// (Public, BlueprintCallable, BlueprintEvent)

void UGraphNodeBasedBleedComponent_C::CountCaptureZonesByTeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GraphNodeBasedBleedComponent_C", "CountCaptureZonesByTeam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GraphNodeBasedBleedComponent.GraphNodeBasedBleedComponent_C.FindLosers
// (Public, BlueprintCallable, BlueprintEvent)

void UGraphNodeBasedBleedComponent_C::FindLosers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GraphNodeBasedBleedComponent_C", "FindLosers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GraphNodeBasedBleedComponent.GraphNodeBasedBleedComponent_C.CalculateBleed
// (Public, BlueprintCallable, BlueprintEvent)

void UGraphNodeBasedBleedComponent_C::CalculateBleed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GraphNodeBasedBleedComponent_C", "CalculateBleed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GraphNodeBasedBleedComponent.GraphNodeBasedBleedComponent_C.SetMercyBleedState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UGraphNodeBasedBleedComponent_C::SetMercyBleedState(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GraphNodeBasedBleedComponent_C", "SetMercyBleedState");

	Params::GraphNodeBasedBleedComponent_C_SetMercyBleedState Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GraphNodeBasedBleedComponent.GraphNodeBasedBleedComponent_C.SetBleedEnabled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNewBleedEnabled                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bResetBleedValues                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UGraphNodeBasedBleedComponent_C::SetBleedEnabled(bool bNewBleedEnabled, bool bResetBleedValues)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GraphNodeBasedBleedComponent_C", "SetBleedEnabled");

	Params::GraphNodeBasedBleedComponent_C_SetBleedEnabled Parms{};

	Parms.bNewBleedEnabled = bNewBleedEnabled;
	Parms.bResetBleedValues = bResetBleedValues;

	UObject::ProcessEvent(Func, &Parms);
}

}

