#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CommandActor_ArtilleryBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_CommandActor_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CommandActor_ArtilleryBase.BP_CommandActor_ArtilleryBase_C
// 0x0058 (0x02B8 - 0x0260)
class ABP_CommandActor_ArtilleryBase_C final : public ABP_CommandActor_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_CommandActor_ArtilleryBase_C;    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         Max_Drop_Radius;                                   // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Edge_Only;                                         // 0x026C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4406[0x3];                                     // 0x026D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Pre_Warning_Shells;                                // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Pre_Warning_Delay;                                 // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Shells_Per_Barrage;                                // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Barrage_Count;                                     // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Barrage_Interval;                                  // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         First_Barrage_Height_Variance;                     // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Main_Barrage_Height_Variance;                      // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Current_Prewarning_Shells;                         // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Current_Barrage;                                   // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Origin_Location;                                   // 0x0298(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Target_Location;                                   // 0x02A4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 Projectile;                                        // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_CommandActor_ArtilleryBase(int32 EntryPoint);
	void Server_Prewarning_Projectiles();
	void Fire_Projectiles(const TArray<struct FVector>& Locations);
	void Server_Projectiles();
	void ReceiveBeginPlay();
	void Get_Landscape_Hit_Location(struct FVector* Location, bool* Success);
	void OnRep_Start_Move();
	void Randomise_Location();
	void Init_Artillery();
	void Get_Main_Barrage_Array(TArray<struct FVector>* Out_Locations);
	void Get_Prewarn_Barrage_Array(TArray<struct FVector>* Out_Locations);
	void Server_Start_Active_Duration();
	void Server_End_Active_Duration();

	void Get_Radius(float* Radius) const;
	void Get_Distance(float* Dist) const;
	void GetStartingOffset(struct FVector* Offset) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CommandActor_ArtilleryBase_C">();
	}
	static class ABP_CommandActor_ArtilleryBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CommandActor_ArtilleryBase_C>();
	}
};
static_assert(alignof(ABP_CommandActor_ArtilleryBase_C) == 0x000008, "Wrong alignment on ABP_CommandActor_ArtilleryBase_C");
static_assert(sizeof(ABP_CommandActor_ArtilleryBase_C) == 0x0002B8, "Wrong size on ABP_CommandActor_ArtilleryBase_C");
static_assert(offsetof(ABP_CommandActor_ArtilleryBase_C, UberGraphFrame_BP_CommandActor_ArtilleryBase_C) == 0x000260, "Member 'ABP_CommandActor_ArtilleryBase_C::UberGraphFrame_BP_CommandActor_ArtilleryBase_C' has a wrong offset!");
static_assert(offsetof(ABP_CommandActor_ArtilleryBase_C, Max_Drop_Radius) == 0x000268, "Member 'ABP_CommandActor_ArtilleryBase_C::Max_Drop_Radius' has a wrong offset!");
static_assert(offsetof(ABP_CommandActor_ArtilleryBase_C, Edge_Only) == 0x00026C, "Member 'ABP_CommandActor_ArtilleryBase_C::Edge_Only' has a wrong offset!");
static_assert(offsetof(ABP_CommandActor_ArtilleryBase_C, Pre_Warning_Shells) == 0x000270, "Member 'ABP_CommandActor_ArtilleryBase_C::Pre_Warning_Shells' has a wrong offset!");
static_assert(offsetof(ABP_CommandActor_ArtilleryBase_C, Pre_Warning_Delay) == 0x000274, "Member 'ABP_CommandActor_ArtilleryBase_C::Pre_Warning_Delay' has a wrong offset!");
static_assert(offsetof(ABP_CommandActor_ArtilleryBase_C, Shells_Per_Barrage) == 0x000278, "Member 'ABP_CommandActor_ArtilleryBase_C::Shells_Per_Barrage' has a wrong offset!");
static_assert(offsetof(ABP_CommandActor_ArtilleryBase_C, Barrage_Count) == 0x00027C, "Member 'ABP_CommandActor_ArtilleryBase_C::Barrage_Count' has a wrong offset!");
static_assert(offsetof(ABP_CommandActor_ArtilleryBase_C, Barrage_Interval) == 0x000280, "Member 'ABP_CommandActor_ArtilleryBase_C::Barrage_Interval' has a wrong offset!");
static_assert(offsetof(ABP_CommandActor_ArtilleryBase_C, First_Barrage_Height_Variance) == 0x000288, "Member 'ABP_CommandActor_ArtilleryBase_C::First_Barrage_Height_Variance' has a wrong offset!");
static_assert(offsetof(ABP_CommandActor_ArtilleryBase_C, Main_Barrage_Height_Variance) == 0x00028C, "Member 'ABP_CommandActor_ArtilleryBase_C::Main_Barrage_Height_Variance' has a wrong offset!");
static_assert(offsetof(ABP_CommandActor_ArtilleryBase_C, Current_Prewarning_Shells) == 0x000290, "Member 'ABP_CommandActor_ArtilleryBase_C::Current_Prewarning_Shells' has a wrong offset!");
static_assert(offsetof(ABP_CommandActor_ArtilleryBase_C, Current_Barrage) == 0x000294, "Member 'ABP_CommandActor_ArtilleryBase_C::Current_Barrage' has a wrong offset!");
static_assert(offsetof(ABP_CommandActor_ArtilleryBase_C, Origin_Location) == 0x000298, "Member 'ABP_CommandActor_ArtilleryBase_C::Origin_Location' has a wrong offset!");
static_assert(offsetof(ABP_CommandActor_ArtilleryBase_C, Target_Location) == 0x0002A4, "Member 'ABP_CommandActor_ArtilleryBase_C::Target_Location' has a wrong offset!");
static_assert(offsetof(ABP_CommandActor_ArtilleryBase_C, Projectile) == 0x0002B0, "Member 'ABP_CommandActor_ArtilleryBase_C::Projectile' has a wrong offset!");

}

