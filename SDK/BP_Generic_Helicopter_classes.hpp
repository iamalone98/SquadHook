#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Generic_Helicopter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Squad_structs.hpp"
#include "Squad_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Generic_Helicopter.BP_Generic_Helicopter_C
// 0x04D0 (0x0E40 - 0x0970)
class ABP_Generic_Helicopter_C : public ASQHelicopter2
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0970(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        WaterDamagePoint;                                  // 0x0978(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_RotorWashSender_C*                  BP_RotorWashSender;                                // 0x0980(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USQArmorMeshComponent*                  CollisionArmorMesh;                                // 0x0988(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        Warning_Decal_04;                                  // 0x0990(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        Warning_Decal_03;                                  // 0x0998(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        Warning_Decal_02;                                  // 0x09A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        Warning_Decal_01;                                  // 0x09A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        WarningAudio;                                      // 0x09B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight3;                                       // 0x09B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight2;                                       // 0x09C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight1;                                       // 0x09C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x09D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Warning_Parent;                                    // 0x09D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LandingMarker;                                     // 0x09E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       LandingCamera;                                     // 0x09E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USQVehicleBurningComponent*             VehicleBurning;                                    // 0x09F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPComponent_RadialModel_C*             BPComponent_RadialModel;                           // 0x09F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               GroundEffect;                                      // 0x0A00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USQVehicleExitPointComponent*           SQVehicleExitPoint1;                               // 0x0A08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USQVehicleExitPointComponent*           SQVehicleExitPoint;                                // 0x0A10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        LandingArrowStabilizer;                            // 0x0A18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        LandingArrowBottomRight;                           // 0x0A20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        LandingArrowTopRight;                              // 0x0A28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        LandingArrowBottomLeft;                            // 0x0A30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        LandingArrowTopLeft;                               // 0x0A38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Warning_Light_Animation__Direction_BED4FDDF4B03AF41E9D22382105F3A83; // 0x0A40(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3704[0x7];                                     // 0x0A41(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Warning_Light_Animation;                           // 0x0A48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_2_Default_Power_079618E342F7064103BFCC9F05CBEF12; // 0x0A50(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_2__Direction_079618E342F7064103BFCC9F05CBEF12; // 0x0A54(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3705[0x3];                                     // 0x0A55(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_2;                                        // 0x0A58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PhysicsMinusIsLanded_;                             // 0x0A60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_3706[0x3];                                     // 0x0A61(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PhysicsMinusDefaultThrust;                         // 0x0A64(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PhysicsMinusIsReadyToLand_;                        // 0x0A68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3707[0x3];                                     // 0x0A69(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PhysicsMinusStrafePassiveInterp;                   // 0x0A6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsMinusBaseDeltaSpeed;                        // 0x0A70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsMinusAntiThrustPower;                       // 0x0A74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsMinusAddVelocityFromRotation;               // 0x0A78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsMinusStrafeOnRollInterp;                    // 0x0A7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsMinusThrustPower;                           // 0x0A80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsMinusPitchSpeedMultiplier;                  // 0x0A84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsMinusBaseMaxFlySpeed;                       // 0x0A88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsMinusReservedAcceleration;                  // 0x0A8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsMinusAccelerationByPitchCutoff;             // 0x0A90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsMinusMaxFlySpeed;                           // 0x0A94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsMinusCollisionMinSpeed;                     // 0x0A98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsMinusMaxDeltaSpeed;                         // 0x0A9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotorAccelerationScale;                            // 0x0AA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GameMinusDeltaSeconds;                             // 0x0AA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AController*                            ControllerMinusServerController;                   // 0x0AA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ControllerMinusIsPossessed_;                       // 0x0AB0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3708[0x7];                                     // 0x0AB1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      ControllerMinusPlayerController;                   // 0x0AB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ControllerMinusCurrentRotation;                    // 0x0AC0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               ControllerMinusPreviousRotation;                   // 0x0ACC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          GameMinusBegunPlay_;                               // 0x0AD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3709[0x3];                                     // 0x0AD9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LandingDistance;                                   // 0x0ADC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxVelocityToLand;                                 // 0x0AE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CollisionMinusGotCollisionHit_;                    // 0x0AE4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_370A[0x3];                                     // 0x0AE5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StrafePassive;                                     // 0x0AE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Twitchiness;                                       // 0x0AEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StrafeOnRoll;                                      // 0x0AF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StrafeOnRollSpeed;                                 // 0x0AF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotorLiftMin;                                      // 0x0AF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotorLiftMax;                                      // 0x0AFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Gravity;                                           // 0x0B00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AirFriction;                                       // 0x0B04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Friction;                                          // 0x0B08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_370B[0x4];                                     // 0x0B0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            FrictionByPitch;                                   // 0x0B10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            BrakeByPitch;                                      // 0x0B18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           AccelerationInterpolationSpeed;                    // 0x0B20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           UpDirectionByPitch;                                // 0x0B28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            ForwardDirectionByPitch;                           // 0x0B30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            RightDirectionByRoll;                              // 0x0B38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           TurnByRollOnSpeed;                                 // 0x0B40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaximumSpeed;                                      // 0x0B48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AverageSpeedPercent;                               // 0x0B4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotorStrength;                                     // 0x0B50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotorStrengthMultiplier;                           // 0x0B54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CollisionMinSpeed;                                 // 0x0B58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FrictionMultiplier;                                // 0x0B5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugMinusIsDebugging_;                            // 0x0B60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_370C[0x3];                                     // 0x0B61(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         YawInputInterpt;                                   // 0x0B64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         YawResistenceFromPitchStart;                       // 0x0B68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         YawResistenceFromPitchMax;                         // 0x0B6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         YawResistenceFromVelocityMinSpeed;                 // 0x0B70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         YawResistenceFromVelocityInputMul;                 // 0x0B74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrakeByYawMinSpeed;                                // 0x0B78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BrakeByYawSpeedCutOff;                             // 0x0B7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBrakeByYawInputSmooth_;                          // 0x0B80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_370D[0x3];                                     // 0x0B81(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RollDumpSpeed;                                     // 0x0B84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RollDumpFactor;                                    // 0x0B88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RollPushTime;                                      // 0x0B8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRollStabilizationEnabled_;                       // 0x0B90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_370E[0x7];                                     // 0x0B91(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            RollStabilization;                                 // 0x0B98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPitchStabilizationEnabled_;                      // 0x0BA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_370F[0x3];                                     // 0x0BA1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InputMinusPitch;                                   // 0x0BA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputMinusPitchSensitivityScale;                   // 0x0BA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputMinusPitchBounce;                             // 0x0BAC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputMinusPitchAxisValue;                          // 0x0BB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputMinusPitchBounceSecond;                       // 0x0BB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputMinusPitchRemaining;                          // 0x0BB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputMinusYaw;                                     // 0x0BBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputMinusYawAxisValue;                            // 0x0BC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputMinusYawResistenceFromVelocity;               // 0x0BC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputMinusYawRemaining;                            // 0x0BC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputMinusRoll;                                    // 0x0BCC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputMinusRollPushValue;                           // 0x0BD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputMinusRollSensitivityScale;                    // 0x0BD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputMinusRolltoYawInterp;                         // 0x0BD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputMinusRollAxisValue;                           // 0x0BDC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputMinusRollRemaining;                           // 0x0BE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputMinusBrakeByYawVelocityCut;                   // 0x0BE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputMinusBrakeByYawInputMultiplier;               // 0x0BE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputMinusAccelerationInputTime;                   // 0x0BEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InputMinusIsAccelerating_;                         // 0x0BF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          InputMinusIsDownPressed_;                          // 0x0BF1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          InputMinusIsYawBraking_;                           // 0x0BF2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3710[0x1];                                     // 0x0BF3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                VelocityMinusCurrentWorldOffset;                   // 0x0BF4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VelocityMinusCurrentLocalOffset;                   // 0x0C00(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VelocityMinusPreviousWorldOffset;                  // 0x0C0C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VelocityMinusPreviousLocalOffset;                  // 0x0C18(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3711[0x4];                                     // 0x0C24(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerMinusCheckIfLiftOff;                          // 0x0C28(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         InputMinusRawInputRudder;                          // 0x0C30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         RollInputInterpt;                                  // 0x0C34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PitchInputInterpt;                                 // 0x0C38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3712[0x4];                                     // 0x0C3C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            PitchStabilization;                                // 0x0C40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RollPushStrength;                                  // 0x0C48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RollSensitivityScaleLow;                           // 0x0C4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RollSensitivityScaleMiddle;                        // 0x0C50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RollSensitivityScaleMax;                           // 0x0C54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            RollInputScale;                                    // 0x0C58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PitchSensitivityScaleLow;                          // 0x0C60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PitchSensitivityScaleMiddle;                       // 0x0C64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PitchSensitivityScaleMax;                          // 0x0C68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3713[0x4];                                     // 0x0C6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            PitchInputScale;                                   // 0x0C70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         YawSensitivity__user_;                             // 0x0C78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         YawSensitivity;                                    // 0x0C7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         YawSpeed;                                          // 0x0C80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RollSensitivity__user_;                            // 0x0C84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RollSensitivity;                                   // 0x0C88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RollAxisInputClamp;                                // 0x0C8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PitchSensitivity__user_;                           // 0x0C90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PitchSensitivity;                                  // 0x0C94(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PitchAxisInputClamp;                               // 0x0C98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAddingYawWhenRolling_;                           // 0x0C9C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3714[0x3];                                     // 0x0C9D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PitchToYawAngleThreshold;                          // 0x0CA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PitchToYawScale;                                   // 0x0CA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MainRotorMaxRPM;                                   // 0x0CA8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TailRotorMaxRPM;                                   // 0x0CAC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MainRotorCCW;                                      // 0x0CB0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          TailRotorCCW;                                      // 0x0CB1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3715[0x2];                                     // 0x0CB2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BladesBlurMaxRPM;                                  // 0x0CB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BladesBlurMinRPM;                                  // 0x0CB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         GroundEffectMaxDistanceMeters;                     // 0x0CBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            VerticalStabilizerAngleMultiplier;                 // 0x0CC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           StabilizerCorrectionBySpeed;                       // 0x0CC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               PilotMinusInitialCameraRotation;                   // 0x0CD0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3716[0x4];                                     // 0x0CDC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQPhysicalMaterial*                    EffectsMinusPrevPhysMat;                           // 0x0CE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            HorizontalStabilizerAngleMultiplier;               // 0x0CE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               PilotMinusZoomCameraRotation;                      // 0x0CF0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         InstrumentsMinusAltitudeMeters;                    // 0x0CFC(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FTransform                             DebugMinusServerTransformLocation;                 // 0x0D00(0x0030)(Edit, BlueprintVisible, Net, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         PhysicsMinusMaxAltitude;                           // 0x0D30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Target_Landing_Camera_Rotation;                    // 0x0D34(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Warning_On;                                        // 0x0D40(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_3717[0x3];                                     // 0x0D41(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PhysicsMinusMainRotorRotationalForce;              // 0x0D44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsMinusPreventTailRotorLossEffectTime;        // 0x0D48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EngineMinusIsActive;                               // 0x0D4C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3718[0x3];                                     // 0x0D4D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            RotorEfficiencyByAOA;                              // 0x0D50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            RotorEfficiencyByAirspeed;                         // 0x0D58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RotorEfficiencyMax;                                // 0x0D60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxTailRotorLossSpinForce;                         // 0x0D64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PhysicsMinusFlipOverSpeedTailLoss;                 // 0x0D68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         HullWarningThreshold;                              // 0x0D6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EngineWarningThreshold;                            // 0x0D70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainRotorWarningThreshold;                         // 0x0D74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TailRotorWarningThreshold;                         // 0x0D78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugMovement;                                     // 0x0D7C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3719[0x3];                                     // 0x0D7D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Debug_True_Velocity;                               // 0x0D80(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Debug_Previous_Frame_True_Velocity;                // 0x0D8C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Debug_Previous_Frame_location;                     // 0x0D98(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Debug_True_Acceleration;                           // 0x0DA4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Debug_Previous_Frame_Acceleration;                 // 0x0DB0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputMinusRawYaw;                                  // 0x0DBC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputMinusRawRoll;                                 // 0x0DC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputMinusRawPitch;                                // 0x0DC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InputMinusRawAcceleration;                         // 0x0DC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AutoRotationBuffer;                                // 0x0DCC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AutoRotationEnergyDrainFactor;                     // 0x0DD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EngineDamageMinThrust;                             // 0x0DD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StabilizerDebug;                                   // 0x0DD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_371A[0x3];                                     // 0x0DD9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         YawInputRPMThreshold;                              // 0x0DDC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsJoy;                                            // 0x0DE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_371B[0x3];                                     // 0x0DE1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Collective;                                        // 0x0DE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JoyPitch;                                          // 0x0DE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JoyRoll;                                           // 0x0DEC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         JoyYaw;                                            // 0x0DF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsLockFreeLook;                                   // 0x0DF4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_371C[0x3];                                     // 0x0DF5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Last_FreeLookTime;                                 // 0x0DF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LookRight;                                         // 0x0DFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LookUp;                                            // 0x0E00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              LookState;                                         // 0x0E04(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCamZoom;                                         // 0x0E0C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_371D[0x3];                                     // 0x0E0D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MousePitch;                                        // 0x0E10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MouseRoll;                                         // 0x0E14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KeyPitch;                                          // 0x0E18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KeyRoll;                                           // 0x0E1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rotor_Wash_Radius;                                 // 0x0E20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DistanceToCullRotorWash_Meters;                    // 0x0E24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FatalWaterImpactVelocity;                          // 0x0E28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaterDamageInterval;                               // 0x0E2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WaterMaxDepth;                                     // 0x0E30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinimumWaterDamage;                                // 0x0E34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           WaterDamageHandle;                                 // 0x0E38(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Generic_Helicopter(int32 EntryPoint);
	void EndWaterDamage();
	void BndEvt__MainBladesCollision_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__TailBladesCollision_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void StartWaterDamage();
	void ApplyWaterDamage();
	void Optimize_Sender();
	void UpdateFreeLookSetting();
	void OnFDMImpact(const struct FHitResult& HitResult, float TimeSlice, const struct FVector& MoveDelta);
	void Set_Landing_Camera(bool Active);
	void Evaluate_Warning();
	void On_Out_of_Bounds();
	void On_Entered_Bounds();
	void Stop_Warning_Anim();
	void Start_Warning_Anim();
	void ReceiveDestroyed();
	void Warning_Light_Anim();
	void LeftVehicle(class ASQSoldier* Soldier, class USQVehicleSeatComponent* PreviousSeat);
	void Toggle_Landing_Camera(bool Condition);
	void OnPhysicsReplicated();
	void SwitchedSeat(class ASQSoldier* Soldier, class USQVehicleSeatComponent* PreviousSeat, class USQVehicleSeatComponent* NewSeat);
	void EnteredVehicle(class ASQSoldier* Soldier, class USQVehicleSeatComponent* NewSeat);
	void TickGroundEffect();
	void InpAxisEvt_VehicleZoom_K2Node_InputAxisEvent_8(float AxisValue);
	void BndEvt__VehicleMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnEngineActive(bool bActive);
	void CheckIfCanLandVehicle();
	void BeginPlay_Landing();
	void ReceiveTick(float DeltaSeconds);
	void TurnOnPhysics(bool IgnoreLandingCheck, const struct FVector& NewLinearVelocity, const struct FVector& NewAngularVelocity);
	void MC_VehicleUnpossessed();
	void ReceiveUnpossessed(class AController* OldController);
	void ROC_VehiclePosessed();
	void ReceivePossessed(class AController* NewController);
	void ReceiveBeginPlay();
	void InpAxisEvt_LookUp_K2Node_InputAxisEvent_13(float AxisValue);
	void InpAxisEvt_Turn_K2Node_InputAxisEvent_7(float AxisValue);
	void InpAxisEvt_HelicopterRollKey_K2Node_InputAxisEvent_5(float AxisValue);
	void InpAxisEvt_Helicopter_Look_Right_Left_K2Node_InputAxisEvent_4(float AxisValue);
	void InpAxisEvt_Helicopter_Look_Up_Down_K2Node_InputAxisEvent_2(float AxisValue);
	void InpAxisEvt_HelicopterPitchKey_K2Node_InputAxisEvent_6(float AxisValue);
	void InpAxisEvt_HelicopterCyclic_Yaw_K2Node_InputAxisEvent_11(float AxisValue);
	void InpAxisEvt_HelicopterCyclic_Roll_K2Node_InputAxisEvent_10(float AxisValue);
	void InpAxisEvt_HelicopterCyclic_Pitch_K2Node_InputAxisEvent_9(float AxisValue);
	void InpAxisEvt_Helicopter_Collective_K2Node_InputAxisEvent_8(float AxisValue);
	void HandleInput(float DeltaTimeRatio);
	void InpAxisEvt_MoveElevator_K2Node_InputAxisEvent_3(float AxisValue);
	void InpAxisEvt_MoveAileron_K2Node_InputAxisEvent_2(float AxisValue);
	void InpAxisEvt_HelicopterRight_K2Node_InputAxisEvent_1(float AxisValue);
	void InpAxisEvt_HelicopterUp_K2Node_InputAxisEvent_0(float AxisValue);
	void HandleInput_Pitch(float AxisValue);
	void HandleInput_Roll(float AxisValue);
	void HandleInput_Yaw(float AxisValue);
	void Acceleration_ModifySensitivity();
	void HandleInput_Acceleration(float AxisInput);
	void ROS_UpdateLandingState(bool IsLanded_);
	void StartCheckLiftOff();
	void CheckLiftOff();
	void MC_SetLandingState(bool NewIsLandedState);
	void LandVehicle();
	void InpActEvt_VehicleToggleCamera_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_PickupConstruct_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_PickupConstruct_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_PickupAmmo_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_PickupAmmo_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_DropConstruct_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_DropConstruct_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_DropAmmo_K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_DropAmmo_K2Node_InputActionEvent_8(const struct FKey& Key);
	void InpActEvt_Helicopter_Recenter_View_K2Node_InputActionEvent_9(const struct FKey& Key);
	void Warning_Light_Animation__LightOn__EventFunc();
	void Warning_Light_Animation__LightOff__EventFunc();
	void Warning_Light_Animation__UpdateFunc();
	void Warning_Light_Animation__FinishedFunc();
	void Timeline_2__UpdateFunc();
	void Timeline_2__FinishedFunc();
	void UserConstructionScript();
	void AddAcceleration();
	void CalcCustomVelocity(struct FVector* Velocity);
	void CanLand(bool* CanLand_);
	void GetPitchNormalized(float* NewParam);
	void GetRollNormalized(float* NewParam);
	void GetVelocityLength(float* NewParam);
	void CalcYawResistances();
	void CalcBrakebyYaw();
	void AddYaw(float Yaw);
	void AddPitch(float Pitch);
	void AddRoll(float Roll_);
	void DoPushAndBounce();
	void DoRollToYawTransfer();
	void GetGradualRotationIncrement(float* Roll, float* Pitch);
	void PolishRollInput();
	void GetDistanceFromTheGround(float TraceSize, float* Distance, bool* GotDistance);
	void PolishPitchInput();
	void EnablePhysics(bool bEnable);
	void ResetState();
	void ResetMovementState();
	void SetGroundEffect(float* Height);
	void DrawDebug(bool Draw);
	void GetRotationDiff(struct FRotator* NewParam);
	void DebugVariablesMap(const TMap<class FString, class FString>& Map, const struct FColor& Color);
	void GetThrustPower(float* Thrust);
	void PilotZoom(float InputPin);
	void DoStabilizers();
	void CheckPhysics();
	void DrawDebugLocation();
	void Manage_Landing_Camera();
	void DebugVectorToString(const struct FVector& Vector, int32 Digits, class FString* String);
	void DoRotationFromRoll();
	void OnRep_Warning_On();
	void DoRotors();
	void Set_UI_Enabled(bool Enable_UI);
	void GetVisualCollective(float* Collectives);
	void HAT_Look_To();
	void GetKnots(float* Knots);
	void Get_UI_Tint(struct FLinearColor* Color);
	void Is_Using_Landing_Camera(bool* Using_Landing_Camera);

	int32 GetMaxRPM() const;
	bool IsLanded() const;
	void GetEngineThrust(float* EngineThrust) const;
	float GetTailRotorThrust() const;
	float GetMainRotorThrust() const;
	float GetThrottle() const;
	void GetRotorEfficiency(float* Efficiency) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Generic_Helicopter_C">();
	}
	static class ABP_Generic_Helicopter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Generic_Helicopter_C>();
	}
};
static_assert(alignof(ABP_Generic_Helicopter_C) == 0x000010, "Wrong alignment on ABP_Generic_Helicopter_C");
static_assert(sizeof(ABP_Generic_Helicopter_C) == 0x000E40, "Wrong size on ABP_Generic_Helicopter_C");
static_assert(offsetof(ABP_Generic_Helicopter_C, UberGraphFrame) == 0x000970, "Member 'ABP_Generic_Helicopter_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, WaterDamagePoint) == 0x000978, "Member 'ABP_Generic_Helicopter_C::WaterDamagePoint' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, BP_RotorWashSender) == 0x000980, "Member 'ABP_Generic_Helicopter_C::BP_RotorWashSender' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, CollisionArmorMesh) == 0x000988, "Member 'ABP_Generic_Helicopter_C::CollisionArmorMesh' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, Warning_Decal_04) == 0x000990, "Member 'ABP_Generic_Helicopter_C::Warning_Decal_04' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, Warning_Decal_03) == 0x000998, "Member 'ABP_Generic_Helicopter_C::Warning_Decal_03' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, Warning_Decal_02) == 0x0009A0, "Member 'ABP_Generic_Helicopter_C::Warning_Decal_02' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, Warning_Decal_01) == 0x0009A8, "Member 'ABP_Generic_Helicopter_C::Warning_Decal_01' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, WarningAudio) == 0x0009B0, "Member 'ABP_Generic_Helicopter_C::WarningAudio' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PointLight3) == 0x0009B8, "Member 'ABP_Generic_Helicopter_C::PointLight3' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PointLight2) == 0x0009C0, "Member 'ABP_Generic_Helicopter_C::PointLight2' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PointLight1) == 0x0009C8, "Member 'ABP_Generic_Helicopter_C::PointLight1' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PointLight) == 0x0009D0, "Member 'ABP_Generic_Helicopter_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, Warning_Parent) == 0x0009D8, "Member 'ABP_Generic_Helicopter_C::Warning_Parent' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, LandingMarker) == 0x0009E0, "Member 'ABP_Generic_Helicopter_C::LandingMarker' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, LandingCamera) == 0x0009E8, "Member 'ABP_Generic_Helicopter_C::LandingCamera' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, VehicleBurning) == 0x0009F0, "Member 'ABP_Generic_Helicopter_C::VehicleBurning' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, BPComponent_RadialModel) == 0x0009F8, "Member 'ABP_Generic_Helicopter_C::BPComponent_RadialModel' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, GroundEffect) == 0x000A00, "Member 'ABP_Generic_Helicopter_C::GroundEffect' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, SQVehicleExitPoint1) == 0x000A08, "Member 'ABP_Generic_Helicopter_C::SQVehicleExitPoint1' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, SQVehicleExitPoint) == 0x000A10, "Member 'ABP_Generic_Helicopter_C::SQVehicleExitPoint' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, LandingArrowStabilizer) == 0x000A18, "Member 'ABP_Generic_Helicopter_C::LandingArrowStabilizer' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, LandingArrowBottomRight) == 0x000A20, "Member 'ABP_Generic_Helicopter_C::LandingArrowBottomRight' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, LandingArrowTopRight) == 0x000A28, "Member 'ABP_Generic_Helicopter_C::LandingArrowTopRight' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, LandingArrowBottomLeft) == 0x000A30, "Member 'ABP_Generic_Helicopter_C::LandingArrowBottomLeft' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, LandingArrowTopLeft) == 0x000A38, "Member 'ABP_Generic_Helicopter_C::LandingArrowTopLeft' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, Warning_Light_Animation__Direction_BED4FDDF4B03AF41E9D22382105F3A83) == 0x000A40, "Member 'ABP_Generic_Helicopter_C::Warning_Light_Animation__Direction_BED4FDDF4B03AF41E9D22382105F3A83' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, Warning_Light_Animation) == 0x000A48, "Member 'ABP_Generic_Helicopter_C::Warning_Light_Animation' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, Timeline_2_Default_Power_079618E342F7064103BFCC9F05CBEF12) == 0x000A50, "Member 'ABP_Generic_Helicopter_C::Timeline_2_Default_Power_079618E342F7064103BFCC9F05CBEF12' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, Timeline_2__Direction_079618E342F7064103BFCC9F05CBEF12) == 0x000A54, "Member 'ABP_Generic_Helicopter_C::Timeline_2__Direction_079618E342F7064103BFCC9F05CBEF12' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, Timeline_2) == 0x000A58, "Member 'ABP_Generic_Helicopter_C::Timeline_2' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PhysicsMinusIsLanded_) == 0x000A60, "Member 'ABP_Generic_Helicopter_C::PhysicsMinusIsLanded_' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PhysicsMinusDefaultThrust) == 0x000A64, "Member 'ABP_Generic_Helicopter_C::PhysicsMinusDefaultThrust' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PhysicsMinusIsReadyToLand_) == 0x000A68, "Member 'ABP_Generic_Helicopter_C::PhysicsMinusIsReadyToLand_' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PhysicsMinusStrafePassiveInterp) == 0x000A6C, "Member 'ABP_Generic_Helicopter_C::PhysicsMinusStrafePassiveInterp' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PhysicsMinusBaseDeltaSpeed) == 0x000A70, "Member 'ABP_Generic_Helicopter_C::PhysicsMinusBaseDeltaSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PhysicsMinusAntiThrustPower) == 0x000A74, "Member 'ABP_Generic_Helicopter_C::PhysicsMinusAntiThrustPower' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PhysicsMinusAddVelocityFromRotation) == 0x000A78, "Member 'ABP_Generic_Helicopter_C::PhysicsMinusAddVelocityFromRotation' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PhysicsMinusStrafeOnRollInterp) == 0x000A7C, "Member 'ABP_Generic_Helicopter_C::PhysicsMinusStrafeOnRollInterp' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PhysicsMinusThrustPower) == 0x000A80, "Member 'ABP_Generic_Helicopter_C::PhysicsMinusThrustPower' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PhysicsMinusPitchSpeedMultiplier) == 0x000A84, "Member 'ABP_Generic_Helicopter_C::PhysicsMinusPitchSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PhysicsMinusBaseMaxFlySpeed) == 0x000A88, "Member 'ABP_Generic_Helicopter_C::PhysicsMinusBaseMaxFlySpeed' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PhysicsMinusReservedAcceleration) == 0x000A8C, "Member 'ABP_Generic_Helicopter_C::PhysicsMinusReservedAcceleration' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PhysicsMinusAccelerationByPitchCutoff) == 0x000A90, "Member 'ABP_Generic_Helicopter_C::PhysicsMinusAccelerationByPitchCutoff' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PhysicsMinusMaxFlySpeed) == 0x000A94, "Member 'ABP_Generic_Helicopter_C::PhysicsMinusMaxFlySpeed' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PhysicsMinusCollisionMinSpeed) == 0x000A98, "Member 'ABP_Generic_Helicopter_C::PhysicsMinusCollisionMinSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PhysicsMinusMaxDeltaSpeed) == 0x000A9C, "Member 'ABP_Generic_Helicopter_C::PhysicsMinusMaxDeltaSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, RotorAccelerationScale) == 0x000AA0, "Member 'ABP_Generic_Helicopter_C::RotorAccelerationScale' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, GameMinusDeltaSeconds) == 0x000AA4, "Member 'ABP_Generic_Helicopter_C::GameMinusDeltaSeconds' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, ControllerMinusServerController) == 0x000AA8, "Member 'ABP_Generic_Helicopter_C::ControllerMinusServerController' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, ControllerMinusIsPossessed_) == 0x000AB0, "Member 'ABP_Generic_Helicopter_C::ControllerMinusIsPossessed_' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, ControllerMinusPlayerController) == 0x000AB8, "Member 'ABP_Generic_Helicopter_C::ControllerMinusPlayerController' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, ControllerMinusCurrentRotation) == 0x000AC0, "Member 'ABP_Generic_Helicopter_C::ControllerMinusCurrentRotation' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, ControllerMinusPreviousRotation) == 0x000ACC, "Member 'ABP_Generic_Helicopter_C::ControllerMinusPreviousRotation' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, GameMinusBegunPlay_) == 0x000AD8, "Member 'ABP_Generic_Helicopter_C::GameMinusBegunPlay_' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, LandingDistance) == 0x000ADC, "Member 'ABP_Generic_Helicopter_C::LandingDistance' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, MaxVelocityToLand) == 0x000AE0, "Member 'ABP_Generic_Helicopter_C::MaxVelocityToLand' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, CollisionMinusGotCollisionHit_) == 0x000AE4, "Member 'ABP_Generic_Helicopter_C::CollisionMinusGotCollisionHit_' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, StrafePassive) == 0x000AE8, "Member 'ABP_Generic_Helicopter_C::StrafePassive' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, Twitchiness) == 0x000AEC, "Member 'ABP_Generic_Helicopter_C::Twitchiness' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, StrafeOnRoll) == 0x000AF0, "Member 'ABP_Generic_Helicopter_C::StrafeOnRoll' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, StrafeOnRollSpeed) == 0x000AF4, "Member 'ABP_Generic_Helicopter_C::StrafeOnRollSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, RotorLiftMin) == 0x000AF8, "Member 'ABP_Generic_Helicopter_C::RotorLiftMin' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, RotorLiftMax) == 0x000AFC, "Member 'ABP_Generic_Helicopter_C::RotorLiftMax' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, Gravity) == 0x000B00, "Member 'ABP_Generic_Helicopter_C::Gravity' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, AirFriction) == 0x000B04, "Member 'ABP_Generic_Helicopter_C::AirFriction' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, Friction) == 0x000B08, "Member 'ABP_Generic_Helicopter_C::Friction' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, FrictionByPitch) == 0x000B10, "Member 'ABP_Generic_Helicopter_C::FrictionByPitch' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, BrakeByPitch) == 0x000B18, "Member 'ABP_Generic_Helicopter_C::BrakeByPitch' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, AccelerationInterpolationSpeed) == 0x000B20, "Member 'ABP_Generic_Helicopter_C::AccelerationInterpolationSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, UpDirectionByPitch) == 0x000B28, "Member 'ABP_Generic_Helicopter_C::UpDirectionByPitch' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, ForwardDirectionByPitch) == 0x000B30, "Member 'ABP_Generic_Helicopter_C::ForwardDirectionByPitch' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, RightDirectionByRoll) == 0x000B38, "Member 'ABP_Generic_Helicopter_C::RightDirectionByRoll' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, TurnByRollOnSpeed) == 0x000B40, "Member 'ABP_Generic_Helicopter_C::TurnByRollOnSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, MaximumSpeed) == 0x000B48, "Member 'ABP_Generic_Helicopter_C::MaximumSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, AverageSpeedPercent) == 0x000B4C, "Member 'ABP_Generic_Helicopter_C::AverageSpeedPercent' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, RotorStrength) == 0x000B50, "Member 'ABP_Generic_Helicopter_C::RotorStrength' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, RotorStrengthMultiplier) == 0x000B54, "Member 'ABP_Generic_Helicopter_C::RotorStrengthMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, CollisionMinSpeed) == 0x000B58, "Member 'ABP_Generic_Helicopter_C::CollisionMinSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, FrictionMultiplier) == 0x000B5C, "Member 'ABP_Generic_Helicopter_C::FrictionMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, DebugMinusIsDebugging_) == 0x000B60, "Member 'ABP_Generic_Helicopter_C::DebugMinusIsDebugging_' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, YawInputInterpt) == 0x000B64, "Member 'ABP_Generic_Helicopter_C::YawInputInterpt' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, YawResistenceFromPitchStart) == 0x000B68, "Member 'ABP_Generic_Helicopter_C::YawResistenceFromPitchStart' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, YawResistenceFromPitchMax) == 0x000B6C, "Member 'ABP_Generic_Helicopter_C::YawResistenceFromPitchMax' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, YawResistenceFromVelocityMinSpeed) == 0x000B70, "Member 'ABP_Generic_Helicopter_C::YawResistenceFromVelocityMinSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, YawResistenceFromVelocityInputMul) == 0x000B74, "Member 'ABP_Generic_Helicopter_C::YawResistenceFromVelocityInputMul' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, BrakeByYawMinSpeed) == 0x000B78, "Member 'ABP_Generic_Helicopter_C::BrakeByYawMinSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, BrakeByYawSpeedCutOff) == 0x000B7C, "Member 'ABP_Generic_Helicopter_C::BrakeByYawSpeedCutOff' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, IsBrakeByYawInputSmooth_) == 0x000B80, "Member 'ABP_Generic_Helicopter_C::IsBrakeByYawInputSmooth_' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, RollDumpSpeed) == 0x000B84, "Member 'ABP_Generic_Helicopter_C::RollDumpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, RollDumpFactor) == 0x000B88, "Member 'ABP_Generic_Helicopter_C::RollDumpFactor' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, RollPushTime) == 0x000B8C, "Member 'ABP_Generic_Helicopter_C::RollPushTime' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, IsRollStabilizationEnabled_) == 0x000B90, "Member 'ABP_Generic_Helicopter_C::IsRollStabilizationEnabled_' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, RollStabilization) == 0x000B98, "Member 'ABP_Generic_Helicopter_C::RollStabilization' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, IsPitchStabilizationEnabled_) == 0x000BA0, "Member 'ABP_Generic_Helicopter_C::IsPitchStabilizationEnabled_' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, InputMinusPitch) == 0x000BA4, "Member 'ABP_Generic_Helicopter_C::InputMinusPitch' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, InputMinusPitchSensitivityScale) == 0x000BA8, "Member 'ABP_Generic_Helicopter_C::InputMinusPitchSensitivityScale' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, InputMinusPitchBounce) == 0x000BAC, "Member 'ABP_Generic_Helicopter_C::InputMinusPitchBounce' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, InputMinusPitchAxisValue) == 0x000BB0, "Member 'ABP_Generic_Helicopter_C::InputMinusPitchAxisValue' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, InputMinusPitchBounceSecond) == 0x000BB4, "Member 'ABP_Generic_Helicopter_C::InputMinusPitchBounceSecond' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, InputMinusPitchRemaining) == 0x000BB8, "Member 'ABP_Generic_Helicopter_C::InputMinusPitchRemaining' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, InputMinusYaw) == 0x000BBC, "Member 'ABP_Generic_Helicopter_C::InputMinusYaw' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, InputMinusYawAxisValue) == 0x000BC0, "Member 'ABP_Generic_Helicopter_C::InputMinusYawAxisValue' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, InputMinusYawResistenceFromVelocity) == 0x000BC4, "Member 'ABP_Generic_Helicopter_C::InputMinusYawResistenceFromVelocity' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, InputMinusYawRemaining) == 0x000BC8, "Member 'ABP_Generic_Helicopter_C::InputMinusYawRemaining' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, InputMinusRoll) == 0x000BCC, "Member 'ABP_Generic_Helicopter_C::InputMinusRoll' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, InputMinusRollPushValue) == 0x000BD0, "Member 'ABP_Generic_Helicopter_C::InputMinusRollPushValue' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, InputMinusRollSensitivityScale) == 0x000BD4, "Member 'ABP_Generic_Helicopter_C::InputMinusRollSensitivityScale' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, InputMinusRolltoYawInterp) == 0x000BD8, "Member 'ABP_Generic_Helicopter_C::InputMinusRolltoYawInterp' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, InputMinusRollAxisValue) == 0x000BDC, "Member 'ABP_Generic_Helicopter_C::InputMinusRollAxisValue' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, InputMinusRollRemaining) == 0x000BE0, "Member 'ABP_Generic_Helicopter_C::InputMinusRollRemaining' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, InputMinusBrakeByYawVelocityCut) == 0x000BE4, "Member 'ABP_Generic_Helicopter_C::InputMinusBrakeByYawVelocityCut' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, InputMinusBrakeByYawInputMultiplier) == 0x000BE8, "Member 'ABP_Generic_Helicopter_C::InputMinusBrakeByYawInputMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, InputMinusAccelerationInputTime) == 0x000BEC, "Member 'ABP_Generic_Helicopter_C::InputMinusAccelerationInputTime' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, InputMinusIsAccelerating_) == 0x000BF0, "Member 'ABP_Generic_Helicopter_C::InputMinusIsAccelerating_' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, InputMinusIsDownPressed_) == 0x000BF1, "Member 'ABP_Generic_Helicopter_C::InputMinusIsDownPressed_' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, InputMinusIsYawBraking_) == 0x000BF2, "Member 'ABP_Generic_Helicopter_C::InputMinusIsYawBraking_' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, VelocityMinusCurrentWorldOffset) == 0x000BF4, "Member 'ABP_Generic_Helicopter_C::VelocityMinusCurrentWorldOffset' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, VelocityMinusCurrentLocalOffset) == 0x000C00, "Member 'ABP_Generic_Helicopter_C::VelocityMinusCurrentLocalOffset' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, VelocityMinusPreviousWorldOffset) == 0x000C0C, "Member 'ABP_Generic_Helicopter_C::VelocityMinusPreviousWorldOffset' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, VelocityMinusPreviousLocalOffset) == 0x000C18, "Member 'ABP_Generic_Helicopter_C::VelocityMinusPreviousLocalOffset' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, TimerMinusCheckIfLiftOff) == 0x000C28, "Member 'ABP_Generic_Helicopter_C::TimerMinusCheckIfLiftOff' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, InputMinusRawInputRudder) == 0x000C30, "Member 'ABP_Generic_Helicopter_C::InputMinusRawInputRudder' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, RollInputInterpt) == 0x000C34, "Member 'ABP_Generic_Helicopter_C::RollInputInterpt' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PitchInputInterpt) == 0x000C38, "Member 'ABP_Generic_Helicopter_C::PitchInputInterpt' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PitchStabilization) == 0x000C40, "Member 'ABP_Generic_Helicopter_C::PitchStabilization' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, RollPushStrength) == 0x000C48, "Member 'ABP_Generic_Helicopter_C::RollPushStrength' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, RollSensitivityScaleLow) == 0x000C4C, "Member 'ABP_Generic_Helicopter_C::RollSensitivityScaleLow' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, RollSensitivityScaleMiddle) == 0x000C50, "Member 'ABP_Generic_Helicopter_C::RollSensitivityScaleMiddle' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, RollSensitivityScaleMax) == 0x000C54, "Member 'ABP_Generic_Helicopter_C::RollSensitivityScaleMax' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, RollInputScale) == 0x000C58, "Member 'ABP_Generic_Helicopter_C::RollInputScale' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PitchSensitivityScaleLow) == 0x000C60, "Member 'ABP_Generic_Helicopter_C::PitchSensitivityScaleLow' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PitchSensitivityScaleMiddle) == 0x000C64, "Member 'ABP_Generic_Helicopter_C::PitchSensitivityScaleMiddle' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PitchSensitivityScaleMax) == 0x000C68, "Member 'ABP_Generic_Helicopter_C::PitchSensitivityScaleMax' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PitchInputScale) == 0x000C70, "Member 'ABP_Generic_Helicopter_C::PitchInputScale' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, YawSensitivity__user_) == 0x000C78, "Member 'ABP_Generic_Helicopter_C::YawSensitivity__user_' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, YawSensitivity) == 0x000C7C, "Member 'ABP_Generic_Helicopter_C::YawSensitivity' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, YawSpeed) == 0x000C80, "Member 'ABP_Generic_Helicopter_C::YawSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, RollSensitivity__user_) == 0x000C84, "Member 'ABP_Generic_Helicopter_C::RollSensitivity__user_' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, RollSensitivity) == 0x000C88, "Member 'ABP_Generic_Helicopter_C::RollSensitivity' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, RollAxisInputClamp) == 0x000C8C, "Member 'ABP_Generic_Helicopter_C::RollAxisInputClamp' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PitchSensitivity__user_) == 0x000C90, "Member 'ABP_Generic_Helicopter_C::PitchSensitivity__user_' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PitchSensitivity) == 0x000C94, "Member 'ABP_Generic_Helicopter_C::PitchSensitivity' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PitchAxisInputClamp) == 0x000C98, "Member 'ABP_Generic_Helicopter_C::PitchAxisInputClamp' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, IsAddingYawWhenRolling_) == 0x000C9C, "Member 'ABP_Generic_Helicopter_C::IsAddingYawWhenRolling_' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PitchToYawAngleThreshold) == 0x000CA0, "Member 'ABP_Generic_Helicopter_C::PitchToYawAngleThreshold' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PitchToYawScale) == 0x000CA4, "Member 'ABP_Generic_Helicopter_C::PitchToYawScale' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, MainRotorMaxRPM) == 0x000CA8, "Member 'ABP_Generic_Helicopter_C::MainRotorMaxRPM' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, TailRotorMaxRPM) == 0x000CAC, "Member 'ABP_Generic_Helicopter_C::TailRotorMaxRPM' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, MainRotorCCW) == 0x000CB0, "Member 'ABP_Generic_Helicopter_C::MainRotorCCW' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, TailRotorCCW) == 0x000CB1, "Member 'ABP_Generic_Helicopter_C::TailRotorCCW' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, BladesBlurMaxRPM) == 0x000CB4, "Member 'ABP_Generic_Helicopter_C::BladesBlurMaxRPM' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, BladesBlurMinRPM) == 0x000CB8, "Member 'ABP_Generic_Helicopter_C::BladesBlurMinRPM' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, GroundEffectMaxDistanceMeters) == 0x000CBC, "Member 'ABP_Generic_Helicopter_C::GroundEffectMaxDistanceMeters' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, VerticalStabilizerAngleMultiplier) == 0x000CC0, "Member 'ABP_Generic_Helicopter_C::VerticalStabilizerAngleMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, StabilizerCorrectionBySpeed) == 0x000CC8, "Member 'ABP_Generic_Helicopter_C::StabilizerCorrectionBySpeed' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PilotMinusInitialCameraRotation) == 0x000CD0, "Member 'ABP_Generic_Helicopter_C::PilotMinusInitialCameraRotation' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, EffectsMinusPrevPhysMat) == 0x000CE0, "Member 'ABP_Generic_Helicopter_C::EffectsMinusPrevPhysMat' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, HorizontalStabilizerAngleMultiplier) == 0x000CE8, "Member 'ABP_Generic_Helicopter_C::HorizontalStabilizerAngleMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PilotMinusZoomCameraRotation) == 0x000CF0, "Member 'ABP_Generic_Helicopter_C::PilotMinusZoomCameraRotation' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, InstrumentsMinusAltitudeMeters) == 0x000CFC, "Member 'ABP_Generic_Helicopter_C::InstrumentsMinusAltitudeMeters' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, DebugMinusServerTransformLocation) == 0x000D00, "Member 'ABP_Generic_Helicopter_C::DebugMinusServerTransformLocation' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PhysicsMinusMaxAltitude) == 0x000D30, "Member 'ABP_Generic_Helicopter_C::PhysicsMinusMaxAltitude' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, Target_Landing_Camera_Rotation) == 0x000D34, "Member 'ABP_Generic_Helicopter_C::Target_Landing_Camera_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, Warning_On) == 0x000D40, "Member 'ABP_Generic_Helicopter_C::Warning_On' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PhysicsMinusMainRotorRotationalForce) == 0x000D44, "Member 'ABP_Generic_Helicopter_C::PhysicsMinusMainRotorRotationalForce' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PhysicsMinusPreventTailRotorLossEffectTime) == 0x000D48, "Member 'ABP_Generic_Helicopter_C::PhysicsMinusPreventTailRotorLossEffectTime' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, EngineMinusIsActive) == 0x000D4C, "Member 'ABP_Generic_Helicopter_C::EngineMinusIsActive' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, RotorEfficiencyByAOA) == 0x000D50, "Member 'ABP_Generic_Helicopter_C::RotorEfficiencyByAOA' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, RotorEfficiencyByAirspeed) == 0x000D58, "Member 'ABP_Generic_Helicopter_C::RotorEfficiencyByAirspeed' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, RotorEfficiencyMax) == 0x000D60, "Member 'ABP_Generic_Helicopter_C::RotorEfficiencyMax' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, MaxTailRotorLossSpinForce) == 0x000D64, "Member 'ABP_Generic_Helicopter_C::MaxTailRotorLossSpinForce' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, PhysicsMinusFlipOverSpeedTailLoss) == 0x000D68, "Member 'ABP_Generic_Helicopter_C::PhysicsMinusFlipOverSpeedTailLoss' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, HullWarningThreshold) == 0x000D6C, "Member 'ABP_Generic_Helicopter_C::HullWarningThreshold' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, EngineWarningThreshold) == 0x000D70, "Member 'ABP_Generic_Helicopter_C::EngineWarningThreshold' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, MainRotorWarningThreshold) == 0x000D74, "Member 'ABP_Generic_Helicopter_C::MainRotorWarningThreshold' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, TailRotorWarningThreshold) == 0x000D78, "Member 'ABP_Generic_Helicopter_C::TailRotorWarningThreshold' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, DebugMovement) == 0x000D7C, "Member 'ABP_Generic_Helicopter_C::DebugMovement' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, Debug_True_Velocity) == 0x000D80, "Member 'ABP_Generic_Helicopter_C::Debug_True_Velocity' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, Debug_Previous_Frame_True_Velocity) == 0x000D8C, "Member 'ABP_Generic_Helicopter_C::Debug_Previous_Frame_True_Velocity' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, Debug_Previous_Frame_location) == 0x000D98, "Member 'ABP_Generic_Helicopter_C::Debug_Previous_Frame_location' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, Debug_True_Acceleration) == 0x000DA4, "Member 'ABP_Generic_Helicopter_C::Debug_True_Acceleration' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, Debug_Previous_Frame_Acceleration) == 0x000DB0, "Member 'ABP_Generic_Helicopter_C::Debug_Previous_Frame_Acceleration' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, InputMinusRawYaw) == 0x000DBC, "Member 'ABP_Generic_Helicopter_C::InputMinusRawYaw' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, InputMinusRawRoll) == 0x000DC0, "Member 'ABP_Generic_Helicopter_C::InputMinusRawRoll' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, InputMinusRawPitch) == 0x000DC4, "Member 'ABP_Generic_Helicopter_C::InputMinusRawPitch' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, InputMinusRawAcceleration) == 0x000DC8, "Member 'ABP_Generic_Helicopter_C::InputMinusRawAcceleration' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, AutoRotationBuffer) == 0x000DCC, "Member 'ABP_Generic_Helicopter_C::AutoRotationBuffer' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, AutoRotationEnergyDrainFactor) == 0x000DD0, "Member 'ABP_Generic_Helicopter_C::AutoRotationEnergyDrainFactor' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, EngineDamageMinThrust) == 0x000DD4, "Member 'ABP_Generic_Helicopter_C::EngineDamageMinThrust' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, StabilizerDebug) == 0x000DD8, "Member 'ABP_Generic_Helicopter_C::StabilizerDebug' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, YawInputRPMThreshold) == 0x000DDC, "Member 'ABP_Generic_Helicopter_C::YawInputRPMThreshold' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, bIsJoy) == 0x000DE0, "Member 'ABP_Generic_Helicopter_C::bIsJoy' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, Collective) == 0x000DE4, "Member 'ABP_Generic_Helicopter_C::Collective' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, JoyPitch) == 0x000DE8, "Member 'ABP_Generic_Helicopter_C::JoyPitch' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, JoyRoll) == 0x000DEC, "Member 'ABP_Generic_Helicopter_C::JoyRoll' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, JoyYaw) == 0x000DF0, "Member 'ABP_Generic_Helicopter_C::JoyYaw' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, bIsLockFreeLook) == 0x000DF4, "Member 'ABP_Generic_Helicopter_C::bIsLockFreeLook' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, Last_FreeLookTime) == 0x000DF8, "Member 'ABP_Generic_Helicopter_C::Last_FreeLookTime' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, LookRight) == 0x000DFC, "Member 'ABP_Generic_Helicopter_C::LookRight' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, LookUp) == 0x000E00, "Member 'ABP_Generic_Helicopter_C::LookUp' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, LookState) == 0x000E04, "Member 'ABP_Generic_Helicopter_C::LookState' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, IsCamZoom) == 0x000E0C, "Member 'ABP_Generic_Helicopter_C::IsCamZoom' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, MousePitch) == 0x000E10, "Member 'ABP_Generic_Helicopter_C::MousePitch' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, MouseRoll) == 0x000E14, "Member 'ABP_Generic_Helicopter_C::MouseRoll' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, KeyPitch) == 0x000E18, "Member 'ABP_Generic_Helicopter_C::KeyPitch' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, KeyRoll) == 0x000E1C, "Member 'ABP_Generic_Helicopter_C::KeyRoll' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, Rotor_Wash_Radius) == 0x000E20, "Member 'ABP_Generic_Helicopter_C::Rotor_Wash_Radius' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, DistanceToCullRotorWash_Meters) == 0x000E24, "Member 'ABP_Generic_Helicopter_C::DistanceToCullRotorWash_Meters' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, FatalWaterImpactVelocity) == 0x000E28, "Member 'ABP_Generic_Helicopter_C::FatalWaterImpactVelocity' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, WaterDamageInterval) == 0x000E2C, "Member 'ABP_Generic_Helicopter_C::WaterDamageInterval' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, WaterMaxDepth) == 0x000E30, "Member 'ABP_Generic_Helicopter_C::WaterMaxDepth' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, MinimumWaterDamage) == 0x000E34, "Member 'ABP_Generic_Helicopter_C::MinimumWaterDamage' has a wrong offset!");
static_assert(offsetof(ABP_Generic_Helicopter_C, WaterDamageHandle) == 0x000E38, "Member 'ABP_Generic_Helicopter_C::WaterDamageHandle' has a wrong offset!");

}

