#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GlowingText_12

#include "Basic.hpp"

#include "GlowingText_12_classes.hpp"
#include "GlowingText_12_parameters.hpp"


namespace SDK
{

// Function GlowingText_12.GlowingText_12_C.ExecuteUbergraph_GlowingText_12
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGlowingText_12_C::ExecuteUbergraph_GlowingText_12(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GlowingText_12_C", "ExecuteUbergraph_GlowingText_12");

	Params::GlowingText_12_C_ExecuteUbergraph_GlowingText_12 Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GlowingText_12.GlowingText_12_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UGlowingText_12_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GlowingText_12_C", "PreConstruct");

	Params::GlowingText_12_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GlowingText_12.GlowingText_12_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UGlowingText_12_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GlowingText_12_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GlowingText_12.GlowingText_12_C.SetGlowing
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bGlowing                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UGlowingText_12_C::SetGlowing(bool bGlowing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GlowingText_12_C", "SetGlowing");

	Params::GlowingText_12_C_SetGlowing Parms{};

	Parms.bGlowing = bGlowing;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GlowingText_12.GlowingText_12_C.Init
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    Param_bShowShadow                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UGlowingText_12_C::Init(const class FText& Text, bool Param_bShowShadow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GlowingText_12_C", "Init");

	Params::GlowingText_12_C_Init Parms{};

	Parms.Text = std::move(Text);
	Parms.Param_bShowShadow = Param_bShowShadow;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GlowingText_12.GlowingText_12_C.Update
// (Public, BlueprintCallable, BlueprintEvent)

void UGlowingText_12_C::Update()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GlowingText_12_C", "Update");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GlowingText_12.GlowingText_12_C.SetText
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (BlueprintVisible, BlueprintReadOnly, Parm)

void UGlowingText_12_C::SetText(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GlowingText_12_C", "SetText");

	Params::GlowingText_12_C_SetText Parms{};

	Parms.Text = std::move(Text);

	UObject::ProcessEvent(Func, &Parms);
}

}

