#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UMG_Compass_Player

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Squad_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass UMG_Compass_Player.UMG_Compass_Player_C
// 0x0018 (0x0300 - 0x02E8)
class UUMG_Compass_Player_C final : public USQCompassPlayer
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 BP_Medic_IMG;                                      // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BPPlayer_IMG;                                      // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_UMG_Compass_Player(int32 EntryPoint);
	void BPInit();
	void Construct();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UMG_Compass_Player_C">();
	}
	static class UUMG_Compass_Player_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUMG_Compass_Player_C>();
	}
};
static_assert(alignof(UUMG_Compass_Player_C) == 0x000008, "Wrong alignment on UUMG_Compass_Player_C");
static_assert(sizeof(UUMG_Compass_Player_C) == 0x000300, "Wrong size on UUMG_Compass_Player_C");
static_assert(offsetof(UUMG_Compass_Player_C, UberGraphFrame) == 0x0002E8, "Member 'UUMG_Compass_Player_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUMG_Compass_Player_C, BP_Medic_IMG) == 0x0002F0, "Member 'UUMG_Compass_Player_C::BP_Medic_IMG' has a wrong offset!");
static_assert(offsetof(UUMG_Compass_Player_C, BPPlayer_IMG) == 0x0002F8, "Member 'UUMG_Compass_Player_C::BPPlayer_IMG' has a wrong offset!");

}

