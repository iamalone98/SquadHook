#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NLAW

#include "Basic.hpp"

#include "BP_NLAW_classes.hpp"
#include "BP_NLAW_parameters.hpp"


namespace SDK
{

// Function BP_NLAW.BP_NLAW_C.ExecuteUbergraph_BP_NLAW
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NLAW_C::ExecuteUbergraph_BP_NLAW(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NLAW_C", "ExecuteUbergraph_BP_NLAW");

	Params::BP_NLAW_C_ExecuteUbergraph_BP_NLAW Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NLAW.BP_NLAW_C.Abort
// (BlueprintCallable, BlueprintEvent)

void ABP_NLAW_C::Abort()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NLAW_C", "Abort");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NLAW.BP_NLAW_C.UpdateInertiaTrackerStateOnServer
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_NLAW_C::UpdateInertiaTrackerStateOnServer(bool NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NLAW_C", "UpdateInertiaTrackerStateOnServer");

	Params::BP_NLAW_C_UpdateInertiaTrackerStateOnServer Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NLAW.BP_NLAW_C.StopModifyZeroing
// (Event, Public, BlueprintEvent)

void ABP_NLAW_C::StopModifyZeroing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NLAW_C", "StopModifyZeroing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NLAW.BP_NLAW_C.BlueprintOnZoom
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewZoom                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_NLAW_C::BlueprintOnZoom(bool bNewZoom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NLAW_C", "BlueprintOnZoom");

	Params::BP_NLAW_C_BlueprintOnZoom Parms{};

	Parms.bNewZoom = bNewZoom;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NLAW.BP_NLAW_C.TurnRateSampling
// (BlueprintCallable, BlueprintEvent)

void ABP_NLAW_C::TurnRateSampling()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NLAW_C", "TurnRateSampling");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NLAW.BP_NLAW_C.LockOnTargetEvaluation
// (BlueprintCallable, BlueprintEvent)

void ABP_NLAW_C::LockOnTargetEvaluation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NLAW_C", "LockOnTargetEvaluation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NLAW.BP_NLAW_C.GetNewAimDirection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          Param_New_Aim_Direction                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Aim_Point                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NLAW_C::GetNewAimDirection(struct FVector* Param_New_Aim_Direction, struct FVector* Aim_Point)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NLAW_C", "GetNewAimDirection");

	Params::BP_NLAW_C_GetNewAimDirection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_New_Aim_Direction != nullptr)
		*Param_New_Aim_Direction = std::move(Parms.Param_New_Aim_Direction);

	if (Aim_Point != nullptr)
		*Aim_Point = std::move(Parms.Aim_Point);
}


// Function BP_NLAW.BP_NLAW_C.GetAverageRotationAnglePerSecond
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Angle                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NLAW_C::GetAverageRotationAnglePerSecond(float* Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NLAW_C", "GetAverageRotationAnglePerSecond");

	Params::BP_NLAW_C_GetAverageRotationAnglePerSecond Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Angle != nullptr)
		*Angle = Parms.Angle;
}


// Function BP_NLAW.BP_NLAW_C.LogDirectionDeltaAngle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Angle                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NLAW_C::LogDirectionDeltaAngle(float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NLAW_C", "LogDirectionDeltaAngle");

	Params::BP_NLAW_C_LogDirectionDeltaAngle Parms{};

	Parms.Angle = Angle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NLAW.BP_NLAW_C.EstimateStability
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsStable                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   DeviationPercent                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NLAW_C::EstimateStability(bool* IsStable, float* DeviationPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NLAW_C", "EstimateStability");

	Params::BP_NLAW_C_EstimateStability Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsStable != nullptr)
		*IsStable = Parms.IsStable;

	if (DeviationPercent != nullptr)
		*DeviationPercent = Parms.DeviationPercent;
}


// Function BP_NLAW.BP_NLAW_C.OnRep_LastAverageSpeed
// (BlueprintCallable, BlueprintEvent)

void ABP_NLAW_C::OnRep_LastAverageSpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NLAW_C", "OnRep_LastAverageSpeed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NLAW.BP_NLAW_C.IsSoldierValid
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_NLAW_C::IsSoldierValid(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NLAW_C", "IsSoldierValid");

	Params::BP_NLAW_C_IsSoldierValid Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_NLAW.BP_NLAW_C.GetGuidanceEnabled
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bEnabled                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_NLAW_C::GetGuidanceEnabled(bool* bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NLAW_C", "GetGuidanceEnabled");

	Params::BP_NLAW_C_GetGuidanceEnabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnabled != nullptr)
		*bEnabled = Parms.bEnabled;
}


// Function BP_NLAW.BP_NLAW_C.GetTargetAngularSpeedDegrees
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Target_Angular_Speed                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NLAW_C::GetTargetAngularSpeedDegrees(float* Target_Angular_Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NLAW_C", "GetTargetAngularSpeedDegrees");

	Params::BP_NLAW_C_GetTargetAngularSpeedDegrees Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Target_Angular_Speed != nullptr)
		*Target_Angular_Speed = Parms.Target_Angular_Speed;
}

}

