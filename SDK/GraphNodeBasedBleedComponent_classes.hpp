#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GraphNodeBasedBleedComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass GraphNodeBasedBleedComponent.GraphNodeBasedBleedComponent_C
// 0x0078 (0x0128 - 0x00B0)
class UGraphNodeBasedBleedComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class USQGraphNodeComponent*>          GraphNodes;                                        // 0x00B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<int32>                                 CapturezonesByTeam;                                // 0x00C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 CurrentLosers;                                     // 0x00D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         CurrentWinner;                                     // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CountNeutralizedFlagAsLost;                        // 0x00EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C84[0x3];                                     // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TicketBleedPerLostFlagPerTick;                     // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BleedTickFrequencyInSeconds;                       // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BleedOverUnevenFlag;                               // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C85[0x7];                                     // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CachedBleedByTeam;                                 // 0x0100(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	int32                                         MercyBleedValuePerTick;                            // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsMercyBleedActive;                               // 0x0114(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EnableMercyBleedFeature;                           // 0x0115(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C86[0x2];                                     // 0x0116(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MercyBleedTickFrequencyInSeconds;                  // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BleedFlagPositionShift;                            // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASQGameMode*                            GameModeRef;                                       // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_GraphNodeBasedBleedComponent(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void RecalculateBleedValues();
	void ReceiveBeginPlay();
	void TickBleed();
	void CleanArrays();
	void CountCaptureZonesByTeam();
	void FindLosers();
	void CalculateBleed();
	void SetMercyBleedState(bool Enable);
	void SetBleedEnabled(bool bNewBleedEnabled, bool bResetBleedValues);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"GraphNodeBasedBleedComponent_C">();
	}
	static class UGraphNodeBasedBleedComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGraphNodeBasedBleedComponent_C>();
	}
};
static_assert(alignof(UGraphNodeBasedBleedComponent_C) == 0x000008, "Wrong alignment on UGraphNodeBasedBleedComponent_C");
static_assert(sizeof(UGraphNodeBasedBleedComponent_C) == 0x000128, "Wrong size on UGraphNodeBasedBleedComponent_C");
static_assert(offsetof(UGraphNodeBasedBleedComponent_C, UberGraphFrame) == 0x0000B0, "Member 'UGraphNodeBasedBleedComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UGraphNodeBasedBleedComponent_C, GraphNodes) == 0x0000B8, "Member 'UGraphNodeBasedBleedComponent_C::GraphNodes' has a wrong offset!");
static_assert(offsetof(UGraphNodeBasedBleedComponent_C, CapturezonesByTeam) == 0x0000C8, "Member 'UGraphNodeBasedBleedComponent_C::CapturezonesByTeam' has a wrong offset!");
static_assert(offsetof(UGraphNodeBasedBleedComponent_C, CurrentLosers) == 0x0000D8, "Member 'UGraphNodeBasedBleedComponent_C::CurrentLosers' has a wrong offset!");
static_assert(offsetof(UGraphNodeBasedBleedComponent_C, CurrentWinner) == 0x0000E8, "Member 'UGraphNodeBasedBleedComponent_C::CurrentWinner' has a wrong offset!");
static_assert(offsetof(UGraphNodeBasedBleedComponent_C, CountNeutralizedFlagAsLost) == 0x0000EC, "Member 'UGraphNodeBasedBleedComponent_C::CountNeutralizedFlagAsLost' has a wrong offset!");
static_assert(offsetof(UGraphNodeBasedBleedComponent_C, TicketBleedPerLostFlagPerTick) == 0x0000F0, "Member 'UGraphNodeBasedBleedComponent_C::TicketBleedPerLostFlagPerTick' has a wrong offset!");
static_assert(offsetof(UGraphNodeBasedBleedComponent_C, BleedTickFrequencyInSeconds) == 0x0000F4, "Member 'UGraphNodeBasedBleedComponent_C::BleedTickFrequencyInSeconds' has a wrong offset!");
static_assert(offsetof(UGraphNodeBasedBleedComponent_C, BleedOverUnevenFlag) == 0x0000F8, "Member 'UGraphNodeBasedBleedComponent_C::BleedOverUnevenFlag' has a wrong offset!");
static_assert(offsetof(UGraphNodeBasedBleedComponent_C, CachedBleedByTeam) == 0x000100, "Member 'UGraphNodeBasedBleedComponent_C::CachedBleedByTeam' has a wrong offset!");
static_assert(offsetof(UGraphNodeBasedBleedComponent_C, MercyBleedValuePerTick) == 0x000110, "Member 'UGraphNodeBasedBleedComponent_C::MercyBleedValuePerTick' has a wrong offset!");
static_assert(offsetof(UGraphNodeBasedBleedComponent_C, bIsMercyBleedActive) == 0x000114, "Member 'UGraphNodeBasedBleedComponent_C::bIsMercyBleedActive' has a wrong offset!");
static_assert(offsetof(UGraphNodeBasedBleedComponent_C, EnableMercyBleedFeature) == 0x000115, "Member 'UGraphNodeBasedBleedComponent_C::EnableMercyBleedFeature' has a wrong offset!");
static_assert(offsetof(UGraphNodeBasedBleedComponent_C, MercyBleedTickFrequencyInSeconds) == 0x000118, "Member 'UGraphNodeBasedBleedComponent_C::MercyBleedTickFrequencyInSeconds' has a wrong offset!");
static_assert(offsetof(UGraphNodeBasedBleedComponent_C, BleedFlagPositionShift) == 0x00011C, "Member 'UGraphNodeBasedBleedComponent_C::BleedFlagPositionShift' has a wrong offset!");
static_assert(offsetof(UGraphNodeBasedBleedComponent_C, GameModeRef) == 0x000120, "Member 'UGraphNodeBasedBleedComponent_C::GameModeRef' has a wrong offset!");

}

