#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SQRoleSettings

#include "Basic.hpp"

#include "BP_SQRoleSettings_classes.hpp"
#include "BP_SQRoleSettings_parameters.hpp"


namespace SDK
{

// Function BP_SQRoleSettings.BP_SQRoleSettings_C.IsConcernedByStrategy
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FSQRoleGroupingStrategy          InGroupingStrategy                                     (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool                                    Param_IsConcernedByStrategy                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_SQRoleSettings_C::IsConcernedByStrategy(const struct FSQRoleGroupingStrategy& InGroupingStrategy, bool* Param_IsConcernedByStrategy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQRoleSettings_C", "IsConcernedByStrategy");

	Params::BP_SQRoleSettings_C_IsConcernedByStrategy Parms{};

	Parms.InGroupingStrategy = std::move(InGroupingStrategy);

	UObject::ProcessEvent(Func, &Parms);

	if (Param_IsConcernedByStrategy != nullptr)
		*Param_IsConcernedByStrategy = Parms.Param_IsConcernedByStrategy;
}


// Function BP_SQRoleSettings.BP_SQRoleSettings_C.HasTag
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ESQRoleTags                             In_Tag                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Out_Has_Tag                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_SQRoleSettings_C::HasTag(ESQRoleTags In_Tag, bool* Out_Has_Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQRoleSettings_C", "HasTag");

	Params::BP_SQRoleSettings_C_HasTag Parms{};

	Parms.In_Tag = In_Tag;

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Has_Tag != nullptr)
		*Out_Has_Tag = Parms.Out_Has_Tag;
}


// Function BP_SQRoleSettings.BP_SQRoleSettings_C.HasTags
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<ESQRoleTags>                     In_Tags                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    In_All                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Out_Has_Tags                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_SQRoleSettings_C::HasTags(TArray<ESQRoleTags>& In_Tags, bool In_All, bool* Out_Has_Tags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQRoleSettings_C", "HasTags");

	Params::BP_SQRoleSettings_C_HasTags Parms{};

	Parms.In_Tags = std::move(In_Tags);
	Parms.In_All = In_All;

	UObject::ProcessEvent(Func, &Parms);

	In_Tags = std::move(Parms.In_Tags);

	if (Out_Has_Tags != nullptr)
		*Out_Has_Tags = Parms.Out_Has_Tags;
}


// Function BP_SQRoleSettings.BP_SQRoleSettings_C.GetGroup
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ESQRoleGroup                            Out_Group                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SQRoleSettings_C::GetGroup(ESQRoleGroup* Out_Group)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQRoleSettings_C", "GetGroup");

	Params::BP_SQRoleSettings_C_GetGroup Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Group != nullptr)
		*Out_Group = Parms.Out_Group;
}


// Function BP_SQRoleSettings.BP_SQRoleSettings_C.GetRoleEntry
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FFSQRoleEntry                    RoleEntry                                              (Parm, OutParm, HasGetValueTypeHash)

void UBP_SQRoleSettings_C::GetRoleEntry(bool* Success, struct FFSQRoleEntry* RoleEntry) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQRoleSettings_C", "GetRoleEntry");

	Params::BP_SQRoleSettings_C_GetRoleEntry Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (RoleEntry != nullptr)
		*RoleEntry = std::move(Parms.RoleEntry);
}


// Function BP_SQRoleSettings.BP_SQRoleSettings_C.CanPlaceRallyPointWithMinimumTeamMate
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_SQRoleSettings_C::CanPlaceRallyPointWithMinimumTeamMate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQRoleSettings_C", "CanPlaceRallyPointWithMinimumTeamMate");

	Params::BP_SQRoleSettings_C_CanPlaceRallyPointWithMinimumTeamMate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SQRoleSettings.BP_SQRoleSettings_C.CanSeeHealthStatus
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_SQRoleSettings_C::CanSeeHealthStatus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQRoleSettings_C", "CanSeeHealthStatus");

	Params::BP_SQRoleSettings_C_CanSeeHealthStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SQRoleSettings.BP_SQRoleSettings_C.IsMedic
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_SQRoleSettings_C::IsMedic() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQRoleSettings_C", "IsMedic");

	Params::BP_SQRoleSettings_C_IsMedic Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SQRoleSettings.BP_SQRoleSettings_C.IsSquadLeader
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_SQRoleSettings_C::IsSquadLeader() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQRoleSettings_C", "IsSquadLeader");

	Params::BP_SQRoleSettings_C_IsSquadLeader Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SQRoleSettings.BP_SQRoleSettings_C.IsRecruit
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    Out_IsRecruit                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_SQRoleSettings_C::IsRecruit(bool* Out_IsRecruit) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQRoleSettings_C", "IsRecruit");

	Params::BP_SQRoleSettings_C_IsRecruit Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out_IsRecruit != nullptr)
		*Out_IsRecruit = Parms.Out_IsRecruit;
}


// Function BP_SQRoleSettings.BP_SQRoleSettings_C.CanEnterSeat
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USQVehicleSeatComponent*          Seat                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_SQRoleSettings_C::CanEnterSeat(class USQVehicleSeatComponent* Seat) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQRoleSettings_C", "CanEnterSeat");

	Params::BP_SQRoleSettings_C_CanEnterSeat Parms{};

	Parms.Seat = Seat;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SQRoleSettings.BP_SQRoleSettings_C.TryGetSoldierWithLayer
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USQLayer*                         InLayer                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSoftClassPtr<class UClass>             OutSoldier                                             (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_SQRoleSettings_C::TryGetSoldierWithLayer(const class USQLayer* InLayer, TSoftClassPtr<class UClass>* OutSoldier) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQRoleSettings_C", "TryGetSoldierWithLayer");

	Params::BP_SQRoleSettings_C_TryGetSoldierWithLayer Parms{};

	Parms.InLayer = InLayer;

	UObject::ProcessEvent(Func, &Parms);

	if (OutSoldier != nullptr)
		*OutSoldier = Parms.OutSoldier;

	return Parms.ReturnValue;
}


// Function BP_SQRoleSettings.BP_SQRoleSettings_C.GetRoleDisplayName
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FString                           CurrentRoleDisplayName                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBP_SQRoleSettings_C::GetRoleDisplayName(class FString* CurrentRoleDisplayName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQRoleSettings_C", "GetRoleDisplayName");

	Params::BP_SQRoleSettings_C_GetRoleDisplayName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentRoleDisplayName != nullptr)
		*CurrentRoleDisplayName = std::move(Parms.CurrentRoleDisplayName);
}

}

