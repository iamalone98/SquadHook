#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_SQMapGridLinePerZoomLevel

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function W_SQMapGridLinePerZoomLevel.W_SQMapGridLinePerZoomLevel_C.ExecuteUbergraph_W_SQMapGridLinePerZoomLevel
// 0x00B8 (0x00B8 - 0x0000)
struct W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4555[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            K2Node_CustomEvent_GridZoomOpacities;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             K2Node_CustomEvent_GridTextures;                   // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_ZoomFadeIn;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_ZoomOpaque;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_ScaleFactor;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_CustomEvent_Tint;                           // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              K2Node_CustomEvent_GridNumbers;                    // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_StartingZoom;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y;                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_ZoomAmount;                     // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUD*                                   CallFunc_GetHUD_ReturnValue;                       // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_HUD_C>            K2Node_DynamicCast_AsBPI_HUD;                      // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4556[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_MapRangeUnclamped_ReturnValue;            // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_SQMapCore_C*                         CallFunc_Get_Map_Core_Map_Core;                    // 0x0080(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4557[0x3];                                     // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBox2D                                 CallFunc_GetWorldBounds_ReturnValue;               // 0x0090(0x0014)(ConstParm, ZeroConstructor, NoDestructor)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x00A4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_X_1;                        // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector2D_Y_1;                        // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel) == 0x000008, "Wrong alignment on W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel");
static_assert(sizeof(W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel) == 0x0000B8, "Wrong size on W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel, EntryPoint) == 0x000000, "Member 'W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel, K2Node_CustomEvent_GridZoomOpacities) == 0x000008, "Member 'W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel::K2Node_CustomEvent_GridZoomOpacities' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel, K2Node_CustomEvent_GridTextures) == 0x000010, "Member 'W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel::K2Node_CustomEvent_GridTextures' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel, K2Node_CustomEvent_ZoomFadeIn) == 0x000018, "Member 'W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel::K2Node_CustomEvent_ZoomFadeIn' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel, K2Node_CustomEvent_ZoomOpaque) == 0x00001C, "Member 'W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel::K2Node_CustomEvent_ZoomOpaque' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel, K2Node_CustomEvent_ScaleFactor) == 0x000020, "Member 'W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel::K2Node_CustomEvent_ScaleFactor' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel, K2Node_CustomEvent_Tint) == 0x000024, "Member 'W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel::K2Node_CustomEvent_Tint' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel, K2Node_CustomEvent_GridNumbers) == 0x000034, "Member 'W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel::K2Node_CustomEvent_GridNumbers' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel, K2Node_CustomEvent_StartingZoom) == 0x00003C, "Member 'W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel::K2Node_CustomEvent_StartingZoom' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel, CallFunc_BreakVector2D_X) == 0x000040, "Member 'W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel, CallFunc_BreakVector2D_Y) == 0x000044, "Member 'W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000048, "Member 'W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel, K2Node_CustomEvent_ZoomAmount) == 0x00004C, "Member 'W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel::K2Node_CustomEvent_ZoomAmount' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000050, "Member 'W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel, CallFunc_GetOwningPlayer_ReturnValue) == 0x000058, "Member 'W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel, CallFunc_GetHUD_ReturnValue) == 0x000060, "Member 'W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel::CallFunc_GetHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel, K2Node_DynamicCast_AsBPI_HUD) == 0x000068, "Member 'W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel::K2Node_DynamicCast_AsBPI_HUD' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel, K2Node_DynamicCast_bSuccess) == 0x000078, "Member 'W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel, CallFunc_MapRangeUnclamped_ReturnValue) == 0x00007C, "Member 'W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel::CallFunc_MapRangeUnclamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel, CallFunc_Get_Map_Core_Map_Core) == 0x000080, "Member 'W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel::CallFunc_Get_Map_Core_Map_Core' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel, CallFunc_GetFloatValue_ReturnValue) == 0x000088, "Member 'W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel, CallFunc_IsValid_ReturnValue) == 0x00008C, "Member 'W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel, CallFunc_GetWorldBounds_ReturnValue) == 0x000090, "Member 'W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel::CallFunc_GetWorldBounds_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x0000A4, "Member 'W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel, CallFunc_BreakVector2D_X_1) == 0x0000AC, "Member 'W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel, CallFunc_BreakVector2D_Y_1) == 0x0000B0, "Member 'W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000B4, "Member 'W_SQMapGridLinePerZoomLevel_C_ExecuteUbergraph_W_SQMapGridLinePerZoomLevel::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function W_SQMapGridLinePerZoomLevel.W_SQMapGridLinePerZoomLevel_C.InitializeTexture
// 0x0038 (0x0038 - 0x0000)
struct W_SQMapGridLinePerZoomLevel_C_InitializeTexture final
{
public:
	class UCurveFloat*                            GridZoomOpacities;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             GridTextures;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZoomFadeIn;                                        // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZoomOpaque;                                        // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ScaleFactor;                                       // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Tint;                                              // 0x001C(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              GridNumbers;                                       // 0x002C(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         StartingZoom;                                      // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_SQMapGridLinePerZoomLevel_C_InitializeTexture) == 0x000008, "Wrong alignment on W_SQMapGridLinePerZoomLevel_C_InitializeTexture");
static_assert(sizeof(W_SQMapGridLinePerZoomLevel_C_InitializeTexture) == 0x000038, "Wrong size on W_SQMapGridLinePerZoomLevel_C_InitializeTexture");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_InitializeTexture, GridZoomOpacities) == 0x000000, "Member 'W_SQMapGridLinePerZoomLevel_C_InitializeTexture::GridZoomOpacities' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_InitializeTexture, GridTextures) == 0x000008, "Member 'W_SQMapGridLinePerZoomLevel_C_InitializeTexture::GridTextures' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_InitializeTexture, ZoomFadeIn) == 0x000010, "Member 'W_SQMapGridLinePerZoomLevel_C_InitializeTexture::ZoomFadeIn' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_InitializeTexture, ZoomOpaque) == 0x000014, "Member 'W_SQMapGridLinePerZoomLevel_C_InitializeTexture::ZoomOpaque' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_InitializeTexture, ScaleFactor) == 0x000018, "Member 'W_SQMapGridLinePerZoomLevel_C_InitializeTexture::ScaleFactor' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_InitializeTexture, Tint) == 0x00001C, "Member 'W_SQMapGridLinePerZoomLevel_C_InitializeTexture::Tint' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_InitializeTexture, GridNumbers) == 0x00002C, "Member 'W_SQMapGridLinePerZoomLevel_C_InitializeTexture::GridNumbers' has a wrong offset!");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_InitializeTexture, StartingZoom) == 0x000034, "Member 'W_SQMapGridLinePerZoomLevel_C_InitializeTexture::StartingZoom' has a wrong offset!");

// Function W_SQMapGridLinePerZoomLevel.W_SQMapGridLinePerZoomLevel_C.UpdateOpacity
// 0x0004 (0x0004 - 0x0000)
struct W_SQMapGridLinePerZoomLevel_C_UpdateOpacity final
{
public:
	float                                         ZoomAmount;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_SQMapGridLinePerZoomLevel_C_UpdateOpacity) == 0x000004, "Wrong alignment on W_SQMapGridLinePerZoomLevel_C_UpdateOpacity");
static_assert(sizeof(W_SQMapGridLinePerZoomLevel_C_UpdateOpacity) == 0x000004, "Wrong size on W_SQMapGridLinePerZoomLevel_C_UpdateOpacity");
static_assert(offsetof(W_SQMapGridLinePerZoomLevel_C_UpdateOpacity, ZoomAmount) == 0x000000, "Member 'W_SQMapGridLinePerZoomLevel_C_UpdateOpacity::ZoomAmount' has a wrong offset!");

}

