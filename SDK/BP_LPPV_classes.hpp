#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LPPV

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Squad_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LPPV.BP_LPPV_C
// 0x00B0 (0x0C10 - 0x0B60)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_LPPV_C : public ASQWheeledVehicle
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0B60(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USQVehicleExitPointComponent*           SQVehicleExitPointWaterL;                          // 0x0B68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USQVehicleExitPointComponent*           SQVehicleExitPointWaterR;                          // 0x0B70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USQArmorMeshComponent*                  SQArmorMeshHatch_R;                                // 0x0B78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USQArmorMeshComponent*                  SQArmorMeshHatch_L;                                // 0x0B80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USQArmorMeshComponent*                  SQArmorMesh;                                       // 0x0B88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LPPV_Camonet;                                      // 0x0B90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPComponent_RadialModel_C*             Vehicle_Radial;                                    // 0x0B98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USQVehicleWheel*                        Wheel_R2;                                          // 0x0BA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USQVehicleWheel*                        Wheel_L2;                                          // 0x0BA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USQVehicleWheel*                        Wheel_R1;                                          // 0x0BB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USQVehicleWheel*                        Wheel_L1;                                          // 0x0BB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USQVehicleEngine*                       EngineComponent;                                   // 0x0BC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USQVehicleResourceWeaponInventoryComponent* SQVehicleResourceWeaponInventory;                  // 0x0BC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USQMapIconComponent*                    SQMapIcon;                                         // 0x0BD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USQVehicleBurningComponent*             SQVehicleBurning;                                  // 0x0BD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USQVehicleExitPointComponent*           SQVehicleExitPoint2;                               // 0x0BE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USQVehicleExitPointComponent*           SQVehicleExitPoint1;                               // 0x0BE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USQVehicleExitPointComponent*           SQVehicleExitPoint;                                // 0x0BF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             WheelDestroyedSound;                               // 0x0BF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        WheelDestroyedEffect;                              // 0x0C00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_LPPV(int32 EntryPoint);
	void DrivetrainComponentRepaired(class USQDriveTrainComponent* DriveTrainComponent);
	void DrivetrainComponentDestroyed(class USQDriveTrainComponent* DriveTrainComponent);
	void UpdateDamageWheelVisual(class FName Bone, bool Destroyed, class USQVehicleWheel* Wheel, bool Do_Effects);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LPPV_C">();
	}
	static class ABP_LPPV_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LPPV_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_LPPV_C) == 0x000010, "Wrong alignment on ABP_LPPV_C");
static_assert(sizeof(ABP_LPPV_C) == 0x000C10, "Wrong size on ABP_LPPV_C");
static_assert(offsetof(ABP_LPPV_C, UberGraphFrame) == 0x000B60, "Member 'ABP_LPPV_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_LPPV_C, SQVehicleExitPointWaterL) == 0x000B68, "Member 'ABP_LPPV_C::SQVehicleExitPointWaterL' has a wrong offset!");
static_assert(offsetof(ABP_LPPV_C, SQVehicleExitPointWaterR) == 0x000B70, "Member 'ABP_LPPV_C::SQVehicleExitPointWaterR' has a wrong offset!");
static_assert(offsetof(ABP_LPPV_C, SQArmorMeshHatch_R) == 0x000B78, "Member 'ABP_LPPV_C::SQArmorMeshHatch_R' has a wrong offset!");
static_assert(offsetof(ABP_LPPV_C, SQArmorMeshHatch_L) == 0x000B80, "Member 'ABP_LPPV_C::SQArmorMeshHatch_L' has a wrong offset!");
static_assert(offsetof(ABP_LPPV_C, SQArmorMesh) == 0x000B88, "Member 'ABP_LPPV_C::SQArmorMesh' has a wrong offset!");
static_assert(offsetof(ABP_LPPV_C, LPPV_Camonet) == 0x000B90, "Member 'ABP_LPPV_C::LPPV_Camonet' has a wrong offset!");
static_assert(offsetof(ABP_LPPV_C, Vehicle_Radial) == 0x000B98, "Member 'ABP_LPPV_C::Vehicle_Radial' has a wrong offset!");
static_assert(offsetof(ABP_LPPV_C, Wheel_R2) == 0x000BA0, "Member 'ABP_LPPV_C::Wheel_R2' has a wrong offset!");
static_assert(offsetof(ABP_LPPV_C, Wheel_L2) == 0x000BA8, "Member 'ABP_LPPV_C::Wheel_L2' has a wrong offset!");
static_assert(offsetof(ABP_LPPV_C, Wheel_R1) == 0x000BB0, "Member 'ABP_LPPV_C::Wheel_R1' has a wrong offset!");
static_assert(offsetof(ABP_LPPV_C, Wheel_L1) == 0x000BB8, "Member 'ABP_LPPV_C::Wheel_L1' has a wrong offset!");
static_assert(offsetof(ABP_LPPV_C, EngineComponent) == 0x000BC0, "Member 'ABP_LPPV_C::EngineComponent' has a wrong offset!");
static_assert(offsetof(ABP_LPPV_C, SQVehicleResourceWeaponInventory) == 0x000BC8, "Member 'ABP_LPPV_C::SQVehicleResourceWeaponInventory' has a wrong offset!");
static_assert(offsetof(ABP_LPPV_C, SQMapIcon) == 0x000BD0, "Member 'ABP_LPPV_C::SQMapIcon' has a wrong offset!");
static_assert(offsetof(ABP_LPPV_C, SQVehicleBurning) == 0x000BD8, "Member 'ABP_LPPV_C::SQVehicleBurning' has a wrong offset!");
static_assert(offsetof(ABP_LPPV_C, SQVehicleExitPoint2) == 0x000BE0, "Member 'ABP_LPPV_C::SQVehicleExitPoint2' has a wrong offset!");
static_assert(offsetof(ABP_LPPV_C, SQVehicleExitPoint1) == 0x000BE8, "Member 'ABP_LPPV_C::SQVehicleExitPoint1' has a wrong offset!");
static_assert(offsetof(ABP_LPPV_C, SQVehicleExitPoint) == 0x000BF0, "Member 'ABP_LPPV_C::SQVehicleExitPoint' has a wrong offset!");
static_assert(offsetof(ABP_LPPV_C, WheelDestroyedSound) == 0x000BF8, "Member 'ABP_LPPV_C::WheelDestroyedSound' has a wrong offset!");
static_assert(offsetof(ABP_LPPV_C, WheelDestroyedEffect) == 0x000C00, "Member 'ABP_LPPV_C::WheelDestroyedEffect' has a wrong offset!");

}

