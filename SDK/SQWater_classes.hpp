#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SQWater

#include "Basic.hpp"

#include "SQWater_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class SQWater.SQWaterPointTestComponent
// 0x0080 (0x0130 - 0x00B0)
class USQWaterPointTestComponent : public UActorComponent
{
public:
	float                                         MaxImmersionDelay;                                 // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RegenRate;                                         // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnImmersionStateChanged;                           // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1742[0x18];                                    // 0x00C8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class USQBaseWaterComponent*                  BaseWaterComponent;                                // 0x00E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                        TransformComponent;                                // 0x00E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1743[0x4];                                     // 0x00F0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ImmersionDelay;                                    // 0x00F4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1744[0x10];                                    // 0x00F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TestPointAdditionalOffset;                         // 0x0108(0x000C)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   TestPointSocketLocation;                           // 0x0114(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bUseTestPointSocketLocation : 1;                   // 0x011C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_1745[0x13];                                    // 0x011D(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEnteredWaterBody();
	void OnExitedWaterBody();
	void SetBaseWaterComponent(class USQBaseWaterComponent* Component);

	float GetImmersionDepth() const;
	float GetWaterDensity() const;
	bool IsOverlappingWaterBody() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQWaterPointTestComponent">();
	}
	static class USQWaterPointTestComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQWaterPointTestComponent>();
	}
};
static_assert(alignof(USQWaterPointTestComponent) == 0x000008, "Wrong alignment on USQWaterPointTestComponent");
static_assert(sizeof(USQWaterPointTestComponent) == 0x000130, "Wrong size on USQWaterPointTestComponent");
static_assert(offsetof(USQWaterPointTestComponent, MaxImmersionDelay) == 0x0000B0, "Member 'USQWaterPointTestComponent::MaxImmersionDelay' has a wrong offset!");
static_assert(offsetof(USQWaterPointTestComponent, RegenRate) == 0x0000B4, "Member 'USQWaterPointTestComponent::RegenRate' has a wrong offset!");
static_assert(offsetof(USQWaterPointTestComponent, OnImmersionStateChanged) == 0x0000B8, "Member 'USQWaterPointTestComponent::OnImmersionStateChanged' has a wrong offset!");
static_assert(offsetof(USQWaterPointTestComponent, BaseWaterComponent) == 0x0000E0, "Member 'USQWaterPointTestComponent::BaseWaterComponent' has a wrong offset!");
static_assert(offsetof(USQWaterPointTestComponent, TransformComponent) == 0x0000E8, "Member 'USQWaterPointTestComponent::TransformComponent' has a wrong offset!");
static_assert(offsetof(USQWaterPointTestComponent, ImmersionDelay) == 0x0000F4, "Member 'USQWaterPointTestComponent::ImmersionDelay' has a wrong offset!");
static_assert(offsetof(USQWaterPointTestComponent, TestPointAdditionalOffset) == 0x000108, "Member 'USQWaterPointTestComponent::TestPointAdditionalOffset' has a wrong offset!");
static_assert(offsetof(USQWaterPointTestComponent, TestPointSocketLocation) == 0x000114, "Member 'USQWaterPointTestComponent::TestPointSocketLocation' has a wrong offset!");

// Class SQWater.ODKWaterIntensityData
// 0x0050 (0x0080 - 0x0030)
class UODKWaterIntensityData final : public UDataAsset
{
public:
	TArray<class UWaterIntensityVolume*>          DynamicIntensityVolumes;                           // 0x0030(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         Subdivision;                                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1746[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             IntensityTexture;                                  // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           MaskingPosSize;                                    // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FIntPoint                              TextureSize;                                       // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FODKTextureChunk>               Chunks;                                            // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	bool                                          bUseSmoothStep;                                    // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1747[0x7];                                     // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetMaskingData(float* OutIntensity, bool* Clipping, const struct FVector& Location);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ODKWaterIntensityData">();
	}
	static class UODKWaterIntensityData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UODKWaterIntensityData>();
	}
};
static_assert(alignof(UODKWaterIntensityData) == 0x000008, "Wrong alignment on UODKWaterIntensityData");
static_assert(sizeof(UODKWaterIntensityData) == 0x000080, "Wrong size on UODKWaterIntensityData");
static_assert(offsetof(UODKWaterIntensityData, DynamicIntensityVolumes) == 0x000030, "Member 'UODKWaterIntensityData::DynamicIntensityVolumes' has a wrong offset!");
static_assert(offsetof(UODKWaterIntensityData, Subdivision) == 0x000040, "Member 'UODKWaterIntensityData::Subdivision' has a wrong offset!");
static_assert(offsetof(UODKWaterIntensityData, IntensityTexture) == 0x000048, "Member 'UODKWaterIntensityData::IntensityTexture' has a wrong offset!");
static_assert(offsetof(UODKWaterIntensityData, MaskingPosSize) == 0x000050, "Member 'UODKWaterIntensityData::MaskingPosSize' has a wrong offset!");
static_assert(offsetof(UODKWaterIntensityData, TextureSize) == 0x000060, "Member 'UODKWaterIntensityData::TextureSize' has a wrong offset!");
static_assert(offsetof(UODKWaterIntensityData, Chunks) == 0x000068, "Member 'UODKWaterIntensityData::Chunks' has a wrong offset!");
static_assert(offsetof(UODKWaterIntensityData, bUseSmoothStep) == 0x000078, "Member 'UODKWaterIntensityData::bUseSmoothStep' has a wrong offset!");

// Class SQWater.ODKWaterDamageComponent
// 0x0030 (0x0160 - 0x0130)
class UODKWaterDamageComponent : public USQWaterPointTestComponent
{
public:
	float                                         DamageAmount;                                      // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1749[0x4];                                     // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDamageType>                DamageType;                                        // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174A[0x10];                                    // 0x0140(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DamageFrequency;                                   // 0x0150(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_174B[0x4];                                     // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           DamageTimerHandle;                                 // 0x0158(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void InflictDamage();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ODKWaterDamageComponent">();
	}
	static class UODKWaterDamageComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UODKWaterDamageComponent>();
	}
};
static_assert(alignof(UODKWaterDamageComponent) == 0x000008, "Wrong alignment on UODKWaterDamageComponent");
static_assert(sizeof(UODKWaterDamageComponent) == 0x000160, "Wrong size on UODKWaterDamageComponent");
static_assert(offsetof(UODKWaterDamageComponent, DamageAmount) == 0x000130, "Member 'UODKWaterDamageComponent::DamageAmount' has a wrong offset!");
static_assert(offsetof(UODKWaterDamageComponent, DamageType) == 0x000138, "Member 'UODKWaterDamageComponent::DamageType' has a wrong offset!");
static_assert(offsetof(UODKWaterDamageComponent, DamageFrequency) == 0x000150, "Member 'UODKWaterDamageComponent::DamageFrequency' has a wrong offset!");
static_assert(offsetof(UODKWaterDamageComponent, DamageTimerHandle) == 0x000158, "Member 'UODKWaterDamageComponent::DamageTimerHandle' has a wrong offset!");

// Class SQWater.SQBaseWaterComponent
// 0x0040 (0x00F0 - 0x00B0)
class USQBaseWaterComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_             OnEnteredWaterBodyDelegate;                        // 0x00B0(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnExitedWaterBodyDelegate;                         // 0x00C0(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    SimulatingComponent;                               // 0x00D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class ASQWaterBody*>                   CurrentWaterBodies;                                // 0x00D8(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_174C[0x8];                                     // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<class ASQWaterBody*> GetCurrentWaterBodiesRef();
	bool GetWaterDepth(const struct FVector& Location, float* Depth);
	float GetWaterHeight(const struct FVector& Location, float DefaultHeight);
	float GetWaterImmersionDepth(const struct FVector& Location);

	const TArray<class ASQWaterBody*> GetCurrentWaterBodies() const;
	class UPrimitiveComponent* GetSimulatedComponent() const;
	bool GetWaterLocation(const struct FVector& Location, class ASQWaterBody** OutWaterBody, struct FVector* OutWaterSurfaceLocation, struct FVector* OutWaterNormal) const;
	bool IsInValidWaterBody() const;
	bool IsInWaterBody() const;
	bool IsOverlappingWaterBody() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQBaseWaterComponent">();
	}
	static class USQBaseWaterComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQBaseWaterComponent>();
	}
};
static_assert(alignof(USQBaseWaterComponent) == 0x000008, "Wrong alignment on USQBaseWaterComponent");
static_assert(sizeof(USQBaseWaterComponent) == 0x0000F0, "Wrong size on USQBaseWaterComponent");
static_assert(offsetof(USQBaseWaterComponent, OnEnteredWaterBodyDelegate) == 0x0000B0, "Member 'USQBaseWaterComponent::OnEnteredWaterBodyDelegate' has a wrong offset!");
static_assert(offsetof(USQBaseWaterComponent, OnExitedWaterBodyDelegate) == 0x0000C0, "Member 'USQBaseWaterComponent::OnExitedWaterBodyDelegate' has a wrong offset!");
static_assert(offsetof(USQBaseWaterComponent, SimulatingComponent) == 0x0000D0, "Member 'USQBaseWaterComponent::SimulatingComponent' has a wrong offset!");
static_assert(offsetof(USQBaseWaterComponent, CurrentWaterBodies) == 0x0000D8, "Member 'USQBaseWaterComponent::CurrentWaterBodies' has a wrong offset!");

// Class SQWater.SQBuoyancyComponent
// 0x0170 (0x0260 - 0x00F0)
class USQBuoyancyComponent : public USQBaseWaterComponent
{
public:
	struct FODKBuoyancyData                       BuoyancyData;                                      // 0x00F0(0x00A8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPontoonEnteredWaterDelegate;                     // 0x0198(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPontoonExitedWaterDelegate;                      // 0x01A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         DampeningImmersionDepth;                           // 0x01B8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1750[0x4];                                     // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WaterDampeningTransform;                           // 0x01C0(0x0030)(Edit, EditConst, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1751[0x70];                                    // 0x01F0(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddCustomPontoon(float Radius, const struct FVector& InRelativeLocation);
	void AddCustomPontoonSocket(float Radius, class FName CenterSocketName);
	void GeneratePontoonsFromBounds(const struct FBoxSphereBounds& Bounds);
	void OnPontoonEnteredWater(const struct FODKSphericalPontoon& Pontoon);
	void OnPontoonExitedWater(const struct FODKSphericalPontoon& Pontoon);
	void SetWaterDampeningTransform(const struct FTransform& NewTransform);
	void ShowPontoonVisualizer();

	bool HasPontoons() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQBuoyancyComponent">();
	}
	static class USQBuoyancyComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQBuoyancyComponent>();
	}
};
static_assert(alignof(USQBuoyancyComponent) == 0x000010, "Wrong alignment on USQBuoyancyComponent");
static_assert(sizeof(USQBuoyancyComponent) == 0x000260, "Wrong size on USQBuoyancyComponent");
static_assert(offsetof(USQBuoyancyComponent, BuoyancyData) == 0x0000F0, "Member 'USQBuoyancyComponent::BuoyancyData' has a wrong offset!");
static_assert(offsetof(USQBuoyancyComponent, OnPontoonEnteredWaterDelegate) == 0x000198, "Member 'USQBuoyancyComponent::OnPontoonEnteredWaterDelegate' has a wrong offset!");
static_assert(offsetof(USQBuoyancyComponent, OnPontoonExitedWaterDelegate) == 0x0001A8, "Member 'USQBuoyancyComponent::OnPontoonExitedWaterDelegate' has a wrong offset!");
static_assert(offsetof(USQBuoyancyComponent, DampeningImmersionDepth) == 0x0001B8, "Member 'USQBuoyancyComponent::DampeningImmersionDepth' has a wrong offset!");
static_assert(offsetof(USQBuoyancyComponent, WaterDampeningTransform) == 0x0001C0, "Member 'USQBuoyancyComponent::WaterDampeningTransform' has a wrong offset!");

// Class SQWater.ODKWaterMovementComponent
// 0x0068 (0x0118 - 0x00B0)
class UODKWaterMovementComponent : public UActorComponent
{
public:
	TArray<class UODKWaterMechanismComponent*>    Mechanisms;                                        // 0x00B0(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	float                                         GearRatio;                                         // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PropellerPitch;                                    // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PropellerSlip;                                     // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ThrottleRiseRate;                                  // 0x00CC(0x0004)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ThrottleFallRate;                                  // 0x00D0(0x0004)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SteeringRiseRate;                                  // 0x00D4(0x0004)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SteeringFallRate;                                  // 0x00D8(0x0004)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1752[0x4];                                     // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            SteeringAngleOverSpeed;                            // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQBuoyancyComponent*                   BuoyancyComponent;                                 // 0x00E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APawn*                                  OwnerPawn;                                         // 0x00F0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RawThrottleInput;                                  // 0x00F8(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ThrottleInput;                                     // 0x00FC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RawSteeringInput;                                  // 0x0100(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SteeringInput;                                     // 0x0104(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxRPM;                                            // 0x0108(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1753[0xC];                                     // 0x010C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddMechanism(class UODKWaterMechanismComponent* Mechanism, int32 ID);
	void ApplyMovement();
	class USQBuoyancyComponent* GetBuoyancyComponent();
	float GetMaxRPM();
	float GetRPM();
	float GetWaterVehicleVelocity();
	void OnEnteredWater();
	void OnExitWater();
	void OnMechanismAdded(class UODKWaterMechanismComponent* InMechanismComponent);
	void ProcessInputs();
	void ProcessInputsServer(const float RawThrottle, const float RawSteering);
	void SetBuoyancyComponent(class USQBuoyancyComponent* Param_BuoyancyComponent);

	class UPrimitiveComponent* GetSimulatedComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ODKWaterMovementComponent">();
	}
	static class UODKWaterMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UODKWaterMovementComponent>();
	}
};
static_assert(alignof(UODKWaterMovementComponent) == 0x000008, "Wrong alignment on UODKWaterMovementComponent");
static_assert(sizeof(UODKWaterMovementComponent) == 0x000118, "Wrong size on UODKWaterMovementComponent");
static_assert(offsetof(UODKWaterMovementComponent, Mechanisms) == 0x0000B0, "Member 'UODKWaterMovementComponent::Mechanisms' has a wrong offset!");
static_assert(offsetof(UODKWaterMovementComponent, GearRatio) == 0x0000C0, "Member 'UODKWaterMovementComponent::GearRatio' has a wrong offset!");
static_assert(offsetof(UODKWaterMovementComponent, PropellerPitch) == 0x0000C4, "Member 'UODKWaterMovementComponent::PropellerPitch' has a wrong offset!");
static_assert(offsetof(UODKWaterMovementComponent, PropellerSlip) == 0x0000C8, "Member 'UODKWaterMovementComponent::PropellerSlip' has a wrong offset!");
static_assert(offsetof(UODKWaterMovementComponent, ThrottleRiseRate) == 0x0000CC, "Member 'UODKWaterMovementComponent::ThrottleRiseRate' has a wrong offset!");
static_assert(offsetof(UODKWaterMovementComponent, ThrottleFallRate) == 0x0000D0, "Member 'UODKWaterMovementComponent::ThrottleFallRate' has a wrong offset!");
static_assert(offsetof(UODKWaterMovementComponent, SteeringRiseRate) == 0x0000D4, "Member 'UODKWaterMovementComponent::SteeringRiseRate' has a wrong offset!");
static_assert(offsetof(UODKWaterMovementComponent, SteeringFallRate) == 0x0000D8, "Member 'UODKWaterMovementComponent::SteeringFallRate' has a wrong offset!");
static_assert(offsetof(UODKWaterMovementComponent, SteeringAngleOverSpeed) == 0x0000E0, "Member 'UODKWaterMovementComponent::SteeringAngleOverSpeed' has a wrong offset!");
static_assert(offsetof(UODKWaterMovementComponent, BuoyancyComponent) == 0x0000E8, "Member 'UODKWaterMovementComponent::BuoyancyComponent' has a wrong offset!");
static_assert(offsetof(UODKWaterMovementComponent, OwnerPawn) == 0x0000F0, "Member 'UODKWaterMovementComponent::OwnerPawn' has a wrong offset!");
static_assert(offsetof(UODKWaterMovementComponent, RawThrottleInput) == 0x0000F8, "Member 'UODKWaterMovementComponent::RawThrottleInput' has a wrong offset!");
static_assert(offsetof(UODKWaterMovementComponent, ThrottleInput) == 0x0000FC, "Member 'UODKWaterMovementComponent::ThrottleInput' has a wrong offset!");
static_assert(offsetof(UODKWaterMovementComponent, RawSteeringInput) == 0x000100, "Member 'UODKWaterMovementComponent::RawSteeringInput' has a wrong offset!");
static_assert(offsetof(UODKWaterMovementComponent, SteeringInput) == 0x000104, "Member 'UODKWaterMovementComponent::SteeringInput' has a wrong offset!");
static_assert(offsetof(UODKWaterMovementComponent, MaxRPM) == 0x000108, "Member 'UODKWaterMovementComponent::MaxRPM' has a wrong offset!");

// Class SQWater.ODKWaterIntensityDrawComponent
// 0x0068 (0x0118 - 0x00B0)
class UODKWaterIntensityDrawComponent : public UActorComponent
{
public:
	class UTextureRenderTarget2D*                 OutputRenderTarget;                                // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 PackedVolumeData;                                  // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               DrawMaterial;                                      // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ProjectionParams;                                  // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               CopyTexture;                                       // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterial*                              TemplateMaterial;                                  // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PackedVolumesParameter;                            // 0x00E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ValidDataParameter;                                // 0x00F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ProjectionParameter;                               // 0x00F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TexSizeParameter;                                  // 0x0100(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CopyTextureParameter;                              // 0x0108(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1755[0x8];                                     // 0x0110(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PackMaskingVolumeData(TArray<struct FODKMaskingVolume>& Volumes);
	void SetMIDParams();
	void UpdateMIDParams();
	void UpdateWaterIntensityMasks(TArray<struct FODKMaskingVolume>& Volumes);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ODKWaterIntensityDrawComponent">();
	}
	static class UODKWaterIntensityDrawComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UODKWaterIntensityDrawComponent>();
	}
};
static_assert(alignof(UODKWaterIntensityDrawComponent) == 0x000008, "Wrong alignment on UODKWaterIntensityDrawComponent");
static_assert(sizeof(UODKWaterIntensityDrawComponent) == 0x000118, "Wrong size on UODKWaterIntensityDrawComponent");
static_assert(offsetof(UODKWaterIntensityDrawComponent, OutputRenderTarget) == 0x0000B0, "Member 'UODKWaterIntensityDrawComponent::OutputRenderTarget' has a wrong offset!");
static_assert(offsetof(UODKWaterIntensityDrawComponent, PackedVolumeData) == 0x0000B8, "Member 'UODKWaterIntensityDrawComponent::PackedVolumeData' has a wrong offset!");
static_assert(offsetof(UODKWaterIntensityDrawComponent, DrawMaterial) == 0x0000C0, "Member 'UODKWaterIntensityDrawComponent::DrawMaterial' has a wrong offset!");
static_assert(offsetof(UODKWaterIntensityDrawComponent, ProjectionParams) == 0x0000C8, "Member 'UODKWaterIntensityDrawComponent::ProjectionParams' has a wrong offset!");
static_assert(offsetof(UODKWaterIntensityDrawComponent, CopyTexture) == 0x0000D8, "Member 'UODKWaterIntensityDrawComponent::CopyTexture' has a wrong offset!");
static_assert(offsetof(UODKWaterIntensityDrawComponent, TemplateMaterial) == 0x0000E0, "Member 'UODKWaterIntensityDrawComponent::TemplateMaterial' has a wrong offset!");
static_assert(offsetof(UODKWaterIntensityDrawComponent, PackedVolumesParameter) == 0x0000E8, "Member 'UODKWaterIntensityDrawComponent::PackedVolumesParameter' has a wrong offset!");
static_assert(offsetof(UODKWaterIntensityDrawComponent, ValidDataParameter) == 0x0000F0, "Member 'UODKWaterIntensityDrawComponent::ValidDataParameter' has a wrong offset!");
static_assert(offsetof(UODKWaterIntensityDrawComponent, ProjectionParameter) == 0x0000F8, "Member 'UODKWaterIntensityDrawComponent::ProjectionParameter' has a wrong offset!");
static_assert(offsetof(UODKWaterIntensityDrawComponent, TexSizeParameter) == 0x000100, "Member 'UODKWaterIntensityDrawComponent::TexSizeParameter' has a wrong offset!");
static_assert(offsetof(UODKWaterIntensityDrawComponent, CopyTextureParameter) == 0x000108, "Member 'UODKWaterIntensityDrawComponent::CopyTextureParameter' has a wrong offset!");

// Class SQWater.ODKWaterMechanismComponent
// 0x0010 (0x0210 - 0x0200)
class UODKWaterMechanismComponent : public USceneComponent
{
public:
	float                                         DampeningImmersionDepth;                           // 0x01F8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1756[0x4];                                     // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    SimulatingComponent;                               // 0x0200(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ThrottleInput;                                     // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SteeringInput;                                     // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ApplySteering(const float InSteeringInput);
	void ApplyThrottle(const float InThrottleInput);
	void SetSimulatedComponent(class UPrimitiveComponent* InSimulatedComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ODKWaterMechanismComponent">();
	}
	static class UODKWaterMechanismComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UODKWaterMechanismComponent>();
	}
};
static_assert(alignof(UODKWaterMechanismComponent) == 0x000010, "Wrong alignment on UODKWaterMechanismComponent");
static_assert(sizeof(UODKWaterMechanismComponent) == 0x000210, "Wrong size on UODKWaterMechanismComponent");
static_assert(offsetof(UODKWaterMechanismComponent, DampeningImmersionDepth) == 0x0001F8, "Member 'UODKWaterMechanismComponent::DampeningImmersionDepth' has a wrong offset!");
static_assert(offsetof(UODKWaterMechanismComponent, SimulatingComponent) == 0x000200, "Member 'UODKWaterMechanismComponent::SimulatingComponent' has a wrong offset!");
static_assert(offsetof(UODKWaterMechanismComponent, ThrottleInput) == 0x000208, "Member 'UODKWaterMechanismComponent::ThrottleInput' has a wrong offset!");
static_assert(offsetof(UODKWaterMechanismComponent, SteeringInput) == 0x00020C, "Member 'UODKWaterMechanismComponent::SteeringInput' has a wrong offset!");

// Class SQWater.SQWaterBody
// 0x0018 (0x0240 - 0x0228)
class ASQWaterBody : public AActor
{
public:
	float                                         WaterDensity;                                      // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaterBodyIndex;                                    // 0x022C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, DuplicateTransient, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGenerateCollisions;                               // 0x0230(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1757[0xF];                                     // 0x0231(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetMaxWaveHeight() const;
	float GetWaveReferenceTime() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQWaterBody">();
	}
	static class ASQWaterBody* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQWaterBody>();
	}
};
static_assert(alignof(ASQWaterBody) == 0x000008, "Wrong alignment on ASQWaterBody");
static_assert(sizeof(ASQWaterBody) == 0x000240, "Wrong size on ASQWaterBody");
static_assert(offsetof(ASQWaterBody, WaterDensity) == 0x000228, "Member 'ASQWaterBody::WaterDensity' has a wrong offset!");
static_assert(offsetof(ASQWaterBody, WaterBodyIndex) == 0x00022C, "Member 'ASQWaterBody::WaterBodyIndex' has a wrong offset!");
static_assert(offsetof(ASQWaterBody, bGenerateCollisions) == 0x000230, "Member 'ASQWaterBody::bGenerateCollisions' has a wrong offset!");

// Class SQWater.SQLake
// 0x0030 (0x0270 - 0x0240)
class ASQLake : public ASQWaterBody
{
public:
	class UMaterialInstance*                      ParentMaterial;                                    // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   WaterBodyPlane;                                    // 0x0248(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPostProcessComponent*                  PostProcess;                                       // 0x0250(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                          BoxCollider;                                       // 0x0258(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                          PostProcessVolume;                                 // 0x0260(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               LakeMID;                                           // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQLake">();
	}
	static class ASQLake* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQLake>();
	}
};
static_assert(alignof(ASQLake) == 0x000008, "Wrong alignment on ASQLake");
static_assert(sizeof(ASQLake) == 0x000270, "Wrong size on ASQLake");
static_assert(offsetof(ASQLake, ParentMaterial) == 0x000240, "Member 'ASQLake::ParentMaterial' has a wrong offset!");
static_assert(offsetof(ASQLake, WaterBodyPlane) == 0x000248, "Member 'ASQLake::WaterBodyPlane' has a wrong offset!");
static_assert(offsetof(ASQLake, PostProcess) == 0x000250, "Member 'ASQLake::PostProcess' has a wrong offset!");
static_assert(offsetof(ASQLake, BoxCollider) == 0x000258, "Member 'ASQLake::BoxCollider' has a wrong offset!");
static_assert(offsetof(ASQLake, PostProcessVolume) == 0x000260, "Member 'ASQLake::PostProcessVolume' has a wrong offset!");
static_assert(offsetof(ASQLake, LakeMID) == 0x000268, "Member 'ASQLake::LakeMID' has a wrong offset!");

// Class SQWater.SQOcean
// 0x0088 (0x02C8 - 0x0240)
class ASQOcean : public ASQWaterBody
{
public:
	class UBoxComponent*                          BoxCollider;                                       // 0x0240(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                   WaterBodyPlane;                                    // 0x0248(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPostProcessComponent*                  PostProcess;                                       // 0x0250(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialParameterCollection*           Collection;                                        // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaveSetsOnCPU;                                     // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CPUSampleIterations;                               // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Slope;                                             // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalAmplitude;                                   // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Freq;                                              // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1758[0x4];                                     // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQWaveSet>                     WavesSet;                                          // 0x0278(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bUseRadialFlow;                                    // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1759[0x3];                                     // 0x0289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FoamDistanceCheck;                                 // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoamFalloff;                                       // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlowAdjust;                                        // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlowAmount;                                        // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlowMagnitude;                                     // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Phase;                                             // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindDirection;                                     // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UODKWaterIntensityData*                 WaterMaskingData;                                  // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 PackedData;                                        // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalculatedSlope;                                   // 0x02B8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_175A[0xC];                                     // 0x02BC(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DebugCPUIterations(const struct FVector& Position, int32 Iterations, int32 WaveSetToSample, struct FVector* OutPos, struct FVector* OutNormal);
	void DebugWaveVisualization(const struct FVector& Position, int32 Amount, float Spacing, float Lifetime);
	float GetWaterHeight(const struct FVector& Position);
	void InitializeWaterBody();
	void OnPackedDataUpdated(class UTextureRenderTarget2D* InPackedData);
	void PackWaveData();

	class UStaticMeshComponent* GetWaterBody() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQOcean">();
	}
	static class ASQOcean* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQOcean>();
	}
};
static_assert(alignof(ASQOcean) == 0x000008, "Wrong alignment on ASQOcean");
static_assert(sizeof(ASQOcean) == 0x0002C8, "Wrong size on ASQOcean");
static_assert(offsetof(ASQOcean, BoxCollider) == 0x000240, "Member 'ASQOcean::BoxCollider' has a wrong offset!");
static_assert(offsetof(ASQOcean, WaterBodyPlane) == 0x000248, "Member 'ASQOcean::WaterBodyPlane' has a wrong offset!");
static_assert(offsetof(ASQOcean, PostProcess) == 0x000250, "Member 'ASQOcean::PostProcess' has a wrong offset!");
static_assert(offsetof(ASQOcean, Collection) == 0x000258, "Member 'ASQOcean::Collection' has a wrong offset!");
static_assert(offsetof(ASQOcean, WaveSetsOnCPU) == 0x000260, "Member 'ASQOcean::WaveSetsOnCPU' has a wrong offset!");
static_assert(offsetof(ASQOcean, CPUSampleIterations) == 0x000264, "Member 'ASQOcean::CPUSampleIterations' has a wrong offset!");
static_assert(offsetof(ASQOcean, Slope) == 0x000268, "Member 'ASQOcean::Slope' has a wrong offset!");
static_assert(offsetof(ASQOcean, GlobalAmplitude) == 0x00026C, "Member 'ASQOcean::GlobalAmplitude' has a wrong offset!");
static_assert(offsetof(ASQOcean, Freq) == 0x000270, "Member 'ASQOcean::Freq' has a wrong offset!");
static_assert(offsetof(ASQOcean, WavesSet) == 0x000278, "Member 'ASQOcean::WavesSet' has a wrong offset!");
static_assert(offsetof(ASQOcean, bUseRadialFlow) == 0x000288, "Member 'ASQOcean::bUseRadialFlow' has a wrong offset!");
static_assert(offsetof(ASQOcean, FoamDistanceCheck) == 0x00028C, "Member 'ASQOcean::FoamDistanceCheck' has a wrong offset!");
static_assert(offsetof(ASQOcean, FoamFalloff) == 0x000290, "Member 'ASQOcean::FoamFalloff' has a wrong offset!");
static_assert(offsetof(ASQOcean, FlowAdjust) == 0x000294, "Member 'ASQOcean::FlowAdjust' has a wrong offset!");
static_assert(offsetof(ASQOcean, FlowAmount) == 0x000298, "Member 'ASQOcean::FlowAmount' has a wrong offset!");
static_assert(offsetof(ASQOcean, FlowMagnitude) == 0x00029C, "Member 'ASQOcean::FlowMagnitude' has a wrong offset!");
static_assert(offsetof(ASQOcean, Phase) == 0x0002A0, "Member 'ASQOcean::Phase' has a wrong offset!");
static_assert(offsetof(ASQOcean, WindDirection) == 0x0002A4, "Member 'ASQOcean::WindDirection' has a wrong offset!");
static_assert(offsetof(ASQOcean, WaterMaskingData) == 0x0002A8, "Member 'ASQOcean::WaterMaskingData' has a wrong offset!");
static_assert(offsetof(ASQOcean, PackedData) == 0x0002B0, "Member 'ASQOcean::PackedData' has a wrong offset!");
static_assert(offsetof(ASQOcean, CalculatedSlope) == 0x0002B8, "Member 'ASQOcean::CalculatedSlope' has a wrong offset!");

// Class SQWater.SQRiverSpline
// 0x0048 (0x0288 - 0x0240)
class ASQRiverSpline final : public ASQWaterBody
{
public:
	class USplineComponent*                       Spline;                                            // 0x0240(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            SplineBaseMesh;                                    // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                DebugPoint;                                        // 0x0250(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FlowIntensity;                                     // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     RiverMat;                                          // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Resolution;                                        // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ZCheckDist;                                        // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UPrimitiveComponent*>            Collisions;                                        // 0x0270(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NonPIEDuplicateTransient, NativeAccessSpecifierProtected)
	uint8                                         Pad_175B[0x8];                                     // 0x0280(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRiverSpline">();
	}
	static class ASQRiverSpline* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQRiverSpline>();
	}
};
static_assert(alignof(ASQRiverSpline) == 0x000008, "Wrong alignment on ASQRiverSpline");
static_assert(sizeof(ASQRiverSpline) == 0x000288, "Wrong size on ASQRiverSpline");
static_assert(offsetof(ASQRiverSpline, Spline) == 0x000240, "Member 'ASQRiverSpline::Spline' has a wrong offset!");
static_assert(offsetof(ASQRiverSpline, SplineBaseMesh) == 0x000248, "Member 'ASQRiverSpline::SplineBaseMesh' has a wrong offset!");
static_assert(offsetof(ASQRiverSpline, DebugPoint) == 0x000250, "Member 'ASQRiverSpline::DebugPoint' has a wrong offset!");
static_assert(offsetof(ASQRiverSpline, FlowIntensity) == 0x00025C, "Member 'ASQRiverSpline::FlowIntensity' has a wrong offset!");
static_assert(offsetof(ASQRiverSpline, RiverMat) == 0x000260, "Member 'ASQRiverSpline::RiverMat' has a wrong offset!");
static_assert(offsetof(ASQRiverSpline, Resolution) == 0x000268, "Member 'ASQRiverSpline::Resolution' has a wrong offset!");
static_assert(offsetof(ASQRiverSpline, ZCheckDist) == 0x00026C, "Member 'ASQRiverSpline::ZCheckDist' has a wrong offset!");
static_assert(offsetof(ASQRiverSpline, Collisions) == 0x000270, "Member 'ASQRiverSpline::Collisions' has a wrong offset!");

// Class SQWater.SQWaterBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class USQWaterBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static float CalculateDrag(float Coefficient, float Velocity, float Density, float SurfaceArea, float DeltaTime, float BodyMass);
	static const float CmsToKmh(float SpeedCms);
	static struct FVector2D ConvertLocationToUVs(const struct FVector& Location, const struct FVector2D& Offset, const struct FVector2D& Size);
	static struct FVector ConvertUVsToLocation(const struct FVector2D& UVs, const struct FVector2D& Offset, const struct FVector2D& Size);
	static float GetDefaultWaterDensity();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQWaterBlueprintLibrary">();
	}
	static class USQWaterBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQWaterBlueprintLibrary>();
	}
};
static_assert(alignof(USQWaterBlueprintLibrary) == 0x000008, "Wrong alignment on USQWaterBlueprintLibrary");
static_assert(sizeof(USQWaterBlueprintLibrary) == 0x000028, "Wrong size on USQWaterBlueprintLibrary");

// Class SQWater.SQWaterRudderComponent
// 0x0020 (0x0230 - 0x0210)
class USQWaterRudderComponent final : public UODKWaterMechanismComponent
{
public:
	float                                         MaxRotation;                                       // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_175C[0x4];                                     // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            RudderDragCurve;                                   // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            RudderTorqueCurve;                                 // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            RudderNormalForceCurve;                            // 0x0228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	struct FVector CalculateDrag(const struct FVector& Velocity, const float Rot, const float WaterDensity) const;
	struct FVector CalculateNormalForce(const struct FVector& Velocity, const float Rot, const float WaterDensity) const;
	struct FVector CalculateTorque(const struct FVector& Velocity, const float Rot, const float WaterDensity) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQWaterRudderComponent">();
	}
	static class USQWaterRudderComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQWaterRudderComponent>();
	}
};
static_assert(alignof(USQWaterRudderComponent) == 0x000010, "Wrong alignment on USQWaterRudderComponent");
static_assert(sizeof(USQWaterRudderComponent) == 0x000230, "Wrong size on USQWaterRudderComponent");
static_assert(offsetof(USQWaterRudderComponent, MaxRotation) == 0x000210, "Member 'USQWaterRudderComponent::MaxRotation' has a wrong offset!");
static_assert(offsetof(USQWaterRudderComponent, RudderDragCurve) == 0x000218, "Member 'USQWaterRudderComponent::RudderDragCurve' has a wrong offset!");
static_assert(offsetof(USQWaterRudderComponent, RudderTorqueCurve) == 0x000220, "Member 'USQWaterRudderComponent::RudderTorqueCurve' has a wrong offset!");
static_assert(offsetof(USQWaterRudderComponent, RudderNormalForceCurve) == 0x000228, "Member 'USQWaterRudderComponent::RudderNormalForceCurve' has a wrong offset!");

// Class SQWater.SQWaterRuntimeSettings
// 0x0008 (0x0040 - 0x0038)
class USQWaterRuntimeSettings final : public UDeveloperSettings
{
public:
	class FName                                   DefaultWaterCollisionProfileName;                  // 0x0038(0x0008)(Edit, ZeroConstructor, Config, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQWaterRuntimeSettings">();
	}
	static class USQWaterRuntimeSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQWaterRuntimeSettings>();
	}
};
static_assert(alignof(USQWaterRuntimeSettings) == 0x000008, "Wrong alignment on USQWaterRuntimeSettings");
static_assert(sizeof(USQWaterRuntimeSettings) == 0x000040, "Wrong size on USQWaterRuntimeSettings");
static_assert(offsetof(USQWaterRuntimeSettings, DefaultWaterCollisionProfileName) == 0x000038, "Member 'USQWaterRuntimeSettings::DefaultWaterCollisionProfileName' has a wrong offset!");

// Class SQWater.SQWaterSubsystem
// 0x0018 (0x0048 - 0x0030)
class USQWaterSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_175D[0x18];                                    // 0x0030(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetSmoothedWorldTimeSeconds() const;
	float GetWaterTimeSeconds() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQWaterSubsystem">();
	}
	static class USQWaterSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQWaterSubsystem>();
	}
};
static_assert(alignof(USQWaterSubsystem) == 0x000008, "Wrong alignment on USQWaterSubsystem");
static_assert(sizeof(USQWaterSubsystem) == 0x000048, "Wrong size on USQWaterSubsystem");

// Class SQWater.SQWaterThrusterComponent
// 0x0030 (0x0240 - 0x0210)
class USQWaterThrusterComponent final : public UODKWaterMechanismComponent
{
public:
	float                                         Force;                                             // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxRotation;                                       // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ReverseMultiplier;                                 // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ThrusterActivationHeight;                          // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundCue*                              ThrusterSound;                                     // 0x0220(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ThrusterFadeOutTime;                               // 0x0228(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ThrusterFadeOutEndVolume;                          // 0x022C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioComponent*                        ThrusterAudioComponent;                            // 0x0230(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_175E[0x8];                                     // 0x0238(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQWaterThrusterComponent">();
	}
	static class USQWaterThrusterComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQWaterThrusterComponent>();
	}
};
static_assert(alignof(USQWaterThrusterComponent) == 0x000010, "Wrong alignment on USQWaterThrusterComponent");
static_assert(sizeof(USQWaterThrusterComponent) == 0x000240, "Wrong size on USQWaterThrusterComponent");
static_assert(offsetof(USQWaterThrusterComponent, Force) == 0x000210, "Member 'USQWaterThrusterComponent::Force' has a wrong offset!");
static_assert(offsetof(USQWaterThrusterComponent, MaxRotation) == 0x000214, "Member 'USQWaterThrusterComponent::MaxRotation' has a wrong offset!");
static_assert(offsetof(USQWaterThrusterComponent, ReverseMultiplier) == 0x000218, "Member 'USQWaterThrusterComponent::ReverseMultiplier' has a wrong offset!");
static_assert(offsetof(USQWaterThrusterComponent, ThrusterActivationHeight) == 0x00021C, "Member 'USQWaterThrusterComponent::ThrusterActivationHeight' has a wrong offset!");
static_assert(offsetof(USQWaterThrusterComponent, ThrusterSound) == 0x000220, "Member 'USQWaterThrusterComponent::ThrusterSound' has a wrong offset!");
static_assert(offsetof(USQWaterThrusterComponent, ThrusterFadeOutTime) == 0x000228, "Member 'USQWaterThrusterComponent::ThrusterFadeOutTime' has a wrong offset!");
static_assert(offsetof(USQWaterThrusterComponent, ThrusterFadeOutEndVolume) == 0x00022C, "Member 'USQWaterThrusterComponent::ThrusterFadeOutEndVolume' has a wrong offset!");
static_assert(offsetof(USQWaterThrusterComponent, ThrusterAudioComponent) == 0x000230, "Member 'USQWaterThrusterComponent::ThrusterAudioComponent' has a wrong offset!");

// Class SQWater.WaterIntensityVolume
// 0x0030 (0x04B0 - 0x0480)
class UWaterIntensityVolume final : public UBoxComponent
{
public:
	struct FODKMaskingVolume                      VolumeConfig;                                      // 0x0478(0x0024)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_175F[0x4];                                     // 0x049C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UODKWaterIntensityData*                 IntensityData;                                     // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1760[0x8];                                     // 0x04A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float ConvertPosToGradient(const struct FVector& Position);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterIntensityVolume">();
	}
	static class UWaterIntensityVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWaterIntensityVolume>();
	}
};
static_assert(alignof(UWaterIntensityVolume) == 0x000010, "Wrong alignment on UWaterIntensityVolume");
static_assert(sizeof(UWaterIntensityVolume) == 0x0004B0, "Wrong size on UWaterIntensityVolume");
static_assert(offsetof(UWaterIntensityVolume, VolumeConfig) == 0x000478, "Member 'UWaterIntensityVolume::VolumeConfig' has a wrong offset!");
static_assert(offsetof(UWaterIntensityVolume, IntensityData) == 0x0004A0, "Member 'UWaterIntensityVolume::IntensityData' has a wrong offset!");

}

