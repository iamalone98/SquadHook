#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UI_Events_Component

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass UI_Events_Component.UI_Events_Component_C
// 0x0070 (0x0120 - 0x00B0)
class UUI_Events_Component_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TSoftObjectPtr<class USoundCue>               GameModeIntroAudio;                                // 0x00B8(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UClass*                                 Game_Mode_Intro_Widget_Class;                      // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            Mode_Intro_Widget;                                 // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UGraphNodeBasedBleedComponent_C*        Bleed_Component;                                   // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASQTeamState*                           Team_State;                                        // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Current_Sound;                                     // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class USoundCue>>       QueuedSounds;                                      // 0x0108(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         Time_Between_Queued_Sounds;                        // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GameIntroAlreadyPlayed;                            // 0x011C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_UI_Events_Component(int32 EntryPoint);
	void ReceiveBeginPlay();
	void Play_Low_Ticket_Sounds();
	void Reset_Enemy_Ticket_Bleed_Event();
	void Reset_Player_Ticket_Low_Event();
	void OnMatchStart();
	void Init_Commander_Team_2();
	void Team_2_Nomination_Started();
	void Team_1_Nomination_Started();
	void Team_2_Cmdr_Changed_Event(class ASQPlayerState* OldCommander, class ASQPlayerState* NewCommander);
	void Team_1_Cmdr_Changed_Event(class ASQPlayerState* OldCommander, class ASQPlayerState* NewCommander);
	void Init_Commander_Team_1();
	void Delay_and_Load_Queued_Sound();
	void Load_and_Play_Queued_Sound();
	void Add_Sound_to_Async_Queue(TSoftObjectPtr<class USoundCue> Sound);
	void Team_Selection_Changed(class ASQTeamState* Team);
	void OnLoaded_C2C962FD46CDE84F4452D5B6F1C39B2F(class UObject* Loaded);
	void Init_Deployment(class UUMG_MenuBase_C* Deployment);
	void Self_Team_is_Attacker(int32 ID, bool* Is_Attacker);
	void Match_is_Valid(bool* Valid);
	void Play_Destruction_Objective_Animation(int32 Owner_Team);
	void Play_Flag_Capture_Animation(class USQCaptureZoneComponent* Capture_Zone_Component, uint8 New_Owning_Team, uint8 Last_Owning_Team);
	void Get_Intro_Audio(class ASQTeamState* Team, TSoftObjectPtr<class USoundCue>* Output);
	void Get_Ticket_Bleed_Component();
	void Get_Mode_Intro_ID_from_Team_Short_Name(const class FString& Short_Name, int32* Param_Index);
	void Commander_Changed_Sounds(class ASQPlayerState* Old, class ASQPlayerState* New, int32 Team);
	void Commander_Nomination_Sounds(int32 Team);
	void GetCommanderSounds(struct FSQCommanderSounds* CommanderSounds, bool* SoundsAreValid);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"UI_Events_Component_C">();
	}
	static class UUI_Events_Component_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUI_Events_Component_C>();
	}
};
static_assert(alignof(UUI_Events_Component_C) == 0x000008, "Wrong alignment on UUI_Events_Component_C");
static_assert(sizeof(UUI_Events_Component_C) == 0x000120, "Wrong size on UUI_Events_Component_C");
static_assert(offsetof(UUI_Events_Component_C, UberGraphFrame) == 0x0000B0, "Member 'UUI_Events_Component_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UUI_Events_Component_C, GameModeIntroAudio) == 0x0000B8, "Member 'UUI_Events_Component_C::GameModeIntroAudio' has a wrong offset!");
static_assert(offsetof(UUI_Events_Component_C, Game_Mode_Intro_Widget_Class) == 0x0000E0, "Member 'UUI_Events_Component_C::Game_Mode_Intro_Widget_Class' has a wrong offset!");
static_assert(offsetof(UUI_Events_Component_C, Mode_Intro_Widget) == 0x0000E8, "Member 'UUI_Events_Component_C::Mode_Intro_Widget' has a wrong offset!");
static_assert(offsetof(UUI_Events_Component_C, Bleed_Component) == 0x0000F0, "Member 'UUI_Events_Component_C::Bleed_Component' has a wrong offset!");
static_assert(offsetof(UUI_Events_Component_C, Team_State) == 0x0000F8, "Member 'UUI_Events_Component_C::Team_State' has a wrong offset!");
static_assert(offsetof(UUI_Events_Component_C, Current_Sound) == 0x000100, "Member 'UUI_Events_Component_C::Current_Sound' has a wrong offset!");
static_assert(offsetof(UUI_Events_Component_C, QueuedSounds) == 0x000108, "Member 'UUI_Events_Component_C::QueuedSounds' has a wrong offset!");
static_assert(offsetof(UUI_Events_Component_C, Time_Between_Queued_Sounds) == 0x000118, "Member 'UUI_Events_Component_C::Time_Between_Queued_Sounds' has a wrong offset!");
static_assert(offsetof(UUI_Events_Component_C, GameIntroAlreadyPlayed) == 0x00011C, "Member 'UUI_Events_Component_C::GameIntroAlreadyPlayed' has a wrong offset!");

}

