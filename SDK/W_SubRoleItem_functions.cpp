#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_SubRoleItem

#include "Basic.hpp"

#include "W_SubRoleItem_classes.hpp"
#include "W_SubRoleItem_parameters.hpp"


namespace SDK
{

// Function W_SubRoleItem.W_SubRoleItem_C.ExecuteUbergraph_W_SubRoleItem
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_SubRoleItem_C::ExecuteUbergraph_W_SubRoleItem(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SubRoleItem_C", "ExecuteUbergraph_W_SubRoleItem");

	Params::W_SubRoleItem_C_ExecuteUbergraph_W_SubRoleItem Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_SubRoleItem.W_SubRoleItem_C.OnRoleChange
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQRoleSettings*                  In_Current_Role                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_SubRoleItem_C::OnRoleChange(class USQRoleSettings* In_Current_Role)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SubRoleItem_C", "OnRoleChange");

	Params::W_SubRoleItem_C_OnRoleChange Parms{};

	Parms.In_Current_Role = In_Current_Role;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_SubRoleItem.W_SubRoleItem_C.On Refresh UI
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSQAvailabilityState_Role        In_Role_State                                          (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)

void UW_SubRoleItem_C::On_Refresh_UI(const struct FSQAvailabilityState_Role& In_Role_State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SubRoleItem_C", "On Refresh UI");

	Params::W_SubRoleItem_C_On_Refresh_UI Parms{};

	Parms.In_Role_State = std::move(In_Role_State);

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_SubRoleItem.W_SubRoleItem_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UW_SubRoleItem_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SubRoleItem_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_SubRoleItem.W_SubRoleItem_C.BndEvt__Button_SquadMember_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature
// (BlueprintEvent)

void UW_SubRoleItem_C::BndEvt__Button_SquadMember_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SubRoleItem_C", "BndEvt__Button_SquadMember_K2Node_ComponentBoundEvent_1_OnButtonHoverEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_SubRoleItem.W_SubRoleItem_C.BndEvt__Button_SquadMember_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature
// (BlueprintEvent)

void UW_SubRoleItem_C::BndEvt__Button_SquadMember_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SubRoleItem_C", "BndEvt__Button_SquadMember_K2Node_ComponentBoundEvent_0_OnButtonHoverEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_SubRoleItem.W_SubRoleItem_C.BndEvt__Button_SquadMember_K2Node_ComponentBoundEvent_16_OnButtonPressedEvent__DelegateSignature
// (BlueprintEvent)

void UW_SubRoleItem_C::BndEvt__Button_SquadMember_K2Node_ComponentBoundEvent_16_OnButtonPressedEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SubRoleItem_C", "BndEvt__Button_SquadMember_K2Node_ComponentBoundEvent_16_OnButtonPressedEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_SubRoleItem.W_SubRoleItem_C.SetupExposition
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UW_SubRoleItem_C::SetupExposition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SubRoleItem_C", "SetupExposition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_SubRoleItem.W_SubRoleItem_C.UpdateExposition
// (Public, BlueprintCallable, BlueprintEvent)

void UW_SubRoleItem_C::UpdateExposition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SubRoleItem_C", "UpdateExposition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_SubRoleItem.W_SubRoleItem_C.Get State Color
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    In_Locked                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    In_Selected                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FLinearColor UW_SubRoleItem_C::Get_State_Color(bool In_Locked, bool In_Selected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SubRoleItem_C", "Get State Color");

	Params::W_SubRoleItem_C_Get_State_Color Parms{};

	Parms.In_Locked = In_Locked;
	Parms.In_Selected = In_Selected;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_SubRoleItem.W_SubRoleItem_C.PlayerNotSpawned
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Out_Is_NOT_Spawned                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UW_SubRoleItem_C::PlayerNotSpawned(bool* Out_Is_NOT_Spawned)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SubRoleItem_C", "PlayerNotSpawned");

	Params::W_SubRoleItem_C_PlayerNotSpawned Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Is_NOT_Spawned != nullptr)
		*Out_Is_NOT_Spawned = Parms.Out_Is_NOT_Spawned;
}


// Function W_SubRoleItem.W_SubRoleItem_C.IsRoleSelected
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USQRoleSettings*                  In_Role_Setting                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Out_Selected                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UW_SubRoleItem_C::IsRoleSelected(class USQRoleSettings* In_Role_Setting, bool* Out_Selected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SubRoleItem_C", "IsRoleSelected");

	Params::W_SubRoleItem_C_IsRoleSelected Parms{};

	Parms.In_Role_Setting = In_Role_Setting;

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Selected != nullptr)
		*Out_Selected = Parms.Out_Selected;
}


// Function W_SubRoleItem.W_SubRoleItem_C.GetRoleEntry
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FFSQRoleEntry                    OutEntry                                               (Parm, OutParm, HasGetValueTypeHash)

void UW_SubRoleItem_C::GetRoleEntry(struct FFSQRoleEntry* OutEntry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SubRoleItem_C", "GetRoleEntry");

	Params::W_SubRoleItem_C_GetRoleEntry Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutEntry != nullptr)
		*OutEntry = std::move(Parms.OutEntry);
}


// Function W_SubRoleItem.W_SubRoleItem_C.IsAvailable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Out_Available                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UW_SubRoleItem_C::IsAvailable(bool* Out_Available)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SubRoleItem_C", "IsAvailable");

	Params::W_SubRoleItem_C_IsAvailable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Available != nullptr)
		*Out_Available = Parms.Out_Available;
}


// Function W_SubRoleItem.W_SubRoleItem_C.GetCounts
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Out_Used                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Out_Availability                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_SubRoleItem_C::GetCounts(int32* Out_Used, int32* Out_Availability)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SubRoleItem_C", "GetCounts");

	Params::W_SubRoleItem_C_GetCounts Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Used != nullptr)
		*Out_Used = Parms.Out_Used;

	if (Out_Availability != nullptr)
		*Out_Availability = Parms.Out_Availability;
}


// Function W_SubRoleItem.W_SubRoleItem_C.GetUnavailabilityReason
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             OutReason                                              (Parm, OutParm)

void UW_SubRoleItem_C::GetUnavailabilityReason(class FText* OutReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SubRoleItem_C", "GetUnavailabilityReason");

	Params::W_SubRoleItem_C_GetUnavailabilityReason Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutReason != nullptr)
		*OutReason = std::move(Parms.OutReason);
}


// Function W_SubRoleItem.W_SubRoleItem_C.GetToolTip
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWidget*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UWidget* UW_SubRoleItem_C::GetToolTip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SubRoleItem_C", "GetToolTip");

	Params::W_SubRoleItem_C_GetToolTip Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function W_SubRoleItem.W_SubRoleItem_C.GetDisplayName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             Out_DisplayName                                        (Parm, OutParm)

void UW_SubRoleItem_C::GetDisplayName(class FText* Out_DisplayName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SubRoleItem_C", "GetDisplayName");

	Params::W_SubRoleItem_C_GetDisplayName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out_DisplayName != nullptr)
		*Out_DisplayName = std::move(Parms.Out_DisplayName);
}


// Function W_SubRoleItem.W_SubRoleItem_C.Get Weapon Name
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             Param_Name                                             (Parm, OutParm)
// struct FSQInventoryData                 Inventory                                              (Parm, OutParm)

void UW_SubRoleItem_C::Get_Weapon_Name(class FText* Param_Name, struct FSQInventoryData* Inventory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SubRoleItem_C", "Get Weapon Name");

	Params::W_SubRoleItem_C_Get_Weapon_Name Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Param_Name != nullptr)
		*Param_Name = std::move(Parms.Param_Name);

	if (Inventory != nullptr)
		*Inventory = std::move(Parms.Inventory);
}


// Function W_SubRoleItem.W_SubRoleItem_C.Get Weapon Magazine Count
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FSQInventoryData                 SQInventoryData                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   Item_Count                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_SubRoleItem_C::Get_Weapon_Magazine_Count(const struct FSQInventoryData& SQInventoryData, int32* Item_Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SubRoleItem_C", "Get Weapon Magazine Count");

	Params::W_SubRoleItem_C_Get_Weapon_Magazine_Count Parms{};

	Parms.SQInventoryData = std::move(SQInventoryData);

	UObject::ProcessEvent(Func, &Parms);

	if (Item_Count != nullptr)
		*Item_Count = Parms.Item_Count;
}


// Function W_SubRoleItem.W_SubRoleItem_C.GetRole
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Out_Success                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class USQRoleSettings*                  Out_Role_Setting                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_SubRoleItem_C::GetRole(bool* Out_Success, class USQRoleSettings** Out_Role_Setting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SubRoleItem_C", "GetRole");

	Params::W_SubRoleItem_C_GetRole Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Success != nullptr)
		*Out_Success = Parms.Out_Success;

	if (Out_Role_Setting != nullptr)
		*Out_Role_Setting = Parms.Out_Role_Setting;
}


// Function W_SubRoleItem.W_SubRoleItem_C.GetCountText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm)

class FText UW_SubRoleItem_C::GetCountText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_SubRoleItem_C", "GetCountText");

	Params::W_SubRoleItem_C_GetCountText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

