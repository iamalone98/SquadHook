#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RecoverySettings_EngineCheck

#include "Basic.hpp"

#include "Squad_structs.hpp"


namespace SDK::Params
{

// Function BP_RecoverySettings_EngineCheck.BP_RecoverySettings_EngineCheck_C.CanUseEmergencyRecovery
// 0x0048 (0x0048 - 0x0000)
struct BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery final
{
public:
	const class USQVehicleEmergencyRecoveryComponent* RecoveryComponent;                                 // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESQVehicleRecoveryMethod                      RecoveryMethod;                                    // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36EE[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQVehicle*                             LVehicle;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36EF[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQVehicle*                             CallFunc_GetOwningVehicle_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_1;                              // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36F0[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USQVehicleComponent*                    CallFunc_GetVehicleEngine_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USQVehicleEngine*                       K2Node_DynamicCast_AsSQVehicle_Engine;             // 0x0038(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsEngineActive_ReturnValue;               // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_BoolBool_ReturnValue;          // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_Select_Default;                             // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery) == 0x000008, "Wrong alignment on BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery");
static_assert(sizeof(BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery) == 0x000048, "Wrong size on BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery");
static_assert(offsetof(BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery, RecoveryComponent) == 0x000000, "Member 'BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery::RecoveryComponent' has a wrong offset!");
static_assert(offsetof(BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery, RecoveryMethod) == 0x000008, "Member 'BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery::RecoveryMethod' has a wrong offset!");
static_assert(offsetof(BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery, ReturnValue) == 0x000009, "Member 'BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery, LVehicle) == 0x000010, "Member 'BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery::LVehicle' has a wrong offset!");
static_assert(offsetof(BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery, Temp_bool_Variable) == 0x000018, "Member 'BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery, CallFunc_GetOwningVehicle_ReturnValue) == 0x000020, "Member 'BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery::CallFunc_GetOwningVehicle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery, Temp_bool_Variable_1) == 0x000029, "Member 'BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery, CallFunc_GetVehicleEngine_ReturnValue) == 0x000030, "Member 'BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery::CallFunc_GetVehicleEngine_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery, K2Node_DynamicCast_AsSQVehicle_Engine) == 0x000038, "Member 'BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery::K2Node_DynamicCast_AsSQVehicle_Engine' has a wrong offset!");
static_assert(offsetof(BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery, CallFunc_IsEngineActive_ReturnValue) == 0x000041, "Member 'BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery::CallFunc_IsEngineActive_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery, CallFunc_EqualEqual_BoolBool_ReturnValue) == 0x000042, "Member 'BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery::CallFunc_EqualEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery, K2Node_Select_Default) == 0x000043, "Member 'BP_RecoverySettings_EngineCheck_C_CanUseEmergencyRecovery::K2Node_Select_Default' has a wrong offset!");

}

