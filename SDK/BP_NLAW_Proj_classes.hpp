#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NLAW_Proj

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Squad_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_NLAW_Proj.BP_NLAW_Proj_C
// 0x0058 (0x0570 - 0x0518)
class ABP_NLAW_Proj_C final : public ASQMortarProjectile
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0518(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0520(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        BPEffectOnUnderMinFlightTime;                      // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             BPSoundonUnderMinFlightTime;                       // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Target_Angular_Speed_Degrees;                      // 0x0538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Start_Location;                                    // 0x053C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Target_Angular_Speed_Radians;                      // 0x054C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxDirectFlightDistanceMeters;                     // 0x0550(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxFlightDistanceUnits;                            // 0x0554(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShouldSteer;                                      // 0x0558(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FAF[0x3];                                     // 0x0559(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TotalTraveledDistance;                             // 0x055C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PreviousLocation;                                  // 0x0560(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDirectFlight;                                    // 0x056C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_NLAW_Proj(int32 EntryPoint);
	void ReceiveTick(float Param_DeltaSeconds);
	void ReceiveBeginPlay();
	void OnImpact(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void UpdateIgnoreGravity();
	void AdjustVelocityDirection();
	void GetCurrentKinematics(float* Distance_From_Start_Point, float* Angular_Speed_Degrees, float* Total_Speed, float* Linear_Speed, float* Tangential_Speed, float* Velocity_Angle_From_Start_Direction_Degrees);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_NLAW_Proj_C">();
	}
	static class ABP_NLAW_Proj_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_NLAW_Proj_C>();
	}
};
static_assert(alignof(ABP_NLAW_Proj_C) == 0x000008, "Wrong alignment on ABP_NLAW_Proj_C");
static_assert(sizeof(ABP_NLAW_Proj_C) == 0x000570, "Wrong size on ABP_NLAW_Proj_C");
static_assert(offsetof(ABP_NLAW_Proj_C, UberGraphFrame) == 0x000518, "Member 'ABP_NLAW_Proj_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_NLAW_Proj_C, SkeletalMesh) == 0x000520, "Member 'ABP_NLAW_Proj_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_NLAW_Proj_C, BPEffectOnUnderMinFlightTime) == 0x000528, "Member 'ABP_NLAW_Proj_C::BPEffectOnUnderMinFlightTime' has a wrong offset!");
static_assert(offsetof(ABP_NLAW_Proj_C, BPSoundonUnderMinFlightTime) == 0x000530, "Member 'ABP_NLAW_Proj_C::BPSoundonUnderMinFlightTime' has a wrong offset!");
static_assert(offsetof(ABP_NLAW_Proj_C, Target_Angular_Speed_Degrees) == 0x000538, "Member 'ABP_NLAW_Proj_C::Target_Angular_Speed_Degrees' has a wrong offset!");
static_assert(offsetof(ABP_NLAW_Proj_C, Start_Location) == 0x00053C, "Member 'ABP_NLAW_Proj_C::Start_Location' has a wrong offset!");
static_assert(offsetof(ABP_NLAW_Proj_C, DeltaSeconds) == 0x000548, "Member 'ABP_NLAW_Proj_C::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(ABP_NLAW_Proj_C, Target_Angular_Speed_Radians) == 0x00054C, "Member 'ABP_NLAW_Proj_C::Target_Angular_Speed_Radians' has a wrong offset!");
static_assert(offsetof(ABP_NLAW_Proj_C, MaxDirectFlightDistanceMeters) == 0x000550, "Member 'ABP_NLAW_Proj_C::MaxDirectFlightDistanceMeters' has a wrong offset!");
static_assert(offsetof(ABP_NLAW_Proj_C, MaxFlightDistanceUnits) == 0x000554, "Member 'ABP_NLAW_Proj_C::MaxFlightDistanceUnits' has a wrong offset!");
static_assert(offsetof(ABP_NLAW_Proj_C, bShouldSteer) == 0x000558, "Member 'ABP_NLAW_Proj_C::bShouldSteer' has a wrong offset!");
static_assert(offsetof(ABP_NLAW_Proj_C, TotalTraveledDistance) == 0x00055C, "Member 'ABP_NLAW_Proj_C::TotalTraveledDistance' has a wrong offset!");
static_assert(offsetof(ABP_NLAW_Proj_C, PreviousLocation) == 0x000560, "Member 'ABP_NLAW_Proj_C::PreviousLocation' has a wrong offset!");
static_assert(offsetof(ABP_NLAW_Proj_C, IsDirectFlight) == 0x00056C, "Member 'ABP_NLAW_Proj_C::IsDirectFlight' has a wrong offset!");

}

