#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Squad

#include "Basic.hpp"

#include "Squad_classes.hpp"
#include "Squad_parameters.hpp"


namespace SDK
{

// DelegateFunction Squad.SQProjectileSpawnerComponent.OnFireEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void USQProjectileSpawnerComponent::OnFireEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProjectileSpawnerComponent", "OnFireEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQProjectileSpawnerComponent.OnProjectileImpact
// (Final, Native, Private, HasOutParams, HasDefaults)
// Parameters:
// class AActor*                           SelfActor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USQProjectileSpawnerComponent::OnProjectileImpact(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProjectileSpawnerComponent", "OnProjectileImpact");

	Params::SQProjectileSpawnerComponent_OnProjectileImpact Parms{};

	Parms.SelfActor = SelfActor;
	Parms.OtherActor = OtherActor;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQProjectileSpawnerComponent.OnProjectileOverlap
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USQProjectileSpawnerComponent::OnProjectileOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProjectileSpawnerComponent", "OnProjectileOverlap");

	Params::SQProjectileSpawnerComponent_OnProjectileOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQProjectileSpawnerComponent.OnRep_IsFiring
// (Final, Native, Private)
// Parameters:
// bool                                    OldValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQProjectileSpawnerComponent::OnRep_IsFiring(bool OldValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProjectileSpawnerComponent", "OnRep_IsFiring");

	Params::SQProjectileSpawnerComponent_OnRep_IsFiring Parms{};

	Parms.OldValue = OldValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQProjectileSpawnerComponent.StartFiring
// (Final, Native, Public, BlueprintCallable)

void USQProjectileSpawnerComponent::StartFiring()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProjectileSpawnerComponent", "StartFiring");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQProjectileSpawnerComponent.StopFiring
// (Final, Native, Public, BlueprintCallable)

void USQProjectileSpawnerComponent::StopFiring()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProjectileSpawnerComponent", "StopFiring");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAvailability.GetAvailabilityForPlayer
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState             InTeamStatus                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState             OutPlayerStatus                                        (Parm, OutParm, NativeAccessSpecifierPublic)

void USQAvailability::GetAvailabilityForPlayer(class ASQPlayerController* InPlayer, const struct FSQAvailabilityState& InTeamStatus, struct FSQAvailabilityState* OutPlayerStatus) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAvailability", "GetAvailabilityForPlayer");

	Params::SQAvailability_GetAvailabilityForPlayer Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InTeamStatus = std::move(InTeamStatus);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPlayerStatus != nullptr)
		*OutPlayerStatus = std::move(Parms.OutPlayerStatus);
}


// Function Squad.SQAvailability.GetLimitedCount
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQAvailability::GetLimitedCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAvailability", "GetLimitedCount");

	Params::SQAvailability_GetLimitedCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAvailability.HasCost
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQAvailability::HasCost() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAvailability", "HasCost");

	Params::SQAvailability_HasCost Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAvailability.HasDelay
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQAvailability::HasDelay() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAvailability", "HasDelay");

	Params::SQAvailability_HasDelay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAvailability.HasLimitedCount
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQAvailability::HasLimitedCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAvailability", "HasLimitedCount");

	Params::SQAvailability_HasLimitedCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAvailability.HasPlayerBasedCost
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQAvailability::HasPlayerBasedCost() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAvailability", "HasPlayerBasedCost");

	Params::SQAvailability_HasPlayerBasedCost Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAvailability.HasTeamBasedCost
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQAvailability::HasTeamBasedCost() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAvailability", "HasTeamBasedCost");

	Params::SQAvailability_HasTeamBasedCost Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAvailability.InitializeTeamAvailability
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQTeam*                          InTeam                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQLayer*                         InActiveLayer                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState             OutTeamStatus                                          (Parm, OutParm, NativeAccessSpecifierPublic)

void USQAvailability::InitializeTeamAvailability(class ASQTeam* InTeam, class USQLayer* InActiveLayer, struct FSQAvailabilityState* OutTeamStatus) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAvailability", "InitializeTeamAvailability");

	Params::SQAvailability_InitializeTeamAvailability Parms{};

	Parms.InTeam = InTeam;
	Parms.InActiveLayer = InActiveLayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTeamStatus != nullptr)
		*OutTeamStatus = std::move(Parms.OutTeamStatus);
}


// Function Squad.SQAvailability.IsRestrictedForPlayer
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDataTableRowHandle              OutRestrictionReason                                   (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQAvailability::IsRestrictedForPlayer(class ASQPlayerController* InPlayer, struct FDataTableRowHandle* OutRestrictionReason) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAvailability", "IsRestrictedForPlayer");

	Params::SQAvailability_IsRestrictedForPlayer Parms{};

	Parms.InPlayer = InPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRestrictionReason != nullptr)
		*OutRestrictionReason = std::move(Parms.OutRestrictionReason);

	return Parms.ReturnValue;
}


// Function Squad.SQAvailability.IsRestrictedForTeam
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQTeam*                          InTeam                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDataTableRowHandle              OutRestrictionReason                                   (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQAvailability::IsRestrictedForTeam(class ASQTeam* InTeam, struct FDataTableRowHandle* OutRestrictionReason) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAvailability", "IsRestrictedForTeam");

	Params::SQAvailability_IsRestrictedForTeam Parms{};

	Parms.InTeam = InTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRestrictionReason != nullptr)
		*OutRestrictionReason = std::move(Parms.OutRestrictionReason);

	return Parms.ReturnValue;
}


// Function Squad.SQAvailability.OnPlayerAddUsage
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState             Status                                                 (Parm, OutParm, NativeAccessSpecifierPublic)

void USQAvailability::OnPlayerAddUsage(class ASQPlayerController* InPlayer, struct FSQAvailabilityState* Status) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAvailability", "OnPlayerAddUsage");

	Params::SQAvailability_OnPlayerAddUsage Parms{};

	Parms.InPlayer = InPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Status != nullptr)
		*Status = std::move(Parms.Status);
}


// Function Squad.SQAvailability.OnPlayerRemoveUsage
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState             Status                                                 (Parm, OutParm, NativeAccessSpecifierPublic)

void USQAvailability::OnPlayerRemoveUsage(class ASQPlayerController* InPlayer, struct FSQAvailabilityState* Status) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAvailability", "OnPlayerRemoveUsage");

	Params::SQAvailability_OnPlayerRemoveUsage Parms{};

	Parms.InPlayer = InPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Status != nullptr)
		*Status = std::move(Parms.Status);
}


// Function Squad.SQAvailability.OnTeamAddUsage
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQTeam*                          InTeam                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState             Status                                                 (Parm, OutParm, NativeAccessSpecifierPublic)

void USQAvailability::OnTeamAddUsage(class ASQTeam* InTeam, struct FSQAvailabilityState* Status) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAvailability", "OnTeamAddUsage");

	Params::SQAvailability_OnTeamAddUsage Parms{};

	Parms.InTeam = InTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Status != nullptr)
		*Status = std::move(Parms.Status);
}


// Function Squad.SQAvailability.OnTeamRemoveUsage
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQTeam*                          InTeam                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState             Status                                                 (Parm, OutParm, NativeAccessSpecifierPublic)

void USQAvailability::OnTeamRemoveUsage(class ASQTeam* InTeam, struct FSQAvailabilityState* Status) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAvailability", "OnTeamRemoveUsage");

	Params::SQAvailability_OnTeamRemoveUsage Parms{};

	Parms.InTeam = InTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Status != nullptr)
		*Status = std::move(Parms.Status);
}


// Function Squad.SQAvailability.UpdateTeamAvailability
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQTeam*                          InTeam                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState             OutTeamStatus                                          (Parm, OutParm, NativeAccessSpecifierPublic)

void USQAvailability::UpdateTeamAvailability(class ASQTeam* InTeam, struct FSQAvailabilityState* OutTeamStatus) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAvailability", "UpdateTeamAvailability");

	Params::SQAvailability_UpdateTeamAvailability Parms{};

	Parms.InTeam = InTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTeamStatus != nullptr)
		*OutTeamStatus = std::move(Parms.OutTeamStatus);
}


// Function Squad.SQCoreStateWidget.AnnounceSelectionState
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// ESQSelectionState                       InSelectionState                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCoreStateWidget::AnnounceSelectionState(ESQSelectionState InSelectionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateWidget", "AnnounceSelectionState");

	Params::SQCoreStateWidget_AnnounceSelectionState Parms{};

	Parms.InSelectionState = InSelectionState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCoreStateWidget.OnScaleChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   UniformScale                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCoreStateWidget::OnScaleChanged(float UniformScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateWidget", "OnScaleChanged");

	Params::SQCoreStateWidget_OnScaleChanged Parms{};

	Parms.UniformScale = UniformScale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQCoreStateWidget.OnSelectionStateChanged
// (Event, Protected, BlueprintEvent)

void USQCoreStateWidget::OnSelectionStateChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateWidget", "OnSelectionStateChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidget.OnAngleChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidget::OnAngleChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidget", "OnAngleChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidget.OnTintValueChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidget::OnTintValueChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidget", "OnTintValueChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidget.GetTintColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor USQMapWidget::GetTintColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidget", "GetTintColor");

	Params::SQMapWidget_GetTintColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMapWidget.GetTintValue
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESQMapWidgetTint                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESQMapWidgetTint USQMapWidget::GetTintValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidget", "GetTintValue");

	Params::SQMapWidget_GetTintValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMapWidgetSpawnPoint.OnActivatedTimeStampChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetSpawnPoint::OnActivatedTimeStampChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetSpawnPoint", "OnActivatedTimeStampChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetSpawnPoint.OnIsSelectedChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetSpawnPoint::OnIsSelectedChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetSpawnPoint", "OnIsSelectedChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetSpawnPoint.OnSiegedChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetSpawnPoint::OnSiegedChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetSpawnPoint", "OnSiegedChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetSpawnPoint.OnSpawningEnabledChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetSpawnPoint::OnSpawningEnabledChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetSpawnPoint", "OnSpawningEnabledChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetSpawnPoint.OnSpawnPointTypeChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetSpawnPoint::OnSpawnPointTypeChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetSpawnPoint", "OnSpawnPointTypeChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetRallyPoint.OnEventSquadStateChanged
// (Final, Native, Protected)
// Parameters:
// class ASQSquadState*                    NewSquad                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQSquadState*                    OldSquad                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQPlayerState*                   Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQMapWidgetRallyPoint::OnEventSquadStateChanged(class ASQSquadState* NewSquad, class ASQSquadState* OldSquad, class ASQPlayerState* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetRallyPoint", "OnEventSquadStateChanged");

	Params::SQMapWidgetRallyPoint_OnEventSquadStateChanged Parms{};

	Parms.NewSquad = NewSquad;
	Parms.OldSquad = OldSquad;
	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapWidgetRallyPoint.OnIsInSelfSquadChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetRallyPoint::OnIsInSelfSquadChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetRallyPoint", "OnIsInSelfSquadChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetRallyPoint.OnNumberOfSpawnsChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetRallyPoint::OnNumberOfSpawnsChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetRallyPoint", "OnNumberOfSpawnsChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetRallyPoint.OnSquadIdChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetRallyPoint::OnSquadIdChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetRallyPoint", "OnSquadIdChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQLocalAudioEffectHandler.BP_SoldierChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// class ASQSoldier*                       NewSoldier                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQLocalAudioEffectHandler::BP_SoldierChanged(class ASQSoldier* NewSoldier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLocalAudioEffectHandler", "BP_SoldierChanged");

	Params::SQLocalAudioEffectHandler_BP_SoldierChanged Parms{};

	Parms.NewSoldier = NewSoldier;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQLocalAudioMix.BP_InitAudioEffect
// (Event, Public, BlueprintEvent)
// Parameters:
// class ASQPlayerCameraManager*           CameraManager                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQLocalAudioMix::BP_InitAudioEffect(class ASQPlayerCameraManager* CameraManager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLocalAudioMix", "BP_InitAudioEffect");

	Params::SQLocalAudioMix_BP_InitAudioEffect Parms{};

	Parms.CameraManager = CameraManager;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQLocalAudioMix.BP_UpdateAudioMixing
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQSoldier*                       SoldierToApplyTo                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQLocalAudioMix::BP_UpdateAudioMixing(float DeltaTime, class ASQSoldier* SoldierToApplyTo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLocalAudioMix", "BP_UpdateAudioMixing");

	Params::SQLocalAudioMix_BP_UpdateAudioMixing Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.SoldierToApplyTo = SoldierToApplyTo;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Squad.SQMapWidgetDeployable.OnBuildStateChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetDeployable::OnBuildStateChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetDeployable", "OnBuildStateChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetForwardBase.OnAmmoPointsChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetForwardBase::OnAmmoPointsChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetForwardBase", "OnAmmoPointsChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetForwardBase.OnCanSpawnChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetForwardBase::OnCanSpawnChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetForwardBase", "OnCanSpawnChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetForwardBase.OnConstructionPointsChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetForwardBase::OnConstructionPointsChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetForwardBase", "OnConstructionPointsChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetForwardBase.OnConstructionRadiusChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetForwardBase::OnConstructionRadiusChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetForwardBase", "OnConstructionRadiusChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetForwardBase.OnExclusionRadiusChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetForwardBase::OnExclusionRadiusChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetForwardBase", "OnExclusionRadiusChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetForwardBase.OnIsBleedingChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetForwardBase::OnIsBleedingChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetForwardBase", "OnIsBleedingChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetForwardBase.OnMinActivatedTimeStampChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetForwardBase::OnMinActivatedTimeStampChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetForwardBase", "OnMinActivatedTimeStampChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetForwardBase.OnSiegedChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetForwardBase::OnSiegedChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetForwardBase", "OnSiegedChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.CoreGetAllItemsCallbackProxy.GetAllItems
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCoreGetAllItemsCallbackProxy*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreGetAllItemsCallbackProxy* UCoreGetAllItemsCallbackProxy::GetAllItems(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreGetAllItemsCallbackProxy", "GetAllItems");

	Params::CoreGetAllItemsCallbackProxy_GetAllItems Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQUserWidget.BPInit
// (Event, Public, BlueprintEvent)

void USQUserWidget::BPInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQUserWidget", "BPInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQUserWidget.SelfRemove
// (Native, Public, BlueprintCallable)

void USQUserWidget::SelfRemove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQUserWidget", "SelfRemove");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQUserWidget.ToggleUIVisibility
// (Final, Native, Public)
// Parameters:
// bool                                    bIsVisible                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQUserWidget::ToggleUIVisibility(bool bIsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQUserWidget", "ToggleUIVisibility");

	Params::SQUserWidget_ToggleUIVisibility Parms{};

	Parms.bIsVisible = bIsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleViewWidget.ChangeZoomReticleImage
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewZoomReticleIndex                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVehicleViewWidget::ChangeZoomReticleImage(const int32 NewZoomReticleIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleViewWidget", "ChangeZoomReticleImage");

	Params::SQVehicleViewWidget_ChangeZoomReticleImage Parms{};

	Parms.NewZoomReticleIndex = NewZoomReticleIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleViewWidget.InitWidget
// (Final, Native, Public, BlueprintCallable)

void USQVehicleViewWidget::InitWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleViewWidget", "InitWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleViewWidget.Unzoom
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USQVehicleViewWidget::Unzoom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleViewWidget", "Unzoom");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQProjectileHitValidator.GetActorImmersionDepth
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           QueryingActor                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ISQProjectileHitValidator::GetActorImmersionDepth(const class AActor* QueryingActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProjectileHitValidator", "GetActorImmersionDepth");

	Params::SQProjectileHitValidator_GetActorImmersionDepth Parms{};

	Parms.QueryingActor = QueryingActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQProjectileHitValidator.HasValidProjectileHit
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AActor*                           ProjectileOwner                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       InHit                                                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ISQProjectileHitValidator::HasValidProjectileHit(const class AActor* ProjectileOwner, const struct FHitResult& InHit) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProjectileHitValidator", "HasValidProjectileHit");

	Params::SQProjectileHitValidator_HasValidProjectileHit Parms{};

	Parms.ProjectileOwner = ProjectileOwner;
	Parms.InHit = std::move(InHit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQProjectileHitValidator.HasValidProjectileOverlap
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ISQProjectileHitValidator::HasValidProjectileOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProjectileHitValidator", "HasValidProjectileOverlap");

	Params::SQProjectileHitValidator_HasValidProjectileOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMapWidgetPawn.OnCameraRotationYawChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetPawn::OnCameraRotationYawChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetPawn", "OnCameraRotationYawChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetPawn.OnFireTeamIndexChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetPawn::OnFireTeamIndexChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetPawn", "OnFireTeamIndexChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetPawn.OnIsInSelfSquad
// (Event, Protected, BlueprintEvent)

void USQMapWidgetPawn::OnIsInSelfSquad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetPawn", "OnIsInSelfSquad");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetPawn.OnIsInSelfTeam
// (Event, Protected, BlueprintEvent)

void USQMapWidgetPawn::OnIsInSelfTeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetPawn", "OnIsInSelfTeam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetPawn.OnIsOwnedBySelfChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetPawn::OnIsOwnedBySelfChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetPawn", "OnIsOwnedBySelfChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetPawn.OnIsOwnedChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetPawn::OnIsOwnedChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetPawn", "OnIsOwnedChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetSoldier.OnCanSelfSeeHealthStatusChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetSoldier::OnCanSelfSeeHealthStatusChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetSoldier", "OnCanSelfSeeHealthStatusChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetSoldier.OnCurrentRoleChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetSoldier::OnCurrentRoleChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetSoldier", "OnCurrentRoleChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetSoldier.OnFireteamIdChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetSoldier::OnFireteamIdChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetSoldier", "OnFireteamIdChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetSoldier.OnHealthStatusRangeChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetSoldier::OnHealthStatusRangeChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetSoldier", "OnHealthStatusRangeChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetSoldier.OnIsAliveChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetSoldier::OnIsAliveChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetSoldier", "OnIsAliveChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetSoldier.OnIsBleedingChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetSoldier::OnIsBleedingChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetSoldier", "OnIsBleedingChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetSoldier.OnIsInVehicleChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetSoldier::OnIsInVehicleChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetSoldier", "OnIsInVehicleChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetSoldier.OnIsMedicChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetSoldier::OnIsMedicChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetSoldier", "OnIsMedicChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetSoldier.OnIsUsingFreeLookChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetSoldier::OnIsUsingFreeLookChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetSoldier", "OnIsUsingFreeLookChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetSoldier.OnIsWithinCanSelfSeeHealthSatusRangeChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetSoldier::OnIsWithinCanSelfSeeHealthSatusRangeChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetSoldier", "OnIsWithinCanSelfSeeHealthSatusRangeChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetSoldier.OnIsWoundedChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetSoldier::OnIsWoundedChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetSoldier", "OnIsWoundedChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetSoldier.OnLeaderStateChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetSoldier::OnLeaderStateChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetSoldier", "OnLeaderStateChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetSoldier.OnPlayerChangedRole
// (Final, Native, Protected)
// Parameters:
// class USQRoleSettings*                  NewRole                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQMapWidgetSoldier::OnPlayerChangedRole(class USQRoleSettings* NewRole)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetSoldier", "OnPlayerChangedRole");

	Params::SQMapWidgetSoldier_OnPlayerChangedRole Parms{};

	Parms.NewRole = NewRole;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapWidgetSoldier.OnShowBleedingChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetSoldier::OnShowBleedingChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetSoldier", "OnShowBleedingChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetSoldier.OnShowIncapChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetSoldier::OnShowIncapChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetSoldier", "OnShowIncapChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetSoldier.OnSoldierInfoChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetSoldier::OnSoldierInfoChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetSoldier", "OnSoldierInfoChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetSoldier.OnSoldierLocationChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetSoldier::OnSoldierLocationChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetSoldier", "OnSoldierLocationChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetSoldier.OnSquadIdChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetSoldier::OnSquadIdChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetSoldier", "OnSquadIdChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetSoldier.GetShowBleeding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQMapWidgetSoldier::GetShowBleeding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetSoldier", "GetShowBleeding");

	Params::SQMapWidgetSoldier_GetShowBleeding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMapWidgetSoldier.GetShowIncap
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQMapWidgetSoldier::GetShowIncap() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetSoldier", "GetShowIncap");

	Params::SQMapWidgetSoldier_GetShowIncap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.CoreInventoryBlueprintLibrary.GetItemCount
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintOnlineItem             Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCoreInventoryBlueprintLibrary::GetItemCount(const struct FBlueprintOnlineItem& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreInventoryBlueprintLibrary", "GetItemCount");

	Params::CoreInventoryBlueprintLibrary_GetItemCount Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.CoreInventoryBlueprintLibrary.GetItemId
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintOnlineItem             Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCoreInventoryBlueprintLibrary::GetItemId(const struct FBlueprintOnlineItem& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreInventoryBlueprintLibrary", "GetItemId");

	Params::CoreInventoryBlueprintLibrary_GetItemId Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.CoreInventoryBlueprintLibrary.GetItemName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintOnlineItem             Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UCoreInventoryBlueprintLibrary::GetItemName(const struct FBlueprintOnlineItem& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreInventoryBlueprintLibrary", "GetItemName");

	Params::CoreInventoryBlueprintLibrary_GetItemName Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQApprovalQueueWidget.Init
// (Final, Native, Protected, BlueprintCallable)

void USQApprovalQueueWidget::Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQApprovalQueueWidget", "Init");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.CoreSerializeItemSetCallbackProxy.SerializeItemSet
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FBlueprintOnlineItem>     Items                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UCoreSerializeItemSetCallbackProxy*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCoreSerializeItemSetCallbackProxy* UCoreSerializeItemSetCallbackProxy::SerializeItemSet(class UObject* WorldContextObject, const TArray<struct FBlueprintOnlineItem>& Items)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CoreSerializeItemSetCallbackProxy", "SerializeItemSet");

	Params::CoreSerializeItemSetCallbackProxy_SerializeItemSet Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Items = std::move(Items);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMapWidgetMapMarker.OnFireteamIdChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetMapMarker::OnFireteamIdChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetMapMarker", "OnFireteamIdChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetMapMarker.OnSquadIdChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetMapMarker::OnSquadIdChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetMapMarker", "OnSquadIdChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetMapMarker.OnTextureChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetMapMarker::OnTextureChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetMapMarker", "OnTextureChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetMapMarker.OnTintChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetMapMarker::OnTintChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetMapMarker", "OnTintChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetMapMarkerSelectable.OnRightClicked
// (Event, Protected, BlueprintEvent)

void USQMapWidgetMapMarkerSelectable::OnRightClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetMapMarkerSelectable", "OnRightClicked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQAvailabilityHelper.AddUsage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSQAvailabilityState             InState                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState             OutState                                               (Parm, OutParm, NativeAccessSpecifierPublic)
// int32                                   AddedUsage                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQAvailabilityHelper::AddUsage(const struct FSQAvailabilityState& InState, struct FSQAvailabilityState* OutState, int32 AddedUsage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAvailabilityHelper", "AddUsage");

	Params::SQAvailabilityHelper_AddUsage Parms{};

	Parms.InState = std::move(InState);
	Parms.AddedUsage = AddedUsage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutState != nullptr)
		*OutState = std::move(Parms.OutState);
}


// Function Squad.SQAvailabilityHelper.ClearNextAvailabilityTime
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSQAvailabilityState             InState                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState             OutState                                               (Parm, OutParm, NativeAccessSpecifierPublic)

void USQAvailabilityHelper::ClearNextAvailabilityTime(const struct FSQAvailabilityState& InState, struct FSQAvailabilityState* OutState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAvailabilityHelper", "ClearNextAvailabilityTime");

	Params::SQAvailabilityHelper_ClearNextAvailabilityTime Parms{};

	Parms.InState = std::move(InState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutState != nullptr)
		*OutState = std::move(Parms.OutState);
}


// Function Squad.SQAvailabilityHelper.EnQueueNextAvailabilityTime
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FSQAvailabilityState             InState                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState             OutState                                               (Parm, OutParm, NativeAccessSpecifierPublic)
// struct FDateTime                        InNextAvailabilityTime                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDataTableRowHandle              InUnavailabilityReason                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USQAvailabilityHelper::EnQueueNextAvailabilityTime(const struct FSQAvailabilityState& InState, struct FSQAvailabilityState* OutState, struct FDateTime* InNextAvailabilityTime, const struct FDataTableRowHandle& InUnavailabilityReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAvailabilityHelper", "EnQueueNextAvailabilityTime");

	Params::SQAvailabilityHelper_EnQueueNextAvailabilityTime Parms{};

	Parms.InState = std::move(InState);
	Parms.InUnavailabilityReason = std::move(InUnavailabilityReason);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutState != nullptr)
		*OutState = std::move(Parms.OutState);

	if (InNextAvailabilityTime != nullptr)
		*InNextAvailabilityTime = std::move(Parms.InNextAvailabilityTime);
}


// Function Squad.SQAvailabilityHelper.GetAvailabilityCount
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSQAvailabilityState             InState                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQAvailabilityHelper::GetAvailabilityCount(const struct FSQAvailabilityState& InState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAvailabilityHelper", "GetAvailabilityCount");

	Params::SQAvailabilityHelper_GetAvailabilityCount Parms{};

	Parms.InState = std::move(InState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAvailabilityHelper.GetAvailabilityDelay
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSQAvailabilityState             InState                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FTimespan                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTimespan USQAvailabilityHelper::GetAvailabilityDelay(const struct FSQAvailabilityState& InState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAvailabilityHelper", "GetAvailabilityDelay");

	Params::SQAvailabilityHelper_GetAvailabilityDelay Parms{};

	Parms.InState = std::move(InState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAvailabilityHelper.GetAvailabilityPercentDelay
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSQAvailabilityState             InState                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   TotalDelay                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQAvailabilityHelper::GetAvailabilityPercentDelay(const struct FSQAvailabilityState& InState, float TotalDelay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAvailabilityHelper", "GetAvailabilityPercentDelay");

	Params::SQAvailabilityHelper_GetAvailabilityPercentDelay Parms{};

	Parms.InState = std::move(InState);
	Parms.TotalDelay = TotalDelay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAvailabilityHelper.HasActionActiveTimer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSQAvailabilityState_Action      InState                                                (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQAvailabilityHelper::HasActionActiveTimer(const struct FSQAvailabilityState_Action& InState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAvailabilityHelper", "HasActionActiveTimer");

	Params::SQAvailabilityHelper_HasActionActiveTimer Parms{};

	Parms.InState = std::move(InState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAvailabilityHelper.HasActiveTimer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSQAvailabilityState             InState                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQAvailabilityHelper::HasActiveTimer(const struct FSQAvailabilityState& InState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAvailabilityHelper", "HasActiveTimer");

	Params::SQAvailabilityHelper_HasActiveTimer Parms{};

	Parms.InState = std::move(InState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAvailabilityHelper.HasDeployableActiveTimer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSQAvailabilityState_Deployable  InState                                                (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQAvailabilityHelper::HasDeployableActiveTimer(const struct FSQAvailabilityState_Deployable& InState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAvailabilityHelper", "HasDeployableActiveTimer");

	Params::SQAvailabilityHelper_HasDeployableActiveTimer Parms{};

	Parms.InState = std::move(InState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAvailabilityHelper.HasRoleActiveTimer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSQAvailabilityState_Role        InState                                                (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQAvailabilityHelper::HasRoleActiveTimer(const struct FSQAvailabilityState_Role& InState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAvailabilityHelper", "HasRoleActiveTimer");

	Params::SQAvailabilityHelper_HasRoleActiveTimer Parms{};

	Parms.InState = std::move(InState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAvailabilityHelper.HasVehicleActiveTimer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSQAvailabilityState_Vehicle     InState                                                (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQAvailabilityHelper::HasVehicleActiveTimer(const struct FSQAvailabilityState_Vehicle& InState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAvailabilityHelper", "HasVehicleActiveTimer");

	Params::SQAvailabilityHelper_HasVehicleActiveTimer Parms{};

	Parms.InState = std::move(InState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAvailabilityHelper.IsActionAvailableForPlayer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSQAvailabilityState_Action      InTeamState                                            (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState             OutPlayerState                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQAvailabilityHelper::IsActionAvailableForPlayer(const struct FSQAvailabilityState_Action& InTeamState, class ASQPlayerController* InPlayer, struct FSQAvailabilityState* OutPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAvailabilityHelper", "IsActionAvailableForPlayer");

	Params::SQAvailabilityHelper_IsActionAvailableForPlayer Parms{};

	Parms.InTeamState = std::move(InTeamState);
	Parms.InPlayer = InPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPlayerState != nullptr)
		*OutPlayerState = std::move(Parms.OutPlayerState);

	return Parms.ReturnValue;
}


// Function Squad.SQAvailabilityHelper.IsActionAvailableForTeam
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSQAvailabilityState_Action      InTeamState                                            (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQAvailabilityHelper::IsActionAvailableForTeam(const struct FSQAvailabilityState_Action& InTeamState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAvailabilityHelper", "IsActionAvailableForTeam");

	Params::SQAvailabilityHelper_IsActionAvailableForTeam Parms{};

	Parms.InTeamState = std::move(InTeamState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAvailabilityHelper.IsAvailable
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSQAvailabilityState             InState                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQAvailabilityHelper::IsAvailable(const struct FSQAvailabilityState& InState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAvailabilityHelper", "IsAvailable");

	Params::SQAvailabilityHelper_IsAvailable Parms{};

	Parms.InState = std::move(InState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAvailabilityHelper.IsDeployableAvailableForPlayer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSQAvailabilityState_Deployable  InTeamState                                            (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState             OutPlayerState                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQAvailabilityHelper::IsDeployableAvailableForPlayer(const struct FSQAvailabilityState_Deployable& InTeamState, class ASQPlayerController* InPlayer, struct FSQAvailabilityState* OutPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAvailabilityHelper", "IsDeployableAvailableForPlayer");

	Params::SQAvailabilityHelper_IsDeployableAvailableForPlayer Parms{};

	Parms.InTeamState = std::move(InTeamState);
	Parms.InPlayer = InPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPlayerState != nullptr)
		*OutPlayerState = std::move(Parms.OutPlayerState);

	return Parms.ReturnValue;
}


// Function Squad.SQAvailabilityHelper.IsDeployableAvailableForTeam
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSQAvailabilityState_Deployable  InTeamState                                            (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQAvailabilityHelper::IsDeployableAvailableForTeam(const struct FSQAvailabilityState_Deployable& InTeamState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAvailabilityHelper", "IsDeployableAvailableForTeam");

	Params::SQAvailabilityHelper_IsDeployableAvailableForTeam Parms{};

	Parms.InTeamState = std::move(InTeamState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAvailabilityHelper.IsInfiniteAvailability
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSQAvailabilityState             InState                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQAvailabilityHelper::IsInfiniteAvailability(const struct FSQAvailabilityState& InState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAvailabilityHelper", "IsInfiniteAvailability");

	Params::SQAvailabilityHelper_IsInfiniteAvailability Parms{};

	Parms.InState = std::move(InState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAvailabilityHelper.IsOverCapacity
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSQAvailabilityState             InState                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQAvailabilityHelper::IsOverCapacity(const struct FSQAvailabilityState& InState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAvailabilityHelper", "IsOverCapacity");

	Params::SQAvailabilityHelper_IsOverCapacity Parms{};

	Parms.InState = std::move(InState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAvailabilityHelper.IsRoleAvailableForPlayer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSQAvailabilityState_Role        InTeamState                                            (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState             OutPlayerState                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQAvailabilityHelper::IsRoleAvailableForPlayer(const struct FSQAvailabilityState_Role& InTeamState, class ASQPlayerController* InPlayer, struct FSQAvailabilityState* OutPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAvailabilityHelper", "IsRoleAvailableForPlayer");

	Params::SQAvailabilityHelper_IsRoleAvailableForPlayer Parms{};

	Parms.InTeamState = std::move(InTeamState);
	Parms.InPlayer = InPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPlayerState != nullptr)
		*OutPlayerState = std::move(Parms.OutPlayerState);

	return Parms.ReturnValue;
}


// Function Squad.SQAvailabilityHelper.IsRoleAvailableForTeam
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSQAvailabilityState_Role        InTeamState                                            (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQAvailabilityHelper::IsRoleAvailableForTeam(const struct FSQAvailabilityState_Role& InTeamState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAvailabilityHelper", "IsRoleAvailableForTeam");

	Params::SQAvailabilityHelper_IsRoleAvailableForTeam Parms{};

	Parms.InTeamState = std::move(InTeamState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAvailabilityHelper.IsVehicleAvailableForPlayer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSQAvailabilityState_Vehicle     InTeamState                                            (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState             OutPlayerState                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQAvailabilityHelper::IsVehicleAvailableForPlayer(const struct FSQAvailabilityState_Vehicle& InTeamState, class ASQPlayerController* InPlayer, struct FSQAvailabilityState* OutPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAvailabilityHelper", "IsVehicleAvailableForPlayer");

	Params::SQAvailabilityHelper_IsVehicleAvailableForPlayer Parms{};

	Parms.InTeamState = std::move(InTeamState);
	Parms.InPlayer = InPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPlayerState != nullptr)
		*OutPlayerState = std::move(Parms.OutPlayerState);

	return Parms.ReturnValue;
}


// Function Squad.SQAvailabilityHelper.IsVehicleAvailableForTeam
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSQAvailabilityState_Vehicle     InTeamState                                            (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQAvailabilityHelper::IsVehicleAvailableForTeam(const struct FSQAvailabilityState_Vehicle& InTeamState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAvailabilityHelper", "IsVehicleAvailableForTeam");

	Params::SQAvailabilityHelper_IsVehicleAvailableForTeam Parms{};

	Parms.InTeamState = std::move(InTeamState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAvailabilityHelper.RemoveUsage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSQAvailabilityState             InState                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState             OutState                                               (Parm, OutParm, NativeAccessSpecifierPublic)
// int32                                   RemovedUsage                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQAvailabilityHelper::RemoveUsage(const struct FSQAvailabilityState& InState, struct FSQAvailabilityState* OutState, int32 RemovedUsage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAvailabilityHelper", "RemoveUsage");

	Params::SQAvailabilityHelper_RemoveUsage Parms{};

	Parms.InState = std::move(InState);
	Parms.RemovedUsage = RemovedUsage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutState != nullptr)
		*OutState = std::move(Parms.OutState);
}


// Function Squad.SQAvailabilityHelper.SetAvailable
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSQAvailabilityState             InState                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState             OutState                                               (Parm, OutParm, NativeAccessSpecifierPublic)
// int32                                   InAvailable                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQAvailabilityHelper::SetAvailable(const struct FSQAvailabilityState& InState, struct FSQAvailabilityState* OutState, int32 InAvailable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAvailabilityHelper", "SetAvailable");

	Params::SQAvailabilityHelper_SetAvailable Parms{};

	Parms.InState = std::move(InState);
	Parms.InAvailable = InAvailable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutState != nullptr)
		*OutState = std::move(Parms.OutState);
}


// Function Squad.SQAvailabilityHelper.SetForceAvailable
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSQAvailabilityState             InState                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState             OutState                                               (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    Force                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQAvailabilityHelper::SetForceAvailable(const struct FSQAvailabilityState& InState, struct FSQAvailabilityState* OutState, bool Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAvailabilityHelper", "SetForceAvailable");

	Params::SQAvailabilityHelper_SetForceAvailable Parms{};

	Parms.InState = std::move(InState);
	Parms.Force = Force;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutState != nullptr)
		*OutState = std::move(Parms.OutState);
}


// Function Squad.SQAvailabilityHelper.SetModifierPct
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSQAvailabilityState             InState                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState             OutState                                               (Parm, OutParm, NativeAccessSpecifierPublic)
// int32                                   ModifierPercentage                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQAvailabilityHelper::SetModifierPct(const struct FSQAvailabilityState& InState, struct FSQAvailabilityState* OutState, int32 ModifierPercentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAvailabilityHelper", "SetModifierPct");

	Params::SQAvailabilityHelper_SetModifierPct Parms{};

	Parms.InState = std::move(InState);
	Parms.ModifierPercentage = ModifierPercentage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutState != nullptr)
		*OutState = std::move(Parms.OutState);
}


// Function Squad.SQAvailabilityHelper.SetUnavailable
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSQAvailabilityState             InState                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState             OutState                                               (Parm, OutParm, NativeAccessSpecifierPublic)
// struct FDataTableRowHandle              InUnavailabilityReason                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USQAvailabilityHelper::SetUnavailable(const struct FSQAvailabilityState& InState, struct FSQAvailabilityState* OutState, const struct FDataTableRowHandle& InUnavailabilityReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAvailabilityHelper", "SetUnavailable");

	Params::SQAvailabilityHelper_SetUnavailable Parms{};

	Parms.InState = std::move(InState);
	Parms.InUnavailabilityReason = std::move(InUnavailabilityReason);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutState != nullptr)
		*OutState = std::move(Parms.OutState);
}


// Function Squad.SQAvailabilityHelper.SetUsage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSQAvailabilityState             InState                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState             OutState                                               (Parm, OutParm, NativeAccessSpecifierPublic)
// int32                                   Usage                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQAvailabilityHelper::SetUsage(const struct FSQAvailabilityState& InState, struct FSQAvailabilityState* OutState, int32 Usage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAvailabilityHelper", "SetUsage");

	Params::SQAvailabilityHelper_SetUsage Parms{};

	Parms.InState = std::move(InState);
	Parms.Usage = Usage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutState != nullptr)
		*OutState = std::move(Parms.OutState);
}


// Function Squad.SQAvailabilityHelper.UpdateNextAvailabilityTime
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSQAvailabilityState             InState                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState             OutState                                               (Parm, OutParm, NativeAccessSpecifierPublic)

void USQAvailabilityHelper::UpdateNextAvailabilityTime(const struct FSQAvailabilityState& InState, struct FSQAvailabilityState* OutState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAvailabilityHelper", "UpdateNextAvailabilityTime");

	Params::SQAvailabilityHelper_UpdateNextAvailabilityTime Parms{};

	Parms.InState = std::move(InState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutState != nullptr)
		*OutState = std::move(Parms.OutState);
}


// Function Squad.SQUndirectedGraph.AddLink
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FSQGraphLink                     Link                                                   (Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQUndirectedGraph::AddLink(const struct FSQGraphLink& Link)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQUndirectedGraph", "AddLink");

	Params::SQUndirectedGraph_AddLink Parms{};

	Parms.Link = std::move(Link);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQUndirectedGraph.AddNode
// (Native, Public, BlueprintCallable)
// Parameters:
// class USQGraphNodeComponent*            Node                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQUndirectedGraph::AddNode(class USQGraphNodeComponent* Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQUndirectedGraph", "AddNode");

	Params::SQUndirectedGraph_AddNode Parms{};

	Parms.Node = Node;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQUndirectedGraph.ClearNodesAndLinks
// (Final, Native, Public, BlueprintCallable)

void ASQUndirectedGraph::ClearNodesAndLinks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQUndirectedGraph", "ClearNodesAndLinks");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQUndirectedGraph.GetLinks
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FSQGraphLink>             InOutLinks                                             (Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASQUndirectedGraph::GetLinks(TArray<struct FSQGraphLink>& InOutLinks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQUndirectedGraph", "GetLinks");

	Params::SQUndirectedGraph_GetLinks Parms{};

	Parms.InOutLinks = std::move(InOutLinks);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InOutLinks = std::move(Parms.InOutLinks);
}


// Function Squad.SQUndirectedGraph.OnRep_Nodes
// (Native, Public)

void ASQUndirectedGraph::OnRep_Nodes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQUndirectedGraph", "OnRep_Nodes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQUndirectedGraph.RemoveLink
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FSQGraphLink                     Link                                                   (Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQUndirectedGraph::RemoveLink(const struct FSQGraphLink& Link)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQUndirectedGraph", "RemoveLink");

	Params::SQUndirectedGraph_RemoveLink Parms{};

	Parms.Link = std::move(Link);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQUndirectedGraph.RemoveNode
// (Native, Public, BlueprintCallable)
// Parameters:
// class USQGraphNodeComponent*            Node                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQUndirectedGraph::RemoveNode(class USQGraphNodeComponent* Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQUndirectedGraph", "RemoveNode");

	Params::SQUndirectedGraph_RemoveNode Parms{};

	Parms.Node = Node;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQUndirectedGraph.GetNodes
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// TArray<class USQGraphNodeComponent*>    InOutNodes                                             (Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASQUndirectedGraph::GetNodes(TArray<class USQGraphNodeComponent*>& InOutNodes) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQUndirectedGraph", "GetNodes");

	Params::SQUndirectedGraph_GetNodes Parms{};

	Parms.InOutNodes = std::move(InOutNodes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InOutNodes = std::move(Parms.InOutNodes);
}


// Function Squad.SQBaseButton.InitWidget
// (Native, Public, BlueprintCallable)

void USQBaseButton::InitWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBaseButton", "InitWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBaseButton.UpdateActiveState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USQBaseButton::UpdateActiveState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBaseButton", "UpdateActiveState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRadialButton.OnHoverBegin
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USQRadialButton::OnHoverBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRadialButton", "OnHoverBegin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRadialButton.OnHoverEnd
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USQRadialButton::OnHoverEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRadialButton", "OnHoverEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRadialButton.UpdateRadialAngle
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   UpdatedAngle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQRadialButton::UpdateRadialAngle(float UpdatedAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRadialButton", "UpdateRadialAngle");

	Params::SQRadialButton_UpdateRadialAngle Parms{};

	Parms.UpdatedAngle = UpdatedAngle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRadialIconButton.UpdateIconImage
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USQRadialIconButton::UpdateIconImage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRadialIconButton", "UpdateIconImage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRadialIconButton.UpdateInnerHoverImage
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USQRadialIconButton::UpdateInnerHoverImage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRadialIconButton", "UpdateInnerHoverImage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRadialIconButton.UpdateOuterRimImage
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USQRadialIconButton::UpdateOuterRimImage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRadialIconButton", "UpdateOuterRimImage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAASGraph.AddSourceNode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USQGraphNodeComponent*            Node                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQAASGraph::AddSourceNode(class USQGraphNodeComponent* Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAASGraph", "AddSourceNode");

	Params::SQAASGraph_AddSourceNode Parms{};

	Parms.Node = Node;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAASGraph.PostNodeOwnerChanged
// (Final, Native, Public)
// Parameters:
// class USQCaptureZoneComponent*          CaptureZone                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   Team                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQAASGraph::PostNodeOwnerChanged(class USQCaptureZoneComponent* CaptureZone, uint8 Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAASGraph", "PostNodeOwnerChanged");

	Params::SQAASGraph_PostNodeOwnerChanged Parms{};

	Parms.CaptureZone = CaptureZone;
	Parms.Team = Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAASGraph.RemoveSourceNode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USQGraphNodeComponent*            Node                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQAASGraph::RemoveSourceNode(class USQGraphNodeComponent* Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAASGraph", "RemoveSourceNode");

	Params::SQAASGraph_RemoveSourceNode Parms{};

	Parms.Node = Node;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAASGraph.GetSourceNodes
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// TArray<class USQGraphNodeComponent*>    InOutNodes                                             (Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASQAASGraph::GetSourceNodes(TArray<class USQGraphNodeComponent*>& InOutNodes) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAASGraph", "GetSourceNodes");

	Params::SQAASGraph_GetSourceNodes Parms{};

	Parms.InOutNodes = std::move(InOutNodes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InOutNodes = std::move(Parms.InOutNodes);
}


// Function Squad.SQAASGraph.GetTeamSourceNodes
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// uint8                                   Team                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USQGraphNodeComponent*>    InOutNodes                                             (Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASQAASGraph::GetTeamSourceNodes(uint8 Team, TArray<class USQGraphNodeComponent*>& InOutNodes) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAASGraph", "GetTeamSourceNodes");

	Params::SQAASGraph_GetTeamSourceNodes Parms{};

	Parms.Team = Team;
	Parms.InOutNodes = std::move(InOutNodes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InOutNodes = std::move(Parms.InOutNodes);
}


// Function Squad.SQBaseHudWidget.InitWidget
// (Native, Public, BlueprintCallable)

void USQBaseHudWidget::InitWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBaseHudWidget", "InitWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBaseHudWidget.UpdateActiveState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USQBaseHudWidget::UpdateActiveState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBaseHudWidget", "UpdateActiveState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapLattice.DrawWidget
// (Native, Public, BlueprintCallable, Const)
// Parameters:
// struct FPaintContext                    Context                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)

void USQMapLattice::DrawWidget(const struct FPaintContext& Context) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapLattice", "DrawWidget");

	Params::SQMapLattice_DrawWidget Parms{};

	Parms.Context = std::move(Context);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapLattice.WorldLocationToDrawLocation
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQMapWidgetBase*                 MapWidget                                              (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector2D USQMapLattice::WorldLocationToDrawLocation(const struct FVector& Location, const class USQMapWidgetBase* MapWidget) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapLattice", "WorldLocationToDrawLocation");

	Params::SQMapLattice_WorldLocationToDrawLocation Parms{};

	Parms.Location = std::move(Location);
	Parms.MapWidget = MapWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRadialRoleIconButton.UpdateLimit
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USQRadialRoleIconButton::UpdateLimit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRadialRoleIconButton", "UpdateLimit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.BPRulesetDisabled
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)

void ASQGameRuleSet::BPRulesetDisabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "BPRulesetDisabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQGameRuleSet.BPRulesetEnabled
// (BlueprintAuthorityOnly, Event, Public, BlueprintEvent)

void ASQGameRuleSet::BPRulesetEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "BPRulesetEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQGameRuleSet.LogisticsDropOff
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           VehicleActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AmmoDroppedOff                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ConstructionDroppedOff                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameRuleSet::LogisticsDropOff(class AActor* VehicleActor, float AmmoDroppedOff, float ConstructionDroppedOff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "LogisticsDropOff");

	Params::SQGameRuleSet_LogisticsDropOff Parms{};

	Parms.VehicleActor = VehicleActor;
	Parms.AmmoDroppedOff = AmmoDroppedOff;
	Parms.ConstructionDroppedOff = ConstructionDroppedOff;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.MatchIsWaitingToStart
// (Native, Event, Public, BlueprintEvent)

void ASQGameRuleSet::MatchIsWaitingToStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "MatchIsWaitingToStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.MatchStarted
// (Native, Event, Public, BlueprintEvent)

void ASQGameRuleSet::MatchStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "MatchStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.ModifySoldierInventory
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASQSoldier*                       Soldier                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQSpawnInventoryReason                 Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameRuleSet::ModifySoldierInventory(class ASQSoldier* Soldier, ESQSpawnInventoryReason Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "ModifySoldierInventory");

	Params::SQGameRuleSet_ModifySoldierInventory Parms{};

	Parms.Soldier = Soldier;
	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.NotifyPlayer
// (Native, Public, BlueprintCallable)
// Parameters:
// class ASQPlayerController*              Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQNotificationTypes                    NotificationType                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           StreamerModeVariantMessage                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameRuleSet::NotifyPlayer(class ASQPlayerController* Player, const class FString& Message, ESQNotificationTypes NotificationType, const class FString& StreamerModeVariantMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "NotifyPlayer");

	Params::SQGameRuleSet_NotifyPlayer Parms{};

	Parms.Player = Player;
	Parms.Message = std::move(Message);
	Parms.NotificationType = NotificationType;
	Parms.StreamerModeVariantMessage = std::move(StreamerModeVariantMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.NotifyPlayerOnScoreEvent
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ASQPlayerController*              Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQScoreEvent                    ScoreEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ASQGameRuleSet::NotifyPlayerOnScoreEvent(class ASQPlayerController* Player, const struct FSQScoreEvent& ScoreEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "NotifyPlayerOnScoreEvent");

	Params::SQGameRuleSet_NotifyPlayerOnScoreEvent Parms{};

	Parms.Player = Player;
	Parms.ScoreEvent = std::move(ScoreEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.PlayerBandaged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASQPlayerController*              Bandager                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQPlayerController*              BandagedPlayer                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameRuleSet::PlayerBandaged(class ASQPlayerController* Bandager, class ASQPlayerController* BandagedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "PlayerBandaged");

	Params::SQGameRuleSet_PlayerBandaged Parms{};

	Parms.Bandager = Bandager;
	Parms.BandagedPlayer = BandagedPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.PlayerDied
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASQPlayerController*              Victim                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameRuleSet::PlayerDied(class ASQPlayerController* Victim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "PlayerDied");

	Params::SQGameRuleSet_PlayerDied Parms{};

	Parms.Victim = Victim;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.PlayerHealed
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASQPlayerController*              Healer                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQPlayerController*              HealedPlayer                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameRuleSet::PlayerHealed(class ASQPlayerController* Healer, class ASQPlayerController* HealedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "PlayerHealed");

	Params::SQGameRuleSet_PlayerHealed Parms{};

	Parms.Healer = Healer;
	Parms.HealedPlayer = HealedPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.PlayerJoined
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASQPlayerController*              NewPlayer                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameRuleSet::PlayerJoined(class ASQPlayerController* NewPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "PlayerJoined");

	Params::SQGameRuleSet_PlayerJoined Parms{};

	Parms.NewPlayer = NewPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.PlayerJoinedTeam
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASQPlayerController*              Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameRuleSet::PlayerJoinedTeam(class ASQPlayerController* Player, int32 TeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "PlayerJoinedTeam");

	Params::SQGameRuleSet_PlayerJoinedTeam Parms{};

	Parms.Player = Player;
	Parms.TeamIndex = TeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.PlayerKilled
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASQPlayerController*              Killer                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQPlayerController*              Victim                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameRuleSet::PlayerKilled(class ASQPlayerController* Killer, class ASQPlayerController* Victim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "PlayerKilled");

	Params::SQGameRuleSet_PlayerKilled Parms{};

	Parms.Killer = Killer;
	Parms.Victim = Victim;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.PlayerRevived
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASQPlayerController*              Reviver                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQPlayerController*              RevivedPlayer                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameRuleSet::PlayerRevived(class ASQPlayerController* Reviver, class ASQPlayerController* RevivedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "PlayerRevived");

	Params::SQGameRuleSet_PlayerRevived Parms{};

	Parms.Reviver = Reviver;
	Parms.RevivedPlayer = RevivedPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.PlayerSelfBandaged
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASQPlayerController*              Bandager                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameRuleSet::PlayerSelfBandaged(class ASQPlayerController* Bandager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "PlayerSelfBandaged");

	Params::SQGameRuleSet_PlayerSelfBandaged Parms{};

	Parms.Bandager = Bandager;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.PlayerSelfHealed
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASQPlayerController*              Healer                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameRuleSet::PlayerSelfHealed(class ASQPlayerController* Healer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "PlayerSelfHealed");

	Params::SQGameRuleSet_PlayerSelfHealed Parms{};

	Parms.Healer = Healer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.PlayerSelfWound
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASQPlayerController*              Victim                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameRuleSet::PlayerSelfWound(class ASQPlayerController* Victim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "PlayerSelfWound");

	Params::SQGameRuleSet_PlayerSelfWound Parms{};

	Parms.Victim = Victim;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.PlayerSpawned
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASQPlayerController*              NewPlayer                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameRuleSet::PlayerSpawned(class ASQPlayerController* NewPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "PlayerSpawned");

	Params::SQGameRuleSet_PlayerSpawned Parms{};

	Parms.NewPlayer = NewPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.PlayerSuicide
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASQPlayerController*              Victim                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameRuleSet::PlayerSuicide(class ASQPlayerController* Victim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "PlayerSuicide");

	Params::SQGameRuleSet_PlayerSuicide Parms{};

	Parms.Victim = Victim;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.PlayerTeamKilled
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASQPlayerController*              Killer                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQPlayerController*              Victim                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameRuleSet::PlayerTeamKilled(class ASQPlayerController* Killer, class ASQPlayerController* Victim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "PlayerTeamKilled");

	Params::SQGameRuleSet_PlayerTeamKilled Parms{};

	Parms.Killer = Killer;
	Parms.Victim = Victim;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.PlayerTeamWounded
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASQPlayerController*              Killer                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQPlayerController*              Victim                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameRuleSet::PlayerTeamWounded(class ASQPlayerController* Killer, class ASQPlayerController* Victim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "PlayerTeamWounded");

	Params::SQGameRuleSet_PlayerTeamWounded Parms{};

	Parms.Killer = Killer;
	Parms.Victim = Victim;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.PlayerWound
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASQPlayerController*              Victim                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameRuleSet::PlayerWound(class ASQPlayerController* Victim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "PlayerWound");

	Params::SQGameRuleSet_PlayerWound Parms{};

	Parms.Victim = Victim;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.PlayerWounded
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASQPlayerController*              Killer                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQPlayerController*              Victim                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameRuleSet::PlayerWounded(class ASQPlayerController* Killer, class ASQPlayerController* Victim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "PlayerWounded");

	Params::SQGameRuleSet_PlayerWounded Parms{};

	Parms.Killer = Killer;
	Parms.Victim = Victim;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.PostPlayerLogin
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class APlayerController*                Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameRuleSet::PostPlayerLogin(class APlayerController* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "PostPlayerLogin");

	Params::SQGameRuleSet_PostPlayerLogin Parms{};

	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.PostPlayerLogout
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameRuleSet::PostPlayerLogout(class AController* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "PostPlayerLogout");

	Params::SQGameRuleSet_PostPlayerLogout Parms{};

	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.PostPlayerSpawn
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASQSoldier*                       SpawningSoldier                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameRuleSet::PostPlayerSpawn(class ASQSoldier* SpawningSoldier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "PostPlayerSpawn");

	Params::SQGameRuleSet_PostPlayerSpawn Parms{};

	Parms.SpawningSoldier = SpawningSoldier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.RegisterActor
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameRuleSet::RegisterActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "RegisterActor");

	Params::SQGameRuleSet_RegisterActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.SecondPassed
// (Native, Event, Public, BlueprintEvent)

void ASQGameRuleSet::SecondPassed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "SecondPassed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.SendChatMessage
// (Native, Public, BlueprintCallable)
// Parameters:
// ESQChat                                 ChatType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQTeam                                 Team                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Squad                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBroadcastToAdmin                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           StreamerModeVariantMessage                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameRuleSet::SendChatMessage(ESQChat ChatType, const class FString& Message, ESQTeam Team, int32 Squad, bool bBroadcastToAdmin, const class FString& StreamerModeVariantMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "SendChatMessage");

	Params::SQGameRuleSet_SendChatMessage Parms{};

	Parms.ChatType = ChatType;
	Parms.Message = std::move(Message);
	Parms.Team = Team;
	Parms.Squad = Squad;
	Parms.bBroadcastToAdmin = bBroadcastToAdmin;
	Parms.StreamerModeVariantMessage = std::move(StreamerModeVariantMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.SetRoundTimeOverride
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InRoundTimeOverride                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameRuleSet::SetRoundTimeOverride(int32 InRoundTimeOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "SetRoundTimeOverride");

	Params::SQGameRuleSet_SetRoundTimeOverride Parms{};

	Parms.InRoundTimeOverride = InRoundTimeOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.SetRulesetEnabled
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameRuleSet::SetRulesetEnabled(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "SetRulesetEnabled");

	Params::SQGameRuleSet_SetRulesetEnabled Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.UnregisterActor
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameRuleSet::UnregisterActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "UnregisterActor");

	Params::SQGameRuleSet_UnregisterActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.VehicleDestroyed
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASQPlayerController*              Killer                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQPlayerController*              Victim                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQVehicle*                       DestroyedVehicle                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameRuleSet::VehicleDestroyed(class ASQPlayerController* Killer, class ASQPlayerController* Victim, class ASQVehicle* DestroyedVehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "VehicleDestroyed");

	Params::SQGameRuleSet_VehicleDestroyed Parms{};

	Parms.Killer = Killer;
	Parms.Victim = Victim;
	Parms.DestroyedVehicle = DestroyedVehicle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameRuleSet.GetDisplayName
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ASQGameRuleSet::GetDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "GetDisplayName");

	Params::SQGameRuleSet_GetDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameRuleSet.GetGameMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQGameMode*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQGameMode* ASQGameRuleSet::GetGameMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "GetGameMode");

	Params::SQGameRuleSet_GetGameMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameRuleSet.GetRoundTimeOverride
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQGameRuleSet::GetRoundTimeOverride() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "GetRoundTimeOverride");

	Params::SQGameRuleSet_GetRoundTimeOverride Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameRuleSet.GetRoundTimeRemaining
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQGameRuleSet::GetRoundTimeRemaining() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "GetRoundTimeRemaining");

	Params::SQGameRuleSet_GetRoundTimeRemaining Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameRuleSet.GetRulesetEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQGameRuleSet::GetRulesetEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "GetRulesetEnabled");

	Params::SQGameRuleSet_GetRulesetEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameRuleSet.ReadyToEndMatch
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// ESQReadyToEndMatch                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESQReadyToEndMatch ASQGameRuleSet::ReadyToEndMatch() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRuleSet", "ReadyToEndMatch");

	Params::SQGameRuleSet_ReadyToEndMatch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQReplayObject.DeleteReplay
// (Final, Native, Public, BlueprintCallable)

void USQReplayObject::DeleteReplay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQReplayObject", "DeleteReplay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQReplayObject.PlayReplay
// (Final, Native, Public, BlueprintCallable)

void USQReplayObject::PlayReplay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQReplayObject", "PlayReplay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQReplayObject.SetupReplayObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReplayFullPath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCreateAsNamedReplay                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQReplayObject::SetupReplayObject(const class FString& ReplayFullPath, bool bCreateAsNamedReplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQReplayObject", "SetupReplayObject");

	Params::SQReplayObject_SetupReplayObject Parms{};

	Parms.ReplayFullPath = std::move(ReplayFullPath);
	Parms.bCreateAsNamedReplay = bCreateAsNamedReplay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQReplayObject.TryRenameReplay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           NewName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQRenameReplayResponse                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESQRenameReplayResponse USQReplayObject::TryRenameReplay(const class FString& NewName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQReplayObject", "TryRenameReplay");

	Params::SQReplayObject_TryRenameReplay Parms{};

	Parms.NewName = std::move(NewName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPawnMovementComponent.GetMovementBase
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPrimitiveComponent*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPrimitiveComponent* USQPawnMovementComponent::GetMovementBase() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnMovementComponent", "GetMovementBase");

	Params::SQPawnMovementComponent_GetMovementBase Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameModeRuleset.SendMessageToPlayer
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class ASQPlayerController*              Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MessageLifetime                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameModeRuleset::SendMessageToPlayer(class ASQPlayerController* Player, const class FString& Message, const struct FLinearColor& Color, float MessageLifetime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameModeRuleset", "SendMessageToPlayer");

	Params::SQGameModeRuleset_SendMessageToPlayer Parms{};

	Parms.Player = Player;
	Parms.Message = std::move(Message);
	Parms.Color = std::move(Color);
	Parms.MessageLifetime = MessageLifetime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameModeRuleset.SetWinningTeam
// (Native, Public, BlueprintCallable, Const)
// Parameters:
// class ASQTeam*                          Team                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameModeRuleset::SetWinningTeam(class ASQTeam* Team) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameModeRuleset", "SetWinningTeam");

	Params::SQGameModeRuleset_SetWinningTeam Parms{};

	Parms.Team = Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameModeRuleset.SetWinningTeamFromEnum
// (Native, Public, BlueprintCallable, Const)
// Parameters:
// ESQTeam                                 Team                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameModeRuleset::SetWinningTeamFromEnum(ESQTeam Team) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameModeRuleset", "SetWinningTeamFromEnum");

	Params::SQGameModeRuleset_SetWinningTeamFromEnum Parms{};

	Parms.Team = Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQNetMoveComponent.OnRep_LatestPackedMove
// (Native, Public)

void USQNetMoveComponent::OnRep_LatestPackedMove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQNetMoveComponent", "OnRep_LatestPackedMove");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQNetMoveComponent.SendClientCorrection
// (Net, NetReliable, Native, Event, Protected, NetClient, NetValidate)
// Parameters:
// TArray<uint8>                           PackedMove                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USQNetMoveComponent::SendClientCorrection(const TArray<uint8>& PackedMove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQNetMoveComponent", "SendClientCorrection");

	Params::SQNetMoveComponent_SendClientCorrection Parms{};

	Parms.PackedMove = std::move(PackedMove);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQNetMoveComponent.SendPackedMoveRPC
// (Net, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// TArray<uint8>                           PackedMove                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USQNetMoveComponent::SendPackedMoveRPC(const TArray<uint8>& PackedMove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQNetMoveComponent", "SendPackedMoveRPC");

	Params::SQNetMoveComponent_SendPackedMoveRPC Parms{};

	Parms.PackedMove = std::move(PackedMove);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAASRuleset.LatticeUpdated
// (Native, Event, Public, BlueprintEvent)

void ASQAASRuleset::LatticeUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAASRuleset", "LatticeUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRearmSource.BindEventToAmmoUpdated
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TDelegate<void()>                       Delegate                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ISQRearmSource::BindEventToAmmoUpdated(const TDelegate<void()>& Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRearmSource", "BindEventToAmmoUpdated");

	Params::SQRearmSource_BindEventToAmmoUpdated Parms{};

	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRearmSource.ConsumeAmmo
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AmmoRequired                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ISQRearmSource::ConsumeAmmo(float AmmoRequired)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRearmSource", "ConsumeAmmo");

	Params::SQRearmSource_ConsumeAmmo Parms{};

	Parms.AmmoRequired = AmmoRequired;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRearmSource.GetRearmNoAmmoString
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ISQRearmSource::GetRearmNoAmmoString()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRearmSource", "GetRearmNoAmmoString");

	Params::SQRearmSource_GetRearmNoAmmoString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRearmSource.GetRearmSuccessString
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ISQRearmSource::GetRearmSuccessString()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRearmSource", "GetRearmSuccessString");

	Params::SQRearmSource_GetRearmSuccessString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRearmSource.UnbindEventToAmmoUpdated
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TDelegate<void()>                       Delegate                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ISQRearmSource::UnbindEventToAmmoUpdated(const TDelegate<void()>& Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRearmSource", "UnbindEventToAmmoUpdated");

	Params::SQRearmSource_UnbindEventToAmmoUpdated Parms{};

	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRearmSource.CanRearmPawn
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class APawn*                            Rearmer                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ISQRearmSource::CanRearmPawn(const class APawn* Rearmer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRearmSource", "CanRearmPawn");

	Params::SQRearmSource_CanRearmPawn Parms{};

	Parms.Rearmer = Rearmer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRearmSource.CanRearmWeapon
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQEquipableItem*                 Weapon                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ISQRearmSource::CanRearmWeapon(const class ASQEquipableItem* Weapon) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRearmSource", "CanRearmWeapon");

	Params::SQRearmSource_CanRearmWeapon Parms{};

	Parms.Weapon = Weapon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRearmSource.GetAmmo
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ISQRearmSource::GetAmmo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRearmSource", "GetAmmo");

	Params::SQRearmSource_GetAmmo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRearmSource.GetRearmType
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// ESQRearmType                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESQRearmType ISQRearmSource::GetRearmType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRearmSource", "GetRearmType");

	Params::SQRearmSource_GetRearmType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRadialDeployableButton.UpdateDetailText
// (Final, Native, Public, BlueprintCallable)

void USQRadialDeployableButton::UpdateDetailText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRadialDeployableButton", "UpdateDetailText");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRadialDeployableButton.GetDetailText
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FText                             DetailText                                             (Parm, OutParm, NativeAccessSpecifierPublic)

void USQRadialDeployableButton::GetDetailText(class FText* DetailText) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRadialDeployableButton", "GetDetailText");

	Params::SQRadialDeployableButton_GetDetailText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DetailText != nullptr)
		*DetailText = std::move(Parms.DetailText);
}


// Function Squad.SQRadialDeployableButton.IsAvailable
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRadialDeployableButton::IsAvailable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRadialDeployableButton", "IsAvailable");

	Params::SQRadialDeployableButton_IsAvailable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.ActivateReverbEffectFixed
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UReverbEffect*                    ReverbEffect                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             TagName                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Priority                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Volume                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FadeTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::ActivateReverbEffectFixed(class UObject* WorldContextObject, class UReverbEffect* ReverbEffect, const class FName& TagName, float Priority, float Volume, float FadeTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "ActivateReverbEffectFixed");

	Params::SQBlueprintLibrary_ActivateReverbEffectFixed Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ReverbEffect = ReverbEffect;
	Parms.TagName = TagName;
	Parms.Priority = Priority;
	Parms.Volume = Volume;
	Parms.FadeTime = FadeTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlueprintLibrary.AdjustPositionForTextAlignment
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D                        OriginalRenderPosition                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        TextSize                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQTextHorizontalAlignment              HorizontalAlignment                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQTextVerticalAlignment                VerticalAlignment                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D USQBlueprintLibrary::AdjustPositionForTextAlignment(const struct FVector2D& OriginalRenderPosition, const struct FVector2D& TextSize, ESQTextHorizontalAlignment HorizontalAlignment, ESQTextVerticalAlignment VerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "AdjustPositionForTextAlignment");

	Params::SQBlueprintLibrary_AdjustPositionForTextAlignment Parms{};

	Parms.OriginalRenderPosition = std::move(OriginalRenderPosition);
	Parms.TextSize = std::move(TextSize);
	Parms.HorizontalAlignment = HorizontalAlignment;
	Parms.VerticalAlignment = VerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.ApplyAcceleration
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   TimeToMid                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Midpoint                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Velocity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Acceleration                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewPosition                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewVelocity                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TimeLeft                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::ApplyAcceleration(float TimeToMid, float Midpoint, float Position, float Velocity, float Acceleration, float DeltaTime, float* NewPosition, float* NewVelocity, float* TimeLeft)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "ApplyAcceleration");

	Params::SQBlueprintLibrary_ApplyAcceleration Parms{};

	Parms.TimeToMid = TimeToMid;
	Parms.Midpoint = Midpoint;
	Parms.Position = Position;
	Parms.Velocity = Velocity;
	Parms.Acceleration = Acceleration;
	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NewPosition != nullptr)
		*NewPosition = Parms.NewPosition;

	if (NewVelocity != nullptr)
		*NewVelocity = Parms.NewVelocity;

	if (TimeLeft != nullptr)
		*TimeLeft = Parms.TimeLeft;
}


// Function Squad.SQBlueprintLibrary.ApplyDeceleration
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Velocity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Acceleration                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TimeLeft                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewPosition                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewVelocity                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::ApplyDeceleration(float Position, float Velocity, float Acceleration, float TimeLeft, float* NewPosition, float* NewVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "ApplyDeceleration");

	Params::SQBlueprintLibrary_ApplyDeceleration Parms{};

	Parms.Position = Position;
	Parms.Velocity = Velocity;
	Parms.Acceleration = Acceleration;
	Parms.TimeLeft = TimeLeft;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NewPosition != nullptr)
		*NewPosition = Parms.NewPosition;

	if (NewVelocity != nullptr)
		*NewVelocity = Parms.NewVelocity;
}


// Function Squad.SQBlueprintLibrary.ApplyGlobalTimeDilationOnDateTime
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime                        InTime                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FDateTime USQBlueprintLibrary::ApplyGlobalTimeDilationOnDateTime(const class UObject* WorldContextObject, const struct FDateTime& InTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "ApplyGlobalTimeDilationOnDateTime");

	Params::SQBlueprintLibrary_ApplyGlobalTimeDilationOnDateTime Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InTime = std::move(InTime);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.ApplyGlobalTimeDilationOnTimeSpan
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan                        InDelay                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTimespan USQBlueprintLibrary::ApplyGlobalTimeDilationOnTimeSpan(const class UObject* WorldContextObject, const struct FTimespan& InDelay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "ApplyGlobalTimeDilationOnTimeSpan");

	Params::SQBlueprintLibrary_ApplyGlobalTimeDilationOnTimeSpan Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InDelay = std::move(InDelay);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.ApplyHitResultRadialDamageWithFalloff
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   BaseDamage                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinimumDamage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Origin                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   KillZoneRadius                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DamageInnerRadius                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DamageOuterRadius                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DamageFalloff                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageType>          DamageTypeClass                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   IgnoreActors                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedByController                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOnlyDamageMeshes                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       DamagePreventionChannel                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::ApplyHitResultRadialDamageWithFalloff(const class UObject* WorldContextObject, const struct FHitResult& HitResult, float BaseDamage, float MinimumDamage, const struct FVector& Origin, float KillZoneRadius, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, TSubclassOf<class UDamageType> DamageTypeClass, const TArray<class AActor*>& IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, bool bOnlyDamageMeshes, ECollisionChannel DamagePreventionChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "ApplyHitResultRadialDamageWithFalloff");

	Params::SQBlueprintLibrary_ApplyHitResultRadialDamageWithFalloff Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.HitResult = std::move(HitResult);
	Parms.BaseDamage = BaseDamage;
	Parms.MinimumDamage = MinimumDamage;
	Parms.Origin = std::move(Origin);
	Parms.KillZoneRadius = KillZoneRadius;
	Parms.DamageInnerRadius = DamageInnerRadius;
	Parms.DamageOuterRadius = DamageOuterRadius;
	Parms.DamageFalloff = DamageFalloff;
	Parms.DamageTypeClass = DamageTypeClass;
	Parms.IgnoreActors = std::move(IgnoreActors);
	Parms.DamageCauser = DamageCauser;
	Parms.InstigatedByController = InstigatedByController;
	Parms.bOnlyDamageMeshes = bOnlyDamageMeshes;
	Parms.DamagePreventionChannel = DamagePreventionChannel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.ApplyOppositeAcceleration
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Velocity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OppositeAcceleration                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewPosition                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewVelocity                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TimeLeft                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::ApplyOppositeAcceleration(float Target, float Position, float Velocity, float OppositeAcceleration, float DeltaTime, float* NewPosition, float* NewVelocity, float* TimeLeft)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "ApplyOppositeAcceleration");

	Params::SQBlueprintLibrary_ApplyOppositeAcceleration Parms{};

	Parms.Target = Target;
	Parms.Position = Position;
	Parms.Velocity = Velocity;
	Parms.OppositeAcceleration = OppositeAcceleration;
	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NewPosition != nullptr)
		*NewPosition = Parms.NewPosition;

	if (NewVelocity != nullptr)
		*NewVelocity = Parms.NewVelocity;

	if (TimeLeft != nullptr)
		*TimeLeft = Parms.TimeLeft;
}


// Function Squad.SQBlueprintLibrary.ApplyRadialDamageWithFalloff
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BaseDamage                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinimumDamage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Origin                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   KillZoneRadius                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DamageInnerRadius                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DamageOuterRadius                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DamageFalloff                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageType>          DamageTypeClass                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   IgnoreActors                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatedByController                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOnlyDamageMeshes                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       DamagePreventionChannel                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::ApplyRadialDamageWithFalloff(const class UObject* WorldContextObject, float BaseDamage, float MinimumDamage, const struct FVector& Origin, float KillZoneRadius, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, TSubclassOf<class UDamageType> DamageTypeClass, const TArray<class AActor*>& IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, bool bOnlyDamageMeshes, ECollisionChannel DamagePreventionChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "ApplyRadialDamageWithFalloff");

	Params::SQBlueprintLibrary_ApplyRadialDamageWithFalloff Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.BaseDamage = BaseDamage;
	Parms.MinimumDamage = MinimumDamage;
	Parms.Origin = std::move(Origin);
	Parms.KillZoneRadius = KillZoneRadius;
	Parms.DamageInnerRadius = DamageInnerRadius;
	Parms.DamageOuterRadius = DamageOuterRadius;
	Parms.DamageFalloff = DamageFalloff;
	Parms.DamageTypeClass = DamageTypeClass;
	Parms.IgnoreActors = std::move(IgnoreActors);
	Parms.DamageCauser = DamageCauser;
	Parms.InstigatedByController = InstigatedByController;
	Parms.bOnlyDamageMeshes = bOnlyDamageMeshes;
	Parms.DamagePreventionChannel = DamagePreventionChannel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.ApplyTimeDilationFactorOnDateTime
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime                        InTime                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InTimeDilationFactor                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FDateTime USQBlueprintLibrary::ApplyTimeDilationFactorOnDateTime(const struct FDateTime& InTime, float InTimeDilationFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "ApplyTimeDilationFactorOnDateTime");

	Params::SQBlueprintLibrary_ApplyTimeDilationFactorOnDateTime Parms{};

	Parms.InTime = std::move(InTime);
	Parms.InTimeDilationFactor = InTimeDilationFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.ApplyTimeDilationFactorOnTimeSpan
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTimespan                        InDelay                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InTimeDilationFactor                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTimespan USQBlueprintLibrary::ApplyTimeDilationFactorOnTimeSpan(const struct FTimespan& InDelay, float InTimeDilationFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "ApplyTimeDilationFactorOnTimeSpan");

	Params::SQBlueprintLibrary_ApplyTimeDilationFactorOnTimeSpan Parms{};

	Parms.InDelay = std::move(InDelay);
	Parms.InTimeDilationFactor = InTimeDilationFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.AssembleSoldierAudioParameters
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ASQSoldier*                       Soldier                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSetSpeedParameter                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSetFloorPhysMatParameter                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSetWaterDepthParameter                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAudioComponentParam>     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FAudioComponentParam> USQBlueprintLibrary::AssembleSoldierAudioParameters(const class ASQSoldier* Soldier, bool bSetSpeedParameter, bool bSetFloorPhysMatParameter, bool bSetWaterDepthParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "AssembleSoldierAudioParameters");

	Params::SQBlueprintLibrary_AssembleSoldierAudioParameters Parms{};

	Parms.Soldier = Soldier;
	Parms.bSetSpeedParameter = bSetSpeedParameter;
	Parms.bSetFloorPhysMatParameter = bSetFloorPhysMatParameter;
	Parms.bSetWaterDepthParameter = bSetWaterDepthParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.AsyncLoadClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSoftClassPtr<class UClass>             Param_Class                                            (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(TSoftClassPtr<class UClass> Class)>OnLoad                                                 (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::AsyncLoadClass(TSoftClassPtr<class UClass> Param_Class, TDelegate<void(TSoftClassPtr<class UClass> Class)> OnLoad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "AsyncLoadClass");

	Params::SQBlueprintLibrary_AsyncLoadClass Parms{};

	Parms.Param_Class = Param_Class;
	Parms.OnLoad = OnLoad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlueprintLibrary.AsyncLoadClasses
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<TSoftClassPtr<class UClass>>     Classes                                                (Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
// TDelegate<void(TArray<TSoftClassPtr<class UClass>>& Classes)>OnLoad                                                 (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::AsyncLoadClasses(const TArray<TSoftClassPtr<class UClass>>& Classes, TDelegate<void(TArray<TSoftClassPtr<class UClass>>& Classes)> OnLoad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "AsyncLoadClasses");

	Params::SQBlueprintLibrary_AsyncLoadClasses Parms{};

	Parms.Classes = std::move(Classes);
	Parms.OnLoad = OnLoad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlueprintLibrary.BreakFullHitResult
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Normal                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ImpactPoint                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ImpactNormal                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TraceStart                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TraceEnd                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBlockingHit                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bStartPenetrating                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PenetrationDepth                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Time                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPhysicalMaterial*                PhysMat                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           HitActor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              HitComponent                                           (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             HitBoneName                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HitItem                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HitFaceIndex                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::BreakFullHitResult(const struct FHitResult& Hit, struct FVector* Location, struct FVector* Normal, struct FVector* ImpactPoint, struct FVector* ImpactNormal, struct FVector* TraceStart, struct FVector* TraceEnd, bool* bBlockingHit, bool* bStartPenetrating, float* PenetrationDepth, float* Time, class UPhysicalMaterial** PhysMat, class AActor** HitActor, class UPrimitiveComponent** HitComponent, class FName* HitBoneName, int32* HitItem, int32* HitFaceIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "BreakFullHitResult");

	Params::SQBlueprintLibrary_BreakFullHitResult Parms{};

	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Normal != nullptr)
		*Normal = std::move(Parms.Normal);

	if (ImpactPoint != nullptr)
		*ImpactPoint = std::move(Parms.ImpactPoint);

	if (ImpactNormal != nullptr)
		*ImpactNormal = std::move(Parms.ImpactNormal);

	if (TraceStart != nullptr)
		*TraceStart = std::move(Parms.TraceStart);

	if (TraceEnd != nullptr)
		*TraceEnd = std::move(Parms.TraceEnd);

	if (bBlockingHit != nullptr)
		*bBlockingHit = Parms.bBlockingHit;

	if (bStartPenetrating != nullptr)
		*bStartPenetrating = Parms.bStartPenetrating;

	if (PenetrationDepth != nullptr)
		*PenetrationDepth = Parms.PenetrationDepth;

	if (Time != nullptr)
		*Time = Parms.Time;

	if (PhysMat != nullptr)
		*PhysMat = Parms.PhysMat;

	if (HitActor != nullptr)
		*HitActor = Parms.HitActor;

	if (HitComponent != nullptr)
		*HitComponent = Parms.HitComponent;

	if (HitBoneName != nullptr)
		*HitBoneName = Parms.HitBoneName;

	if (HitItem != nullptr)
		*HitItem = Parms.HitItem;

	if (HitFaceIndex != nullptr)
		*HitFaceIndex = Parms.HitFaceIndex;
}


// Function Squad.SQBlueprintLibrary.BreakInputActionKeyMapping
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FInputActionKeyMapping           KeyMapping                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             ActionName                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKey                             Key                                                    (Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShift                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCtrl                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAlt                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCmd                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::BreakInputActionKeyMapping(const struct FInputActionKeyMapping& KeyMapping, class FName* ActionName, struct FKey* Key, bool* bShift, bool* bCtrl, bool* bAlt, bool* bCmd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "BreakInputActionKeyMapping");

	Params::SQBlueprintLibrary_BreakInputActionKeyMapping Parms{};

	Parms.KeyMapping = std::move(KeyMapping);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ActionName != nullptr)
		*ActionName = Parms.ActionName;

	if (Key != nullptr)
		*Key = std::move(Parms.Key);

	if (bShift != nullptr)
		*bShift = Parms.bShift;

	if (bCtrl != nullptr)
		*bCtrl = Parms.bCtrl;

	if (bAlt != nullptr)
		*bAlt = Parms.bAlt;

	if (bCmd != nullptr)
		*bCmd = Parms.bCmd;
}


// Function Squad.SQBlueprintLibrary.BreakInputAxisKeyMapping
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FInputAxisKeyMapping             KeyMapping                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             ActionName                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKey                             Key                                                    (Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::BreakInputAxisKeyMapping(const struct FInputAxisKeyMapping& KeyMapping, class FName* ActionName, struct FKey* Key, float* Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "BreakInputAxisKeyMapping");

	Params::SQBlueprintLibrary_BreakInputAxisKeyMapping Parms{};

	Parms.KeyMapping = std::move(KeyMapping);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ActionName != nullptr)
		*ActionName = Parms.ActionName;

	if (Key != nullptr)
		*Key = std::move(Parms.Key);

	if (Scale != nullptr)
		*Scale = Parms.Scale;
}


// Function Squad.SQBlueprintLibrary.CalcMidpoint
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Velocity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Acceleration                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Midpoint                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::CalcMidpoint(float Target, float Position, float Velocity, float Acceleration, float* Midpoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "CalcMidpoint");

	Params::SQBlueprintLibrary_CalcMidpoint Parms{};

	Parms.Target = Target;
	Parms.Position = Position;
	Parms.Velocity = Velocity;
	Parms.Acceleration = Acceleration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Midpoint != nullptr)
		*Midpoint = Parms.Midpoint;
}


// Function Squad.SQBlueprintLibrary.CalcTimeToMid
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   Midpoint                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Velocity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Acceleration                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TimeToMid                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::CalcTimeToMid(float Midpoint, float Position, float Velocity, float Acceleration, float* TimeToMid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "CalcTimeToMid");

	Params::SQBlueprintLibrary_CalcTimeToMid Parms{};

	Parms.Midpoint = Midpoint;
	Parms.Position = Position;
	Parms.Velocity = Velocity;
	Parms.Acceleration = Acceleration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TimeToMid != nullptr)
		*TimeToMid = Parms.TimeToMid;
}


// Function Squad.SQBlueprintLibrary.CalculateAmmoCostToSwapRole
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USQRoleSettings*                  NewRole                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQBlueprintLibrary::CalculateAmmoCostToSwapRole(const class USQRoleSettings* NewRole)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "CalculateAmmoCostToSwapRole");

	Params::SQBlueprintLibrary_CalculateAmmoCostToSwapRole Parms{};

	Parms.NewRole = NewRole;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.CaptureComponent2D_DeProject
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class USceneCaptureComponent2D*         Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ScreenPos                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutWorldOrigin                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutWorldDirection                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::CaptureComponent2D_DeProject(class USceneCaptureComponent2D* Target, const struct FVector2D& ScreenPos, struct FVector* OutWorldOrigin, struct FVector* OutWorldDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "CaptureComponent2D_DeProject");

	Params::SQBlueprintLibrary_CaptureComponent2D_DeProject Parms{};

	Parms.Target = Target;
	Parms.ScreenPos = std::move(ScreenPos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutWorldOrigin != nullptr)
		*OutWorldOrigin = std::move(Parms.OutWorldOrigin);

	if (OutWorldDirection != nullptr)
		*OutWorldDirection = std::move(Parms.OutWorldDirection);
}


// Function Squad.SQBlueprintLibrary.CaptureComponent2D_Project
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class USceneCaptureComponent2D*         Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        OutPixelLocation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::CaptureComponent2D_Project(class USceneCaptureComponent2D* Target, const struct FVector& Location, struct FVector2D* OutPixelLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "CaptureComponent2D_Project");

	Params::SQBlueprintLibrary_CaptureComponent2D_Project Parms{};

	Parms.Target = Target;
	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPixelLocation != nullptr)
		*OutPixelLocation = std::move(Parms.OutPixelLocation);

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.CenterMousePosition
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::CenterMousePosition(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "CenterMousePosition");

	Params::SQBlueprintLibrary_CenterMousePosition Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlueprintLibrary.ClampDelta
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   InDelta                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Current                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Min                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Max                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQBlueprintLibrary::ClampDelta(float InDelta, float Current, float Min, float Max)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "ClampDelta");

	Params::SQBlueprintLibrary_ClampDelta Parms{};

	Parms.InDelta = InDelta;
	Parms.Current = Current;
	Parms.Min = Min;
	Parms.Max = Max;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.ClampDeltaAngle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   InDeltaAngle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurrentAngle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinAngle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxAngle                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQBlueprintLibrary::ClampDeltaAngle(float InDeltaAngle, float CurrentAngle, float MinAngle, float MaxAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "ClampDeltaAngle");

	Params::SQBlueprintLibrary_ClampDeltaAngle Parms{};

	Parms.InDeltaAngle = InDeltaAngle;
	Parms.CurrentAngle = CurrentAngle;
	Parms.MinAngle = MinAngle;
	Parms.MaxAngle = MaxAngle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.ClampVector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Vector                                                 (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Min                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Max                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::ClampVector(struct FVector& Vector, const struct FVector& Min, const struct FVector& Max)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "ClampVector");

	Params::SQBlueprintLibrary_ClampVector Parms{};

	Parms.Vector = std::move(Vector);
	Parms.Min = std::move(Min);
	Parms.Max = std::move(Max);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Vector = std::move(Parms.Vector);
}


// Function Squad.SQBlueprintLibrary.ClassIsChildOfSoft
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class UObject>              TestClass                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             SoftParentClass                                        (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::ClassIsChildOfSoft(const TSubclassOf<class UObject> TestClass, const TSoftClassPtr<class UClass> SoftParentClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "ClassIsChildOfSoft");

	Params::SQBlueprintLibrary_ClassIsChildOfSoft Parms{};

	Parms.TestClass = TestClass;
	Parms.SoftParentClass = SoftParentClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.ClosestPointOnLine
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          LineStart                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          LineEnd                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Point                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USQBlueprintLibrary::ClosestPointOnLine(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FVector& Point)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "ClosestPointOnLine");

	Params::SQBlueprintLibrary_ClosestPointOnLine Parms{};

	Parms.LineStart = std::move(LineStart);
	Parms.LineEnd = std::move(LineEnd);
	Parms.Point = std::move(Point);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.ComponentIsDamageableFrom
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              VictimComp                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Origin                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           IgnoredActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   IgnoreActors                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FHitResult                       OutHitResult                                           (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::ComponentIsDamageableFrom(class UPrimitiveComponent* VictimComp, const struct FVector& Origin, class AActor* IgnoredActor, const TArray<class AActor*>& IgnoreActors, struct FHitResult* OutHitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "ComponentIsDamageableFrom");

	Params::SQBlueprintLibrary_ComponentIsDamageableFrom Parms{};

	Parms.VictimComp = VictimComp;
	Parms.Origin = std::move(Origin);
	Parms.IgnoredActor = IgnoredActor;
	Parms.IgnoreActors = std::move(IgnoreActors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHitResult != nullptr)
		*OutHitResult = std::move(Parms.OutHitResult);

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.ConvertByteTo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQByteUnit                             From                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQByteUnit                             To                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Remaining                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQBlueprintLibrary::ConvertByteTo(int32 A, ESQByteUnit From, ESQByteUnit To, int32* Remaining)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "ConvertByteTo");

	Params::SQBlueprintLibrary_ConvertByteTo Parms{};

	Parms.A = A;
	Parms.From = From;
	Parms.To = To;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Remaining != nullptr)
		*Remaining = Parms.Remaining;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.ConvertByteTo_I64
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int64                                   A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQByteUnit                             From                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQByteUnit                             To                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   Remaining                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 USQBlueprintLibrary::ConvertByteTo_I64(int64 A, ESQByteUnit From, ESQByteUnit To, int64* Remaining)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "ConvertByteTo_I64");

	Params::SQBlueprintLibrary_ConvertByteTo_I64 Parms{};

	Parms.A = A;
	Parms.From = From;
	Parms.To = To;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Remaining != nullptr)
		*Remaining = Parms.Remaining;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.ConvertNumberToGridLetter
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           OutResult                                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::ConvertNumberToGridLetter(class FString* OutResult, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "ConvertNumberToGridLetter");

	Params::SQBlueprintLibrary_ConvertNumberToGridLetter Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutResult != nullptr)
		*OutResult = std::move(Parms.OutResult);
}


// Function Squad.SQBlueprintLibrary.CreateRenderTargetCube
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPixelFormat                            Format                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ClearColor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHDR                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForceLinearGamma                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureRenderTargetCube*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTargetCube* USQBlueprintLibrary::CreateRenderTargetCube(class UObject* WorldContextObject, int32 Size, EPixelFormat Format, const struct FLinearColor& ClearColor, bool bHDR, bool bForceLinearGamma)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "CreateRenderTargetCube");

	Params::SQBlueprintLibrary_CreateRenderTargetCube Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Size = Size;
	Parms.Format = Format;
	Parms.ClearColor = std::move(ClearColor);
	Parms.bHDR = bHDR;
	Parms.bForceLinearGamma = bForceLinearGamma;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.DoesCustomServerSettingExist
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::DoesCustomServerSettingExist(const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "DoesCustomServerSettingExist");

	Params::SQBlueprintLibrary_DoesCustomServerSettingExist Parms{};

	Parms.PropertyName = std::move(PropertyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.DoesStringContainDeveloperString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           InString                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::DoesStringContainDeveloperString(const class FString& InString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "DoesStringContainDeveloperString");

	Params::SQBlueprintLibrary_DoesStringContainDeveloperString Parms{};

	Parms.InString = std::move(InString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.DrawCircle
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Direction                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumSides                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   DepthPriority                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Lifetime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Thickness                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::DrawCircle(const class UObject* WorldContextObject, const struct FVector& Location, const struct FVector& Direction, float Radius, int32 NumSides, const struct FColor& Color, uint8 DepthPriority, float Lifetime, float Thickness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "DrawCircle");

	Params::SQBlueprintLibrary_DrawCircle Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Location = std::move(Location);
	Parms.Direction = std::move(Direction);
	Parms.Radius = Radius;
	Parms.NumSides = NumSides;
	Parms.Color = std::move(Color);
	Parms.DepthPriority = DepthPriority;
	Parms.Lifetime = Lifetime;
	Parms.Thickness = Thickness;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlueprintLibrary.DrawTextFormattedWithFontInfo
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FPaintContext                    Context                                                (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FText                             Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector2D                        Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSlateFontInfo                   FontInfo                                               (Parm, OutParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Tint                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::DrawTextFormattedWithFontInfo(struct FPaintContext& Context, const class FText& Text, const struct FVector2D& Position, struct FSlateFontInfo* FontInfo, const struct FLinearColor& Tint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "DrawTextFormattedWithFontInfo");

	Params::SQBlueprintLibrary_DrawTextFormattedWithFontInfo Parms{};

	Parms.Context = std::move(Context);
	Parms.Text = std::move(Text);
	Parms.Position = std::move(Position);
	Parms.Tint = std::move(Tint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);

	if (FontInfo != nullptr)
		*FontInfo = std::move(Parms.FontInfo);
}


// Function Squad.SQBlueprintLibrary.DumpStaticMeshDrawListStats
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::DumpStaticMeshDrawListStats(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "DumpStaticMeshDrawListStats");

	Params::SQBlueprintLibrary_DumpStaticMeshDrawListStats Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlueprintLibrary.FileLoadString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutText                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::FileLoadString(const class FString& Filename, class FString* OutText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "FileLoadString");

	Params::SQBlueprintLibrary_FileLoadString Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutText != nullptr)
		*OutText = std::move(Parms.OutText);

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.FileSaveString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InText                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::FileSaveString(const class FString& Filename, const class FString& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "FileSaveString");

	Params::SQBlueprintLibrary_FileSaveString Parms{};

	Parms.Filename = std::move(Filename);
	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.FindDefaultComponentsByClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class AActor>               InActorClass                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UActorComponent>      InComponentClass                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UActorComponent*>          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UActorComponent*> USQBlueprintLibrary::FindDefaultComponentsByClass(const TSubclassOf<class AActor> InActorClass, const TSubclassOf<class UActorComponent> InComponentClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "FindDefaultComponentsByClass");

	Params::SQBlueprintLibrary_FindDefaultComponentsByClass Parms{};

	Parms.InActorClass = InActorClass;
	Parms.InComponentClass = InComponentClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.FindPlayerByNameOrId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NameOrId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQPlayerController*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQPlayerController* USQBlueprintLibrary::FindPlayerByNameOrId(class UWorld* World, const class FString& NameOrId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "FindPlayerByNameOrId");

	Params::SQBlueprintLibrary_FindPlayerByNameOrId Parms{};

	Parms.World = World;
	Parms.NameOrId = std::move(NameOrId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.FindPlayerByPlayerId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQPlayerController*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQPlayerController* USQBlueprintLibrary::FindPlayerByPlayerId(class UWorld* World, int32 PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "FindPlayerByPlayerId");

	Params::SQBlueprintLibrary_FindPlayerByPlayerId Parms{};

	Parms.World = World;
	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.FormatTextActionKeys
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FText                             FormatText                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FName>                     ActionKeys                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText USQBlueprintLibrary::FormatTextActionKeys(const class FText& FormatText, const TArray<class FName>& ActionKeys)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "FormatTextActionKeys");

	Params::SQBlueprintLibrary_FormatTextActionKeys Parms{};

	Parms.FormatText = std::move(FormatText);
	Parms.ActionKeys = std::move(ActionKeys);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GenerateOrRetrieveDynamicMaterial
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UMeshComponent*                   Mesh                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UMaterialInstanceDynamic*> ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UMaterialInstanceDynamic*> USQBlueprintLibrary::GenerateOrRetrieveDynamicMaterial(class UMeshComponent* Mesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GenerateOrRetrieveDynamicMaterial");

	Params::SQBlueprintLibrary_GenerateOrRetrieveDynamicMaterial Parms{};

	Parms.Mesh = Mesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetAcceptKey
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKey                             ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FKey USQBlueprintLibrary::GetAcceptKey()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetAcceptKey");

	Params::SQBlueprintLibrary_GetAcceptKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetActionKeyName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ActionName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Param_Name                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::GetActionKeyName(const class FName& ActionName, class FName* Param_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetActionKeyName");

	Params::SQBlueprintLibrary_GetActionKeyName Parms{};

	Parms.ActionName = ActionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Param_Name != nullptr)
		*Param_Name = Parms.Param_Name;
}


// Function Squad.SQBlueprintLibrary.GetActorHalfHeight
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           TestActor                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQBlueprintLibrary::GetActorHalfHeight(const class AActor* TestActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetActorHalfHeight");

	Params::SQBlueprintLibrary_GetActorHalfHeight Parms{};

	Parms.TestActor = TestActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetAllClassesInheritingFrom
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UClass*                           BaseClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSoftClassPath>           OutSubClasses                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::GetAllClassesInheritingFrom(class UClass* BaseClass, TArray<struct FSoftClassPath>* OutSubClasses)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetAllClassesInheritingFrom");

	Params::SQBlueprintLibrary_GetAllClassesInheritingFrom Parms{};

	Parms.BaseClass = BaseClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSubClasses != nullptr)
		*OutSubClasses = std::move(Parms.OutSubClasses);
}


// Function Squad.SQBlueprintLibrary.GetAllComponentsOfClass
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UActorComponent>      Param_Class                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UObject*>                  Components                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::GetAllComponentsOfClass(class AActor* WorldContextObject, TSubclassOf<class UActorComponent> Param_Class, TArray<class UObject*>* Components)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetAllComponentsOfClass");

	Params::SQBlueprintLibrary_GetAllComponentsOfClass Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Param_Class = Param_Class;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Components != nullptr)
		*Components = std::move(Parms.Components);
}


// Function Squad.SQBlueprintLibrary.GetAllKeybindsBackups
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Backups                                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::GetAllKeybindsBackups(TArray<class FString>* Backups)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetAllKeybindsBackups");

	Params::SQBlueprintLibrary_GetAllKeybindsBackups Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Backups != nullptr)
		*Backups = std::move(Parms.Backups);
}


// Function Squad.SQBlueprintLibrary.GetAllKeyMappings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FInputActionKeyMapping>   KeyMappings                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::GetAllKeyMappings(TArray<struct FInputActionKeyMapping>* KeyMappings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetAllKeyMappings");

	Params::SQBlueprintLibrary_GetAllKeyMappings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (KeyMappings != nullptr)
		*KeyMappings = std::move(Parms.KeyMappings);
}


// Function Squad.SQBlueprintLibrary.GetAlphabetLetterString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQBlueprintLibrary::GetAlphabetLetterString(int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetAlphabetLetterString");

	Params::SQBlueprintLibrary_GetAlphabetLetterString Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetAttachParentVelocity
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxIterations                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USQBlueprintLibrary::GetAttachParentVelocity(const class AActor* Actor, int32 MaxIterations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetAttachParentVelocity");

	Params::SQBlueprintLibrary_GetAttachParentVelocity Parms{};

	Parms.Actor = Actor;
	Parms.MaxIterations = MaxIterations;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetAudioComponentParamFromPhysMat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UPhysicalMaterial*                PhysMat                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAudioComponentParam             ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FAudioComponentParam USQBlueprintLibrary::GetAudioComponentParamFromPhysMat(class UPhysicalMaterial* PhysMat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetAudioComponentParamFromPhysMat");

	Params::SQBlueprintLibrary_GetAudioComponentParamFromPhysMat Parms{};

	Parms.PhysMat = PhysMat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetAudioComponentParamsArrayFromPhysMat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UPhysicalMaterial*                PhysMat                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAudioComponentParam>     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FAudioComponentParam> USQBlueprintLibrary::GetAudioComponentParamsArrayFromPhysMat(class UPhysicalMaterial* PhysMat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetAudioComponentParamsArrayFromPhysMat");

	Params::SQBlueprintLibrary_GetAudioComponentParamsArrayFromPhysMat Parms{};

	Parms.PhysMat = PhysMat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetCancelKey
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKey                             ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FKey USQBlueprintLibrary::GetCancelKey()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetCancelKey");

	Params::SQBlueprintLibrary_GetCancelKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetCanvasSize
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UCanvas*                          Canvas                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SizeX                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SizeY                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::GetCanvasSize(class UCanvas* Canvas, int32* SizeX, int32* SizeY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetCanvasSize");

	Params::SQBlueprintLibrary_GetCanvasSize Parms{};

	Parms.Canvas = Canvas;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SizeX != nullptr)
		*SizeX = Parms.SizeX;

	if (SizeY != nullptr)
		*SizeY = Parms.SizeY;
}


// Function Squad.SQBlueprintLibrary.GetComponentTransform
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class USceneComponent*                  Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       OutTransform                                           (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::GetComponentTransform(class USceneComponent* Component, struct FTransform* OutTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetComponentTransform");

	Params::SQBlueprintLibrary_GetComponentTransform Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTransform != nullptr)
		*OutTransform = std::move(Parms.OutTransform);
}


// Function Squad.SQBlueprintLibrary.GetCurrentMapName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQBlueprintLibrary::GetCurrentMapName(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetCurrentMapName");

	Params::SQBlueprintLibrary_GetCurrentMapName Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetCustomServerSetting
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DefaultValue                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutResult                                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::GetCustomServerSetting(const class FString& PropertyName, const class FString& DefaultValue, class FString* OutResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetCustomServerSetting");

	Params::SQBlueprintLibrary_GetCustomServerSetting Parms{};

	Parms.PropertyName = std::move(PropertyName);
	Parms.DefaultValue = std::move(DefaultValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutResult != nullptr)
		*OutResult = std::move(Parms.OutResult);
}


// Function Squad.SQBlueprintLibrary.GetCustomServerSettingAsBool
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    DefaultValue                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::GetCustomServerSettingAsBool(const class FString& PropertyName, const bool DefaultValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetCustomServerSettingAsBool");

	Params::SQBlueprintLibrary_GetCustomServerSettingAsBool Parms{};

	Parms.PropertyName = std::move(PropertyName);
	Parms.DefaultValue = DefaultValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetCustomServerSettingAsFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DefaultValue                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQBlueprintLibrary::GetCustomServerSettingAsFloat(const class FString& PropertyName, const float DefaultValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetCustomServerSettingAsFloat");

	Params::SQBlueprintLibrary_GetCustomServerSettingAsFloat Parms{};

	Parms.PropertyName = std::move(PropertyName);
	Parms.DefaultValue = DefaultValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetCustomServerSettingAsInt
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DefaultValue                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQBlueprintLibrary::GetCustomServerSettingAsInt(const class FString& PropertyName, const int32 DefaultValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetCustomServerSettingAsInt");

	Params::SQBlueprintLibrary_GetCustomServerSettingAsInt Parms{};

	Parms.PropertyName = std::move(PropertyName);
	Parms.DefaultValue = DefaultValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetDefaultObjectFor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UClass*                           Param_Class                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* USQBlueprintLibrary::GetDefaultObjectFor(class UClass* Param_Class)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetDefaultObjectFor");

	Params::SQBlueprintLibrary_GetDefaultObjectFor Parms{};

	Parms.Param_Class = Param_Class;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetDLSSScaleMultiplier
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQBlueprintLibrary::GetDLSSScaleMultiplier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetDLSSScaleMultiplier");

	Params::SQBlueprintLibrary_GetDLSSScaleMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetDynamicEasingPosition
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSQDynamicEasingStruct           Easing                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQBlueprintLibrary::GetDynamicEasingPosition(const struct FSQDynamicEasingStruct& Easing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetDynamicEasingPosition");

	Params::SQBlueprintLibrary_GetDynamicEasingPosition Parms{};

	Parms.Easing = std::move(Easing);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetFallbackLoadingBackground
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UTexture2D> USQBlueprintLibrary::GetFallbackLoadingBackground()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetFallbackLoadingBackground");

	Params::SQBlueprintLibrary_GetFallbackLoadingBackground Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetFsrScaleMultiplier
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   FSR2AdditionalMultiplier                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQBlueprintLibrary::GetFsrScaleMultiplier(const float FSR2AdditionalMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetFsrScaleMultiplier");

	Params::SQBlueprintLibrary_GetFsrScaleMultiplier Parms{};

	Parms.FSR2AdditionalMultiplier = FSR2AdditionalMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetGameVersion
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQBlueprintLibrary::GetGameVersion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetGameVersion");

	Params::SQBlueprintLibrary_GetGameVersion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetGameVersionInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Variant                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Major                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Minor                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Build                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Revision                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::GetGameVersionInfo(class FString* Variant, int32* Major, int32* Minor, int32* Build, int32* Revision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetGameVersionInfo");

	Params::SQBlueprintLibrary_GetGameVersionInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Variant != nullptr)
		*Variant = std::move(Parms.Variant);

	if (Major != nullptr)
		*Major = Parms.Major;

	if (Minor != nullptr)
		*Minor = Parms.Minor;

	if (Build != nullptr)
		*Build = Parms.Build;

	if (Revision != nullptr)
		*Revision = Parms.Revision;
}


// Function Squad.SQBlueprintLibrary.GetIntFromFName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             Param_Name                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQBlueprintLibrary::GetIntFromFName(const class FName& Param_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetIntFromFName");

	Params::SQBlueprintLibrary_GetIntFromFName Parms{};

	Parms.Param_Name = Param_Name;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetIntFromPhysMat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UPhysicalMaterial*                PhysMat                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQBlueprintLibrary::GetIntFromPhysMat(class UPhysicalMaterial* PhysMat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetIntFromPhysMat");

	Params::SQBlueprintLibrary_GetIntFromPhysMat Parms{};

	Parms.PhysMat = PhysMat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetKeyDisplayName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKey                             Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             OutDisplayName                                         (Parm, OutParm, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::GetKeyDisplayName(const struct FKey& Key, class FText* OutDisplayName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetKeyDisplayName");

	Params::SQBlueprintLibrary_GetKeyDisplayName Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDisplayName != nullptr)
		*OutDisplayName = std::move(Parms.OutDisplayName);
}


// Function Squad.SQBlueprintLibrary.GetKeyFromValue
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<int32, int32>                      Map                                                    (Parm, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQBlueprintLibrary::GetKeyFromValue(const TMap<int32, int32>& Map, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetKeyFromValue");

	Params::SQBlueprintLibrary_GetKeyFromValue Parms{};

	Parms.Map = std::move(Map);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetKeyName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKey                             Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             OutName                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::GetKeyName(const struct FKey& Key, class FName* OutName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetKeyName");

	Params::SQBlueprintLibrary_GetKeyName Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutName != nullptr)
		*OutName = Parms.OutName;
}


// Function Squad.SQBlueprintLibrary.GetKeysMapedToAxis
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             AxisName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Negative                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FInputAxisKeyMapping>     Keys                                                   (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::GetKeysMapedToAxis(const class FName& AxisName, bool Negative, TArray<struct FInputAxisKeyMapping>* Keys)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetKeysMapedToAxis");

	Params::SQBlueprintLibrary_GetKeysMapedToAxis Parms{};

	Parms.AxisName = AxisName;
	Parms.Negative = Negative;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Keys != nullptr)
		*Keys = std::move(Parms.Keys);
}


// Function Squad.SQBlueprintLibrary.GetKeysMappedToAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ActionName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FKey>                     Keys                                                   (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::GetKeysMappedToAction(const class FName& ActionName, TArray<struct FKey>* Keys)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetKeysMappedToAction");

	Params::SQBlueprintLibrary_GetKeysMappedToAction Parms{};

	Parms.ActionName = ActionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Keys != nullptr)
		*Keys = std::move(Parms.Keys);
}


// Function Squad.SQBlueprintLibrary.GetKeysMappedToActionText
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ActionName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText USQBlueprintLibrary::GetKeysMappedToActionText(const class FName& ActionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetKeysMappedToActionText");

	Params::SQBlueprintLibrary_GetKeysMappedToActionText Parms{};

	Parms.ActionName = ActionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetLastRenderTime
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UPrimitiveComponent*              Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQBlueprintLibrary::GetLastRenderTime(class UPrimitiveComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetLastRenderTime");

	Params::SQBlueprintLibrary_GetLastRenderTime Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetMajorMinorVersion
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           RawVersion                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQBlueprintLibrary::GetMajorMinorVersion(const class FString& RawVersion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetMajorMinorVersion");

	Params::SQBlueprintLibrary_GetMajorMinorVersion Parms{};

	Parms.RawVersion = std::move(RawVersion);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetMicrophoneVolume
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQBlueprintLibrary::GetMicrophoneVolume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetMicrophoneVolume");

	Params::SQBlueprintLibrary_GetMicrophoneVolume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetNatoPhoneticString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQBlueprintLibrary::GetNatoPhoneticString(int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetNatoPhoneticString");

	Params::SQBlueprintLibrary_GetNatoPhoneticString Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetNetMode
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQBlueprintLibrary::GetNetMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetNetMode");

	Params::SQBlueprintLibrary_GetNetMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetNumSections
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LOD                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQBlueprintLibrary::GetNumSections(class UStaticMesh* StaticMesh, int32 LOD)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetNumSections");

	Params::SQBlueprintLibrary_GetNumSections Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.LOD = LOD;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetNumTexCoords
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LOD                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQBlueprintLibrary::GetNumTexCoords(class UStaticMesh* StaticMesh, int32 LOD)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetNumTexCoords");

	Params::SQBlueprintLibrary_GetNumTexCoords Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.LOD = LOD;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetNumTriangles
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LOD                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQBlueprintLibrary::GetNumTriangles(class UStaticMesh* StaticMesh, int32 LOD)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetNumTriangles");

	Params::SQBlueprintLibrary_GetNumTriangles Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.LOD = LOD;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetNumVertices
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UStaticMesh*                      StaticMesh                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LOD                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQBlueprintLibrary::GetNumVertices(class UStaticMesh* StaticMesh, int32 LOD)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetNumVertices");

	Params::SQBlueprintLibrary_GetNumVertices Parms{};

	Parms.StaticMesh = StaticMesh;
	Parms.LOD = LOD;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetOverlapHitInfos
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UPrimitiveComponent*              Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FHitResult>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<struct FHitResult> USQBlueprintLibrary::GetOverlapHitInfos(class UPrimitiveComponent* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetOverlapHitInfos");

	Params::SQBlueprintLibrary_GetOverlapHitInfos Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetPiPLensMeshCornersWorldPos
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class USQPipScopeCaptureComponent*      PiPComponent                                           (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutBotLeft                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutTopRight                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutTopLeft                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutBotRight                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::GetPiPLensMeshCornersWorldPos(const class USQPipScopeCaptureComponent* PiPComponent, struct FVector* OutBotLeft, struct FVector* OutTopRight, struct FVector* OutTopLeft, struct FVector* OutBotRight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetPiPLensMeshCornersWorldPos");

	Params::SQBlueprintLibrary_GetPiPLensMeshCornersWorldPos Parms{};

	Parms.PiPComponent = PiPComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutBotLeft != nullptr)
		*OutBotLeft = std::move(Parms.OutBotLeft);

	if (OutTopRight != nullptr)
		*OutTopRight = std::move(Parms.OutTopRight);

	if (OutTopLeft != nullptr)
		*OutTopLeft = std::move(Parms.OutTopLeft);

	if (OutBotRight != nullptr)
		*OutBotRight = std::move(Parms.OutBotRight);
}


// Function Squad.SQBlueprintLibrary.GetPreviousLODLevel_DEPRECATED
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UStaticMeshComponent*             Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQBlueprintLibrary::GetPreviousLODLevel_DEPRECATED(class UStaticMeshComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetPreviousLODLevel_DEPRECATED");

	Params::SQBlueprintLibrary_GetPreviousLODLevel_DEPRECATED Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetPrimaryDisplaySize
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   Width                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Height                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::GetPrimaryDisplaySize(int32* Width, int32* Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetPrimaryDisplaySize");

	Params::SQBlueprintLibrary_GetPrimaryDisplaySize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Width != nullptr)
		*Width = Parms.Width;

	if (Height != nullptr)
		*Height = Parms.Height;
}


// Function Squad.SQBlueprintLibrary.GetScreenSize
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class USceneComponent*                  PrimComp                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          CameraOrigin                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutScreenSize                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutDistance                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::GetScreenSize(class USceneComponent* PrimComp, const struct FVector& CameraOrigin, float* OutScreenSize, float* OutDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetScreenSize");

	Params::SQBlueprintLibrary_GetScreenSize Parms{};

	Parms.PrimComp = PrimComp;
	Parms.CameraOrigin = std::move(CameraOrigin);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutScreenSize != nullptr)
		*OutScreenSize = Parms.OutScreenSize;

	if (OutDistance != nullptr)
		*OutDistance = Parms.OutDistance;
}


// Function Squad.SQBlueprintLibrary.GetScreenSizeFromBounds
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   BoundsRadius                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FOV                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Distance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQBlueprintLibrary::GetScreenSizeFromBounds(float BoundsRadius, float FOV, float Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetScreenSizeFromBounds");

	Params::SQBlueprintLibrary_GetScreenSizeFromBounds Parms{};

	Parms.BoundsRadius = BoundsRadius;
	Parms.FOV = FOV;
	Parms.Distance = Distance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetServerHealthSlateColor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ServerHealth                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSlateColor                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSlateColor USQBlueprintLibrary::GetServerHealthSlateColor(class UObject* WorldContextObject, int32 ServerHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetServerHealthSlateColor");

	Params::SQBlueprintLibrary_GetServerHealthSlateColor Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ServerHealth = ServerHealth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetServerHealthValues
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ServerHealthLow                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ServerHealthHigh                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::GetServerHealthValues(float* ServerHealthLow, float* ServerHealthHigh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetServerHealthValues");

	Params::SQBlueprintLibrary_GetServerHealthValues Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ServerHealthLow != nullptr)
		*ServerHealthLow = Parms.ServerHealthLow;

	if (ServerHealthHigh != nullptr)
		*ServerHealthHigh = Parms.ServerHealthHigh;
}


// Function Squad.SQBlueprintLibrary.GetServerTagManager
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQServerTagManager*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQServerTagManager* USQBlueprintLibrary::GetServerTagManager(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetServerTagManager");

	Params::SQBlueprintLibrary_GetServerTagManager Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetSpringPos3D
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSQSpringInterpStruct3D          Spring                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USQBlueprintLibrary::GetSpringPos3D(const struct FSQSpringInterpStruct3D& Spring)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetSpringPos3D");

	Params::SQBlueprintLibrary_GetSpringPos3D Parms{};

	Parms.Spring = std::move(Spring);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetSquadGameInstance
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQGameInstance*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQGameInstance* USQBlueprintLibrary::GetSquadGameInstance(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetSquadGameInstance");

	Params::SQBlueprintLibrary_GetSquadGameInstance Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetSquadGameSession
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQGameSession*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQGameSession* USQBlueprintLibrary::GetSquadGameSession(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetSquadGameSession");

	Params::SQBlueprintLibrary_GetSquadGameSession Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetSquadGameUserSettings
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USQGameUserSettings*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQGameUserSettings* USQBlueprintLibrary::GetSquadGameUserSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetSquadGameUserSettings");

	Params::SQBlueprintLibrary_GetSquadGameUserSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetSquadPhysMat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UPhysicalMaterial*                PhysMat                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQPhysicalMaterial*              SquadPhysMat                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::GetSquadPhysMat(class UPhysicalMaterial* PhysMat, class USQPhysicalMaterial** SquadPhysMat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetSquadPhysMat");

	Params::SQBlueprintLibrary_GetSquadPhysMat Parms{};

	Parms.PhysMat = PhysMat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SquadPhysMat != nullptr)
		*SquadPhysMat = Parms.SquadPhysMat;
}


// Function Squad.SQBlueprintLibrary.GetTextSize
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSlateFontInfo                   FontInfo                                               (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ScaleUI                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D USQBlueprintLibrary::GetTextSize(const struct FSlateFontInfo& FontInfo, const class FText& Text, const float ScaleUI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetTextSize");

	Params::SQBlueprintLibrary_GetTextSize Parms{};

	Parms.FontInfo = std::move(FontInfo);
	Parms.Text = std::move(Text);
	Parms.ScaleUI = ScaleUI;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetTextureMemoryStats
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSQTextureMemoryStats            ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSQTextureMemoryStats USQBlueprintLibrary::GetTextureMemoryStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetTextureMemoryStats");

	Params::SQBlueprintLibrary_GetTextureMemoryStats Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetUpscalerMultiplier
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQBlueprintLibrary::GetUpscalerMultiplier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetUpscalerMultiplier");

	Params::SQBlueprintLibrary_GetUpscalerMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetWorldSettings
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AWorldSettings*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AWorldSettings* USQBlueprintLibrary::GetWorldSettings(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetWorldSettings");

	Params::SQBlueprintLibrary_GetWorldSettings Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetXeSSScaleMultiplier
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQBlueprintLibrary::GetXeSSScaleMultiplier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetXeSSScaleMultiplier");

	Params::SQBlueprintLibrary_GetXeSSScaleMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.GetZoomedFOV
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   MagnificationDesired                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DefaultFOV                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQBlueprintLibrary::GetZoomedFOV(float MagnificationDesired, float DefaultFOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "GetZoomedFOV");

	Params::SQBlueprintLibrary_GetZoomedFOV Parms{};

	Parms.MagnificationDesired = MagnificationDesired;
	Parms.DefaultFOV = DefaultFOV;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.InMainMenu
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::InMainMenu(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "InMainMenu");

	Params::SQBlueprintLibrary_InMainMenu Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.IsActorWithinDistanceToLocalPlayer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ESQReturnBool                           Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DistanceInMeters                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::IsActorWithinDistanceToLocalPlayer(ESQReturnBool* Branches, const class AActor* OtherActor, const float DistanceInMeters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "IsActorWithinDistanceToLocalPlayer");

	Params::SQBlueprintLibrary_IsActorWithinDistanceToLocalPlayer Parms{};

	Parms.OtherActor = OtherActor;
	Parms.DistanceInMeters = DistanceInMeters;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.IsDataTableRowOfStruct
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UDataTable*                       Table                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             RowStructName                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::IsDataTableRowOfStruct(const class UDataTable* Table, const class FName RowStructName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "IsDataTableRowOfStruct");

	Params::SQBlueprintLibrary_IsDataTableRowOfStruct Parms{};

	Parms.Table = Table;
	Parms.RowStructName = RowStructName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.IsGamepadKey
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKey                             Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::IsGamepadKey(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "IsGamepadKey");

	Params::SQBlueprintLibrary_IsGamepadKey Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.IsLocationWithinDistanceToLocalPlayer
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// ESQReturnBool                           Branches                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OtherLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DistanceInMeters                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::IsLocationWithinDistanceToLocalPlayer(ESQReturnBool* Branches, const struct FVector& OtherLocation, const float DistanceInMeters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "IsLocationWithinDistanceToLocalPlayer");

	Params::SQBlueprintLibrary_IsLocationWithinDistanceToLocalPlayer Parms{};

	Parms.OtherLocation = std::move(OtherLocation);
	Parms.DistanceInMeters = DistanceInMeters;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Branches != nullptr)
		*Branches = Parms.Branches;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.IsMicrophoneAbleToCapture
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           OutErrorMessage                                        (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::IsMicrophoneAbleToCapture(class FString* OutErrorMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "IsMicrophoneAbleToCapture");

	Params::SQBlueprintLibrary_IsMicrophoneAbleToCapture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutErrorMessage != nullptr)
		*OutErrorMessage = std::move(Parms.OutErrorMessage);

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.IsNearlyEqualOrLess
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Tolerance                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::IsNearlyEqualOrLess(float A, float B, float Tolerance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "IsNearlyEqualOrLess");

	Params::SQBlueprintLibrary_IsNearlyEqualOrLess Parms{};

	Parms.A = A;
	Parms.B = B;
	Parms.Tolerance = Tolerance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.IsPlayingInEditor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::IsPlayingInEditor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "IsPlayingInEditor");

	Params::SQBlueprintLibrary_IsPlayingInEditor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.IsQueueEnabled
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::IsQueueEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "IsQueueEnabled");

	Params::SQBlueprintLibrary_IsQueueEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.IsShippingBuild
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::IsShippingBuild()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "IsShippingBuild");

	Params::SQBlueprintLibrary_IsShippingBuild Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.IsSimulatingInEditor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::IsSimulatingInEditor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "IsSimulatingInEditor");

	Params::SQBlueprintLibrary_IsSimulatingInEditor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.IsStandalone
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::IsStandalone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "IsStandalone");

	Params::SQBlueprintLibrary_IsStandalone Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.IsStandaloneOrListenServer
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::IsStandaloneOrListenServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "IsStandaloneOrListenServer");

	Params::SQBlueprintLibrary_IsStandaloneOrListenServer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.IsUltraWideResolution
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::IsUltraWideResolution()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "IsUltraWideResolution");

	Params::SQBlueprintLibrary_IsUltraWideResolution Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.IsUnderTerrain
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          StartTrace                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           InIgnoreActor                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TraceDistance                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bTraceMustImpactAboveToBeUnderTerrain                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::IsUnderTerrain(const class UObject* WorldContextObject, const struct FVector& StartTrace, const class AActor* InIgnoreActor, const float TraceDistance, const bool bTraceMustImpactAboveToBeUnderTerrain)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "IsUnderTerrain");

	Params::SQBlueprintLibrary_IsUnderTerrain Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.StartTrace = std::move(StartTrace);
	Parms.InIgnoreActor = InIgnoreActor;
	Parms.TraceDistance = TraceDistance;
	Parms.bTraceMustImpactAboveToBeUnderTerrain = bTraceMustImpactAboveToBeUnderTerrain;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.IsValidKey
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKey                             Key                                                    (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::IsValidKey(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "IsValidKey");

	Params::SQBlueprintLibrary_IsValidKey Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.LoadCredits
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FSQCreditsList>           OutCreditsList                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::LoadCredits(TArray<struct FSQCreditsList>* OutCreditsList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "LoadCredits");

	Params::SQBlueprintLibrary_LoadCredits Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutCreditsList != nullptr)
		*OutCreditsList = std::move(Parms.OutCreditsList);
}


// Function Squad.SQBlueprintLibrary.LogError
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Contents                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::LogError(const class FString& Contents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "LogError");

	Params::SQBlueprintLibrary_LogError Parms{};

	Parms.Contents = std::move(Contents);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlueprintLibrary.LogMapMarkerError
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Contents                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SquadId                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamId                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FireTeamId                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantize              Location                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQMapMarkerDataAsset*            MapMarkerDataAsset                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::LogMapMarkerError(const class FString& Contents, const int32 SquadId, const int32 TeamId, const int32 FireTeamId, const struct FVector_NetQuantize& Location, const class USQMapMarkerDataAsset* MapMarkerDataAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "LogMapMarkerError");

	Params::SQBlueprintLibrary_LogMapMarkerError Parms{};

	Parms.Contents = std::move(Contents);
	Parms.SquadId = SquadId;
	Parms.TeamId = TeamId;
	Parms.FireTeamId = FireTeamId;
	Parms.Location = std::move(Location);
	Parms.MapMarkerDataAsset = MapMarkerDataAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlueprintLibrary.LogUnusedProperties
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::LogUnusedProperties(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "LogUnusedProperties");

	Params::SQBlueprintLibrary_LogUnusedProperties Parms{};

	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlueprintLibrary.MapIconEnabledDefined
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::MapIconEnabledDefined()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "MapIconEnabledDefined");

	Params::SQBlueprintLibrary_MapIconEnabledDefined Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.MapIconVisibleDefined
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::MapIconVisibleDefined()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "MapIconVisibleDefined");

	Params::SQBlueprintLibrary_MapIconVisibleDefined Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.MapMarkersEnabledDefined
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::MapMarkersEnabledDefined()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "MapMarkersEnabledDefined");

	Params::SQBlueprintLibrary_MapMarkersEnabledDefined Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.MarkAssetPackageDirty
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Asset                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::MarkAssetPackageDirty(class UObject* Asset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "MarkAssetPackageDirty");

	Params::SQBlueprintLibrary_MarkAssetPackageDirty Parms{};

	Parms.Asset = Asset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.MatchInProgress
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::MatchInProgress(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "MatchInProgress");

	Params::SQBlueprintLibrary_MatchInProgress Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.MatchWaitingAfterCompletion
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::MatchWaitingAfterCompletion(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "MatchWaitingAfterCompletion");

	Params::SQBlueprintLibrary_MatchWaitingAfterCompletion Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.MatchWaitingToStart
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::MatchWaitingToStart(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "MatchWaitingToStart");

	Params::SQBlueprintLibrary_MatchWaitingToStart Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.ModdedServersOnTop
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::ModdedServersOnTop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "ModdedServersOnTop");

	Params::SQBlueprintLibrary_ModdedServersOnTop Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.NameLexicalLess
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             A                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             B                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::NameLexicalLess(const class FName& A, const class FName& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "NameLexicalLess");

	Params::SQBlueprintLibrary_NameLexicalLess Parms{};

	Parms.A = A;
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.NormalizeAngle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   InAngle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQBlueprintLibrary::NormalizeAngle(float InAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "NormalizeAngle");

	Params::SQBlueprintLibrary_NormalizeAngle Parms{};

	Parms.InAngle = InAngle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.OffsetSpring3D
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FSQSpringInterpStruct3D          Spring                                                 (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          PosOffset                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::OffsetSpring3D(struct FSQSpringInterpStruct3D& Spring, const struct FVector& PosOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "OffsetSpring3D");

	Params::SQBlueprintLibrary_OffsetSpring3D Parms{};

	Parms.Spring = std::move(Spring);
	Parms.PosOffset = std::move(PosOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Spring = std::move(Parms.Spring);
}


// Function Squad.SQBlueprintLibrary.OWICoreStateEnabledDefined
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::OWICoreStateEnabledDefined()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "OWICoreStateEnabledDefined");

	Params::SQBlueprintLibrary_OWICoreStateEnabledDefined Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.OWICoreStateVisibleDefined
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::OWICoreStateVisibleDefined()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "OWICoreStateVisibleDefined");

	Params::SQBlueprintLibrary_OWICoreStateVisibleDefined Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.PlaySoldierMovementFoleySound
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ASQSoldier*                       Soldier                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundBase*                       Sound                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSetSpeedParameter                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSetPhysMatParameter                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSetWaterDepthParameter                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          LocationOffset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VolumeMultiplier                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PitchMultiplier                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundAttenuation*                AttenuationSettings                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundConcurrency*                ConcurrencySettings                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAttachLocation                         LocationType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::PlaySoldierMovementFoleySound(const class ASQSoldier* Soldier, class USoundBase* Sound, bool bSetSpeedParameter, bool bSetPhysMatParameter, bool bSetWaterDepthParameter, const struct FVector& LocationOffset, float VolumeMultiplier, float PitchMultiplier, float StartTime, const class USoundAttenuation* AttenuationSettings, const class USoundConcurrency* ConcurrencySettings, EAttachLocation LocationType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "PlaySoldierMovementFoleySound");

	Params::SQBlueprintLibrary_PlaySoldierMovementFoleySound Parms{};

	Parms.Soldier = Soldier;
	Parms.Sound = Sound;
	Parms.bSetSpeedParameter = bSetSpeedParameter;
	Parms.bSetPhysMatParameter = bSetPhysMatParameter;
	Parms.bSetWaterDepthParameter = bSetWaterDepthParameter;
	Parms.LocationOffset = std::move(LocationOffset);
	Parms.VolumeMultiplier = VolumeMultiplier;
	Parms.PitchMultiplier = PitchMultiplier;
	Parms.StartTime = StartTime;
	Parms.AttenuationSettings = AttenuationSettings;
	Parms.ConcurrencySettings = ConcurrencySettings;
	Parms.LocationType = LocationType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlueprintLibrary.PlaySound2DWithParameters
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundBase*                       Sound                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAudioComponentParam>     AudioParameters                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   VolumeMultiplier                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PitchMultiplier                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundConcurrency*                ConcurrencySettings                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::PlaySound2DWithParameters(class UObject* WorldContextObject, class USoundBase* Sound, const TArray<struct FAudioComponentParam>& AudioParameters, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "PlaySound2DWithParameters");

	Params::SQBlueprintLibrary_PlaySound2DWithParameters Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Sound = Sound;
	Parms.AudioParameters = std::move(AudioParameters);
	Parms.VolumeMultiplier = VolumeMultiplier;
	Parms.PitchMultiplier = PitchMultiplier;
	Parms.StartTime = StartTime;
	Parms.ConcurrencySettings = ConcurrencySettings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlueprintLibrary.PlaySoundAtLocationWithParameters
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundBase*                       Sound                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAudioComponentParam>     AudioParameters                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// float                                   VolumeMultiplier                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PitchMultiplier                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundAttenuation*                AttenuationSettings                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundConcurrency*                ConcurrencySettings                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::PlaySoundAtLocationWithParameters(class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, const TArray<struct FAudioComponentParam>& AudioParameters, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "PlaySoundAtLocationWithParameters");

	Params::SQBlueprintLibrary_PlaySoundAtLocationWithParameters Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Sound = Sound;
	Parms.Location = std::move(Location);
	Parms.AudioParameters = std::move(AudioParameters);
	Parms.Rotation = std::move(Rotation);
	Parms.VolumeMultiplier = VolumeMultiplier;
	Parms.PitchMultiplier = PitchMultiplier;
	Parms.StartTime = StartTime;
	Parms.AttenuationSettings = AttenuationSettings;
	Parms.ConcurrencySettings = ConcurrencySettings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlueprintLibrary.PrintHitResult
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::PrintHitResult(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "PrintHitResult");

	Params::SQBlueprintLibrary_PrintHitResult Parms{};

	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlueprintLibrary.PrintShotInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSQShotInfo                      Shot                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::PrintShotInfo(const struct FSQShotInfo& Shot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "PrintShotInfo");

	Params::SQBlueprintLibrary_PrintShotInfo Parms{};

	Parms.Shot = std::move(Shot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlueprintLibrary.RebaseTransformLocalOriginOntoZero
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       LocalTransform                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform USQBlueprintLibrary::RebaseTransformLocalOriginOntoZero(class UObject* WorldContextObject, const struct FTransform& LocalTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "RebaseTransformLocalOriginOntoZero");

	Params::SQBlueprintLibrary_RebaseTransformLocalOriginOntoZero Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LocalTransform = std::move(LocalTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.RebaseTransformZeroOriginOntoLocal
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ZeroTransform                                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform USQBlueprintLibrary::RebaseTransformZeroOriginOntoLocal(class UObject* WorldContextObject, const struct FTransform& ZeroTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "RebaseTransformZeroOriginOntoLocal");

	Params::SQBlueprintLibrary_RebaseTransformZeroOriginOntoLocal Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ZeroTransform = std::move(ZeroTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.RebindAxisKey
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInputAxisKeyMapping             Mapping                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FKey                             NewKey                                                 (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::RebindAxisKey(const struct FInputAxisKeyMapping& Mapping, const struct FKey& NewKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "RebindAxisKey");

	Params::SQBlueprintLibrary_RebindAxisKey Parms{};

	Parms.Mapping = std::move(Mapping);
	Parms.NewKey = std::move(NewKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlueprintLibrary.RebindKey
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             ActionName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKey                             NewKey                                                 (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OccuranceIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::RebindKey(const class FName& ActionName, const struct FKey& NewKey, int32 OccuranceIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "RebindKey");

	Params::SQBlueprintLibrary_RebindKey Parms{};

	Parms.ActionName = ActionName;
	Parms.NewKey = std::move(NewKey);
	Parms.OccuranceIndex = OccuranceIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlueprintLibrary.SaveAndForceRebuildingKeyMaps
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bRestoreDefaults                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::SaveAndForceRebuildingKeyMaps(const bool bRestoreDefaults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "SaveAndForceRebuildingKeyMaps");

	Params::SQBlueprintLibrary_SaveAndForceRebuildingKeyMaps Parms{};

	Parms.bRestoreDefaults = bRestoreDefaults;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlueprintLibrary.ServerHealthEnabled
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::ServerHealthEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "ServerHealthEnabled");

	Params::SQBlueprintLibrary_ServerHealthEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.ServerLicensingNoticeNeeded
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::ServerLicensingNoticeNeeded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "ServerLicensingNoticeNeeded");

	Params::SQBlueprintLibrary_ServerLicensingNoticeNeeded Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.SetActorCollisionInGame
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ActorToAffect                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewCollisionEnabled                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPropagateToAttachedChildren                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::SetActorCollisionInGame(class AActor* ActorToAffect, bool bNewCollisionEnabled, bool bPropagateToAttachedChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "SetActorCollisionInGame");

	Params::SQBlueprintLibrary_SetActorCollisionInGame Parms{};

	Parms.ActorToAffect = ActorToAffect;
	Parms.bNewCollisionEnabled = bNewCollisionEnabled;
	Parms.bPropagateToAttachedChildren = bPropagateToAttachedChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlueprintLibrary.SetActorComponentStablyNamed
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UActorComponent*                  ActorComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::SetActorComponentStablyNamed(class UActorComponent* ActorComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "SetActorComponentStablyNamed");

	Params::SQBlueprintLibrary_SetActorComponentStablyNamed Parms{};

	Parms.ActorComponent = ActorComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlueprintLibrary.SetActorHiddenInGame
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ActorToAffect                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewHidden                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPropagateToAttachedChildren                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::SetActorHiddenInGame(class AActor* ActorToAffect, bool bNewHidden, bool bPropagateToAttachedChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "SetActorHiddenInGame");

	Params::SQBlueprintLibrary_SetActorHiddenInGame Parms{};

	Parms.ActorToAffect = ActorToAffect;
	Parms.bNewHidden = bNewHidden;
	Parms.bPropagateToAttachedChildren = bPropagateToAttachedChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlueprintLibrary.SetActorTickGroup
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETickingGroup                           NewTickGroup                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::SetActorTickGroup(class AActor* Target, ETickingGroup NewTickGroup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "SetActorTickGroup");

	Params::SQBlueprintLibrary_SetActorTickGroup Parms{};

	Parms.Target = Target;
	Parms.NewTickGroup = NewTickGroup;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlueprintLibrary.SetComponentTickGroup
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UActorComponent*                  Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETickingGroup                           NewTickGroup                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::SetComponentTickGroup(class UActorComponent* Target, ETickingGroup NewTickGroup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "SetComponentTickGroup");

	Params::SQBlueprintLibrary_SetComponentTickGroup Parms{};

	Parms.Target = Target;
	Parms.NewTickGroup = NewTickGroup;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlueprintLibrary.SetDynamicEasingTarget
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSQDynamicEasingStruct           Easing                                                 (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   NewTarget                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::SetDynamicEasingTarget(struct FSQDynamicEasingStruct& Easing, float NewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "SetDynamicEasingTarget");

	Params::SQBlueprintLibrary_SetDynamicEasingTarget Parms{};

	Parms.Easing = std::move(Easing);
	Parms.NewTarget = NewTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Easing = std::move(Parms.Easing);
}


// Function Squad.SQBlueprintLibrary.SetMasterPoseComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMeshComponent*           Master                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::SetMasterPoseComponent(class USkeletalMeshComponent* Target, class USkeletalMeshComponent* Master)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "SetMasterPoseComponent");

	Params::SQBlueprintLibrary_SetMasterPoseComponent Parms{};

	Parms.Target = Target;
	Parms.Master = Master;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlueprintLibrary.SetMicrophoneForceAutoGain
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bInValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::SetMicrophoneForceAutoGain(bool bInValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "SetMicrophoneForceAutoGain");

	Params::SQBlueprintLibrary_SetMicrophoneForceAutoGain Parms{};

	Parms.bInValue = bInValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.SetMobility
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EComponentMobility                      NewMobility                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::SetMobility(class USceneComponent* Target, EComponentMobility NewMobility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "SetMobility");

	Params::SQBlueprintLibrary_SetMobility Parms{};

	Parms.Target = Target;
	Parms.NewMobility = NewMobility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlueprintLibrary.SetMousePosition
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::SetMousePosition(const class UObject* WorldContextObject, int32 X, int32 Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "SetMousePosition");

	Params::SQBlueprintLibrary_SetMousePosition Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.X = X;
	Parms.Y = Y;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlueprintLibrary.SetSkeletalMeshCanTick
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSet<class USkeletalMeshComponent*>     Exclude                                                (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::SetSkeletalMeshCanTick(class AActor* Actor, bool bEnable, const TSet<class USkeletalMeshComponent*>& Exclude)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "SetSkeletalMeshCanTick");

	Params::SQBlueprintLibrary_SetSkeletalMeshCanTick Parms{};

	Parms.Actor = Actor;
	Parms.bEnable = bEnable;
	Parms.Exclude = std::move(Exclude);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlueprintLibrary.SetSkeletalMeshMaxTickrate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Tickrate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSet<class USkeletalMeshComponent*>     Exclude                                                (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::SetSkeletalMeshMaxTickrate(class AActor* Actor, float Tickrate, const TSet<class USkeletalMeshComponent*>& Exclude)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "SetSkeletalMeshMaxTickrate");

	Params::SQBlueprintLibrary_SetSkeletalMeshMaxTickrate Parms{};

	Parms.Actor = Actor;
	Parms.Tickrate = Tickrate;
	Parms.Exclude = std::move(Exclude);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlueprintLibrary.SetSkeletalPhysMaterialOverride
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPhysicalMaterial*                NewPhysMaterial                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::SetSkeletalPhysMaterialOverride(class USkeletalMeshComponent* Component, class UPhysicalMaterial* NewPhysMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "SetSkeletalPhysMaterialOverride");

	Params::SQBlueprintLibrary_SetSkeletalPhysMaterialOverride Parms{};

	Parms.Component = Component;
	Parms.NewPhysMaterial = NewPhysMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlueprintLibrary.SetTextureRenderTarget2DSize
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UTextureRenderTarget2D*           Texture                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SizeX                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SizeY                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::SetTextureRenderTarget2DSize(class UTextureRenderTarget2D* Texture, int32 SizeX, int32 SizeY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "SetTextureRenderTarget2DSize");

	Params::SQBlueprintLibrary_SetTextureRenderTarget2DSize Parms{};

	Parms.Texture = Texture;
	Parms.SizeX = SizeX;
	Parms.SizeY = SizeY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlueprintLibrary.SortNameArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FName>                     Array                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> USQBlueprintLibrary::SortNameArray(const TArray<class FName>& Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "SortNameArray");

	Params::SQBlueprintLibrary_SortNameArray Parms{};

	Parms.Array = std::move(Array);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.SpawnLastingEffect
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ASQLastingEffect>     LastingEffect                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SpawnLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         SpawnRotation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// ESpawnActorCollisionHandlingMethod      CollisionHandlingMethod                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQLastingEffect*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQLastingEffect* USQBlueprintLibrary::SpawnLastingEffect(class UObject* WorldContextObject, const TSubclassOf<class ASQLastingEffect>& LastingEffect, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, ESpawnActorCollisionHandlingMethod CollisionHandlingMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "SpawnLastingEffect");

	Params::SQBlueprintLibrary_SpawnLastingEffect Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LastingEffect = LastingEffect;
	Parms.SpawnLocation = std::move(SpawnLocation);
	Parms.SpawnRotation = std::move(SpawnRotation);
	Parms.CollisionHandlingMethod = CollisionHandlingMethod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.SpawnSoundAttachedWithParameters
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class USoundBase*                       Sound                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  AttachToComponent                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAudioComponentParam>     AudioParameters                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
// class FName                             AttachPointName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// EAttachLocation                         LocationType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bStopWhenAttachedToDestroyed                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VolumeMultiplier                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PitchMultiplier                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundAttenuation*                AttenuationSettings                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundConcurrency*                ConcurrencySettings                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAudioComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAudioComponent* USQBlueprintLibrary::SpawnSoundAttachedWithParameters(class USoundBase* Sound, class USceneComponent* AttachToComponent, const TArray<struct FAudioComponentParam>& AudioParameters, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "SpawnSoundAttachedWithParameters");

	Params::SQBlueprintLibrary_SpawnSoundAttachedWithParameters Parms{};

	Parms.Sound = Sound;
	Parms.AttachToComponent = AttachToComponent;
	Parms.AudioParameters = std::move(AudioParameters);
	Parms.AttachPointName = AttachPointName;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.LocationType = LocationType;
	Parms.bStopWhenAttachedToDestroyed = bStopWhenAttachedToDestroyed;
	Parms.VolumeMultiplier = VolumeMultiplier;
	Parms.PitchMultiplier = PitchMultiplier;
	Parms.StartTime = StartTime;
	Parms.AttenuationSettings = AttenuationSettings;
	Parms.ConcurrencySettings = ConcurrencySettings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.SQLogMessage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             Message                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EBPLogSeverity                          MessageType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::SQLogMessage(const class FText& Message, EBPLogSeverity MessageType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "SQLogMessage");

	Params::SQBlueprintLibrary_SQLogMessage Parms{};

	Parms.Message = std::move(Message);
	Parms.MessageType = MessageType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlueprintLibrary.SQLogOutputAndMessage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Target                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBPLogSeverity                          Severity                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::SQLogOutputAndMessage(const class UObject* Target, const EBPLogSeverity Severity, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "SQLogOutputAndMessage");

	Params::SQBlueprintLibrary_SQLogOutputAndMessage Parms{};

	Parms.Target = Target;
	Parms.Severity = Severity;
	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlueprintLibrary.TransformPiPScopeUVToWorldPos
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class USQPipScopeCaptureComponent*      PiPComponent                                           (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        UV                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USQBlueprintLibrary::TransformPiPScopeUVToWorldPos(const class USQPipScopeCaptureComponent* PiPComponent, const struct FVector2D& UV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "TransformPiPScopeUVToWorldPos");

	Params::SQBlueprintLibrary_TransformPiPScopeUVToWorldPos Parms{};

	Parms.PiPComponent = PiPComponent;
	Parms.UV = std::move(UV);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.TransformPointToNewFOV
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          WorldPos                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMatrix                          ViewMatrix                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   PlayerFOV                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SeparateWeaponFOV                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USQBlueprintLibrary::TransformPointToNewFOV(const struct FVector& WorldPos, const struct FMatrix& ViewMatrix, float PlayerFOV, float SeparateWeaponFOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "TransformPointToNewFOV");

	Params::SQBlueprintLibrary_TransformPointToNewFOV Parms{};

	Parms.WorldPos = std::move(WorldPos);
	Parms.ViewMatrix = std::move(ViewMatrix);
	Parms.PlayerFOV = PlayerFOV;
	Parms.SeparateWeaponFOV = SeparateWeaponFOV;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.TransformWorldPosToPiPScopeWorldPos
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class USQPipScopeCaptureComponent*      PiPComponent                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldPos                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        OutUVPoint                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USQBlueprintLibrary::TransformWorldPosToPiPScopeWorldPos(class USQPipScopeCaptureComponent* PiPComponent, const struct FVector& WorldPos, struct FVector2D* OutUVPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "TransformWorldPosToPiPScopeWorldPos");

	Params::SQBlueprintLibrary_TransformWorldPosToPiPScopeWorldPos Parms{};

	Parms.PiPComponent = PiPComponent;
	Parms.WorldPos = std::move(WorldPos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutUVPoint != nullptr)
		*OutUVPoint = std::move(Parms.OutUVPoint);

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.TransformWorldVectorToTangent
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                          WorldVector                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldTangentX                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldTangentY                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldTangentNormal                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USQBlueprintLibrary::TransformWorldVectorToTangent(const struct FVector& WorldVector, const struct FVector& WorldTangentX, const struct FVector& WorldTangentY, const struct FVector& WorldTangentNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "TransformWorldVectorToTangent");

	Params::SQBlueprintLibrary_TransformWorldVectorToTangent Parms{};

	Parms.WorldVector = std::move(WorldVector);
	Parms.WorldTangentX = std::move(WorldTangentX);
	Parms.WorldTangentY = std::move(WorldTangentY);
	Parms.WorldTangentNormal = std::move(WorldTangentNormal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.TryGetDefaultObjectFor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class UObject>              Param_Class                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OutDefaultObject                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBlueprintLibrary::TryGetDefaultObjectFor(TSubclassOf<class UObject> Param_Class, class UObject** OutDefaultObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "TryGetDefaultObjectFor");

	Params::SQBlueprintLibrary_TryGetDefaultObjectFor Parms{};

	Parms.Param_Class = Param_Class;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDefaultObject != nullptr)
		*OutDefaultObject = Parms.OutDefaultObject;

	return Parms.ReturnValue;
}


// Function Squad.SQBlueprintLibrary.UpdateDynamicEasing
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSQDynamicEasingStruct           Easing                                                 (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::UpdateDynamicEasing(struct FSQDynamicEasingStruct& Easing, float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "UpdateDynamicEasing");

	Params::SQBlueprintLibrary_UpdateDynamicEasing Parms{};

	Parms.Easing = std::move(Easing);
	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Easing = std::move(Parms.Easing);
}


// Function Squad.SQBlueprintLibrary.UpdateSpring3D
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSQSpringInterpStruct3D          Spring                                                 (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::UpdateSpring3D(struct FSQSpringInterpStruct3D& Spring, float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "UpdateSpring3D");

	Params::SQBlueprintLibrary_UpdateSpring3D Parms{};

	Parms.Spring = std::move(Spring);
	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Spring = std::move(Parms.Spring);
}


// Function Squad.SQBlueprintLibrary.UpdateTextureOnImage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UImage*                           Image                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2DDynamic*                Texture                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::UpdateTextureOnImage(class UImage* Image, class UTexture2DDynamic* Texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBlueprintLibrary", "UpdateTextureOnImage");

	Params::SQBlueprintLibrary_UpdateTextureOnImage Parms{};

	Parms.Image = Image;
	Parms.Texture = Texture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction Squad.SQBlueprintLibrary.AsyncLoadAssetCompleted__DelegateSignature
// (Public, Delegate)
// Parameters:
// TSoftClassPtr<class UClass>             Param_Class                                            (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::AsyncLoadAssetCompleted__DelegateSignature(TSoftClassPtr<class UClass> Param_Class)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBlueprintLibrary", "AsyncLoadAssetCompleted__DelegateSignature");

	Params::SQBlueprintLibrary_AsyncLoadAssetCompleted__DelegateSignature Parms{};

	Parms.Param_Class = Param_Class;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction Squad.SQBlueprintLibrary.AsyncLoadAssetsCompleted__DelegateSignature
// (Public, Delegate, HasOutParams)
// Parameters:
// TArray<TSoftClassPtr<class UClass>>     Classes                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)

void USQBlueprintLibrary::AsyncLoadAssetsCompleted__DelegateSignature(const TArray<TSoftClassPtr<class UClass>>& Classes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBlueprintLibrary", "AsyncLoadAssetsCompleted__DelegateSignature");

	Params::SQBlueprintLibrary_AsyncLoadAssetsCompleted__DelegateSignature Parms{};

	Parms.Classes = std::move(Classes);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQMovementAdjustmentComponent.OnBeginOverlap
// (Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USQMovementAdjustmentComponent::OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMovementAdjustmentComponent", "OnBeginOverlap");

	Params::SQMovementAdjustmentComponent_OnBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMovementAdjustmentComponent.OnEndOverlap
// (Native, Public)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQMovementAdjustmentComponent::OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMovementAdjustmentComponent", "OnEndOverlap");

	Params::SQMovementAdjustmentComponent_OnEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSettings.GetLogId
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQSettings::GetLogId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSettings", "GetLogId");

	Params::SQSettings_GetLogId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSettings.GetModID
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQSettings::GetModID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSettings", "GetModID");

	Params::SQSettings_GetModID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSettings.GetDisplayName
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             OutDisplayName                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSettings::GetDisplayName(class FText* OutDisplayName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSettings", "GetDisplayName");

	Params::SQSettings_GetDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDisplayName != nullptr)
		*OutDisplayName = std::move(Parms.OutDisplayName);

	return Parms.ReturnValue;
}


// Function Squad.SQSettings.GetId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName USQSettings::GetId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSettings", "GetId");

	Params::SQSettings_GetId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSettings.GetIdAsString
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQSettings::GetIdAsString() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSettings", "GetIdAsString");

	Params::SQSettings_GetIdAsString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMultithreadObject.DoMultiThreadedWork
// (Event, Public, BlueprintCallable, BlueprintEvent)

void USQMultithreadObject::DoMultiThreadedWork()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMultithreadObject", "DoMultiThreadedWork");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQPawn.BlueprintCalcCamera
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InLocation                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         InRotation                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   InFOV                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutLocation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         OutRotation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   OutFOV                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPawn::BlueprintCalcCamera(float DeltaTime, const struct FVector& InLocation, const struct FRotator& InRotation, float InFOV, struct FVector* OutLocation, struct FRotator* OutRotation, float* OutFOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawn", "BlueprintCalcCamera");

	Params::SQPawn_BlueprintCalcCamera Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.InLocation = std::move(InLocation);
	Parms.InRotation = std::move(InRotation);
	Parms.InFOV = InFOV;

	UObject::ProcessEvent(Func, &Parms);

	if (OutLocation != nullptr)
		*OutLocation = std::move(Parms.OutLocation);

	if (OutRotation != nullptr)
		*OutRotation = std::move(Parms.OutRotation);

	if (OutFOV != nullptr)
		*OutFOV = Parms.OutFOV;
}


// DelegateFunction Squad.SQPawn.OnPossessionChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void ASQPawn::OnPossessionChanged__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawn", "OnPossessionChanged__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQPawn.OnRep_Team
// (Native, Public)

void ASQPawn::OnRep_Team()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawn", "OnRep_Team");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPawn.SetTeam
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESQTeam                                 Param_Team                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPawn::SetTeam(ESQTeam Param_Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawn", "SetTeam");

	Params::SQPawn_SetTeam Parms{};

	Parms.Param_Team = Param_Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPawn.GetTeam
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESQTeam                                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESQTeam ASQPawn::GetTeam() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawn", "GetTeam");

	Params::SQPawn_GetTeam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleSeat.GetVehicleEngine
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USQVehicleComponent*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQVehicleComponent* ASQVehicleSeat::GetVehicleEngine()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeat", "GetVehicleEngine");

	Params::SQVehicleSeat_GetVehicleEngine Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleSeat.OnNextItem
// (Native, Public, BlueprintCallable)

void ASQVehicleSeat::OnNextItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeat", "OnNextItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleSeat.OnPrevItem
// (Native, Public, BlueprintCallable)

void ASQVehicleSeat::OnPrevItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeat", "OnPrevItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleSeat.OnRep_SeatHealth
// (Final, Native, Protected)
// Parameters:
// float                                   PreviousHealth                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQVehicleSeat::OnRep_SeatHealth(float PreviousHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeat", "OnRep_SeatHealth");

	Params::SQVehicleSeat_OnRep_SeatHealth Parms{};

	Parms.PreviousHealth = PreviousHealth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleSeat.OnRep_TurnOut
// (Final, Native, Public)

void ASQVehicleSeat::OnRep_TurnOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeat", "OnRep_TurnOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleSeat.OverlayUnzoom
// (Native, Event, Public, BlueprintEvent)

void ASQVehicleSeat::OverlayUnzoom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeat", "OverlayUnzoom");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleSeat.OverlayZoom
// (Native, Event, Public, BlueprintEvent)

void ASQVehicleSeat::OverlayZoom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeat", "OverlayZoom");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleSeat.RequestChangeSeat
// (BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class ASQPlayerController*              Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RequestedSeat                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQVehicleSeat::RequestChangeSeat(class ASQPlayerController* Player, int32 RequestedSeat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeat", "RequestChangeSeat");

	Params::SQVehicleSeat_RequestChangeSeat Parms{};

	Parms.Player = Player;
	Parms.RequestedSeat = RequestedSeat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleSeat.ServerCancelPlayerExit
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class ASQPlayerController*              SPC                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQVehicleSeat::ServerCancelPlayerExit(class ASQPlayerController* SPC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeat", "ServerCancelPlayerExit");

	Params::SQVehicleSeat_ServerCancelPlayerExit Parms{};

	Parms.SPC = SPC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleSeat.ServerOnInteract
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void ASQVehicleSeat::ServerOnInteract()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeat", "ServerOnInteract");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleSeat.ServerSetTurnOut
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQVehicleSeat::ServerSetTurnOut(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeat", "ServerSetTurnOut");

	Params::SQVehicleSeat_ServerSetTurnOut Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleSeat.SetTurnOut
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQVehicleSeat::SetTurnOut(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeat", "SetTurnOut");

	Params::SQVehicleSeat_SetTurnOut Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleSeat.Get1PAttachComponent
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* ASQVehicleSeat::Get1PAttachComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeat", "Get1PAttachComponent");

	Params::SQVehicleSeat_Get1PAttachComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleSeat.Get3PAttachComponent
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* ASQVehicleSeat::Get3PAttachComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeat", "Get3PAttachComponent");

	Params::SQVehicleSeat_Get3PAttachComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleSeat.GetADSCameraLocationComponent
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* ASQVehicleSeat::GetADSCameraLocationComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeat", "GetADSCameraLocationComponent");

	Params::SQVehicleSeat_GetADSCameraLocationComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleSeat.GetCameraComponent
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UCameraComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCameraComponent* ASQVehicleSeat::GetCameraComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeat", "GetCameraComponent");

	Params::SQVehicleSeat_GetCameraComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleSeat.GetDefaultCameraLocationComponent
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* ASQVehicleSeat::GetDefaultCameraLocationComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeat", "GetDefaultCameraLocationComponent");

	Params::SQVehicleSeat_GetDefaultCameraLocationComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleSeat.GetMasterPoseComponent
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class USkinnedMeshComponent*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkinnedMeshComponent* ASQVehicleSeat::GetMasterPoseComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeat", "GetMasterPoseComponent");

	Params::SQVehicleSeat_GetMasterPoseComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleSeat.GetNormalizedSeatHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQVehicleSeat::GetNormalizedSeatHealth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeat", "GetNormalizedSeatHealth");

	Params::SQVehicleSeat_GetNormalizedSeatHealth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleSeat.GetSeatHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQVehicleSeat::GetSeatHealth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeat", "GetSeatHealth");

	Params::SQVehicleSeat_GetSeatHealth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleSeat.GetSoldierAttachComponent
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* ASQVehicleSeat::GetSoldierAttachComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeat", "GetSoldierAttachComponent");

	Params::SQVehicleSeat_GetSoldierAttachComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleSeat.GetVehicle
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQVehicle*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQVehicle* ASQVehicleSeat::GetVehicle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeat", "GetVehicle");

	Params::SQVehicleSeat_GetVehicle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleSeat.GetVehicleInventory
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQVehicleInventoryComponent*     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQVehicleInventoryComponent* ASQVehicleSeat::GetVehicleInventory() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeat", "GetVehicleInventory");

	Params::SQVehicleSeat_GetVehicleInventory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleSeat.GetVehicleResourceInventory
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQVehicleResourceWeaponInventoryComponent*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQVehicleResourceWeaponInventoryComponent* ASQVehicleSeat::GetVehicleResourceInventory() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeat", "GetVehicleResourceInventory");

	Params::SQVehicleSeat_GetVehicleResourceInventory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleSeat.GetVehicleSeatComponent
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQVehicleSeatComponent*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQVehicleSeatComponent* ASQVehicleSeat::GetVehicleSeatComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeat", "GetVehicleSeatComponent");

	Params::SQVehicleSeat_GetVehicleSeatComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleSeat.GetWeaponAttachComponent
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* ASQVehicleSeat::GetWeaponAttachComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeat", "GetWeaponAttachComponent");

	Params::SQVehicleSeat_GetWeaponAttachComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicle.ActivateMistOnCenterOfMassEntry
// (Native, Public)

void ASQVehicle::ActivateMistOnCenterOfMassEntry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "ActivateMistOnCenterOfMassEntry");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicle.AmmoUpdated
// (Final, Native, Public)

void ASQVehicle::AmmoUpdated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "AmmoUpdated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicle.BPClientDestroyed
// (Event, Public, BlueprintEvent)

void ASQVehicle::BPClientDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "BPClientDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQVehicle.BurnVehicle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   VehicleBurnAmount                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SoldierBurnAmount                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      BurnCauser                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQVehicle::BurnVehicle(float VehicleBurnAmount, float SoldierBurnAmount, class AController* BurnCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "BurnVehicle");

	Params::SQVehicle_BurnVehicle Parms{};

	Parms.VehicleBurnAmount = VehicleBurnAmount;
	Parms.SoldierBurnAmount = SoldierBurnAmount;
	Parms.BurnCauser = BurnCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicle.CanActAsRearmSource
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQVehicle::CanActAsRearmSource()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "CanActAsRearmSource");

	Params::SQVehicle_CanActAsRearmSource Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicle.DeactivateMistOnCenterOfMassEntry
// (Native, Public)

void ASQVehicle::DeactivateMistOnCenterOfMassEntry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "DeactivateMistOnCenterOfMassEntry");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicle.DebugVehicleFullHealth
// (Final, Exec, Native, Public)

void ASQVehicle::DebugVehicleFullHealth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "DebugVehicleFullHealth");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicle.DrivetrainComponentDestroyed
// (Event, Public, BlueprintEvent)
// Parameters:
// class USQDriveTrainComponent*           DriveTrainComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQVehicle::DrivetrainComponentDestroyed(class USQDriveTrainComponent* DriveTrainComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "DrivetrainComponentDestroyed");

	Params::SQVehicle_DrivetrainComponentDestroyed Parms{};

	Parms.DriveTrainComponent = DriveTrainComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQVehicle.DrivetrainComponentRepaired
// (Event, Public, BlueprintEvent)
// Parameters:
// class USQDriveTrainComponent*           DriveTrainComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQVehicle::DrivetrainComponentRepaired(class USQDriveTrainComponent* DriveTrainComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "DrivetrainComponentRepaired");

	Params::SQVehicle_DrivetrainComponentRepaired Parms{};

	Parms.DriveTrainComponent = DriveTrainComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQVehicle.EjectAllPlayers
// (Native, Public, BlueprintCallable)

void ASQVehicle::EjectAllPlayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "EjectAllPlayers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicle.EjectPlayerFromSeat
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Seat                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQVehicle::EjectPlayerFromSeat(int32 Seat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "EjectPlayerFromSeat");

	Params::SQVehicle_EjectPlayerFromSeat Parms{};

	Parms.Seat = Seat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicle.EnteredVehicle
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASQSoldier*                       Soldier                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQVehicleSeatComponent*          NewSeat                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQVehicle::EnteredVehicle(class ASQSoldier* Soldier, class USQVehicleSeatComponent* NewSeat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "EnteredVehicle");

	Params::SQVehicle_EnteredVehicle Parms{};

	Parms.Soldier = Soldier;
	Parms.NewSeat = NewSeat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicle.EnterTurnOut
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQVehicleSeatComponent*          Seat                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQVehicle::EnterTurnOut(class USQVehicleSeatComponent* Seat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "EnterTurnOut");

	Params::SQVehicle_EnterTurnOut Parms{};

	Parms.Seat = Seat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicle.ExitTurnOut
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQVehicleSeatComponent*          Seat                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQVehicle::ExitTurnOut(class USQVehicleSeatComponent* Seat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "ExitTurnOut");

	Params::SQVehicle_ExitTurnOut Parms{};

	Parms.Seat = Seat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicle.FindFirstAvailableSeat
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ASQPlayerController*              SPC                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeDriverSeat                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQVehicle::FindFirstAvailableSeat(class ASQPlayerController* SPC, bool bIncludeDriverSeat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "FindFirstAvailableSeat");

	Params::SQVehicle_FindFirstAvailableSeat Parms{};

	Parms.SPC = SPC;
	Parms.bIncludeDriverSeat = bIncludeDriverSeat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicle.GetExitPoints
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class USQVehicleExitPointComponent*>OutExitPoints                                          (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASQVehicle::GetExitPoints(TArray<class USQVehicleExitPointComponent*>* OutExitPoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "GetExitPoints");

	Params::SQVehicle_GetExitPoints Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutExitPoints != nullptr)
		*OutExitPoints = std::move(Parms.OutExitPoints);
}


// Function Squad.SQVehicle.LeftVehicle
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASQSoldier*                       Soldier                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQVehicleSeatComponent*          PreviousSeat                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQVehicle::LeftVehicle(class ASQSoldier* Soldier, class USQVehicleSeatComponent* PreviousSeat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "LeftVehicle");

	Params::SQVehicle_LeftVehicle Parms{};

	Parms.Soldier = Soldier;
	Parms.PreviousSeat = PreviousSeat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicle.MulticastPlayDamageEffects
// (Net, Native, Event, NetMulticast, Protected, HasDefaults)
// Parameters:
// TSubclassOf<class UDamageType>          DamageTypeClass                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ImpactLocationZeroBased                                (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQVehicle::MulticastPlayDamageEffects(TSubclassOf<class UDamageType> DamageTypeClass, const struct FVector& ImpactLocationZeroBased)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "MulticastPlayDamageEffects");

	Params::SQVehicle_MulticastPlayDamageEffects Parms{};

	Parms.DamageTypeClass = DamageTypeClass;
	Parms.ImpactLocationZeroBased = std::move(ImpactLocationZeroBased);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicle.OnCenterOfMassEnterWaterBody
// (Native, Public)

void ASQVehicle::OnCenterOfMassEnterWaterBody()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "OnCenterOfMassEnterWaterBody");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicle.OnCenterOfMassExitWaterBody
// (Native, Public)

void ASQVehicle::OnCenterOfMassExitWaterBody()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "OnCenterOfMassExitWaterBody");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicle.OnEnterBoundary
// (Final, Native, Public)
// Parameters:
// class USQBoundaryListener*              Listener                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQBoundary*                      Boundary                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQVehicle::OnEnterBoundary(class USQBoundaryListener* Listener, class ASQBoundary* Boundary)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "OnEnterBoundary");

	Params::SQVehicle_OnEnterBoundary Parms{};

	Parms.Listener = Listener;
	Parms.Boundary = Boundary;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicle.OnExitBoundary
// (Final, Native, Public)
// Parameters:
// class USQBoundaryListener*              Listener                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQBoundary*                      Boundary                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQVehicle::OnExitBoundary(class USQBoundaryListener* Listener, class ASQBoundary* Boundary)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "OnExitBoundary");

	Params::SQVehicle_OnExitBoundary Parms{};

	Parms.Listener = Listener;
	Parms.Boundary = Boundary;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicle.OnRep_DestroyedState
// (Native, Public)

void ASQVehicle::OnRep_DestroyedState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "OnRep_DestroyedState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicle.OnRep_HasBeenDestroyed
// (Native, Protected)

void ASQVehicle::OnRep_HasBeenDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "OnRep_HasBeenDestroyed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicle.OnRep_HealthChanged
// (Final, Native, Public)

void ASQVehicle::OnRep_HealthChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "OnRep_HealthChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicle.OnVehicleRepaired
// (Final, Native, Public)

void ASQVehicle::OnVehicleRepaired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "OnVehicleRepaired");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicle.OnWaterBodyEntered
// (Native, Public)

void ASQVehicle::OnWaterBodyEntered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "OnWaterBodyEntered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicle.OnWaterBodyExited
// (Native, Public)

void ASQVehicle::OnWaterBodyExited()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "OnWaterBodyExited");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicle.OutOfBoundsKillCallback
// (Final, Native, Public)

void ASQVehicle::OutOfBoundsKillCallback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "OutOfBoundsKillCallback");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicle.PlayerRequestLeaveSeat
// (BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class ASQPlayerController*              Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQVehicle::PlayerRequestLeaveSeat(class ASQPlayerController* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "PlayerRequestLeaveSeat");

	Params::SQVehicle_PlayerRequestLeaveSeat Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicle.RepairVehicle
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           SourceRepairer                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQRepairSource                         RepairSource                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RepairAmount                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SoldierHealAmount                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQVehicle::RepairVehicle(const class AActor* SourceRepairer, ESQRepairSource RepairSource, float RepairAmount, float SoldierHealAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "RepairVehicle");

	Params::SQVehicle_RepairVehicle Parms{};

	Parms.SourceRepairer = SourceRepairer;
	Parms.RepairSource = RepairSource;
	Parms.RepairAmount = RepairAmount;
	Parms.SoldierHealAmount = SoldierHealAmount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicle.ResetLastSeatEventTime
// (Final, Native, Public, BlueprintCallable)

void ASQVehicle::ResetLastSeatEventTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "ResetLastSeatEventTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicle.ServerDebugVehicleFullHealth
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void ASQVehicle::ServerDebugVehicleFullHealth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "ServerDebugVehicleFullHealth");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicle.SwitchedSeat
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASQSoldier*                       Soldier                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQVehicleSeatComponent*          PreviousSeat                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQVehicleSeatComponent*          NewSeat                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQVehicle::SwitchedSeat(class ASQSoldier* Soldier, class USQVehicleSeatComponent* PreviousSeat, class USQVehicleSeatComponent* NewSeat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "SwitchedSeat");

	Params::SQVehicle_SwitchedSeat Parms{};

	Parms.Soldier = Soldier;
	Parms.PreviousSeat = PreviousSeat;
	Parms.NewSeat = NewSeat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicle.ToggleMistParticleSystemsDepthCalculation
// (Final, Native, Public)
// Parameters:
// bool                                    bActivate                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQVehicle::ToggleMistParticleSystemsDepthCalculation(bool bActivate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "ToggleMistParticleSystemsDepthCalculation");

	Params::SQVehicle_ToggleMistParticleSystemsDepthCalculation Parms{};

	Parms.bActivate = bActivate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicle.UpdateMistParticleSystemsDepthCalculations
// (Final, Native, Public)

void ASQVehicle::UpdateMistParticleSystemsDepthCalculations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "UpdateMistParticleSystemsDepthCalculations");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicle.GetDriverSeat
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQVehicleSeatComponent*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQVehicleSeatComponent* ASQVehicle::GetDriverSeat() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "GetDriverSeat");

	Params::SQVehicle_GetDriverSeat Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicle.GetEmergencyRecoveryComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQVehicleEmergencyRecoveryComponent*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQVehicleEmergencyRecoveryComponent* ASQVehicle::GetEmergencyRecoveryComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "GetEmergencyRecoveryComponent");

	Params::SQVehicle_GetEmergencyRecoveryComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicle.GetInventoryAmmoPoints
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQVehicle::GetInventoryAmmoPoints() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "GetInventoryAmmoPoints");

	Params::SQVehicle_GetInventoryAmmoPoints Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicle.GetNumOccupants
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQVehicle::GetNumOccupants() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "GetNumOccupants");

	Params::SQVehicle_GetNumOccupants Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicle.GetPlayersSeat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              Player                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQVehicle::GetPlayersSeat(const class ASQPlayerController* Player) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "GetPlayersSeat");

	Params::SQVehicle_GetPlayersSeat Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicle.GetSeats
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class USQVehicleSeatComponent*>  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class USQVehicleSeatComponent*> ASQVehicle::GetSeats() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "GetSeats");

	Params::SQVehicle_GetSeats Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicle.HasResourceInventory
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQVehicle::HasResourceInventory() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "HasResourceInventory");

	Params::SQVehicle_HasResourceInventory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicle.IsOutOfMapBounds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQVehicle::IsOutOfMapBounds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "IsOutOfMapBounds");

	Params::SQVehicle_IsOutOfMapBounds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicle.IsSeatHeldByClaimingSquad
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Seat                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQVehicle::IsSeatHeldByClaimingSquad(int32 Seat) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "IsSeatHeldByClaimingSquad");

	Params::SQVehicle_IsSeatHeldByClaimingSquad Parms{};

	Parms.Seat = Seat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicle.IsValidSeat
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Seat                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQVehicle::IsValidSeat(int32 Seat) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "IsValidSeat");

	Params::SQVehicle_IsValidSeat Parms{};

	Parms.Seat = Seat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicle.IsVehicleEmpty
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQVehicle::IsVehicleEmpty() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "IsVehicleEmpty");

	Params::SQVehicle_IsVehicleEmpty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicle.IsVehicleFull
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQVehicle::IsVehicleFull() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "IsVehicleFull");

	Params::SQVehicle_IsVehicleFull Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicle.SetEffectPhysmatParams
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class UParticleSystemComponent*         ParticleSystem                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQPhysicalMaterial*              SQPhysMat                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQVehicle::SetEffectPhysmatParams(class UParticleSystemComponent* ParticleSystem, class USQPhysicalMaterial* SQPhysMat) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "SetEffectPhysmatParams");

	Params::SQVehicle_SetEffectPhysmatParams Parms{};

	Parms.ParticleSystem = ParticleSystem;
	Parms.SQPhysMat = SQPhysMat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicle.SetFXSystemPhysmatParams
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class UFXSystemComponent*               FXSystemComponent                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQPhysicalMaterial*              SQPhysMat                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQVehicle::SetFXSystemPhysmatParams(class UFXSystemComponent* FXSystemComponent, class USQPhysicalMaterial* SQPhysMat) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicle", "SetFXSystemPhysmatParams");

	Params::SQVehicle_SetFXSystemPhysmatParams Parms{};

	Parms.FXSystemComponent = FXSystemComponent;
	Parms.SQPhysMat = SQPhysMat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGroundVehicle.DoesVehicleHaveWheels
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQGroundVehicle::DoesVehicleHaveWheels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGroundVehicle", "DoesVehicleHaveWheels");

	Params::SQGroundVehicle_DoesVehicleHaveWheels Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGroundVehicle.EjectAllExposedSeatPlayers
// (Native, Public, BlueprintCallable)

void ASQGroundVehicle::EjectAllExposedSeatPlayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGroundVehicle", "EjectAllExposedSeatPlayers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGroundVehicle.OnRagdollBeginOverlap
// (Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASQGroundVehicle::OnRagdollBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGroundVehicle", "OnRagdollBeginOverlap");

	Params::SQGroundVehicle_OnRagdollBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGroundVehicle.OnRep_EngineActive
// (Native, Protected)

void ASQGroundVehicle::OnRep_EngineActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGroundVehicle", "OnRep_EngineActive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGroundVehicle.OnRep_EngineToggleActive
// (Native, Protected)

void ASQGroundVehicle::OnRep_EngineToggleActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGroundVehicle", "OnRep_EngineToggleActive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGroundVehicle.OnRep_ShouldSimulate
// (Native, Protected)

void ASQGroundVehicle::OnRep_ShouldSimulate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGroundVehicle", "OnRep_ShouldSimulate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGroundVehicle.ServerSetEngineActiveInput
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)
// Parameters:
// bool                                    bNewEngineActive                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGroundVehicle::ServerSetEngineActiveInput(bool bNewEngineActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGroundVehicle", "ServerSetEngineActiveInput");

	Params::SQGroundVehicle_ServerSetEngineActiveInput Parms{};

	Parms.bNewEngineActive = bNewEngineActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGroundVehicle.ServerSetEngineBoostPressed
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)
// Parameters:
// bool                                    bInHasEngineBoostBeenPressed                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGroundVehicle::ServerSetEngineBoostPressed(bool bInHasEngineBoostBeenPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGroundVehicle", "ServerSetEngineBoostPressed");

	Params::SQGroundVehicle_ServerSetEngineBoostPressed Parms{};

	Parms.bInHasEngineBoostBeenPressed = bInHasEngineBoostBeenPressed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGroundVehicle.ServerSetEngineToggleActiveInput
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)
// Parameters:
// bool                                    bInIsEngineToggleActive                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGroundVehicle::ServerSetEngineToggleActiveInput(bool bInIsEngineToggleActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGroundVehicle", "ServerSetEngineToggleActiveInput");

	Params::SQGroundVehicle_ServerSetEngineToggleActiveInput Parms{};

	Parms.bInIsEngineToggleActive = bInIsEngineToggleActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGroundVehicle.ToggleWheelUnderwaterTimer
// (Native, Public)
// Parameters:
// bool                                    bActivated                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGroundVehicle::ToggleWheelUnderwaterTimer(bool bActivated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGroundVehicle", "ToggleWheelUnderwaterTimer");

	Params::SQGroundVehicle_ToggleWheelUnderwaterTimer Parms{};

	Parms.bActivated = bActivated;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGroundVehicle.UpdateIsFlying
// (Native, Public)

void ASQGroundVehicle::UpdateIsFlying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGroundVehicle", "UpdateIsFlying");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGroundVehicle.UpdateIsHardLanding
// (Native, Public)

void ASQGroundVehicle::UpdateIsHardLanding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGroundVehicle", "UpdateIsHardLanding");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGroundVehicle.UpdateWheelUnderwaterDepth
// (Native, Public)

void ASQGroundVehicle::UpdateWheelUnderwaterDepth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGroundVehicle", "UpdateWheelUnderwaterDepth");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGroundVehicle.GetCurrentEngineToggleElapsedTime
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQGroundVehicle::GetCurrentEngineToggleElapsedTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGroundVehicle", "GetCurrentEngineToggleElapsedTime");

	Params::SQGroundVehicle_GetCurrentEngineToggleElapsedTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGroundVehicle.GetCurrentEngineTogglePercentage
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQGroundVehicle::GetCurrentEngineTogglePercentage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGroundVehicle", "GetCurrentEngineTogglePercentage");

	Params::SQGroundVehicle_GetCurrentEngineTogglePercentage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGroundVehicle.GetCurrentEngineToggleRequiredDuration
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQGroundVehicle::GetCurrentEngineToggleRequiredDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGroundVehicle", "GetCurrentEngineToggleRequiredDuration");

	Params::SQGroundVehicle_GetCurrentEngineToggleRequiredDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGroundVehicle.GetEngineLoad
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQGroundVehicle::GetEngineLoad() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGroundVehicle", "GetEngineLoad");

	Params::SQGroundVehicle_GetEngineLoad Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGroundVehicle.GetEngineMaxRPM
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQGroundVehicle::GetEngineMaxRPM() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGroundVehicle", "GetEngineMaxRPM");

	Params::SQGroundVehicle_GetEngineMaxRPM Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGroundVehicle.GetEngineRPM
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQGroundVehicle::GetEngineRPM() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGroundVehicle", "GetEngineRPM");

	Params::SQGroundVehicle_GetEngineRPM Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGroundVehicle.GetForwardSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQGroundVehicle::GetForwardSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGroundVehicle", "GetForwardSpeed");

	Params::SQGroundVehicle_GetForwardSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGroundVehicle.IsEngineActive
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQGroundVehicle::IsEngineActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGroundVehicle", "IsEngineActive");

	Params::SQGroundVehicle_IsEngineActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGroundVehicle.IsEngineToggleActive
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQGroundVehicle::IsEngineToggleActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGroundVehicle", "IsEngineToggleActive");

	Params::SQGroundVehicle_IsEngineToggleActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGroundVehicle.IsHandbrakeActive
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQGroundVehicle::IsHandbrakeActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGroundVehicle", "IsHandbrakeActive");

	Params::SQGroundVehicle_IsHandbrakeActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQWheeledVehicleBase.DestroyWheel
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class USQDriveTrainComponent*           DriveTrainComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReverseDamage                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQWheeledVehicleBase::DestroyWheel(class USQDriveTrainComponent* DriveTrainComponent, bool bReverseDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWheeledVehicleBase", "DestroyWheel");

	Params::SQWheeledVehicleBase_DestroyWheel Parms{};

	Parms.DriveTrainComponent = DriveTrainComponent;
	Parms.bReverseDamage = bReverseDamage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMultiThreadedFunctionLibrary.QueueBlueprintMultithreadTask
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USQMultithreadObject*             MultithreadObject                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(class USQMultithreadObject* CompletedObject)>OnCompleted                                            (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void USQMultiThreadedFunctionLibrary::QueueBlueprintMultithreadTask(class USQMultithreadObject* MultithreadObject, TDelegate<void(class USQMultithreadObject* CompletedObject)> OnCompleted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQMultiThreadedFunctionLibrary", "QueueBlueprintMultithreadTask");

	Params::SQMultiThreadedFunctionLibrary_QueueBlueprintMultithreadTask Parms{};

	Parms.MultithreadObject = MultithreadObject;
	Parms.OnCompleted = OnCompleted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ApprovalEntryExpireOnClient
// (Final, Native, Private)
// Parameters:
// uint32                                  Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ApprovalEntryExpireOnClient(uint32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ApprovalEntryExpireOnClient");

	Params::SQPlayerController_ApprovalEntryExpireOnClient Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ApprovalEntryExpireOnServer
// (Final, Native, Private)
// Parameters:
// uint32                                  Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ApprovalEntryExpireOnServer(uint32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ApprovalEntryExpireOnServer");

	Params::SQPlayerController_ApprovalEntryExpireOnServer Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ApproveQueue
// (Final, Native, Public, BlueprintCallable)

void ASQPlayerController::ApproveQueue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ApproveQueue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ApproveVehicleClaim
// (Exec, Native, Public)

void ASQPlayerController::ApproveVehicleClaim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ApproveVehicleClaim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.BlueprintOnMatchEnded
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   WinningTeam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LosingTeam                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   WinnerTickets                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LoserTickets                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::BlueprintOnMatchEnded(int32 WinningTeam, int32 LosingTeam, int32 WinnerTickets, int32 LoserTickets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "BlueprintOnMatchEnded");

	Params::SQPlayerController_BlueprintOnMatchEnded Parms{};

	Parms.WinningTeam = WinningTeam;
	Parms.LosingTeam = LosingTeam;
	Parms.WinnerTickets = WinnerTickets;
	Parms.LoserTickets = LoserTickets;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQPlayerController.BlueprintOnMatchStarted
// (Event, Public, BlueprintEvent)

void ASQPlayerController::BlueprintOnMatchStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "BlueprintOnMatchStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQPlayerController.BlueprintPlayerDied
// (Event, Public, BlueprintEvent)

void ASQPlayerController::BlueprintPlayerDied()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "BlueprintPlayerDied");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQPlayerController.BlueprintPlayerSpawned
// (Event, Public, BlueprintEvent)

void ASQPlayerController::BlueprintPlayerSpawned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "BlueprintPlayerSpawned");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQPlayerController.BP_ExposeUnavailabilityReason
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FDataTableRowHandle              InReason                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ASQPlayerController::BP_ExposeUnavailabilityReason(const struct FDataTableRowHandle& InReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "BP_ExposeUnavailabilityReason");

	Params::SQPlayerController_BP_ExposeUnavailabilityReason Parms{};

	Parms.InReason = std::move(InReason);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQPlayerController.BP_FailPlaceDeployableFromEquippable
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ASQEquipableItem*                 Equippable                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::BP_FailPlaceDeployableFromEquippable(class ASQEquipableItem* Equippable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "BP_FailPlaceDeployableFromEquippable");

	Params::SQPlayerController_BP_FailPlaceDeployableFromEquippable Parms{};

	Parms.Equippable = Equippable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQPlayerController.BP_InitializeDeployableFromEquippable
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ASQDeployableItem*                DeployableItem                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQEquipableItem*                 Equippable                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::BP_InitializeDeployableFromEquippable(class ASQDeployableItem* DeployableItem, class ASQEquipableItem* Equippable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "BP_InitializeDeployableFromEquippable");

	Params::SQPlayerController_BP_InitializeDeployableFromEquippable Parms{};

	Parms.DeployableItem = DeployableItem;
	Parms.Equippable = Equippable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQPlayerController.BPHasAccessLevel
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ESQAdminAccessLevels                    RequestedLevel                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerController::BPHasAccessLevel(ESQAdminAccessLevels RequestedLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "BPHasAccessLevel");

	Params::SQPlayerController_BPHasAccessLevel Parms{};

	Parms.RequestedLevel = RequestedLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.BPServerRearmWeapons
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TScriptInterface<class ISQRearmSource>  RearmSource                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// TArray<struct FSQRearmWeaponRequest>    RearmRequest                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ASQPlayerController::BPServerRearmWeapons(const TScriptInterface<class ISQRearmSource>& RearmSource, const TArray<struct FSQRearmWeaponRequest>& RearmRequest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "BPServerRearmWeapons");

	Params::SQPlayerController_BPServerRearmWeapons Parms{};

	Parms.RearmSource = RearmSource;
	Parms.RearmRequest = std::move(RearmRequest);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.BPTraceMarkerLocation
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// TSubclassOf<class ASQMapMarker>         MarkerClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Start                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          End                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::BPTraceMarkerLocation(TSubclassOf<class ASQMapMarker> MarkerClass, const struct FVector& Start, const struct FVector& End)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "BPTraceMarkerLocation");

	Params::SQPlayerController_BPTraceMarkerLocation Parms{};

	Parms.MarkerClass = MarkerClass;
	Parms.Start = std::move(Start);
	Parms.End = std::move(End);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQPlayerController.CancelEmote
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USQEmotesData*                    EmoteData                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::CancelEmote(const class USQEmotesData* EmoteData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "CancelEmote");

	Params::SQPlayerController_CancelEmote Parms{};

	Parms.EmoteData = EmoteData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.CancelPendingDeployable
// (Final, Native, Public, BlueprintCallable)

void ASQPlayerController::CancelPendingDeployable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "CancelPendingDeployable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ChangeRole
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class USQRoleSettings*                  NewRole                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bGivePartialAmmo                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLeavingSquad                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ChangeRole(class USQRoleSettings* NewRole, bool bGivePartialAmmo, bool bLeavingSquad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ChangeRole");

	Params::SQPlayerController_ChangeRole Parms{};

	Parms.NewRole = NewRole;
	Parms.bGivePartialAmmo = bGivePartialAmmo;
	Parms.bLeavingSquad = bLeavingSquad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ChangeRoleFromDeployable
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class USQRoleSettings*                  NewRole                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQDeployable*                    Deployable                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ChangeRoleFromDeployable(class USQRoleSettings* NewRole, class ASQDeployable* Deployable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ChangeRoleFromDeployable");

	Params::SQPlayerController_ChangeRoleFromDeployable Parms{};

	Parms.NewRole = NewRole;
	Parms.Deployable = Deployable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ChangeTeams
// (Final, Exec, Native, Public, BlueprintCallable)

void ASQPlayerController::ChangeTeams()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ChangeTeams");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ChangeTeamsWithId
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewTeam                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ChangeTeamsWithId(int32 NewTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ChangeTeamsWithId");

	Params::SQPlayerController_ChangeTeamsWithId Parms{};

	Parms.NewTeam = NewTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.Chat
// (Exec, Native, Public)
// Parameters:
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQChat                                 ChatType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::Chat(const class FString& Msg, const ESQChat ChatType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "Chat");

	Params::SQPlayerController_Chat Parms{};

	Parms.Msg = std::move(Msg);
	Parms.ChatType = ChatType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ChatToAll
// (Exec, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ChatToAll(const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ChatToAll");

	Params::SQPlayerController_ChatToAll Parms{};

	Parms.Msg = std::move(Msg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ChatToSquad
// (Exec, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ChatToSquad(const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ChatToSquad");

	Params::SQPlayerController_ChatToSquad Parms{};

	Parms.Msg = std::move(Msg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ChatToTeam
// (Exec, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ChatToTeam(const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ChatToTeam");

	Params::SQPlayerController_ChatToTeam Parms{};

	Parms.Msg = std::move(Msg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.CheckForAdmin
// (Final, Native, Public)

void ASQPlayerController::CheckForAdmin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "CheckForAdmin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ClientCloseAmmoBag
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// class ASQDeployableAmmoBag*             Ammobag                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ClientCloseAmmoBag(class ASQDeployableAmmoBag* Ammobag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ClientCloseAmmoBag");

	Params::SQPlayerController_ClientCloseAmmoBag Parms{};

	Parms.Ammobag = Ammobag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ClientCloseDeployableInteractableMenu
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// class ASQDeployableInteractable*        DeployableInteractable                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ClientCloseDeployableInteractableMenu(class ASQDeployableInteractable* DeployableInteractable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ClientCloseDeployableInteractableMenu");

	Params::SQPlayerController_ClientCloseDeployableInteractableMenu Parms{};

	Parms.DeployableInteractable = DeployableInteractable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ClientCreateVehicleOverlayWidget
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// TSubclassOf<class USQVehicleViewWidget> WidgetClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ClientCreateVehicleOverlayWidget(TSubclassOf<class USQVehicleViewWidget> WidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ClientCreateVehicleOverlayWidget");

	Params::SQPlayerController_ClientCreateVehicleOverlayWidget Parms{};

	Parms.WidgetClass = WidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ClientDrawSphere
// (Net, NetReliable, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// struct FVector                          ZeroLocation                                           (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Segments                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           Color                                                  (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    RebaseOntoLocal                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPersistentLines                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Lifetime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           LogLabel                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   DepthPriority                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Thickness                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ClientDrawSphere(const struct FVector& ZeroLocation, float Radius, int32 Segments, const struct FColor& Color, bool RebaseOntoLocal, bool bPersistentLines, float Lifetime, const class FString& LogLabel, uint8 DepthPriority, float Thickness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ClientDrawSphere");

	Params::SQPlayerController_ClientDrawSphere Parms{};

	Parms.ZeroLocation = std::move(ZeroLocation);
	Parms.Radius = Radius;
	Parms.Segments = Segments;
	Parms.Color = std::move(Color);
	Parms.RebaseOntoLocal = RebaseOntoLocal;
	Parms.bPersistentLines = bPersistentLines;
	Parms.Lifetime = Lifetime;
	Parms.LogLabel = std::move(LogLabel);
	Parms.DepthPriority = DepthPriority;
	Parms.Thickness = Thickness;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ClientEndHealing
// (Net, NetReliable, Native, Event, Public, NetClient)

void ASQPlayerController::ClientEndHealing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ClientEndHealing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ClientEndOnlineGame
// (Net, NetReliable, Native, Event, Public, NetClient)

void ASQPlayerController::ClientEndOnlineGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ClientEndOnlineGame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ClientExposeUnavailabilityReason
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable, NetValidate)
// Parameters:
// struct FDataTableRowHandle              InReason                                               (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ASQPlayerController::ClientExposeUnavailabilityReason(const struct FDataTableRowHandle& InReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ClientExposeUnavailabilityReason");

	Params::SQPlayerController_ClientExposeUnavailabilityReason Parms{};

	Parms.InReason = std::move(InReason);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ClientGameStarted
// (Net, NetReliable, Native, Event, Public, NetClient)

void ASQPlayerController::ClientGameStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ClientGameStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ClientHideVehicleRadial
// (Net, NetReliable, Native, Event, Public, NetClient)

void ASQPlayerController::ClientHideVehicleRadial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ClientHideVehicleRadial");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ClientIgnoreWeaponInput
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                                    bIgnore                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ClientIgnoreWeaponInput(bool bIgnore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ClientIgnoreWeaponInput");

	Params::SQPlayerController_ClientIgnoreWeaponInput Parms{};

	Parms.bIgnore = bIgnore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ClientOnPlayerToggleVoice_Editor
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FUniqueNetIdRepl                 TalkingPlayerId                                        (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQVoiceChannel                         VoiceChannel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ClientOnPlayerToggleVoice_Editor(const struct FUniqueNetIdRepl& TalkingPlayerId, ESQVoiceChannel VoiceChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ClientOnPlayerToggleVoice_Editor");

	Params::SQPlayerController_ClientOnPlayerToggleVoice_Editor Parms{};

	Parms.TalkingPlayerId = std::move(TalkingPlayerId);
	Parms.VoiceChannel = VoiceChannel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ClientOpenAmmoBag
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// class ASQDeployableAmmoBag*             Ammobag                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ClientOpenAmmoBag(class ASQDeployableAmmoBag* Ammobag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ClientOpenAmmoBag");

	Params::SQPlayerController_ClientOpenAmmoBag Parms{};

	Parms.Ammobag = Ammobag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ClientOpenDeployableInteractableMenu
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// class ASQDeployableInteractable*        DeployableInteractable                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ClientOpenDeployableInteractableMenu(class ASQDeployableInteractable* DeployableInteractable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ClientOpenDeployableInteractableMenu");

	Params::SQPlayerController_ClientOpenDeployableInteractableMenu Parms{};

	Parms.DeployableInteractable = DeployableInteractable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ClientPushApprovalMessage
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// uint32                                  Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQApprovalEntryRequest          ApprovalEntry                                          (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class ASQPlayerState*                   Requester                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ClientPushApprovalMessage(uint32 Key, const struct FSQApprovalEntryRequest& ApprovalEntry, const class ASQPlayerState* Requester)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ClientPushApprovalMessage");

	Params::SQPlayerController_ClientPushApprovalMessage Parms{};

	Parms.Key = Key;
	Parms.ApprovalEntry = std::move(ApprovalEntry);
	Parms.Requester = Requester;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ClientRemoveVehicleOverlayWidget
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)

void ASQPlayerController::ClientRemoveVehicleOverlayWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ClientRemoveVehicleOverlayWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ClientReportServerTime
// (Net, NetReliable, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// struct FDateTime                        InRequestClientUTCTime                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime                        InServerUTCTime                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   WaterTimeSeconds                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ClientReportServerTime(const struct FDateTime& InRequestClientUTCTime, const struct FDateTime& InServerUTCTime, float WaterTimeSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ClientReportServerTime");

	Params::SQPlayerController_ClientReportServerTime Parms{};

	Parms.InRequestClientUTCTime = std::move(InRequestClientUTCTime);
	Parms.InServerUTCTime = std::move(InServerUTCTime);
	Parms.WaterTimeSeconds = WaterTimeSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ClientResetInventoryWeaponIndex
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)

void ASQPlayerController::ClientResetInventoryWeaponIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ClientResetInventoryWeaponIndex");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ClientSendLineToConsole
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class FString                           Line                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ClientSendLineToConsole(const class FString& Line)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ClientSendLineToConsole");

	Params::SQPlayerController_ClientSendLineToConsole Parms{};

	Parms.Line = std::move(Line);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ClientSendRoundEndEvent
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// int32                                   WinningTeam                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LosingTeam                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   WinnerTickets                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LoserTickets                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ClientSendRoundEndEvent(int32 WinningTeam, int32 LosingTeam, int32 WinnerTickets, int32 LoserTickets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ClientSendRoundEndEvent");

	Params::SQPlayerController_ClientSendRoundEndEvent Parms{};

	Parms.WinningTeam = WinningTeam;
	Parms.LosingTeam = LosingTeam;
	Parms.WinnerTickets = WinnerTickets;
	Parms.LoserTickets = LoserTickets;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ClientSetSpectatorCamera
// (Net, NetReliable, Native, Event, Public, HasDefaults, NetClient)
// Parameters:
// struct FVector                          CameraLocation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         CameraRotation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ASQPlayerController::ClientSetSpectatorCamera(const struct FVector& CameraLocation, const struct FRotator& CameraRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ClientSetSpectatorCamera");

	Params::SQPlayerController_ClientSetSpectatorCamera Parms{};

	Parms.CameraLocation = std::move(CameraLocation);
	Parms.CameraRotation = std::move(CameraRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ClientShowToast
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable)
// Parameters:
// class FText                             ToastText                                              (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Lifetime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ClientShowToast(const class FText& ToastText, float Lifetime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ClientShowToast");

	Params::SQPlayerController_ClientShowToast Parms{};

	Parms.ToastText = std::move(ToastText);
	Parms.Lifetime = Lifetime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ClientShowVehicleInventory
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class ASQVehicle*                       Vehicle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESeatProgressMenuMode                   MenuMode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ClientShowVehicleInventory(class ASQVehicle* Vehicle, ESeatProgressMenuMode MenuMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ClientShowVehicleInventory");

	Params::SQPlayerController_ClientShowVehicleInventory Parms{};

	Parms.Vehicle = Vehicle;
	Parms.MenuMode = MenuMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ClientStartingNewPlayer
// (Net, NetReliable, Native, Event, Public, NetClient, NetValidate)

void ASQPlayerController::ClientStartingNewPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ClientStartingNewPlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ClientStartOnlineGame
// (Net, NetReliable, Native, Event, Public, NetClient)

void ASQPlayerController::ClientStartOnlineGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ClientStartOnlineGame");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ClientStartSeatProgressBar
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// float                                   Timer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQVehicle*                       Vehicle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESeatProgressMenuMode                   MenuMode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ClientStartSeatProgressBar(float Timer, class ASQVehicle* Vehicle, ESeatProgressMenuMode MenuMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ClientStartSeatProgressBar");

	Params::SQPlayerController_ClientStartSeatProgressBar Parms{};

	Parms.Timer = Timer;
	Parms.Vehicle = Vehicle;
	Parms.MenuMode = MenuMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ClientSystemMessage
// (Net, NetReliable, Native, Event, Public, HasDefaults, NetClient, BlueprintCallable)
// Parameters:
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MessageLifetime                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQNotificationTypes                    NotificationType                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ClientSystemMessage(const class FString& Message, const struct FLinearColor& Color, const float MessageLifetime, ESQNotificationTypes NotificationType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ClientSystemMessage");

	Params::SQPlayerController_ClientSystemMessage Parms{};

	Parms.Message = std::move(Message);
	Parms.Color = std::move(Color);
	Parms.MessageLifetime = MessageLifetime;
	Parms.NotificationType = NotificationType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ClientWasKickedFromSquad
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class FText                             KickReason                                             (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   SquadId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DurationOfBan                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ClientWasKickedFromSquad(const class FText& KickReason, int32 SquadId, float DurationOfBan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ClientWasKickedFromSquad");

	Params::SQPlayerController_ClientWasKickedFromSquad Parms{};

	Parms.KickReason = std::move(KickReason);
	Parms.SquadId = SquadId;
	Parms.DurationOfBan = DurationOfBan;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.CloseConsole
// (Final, Native, Public, BlueprintCallable)

void ASQPlayerController::CloseConsole()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "CloseConsole");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.CommitSpawn
// (Final, Native, Public, BlueprintCallable)

void ASQPlayerController::CommitSpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "CommitSpawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.CoreStateRefreshVisibility
// (Final, Native, Protected, BlueprintCallable)

void ASQPlayerController::CoreStateRefreshVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "CoreStateRefreshVisibility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.CreateMarker
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults, BlueprintCallable, NetValidate)
// Parameters:
// int32                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ClientId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       IconTexture                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        MapPosition                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LifeT                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           MyOwner                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::CreateMarker(int32 TeamId, int32 ClientId, class UTexture2D* IconTexture, const struct FVector2D& MapPosition, float LifeT, class AActor* MyOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "CreateMarker");

	Params::SQPlayerController_CreateMarker Parms{};

	Parms.TeamId = TeamId;
	Parms.ClientId = ClientId;
	Parms.IconTexture = IconTexture;
	Parms.MapPosition = std::move(MapPosition);
	Parms.LifeT = LifeT;
	Parms.MyOwner = MyOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.CreateRallyPoint
// (Final, Native, Public, BlueprintCallable)

void ASQPlayerController::CreateRallyPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "CreateRallyPoint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.CreateSquad
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Locked                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::CreateSquad(const class FString& Param_Name, bool Locked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "CreateSquad");

	Params::SQPlayerController_CreateSquad Parms{};

	Parms.Param_Name = std::move(Param_Name);
	Parms.Locked = Locked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.DebugAssignSteamTestItem
// (Final, Exec, Native, Private, BlueprintCallable)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::DebugAssignSteamTestItem(int32 ID, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "DebugAssignSteamTestItem");

	Params::SQPlayerController_DebugAssignSteamTestItem Parms{};

	Parms.ID = ID;
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.DebugBugItGo
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Pitch                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Yaw                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Roll                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::DebugBugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "DebugBugItGo");

	Params::SQPlayerController_DebugBugItGo Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.Pitch = Pitch;
	Parms.Yaw = Yaw;
	Parms.Roll = Roll;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.DebugEndMatch
// (Final, Exec, Native, Public, BlueprintCallable)

void ASQPlayerController::DebugEndMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "DebugEndMatch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.DebugForceOriginRebase
// (Final, Exec, Native, Public, BlueprintCallable)

void ASQPlayerController::DebugForceOriginRebase()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "DebugForceOriginRebase");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.DebugPlayEmote
// (Final, Exec, Native, Private, BlueprintCallable)
// Parameters:
// class FString                           EmoteDataName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::DebugPlayEmote(const class FString& EmoteDataName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "DebugPlayEmote");

	Params::SQPlayerController_DebugPlayEmote Parms{};

	Parms.EmoteDataName = std::move(EmoteDataName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.DebugRemoveSteamTestItem
// (Final, Exec, Native, Private, BlueprintCallable)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::DebugRemoveSteamTestItem(int32 ID, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "DebugRemoveSteamTestItem");

	Params::SQPlayerController_DebugRemoveSteamTestItem Parms{};

	Parms.ID = ID;
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.DebugSetServerSecondsNonSeamlessForced
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Seconds                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::DebugSetServerSecondsNonSeamlessForced(float Seconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "DebugSetServerSecondsNonSeamlessForced");

	Params::SQPlayerController_DebugSetServerSecondsNonSeamlessForced Parms{};

	Parms.Seconds = Seconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.DebugSetServerTickRate
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewTickRate                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::DebugSetServerTickRate(float NewTickRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "DebugSetServerTickRate");

	Params::SQPlayerController_DebugSetServerTickRate Parms{};

	Parms.NewTickRate = NewTickRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.DebugSkipStaging
// (Final, Exec, Native, Public, BlueprintCallable)

void ASQPlayerController::DebugSkipStaging()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "DebugSkipStaging");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.DebugToggleCenterDot
// (Final, Exec, Native, Public, BlueprintCallable)

void ASQPlayerController::DebugToggleCenterDot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "DebugToggleCenterDot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.DebugToggleEditorBlastCones
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::DebugToggleEditorBlastCones(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "DebugToggleEditorBlastCones");

	Params::SQPlayerController_DebugToggleEditorBlastCones Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.DebugToggleForceAllowCommanderActions
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::DebugToggleForceAllowCommanderActions(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "DebugToggleForceAllowCommanderActions");

	Params::SQPlayerController_DebugToggleForceAllowCommanderActions Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.DebugToggleForceNoCommanderCooldowns
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::DebugToggleForceNoCommanderCooldowns(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "DebugToggleForceNoCommanderCooldowns");

	Params::SQPlayerController_DebugToggleForceNoCommanderCooldowns Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.DebugToggleInfiniteMags
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::DebugToggleInfiniteMags(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "DebugToggleInfiniteMags");

	Params::SQPlayerController_DebugToggleInfiniteMags Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.DebugToggleNoStaminaDrain
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::DebugToggleNoStaminaDrain(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "DebugToggleNoStaminaDrain");

	Params::SQPlayerController_DebugToggleNoStaminaDrain Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.DebugToggleShowHitreg
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::DebugToggleShowHitreg(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "DebugToggleShowHitreg");

	Params::SQPlayerController_DebugToggleShowHitreg Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.DebugToggleShowRebase
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::DebugToggleShowRebase(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "DebugToggleShowRebase");

	Params::SQPlayerController_DebugToggleShowRebase Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.DebugToggleShowVehicleDamageReceived
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::DebugToggleShowVehicleDamageReceived(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "DebugToggleShowVehicleDamageReceived");

	Params::SQPlayerController_DebugToggleShowVehicleDamageReceived Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.DebugToggleVehicleGodMode
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::DebugToggleVehicleGodMode(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "DebugToggleVehicleGodMode");

	Params::SQPlayerController_DebugToggleVehicleGodMode Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.DisapproveQueue
// (Final, Native, Public, BlueprintCallable)

void ASQPlayerController::DisapproveQueue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "DisapproveQueue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.DisbandFireTeam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   FireTeamIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::DisbandFireTeam(int32 FireTeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "DisbandFireTeam");

	Params::SQPlayerController_DisbandFireTeam Parms{};

	Parms.FireTeamIndex = FireTeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.DisbandSquad
// (Final, Native, Public, BlueprintCallable)

void ASQPlayerController::DisbandSquad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "DisbandSquad");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.FinalizePendingDeployable
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                                    OutSuccess                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::FinalizePendingDeployable(bool* OutSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "FinalizePendingDeployable");

	Params::SQPlayerController_FinalizePendingDeployable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSuccess != nullptr)
		*OutSuccess = Parms.OutSuccess;
}


// Function Squad.SQPlayerController.FinalizePendingDeployableItem
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                                    OutSuccess                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::FinalizePendingDeployableItem(bool* OutSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "FinalizePendingDeployableItem");

	Params::SQPlayerController_FinalizePendingDeployableItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSuccess != nullptr)
		*OutSuccess = Parms.OutSuccess;
}


// Function Squad.SQPlayerController.GetLastDeathTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQPlayerController::GetLastDeathTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "GetLastDeathTime");

	Params::SQPlayerController_GetLastDeathTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.GiveFireTeamLeader
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// class ASQPlayerState*                   NewLeader                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FireTeamIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::GiveFireTeamLeader(class ASQPlayerState* NewLeader, int32 FireTeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "GiveFireTeamLeader");

	Params::SQPlayerController_GiveFireTeamLeader Parms{};

	Parms.NewLeader = NewLeader;
	Parms.FireTeamIndex = FireTeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.GiveSquadLeader
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// class ASQPlayerState*                   NewLeader                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::GiveSquadLeader(class ASQPlayerState* NewLeader)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "GiveSquadLeader");

	Params::SQPlayerController_GiveSquadLeader Parms{};

	Parms.NewLeader = NewLeader;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.GiveUp
// (Exec, Native, Public, BlueprintCallable)

void ASQPlayerController::GiveUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "GiveUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.IsEntryMap
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerController::IsEntryMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "IsEntryMap");

	Params::SQPlayerController_IsEntryMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.IsInactive
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerController::IsInactive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "IsInactive");

	Params::SQPlayerController_IsInactive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.IsInVehicle
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerController::IsInVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "IsInVehicle");

	Params::SQPlayerController_IsInVehicle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.IsPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerController::IsPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "IsPlayer");

	Params::SQPlayerController_IsPlayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.IsShowingSpawnMenu
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerController::IsShowingSpawnMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "IsShowingSpawnMenu");

	Params::SQPlayerController_IsShowingSpawnMenu Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.JoinSquadWithId
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::JoinSquadWithId(int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "JoinSquadWithId");

	Params::SQPlayerController_JoinSquadWithId Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.JoinSquadWithName
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::JoinSquadWithName(const class FString& Param_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "JoinSquadWithName");

	Params::SQPlayerController_JoinSquadWithName Parms{};

	Parms.Param_Name = std::move(Param_Name);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.KickPlayerFromSquad
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// class ASQPlayerState*                   ToKick                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::KickPlayerFromSquad(class ASQPlayerState* ToKick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "KickPlayerFromSquad");

	Params::SQPlayerController_KickPlayerFromSquad Parms{};

	Parms.ToKick = ToKick;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.LeaveSquad
// (Final, Exec, Native, Public, BlueprintCallable)

void ASQPlayerController::LeaveSquad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "LeaveSquad");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.MovePlayerToFireTeam
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// class ASQPlayerState*                   TargetPlayerState                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FireTeamIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::MovePlayerToFireTeam(class ASQPlayerState* TargetPlayerState, int32 FireTeamIndex, int32 Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "MovePlayerToFireTeam");

	Params::SQPlayerController_MovePlayerToFireTeam Parms{};

	Parms.TargetPlayerState = TargetPlayerState;
	Parms.FireTeamIndex = FireTeamIndex;
	Parms.Position = Position;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.MuteAllPlayersExceptSquad
// (Final, Native, Public, BlueprintCallable)

void ASQPlayerController::MuteAllPlayersExceptSquad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "MuteAllPlayersExceptSquad");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.MuteSquad
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// class ASQSquadState*                    MuteSquadState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::MuteSquad(class ASQSquadState* MuteSquadState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "MuteSquad");

	Params::SQPlayerController_MuteSquad Parms{};

	Parms.MuteSquadState = MuteSquadState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.OnAltFireWeaponOverride
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerController::OnAltFireWeaponOverride()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "OnAltFireWeaponOverride");

	Params::SQPlayerController_OnAltFireWeaponOverride Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.OnDelayedSpawnCallback
// (Final, Native, Private)

void ASQPlayerController::OnDelayedSpawnCallback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "OnDelayedSpawnCallback");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.OnEnterBoundary
// (Final, Native, Public)
// Parameters:
// class USQBoundaryListener*              Listener                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQBoundary*                      Boundary                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::OnEnterBoundary(class USQBoundaryListener* Listener, class ASQBoundary* Boundary)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "OnEnterBoundary");

	Params::SQPlayerController_OnEnterBoundary Parms{};

	Parms.Listener = Listener;
	Parms.Boundary = Boundary;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.OnExitBoundary
// (Final, Native, Public)
// Parameters:
// class USQBoundaryListener*              Listener                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQBoundary*                      Boundary                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::OnExitBoundary(class USQBoundaryListener* Listener, class ASQBoundary* Boundary)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "OnExitBoundary");

	Params::SQPlayerController_OnExitBoundary Parms{};

	Parms.Listener = Listener;
	Parms.Boundary = Boundary;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.OnFireWeaponOverride
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerController::OnFireWeaponOverride()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "OnFireWeaponOverride");

	Params::SQPlayerController_OnFireWeaponOverride Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.OnOutOfMapBoundsChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   KillTimestamp                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsOutOfBounds                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::OnOutOfMapBoundsChanged(float KillTimestamp, bool bIsOutOfBounds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "OnOutOfMapBoundsChanged");

	Params::SQPlayerController_OnOutOfMapBoundsChanged Parms{};

	Parms.KillTimestamp = KillTimestamp;
	Parms.bIsOutOfBounds = bIsOutOfBounds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQPlayerController.OnPendingDeathChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   KillTimestamp                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDeathIsPending                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::OnPendingDeathChanged(float KillTimestamp, bool bDeathIsPending)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "OnPendingDeathChanged");

	Params::SQPlayerController_OnPendingDeathChanged Parms{};

	Parms.KillTimestamp = KillTimestamp;
	Parms.bDeathIsPending = bDeathIsPending;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQPlayerController.OnRep_CurrentSeat
// (Final, Native, Public)

void ASQPlayerController::OnRep_CurrentSeat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "OnRep_CurrentSeat");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.OnRep_OutOfMapBoundsKillTimestamp
// (Final, Native, Private)

void ASQPlayerController::OnRep_OutOfMapBoundsKillTimestamp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "OnRep_OutOfMapBoundsKillTimestamp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.OnRep_PendingDeathKillTimestamp
// (Final, Native, Private)

void ASQPlayerController::OnRep_PendingDeathKillTimestamp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "OnRep_PendingDeathKillTimestamp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.OnRep_SquadState
// (Native, Public)
// Parameters:
// class ASQSquadState*                    OldSquadState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::OnRep_SquadState(class ASQSquadState* OldSquadState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "OnRep_SquadState");

	Params::SQPlayerController_OnRep_SquadState Parms{};

	Parms.OldSquadState = OldSquadState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.OnRep_TeamState
// (Native, Public)

void ASQPlayerController::OnRep_TeamState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "OnRep_TeamState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.OnSelectedSpawnActivatedTimeStampChangedSignal
// (Final, Native, Private)
// Parameters:
// class ASQGameSpawn*                     SpawnPoint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::OnSelectedSpawnActivatedTimeStampChangedSignal(class ASQGameSpawn* SpawnPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "OnSelectedSpawnActivatedTimeStampChangedSignal");

	Params::SQPlayerController_OnSelectedSpawnActivatedTimeStampChangedSignal Parms{};

	Parms.SpawnPoint = SpawnPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.OnSelectedSpawnerDestroyed
// (Final, Native, Private)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::OnSelectedSpawnerDestroyed(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "OnSelectedSpawnerDestroyed");

	Params::SQPlayerController_OnSelectedSpawnerDestroyed Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.OnSelectedSpawnSiegedStateChanged
// (Final, Native, Private)
// Parameters:
// class ASQGameSpawn*                     SpawnPoint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::OnSelectedSpawnSiegedStateChanged(class ASQGameSpawn* SpawnPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "OnSelectedSpawnSiegedStateChanged");

	Params::SQPlayerController_OnSelectedSpawnSiegedStateChanged Parms{};

	Parms.SpawnPoint = SpawnPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.OnSpawningEnabledStateChanged
// (Final, Native, Private)
// Parameters:
// class ASQGameSpawn*                     SpawnPoint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::OnSpawningEnabledStateChanged(class ASQGameSpawn* SpawnPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "OnSpawningEnabledStateChanged");

	Params::SQPlayerController_OnSpawningEnabledStateChanged Parms{};

	Parms.SpawnPoint = SpawnPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.OnWorldOriginLocationChangedEventHandler
// (Final, Native, Public, HasDefaults)
// Parameters:
// struct FVector                          WorldOrigin                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::OnWorldOriginLocationChangedEventHandler(const struct FVector& WorldOrigin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "OnWorldOriginLocationChangedEventHandler");

	Params::SQPlayerController_OnWorldOriginLocationChangedEventHandler Parms{};

	Parms.WorldOrigin = std::move(WorldOrigin);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.PlayEmote
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USQEmotesData*                    EmoteData                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::PlayEmote(const class USQEmotesData* EmoteData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "PlayEmote");

	Params::SQPlayerController_PlayEmote Parms{};

	Parms.EmoteData = EmoteData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.PlayEmoteAnim
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESQEmotes                               Emote                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             CustomName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::PlayEmoteAnim(ESQEmotes Emote, const class FName CustomName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "PlayEmoteAnim");

	Params::SQPlayerController_PlayEmoteAnim Parms{};

	Parms.Emote = Emote;
	Parms.CustomName = CustomName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.PlayMusic
// (Native, Public, BlueprintCallable)

void ASQPlayerController::PlayMusic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "PlayMusic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.PrintWeaponHashes
// (Final, Exec, Native, Public, BlueprintCallable)

void ASQPlayerController::PrintWeaponHashes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "PrintWeaponHashes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ProcessApprovalEntry
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   Mode                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ProcessApprovalEntry(uint8 Mode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ProcessApprovalEntry");

	Params::SQPlayerController_ProcessApprovalEntry Parms{};

	Parms.Mode = Mode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.RandomizeOriginOffset
// (Final, Native, Public)

void ASQPlayerController::RandomizeOriginOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "RandomizeOriginOffset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.RequestRole
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USQRoleSettings*                  InRoleSettings                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerController::RequestRole(const class USQRoleSettings* InRoleSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "RequestRole");

	Params::SQPlayerController_RequestRole Parms{};

	Parms.InRoleSettings = InRoleSettings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.RequestRoleRearm
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USQRoleSettings*                  InRoleSettings                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class ISQRearmSource>  InRearmSource                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerController::RequestRoleRearm(const class USQRoleSettings* InRoleSettings, const TScriptInterface<class ISQRearmSource>& InRearmSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "RequestRoleRearm");

	Params::SQPlayerController_RequestRoleRearm Parms{};

	Parms.InRoleSettings = InRoleSettings;
	Parms.InRearmSource = InRearmSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.Respawn
// (Exec, Native, Public, BlueprintCallable)

void ASQPlayerController::Respawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "Respawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.Say
// (Exec, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::Say(const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "Say");

	Params::SQPlayerController_Say Parms{};

	Parms.Msg = std::move(Msg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.SelectSpawn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ASQGameSpawn*                     Spawn                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::SelectSpawn(class ASQGameSpawn* Spawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "SelectSpawn");

	Params::SQPlayerController_SelectSpawn Parms{};

	Parms.Spawn = Spawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerAddApprovalEntry
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FSQApprovalEntryRequest          Entry                                                  (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// EApprovalRequestChannels                Filter                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerAddApprovalEntry(const struct FSQApprovalEntryRequest& Entry, EApprovalRequestChannels Filter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerAddApprovalEntry");

	Params::SQPlayerController_ServerAddApprovalEntry Parms{};

	Parms.Entry = std::move(Entry);
	Parms.Filter = Filter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerCancelEmote
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class FName                             EmoteDataName                                          (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerCancelEmote(const class FName& EmoteDataName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerCancelEmote");

	Params::SQPlayerController_ServerCancelEmote Parms{};

	Parms.EmoteDataName = EmoteDataName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerCancelRestartPlayer
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)

void ASQPlayerController::ServerCancelRestartPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerCancelRestartPlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerChangeSquadLock
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)
// Parameters:
// class ASQSquadState*                    Squad                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerChangeSquadLock(class ASQSquadState* Squad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerChangeSquadLock");

	Params::SQPlayerController_ServerChangeSquadLock Parms{};

	Parms.Squad = Squad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerChat
// (Net, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)
// Parameters:
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQChat                                 ChatType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerChat(const class FString& Msg, const ESQChat ChatType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerChat");

	Params::SQPlayerController_ServerChat Parms{};

	Parms.Msg = std::move(Msg);
	Parms.ChatType = ChatType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerCreateRallyPoint
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void ASQPlayerController::ServerCreateRallyPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerCreateRallyPoint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerCreateSquad
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Locked                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerCreateSquad(const class FString& Param_Name, bool Locked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerCreateSquad");

	Params::SQPlayerController_ServerCreateSquad Parms{};

	Parms.Param_Name = std::move(Param_Name);
	Parms.Locked = Locked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerCreateVehicleOverlayWidget
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)
// Parameters:
// TSubclassOf<class USQVehicleViewWidget> WidgetClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerCreateVehicleOverlayWidget(TSubclassOf<class USQVehicleViewWidget> WidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerCreateVehicleOverlayWidget");

	Params::SQPlayerController_ServerCreateVehicleOverlayWidget Parms{};

	Parms.WidgetClass = WidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerDebugAssignSteamTestItem
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerDebugAssignSteamTestItem(int32 ID, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerDebugAssignSteamTestItem");

	Params::SQPlayerController_ServerDebugAssignSteamTestItem Parms{};

	Parms.ID = ID;
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerDebugBugItGo
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Pitch                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Yaw                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Roll                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerDebugBugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerDebugBugItGo");

	Params::SQPlayerController_ServerDebugBugItGo Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.Pitch = Pitch;
	Parms.Yaw = Yaw;
	Parms.Roll = Roll;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerDebugEndMatch
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void ASQPlayerController::ServerDebugEndMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerDebugEndMatch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerDebugRemoveSteamTestItem
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerDebugRemoveSteamTestItem(int32 ID, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerDebugRemoveSteamTestItem");

	Params::SQPlayerController_ServerDebugRemoveSteamTestItem Parms{};

	Parms.ID = ID;
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerDebugSetServerSecondsNonSeamlessForced
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// float                                   Seconds                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerDebugSetServerSecondsNonSeamlessForced(float Seconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerDebugSetServerSecondsNonSeamlessForced");

	Params::SQPlayerController_ServerDebugSetServerSecondsNonSeamlessForced Parms{};

	Parms.Seconds = Seconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerDebugSetServerTickRate
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// float                                   NewTickRate                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerDebugSetServerTickRate(float NewTickRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerDebugSetServerTickRate");

	Params::SQPlayerController_ServerDebugSetServerTickRate Parms{};

	Parms.NewTickRate = NewTickRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerDebugSkipStaging
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void ASQPlayerController::ServerDebugSkipStaging()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerDebugSkipStaging");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerDebugToggleForceAllowCommanderActions
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerDebugToggleForceAllowCommanderActions(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerDebugToggleForceAllowCommanderActions");

	Params::SQPlayerController_ServerDebugToggleForceAllowCommanderActions Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerDebugToggleForceNoCommanderCooldowns
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerDebugToggleForceNoCommanderCooldowns(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerDebugToggleForceNoCommanderCooldowns");

	Params::SQPlayerController_ServerDebugToggleForceNoCommanderCooldowns Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerDebugToggleInfiniteMags
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerDebugToggleInfiniteMags(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerDebugToggleInfiniteMags");

	Params::SQPlayerController_ServerDebugToggleInfiniteMags Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerDebugToggleNoStaminaDrain
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerDebugToggleNoStaminaDrain(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerDebugToggleNoStaminaDrain");

	Params::SQPlayerController_ServerDebugToggleNoStaminaDrain Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerDebugToggleShowHitreg
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerDebugToggleShowHitreg(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerDebugToggleShowHitreg");

	Params::SQPlayerController_ServerDebugToggleShowHitreg Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerDebugToggleShowRebase
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerDebugToggleShowRebase(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerDebugToggleShowRebase");

	Params::SQPlayerController_ServerDebugToggleShowRebase Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerDebugToggleShowVehicleDamageReceived
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerDebugToggleShowVehicleDamageReceived(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerDebugToggleShowVehicleDamageReceived");

	Params::SQPlayerController_ServerDebugToggleShowVehicleDamageReceived Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerDebugToggleVehicleGodMode
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerDebugToggleVehicleGodMode(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerDebugToggleVehicleGodMode");

	Params::SQPlayerController_ServerDebugToggleVehicleGodMode Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerDisbandFireTeam
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// int32                                   FireTeamIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerDisbandFireTeam(int32 FireTeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerDisbandFireTeam");

	Params::SQPlayerController_ServerDisbandFireTeam Parms{};

	Parms.FireTeamIndex = FireTeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerDisbandSquad
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void ASQPlayerController::ServerDisbandSquad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerDisbandSquad");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerEmergencyTeleport
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)
// Parameters:
// class ASQVehicle*                       Vehicle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQVehicleRecoveryMethod                RecoveryMethod                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DesiredYawRotation                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerEmergencyTeleport(class ASQVehicle* Vehicle, ESQVehicleRecoveryMethod RecoveryMethod, float DesiredYawRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerEmergencyTeleport");

	Params::SQPlayerController_ServerEmergencyTeleport Parms{};

	Parms.Vehicle = Vehicle;
	Parms.RecoveryMethod = RecoveryMethod;
	Parms.DesiredYawRotation = DesiredYawRotation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerEndHealing
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void ASQPlayerController::ServerEndHealing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerEndHealing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerFinishSeatProgress
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)
// Parameters:
// class ASQVehicle*                       Vehicle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerFinishSeatProgress(class ASQVehicle* Vehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerFinishSeatProgress");

	Params::SQPlayerController_ServerFinishSeatProgress Parms{};

	Parms.Vehicle = Vehicle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerGameCommandFromRemotePlayer
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class FString                           Cmd                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerGameCommandFromRemotePlayer(const class FString& Cmd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerGameCommandFromRemotePlayer");

	Params::SQPlayerController_ServerGameCommandFromRemotePlayer Parms{};

	Parms.Cmd = std::move(Cmd);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerGameplayMutePlayer
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FUniqueNetIdRepl                 MutePlayerId                                           (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerGameplayMutePlayer(const struct FUniqueNetIdRepl& MutePlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerGameplayMutePlayer");

	Params::SQPlayerController_ServerGameplayMutePlayer Parms{};

	Parms.MutePlayerId = std::move(MutePlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerGameplayUnmutePlayer
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FUniqueNetIdRepl                 MutePlayerId                                           (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerGameplayUnmutePlayer(const struct FUniqueNetIdRepl& MutePlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerGameplayUnmutePlayer");

	Params::SQPlayerController_ServerGameplayUnmutePlayer Parms{};

	Parms.MutePlayerId = std::move(MutePlayerId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerGiveFireTeamLeader
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class ASQPlayerState*                   NewLeader                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FireTeamIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerGiveFireTeamLeader(class ASQPlayerState* NewLeader, int32 FireTeamIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerGiveFireTeamLeader");

	Params::SQPlayerController_ServerGiveFireTeamLeader Parms{};

	Parms.NewLeader = NewLeader;
	Parms.FireTeamIndex = FireTeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerGiveSquadLeader
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class ASQPlayerState*                   NewLeader                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerGiveSquadLeader(class ASQPlayerState* NewLeader)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerGiveSquadLeader");

	Params::SQPlayerController_ServerGiveSquadLeader Parms{};

	Parms.NewLeader = NewLeader;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerGiveUp
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void ASQPlayerController::ServerGiveUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerGiveUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerJoinSquad
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class ASQSquadStatePrivateToTeam*       ToJoin                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerJoinSquad(class ASQSquadStatePrivateToTeam* ToJoin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerJoinSquad");

	Params::SQPlayerController_ServerJoinSquad Parms{};

	Parms.ToJoin = ToJoin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerKickPlayerFromSquad
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class ASQPlayerState*                   ToKick                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerKickPlayerFromSquad(class ASQPlayerState* ToKick)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerKickPlayerFromSquad");

	Params::SQPlayerController_ServerKickPlayerFromSquad Parms{};

	Parms.ToKick = ToKick;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerLeaveSquad
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void ASQPlayerController::ServerLeaveSquad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerLeaveSquad");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerMovePlayerToFireTeam
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class ASQPlayerState*                   TargetPlayerState                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FireTeamIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerMovePlayerToFireTeam(class ASQPlayerState* TargetPlayerState, int32 FireTeamIndex, int32 Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerMovePlayerToFireTeam");

	Params::SQPlayerController_ServerMovePlayerToFireTeam Parms{};

	Parms.TargetPlayerState = TargetPlayerState;
	Parms.FireTeamIndex = FireTeamIndex;
	Parms.Position = Position;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerMuteSquad
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class ASQSquadState*                    MuteSquadState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerMuteSquad(class ASQSquadState* MuteSquadState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerMuteSquad");

	Params::SQPlayerController_ServerMuteSquad Parms{};

	Parms.MuteSquadState = MuteSquadState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerNotifyExplosiveHit
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FSQShotInfo                      ShotInfoZeroBased                                      (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<struct FSQPenetrationTrace>      TargetsZeroBased                                       (ConstParm, Parm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FHitResult                       HitResult                                              (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FArmorPenetration                CachedPenetration                                      (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FSQWeaponData                    WeaponConfig                                           (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerNotifyExplosiveHit(const struct FSQShotInfo& ShotInfoZeroBased, const TArray<struct FSQPenetrationTrace>& TargetsZeroBased, const struct FHitResult& HitResult, const struct FArmorPenetration& CachedPenetration, const struct FSQWeaponData& WeaponConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerNotifyExplosiveHit");

	Params::SQPlayerController_ServerNotifyExplosiveHit Parms{};

	Parms.ShotInfoZeroBased = std::move(ShotInfoZeroBased);
	Parms.TargetsZeroBased = std::move(TargetsZeroBased);
	Parms.HitResult = std::move(HitResult);
	Parms.CachedPenetration = std::move(CachedPenetration);
	Parms.WeaponConfig = std::move(WeaponConfig);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerOnPlayerToggleVoice_Editor
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// struct FUniqueNetIdRepl                 TalkingPlayerId                                        (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQVoiceChannel                         VoiceChannel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerOnPlayerToggleVoice_Editor(const struct FUniqueNetIdRepl& TalkingPlayerId, ESQVoiceChannel VoiceChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerOnPlayerToggleVoice_Editor");

	Params::SQPlayerController_ServerOnPlayerToggleVoice_Editor Parms{};

	Parms.TalkingPlayerId = std::move(TalkingPlayerId);
	Parms.VoiceChannel = VoiceChannel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerPlayCustomEmote
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class FName                             CustomName                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerPlayCustomEmote(const class FName& CustomName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerPlayCustomEmote");

	Params::SQPlayerController_ServerPlayCustomEmote Parms{};

	Parms.CustomName = CustomName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerPlayEmote
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// class FName                             EmoteDataName                                          (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerPlayEmote(const class FName& EmoteDataName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerPlayEmote");

	Params::SQPlayerController_ServerPlayEmote Parms{};

	Parms.EmoteDataName = EmoteDataName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerPlayEmoteAnim
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// ESQEmotes                               Emote                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerPlayEmoteAnim(ESQEmotes Emote)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerPlayEmoteAnim");

	Params::SQPlayerController_ServerPlayEmoteAnim Parms{};

	Parms.Emote = Emote;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerProcessApprovalEntry
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// uint8                                   Mode                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32                                  VerifyKey                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerProcessApprovalEntry(uint8 Mode, uint32 VerifyKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerProcessApprovalEntry");

	Params::SQPlayerController_ServerProcessApprovalEntry Parms{};

	Parms.Mode = Mode;
	Parms.VerifyKey = VerifyKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerRearmWeapons
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class UObject*                          RearmObject                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSQRearmWeaponRequest>    RearmRequest                                           (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerRearmWeapons(class UObject* RearmObject, const TArray<struct FSQRearmWeaponRequest>& RearmRequest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerRearmWeapons");

	Params::SQPlayerController_ServerRearmWeapons Parms{};

	Parms.RearmObject = RearmObject;
	Parms.RearmRequest = std::move(RearmRequest);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerRemoveVehicleOverlayWidget
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)

void ASQPlayerController::ServerRemoveVehicleOverlayWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerRemoveVehicleOverlayWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerReportSteamSessionTicket
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// class FString                           PlayerSteamId                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SessionTicket                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerReportSteamSessionTicket(const class FString& PlayerSteamId, const class FString& SessionTicket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerReportSteamSessionTicket");

	Params::SQPlayerController_ServerReportSteamSessionTicket Parms{};

	Parms.PlayerSteamId = std::move(PlayerSteamId);
	Parms.SessionTicket = std::move(SessionTicket);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerRequestDeployRole
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class USQRoleSettings*                  NewRole                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerRequestDeployRole(class USQRoleSettings* NewRole)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerRequestDeployRole");

	Params::SQPlayerController_ServerRequestDeployRole Parms{};

	Parms.NewRole = NewRole;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerRequestPlaceDeployable
// (Net, NetReliable, Native, Event, Protected, NetServer, HasDefaults, BlueprintCallable, NetValidate)
// Parameters:
// class FName                             InDeployableId                                         (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       InPosition                                             (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerRequestPlaceDeployable(const class FName& InDeployableId, const struct FTransform& InPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerRequestPlaceDeployable");

	Params::SQPlayerController_ServerRequestPlaceDeployable Parms{};

	Parms.InDeployableId = InDeployableId;
	Parms.InPosition = std::move(InPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerRequestPlaceDeployableItem
// (Net, NetReliable, Native, Event, Protected, NetServer, HasDefaults, BlueprintCallable, NetValidate)
// Parameters:
// class FName                             InDeployableItemId                                     (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       InPosition                                             (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerRequestPlaceDeployableItem(const class FName& InDeployableItemId, const struct FTransform& InPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerRequestPlaceDeployableItem");

	Params::SQPlayerController_ServerRequestPlaceDeployableItem Parms{};

	Parms.InDeployableItemId = InDeployableItemId;
	Parms.InPosition = std::move(InPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerRequestRestartPlayer
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)
// Parameters:
// class ASQGameSpawn*                     Spawn                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerRequestRestartPlayer(class ASQGameSpawn* Spawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerRequestRestartPlayer");

	Params::SQPlayerController_ServerRequestRestartPlayer Parms{};

	Parms.Spawn = Spawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerRequestRole
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// class FName                             InRoleId                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerRequestRole(const class FName& InRoleId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerRequestRole");

	Params::SQPlayerController_ServerRequestRole Parms{};

	Parms.InRoleId = InRoleId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerRequestRoleRearm
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// class FName                             InRoleId                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          InRearmSource                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerRequestRoleRearm(const class FName& InRoleId, class UObject* InRearmSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerRequestRoleRearm");

	Params::SQPlayerController_ServerRequestRoleRearm Parms{};

	Parms.InRoleId = InRoleId;
	Parms.InRearmSource = InRearmSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerRequestServerTime
// (Net, NetReliable, Native, Event, Protected, NetServer, HasDefaults, NetValidate)
// Parameters:
// struct FDateTime                        InClientUTCTime                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerRequestServerTime(const struct FDateTime& InClientUTCTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerRequestServerTime");

	Params::SQPlayerController_ServerRequestServerTime Parms{};

	Parms.InClientUTCTime = std::move(InClientUTCTime);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerSay
// (Net, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class FString                           Msg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerSay(const class FString& Msg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerSay");

	Params::SQPlayerController_ServerSay Parms{};

	Parms.Msg = std::move(Msg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerSetMuteAllPlayersExceptSquad
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// bool                                    bMute                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerSetMuteAllPlayersExceptSquad(bool bMute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerSetMuteAllPlayersExceptSquad");

	Params::SQPlayerController_ServerSetMuteAllPlayersExceptSquad Parms{};

	Parms.bMute = bMute;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerSetVoipHandAnim
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// ESQVoiceChannel                         VoiceChannel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerSetVoipHandAnim(ESQVoiceChannel VoiceChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerSetVoipHandAnim");

	Params::SQPlayerController_ServerSetVoipHandAnim Parms{};

	Parms.VoiceChannel = VoiceChannel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerShareRallyPoint
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// int32                                   SquadId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerShareRallyPoint(int32 SquadId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerShareRallyPoint");

	Params::SQPlayerController_ServerShareRallyPoint Parms{};

	Parms.SquadId = SquadId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerSLInviteMember
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)
// Parameters:
// class ASQPlayerState*                   PlayerToInvite                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerSLInviteMember(class ASQPlayerState* PlayerToInvite)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerSLInviteMember");

	Params::SQPlayerController_ServerSLInviteMember Parms{};

	Parms.PlayerToInvite = PlayerToInvite;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerStartHealing
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class ASQSoldier*                       HealedSoldier                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerStartHealing(class ASQSoldier* HealedSoldier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerStartHealing");

	Params::SQPlayerController_ServerStartHealing Parms{};

	Parms.HealedSoldier = HealedSoldier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerSuicide
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// bool                                    bLeavingServer                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerSuicide(bool bLeavingServer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerSuicide");

	Params::SQPlayerController_ServerSuicide Parms{};

	Parms.bLeavingServer = bLeavingServer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerSwitchSeat
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerSwitchSeat(int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerSwitchSeat");

	Params::SQPlayerController_ServerSwitchSeat Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerTryApproveVehicleClaim
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)

void ASQPlayerController::ServerTryApproveVehicleClaim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerTryApproveVehicleClaim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerTryClaimVehicle
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)
// Parameters:
// class ASQVehicle*                       VehicleToClaim                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerTryClaimVehicle(class ASQVehicle* VehicleToClaim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerTryClaimVehicle");

	Params::SQPlayerController_ServerTryClaimVehicle Parms{};

	Parms.VehicleToClaim = VehicleToClaim;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerUnmuteSquad
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class ASQSquadState*                    MuteSquadState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ServerUnmuteSquad(class ASQSquadState* MuteSquadState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerUnmuteSquad");

	Params::SQPlayerController_ServerUnmuteSquad Parms{};

	Parms.MuteSquadState = MuteSquadState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ServerUnpossessAdminCam
// (Net, NetReliable, Native, Event, Public, NetServer)

void ASQPlayerController::ServerUnpossessAdminCam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ServerUnpossessAdminCam");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.SetCurrentRole
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USQRoleSettings*                  NewRoleSettings                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQSpawnInventoryReason                 SpawnInventoryReason                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::SetCurrentRole(class USQRoleSettings* NewRoleSettings, ESQSpawnInventoryReason SpawnInventoryReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "SetCurrentRole");

	Params::SQPlayerController_SetCurrentRole Parms{};

	Parms.NewRoleSettings = NewRoleSettings;
	Parms.SpawnInventoryReason = SpawnInventoryReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.SetIgnoreWeaponInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewClickInput                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::SetIgnoreWeaponInput(bool bNewClickInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "SetIgnoreWeaponInput");

	Params::SQPlayerController_SetIgnoreWeaponInput Parms{};

	Parms.bNewClickInput = bNewClickInput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.SetOutOfMapBoundsKillTimestamp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Timestamp                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::SetOutOfMapBoundsKillTimestamp(float Timestamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "SetOutOfMapBoundsKillTimestamp");

	Params::SQPlayerController_SetOutOfMapBoundsKillTimestamp Parms{};

	Parms.Timestamp = Timestamp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.SetPendingDeathKillTimestamp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Timestamp                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::SetPendingDeathKillTimestamp(float Timestamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "SetPendingDeathKillTimestamp");

	Params::SQPlayerController_SetPendingDeathKillTimestamp Parms{};

	Parms.Timestamp = Timestamp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.SetRoamingMapOpen
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bOpen                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::SetRoamingMapOpen(bool bOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "SetRoamingMapOpen");

	Params::SQPlayerController_SetRoamingMapOpen Parms{};

	Parms.bOpen = bOpen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.SetSelectionMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::SetSelectionMode(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "SetSelectionMode");

	Params::SQPlayerController_SetSelectionMode Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ShareRallyPoint
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SquadId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ShareRallyPoint(int32 SquadId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ShareRallyPoint");

	Params::SQPlayerController_ShareRallyPoint Parms{};

	Parms.SquadId = SquadId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ShowToast
// (BlueprintCosmetic, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             ToastText                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Lifetime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForceSlate                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ShowToast(const class FText& ToastText, float Lifetime, bool bForceSlate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ShowToast");

	Params::SQPlayerController_ShowToast Parms{};

	Parms.ToastText = std::move(ToastText);
	Parms.Lifetime = Lifetime;
	Parms.bForceSlate = bForceSlate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.SimulateInputKey
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FKey                             Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPressed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::SimulateInputKey(const struct FKey& Key, bool bPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "SimulateInputKey");

	Params::SQPlayerController_SimulateInputKey Parms{};

	Parms.Key = std::move(Key);
	Parms.bPressed = bPressed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.SpawnGhost
// (Final, Native, Protected)
// Parameters:
// TSoftClassPtr<class UClass>             InDeployableReference                                  (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQDeployableSettings*            InDeployableSettings                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::SpawnGhost(TSoftClassPtr<class UClass> InDeployableReference, class USQDeployableSettings* InDeployableSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "SpawnGhost");

	Params::SQPlayerController_SpawnGhost Parms{};

	Parms.InDeployableReference = InDeployableReference;
	Parms.InDeployableSettings = InDeployableSettings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.SQBugit
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           ScreenShotDescription                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::SQBugit(const class FString& ScreenShotDescription)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "SQBugit");

	Params::SQPlayerController_SQBugit Parms{};

	Parms.ScreenShotDescription = std::move(ScreenShotDescription);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.SQSM_InsertDistanceFactorThesholds
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::SQSM_InsertDistanceFactorThesholds(int32 Param_Index, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "SQSM_InsertDistanceFactorThesholds");

	Params::SQPlayerController_SQSM_InsertDistanceFactorThesholds Parms{};

	Parms.Param_Index = Param_Index;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.SQSM_PrintDistanceFactorThesholds
// (Final, Exec, Native, Public)

void ASQPlayerController::SQSM_PrintDistanceFactorThesholds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "SQSM_PrintDistanceFactorThesholds");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.SQSM_RemoveDistanceFactorThesholds
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   SrcIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::SQSM_RemoveDistanceFactorThesholds(int32 SrcIndex, int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "SQSM_RemoveDistanceFactorThesholds");

	Params::SQPlayerController_SQSM_RemoveDistanceFactorThesholds Parms{};

	Parms.SrcIndex = SrcIndex;
	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.SQSM_SetDistanceFactorThesholds
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::SQSM_SetDistanceFactorThesholds(int32 Param_Index, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "SQSM_SetDistanceFactorThesholds");

	Params::SQPlayerController_SQSM_SetDistanceFactorThesholds Parms{};

	Parms.Param_Index = Param_Index;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.SQSM_SetNonRenderedUpdateRate
// (Final, Exec, Native, Public)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::SQSM_SetNonRenderedUpdateRate(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "SQSM_SetNonRenderedUpdateRate");

	Params::SQPlayerController_SQSM_SetNonRenderedUpdateRate Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.SQSM_SetServerUpdateRate
// (Final, Exec, Native, Public)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::SQSM_SetServerUpdateRate(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "SQSM_SetServerUpdateRate");

	Params::SQPlayerController_SQSM_SetServerUpdateRate Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.StartPlaceDeployable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USQDeployableSettings*            InDeployableSettings                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InIsItem                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::StartPlaceDeployable(class USQDeployableSettings* InDeployableSettings, bool InIsItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "StartPlaceDeployable");

	Params::SQPlayerController_StartPlaceDeployable Parms{};

	Parms.InDeployableSettings = InDeployableSettings;
	Parms.InIsItem = InIsItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.StopMusic
// (Native, Public, BlueprintCallable)

void ASQPlayerController::StopMusic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "StopMusic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.TimeUntilCanSpawn
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQPlayerController::TimeUntilCanSpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "TimeUntilCanSpawn");

	Params::SQPlayerController_TimeUntilCanSpawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.ToggleMutePlayer
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// class ASQPlayerState*                   MutePlayerState                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ToggleMutePlayer(class ASQPlayerState* MutePlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ToggleMutePlayer");

	Params::SQPlayerController_ToggleMutePlayer Parms{};

	Parms.MutePlayerState = MutePlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ToggleShowRebase
// (Final, Native, Public)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ToggleShowRebase(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ToggleShowRebase");

	Params::SQPlayerController_ToggleShowRebase Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.TryClaimVehicle
// (Final, Native, Public)
// Parameters:
// class ASQVehicle*                       Vehicle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerController::TryClaimVehicle(class ASQVehicle* Vehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "TryClaimVehicle");

	Params::SQPlayerController_TryClaimVehicle Parms{};

	Parms.Vehicle = Vehicle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.UnmuteAllPlayersExceptSquad
// (Final, Native, Public, BlueprintCallable)

void ASQPlayerController::UnmuteAllPlayersExceptSquad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "UnmuteAllPlayersExceptSquad");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.UnmuteSquad
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// class ASQSquadState*                    MuteSquadState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::UnmuteSquad(class ASQSquadState* MuteSquadState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "UnmuteSquad");

	Params::SQPlayerController_UnmuteSquad Parms{};

	Parms.MuteSquadState = MuteSquadState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.UnpossessAdminCam
// (Final, Native, Public, BlueprintCallable)

void ASQPlayerController::UnpossessAdminCam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "UnpossessAdminCam");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ClientShowPopup
// (Net, NetReliable, Native, Event, Public, NetClient, BlueprintCallable, Const)
// Parameters:
// class ASQPlayerState*                   Speaker                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             Message                                                (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// ESQChat                                 Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQNotificationTypes                    NotificationType                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           StreamerModeVariantMessage                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::ClientShowPopup(class ASQPlayerState* Speaker, const class FText& Message, ESQChat Channel, ESQNotificationTypes NotificationType, const class FString& StreamerModeVariantMessage) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ClientShowPopup");

	Params::SQPlayerController_ClientShowPopup Parms{};

	Parms.Speaker = Speaker;
	Parms.Message = std::move(Message);
	Parms.Channel = Channel;
	Parms.NotificationType = NotificationType;
	Parms.StreamerModeVariantMessage = std::move(StreamerModeVariantMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.DebugToggleShowMapBoundary
// (Final, Exec, Native, Public, Const)
// Parameters:
// bool                                    bShowMapBoundary                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::DebugToggleShowMapBoundary(bool bShowMapBoundary) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "DebugToggleShowMapBoundary");

	Params::SQPlayerController_DebugToggleShowMapBoundary Parms{};

	Parms.bShowMapBoundary = bShowMapBoundary;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.DebugToggleShowVehicleSpawners
// (Final, Exec, Native, Public, Const)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::DebugToggleShowVehicleSpawners(bool Value) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "DebugToggleShowVehicleSpawners");

	Params::SQPlayerController_DebugToggleShowVehicleSpawners Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.EnemyPlayerCanHearLocalVoice
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class ASQPlayerController*              EnemyPlayer                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerController::EnemyPlayerCanHearLocalVoice(const class ASQPlayerController* EnemyPlayer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "EnemyPlayerCanHearLocalVoice");

	Params::SQPlayerController_EnemyPlayerCanHearLocalVoice Parms{};

	Parms.EnemyPlayer = EnemyPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.GetCurrentRole
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQRoleSettings*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQRoleSettings* ASQPlayerController::GetCurrentRole() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "GetCurrentRole");

	Params::SQPlayerController_GetCurrentRole Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.GetCurrentSeat
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQVehicleSeatComponent*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQVehicleSeatComponent* ASQPlayerController::GetCurrentSeat() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "GetCurrentSeat");

	Params::SQPlayerController_GetCurrentSeat Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.GetCurrentSeatPawn
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQVehicleSeat*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQVehicleSeat* ASQPlayerController::GetCurrentSeatPawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "GetCurrentSeatPawn");

	Params::SQPlayerController_GetCurrentSeatPawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.GetCurrentVehicle
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQVehicle*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQVehicle* ASQPlayerController::GetCurrentVehicle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "GetCurrentVehicle");

	Params::SQPlayerController_GetCurrentVehicle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.GetDeployableReference
// (Event, Protected, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class USQDeployableSettings*            InDeployableSettings                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             OutDeployableReference                                 (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::GetDeployableReference(class USQDeployableSettings* InDeployableSettings, TSoftClassPtr<class UClass>* OutDeployableReference) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "GetDeployableReference");

	Params::SQPlayerController_GetDeployableReference Parms{};

	Parms.InDeployableSettings = InDeployableSettings;

	UObject::ProcessEvent(Func, &Parms);

	if (OutDeployableReference != nullptr)
		*OutDeployableReference = Parms.OutDeployableReference;
}


// Function Squad.SQPlayerController.GetDeployRole
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQRoleSettings*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQRoleSettings* ASQPlayerController::GetDeployRole() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "GetDeployRole");

	Params::SQPlayerController_GetDeployRole Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.GetOutOfMapBoundsKillTimestamp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQPlayerController::GetOutOfMapBoundsKillTimestamp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "GetOutOfMapBoundsKillTimestamp");

	Params::SQPlayerController_GetOutOfMapBoundsKillTimestamp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.GetPendingDeathKillTimestamp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQPlayerController::GetPendingDeathKillTimestamp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "GetPendingDeathKillTimestamp");

	Params::SQPlayerController_GetPendingDeathKillTimestamp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.GetPitchInputScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQPlayerController::GetPitchInputScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "GetPitchInputScale");

	Params::SQPlayerController_GetPitchInputScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.GetSelectedSpawn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQGameSpawn*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQGameSpawn* ASQPlayerController::GetSelectedSpawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "GetSelectedSpawn");

	Params::SQPlayerController_GetSelectedSpawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.GetSoldier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQSoldier*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQSoldier* ASQPlayerController::GetSoldier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "GetSoldier");

	Params::SQPlayerController_GetSoldier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.GetSquadPlayerState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQPlayerState* ASQPlayerController::GetSquadPlayerState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "GetSquadPlayerState");

	Params::SQPlayerController_GetSquadPlayerState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.GetTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQPlayerController::GetTeam() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "GetTeam");

	Params::SQPlayerController_GetTeam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.GetYawInputScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQPlayerController::GetYawInputScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "GetYawInputScale");

	Params::SQPlayerController_GetYawInputScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.IsAdmin
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerController::IsAdmin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "IsAdmin");

	Params::SQPlayerController_IsAdmin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.IsAdminCamera
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerController::IsAdminCamera() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "IsAdminCamera");

	Params::SQPlayerController_IsAdminCamera Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.IsAlive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerController::IsAlive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "IsAlive");

	Params::SQPlayerController_IsAlive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.IsCameraMan
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerController::IsCameraMan() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "IsCameraMan");

	Params::SQPlayerController_IsCameraMan Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.IsCommander
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerController::IsCommander() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "IsCommander");

	Params::SQPlayerController_IsCommander Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.IsDeathPending
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerController::IsDeathPending() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "IsDeathPending");

	Params::SQPlayerController_IsDeathPending Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.IsDeployRoleAvailable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerController::IsDeployRoleAvailable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "IsDeployRoleAvailable");

	Params::SQPlayerController_IsDeployRoleAvailable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.IsDev
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerController::IsDev() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "IsDev");

	Params::SQPlayerController_IsDev Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.IsFireTeamLeader
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerController::IsFireTeamLeader() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "IsFireTeamLeader");

	Params::SQPlayerController_IsFireTeamLeader Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.IsMember
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerController::IsMember() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "IsMember");

	Params::SQPlayerController_IsMember Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.IsOutOfMapBounds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerController::IsOutOfMapBounds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "IsOutOfMapBounds");

	Params::SQPlayerController_IsOutOfMapBounds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.IsQA
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerController::IsQA() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "IsQA");

	Params::SQPlayerController_IsQA Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.IsRoamingMapOpen
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerController::IsRoamingMapOpen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "IsRoamingMapOpen");

	Params::SQPlayerController_IsRoamingMapOpen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.IsSquadLeader
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerController::IsSquadLeader() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "IsSquadLeader");

	Params::SQPlayerController_IsSquadLeader Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.IsUsingFreeLook
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerController::IsUsingFreeLook() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "IsUsingFreeLook");

	Params::SQPlayerController_IsUsingFreeLook Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.IsWeaponInputIgnored
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerController::IsWeaponInputIgnored() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "IsWeaponInputIgnored");

	Params::SQPlayerController_IsWeaponInputIgnored Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.IsWounded
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerController::IsWounded() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "IsWounded");

	Params::SQPlayerController_IsWounded Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerController.OnReceiveChat
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class ASQPlayerState*                   Speaker                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQChat                                 Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQNotificationTypes                    NotificationType                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           StreamerModeVariantMessage                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::OnReceiveChat(class ASQPlayerState* Speaker, const class FString& Message, ESQChat Channel, ESQNotificationTypes NotificationType, const class FString& StreamerModeVariantMessage) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "OnReceiveChat");

	Params::SQPlayerController_OnReceiveChat Parms{};

	Parms.Speaker = Speaker;
	Parms.Message = std::move(Message);
	Parms.Channel = Channel;
	Parms.NotificationType = NotificationType;
	Parms.StreamerModeVariantMessage = std::move(StreamerModeVariantMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.SetDeployRole
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class USQRoleSettings*                  NewRoleSettings                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::SetDeployRole(class USQRoleSettings* NewRoleSettings) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "SetDeployRole");

	Params::SQPlayerController_SetDeployRole Parms{};

	Parms.NewRoleSettings = NewRoleSettings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.SetWorldOrigin
// (Final, Exec, Native, Private, HasOutParams, HasDefaults, Const)
// Parameters:
// struct FIntVector                       NewOrigin                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerController::SetWorldOrigin(const struct FIntVector& NewOrigin) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "SetWorldOrigin");

	Params::SQPlayerController_SetWorldOrigin Parms{};

	Parms.NewOrigin = std::move(NewOrigin);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerController.ShouldSkipPassword
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerController::ShouldSkipPassword() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerController", "ShouldSkipPassword");

	Params::SQPlayerController_ShouldSkipPassword Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQOnlineHelpers.GetUsersInSession
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FSQBlueprintFriend>       Results                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FBlueprintSessionResult          Session                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FSQBlueprintFriend>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FSQBlueprintFriend> USQOnlineHelpers::GetUsersInSession(const TArray<struct FSQBlueprintFriend>& Results, const struct FBlueprintSessionResult& Session)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQOnlineHelpers", "GetUsersInSession");

	Params::SQOnlineHelpers_GetUsersInSession Parms{};

	Parms.Results = std::move(Results);
	Parms.Session = std::move(Session);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQOnlineHelpers.GetUsersSessionIndex
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSQBlueprintFriend               User                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FBlueprintSessionResult>  Sessions                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQOnlineHelpers::GetUsersSessionIndex(const struct FSQBlueprintFriend& User, const TArray<struct FBlueprintSessionResult>& Sessions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQOnlineHelpers", "GetUsersSessionIndex");

	Params::SQOnlineHelpers_GetUsersSessionIndex Parms{};

	Parms.User = std::move(User);
	Parms.Sessions = std::move(Sessions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQOnlineHelpers.IsUserInSession
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSQBlueprintFriend               User                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FBlueprintSessionResult          Session                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQOnlineHelpers::IsUserInSession(const struct FSQBlueprintFriend& User, const struct FBlueprintSessionResult& Session)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQOnlineHelpers", "IsUserInSession");

	Params::SQOnlineHelpers_IsUserInSession Parms{};

	Parms.User = std::move(User);
	Parms.Session = std::move(Session);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAIController.SpawnBots
// (Final, Exec, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   NumberOfBotsToSpawn                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQAIController::SpawnBots(int32 NumberOfBotsToSpawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAIController", "SpawnBots");

	Params::SQAIController_SpawnBots Parms{};

	Parms.NumberOfBotsToSpawn = NumberOfBotsToSpawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAIController.FindClosestEnemy
// (Final, Native, Public, BlueprintCallable)

void ASQAIController::FindClosestEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAIController", "FindClosestEnemy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAIController.FindClosestEnemyWithLOS
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ASQSoldier*                       ExcludeEnemy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQAIController::FindClosestEnemyWithLOS(class ASQSoldier* ExcludeEnemy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAIController", "FindClosestEnemyWithLOS");

	Params::SQAIController_FindClosestEnemyWithLOS Parms{};

	Parms.ExcludeEnemy = ExcludeEnemy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAIController.SetCurrentRole
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USQRoleSettings*                  NewRoleSettings                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQSpawnInventoryReason                 SpawnInventoryReason                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQAIController::SetCurrentRole(class USQRoleSettings* NewRoleSettings, ESQSpawnInventoryReason SpawnInventoryReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAIController", "SetCurrentRole");

	Params::SQAIController_SetCurrentRole Parms{};

	Parms.NewRoleSettings = NewRoleSettings;
	Parms.SpawnInventoryReason = SpawnInventoryReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAIController.ShootEnemy
// (Final, Native, Public, BlueprintCallable)

void ASQAIController::ShootEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAIController", "ShootEnemy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAIController.GetSoldier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQSoldier*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQSoldier* ASQAIController::GetSoldier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAIController", "GetSoldier");

	Params::SQAIController_GetSoldier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAIController.GetSquadPlayerState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQPlayerState* ASQAIController::GetSquadPlayerState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAIController", "GetSquadPlayerState");

	Params::SQAIController_GetSquadPlayerState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAIController.IsEnemy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQSoldier*                       Soldier                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQAIController::IsEnemy(class ASQSoldier* Soldier) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAIController", "IsEnemy");

	Params::SQAIController_IsEnemy Parms{};

	Parms.Soldier = Soldier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAmbientAndReverbComponent.OnOverlapBegin
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USQAmbientAndReverbComponent::OnOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAmbientAndReverbComponent", "OnOverlapBegin");

	Params::SQAmbientAndReverbComponent_OnOverlapBegin Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAmbientAndReverbComponent.OnOverlapEnd
// (Final, Native, Public)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQAmbientAndReverbComponent::OnOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAmbientAndReverbComponent", "OnOverlapEnd");

	Params::SQAmbientAndReverbComponent_OnOverlapEnd Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleResource.BeginResourceDropOff
// (Final, Native, Protected, BlueprintCallable)

void ASQVehicleResource::BeginResourceDropOff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleResource", "BeginResourceDropOff");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleResource.FindValidDropOffs
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class ASQForwardBase*                   Fob                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Zone                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQVehicleResource::FindValidDropOffs(class ASQForwardBase** Fob, class AActor** Zone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleResource", "FindValidDropOffs");

	Params::SQVehicleResource_FindValidDropOffs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Fob != nullptr)
		*Fob = Parms.Fob;

	if (Zone != nullptr)
		*Zone = Parms.Zone;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleResource.ModifyResource
// (Final, BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQVehicleResource::ModifyResource(float Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleResource", "ModifyResource");

	Params::SQVehicleResource_ModifyResource Parms{};

	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleResource.ServerBeginResourceDropOff
// (Net, NetReliable, Native, Event, Protected, NetServer, BlueprintCallable, NetValidate)
// Parameters:
// class ASQForwardBase*                   Fob                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Zone                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DropRate                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQVehicleResource::ServerBeginResourceDropOff(class ASQForwardBase* Fob, class AActor* Zone, const float DropRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleResource", "ServerBeginResourceDropOff");

	Params::SQVehicleResource_ServerBeginResourceDropOff Parms{};

	Parms.Fob = Fob;
	Parms.Zone = Zone;
	Parms.DropRate = DropRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleResource.ServerEndResourceDropOff
// (Net, NetReliable, Native, Event, Protected, NetServer, BlueprintCallable, NetValidate)

void ASQVehicleResource::ServerEndResourceDropOff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleResource", "ServerEndResourceDropOff");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleResource.UseResource
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   ModifyAmount                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQVehicleResource::UseResource(float ModifyAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleResource", "UseResource");

	Params::SQVehicleResource_UseResource Parms{};

	Parms.ModifyAmount = ModifyAmount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleResource.AtValidResourcePoint
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQVehicleResource::AtValidResourcePoint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleResource", "AtValidResourcePoint");

	Params::SQVehicleResource_AtValidResourcePoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPainCausingVolumeComponent.OnBeginOverlap
// (Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USQPainCausingVolumeComponent::OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPainCausingVolumeComponent", "OnBeginOverlap");

	Params::SQPainCausingVolumeComponent_OnBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAmmoWidget.InitWidget
// (Native, Public, BlueprintCallable)

void USQAmmoWidget::InitWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAmmoWidget", "InitWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAmmoWidget.OnCurrentWeaponChanged
// (Event, Public, BlueprintEvent)

void USQAmmoWidget::OnCurrentWeaponChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAmmoWidget", "OnCurrentWeaponChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQAmmoWidget.OnShowCurrentWeapon
// (Event, Public, BlueprintEvent)

void USQAmmoWidget::OnShowCurrentWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAmmoWidget", "OnShowCurrentWeapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQAmmoWidget.OnShowResourceAmounts
// (Event, Public, BlueprintEvent)

void USQAmmoWidget::OnShowResourceAmounts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAmmoWidget", "OnShowResourceAmounts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQAmmoWidget.UpdateCurrentWeapon
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USQAmmoWidget::UpdateCurrentWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAmmoWidget", "UpdateCurrentWeapon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAmmoWidget.UpdateFiremode
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASQEquipableItem*                 CurrentItem                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQAmmoWidget::UpdateFiremode(class ASQEquipableItem* CurrentItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAmmoWidget", "UpdateFiremode");

	Params::SQAmmoWidget_UpdateFiremode Parms{};

	Parms.CurrentItem = CurrentItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAmmoWidget.UpdateMags
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASQEquipableItem*                 CurrentItem                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQAmmoWidget::UpdateMags(class ASQEquipableItem* CurrentItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAmmoWidget", "UpdateMags");

	Params::SQAmmoWidget_UpdateMags Parms{};

	Parms.CurrentItem = CurrentItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAmmoWidget.UpdateShowingStatus
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQAmmoWidget::UpdateShowingStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAmmoWidget", "UpdateShowingStatus");

	Params::SQAmmoWidget_UpdateShowingStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAmmoWidget.UpdateState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USQAmmoWidget::UpdateState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAmmoWidget", "UpdateState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnalyticsBlueprintLibrary.SendAnalyticEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           EventName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EventDataKey                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EventData                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQAnalyticsBlueprintLibrary::SendAnalyticEvent(const class FString& EventName, const class FString& EventDataKey, const class FString& EventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAnalyticsBlueprintLibrary", "SendAnalyticEvent");

	Params::SQAnalyticsBlueprintLibrary_SendAnalyticEvent Parms{};

	Parms.EventName = std::move(EventName);
	Parms.EventDataKey = std::move(EventDataKey);
	Parms.EventData = std::move(EventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnalyticsBlueprintLibrary.SendAnalyticEventArray
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           EventName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAnalyticKeyValue>        EventData                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USQAnalyticsBlueprintLibrary::SendAnalyticEventArray(const class FString& EventName, const TArray<struct FAnalyticKeyValue>& EventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQAnalyticsBlueprintLibrary", "SendAnalyticEventArray");

	Params::SQAnalyticsBlueprintLibrary_SendAnalyticEventArray Parms{};

	Parms.EventName = std::move(EventName);
	Parms.EventData = std::move(EventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerCameraManager.GetAdjustedFOV
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQPlayerCameraManager::GetAdjustedFOV()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerCameraManager", "GetAdjustedFOV");

	Params::SQPlayerCameraManager_GetAdjustedFOV Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerCameraManager.ModifyNearClipPlane
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NearClipPlaneDistance                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerCameraManager::ModifyNearClipPlane(float NearClipPlaneDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerCameraManager", "ModifyNearClipPlane");

	Params::SQPlayerCameraManager_ModifyNearClipPlane Parms{};

	Parms.NearClipPlaneDistance = NearClipPlaneDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerCameraManager.CalcScreenCenterRay
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   Range                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutStart                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutEnd                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerCameraManager::CalcScreenCenterRay(float Range, struct FVector* OutStart, struct FVector* OutEnd) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerCameraManager", "CalcScreenCenterRay");

	Params::SQPlayerCameraManager_CalcScreenCenterRay Parms{};

	Parms.Range = Range;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutStart != nullptr)
		*OutStart = std::move(Parms.OutStart);

	if (OutEnd != nullptr)
		*OutEnd = std::move(Parms.OutEnd);
}


// Function Squad.SQPlayerCameraManager.GetLastNearClipPlane
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQPlayerCameraManager::GetLastNearClipPlane() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerCameraManager", "GetLastNearClipPlane");

	Params::SQPlayerCameraManager_GetLastNearClipPlane Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerCameraManager.GetNearClipPlane
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQPlayerCameraManager::GetNearClipPlane() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerCameraManager", "GetNearClipPlane");

	Params::SQPlayerCameraManager_GetNearClipPlane Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAnimInstance.EndLoopAnimationHandler
// (Native, Public)
// Parameters:
// class UAnimMontage*                     WeaponMontage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Soldier1pMontage                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Soldier3pMontage                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQMontageSectionNames           SectionNames                                           (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)

void USQAnimInstance::EndLoopAnimationHandler(class UAnimMontage* WeaponMontage, class UAnimMontage* Soldier1pMontage, class UAnimMontage* Soldier3pMontage, const struct FSQMontageSectionNames& SectionNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstance", "EndLoopAnimationHandler");

	Params::SQAnimInstance_EndLoopAnimationHandler Parms{};

	Parms.WeaponMontage = WeaponMontage;
	Parms.Soldier1pMontage = Soldier1pMontage;
	Parms.Soldier3pMontage = Soldier3pMontage;
	Parms.SectionNames = std::move(SectionNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstance.PauseAnimationHandler
// (Native, Public)
// Parameters:
// class UAnimMontage*                     WeaponMontage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Soldier1pMontage                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Soldier3pMontage                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQAnimInstance::PauseAnimationHandler(class UAnimMontage* WeaponMontage, class UAnimMontage* Soldier1pMontage, class UAnimMontage* Soldier3pMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstance", "PauseAnimationHandler");

	Params::SQAnimInstance_PauseAnimationHandler Parms{};

	Parms.WeaponMontage = WeaponMontage;
	Parms.Soldier1pMontage = Soldier1pMontage;
	Parms.Soldier3pMontage = Soldier3pMontage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstance.PlayAnimationHandler
// (Native, Public)
// Parameters:
// class UAnimMontage*                     WeaponMontage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Soldier1pMontage                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Soldier3pMontage                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQAnimInstance::PlayAnimationHandler(class UAnimMontage* WeaponMontage, class UAnimMontage* Soldier1pMontage, class UAnimMontage* Soldier3pMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstance", "PlayAnimationHandler");

	Params::SQAnimInstance_PlayAnimationHandler Parms{};

	Parms.WeaponMontage = WeaponMontage;
	Parms.Soldier1pMontage = Soldier1pMontage;
	Parms.Soldier3pMontage = Soldier3pMontage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstance.ResumeAnimationHandler
// (Native, Public)
// Parameters:
// class UAnimMontage*                     WeaponMontage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Soldier1pMontage                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Soldier3pMontage                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQAnimInstance::ResumeAnimationHandler(class UAnimMontage* WeaponMontage, class UAnimMontage* Soldier1pMontage, class UAnimMontage* Soldier3pMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstance", "ResumeAnimationHandler");

	Params::SQAnimInstance_ResumeAnimationHandler Parms{};

	Parms.WeaponMontage = WeaponMontage;
	Parms.Soldier1pMontage = Soldier1pMontage;
	Parms.Soldier3pMontage = Soldier3pMontage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstance.SetAnimationPlayRateHandler
// (Native, Public)
// Parameters:
// class UAnimMontage*                     WeaponMontage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Soldier1pMontage                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Soldier3pMontage                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewPlayRate                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQAnimInstance::SetAnimationPlayRateHandler(class UAnimMontage* WeaponMontage, class UAnimMontage* Soldier1pMontage, class UAnimMontage* Soldier3pMontage, const float NewPlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstance", "SetAnimationPlayRateHandler");

	Params::SQAnimInstance_SetAnimationPlayRateHandler Parms{};

	Parms.WeaponMontage = WeaponMontage;
	Parms.Soldier1pMontage = Soldier1pMontage;
	Parms.Soldier3pMontage = Soldier3pMontage;
	Parms.NewPlayRate = NewPlayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstance.StopAnimationHandler
// (Native, Public)
// Parameters:
// class UAnimMontage*                     WeaponMontage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Soldier1pMontage                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Soldier3pMontage                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   blendOutTime                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bStopAllWeaponAnims                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQAnimInstance::StopAnimationHandler(class UAnimMontage* WeaponMontage, class UAnimMontage* Soldier1pMontage, class UAnimMontage* Soldier3pMontage, const float blendOutTime, const bool bStopAllWeaponAnims)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstance", "StopAnimationHandler");

	Params::SQAnimInstance_StopAnimationHandler Parms{};

	Parms.WeaponMontage = WeaponMontage;
	Parms.Soldier1pMontage = Soldier1pMontage;
	Parms.Soldier3pMontage = Soldier3pMontage;
	Parms.blendOutTime = blendOutTime;
	Parms.bStopAllWeaponAnims = bStopAllWeaponAnims;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstance.UpdateBoredMontage
// (Native, Public, BlueprintCallable)

void USQAnimInstance::UpdateBoredMontage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstance", "UpdateBoredMontage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstance.UpdateStaticItemInfo
// (Native, Public, BlueprintCallable)
// Parameters:
// class USQItemStaticInfo*                InfoObject                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQAnimInstance::UpdateStaticItemInfo(class USQItemStaticInfo* InfoObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstance", "UpdateStaticItemInfo");

	Params::SQAnimInstance_UpdateStaticItemInfo Parms{};

	Parms.InfoObject = InfoObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier.AlignWithGround
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                          FloorNormal                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator USQAnimInstanceSoldier::AlignWithGround(const struct FVector& FloorNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier", "AlignWithGround");

	Params::SQAnimInstanceSoldier_AlignWithGround Parms{};

	Parms.FloorNormal = std::move(FloorNormal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAnimInstanceSoldier.OnVaultClimbStop
// (Event, Public, BlueprintEvent)

void USQAnimInstanceSoldier::OnVaultClimbStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier", "OnVaultClimbStop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQAnimInstanceSoldier.UpdateDragging
// (Final, Native, Protected, BlueprintCallable)

void USQAnimInstanceSoldier::UpdateDragging()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier", "UpdateDragging");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier.UpdateFastPathTransitionVariables
// (Native, Protected, BlueprintCallable)
// Parameters:
// float                                   DeltaSeconds                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQAnimInstanceSoldier::UpdateFastPathTransitionVariables(const float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier", "UpdateFastPathTransitionVariables");

	Params::SQAnimInstanceSoldier_UpdateFastPathTransitionVariables Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier.UpdateLean
// (Final, Native, Protected, BlueprintCallable)

void USQAnimInstanceSoldier::UpdateLean()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier", "UpdateLean");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier.UpdateSteeringWheelVariables
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   DeltaSeconds                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQAnimInstanceSoldier::UpdateSteeringWheelVariables(const float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier", "UpdateSteeringWheelVariables");

	Params::SQAnimInstanceSoldier_UpdateSteeringWheelVariables Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier.UpdateVehicle
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   DeltaSeconds                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQAnimInstanceSoldier::UpdateVehicle(const float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier", "UpdateVehicle");

	Params::SQAnimInstanceSoldier_UpdateVehicle Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier.UpdateVehicleAim
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   DeltaSeconds                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQAnimInstanceSoldier::UpdateVehicleAim(const float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier", "UpdateVehicleAim");

	Params::SQAnimInstanceSoldier_UpdateVehicleAim Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPipScopeCaptureComponent.BPPostCaptureScene
// (Event, Protected, BlueprintEvent)

void USQPipScopeCaptureComponent::BPPostCaptureScene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPipScopeCaptureComponent", "BPPostCaptureScene");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQPipScopeCaptureComponent.CycleMagnificationLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   OverrideLevel                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQPipScopeCaptureComponent::CycleMagnificationLevel(int32 OverrideLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPipScopeCaptureComponent", "CycleMagnificationLevel");

	Params::SQPipScopeCaptureComponent_CycleMagnificationLevel Parms{};

	Parms.OverrideLevel = OverrideLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPipScopeCaptureComponent.CycleReticleGlowLevel
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   OverrideLevel                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQPipScopeCaptureComponent::CycleReticleGlowLevel(int32 OverrideLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPipScopeCaptureComponent", "CycleReticleGlowLevel");

	Params::SQPipScopeCaptureComponent_CycleReticleGlowLevel Parms{};

	Parms.OverrideLevel = OverrideLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPipScopeCaptureComponent.GetReticleScale
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQPipScopeCaptureComponent::GetReticleScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPipScopeCaptureComponent", "GetReticleScale");

	Params::SQPipScopeCaptureComponent_GetReticleScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPipScopeCaptureComponent.OnAdsPressedEvent
// (Final, Native, Protected)
// Parameters:
// bool                                    bAdsState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQPipScopeCaptureComponent::OnAdsPressedEvent(bool bAdsState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPipScopeCaptureComponent", "OnAdsPressedEvent");

	Params::SQPipScopeCaptureComponent_OnAdsPressedEvent Parms{};

	Parms.bAdsState = bAdsState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPipScopeCaptureComponent.OnAdsTransitionCompleteEvent
// (Final, Native, Protected)
// Parameters:
// bool                                    bAdsState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQPipScopeCaptureComponent::OnAdsTransitionCompleteEvent(bool bAdsState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPipScopeCaptureComponent", "OnAdsTransitionCompleteEvent");

	Params::SQPipScopeCaptureComponent_OnAdsTransitionCompleteEvent Parms{};

	Parms.bAdsState = bAdsState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction Squad.SQPipScopeCaptureComponent.OnCycleMagnification__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// float                                   NewFOV                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewMagnification                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQPipScopeCaptureComponent::OnCycleMagnification__DelegateSignature(float NewFOV, int32 NewMagnification)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPipScopeCaptureComponent", "OnCycleMagnification__DelegateSignature");

	Params::SQPipScopeCaptureComponent_OnCycleMagnification__DelegateSignature Parms{};

	Parms.NewFOV = NewFOV;
	Parms.NewMagnification = NewMagnification;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQPipScopeCaptureComponent.OnPawnOwnerChanged
// (Final, Native, Private)
// Parameters:
// class APawn*                            NewPawnOwner                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQPipScopeCaptureComponent::OnPawnOwnerChanged(class APawn* NewPawnOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPipScopeCaptureComponent", "OnPawnOwnerChanged");

	Params::SQPipScopeCaptureComponent_OnPawnOwnerChanged Parms{};

	Parms.NewPawnOwner = NewPawnOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPipScopeCaptureComponent.OnPlayerDowned
// (Final, Native, Protected)

void USQPipScopeCaptureComponent::OnPlayerDowned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPipScopeCaptureComponent", "OnPlayerDowned");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPipScopeCaptureComponent.PrioritizeScopeClarity
// (Final, Native, Private)
// Parameters:
// bool                                    bIsPrioritizingScopeClarity                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQPipScopeCaptureComponent::PrioritizeScopeClarity(const bool bIsPrioritizingScopeClarity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPipScopeCaptureComponent", "PrioritizeScopeClarity");

	Params::SQPipScopeCaptureComponent_PrioritizeScopeClarity Parms{};

	Parms.bIsPrioritizingScopeClarity = bIsPrioritizingScopeClarity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPipScopeCaptureComponent.WeaponUnEquipped
// (Final, Native, Protected)
// Parameters:
// class ASQEquipableItem*                 EquipableItem                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQPipScopeCaptureComponent::WeaponUnEquipped(class ASQEquipableItem* EquipableItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPipScopeCaptureComponent", "WeaponUnEquipped");

	Params::SQPipScopeCaptureComponent_WeaponUnEquipped Parms{};

	Parms.EquipableItem = EquipableItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPipScopeCaptureComponent.GetRenderTargetSizeMultiplier
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQPipScopeCaptureComponent::GetRenderTargetSizeMultiplier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPipScopeCaptureComponent", "GetRenderTargetSizeMultiplier");

	Params::SQPipScopeCaptureComponent_GetRenderTargetSizeMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAnimInstanceSoldier1P.SetWeaponSpringBipodEventDefaults
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bBipodState                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQAnimInstanceSoldier1P::SetWeaponSpringBipodEventDefaults(const bool bBipodState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier1P", "SetWeaponSpringBipodEventDefaults");

	Params::SQAnimInstanceSoldier1P_SetWeaponSpringBipodEventDefaults Parms{};

	Parms.bBipodState = bBipodState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier1P.SetWeaponSpringParameters
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bAdsState                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQAnimInstanceSoldier1P::SetWeaponSpringParameters(const bool bAdsState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier1P", "SetWeaponSpringParameters");

	Params::SQAnimInstanceSoldier1P_SetWeaponSpringParameters Parms{};

	Parms.bAdsState = bAdsState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier1P.Update1pCurrentFloor
// (Final, Native, Protected, BlueprintCallable)

void USQAnimInstanceSoldier1P::Update1pCurrentFloor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier1P", "Update1pCurrentFloor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier1P.UpdateAccuracyParameters
// (Final, Native, Protected, BlueprintCallable)

void USQAnimInstanceSoldier1P::UpdateAccuracyParameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier1P", "UpdateAccuracyParameters");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier1P.UpdateBobbingsPlayrate
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   DeltaSeconds                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQAnimInstanceSoldier1P::UpdateBobbingsPlayrate(const float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier1P", "UpdateBobbingsPlayrate");

	Params::SQAnimInstanceSoldier1P_UpdateBobbingsPlayrate Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier1P.UpdateDeviation
// (Final, Native, Protected, BlueprintCallable)

void USQAnimInstanceSoldier1P::UpdateDeviation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier1P", "UpdateDeviation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier1P.UpdateDeviationVisuFb
// (Final, Native, Protected, BlueprintCallable)

void USQAnimInstanceSoldier1P::UpdateDeviationVisuFb()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier1P", "UpdateDeviationVisuFb");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier1P.UpdateFastPath
// (Final, Native, Protected, BlueprintCallable)

void USQAnimInstanceSoldier1P::UpdateFastPath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier1P", "UpdateFastPath");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier1P.UpdateGameplayParameters
// (Final, Native, Protected, BlueprintCallable)

void USQAnimInstanceSoldier1P::UpdateGameplayParameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier1P", "UpdateGameplayParameters");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier1P.UpdateIsFallingPlayRate
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   DeltaSeconds                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQAnimInstanceSoldier1P::UpdateIsFallingPlayRate(const float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier1P", "UpdateIsFallingPlayRate");

	Params::SQAnimInstanceSoldier1P_UpdateIsFallingPlayRate Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier1P.UpdateLofSuppression
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   DeltaSeconds                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQAnimInstanceSoldier1P::UpdateLofSuppression(const float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier1P", "UpdateLofSuppression");

	Params::SQAnimInstanceSoldier1P_UpdateLofSuppression Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier1P.UpdatePitch
// (Final, Native, Protected, BlueprintCallable)

void USQAnimInstanceSoldier1P::UpdatePitch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier1P", "UpdatePitch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier1P.UpdateRecoilAndFire
// (Final, Native, Protected, BlueprintCallable)

void USQAnimInstanceSoldier1P::UpdateRecoilAndFire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier1P", "UpdateRecoilAndFire");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier1P.UpdateSprintSpeedBlend
// (Final, Native, Protected, BlueprintCallable)

void USQAnimInstanceSoldier1P::UpdateSprintSpeedBlend()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier1P", "UpdateSprintSpeedBlend");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier1P.UpdateStrafeSpring
// (Final, Native, Protected, BlueprintCallable)

void USQAnimInstanceSoldier1P::UpdateStrafeSpring()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier1P", "UpdateStrafeSpring");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier1P.UpdateSwitchedProne
// (Final, Native, Protected, BlueprintCallable)

void USQAnimInstanceSoldier1P::UpdateSwitchedProne()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier1P", "UpdateSwitchedProne");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier1P.UpdateTurnSpring
// (Final, Native, Protected, BlueprintCallable)

void USQAnimInstanceSoldier1P::UpdateTurnSpring()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier1P", "UpdateTurnSpring");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier1P.UpdateWasCrouchedBeforeProne
// (Final, Native, Protected, BlueprintCallable)

void USQAnimInstanceSoldier1P::UpdateWasCrouchedBeforeProne()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier1P", "UpdateWasCrouchedBeforeProne");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier3P.Update3pCurrentFloor
// (Final, Native, Protected, BlueprintCallable)

void USQAnimInstanceSoldier3P::Update3pCurrentFloor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier3P", "Update3pCurrentFloor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier3P.UpdateAimOffset
// (Final, Native, Protected, BlueprintCallable)

void USQAnimInstanceSoldier3P::UpdateAimOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier3P", "UpdateAimOffset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier3P.UpdateAimRotation
// (Final, Native, Protected, BlueprintCallable)

void USQAnimInstanceSoldier3P::UpdateAimRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier3P", "UpdateAimRotation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier3P.UpdateDirection
// (Final, Native, Protected, BlueprintCallable)

void USQAnimInstanceSoldier3P::UpdateDirection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier3P", "UpdateDirection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier3P.UpdateFastPathVariables
// (Final, Native, Protected, BlueprintCallable)

void USQAnimInstanceSoldier3P::UpdateFastPathVariables()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier3P", "UpdateFastPathVariables");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier3P.UpdateIkFeetRootRelRot
// (Final, Native, Protected, BlueprintCallable)

void USQAnimInstanceSoldier3P::UpdateIkFeetRootRelRot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier3P", "UpdateIkFeetRootRelRot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier3P.UpdateIkFootOrientation
// (Final, Native, Protected, BlueprintCallable)

void USQAnimInstanceSoldier3P::UpdateIkFootOrientation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier3P", "UpdateIkFootOrientation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier3P.UpdateLandingVel
// (Final, Native, Protected, BlueprintCallable)

void USQAnimInstanceSoldier3P::UpdateLandingVel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier3P", "UpdateLandingVel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier3P.UpdateLeanYawOffset
// (Final, Native, Protected, BlueprintCallable)

void USQAnimInstanceSoldier3P::UpdateLeanYawOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier3P", "UpdateLeanYawOffset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier3P.UpdateSmoothVelocity
// (Final, Native, Protected, BlueprintCallable)

void USQAnimInstanceSoldier3P::UpdateSmoothVelocity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier3P", "UpdateSmoothVelocity");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier3P.UpdateSprintStopCachedSpeed
// (Final, Native, Protected, BlueprintCallable)

void USQAnimInstanceSoldier3P::UpdateSprintStopCachedSpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier3P", "UpdateSprintStopCachedSpeed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier3P.UpdateStopMoveAlpha
// (Final, Native, Protected, BlueprintCallable)

void USQAnimInstanceSoldier3P::UpdateStopMoveAlpha()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier3P", "UpdateStopMoveAlpha");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAnimInstanceSoldier3P.UpdateTurnChar
// (Final, Native, Protected, BlueprintCallable)

void USQAnimInstanceSoldier3P::UpdateTurnChar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAnimInstanceSoldier3P", "UpdateTurnChar");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQArmorMeshComponent.GetArmorThicknessAtHit
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHitResult                       InHit                                                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQArmorMeshComponent::GetArmorThicknessAtHit(const struct FHitResult& InHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQArmorMeshComponent", "GetArmorThicknessAtHit");

	Params::SQArmorMeshComponent_GetArmorThicknessAtHit Parms{};

	Parms.InHit = std::move(InHit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAvailability_Deployable.GetRefundPercentage
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQAvailability_Deployable::GetRefundPercentage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAvailability_Deployable", "GetRefundPercentage");

	Params::SQAvailability_Deployable_GetRefundPercentage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Squad.SQAvailability_Deployable.ProcessRefund
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQTeam*                          InTeam                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQDeployable*                    InDeployable                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQAvailability_Deployable::ProcessRefund(class ASQPlayerController* InPlayer, class ASQTeam* InTeam, const class ASQDeployable* InDeployable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAvailability_Deployable", "ProcessRefund");

	Params::SQAvailability_Deployable_ProcessRefund Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InTeam = InTeam;
	Parms.InDeployable = InDeployable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQAvailability_Deployable.ShouldRefund
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQTeam*                          InTeam                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQDeployable*                    InDeployable                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQAvailability_Deployable::ShouldRefund(class ASQPlayerController* InPlayer, class ASQTeam* InTeam, const class ASQDeployable* InDeployable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAvailability_Deployable", "ShouldRefund");

	Params::SQAvailability_Deployable_ShouldRefund Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InTeam = InTeam;
	Parms.InDeployable = InDeployable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAvailability_Role.CanRearm
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class ISQRearmSource>  InRearmSource                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// float                                   OutCost                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDataTableRowHandle              OutRestrictionReason                                   (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQAvailability_Role::CanRearm(class ASQPlayerController* InPlayer, const TScriptInterface<class ISQRearmSource>& InRearmSource, float* OutCost, struct FDataTableRowHandle* OutRestrictionReason) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAvailability_Role", "CanRearm");

	Params::SQAvailability_Role_CanRearm Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InRearmSource = InRearmSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutCost != nullptr)
		*OutCost = Parms.OutCost;

	if (OutRestrictionReason != nullptr)
		*OutRestrictionReason = std::move(Parms.OutRestrictionReason);

	return Parms.ReturnValue;
}


// Function Squad.SQAvailability_Role.GetAvailabilityForPlayerRearm
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class ISQRearmSource>  InRearmSource                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState_Role        InOutRearmStatus                                       (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   OutCost                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQAvailability_Role::GetAvailabilityForPlayerRearm(class ASQPlayerController* InPlayer, const TScriptInterface<class ISQRearmSource>& InRearmSource, struct FSQAvailabilityState_Role* InOutRearmStatus, float* OutCost) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAvailability_Role", "GetAvailabilityForPlayerRearm");

	Params::SQAvailability_Role_GetAvailabilityForPlayerRearm Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InRearmSource = InRearmSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InOutRearmStatus != nullptr)
		*InOutRearmStatus = std::move(Parms.InOutRearmStatus);

	if (OutCost != nullptr)
		*OutCost = Parms.OutCost;
}


// Function Squad.SQAvailability_Role.GetInsufficientAmmoReamFailureReason
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FDataTableRowHandle              ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FDataTableRowHandle USQAvailability_Role::GetInsufficientAmmoReamFailureReason() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAvailability_Role", "GetInsufficientAmmoReamFailureReason");

	Params::SQAvailability_Role_GetInsufficientAmmoReamFailureReason Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Squad.SQAvailability_Role.GetRearmOperationCost
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class ISQRearmSource>  InRearmSource                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQAvailability_Role::GetRearmOperationCost(class ASQPlayerController* InPlayer, const TScriptInterface<class ISQRearmSource>& InRearmSource) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAvailability_Role", "GetRearmOperationCost");

	Params::SQAvailability_Role_GetRearmOperationCost Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InRearmSource = InRearmSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAvailability_Role.GetRearmRefundPercentage
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQAvailability_Role::GetRearmRefundPercentage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAvailability_Role", "GetRearmRefundPercentage");

	Params::SQAvailability_Role_GetRearmRefundPercentage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Squad.SQAvailability_Role.HasSameCountLimit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQAvailability_Role*             Other                                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQAvailability_Role::HasSameCountLimit(const class USQAvailability_Role* Other) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAvailability_Role", "HasSameCountLimit");

	Params::SQAvailability_Role_HasSameCountLimit Parms{};

	Parms.Other = Other;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQAvailability_Role.ProcessRearmCost
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class ISQRearmSource>  InRearmSource                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)

void USQAvailability_Role::ProcessRearmCost(class ASQPlayerController* InPlayer, const TScriptInterface<class ISQRearmSource>& InRearmSource) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQAvailability_Role", "ProcessRearmCost");

	Params::SQAvailability_Role_ProcessRearmCost Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InRearmSource = InRearmSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBaseGameSubsystem.TickSubsystem
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBaseGameSubsystem::TickSubsystem(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBaseGameSubsystem", "TickSubsystem");

	Params::SQBaseGameSubsystem_TickSubsystem Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQBlastComponent.FireBlast
// (Final, Native, Public, BlueprintCallable)

void USQBlastComponent::FireBlast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBlastComponent", "FireBlast");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBlastComponent.ServerFireBlast
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults, NetValidate)
// Parameters:
// struct FVector                          BlastLocationZeroBased                                 (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          BlastAimVector                                         (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBlastComponent::ServerFireBlast(const struct FVector& BlastLocationZeroBased, const struct FVector& BlastAimVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBlastComponent", "ServerFireBlast");

	Params::SQBlastComponent_ServerFireBlast Parms{};

	Parms.BlastLocationZeroBased = std::move(BlastLocationZeroBased);
	Parms.BlastAimVector = std::move(BlastAimVector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.BeginAltUse
// (Native, Public, BlueprintCallable)

void ASQEquipableItem::BeginAltUse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "BeginAltUse");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.BeginUse
// (Native, Public, BlueprintCallable)

void ASQEquipableItem::BeginUse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "BeginUse");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.BlueprintDrawHUD
// (Event, Public, BlueprintEvent)
// Parameters:
// class UCanvas*                          Canvas                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQEquipableItem::BlueprintDrawHUD(class UCanvas* Canvas)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "BlueprintDrawHUD");

	Params::SQEquipableItem_BlueprintDrawHUD Parms{};

	Parms.Canvas = Canvas;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQEquipableItem.BlueprintOnEquip
// (Native, Event, Protected, BlueprintEvent)

void ASQEquipableItem::BlueprintOnEquip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "BlueprintOnEquip");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.BlueprintOnEquipped
// (Native, Event, Protected, BlueprintEvent)

void ASQEquipableItem::BlueprintOnEquipped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "BlueprintOnEquipped");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.BlueprintOnUnequip
// (Native, Event, Protected, BlueprintEvent)

void ASQEquipableItem::BlueprintOnUnequip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "BlueprintOnUnequip");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.BlueprintOnUnequipped
// (Native, Event, Protected, BlueprintEvent)

void ASQEquipableItem::BlueprintOnUnequipped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "BlueprintOnUnequipped");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.BlueprintUpdateFirstPersonVisibility
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bIsFirstPersonVisible                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQEquipableItem::BlueprintUpdateFirstPersonVisibility(bool bIsFirstPersonVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "BlueprintUpdateFirstPersonVisibility");

	Params::SQEquipableItem_BlueprintUpdateFirstPersonVisibility Parms{};

	Parms.bIsFirstPersonVisible = bIsFirstPersonVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.BPBeginAltUse
// (Event, Public, BlueprintEvent)

void ASQEquipableItem::BPBeginAltUse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "BPBeginAltUse");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQEquipableItem.BPBeginUse
// (Event, Public, BlueprintEvent)

void ASQEquipableItem::BPBeginUse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "BPBeginUse");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQEquipableItem.BPEndAltUse
// (Event, Public, BlueprintEvent)

void ASQEquipableItem::BPEndAltUse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "BPEndAltUse");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQEquipableItem.BPEndUse
// (Event, Public, BlueprintEvent)

void ASQEquipableItem::BPEndUse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "BPEndUse");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQEquipableItem.Drop
// (Final, Native, Public, BlueprintCallable)

void ASQEquipableItem::Drop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "Drop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.EndAltUse
// (Native, Public, BlueprintCallable)

void ASQEquipableItem::EndAltUse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "EndAltUse");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.EndUse
// (Native, Public, BlueprintCallable)

void ASQEquipableItem::EndUse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "EndUse");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.GetFireDirection
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ASQEquipableItem::GetFireDirection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "GetFireDirection");

	Params::SQEquipableItem_GetFireDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEquipableItem.GetMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bGetMesh1P                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* ASQEquipableItem::GetMesh(bool bGetMesh1P)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "GetMesh");

	Params::SQEquipableItem_GetMesh Parms{};

	Parms.bGetMesh1P = bGetMesh1P;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEquipableItem.HasAmmo
// (Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQEquipableItem::HasAmmo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "HasAmmo");

	Params::SQEquipableItem_HasAmmo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEquipableItem.Hide
// (Native, Public, BlueprintCallable)

void ASQEquipableItem::Hide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "Hide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.InitializeAmmoValues
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FSQInventoryData                 ItemClass                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bSpawnMaxAmmo                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQPersistedAmmoCount            PersistedAmmo                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ASQEquipableItem::InitializeAmmoValues(const struct FSQInventoryData& ItemClass, bool bSpawnMaxAmmo, const struct FSQPersistedAmmoCount& PersistedAmmo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "InitializeAmmoValues");

	Params::SQEquipableItem_InitializeAmmoValues Parms{};

	Parms.ItemClass = std::move(ItemClass);
	Parms.bSpawnMaxAmmo = bSpawnMaxAmmo;
	Parms.PersistedAmmo = std::move(PersistedAmmo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.MulticastStopAllMontages3P
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void ASQEquipableItem::MulticastStopAllMontages3P()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "MulticastStopAllMontages3P");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.PendingEquip
// (Final, Native, Private)

void ASQEquipableItem::PendingEquip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "PendingEquip");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.Pickup
// (Final, Native, Public, BlueprintCallable)

void ASQEquipableItem::Pickup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "Pickup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.PlayEquipAnimation
// (Native, Protected, BlueprintCallable)

void ASQEquipableItem::PlayEquipAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "PlayEquipAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.PlaySoundAttachedToWeapon
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class USoundCue*                        Sound1p                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundCue*                        Sound3p                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          FallbackOrigin                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQEquipableItem::PlaySoundAttachedToWeapon(class USoundCue* Sound1p, class USoundCue* Sound3p, const class FName& SocketName, const struct FVector& FallbackOrigin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "PlaySoundAttachedToWeapon");

	Params::SQEquipableItem_PlaySoundAttachedToWeapon Parms{};

	Parms.Sound1p = Sound1p;
	Parms.Sound3p = Sound3p;
	Parms.SocketName = SocketName;
	Parms.FallbackOrigin = std::move(FallbackOrigin);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.PlayUnequipAnimation
// (Native, Protected, BlueprintCallable)

void ASQEquipableItem::PlayUnequipAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "PlayUnequipAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.Rearm
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// int32                                   Quantity                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQEquipableItem::Rearm(int32 Quantity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "Rearm");

	Params::SQEquipableItem_Rearm Parms{};

	Parms.Quantity = Quantity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEquipableItem.ReinitializeAnimInstances
// (Final, Native, Public, BlueprintCallable)

void ASQEquipableItem::ReinitializeAnimInstances()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "ReinitializeAnimInstances");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.ReinitializeEquip
// (Final, Native, Public, BlueprintCallable)

void ASQEquipableItem::ReinitializeEquip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "ReinitializeEquip");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.ServerConsumeItem
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)

void ASQEquipableItem::ServerConsumeItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "ServerConsumeItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.SetLoweringAnimation
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bLowered                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQEquipableItem::SetLoweringAnimation(bool bLowered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "SetLoweringAnimation");

	Params::SQEquipableItem_SetLoweringAnimation Parms{};

	Parms.bLowered = bLowered;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.SetRaisingAnimation
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bRaised                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQEquipableItem::SetRaisingAnimation(bool bRaised)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "SetRaisingAnimation");

	Params::SQEquipableItem_SetRaisingAnimation Parms{};

	Parms.bRaised = bRaised;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.StopAllMontages3P
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   blendOutTime                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQEquipableItem::StopAllMontages3P(const float blendOutTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "StopAllMontages3P");

	Params::SQEquipableItem_StopAllMontages3P Parms{};

	Parms.blendOutTime = blendOutTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.UpdateFirstPersonVisibility
// (Final, Native, Public, BlueprintCallable)

void ASQEquipableItem::UpdateFirstPersonVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "UpdateFirstPersonVisibility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.UpdateItemVisibility
// (Final, Native, Private)
// Parameters:
// bool                                    NewVisibility                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQEquipableItem::UpdateItemVisibility(bool NewVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "UpdateItemVisibility");

	Params::SQEquipableItem_UpdateItemVisibility Parms{};

	Parms.NewVisibility = NewVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.UpdateLeanLeft
// (Native, Protected, BlueprintCallable)

void ASQEquipableItem::UpdateLeanLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "UpdateLeanLeft");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.UpdateLeanRight
// (Native, Protected, BlueprintCallable)

void ASQEquipableItem::UpdateLeanRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "UpdateLeanRight");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.UpdateMoveBobbing
// (Native, Protected, BlueprintCallable)

void ASQEquipableItem::UpdateMoveBobbing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "UpdateMoveBobbing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.UpdateMoveInputs
// (Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bForceStopLoop                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQEquipableItem::UpdateMoveInputs(bool bForceStopLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "UpdateMoveInputs");

	Params::SQEquipableItem_UpdateMoveInputs Parms{};

	Parms.bForceStopLoop = bForceStopLoop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.UpdateSprintBobbing
// (Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bForceStopLoop                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQEquipableItem::UpdateSprintBobbing(bool bForceStopLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "UpdateSprintBobbing");

	Params::SQEquipableItem_UpdateSprintBobbing Parms{};

	Parms.bForceStopLoop = bForceStopLoop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEquipableItem.CalculateMaxAmmoCost
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// int32                                   MaxCount                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQEquipableItem::CalculateMaxAmmoCost(int32 MaxCount) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "CalculateMaxAmmoCost");

	Params::SQEquipableItem_CalculateMaxAmmoCost Parms{};

	Parms.MaxCount = MaxCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEquipableItem.CalculateMissingAmmoCost
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQEquipableItem::CalculateMissingAmmoCost() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "CalculateMissingAmmoCost");

	Params::SQEquipableItem_CalculateMissingAmmoCost Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEquipableItem.CalculateMissingRearmItems
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQEquipableItem::CalculateMissingRearmItems() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "CalculateMissingRearmItems");

	Params::SQEquipableItem_CalculateMissingRearmItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEquipableItem.CalculateRearmAmmoCost
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   QuantityToRearm                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQEquipableItem::CalculateRearmAmmoCost(int32 QuantityToRearm) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "CalculateRearmAmmoCost");

	Params::SQEquipableItem_CalculateRearmAmmoCost Parms{};

	Parms.QuantityToRearm = QuantityToRearm;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEquipableItem.CanAltUse
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQEquipableItem::CanAltUse() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "CanAltUse");

	Params::SQEquipableItem_CanAltUse Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEquipableItem.CanRearm
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQEquipableItem::CanRearm() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "CanRearm");

	Params::SQEquipableItem_CanRearm Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEquipableItem.CanRearmFromType
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESQRearmType                            RearmType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQEquipableItem::CanRearmFromType(ESQRearmType RearmType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "CanRearmFromType");

	Params::SQEquipableItem_CanRearmFromType Parms{};

	Parms.RearmType = RearmType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEquipableItem.CanShovel
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ShovelTraceLength                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ShovelTraceSphereRadius                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<EObjectTypeQuery>                ObjectTypes                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bRemovingHealth                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQDeployable*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQDeployable* ASQEquipableItem::CanShovel(int32 ShovelTraceLength, float ShovelTraceSphereRadius, const TArray<EObjectTypeQuery>& ObjectTypes, bool bRemovingHealth) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "CanShovel");

	Params::SQEquipableItem_CanShovel Parms{};

	Parms.ShovelTraceLength = ShovelTraceLength;
	Parms.ShovelTraceSphereRadius = ShovelTraceSphereRadius;
	Parms.ObjectTypes = std::move(ObjectTypes);
	Parms.bRemovingHealth = bRemovingHealth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEquipableItem.CanUse
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQEquipableItem::CanUse() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "CanUse");

	Params::SQEquipableItem_CanUse Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEquipableItem.CreatePersistingAmmoCount
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// struct FSQPersistedAmmoCount            ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSQPersistedAmmoCount ASQEquipableItem::CreatePersistingAmmoCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "CreatePersistingAmmoCount");

	Params::SQEquipableItem_CreatePersistingAmmoCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEquipableItem.GetController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AController*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AController* ASQEquipableItem::GetController() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "GetController");

	Params::SQEquipableItem_GetController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEquipableItem.GetItemStaticInfo
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQItemStaticInfo*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQItemStaticInfo* ASQEquipableItem::GetItemStaticInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "GetItemStaticInfo");

	Params::SQEquipableItem_GetItemStaticInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEquipableItem.GetOwnerPawn
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APawn*                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APawn* ASQEquipableItem::GetOwnerPawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "GetOwnerPawn");

	Params::SQEquipableItem_GetOwnerPawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEquipableItem.GetRearmItemCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQEquipableItem::GetRearmItemCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "GetRearmItemCount");

	Params::SQEquipableItem_GetRearmItemCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEquipableItem.GetRearmMaxItemCount
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQEquipableItem::GetRearmMaxItemCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "GetRearmMaxItemCount");

	Params::SQEquipableItem_GetRearmMaxItemCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEquipableItem.IsAmmoFull
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQEquipableItem::IsAmmoFull() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "IsAmmoFull");

	Params::SQEquipableItem_IsAmmoFull Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEquipableItem.IsBeingUsed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQEquipableItem::IsBeingUsed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "IsBeingUsed");

	Params::SQEquipableItem_IsBeingUsed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEquipableItem.IsEquipped
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQEquipableItem::IsEquipped() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "IsEquipped");

	Params::SQEquipableItem_IsEquipped Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEquipableItem.IsFirstPersonViewTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQEquipableItem::IsFirstPersonViewTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "IsFirstPersonViewTarget");

	Params::SQEquipableItem_IsFirstPersonViewTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEquipableItem.ShovelHitDeployable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FHitResult                       HitResult                                              (Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    bRemovingHealth                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQDeployable*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQDeployable* ASQEquipableItem::ShovelHitDeployable(const struct FHitResult& HitResult, bool bRemovingHealth) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEquipableItem", "ShovelHitDeployable");

	Params::SQEquipableItem_ShovelHitDeployable Parms{};

	Parms.HitResult = std::move(HitResult);
	Parms.bRemovingHealth = bRemovingHealth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRepairEquipable.OnRep_RepairedTarget
// (Final, Native, Protected)
// Parameters:
// class ASQVehicle*                       PreviousRepairedTarget                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQRepairEquipable::OnRep_RepairedTarget(class ASQVehicle* PreviousRepairedTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRepairEquipable", "OnRep_RepairedTarget");

	Params::SQRepairEquipable_OnRep_RepairedTarget Parms{};

	Parms.PreviousRepairedTarget = PreviousRepairedTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.AttemptRadialSuppression
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          SuppressionOrigin                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           SuppressionInstigator                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USQRadialSuppressionInfo>SuppressionInfoClass                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSoldier::AttemptRadialSuppression(const struct FVector& SuppressionOrigin, const class AActor* SuppressionInstigator, TSubclassOf<class USQRadialSuppressionInfo> SuppressionInfoClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "AttemptRadialSuppression");

	Params::SQSoldier_AttemptRadialSuppression Parms{};

	Parms.SuppressionOrigin = std::move(SuppressionOrigin);
	Parms.SuppressionInstigator = SuppressionInstigator;
	Parms.SuppressionInfoClass = SuppressionInfoClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.AttemptSuppression
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          SuppressionStart                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          SuppressionEnd                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ProjectileInstigator                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USQSuppressionInfo>   SuppressionInfoClass                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutClosestPoint                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOutApplySuppression                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSoldier::AttemptSuppression(const struct FVector& SuppressionStart, const struct FVector& SuppressionEnd, const class AActor* ProjectileInstigator, TSubclassOf<class USQSuppressionInfo> SuppressionInfoClass, struct FVector* OutClosestPoint, bool* bOutApplySuppression)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "AttemptSuppression");

	Params::SQSoldier_AttemptSuppression Parms{};

	Parms.SuppressionStart = std::move(SuppressionStart);
	Parms.SuppressionEnd = std::move(SuppressionEnd);
	Parms.ProjectileInstigator = ProjectileInstigator;
	Parms.SuppressionInfoClass = SuppressionInfoClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutClosestPoint != nullptr)
		*OutClosestPoint = std::move(Parms.OutClosestPoint);

	if (bOutApplySuppression != nullptr)
		*bOutApplySuppression = Parms.bOutApplySuppression;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.AttemptToRearmWeapons
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TScriptInterface<class ISQRearmSource>  RearmSource                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// TArray<struct FSQRearmWeaponRequest>    RearmRequest                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSoldier::AttemptToRearmWeapons(TScriptInterface<class ISQRearmSource> RearmSource, const TArray<struct FSQRearmWeaponRequest>& RearmRequest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "AttemptToRearmWeapons");

	Params::SQSoldier_AttemptToRearmWeapons Parms{};

	Parms.RearmSource = RearmSource;
	Parms.RearmRequest = std::move(RearmRequest);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.BeginAltFireWeapon
// (Native, Public, BlueprintCallable)

void ASQSoldier::BeginAltFireWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "BeginAltFireWeapon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.BeginFireWeapon
// (Native, Public, BlueprintCallable)

void ASQSoldier::BeginFireWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "BeginFireWeapon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.BeginInteract
// (Native, Public, BlueprintCallable)

void ASQSoldier::BeginInteract()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "BeginInteract");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.BlueprintCalcCamera
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InLocation                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         InRotation                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   InFOV                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutLocation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         OutRotation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   OutFOV                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::BlueprintCalcCamera(float DeltaTime, const struct FVector& InLocation, const struct FRotator& InRotation, float InFOV, struct FVector* OutLocation, struct FRotator* OutRotation, float* OutFOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "BlueprintCalcCamera");

	Params::SQSoldier_BlueprintCalcCamera Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.InLocation = std::move(InLocation);
	Parms.InRotation = std::move(InRotation);
	Parms.InFOV = InFOV;

	UObject::ProcessEvent(Func, &Parms);

	if (OutLocation != nullptr)
		*OutLocation = std::move(Parms.OutLocation);

	if (OutRotation != nullptr)
		*OutRotation = std::move(Parms.OutRotation);

	if (OutFOV != nullptr)
		*OutFOV = Parms.OutFOV;
}


// Function Squad.SQSoldier.BlueprintUpdateFirstPersonVisibility
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bIsFirstPersonVisible                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::BlueprintUpdateFirstPersonVisibility(bool bIsFirstPersonVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "BlueprintUpdateFirstPersonVisibility");

	Params::SQSoldier_BlueprintUpdateFirstPersonVisibility Parms{};

	Parms.bIsFirstPersonVisible = bIsFirstPersonVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQSoldier.BlueprintUpdateSkin
// (Native, Event, Public, BlueprintEvent)

void ASQSoldier::BlueprintUpdateSkin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "BlueprintUpdateSkin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.BPBleedingDamageTaken
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::BPBleedingDamageTaken(float Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "BPBleedingDamageTaken");

	Params::SQSoldier_BPBleedingDamageTaken Parms{};

	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQSoldier.BPDie
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   KillingDamage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDamageEvent                     DamageEvent                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AController*                      Killer                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::BPDie(float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "BPDie");

	Params::SQSoldier_BPDie Parms{};

	Parms.KillingDamage = KillingDamage;
	Parms.DamageEvent = std::move(DamageEvent);
	Parms.Killer = Killer;
	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQSoldier.BPOnEndProne
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   HalfHeightAdjust                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaledHalfHeightAdjust                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::BPOnEndProne(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "BPOnEndProne");

	Params::SQSoldier_BPOnEndProne Parms{};

	Parms.HalfHeightAdjust = HalfHeightAdjust;
	Parms.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQSoldier.BPOnSnapZoneOverlapBegin
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASQSoldier::BPOnSnapZoneOverlapBegin(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "BPOnSnapZoneOverlapBegin");

	Params::SQSoldier_BPOnSnapZoneOverlapBegin Parms{};

	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQSoldier.BPOnSnapZoneOverlapEnd
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::BPOnSnapZoneOverlapEnd(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "BPOnSnapZoneOverlapEnd");

	Params::SQSoldier_BPOnSnapZoneOverlapEnd Parms{};

	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQSoldier.BPOnStartProne
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   HalfHeightAdjust                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaledHalfHeightAdjust                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::BPOnStartProne(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "BPOnStartProne");

	Params::SQSoldier_BPOnStartProne Parms{};

	Parms.HalfHeightAdjust = HalfHeightAdjust;
	Parms.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQSoldier.BPWound
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   KillingDamage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDamageEvent                     DamageEvent                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AController*                      Killer                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::BPWound(float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "BPWound");

	Params::SQSoldier_BPWound Parms{};

	Parms.KillingDamage = KillingDamage;
	Parms.DamageEvent = std::move(DamageEvent);
	Parms.Killer = Killer;
	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQSoldier.BPWoundedDamageTaken
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::BPWoundedDamageTaken(float Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "BPWoundedDamageTaken");

	Params::SQSoldier_BPWoundedDamageTaken Parms{};

	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQSoldier.CalcCamera_BP
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InLocation                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         InRotation                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   InFOV                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutLocation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         OutRotation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   OutFOV                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::CalcCamera_BP(float DeltaTime, const struct FVector& InLocation, const struct FRotator& InRotation, float InFOV, struct FVector* OutLocation, struct FRotator* OutRotation, float* OutFOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "CalcCamera_BP");

	Params::SQSoldier_CalcCamera_BP Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.InLocation = std::move(InLocation);
	Parms.InRotation = std::move(InRotation);
	Parms.InFOV = InFOV;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLocation != nullptr)
		*OutLocation = std::move(Parms.OutLocation);

	if (OutRotation != nullptr)
		*OutRotation = std::move(Parms.OutRotation);

	if (OutFOV != nullptr)
		*OutFOV = Parms.OutFOV;
}


// Function Squad.SQSoldier.ChangeSoundMix
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USoundMix*                        NewSoundMix                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::ChangeSoundMix(class USoundMix* NewSoundMix)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "ChangeSoundMix");

	Params::SQSoldier_ChangeSoundMix Parms{};

	Parms.NewSoundMix = NewSoundMix;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.ClearSeatState
// (Native, Public, BlueprintCallable)

void ASQSoldier::ClearSeatState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "ClearSeatState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.ClientRejectBipod
// (Net, NetReliable, Native, Event, Protected, NetClient)

void ASQSoldier::ClientRejectBipod()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "ClientRejectBipod");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.ClientRejectClimb
// (Final, Net, NetReliable, Native, Event, Private, NetClient)

void ASQSoldier::ClientRejectClimb()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "ClientRejectClimb");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.CycleThirdPersonViewMode
// (Final, Native, Public, BlueprintCallable)

void ASQSoldier::CycleThirdPersonViewMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "CycleThirdPersonViewMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.CycleVariableWeaponMagnification
// (Final, Native, Public, BlueprintCallable)

void ASQSoldier::CycleVariableWeaponMagnification()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "CycleVariableWeaponMagnification");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.DeactivateSprintState
// (Final, Native, Protected)
// Parameters:
// bool                                    bHasMovementInput                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::DeactivateSprintState(bool bHasMovementInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "DeactivateSprintState");

	Params::SQSoldier_DeactivateSprintState Parms{};

	Parms.bHasMovementInput = bHasMovementInput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.DebugAddAmmoSupply
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::DebugAddAmmoSupply(int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "DebugAddAmmoSupply");

	Params::SQSoldier_DebugAddAmmoSupply Parms{};

	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.DebugAddBuildSupply
// (Final, Exec, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::DebugAddBuildSupply(int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "DebugAddBuildSupply");

	Params::SQSoldier_DebugAddBuildSupply Parms{};

	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.DebugFullHealth
// (Final, Exec, Native, Public)

void ASQSoldier::DebugFullHealth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "DebugFullHealth");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.DebugRagdoll
// (Final, Exec, Native, Public)

void ASQSoldier::DebugRagdoll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "DebugRagdoll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.DebugRevive
// (Final, Exec, Native, Public, BlueprintCallable)

void ASQSoldier::DebugRevive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "DebugRevive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.DebugSetHealth
// (Final, Exec, Native, Public)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::DebugSetHealth(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "DebugSetHealth");

	Params::SQSoldier_DebugSetHealth Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.DebugStopBleeding
// (Final, Exec, Native, Public, BlueprintCallable)

void ASQSoldier::DebugStopBleeding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "DebugStopBleeding");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.DebugToggleGodMode
// (Final, Exec, Native, Public, BlueprintCallable)

void ASQSoldier::DebugToggleGodMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "DebugToggleGodMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.DebugToggleOriginRebaseTest
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::DebugToggleOriginRebaseTest(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "DebugToggleOriginRebaseTest");

	Params::SQSoldier_DebugToggleOriginRebaseTest Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.DebugTogglePostRecovery
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::DebugTogglePostRecovery(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "DebugTogglePostRecovery");

	Params::SQSoldier_DebugTogglePostRecovery Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.DecreaseCameraDistance
// (Final, Native, Public, BlueprintCallable)

void ASQSoldier::DecreaseCameraDistance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "DecreaseCameraDistance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.Die
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   KillingDamage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDamageEvent                     DamageEvent                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AController*                      Killer                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSoldier::Die(float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "Die");

	Params::SQSoldier_Die Parms{};

	Parms.KillingDamage = KillingDamage;
	Parms.DamageEvent = std::move(DamageEvent);
	Parms.Killer = Killer;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.DisableSpawnProtection
// (Native, Public, BlueprintCallable)

void ASQSoldier::DisableSpawnProtection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "DisableSpawnProtection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.EndAimDownSights
// (Native, Public)

void ASQSoldier::EndAimDownSights()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "EndAimDownSights");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.EndAltFireWeapon
// (Native, Public, BlueprintCallable)

void ASQSoldier::EndAltFireWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "EndAltFireWeapon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.EndFireWeapon
// (Native, Public, BlueprintCallable)

void ASQSoldier::EndFireWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "EndFireWeapon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.EndInteract
// (Native, Public, BlueprintCallable)

void ASQSoldier::EndInteract()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "EndInteract");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.EnteredSeat
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class USQVehicleSeatComponent*          PreviousSeat                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQVehicleSeatComponent*          NewSeat                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSwitchedSeats                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnteredVehicle                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::EnteredSeat(class USQVehicleSeatComponent* PreviousSeat, class USQVehicleSeatComponent* NewSeat, bool bSwitchedSeats, bool bEnteredVehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "EnteredSeat");

	Params::SQSoldier_EnteredSeat Parms{};

	Parms.PreviousSeat = PreviousSeat;
	Parms.NewSeat = NewSeat;
	Parms.bSwitchedSeats = bSwitchedSeats;
	Parms.bEnteredVehicle = bEnteredVehicle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.EnteredVehicle
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class USQVehicleSeatComponent*          NewSeat                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::EnteredVehicle(class USQVehicleSeatComponent* NewSeat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "EnteredVehicle");

	Params::SQSoldier_EnteredVehicle Parms{};

	Parms.NewSeat = NewSeat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.GetDamageForFallingAtSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InFallSpeed                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InBaseHealth                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQSoldier::GetDamageForFallingAtSpeed(const float InFallSpeed, const float InBaseHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "GetDamageForFallingAtSpeed");

	Params::SQSoldier_GetDamageForFallingAtSpeed Parms{};

	Parms.InFallSpeed = InFallSpeed;
	Parms.InBaseHealth = InBaseHealth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.GetDrowningHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQSoldier::GetDrowningHeight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "GetDrowningHeight");

	Params::SQSoldier_GetDrowningHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.GetNearestFOB
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsFriendly                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQForwardBase*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQForwardBase* ASQSoldier::GetNearestFOB(bool bIsFriendly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "GetNearestFOB");

	Params::SQSoldier_GetNearestFOB Parms{};

	Parms.bIsFriendly = bIsFriendly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.GetSeatState
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ESQSoldierSeatState                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESQSoldierSeatState ASQSoldier::GetSeatState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "GetSeatState");

	Params::SQSoldier_GetSeatState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.Heal
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   AmountHealed                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::Heal(float AmountHealed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "Heal");

	Params::SQSoldier_Heal Parms{};

	Parms.AmountHealed = AmountHealed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.IncreaseCameraDistance
// (Final, Native, Public, BlueprintCallable)

void ASQSoldier::IncreaseCameraDistance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "IncreaseCameraDistance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.InitiateDragging
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ASQSoldier*                       SoldierToDrag                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BoneIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::InitiateDragging(class ASQSoldier* SoldierToDrag, int32 BoneIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "InitiateDragging");

	Params::SQSoldier_InitiateDragging Parms{};

	Parms.SoldierToDrag = SoldierToDrag;
	Parms.BoneIndex = BoneIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.InputClimb
// (Final, Native, Private)

void ASQSoldier::InputClimb()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "InputClimb");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.IsMontagePlaying
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     FirstPersonAnim                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ThirdPersonAnim                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSoldier::IsMontagePlaying(class UAnimMontage* FirstPersonAnim, class UAnimMontage* ThirdPersonAnim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "IsMontagePlaying");

	Params::SQSoldier_IsMontagePlaying Parms{};

	Parms.FirstPersonAnim = FirstPersonAnim;
	Parms.ThirdPersonAnim = ThirdPersonAnim;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.LeftSeat
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class USQVehicleSeatComponent*          PreviousSeat                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSwitchedSeats                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLeftVehicle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::LeftSeat(class USQVehicleSeatComponent* PreviousSeat, bool bSwitchedSeats, bool bLeftVehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "LeftSeat");

	Params::SQSoldier_LeftSeat Parms{};

	Parms.PreviousSeat = PreviousSeat;
	Parms.bSwitchedSeats = bSwitchedSeats;
	Parms.bLeftVehicle = bLeftVehicle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.LeftVehicle
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class USQVehicleSeatComponent*          PreviousSeat                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::LeftVehicle(class USQVehicleSeatComponent* PreviousSeat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "LeftVehicle");

	Params::SQSoldier_LeftVehicle Parms{};

	Parms.PreviousSeat = PreviousSeat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.MulticastChangeRootComponent
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// bool                                    bSetMeshAsRoot                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::MulticastChangeRootComponent(const bool bSetMeshAsRoot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "MulticastChangeRootComponent");

	Params::SQSoldier_MulticastChangeRootComponent Parms{};

	Parms.bSetMeshAsRoot = bSetMeshAsRoot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.MulticastLean
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// uint8                                   NewLeanDirection                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::MulticastLean(uint8 NewLeanDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "MulticastLean");

	Params::SQSoldier_MulticastLean Parms{};

	Parms.NewLeanDirection = NewLeanDirection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.MulticastPlayCustomEmote
// (Final, Net, Native, Event, NetMulticast, Private)
// Parameters:
// class FName                             CustomName                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::MulticastPlayCustomEmote(const class FName& CustomName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "MulticastPlayCustomEmote");

	Params::SQSoldier_MulticastPlayCustomEmote Parms{};

	Parms.CustomName = CustomName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.MulticastPlayEmoteAnim
// (Final, Net, Native, Event, NetMulticast, Private)
// Parameters:
// ESQEmotes                               Emote                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::MulticastPlayEmoteAnim(ESQEmotes Emote)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "MulticastPlayEmoteAnim");

	Params::SQSoldier_MulticastPlayEmoteAnim Parms{};

	Parms.Emote = Emote;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.MulticastSetDragging
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// bool                                    bDrag                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQSoldier*                       SoldierToDrag                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BoneIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::MulticastSetDragging(const bool bDrag, class ASQSoldier* SoldierToDrag, int32 BoneIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "MulticastSetDragging");

	Params::SQSoldier_MulticastSetDragging Parms{};

	Parms.bDrag = bDrag;
	Parms.SoldierToDrag = SoldierToDrag;
	Parms.BoneIndex = BoneIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.MulticastToggleGodMode
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void ASQSoldier::MulticastToggleGodMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "MulticastToggleGodMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.On_RepIsPlayingVoipHandAnim
// (Final, Native, Private)

void ASQSoldier::On_RepIsPlayingVoipHandAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "On_RepIsPlayingVoipHandAnim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.OnEnterBoundary
// (Final, Native, Public)
// Parameters:
// class USQBoundaryListener*              Listener                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQBoundary*                      Boundary                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::OnEnterBoundary(class USQBoundaryListener* Listener, class ASQBoundary* Boundary)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "OnEnterBoundary");

	Params::SQSoldier_OnEnterBoundary Parms{};

	Parms.Listener = Listener;
	Parms.Boundary = Boundary;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction Squad.SQSoldier.OnEquip__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class USQItemStaticInfo*                StaticInfo                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::OnEquip__DelegateSignature(class USQItemStaticInfo* StaticInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "OnEquip__DelegateSignature");

	Params::SQSoldier_OnEquip__DelegateSignature Parms{};

	Parms.StaticInfo = StaticInfo;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQSoldier.OnExitBoundary
// (Final, Native, Public)
// Parameters:
// class USQBoundaryListener*              Listener                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQBoundary*                      Boundary                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::OnExitBoundary(class USQBoundaryListener* Listener, class ASQBoundary* Boundary)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "OnExitBoundary");

	Params::SQSoldier_OnExitBoundary Parms{};

	Parms.Listener = Listener;
	Parms.Boundary = Boundary;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.OnFeetBottomCollideWithWaterLevel
// (Final, Native, Public)
// Parameters:
// float                                   ImmersionDepth                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::OnFeetBottomCollideWithWaterLevel(float ImmersionDepth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "OnFeetBottomCollideWithWaterLevel");

	Params::SQSoldier_OnFeetBottomCollideWithWaterLevel Parms{};

	Parms.ImmersionDepth = ImmersionDepth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.OnHipHeightCollideWithWaterLevel
// (Final, Native, Public)
// Parameters:
// float                                   ImmersionDepth                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::OnHipHeightCollideWithWaterLevel(float ImmersionDepth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "OnHipHeightCollideWithWaterLevel");

	Params::SQSoldier_OnHipHeightCollideWithWaterLevel Parms{};

	Parms.ImmersionDepth = ImmersionDepth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.OnNextItem
// (Native, Public, BlueprintCallable)

void ASQSoldier::OnNextItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "OnNextItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction Squad.SQSoldier.OnPossessionChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void ASQSoldier::OnPossessionChanged__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "OnPossessionChanged__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQSoldier.OnPrevItem
// (Native, Public, BlueprintCallable)

void ASQSoldier::OnPrevItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "OnPrevItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.OnRagdollHit
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComp                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASQSoldier::OnRagdollHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "OnRagdollHit");

	Params::SQSoldier_OnRagdollHit Parms{};

	Parms.HitComp = HitComp;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.OnRep_Bipod
// (Final, Native, Protected)
// Parameters:
// bool                                    bBipodWasDeployed                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::OnRep_Bipod(bool bBipodWasDeployed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "OnRep_Bipod");

	Params::SQSoldier_OnRep_Bipod Parms{};

	Parms.bBipodWasDeployed = bBipodWasDeployed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.OnRep_ClimbInfo
// (Final, Native, Private)
// Parameters:
// struct FSQClimbInfo                     PrevClimbInfo                                          (Parm, NativeAccessSpecifierPublic)

void ASQSoldier::OnRep_ClimbInfo(const struct FSQClimbInfo& PrevClimbInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "OnRep_ClimbInfo");

	Params::SQSoldier_OnRep_ClimbInfo Parms{};

	Parms.PrevClimbInfo = std::move(PrevClimbInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.OnRep_CurrentSeat
// (Native, Public)
// Parameters:
// class USQVehicleSeatComponent*          PreviousSeat                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::OnRep_CurrentSeat(class USQVehicleSeatComponent* PreviousSeat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "OnRep_CurrentSeat");

	Params::SQSoldier_OnRep_CurrentSeat Parms{};

	Parms.PreviousSeat = PreviousSeat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.OnRep_Health
// (Native, Public)
// Parameters:
// float                                   OldHealth                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::OnRep_Health(float OldHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "OnRep_Health");

	Params::SQSoldier_OnRep_Health Parms{};

	Parms.OldHealth = OldHealth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.OnRep_IsBleeding
// (Native, Public)

void ASQSoldier::OnRep_IsBleeding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "OnRep_IsBleeding");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.OnRep_IsDying
// (Native, Public)

void ASQSoldier::OnRep_IsDying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "OnRep_IsDying");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.OnRep_IsWounded
// (Native, Public)

void ASQSoldier::OnRep_IsWounded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "OnRep_IsWounded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.OnRep_ItemRaisedAboveHeadChanged
// (Final, Native, Private)
// Parameters:
// bool                                    bVal                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::OnRep_ItemRaisedAboveHeadChanged(bool bVal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "OnRep_ItemRaisedAboveHeadChanged");

	Params::SQSoldier_OnRep_ItemRaisedAboveHeadChanged Parms{};

	Parms.bVal = bVal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.OnRep_LastTakeHitInfo
// (Native, Protected)

void ASQSoldier::OnRep_LastTakeHitInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "OnRep_LastTakeHitInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.OnRep_SoldierSkinIndex
// (Final, Native, Public)

void ASQSoldier::OnRep_SoldierSkinIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "OnRep_SoldierSkinIndex");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.OnRep_WeaponLoweredChanged
// (Final, Native, Private)
// Parameters:
// bool                                    bVal                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::OnRep_WeaponLoweredChanged(bool bVal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "OnRep_WeaponLoweredChanged");

	Params::SQSoldier_OnRep_WeaponLoweredChanged Parms{};

	Parms.bVal = bVal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.OnSnapZoneOverlapBegin
// (Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASQSoldier::OnSnapZoneOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "OnSnapZoneOverlapBegin");

	Params::SQSoldier_OnSnapZoneOverlapBegin Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.OnSnapZoneOverlapEnd
// (Native, Public)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::OnSnapZoneOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "OnSnapZoneOverlapEnd");

	Params::SQSoldier_OnSnapZoneOverlapEnd Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.OutOfBoundsKillCallback
// (Final, Native, Public)

void ASQSoldier::OutOfBoundsKillCallback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "OutOfBoundsKillCallback");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.PlayClothingSound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   MaxDistanceInMeters                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::PlayClothingSound(float MaxDistanceInMeters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "PlayClothingSound");

	Params::SQSoldier_PlayClothingSound Parms{};

	Parms.MaxDistanceInMeters = MaxDistanceInMeters;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.PlayEquipmentSound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   MaxDistanceInMeters                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::PlayEquipmentSound(float MaxDistanceInMeters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "PlayEquipmentSound");

	Params::SQSoldier_PlayEquipmentSound Parms{};

	Parms.MaxDistanceInMeters = MaxDistanceInMeters;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.PlayFootStep
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             SocketName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             OpposingKneeSocketName                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxDistanceInMeters                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::PlayFootStep(const class FName SocketName, const class FName OpposingKneeSocketName, float MaxDistanceInMeters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "PlayFootStep");

	Params::SQSoldier_PlayFootStep Parms{};

	Parms.SocketName = SocketName;
	Parms.OpposingKneeSocketName = OpposingKneeSocketName;
	Parms.MaxDistanceInMeters = MaxDistanceInMeters;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.PlayOrStopAnimations
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     FirstPersonAnim                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ThirdPersonAnim                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bStopAnimation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   blendOutTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::PlayOrStopAnimations(class UAnimMontage* FirstPersonAnim, class UAnimMontage* ThirdPersonAnim, bool bStopAnimation, float blendOutTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "PlayOrStopAnimations");

	Params::SQSoldier_PlayOrStopAnimations Parms{};

	Parms.FirstPersonAnim = FirstPersonAnim;
	Parms.ThirdPersonAnim = ThirdPersonAnim;
	Parms.bStopAnimation = bStopAnimation;
	Parms.blendOutTime = blendOutTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.PlayOrStopMontage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimInstance*                    AnimInstance                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bStopAnimation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   blendOutTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::PlayOrStopMontage(class UAnimInstance* AnimInstance, class UAnimMontage* Montage, bool bStopAnimation, float blendOutTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "PlayOrStopMontage");

	Params::SQSoldier_PlayOrStopMontage Parms{};

	Parms.AnimInstance = AnimInstance;
	Parms.Montage = Montage;
	Parms.bStopAnimation = bStopAnimation;
	Parms.blendOutTime = blendOutTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.Prone
// (Native, Public, BlueprintCallable)

void ASQSoldier::Prone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "Prone");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.ResetFreeAimOffset
// (Final, Native, Public)

void ASQSoldier::ResetFreeAimOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "ResetFreeAimOffset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.ReviveServerOnly
// (Native, Public, BlueprintCallable)

void ASQSoldier::ReviveServerOnly()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "ReviveServerOnly");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.ServerBeginInteract
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void ASQSoldier::ServerBeginInteract()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "ServerBeginInteract");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.ServerClimb
// (Final, Net, NetReliable, Native, Event, Private, NetServer, HasDefaults)
// Parameters:
// struct FTransform                       ClientTransformZeroBased                               (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FSQClimbInfo                     ClientInfo                                             (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    InIsMovingForward                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::ServerClimb(const struct FTransform& ClientTransformZeroBased, const struct FSQClimbInfo& ClientInfo, const bool InIsMovingForward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "ServerClimb");

	Params::SQSoldier_ServerClimb Parms{};

	Parms.ClientTransformZeroBased = std::move(ClientTransformZeroBased);
	Parms.ClientInfo = std::move(ClientInfo);
	Parms.InIsMovingForward = InIsMovingForward;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.ServerDebugAddAmmoSupply
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// int32                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::ServerDebugAddAmmoSupply(int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "ServerDebugAddAmmoSupply");

	Params::SQSoldier_ServerDebugAddAmmoSupply Parms{};

	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.ServerDebugAddBuildSupply
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// int32                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::ServerDebugAddBuildSupply(int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "ServerDebugAddBuildSupply");

	Params::SQSoldier_ServerDebugAddBuildSupply Parms{};

	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.ServerDebugFullHealth
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void ASQSoldier::ServerDebugFullHealth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "ServerDebugFullHealth");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.ServerDebugRagdoll
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void ASQSoldier::ServerDebugRagdoll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "ServerDebugRagdoll");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.ServerDebugRevive
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void ASQSoldier::ServerDebugRevive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "ServerDebugRevive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.ServerDebugSetHealth
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::ServerDebugSetHealth(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "ServerDebugSetHealth");

	Params::SQSoldier_ServerDebugSetHealth Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.ServerDebugStopBleeding
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void ASQSoldier::ServerDebugStopBleeding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "ServerDebugStopBleeding");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.ServerDebugToggleGodMode
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void ASQSoldier::ServerDebugToggleGodMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "ServerDebugToggleGodMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.ServerDebugTogglePostRecovery
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::ServerDebugTogglePostRecovery(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "ServerDebugTogglePostRecovery");

	Params::SQSoldier_ServerDebugTogglePostRecovery Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.ServerDeployableInteractable
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)
// Parameters:
// class ASQDeployableInteractable*        Deployable                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::ServerDeployableInteractable(class ASQDeployableInteractable* Deployable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "ServerDeployableInteractable");

	Params::SQSoldier_ServerDeployableInteractable Parms{};

	Parms.Deployable = Deployable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.ServerDeployBipod
// (Net, NetReliable, Native, Event, Protected, NetServer, HasDefaults)
// Parameters:
// struct FVector                          RemoteBipodDeploymentLocationZeroBased                 (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          RemoteActorLocationZeroBased                           (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::ServerDeployBipod(const struct FVector& RemoteBipodDeploymentLocationZeroBased, const struct FVector& RemoteActorLocationZeroBased)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "ServerDeployBipod");

	Params::SQSoldier_ServerDeployBipod Parms{};

	Parms.RemoteBipodDeploymentLocationZeroBased = std::move(RemoteBipodDeploymentLocationZeroBased);
	Parms.RemoteActorLocationZeroBased = std::move(RemoteActorLocationZeroBased);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.ServerDisableSpawnProtection
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void ASQSoldier::ServerDisableSpawnProtection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "ServerDisableSpawnProtection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.ServerDragBody
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// bool                                    bDrag                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQSoldier*                       SoldierToDrag                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BoneIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::ServerDragBody(const bool bDrag, class ASQSoldier* SoldierToDrag, int32 BoneIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "ServerDragBody");

	Params::SQSoldier_ServerDragBody Parms{};

	Parms.bDrag = bDrag;
	Parms.SoldierToDrag = SoldierToDrag;
	Parms.BoneIndex = BoneIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.ServerEndInteract
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void ASQSoldier::ServerEndInteract()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "ServerEndInteract");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.ServerLowerWeapon
// (Net, NetReliable, Native, Event, Protected, NetServer)
// Parameters:
// bool                                    bValue                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::ServerLowerWeapon(const bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "ServerLowerWeapon");

	Params::SQSoldier_ServerLowerWeapon Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.ServerPickupAmmoBag
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)
// Parameters:
// class ASQDeployableAmmoBag*             Ammobag                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::ServerPickupAmmoBag(class ASQDeployableAmmoBag* Ammobag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "ServerPickupAmmoBag");

	Params::SQSoldier_ServerPickupAmmoBag Parms{};

	Parms.Ammobag = Ammobag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.ServerRaiseItemAboveHead
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// bool                                    bShouldRaise                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::ServerRaiseItemAboveHead(const bool bShouldRaise)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "ServerRaiseItemAboveHead");

	Params::SQSoldier_ServerRaiseItemAboveHead Parms{};

	Parms.bShouldRaise = bShouldRaise;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.ServerRetractBipod
// (Net, NetReliable, Native, Event, Protected, NetServer)

void ASQSoldier::ServerRetractBipod()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "ServerRetractBipod");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.ServerVehicleCollision
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class ASQVehicle*                       Vehicle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShouldKill                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::ServerVehicleCollision(class ASQVehicle* Vehicle, bool bShouldKill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "ServerVehicleCollision");

	Params::SQSoldier_ServerVehicleCollision Parms{};

	Parms.Vehicle = Vehicle;
	Parms.bShouldKill = bShouldKill;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.SetFirstPersonVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsFirstPersonVisible                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::SetFirstPersonVisibility(bool bIsFirstPersonVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "SetFirstPersonVisibility");

	Params::SQSoldier_SetFirstPersonVisibility Parms{};

	Parms.bIsFirstPersonVisible = bIsFirstPersonVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.SetFullSuppressionRadius
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::SetFullSuppressionRadius(float Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "SetFullSuppressionRadius");

	Params::SQSoldier_SetFullSuppressionRadius Parms{};

	Parms.Radius = Radius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.SetIsHoldingBreath
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInIsHoldingBreath                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::SetIsHoldingBreath(bool bInIsHoldingBreath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "SetIsHoldingBreath");

	Params::SQSoldier_SetIsHoldingBreath Parms{};

	Parms.bInIsHoldingBreath = bInIsHoldingBreath;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.SetSeatState
// (Native, Public, BlueprintCallable)
// Parameters:
// ESQSoldierSeatState                     SoldierSeatState                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::SetSeatState(ESQSoldierSeatState SoldierSeatState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "SetSeatState");

	Params::SQSoldier_SetSeatState Parms{};

	Parms.SoldierSeatState = SoldierSeatState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.SetSuppressionRadius
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::SetSuppressionRadius(float Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "SetSuppressionRadius");

	Params::SQSoldier_SetSuppressionRadius Parms{};

	Parms.Radius = Radius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.StartAimDownSights
// (Native, Public)

void ASQSoldier::StartAimDownSights()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "StartAimDownSights");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.StartBodyDragging
// (Native, Public, BlueprintCallable)
// Parameters:
// class ASQSoldier*                       SoldierToDrag                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BoneIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::StartBodyDragging(class ASQSoldier* SoldierToDrag, int32 BoneIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "StartBodyDragging");

	Params::SQSoldier_StartBodyDragging Parms{};

	Parms.SoldierToDrag = SoldierToDrag;
	Parms.BoneIndex = BoneIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.StopBleeding
// (Final, Native, Public, BlueprintCallable)

void ASQSoldier::StopBleeding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "StopBleeding");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.StopBodyDragging
// (Native, Public, BlueprintCallable)

void ASQSoldier::StopBodyDragging()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "StopBodyDragging");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.Suicide
// (Native, Public, BlueprintCallable)

void ASQSoldier::Suicide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "Suicide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.SwitchedSeat
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class USQVehicleSeatComponent*          PreviousSeat                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQVehicleSeatComponent*          NewSeat                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::SwitchedSeat(class USQVehicleSeatComponent* PreviousSeat, class USQVehicleSeatComponent* NewSeat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "SwitchedSeat");

	Params::SQSoldier_SwitchedSeat Parms{};

	Parms.PreviousSeat = PreviousSeat;
	Parms.NewSeat = NewSeat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.SwitchWeapon
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewWeaponSlotla                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSoldier::SwitchWeapon(int32 NewWeaponSlotla)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "SwitchWeapon");

	Params::SQSoldier_SwitchWeapon Parms{};

	Parms.NewWeaponSlotla = NewWeaponSlotla;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.TickUpdateThirdPersonView
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::TickUpdateThirdPersonView(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "TickUpdateThirdPersonView");

	Params::SQSoldier_TickUpdateThirdPersonView Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.ToggleBipod
// (Native, Public, BlueprintCallable)

void ASQSoldier::ToggleBipod()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "ToggleBipod");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.ToggleThirdPersonView
// (Final, Native, Public, BlueprintCallable)

void ASQSoldier::ToggleThirdPersonView()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "ToggleThirdPersonView");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.ToggleViewPressed
// (Final, Native, Public, BlueprintCallable)

void ASQSoldier::ToggleViewPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "ToggleViewPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.ToggleViewReleased
// (Final, Native, Public, BlueprintCallable)

void ASQSoldier::ToggleViewReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "ToggleViewReleased");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.UnProne
// (Native, Public, BlueprintCallable)

void ASQSoldier::UnProne()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "UnProne");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.Update1pCamStanceHeight
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaSeconds                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::Update1pCamStanceHeight(const float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "Update1pCamStanceHeight");

	Params::SQSoldier_Update1pCamStanceHeight Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.Update1pRelativeLocation
// (Native, Public, BlueprintCallable)

void ASQSoldier::Update1pRelativeLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "Update1pRelativeLocation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.UpdateCachedAnimInstance3p
// (Final, Native, Public, BlueprintCallable)

void ASQSoldier::UpdateCachedAnimInstance3p()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "UpdateCachedAnimInstance3p");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.UpdateFirstPersonVisibility
// (Final, Native, Public, BlueprintCallable)

void ASQSoldier::UpdateFirstPersonVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "UpdateFirstPersonVisibility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.UpdatePatches
// (Final, Native, Public)

void ASQSoldier::UpdatePatches()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "UpdatePatches");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.UpdateStaticItemInfo
// (Native, Public, BlueprintCallable)
// Parameters:
// class USQItemStaticInfo*                InfoObject                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::UpdateStaticItemInfo(class USQItemStaticInfo* InfoObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "UpdateStaticItemInfo");

	Params::SQSoldier_UpdateStaticItemInfo Parms{};

	Parms.InfoObject = InfoObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.UserSettingsChanged
// (Final, Native, Public)
// Parameters:
// class USQGameUserSettings*              Settings                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSoldier::UserSettingsChanged(const class USQGameUserSettings* Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "UserSettingsChanged");

	Params::SQSoldier_UserSettingsChanged Parms{};

	Parms.Settings = Settings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldier.Wound
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   KillingDamage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDamageEvent                     DamageEvent                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AController*                      Killer                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSoldier::Wound(float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "Wound");

	Params::SQSoldier_Wound Parms{};

	Parms.KillingDamage = KillingDamage;
	Parms.DamageEvent = std::move(DamageEvent);
	Parms.Killer = Killer;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.BPGetYawViewLimits
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintEvent, Const)
// Parameters:
// struct FVector2D                        YawViewLimits                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D ASQSoldier::BPGetYawViewLimits(const struct FVector2D& YawViewLimits) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "BPGetYawViewLimits");

	Params::SQSoldier_BPGetYawViewLimits Parms{};

	Parms.YawViewLimits = std::move(YawViewLimits);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.CanADS
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSoldier::CanADS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "CanADS");

	Params::SQSoldier_CanADS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.CanStartWithMaxAmmo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSoldier::CanStartWithMaxAmmo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "CanStartWithMaxAmmo");

	Params::SQSoldier_CanStartWithMaxAmmo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.CheckItemCollision
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSoldier::CheckItemCollision() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "CheckItemCollision");

	Params::SQSoldier_CheckItemCollision Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.FindPerStanceValues
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   StandingValue                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CrouchingValue                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ProneValue                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BipodValue                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQSoldier::FindPerStanceValues(const float StandingValue, const float CrouchingValue, const float ProneValue, const float BipodValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "FindPerStanceValues");

	Params::SQSoldier_FindPerStanceValues Parms{};

	Parms.StandingValue = StandingValue;
	Parms.CrouchingValue = CrouchingValue;
	Parms.ProneValue = ProneValue;
	Parms.BipodValue = BipodValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.GetChestHeight
// (Final, Native, Public, HasDefaults, Const)
// Parameters:
// struct FVector                          TestLocation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQSoldier::GetChestHeight(const struct FVector& TestLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "GetChestHeight");

	Params::SQSoldier_GetChestHeight Parms{};

	Parms.TestLocation = std::move(TestLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.GetCurrentHealthPercentage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQSoldier::GetCurrentHealthPercentage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "GetCurrentHealthPercentage");

	Params::SQSoldier_GetCurrentHealthPercentage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.GetCurrentSeat
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQVehicleSeatComponent*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQVehicleSeatComponent* ASQSoldier::GetCurrentSeat() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "GetCurrentSeat");

	Params::SQSoldier_GetCurrentSeat Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.GetCurrentSeatPawn
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQVehicleSeat*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQVehicleSeat* ASQSoldier::GetCurrentSeatPawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "GetCurrentSeatPawn");

	Params::SQSoldier_GetCurrentSeatPawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.GetCurrentSeatWeaponRotation
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator ASQSoldier::GetCurrentSeatWeaponRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "GetCurrentSeatWeaponRotation");

	Params::SQSoldier_GetCurrentSeatWeaponRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.GetCurrentSpeedPercentage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQSoldier::GetCurrentSpeedPercentage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "GetCurrentSpeedPercentage");

	Params::SQSoldier_GetCurrentSpeedPercentage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.GetCurrentVehicle
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQVehicle*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQVehicle* ASQSoldier::GetCurrentVehicle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "GetCurrentVehicle");

	Params::SQSoldier_GetCurrentVehicle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.GetCurrentWeapon
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQEquipableItem*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQEquipableItem* ASQSoldier::GetCurrentWeapon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "GetCurrentWeapon");

	Params::SQSoldier_GetCurrentWeapon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.GetFirstPersonVisibility
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSoldier::GetFirstPersonVisibility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "GetFirstPersonVisibility");

	Params::SQSoldier_GetFirstPersonVisibility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.GetFootHeight
// (Final, Native, Public, HasDefaults, Const)
// Parameters:
// struct FVector                          TestLocation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQSoldier::GetFootHeight(const struct FVector& TestLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "GetFootHeight");

	Params::SQSoldier_GetFootHeight Parms{};

	Parms.TestLocation = std::move(TestLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.GetHeadHeight
// (Final, Native, Public, HasDefaults, Const)
// Parameters:
// struct FVector                          TestLocation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQSoldier::GetHeadHeight(const struct FVector& TestLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "GetHeadHeight");

	Params::SQSoldier_GetHeadHeight Parms{};

	Parms.TestLocation = std::move(TestLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.GetHipHeight
// (Final, Native, Public, HasDefaults, Const)
// Parameters:
// struct FVector                          TestLocation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQSoldier::GetHipHeight(const struct FVector& TestLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "GetHipHeight");

	Params::SQSoldier_GetHipHeight Parms{};

	Parms.TestLocation = std::move(TestLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.GetInventory
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQPawnInventoryComponent*        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQPawnInventoryComponent* ASQSoldier::GetInventory() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "GetInventory");

	Params::SQSoldier_GetInventory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.GetKneeHeight
// (Final, Native, Public, HasDefaults, Const)
// Parameters:
// struct FVector                          TestLocation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQSoldier::GetKneeHeight(const struct FVector& TestLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "GetKneeHeight");

	Params::SQSoldier_GetKneeHeight Parms{};

	Parms.TestLocation = std::move(TestLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.GetMaxHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQSoldier::GetMaxHealth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "GetMaxHealth");

	Params::SQSoldier_GetMaxHealth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.GetPendingWeapon
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQEquipableItem*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQEquipableItem* ASQSoldier::GetPendingWeapon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "GetPendingWeapon");

	Params::SQSoldier_GetPendingWeapon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.GetTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQSoldier::GetTeam() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "GetTeam");

	Params::SQSoldier_GetTeam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.GetTeamState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQTeamState*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQTeamState* ASQSoldier::GetTeamState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "GetTeamState");

	Params::SQSoldier_GetTeamState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.IsAlive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSoldier::IsAlive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "IsAlive");

	Params::SQSoldier_IsAlive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.IsBeingDragged
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSoldier::IsBeingDragged() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "IsBeingDragged");

	Params::SQSoldier_IsBeingDragged Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.IsClimbing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bRequiredOnly                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSoldier::IsClimbing(bool bRequiredOnly) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "IsClimbing");

	Params::SQSoldier_IsClimbing Parms{};

	Parms.bRequiredOnly = bRequiredOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.IsDragging
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSoldier::IsDragging() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "IsDragging");

	Params::SQSoldier_IsDragging Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.IsFirstPersonViewTarget
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSoldier::IsFirstPersonViewTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "IsFirstPersonViewTarget");

	Params::SQSoldier_IsFirstPersonViewTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.IsImmersedPastChestHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSoldier::IsImmersedPastChestHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "IsImmersedPastChestHeight");

	Params::SQSoldier_IsImmersedPastChestHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.IsImmersedPastFootHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSoldier::IsImmersedPastFootHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "IsImmersedPastFootHeight");

	Params::SQSoldier_IsImmersedPastFootHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.IsImmersedPastHeadHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSoldier::IsImmersedPastHeadHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "IsImmersedPastHeadHeight");

	Params::SQSoldier_IsImmersedPastHeadHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.IsImmersedPastHipHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSoldier::IsImmersedPastHipHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "IsImmersedPastHipHeight");

	Params::SQSoldier_IsImmersedPastHipHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.IsImmersedPastKneeHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSoldier::IsImmersedPastKneeHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "IsImmersedPastKneeHeight");

	Params::SQSoldier_IsImmersedPastKneeHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.IsInteracting
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSoldier::IsInteracting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "IsInteracting");

	Params::SQSoldier_IsInteracting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.IsInVehicle
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSoldier::IsInVehicle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "IsInVehicle");

	Params::SQSoldier_IsInVehicle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.IsOutOfMapBounds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSoldier::IsOutOfMapBounds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "IsOutOfMapBounds");

	Params::SQSoldier_IsOutOfMapBounds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.IsProneTransitioning
// (Final, Native, Public, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSoldier::IsProneTransitioning() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "IsProneTransitioning");

	Params::SQSoldier_IsProneTransitioning Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.IsPullingTriggerOnWeapon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSoldier::IsPullingTriggerOnWeapon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "IsPullingTriggerOnWeapon");

	Params::SQSoldier_IsPullingTriggerOnWeapon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.IsSprinting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSoldier::IsSprinting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "IsSprinting");

	Params::SQSoldier_IsSprinting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.IsWeaponLowered
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSoldier::IsWeaponLowered() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "IsWeaponLowered");

	Params::SQSoldier_IsWeaponLowered Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldier.WeaponMagazineHasAmmo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSoldier::WeaponMagazineHasAmmo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldier", "WeaponMagazineHasAmmo");

	Params::SQSoldier_WeaponMagazineHasAmmo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBoundaryListener.OnEnterBoundary
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASQBoundary*                      Boundary                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBoundaryListener::OnEnterBoundary(class ASQBoundary* Boundary)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBoundaryListener", "OnEnterBoundary");

	Params::SQBoundaryListener_OnEnterBoundary Parms{};

	Parms.Boundary = Boundary;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBoundaryListener.OnExitBoundary
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASQBoundary*                      Boundary                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBoundaryListener::OnExitBoundary(class ASQBoundary* Boundary)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBoundaryListener", "OnExitBoundary");

	Params::SQBoundaryListener_OnExitBoundary Parms{};

	Parms.Boundary = Boundary;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBoundaryListener.UnregisterAllBoundaries
// (Final, Native, Public, BlueprintCallable)

void USQBoundaryListener::UnregisterAllBoundaries()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBoundaryListener", "UnregisterAllBoundaries");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBoundaryListener.GetActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* USQBoundaryListener::GetActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBoundaryListener", "GetActor");

	Params::SQBoundaryListener_GetActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBoundaryListener.ShouldRegisterToBoundary
// (Native, Event, Protected, BlueprintEvent, Const)
// Parameters:
// class ASQBoundary*                      Boundary                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBoundaryListener::ShouldRegisterToBoundary(const class ASQBoundary* Boundary) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBoundaryListener", "ShouldRegisterToBoundary");

	Params::SQBoundaryListener_ShouldRegisterToBoundary Parms{};

	Parms.Boundary = Boundary;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRestriction.TryGetLocalFOB
// (Final, Native, Static, Protected, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQForwardBase*                   OutFOB                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRestriction::TryGetLocalFOB(class ASQPlayerController* InPlayer, class ASQForwardBase** OutFOB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQRestriction", "TryGetLocalFOB");

	Params::SQRestriction_TryGetLocalFOB Parms{};

	Parms.InPlayer = InPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFOB != nullptr)
		*OutFOB = Parms.OutFOB;

	return Parms.ReturnValue;
}


// Function Squad.SQRestriction.TryGetLocalVehicle
// (Final, Native, Static, Protected, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQVehicle*                       OutVehicle                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRestriction::TryGetLocalVehicle(class ASQPlayerController* InPlayer, class ASQVehicle** OutVehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQRestriction", "TryGetLocalVehicle");

	Params::SQRestriction_TryGetLocalVehicle Parms{};

	Parms.InPlayer = InPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutVehicle != nullptr)
		*OutVehicle = Parms.OutVehicle;

	return Parms.ReturnValue;
}


// Function Squad.SQRestriction.GetRestrictionReason
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FDataTableRowHandle              OutRestrictionReason                                   (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRestriction::GetRestrictionReason(struct FDataTableRowHandle* OutRestrictionReason) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction", "GetRestrictionReason");

	Params::SQRestriction_GetRestrictionReason Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRestrictionReason != nullptr)
		*OutRestrictionReason = std::move(Parms.OutRestrictionReason);

	return Parms.ReturnValue;
}


// Function Squad.SQRestriction_Delay_Base.GetDefaultDelay
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FTimespan                        OutDefaultDelay                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQRestriction_Delay_Base::GetDefaultDelay(struct FTimespan* OutDefaultDelay) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_Delay_Base", "GetDefaultDelay");

	Params::SQRestriction_Delay_Base_GetDefaultDelay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDefaultDelay != nullptr)
		*OutDefaultDelay = std::move(Parms.OutDefaultDelay);
}


// Function Squad.SQRestriction_Delay_Base.HasInitialDelay
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQTeam*                          InTeam                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan                        OutInitialDelay                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutDelayedUsage                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDataTableRowHandle              OutDelayReason                                         (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRestriction_Delay_Base::HasInitialDelay(class ASQTeam* InTeam, struct FTimespan* OutInitialDelay, int32* OutDelayedUsage, struct FDataTableRowHandle* OutDelayReason) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_Delay_Base", "HasInitialDelay");

	Params::SQRestriction_Delay_Base_HasInitialDelay Parms{};

	Parms.InTeam = InTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutInitialDelay != nullptr)
		*OutInitialDelay = std::move(Parms.OutInitialDelay);

	if (OutDelayedUsage != nullptr)
		*OutDelayedUsage = Parms.OutDelayedUsage;

	if (OutDelayReason != nullptr)
		*OutDelayReason = std::move(Parms.OutDelayReason);

	return Parms.ReturnValue;
}


// Function Squad.SQRestriction_Delay_Base.OnPlayerAddUsage
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan                        OutNextAvailabilityDelay                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDataTableRowHandle              OutDelayReason                                         (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRestriction_Delay_Base::OnPlayerAddUsage(class ASQPlayerController* InPlayer, struct FTimespan* OutNextAvailabilityDelay, struct FDataTableRowHandle* OutDelayReason) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_Delay_Base", "OnPlayerAddUsage");

	Params::SQRestriction_Delay_Base_OnPlayerAddUsage Parms{};

	Parms.InPlayer = InPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNextAvailabilityDelay != nullptr)
		*OutNextAvailabilityDelay = std::move(Parms.OutNextAvailabilityDelay);

	if (OutDelayReason != nullptr)
		*OutDelayReason = std::move(Parms.OutDelayReason);

	return Parms.ReturnValue;
}


// Function Squad.SQRestriction_Delay_Base.OnPlayerRemoveUsage
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan                        OutNextAvailabilityDelay                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDataTableRowHandle              OutDelayReason                                         (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRestriction_Delay_Base::OnPlayerRemoveUsage(class ASQPlayerController* InPlayer, struct FTimespan* OutNextAvailabilityDelay, struct FDataTableRowHandle* OutDelayReason) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_Delay_Base", "OnPlayerRemoveUsage");

	Params::SQRestriction_Delay_Base_OnPlayerRemoveUsage Parms{};

	Parms.InPlayer = InPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNextAvailabilityDelay != nullptr)
		*OutNextAvailabilityDelay = std::move(Parms.OutNextAvailabilityDelay);

	if (OutDelayReason != nullptr)
		*OutDelayReason = std::move(Parms.OutDelayReason);

	return Parms.ReturnValue;
}


// Function Squad.SQRestriction_Delay_Base.OnTeamAddUsage
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQTeam*                          InTeam                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan                        OutNextAvailabilityDelay                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDataTableRowHandle              OutDelayReason                                         (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRestriction_Delay_Base::OnTeamAddUsage(class ASQTeam* InTeam, struct FTimespan* OutNextAvailabilityDelay, struct FDataTableRowHandle* OutDelayReason) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_Delay_Base", "OnTeamAddUsage");

	Params::SQRestriction_Delay_Base_OnTeamAddUsage Parms{};

	Parms.InTeam = InTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNextAvailabilityDelay != nullptr)
		*OutNextAvailabilityDelay = std::move(Parms.OutNextAvailabilityDelay);

	if (OutDelayReason != nullptr)
		*OutDelayReason = std::move(Parms.OutDelayReason);

	return Parms.ReturnValue;
}


// Function Squad.SQRestriction_Delay_Base.OnTeamRemoveUsage
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQTeam*                          InTeam                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan                        OutNextAvailabilityDelay                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDataTableRowHandle              OutDelayReason                                         (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRestriction_Delay_Base::OnTeamRemoveUsage(class ASQTeam* InTeam, struct FTimespan* OutNextAvailabilityDelay, struct FDataTableRowHandle* OutDelayReason) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_Delay_Base", "OnTeamRemoveUsage");

	Params::SQRestriction_Delay_Base_OnTeamRemoveUsage Parms{};

	Parms.InTeam = InTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNextAvailabilityDelay != nullptr)
		*OutNextAvailabilityDelay = std::move(Parms.OutNextAvailabilityDelay);

	if (OutDelayReason != nullptr)
		*OutDelayReason = std::move(Parms.OutDelayReason);

	return Parms.ReturnValue;
}


// Function Squad.SQBoundary.FindListenerData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USQBoundaryListener*              Listener                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOutFound                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQBoundaryListenerData          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSQBoundaryListenerData ASQBoundary::FindListenerData(class USQBoundaryListener* Listener, bool* bOutFound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBoundary", "FindListenerData");

	Params::SQBoundary_FindListenerData Parms{};

	Parms.Listener = Listener;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bOutFound != nullptr)
		*bOutFound = Parms.bOutFound;

	return Parms.ReturnValue;
}


// Function Squad.SQBoundary.GenerateBoundaryMask
// (Final, Native, Public)

void ASQBoundary::GenerateBoundaryMask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBoundary", "GenerateBoundaryMask");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBoundary.GetXYBoundaryBounds
// (Final, Native, Public, HasDefaults)
// Parameters:
// struct FBoxSphereBounds                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FBoxSphereBounds ASQBoundary::GetXYBoundaryBounds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBoundary", "GetXYBoundaryBounds");

	Params::SQBoundary_GetXYBoundaryBounds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBoundary.IsInside
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQBoundary::IsInside(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBoundary", "IsInside");

	Params::SQBoundary_IsInside Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBoundary.OnListenerEnterBoundary
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class USQBoundaryListener*              Listener                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQBoundary::OnListenerEnterBoundary(class USQBoundaryListener* Listener)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBoundary", "OnListenerEnterBoundary");

	Params::SQBoundary_OnListenerEnterBoundary Parms{};

	Parms.Listener = Listener;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBoundary.OnListenerExitBoundary
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class USQBoundaryListener*              Listener                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQBoundary::OnListenerExitBoundary(class USQBoundaryListener* Listener)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBoundary", "OnListenerExitBoundary");

	Params::SQBoundary_OnListenerExitBoundary Parms{};

	Parms.Listener = Listener;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBoundary.RegisterListener
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USQBoundaryListener*              Listener                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQBoundary::RegisterListener(class USQBoundaryListener* Listener, bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBoundary", "RegisterListener");

	Params::SQBoundary_RegisterListener Parms{};

	Parms.Listener = Listener;
	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBoundary.UnregisterListener
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USQBoundaryListener*              Listener                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQBoundary::UnregisterListener(class USQBoundaryListener* Listener)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBoundary", "UnregisterListener");

	Params::SQBoundary_UnregisterListener Parms{};

	Parms.Listener = Listener;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQBPFL_UI.CopyToClipboard
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ToText                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBPFL_UI::CopyToClipboard(const class FString& ToText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQBPFL_UI", "CopyToClipboard");

	Params::SQBPFL_UI_CopyToClipboard Parms{};

	Parms.ToText = std::move(ToText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBuffManager.ApplyBuff
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESQBuffTypes                            BuffTypeToApply                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBuffManager::ApplyBuff(ESQBuffTypes BuffTypeToApply, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBuffManager", "ApplyBuff");

	Params::SQBuffManager_ApplyBuff Parms{};

	Parms.BuffTypeToApply = BuffTypeToApply;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBuffManager.PulseBuff
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESQBuffTypes                            BuffTypeToApply                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBuffManager::PulseBuff(ESQBuffTypes BuffTypeToApply, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBuffManager", "PulseBuff");

	Params::SQBuffManager_PulseBuff Parms{};

	Parms.BuffTypeToApply = BuffTypeToApply;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBuffManager.RemoveBuff
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESQBuffTypes                            BuffTypeToRemove                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQBuffManager::RemoveBuff(ESQBuffTypes BuffTypeToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBuffManager", "RemoveBuff");

	Params::SQBuffManager_RemoveBuff Parms{};

	Parms.BuffTypeToRemove = BuffTypeToRemove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQBuffManager.HasBuff
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESQBuffTypes                            BuffTypeToCheck                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQBuffManager::HasBuff(ESQBuffTypes BuffTypeToCheck) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQBuffManager", "HasBuff");

	Params::SQBuffManager_HasBuff Parms{};

	Parms.BuffTypeToCheck = BuffTypeToCheck;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRestriction_Boolean.IsRestrictedForPlayer
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRestriction_Boolean::IsRestrictedForPlayer(class ASQPlayerController* InPlayer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_Boolean", "IsRestrictedForPlayer");

	Params::SQRestriction_Boolean_IsRestrictedForPlayer Parms{};

	Parms.InPlayer = InPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRestriction_Boolean.IsRestrictedForTeam
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQTeam*                          InTeam                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRestriction_Boolean::IsRestrictedForTeam(class ASQTeam* InTeam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_Boolean", "IsRestrictedForTeam");

	Params::SQRestriction_Boolean_IsRestrictedForTeam Parms{};

	Parms.InTeam = InTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRestriction_ActorsInRange.IsAuthorizedWithActorInRange
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           InActorInRange                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRestriction_ActorsInRange::IsAuthorizedWithActorInRange(class ASQPlayerController* InPlayer, const class AActor* InActorInRange) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_ActorsInRange", "IsAuthorizedWithActorInRange");

	Params::SQRestriction_ActorsInRange_IsAuthorizedWithActorInRange Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InActorInRange = InActorInRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRestriction_ActorsInRange.IsRestrictedWithActorsInRange
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   InActorsInRange                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRestriction_ActorsInRange::IsRestrictedWithActorsInRange(class ASQPlayerController* InPlayer, const TArray<class AActor*>& InActorsInRange) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_ActorsInRange", "IsRestrictedWithActorsInRange");

	Params::SQRestriction_ActorsInRange_IsRestrictedWithActorsInRange Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InActorsInRange = std::move(InActorsInRange);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCameraMan.ClientUpdateCustomTimeDilation
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// float                                   NewCustomDilation                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQCameraMan::ClientUpdateCustomTimeDilation(const float NewCustomDilation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCameraMan", "ClientUpdateCustomTimeDilation");

	Params::SQCameraMan_ClientUpdateCustomTimeDilation Parms{};

	Parms.NewCustomDilation = NewCustomDilation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCameraMan.DrawHUD
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASQHUD*                           SquadHUD                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCanvas*                          Canvas                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQCameraMan::DrawHUD(class ASQHUD* SquadHUD, class UCanvas* Canvas)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCameraMan", "DrawHUD");

	Params::SQCameraMan_DrawHUD Parms{};

	Parms.SquadHUD = SquadHUD;
	Parms.Canvas = Canvas;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCameraMan.RecalculateCustomTimeDilation
// (Native, Public)
// Parameters:
// float                                   TimeDilation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQCameraMan::RecalculateCustomTimeDilation(float TimeDilation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCameraMan", "RecalculateCustomTimeDilation");

	Params::SQCameraMan_RecalculateCustomTimeDilation Parms{};

	Parms.TimeDilation = TimeDilation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCameraMan.ServerSetDecelerationTarget
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// float                                   InDecelerationTarget                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQCameraMan::ServerSetDecelerationTarget(float InDecelerationTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCameraMan", "ServerSetDecelerationTarget");

	Params::SQCameraMan_ServerSetDecelerationTarget Parms{};

	Parms.InDecelerationTarget = InDecelerationTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCameraMan.ServerSetFlySpeedTarget
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// float                                   InFlySpeedTarget                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQCameraMan::ServerSetFlySpeedTarget(float InFlySpeedTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCameraMan", "ServerSetFlySpeedTarget");

	Params::SQCameraMan_ServerSetFlySpeedTarget Parms{};

	Parms.InFlySpeedTarget = InFlySpeedTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCameraMan.ServerSetIgnoreSlomo
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// bool                                    bShouldIgnore                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQCameraMan::ServerSetIgnoreSlomo(bool bShouldIgnore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCameraMan", "ServerSetIgnoreSlomo");

	Params::SQCameraMan_ServerSetIgnoreSlomo Parms{};

	Parms.bShouldIgnore = bShouldIgnore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGraphNodeComponent.AddNeighbor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USQGraphNodeComponent*            Neighbor                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGraphNodeComponent::AddNeighbor(class USQGraphNodeComponent* Neighbor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGraphNodeComponent", "AddNeighbor");

	Params::SQGraphNodeComponent_AddNeighbor Parms{};

	Parms.Neighbor = Neighbor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGraphNodeComponent.GetNeighbors
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class USQGraphNodeComponent*>    InOutNodes                                             (Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USQGraphNodeComponent::GetNeighbors(TArray<class USQGraphNodeComponent*>& InOutNodes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGraphNodeComponent", "GetNeighbors");

	Params::SQGraphNodeComponent_GetNeighbors Parms{};

	Parms.InOutNodes = std::move(InOutNodes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InOutNodes = std::move(Parms.InOutNodes);
}


// Function Squad.SQGraphNodeComponent.OnNeighborAdded
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class USQGraphNodeComponent*            Neighbor                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGraphNodeComponent::OnNeighborAdded(class USQGraphNodeComponent* Neighbor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGraphNodeComponent", "OnNeighborAdded");

	Params::SQGraphNodeComponent_OnNeighborAdded Parms{};

	Parms.Neighbor = Neighbor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGraphNodeComponent.OnNeighborRemoved
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class USQGraphNodeComponent*            Neighbor                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGraphNodeComponent::OnNeighborRemoved(class USQGraphNodeComponent* Neighbor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGraphNodeComponent", "OnNeighborRemoved");

	Params::SQGraphNodeComponent_OnNeighborRemoved Parms{};

	Parms.Neighbor = Neighbor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGraphNodeComponent.RemoveNeighbor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USQGraphNodeComponent*            Neighbor                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGraphNodeComponent::RemoveNeighbor(class USQGraphNodeComponent* Neighbor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGraphNodeComponent", "RemoveNeighbor");

	Params::SQGraphNodeComponent_RemoveNeighbor Parms{};

	Parms.Neighbor = Neighbor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCaptureZoneComponent.CaptureTick
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USQCaptureZoneComponent::CaptureTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCaptureZoneComponent", "CaptureTick");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCaptureZoneComponent.FindMainBase
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   Team                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USQGraphNodeComponent*>    VisitedNodes                                           (Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class USQGraphNodeComponent*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQGraphNodeComponent* USQCaptureZoneComponent::FindMainBase(uint8 Team, TArray<class USQGraphNodeComponent*>& VisitedNodes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCaptureZoneComponent", "FindMainBase");

	Params::SQCaptureZoneComponent_FindMainBase Parms{};

	Parms.Team = Team;
	Parms.VisitedNodes = std::move(VisitedNodes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	VisitedNodes = std::move(Parms.VisitedNodes);

	return Parms.ReturnValue;
}


// Function Squad.SQCaptureZoneComponent.FullyCap
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   ForTeam                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCaptureZoneComponent::FullyCap(uint8 ForTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCaptureZoneComponent", "FullyCap");

	Params::SQCaptureZoneComponent_FullyCap Parms{};

	Parms.ForTeam = ForTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCaptureZoneComponent.GetCapturezoneDirections
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class USQCaptureZoneComponent*>  TeamOneDir                                             (Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<class USQCaptureZoneComponent*>  TeamTwoDir                                             (Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USQCaptureZoneComponent::GetCapturezoneDirections(TArray<class USQCaptureZoneComponent*>& TeamOneDir, TArray<class USQCaptureZoneComponent*>& TeamTwoDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCaptureZoneComponent", "GetCapturezoneDirections");

	Params::SQCaptureZoneComponent_GetCapturezoneDirections Parms{};

	Parms.TeamOneDir = std::move(TeamOneDir);
	Parms.TeamTwoDir = std::move(TeamTwoDir);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TeamOneDir = std::move(Parms.TeamOneDir);
	TeamTwoDir = std::move(Parms.TeamTwoDir);
}


// Function Squad.SQCaptureZoneComponent.GetPlayersInCaptureZone
// (Native, Public, HasOutParams)
// Parameters:
// TArray<class AActor*>                   TeamOne                                                (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   TeamTwo                                                (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USQCaptureZoneComponent::GetPlayersInCaptureZone(TArray<class AActor*>& TeamOne, TArray<class AActor*>& TeamTwo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCaptureZoneComponent", "GetPlayersInCaptureZone");

	Params::SQCaptureZoneComponent_GetPlayersInCaptureZone Parms{};

	Parms.TeamOne = std::move(TeamOne);
	Parms.TeamTwo = std::move(TeamTwo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TeamOne = std::move(Parms.TeamOne);
	TeamTwo = std::move(Parms.TeamTwo);
}


// Function Squad.SQCaptureZoneComponent.LockCaptureZone
// (Final, Native, Public, BlueprintCallable)

void USQCaptureZoneComponent::LockCaptureZone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCaptureZoneComponent", "LockCaptureZone");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCaptureZoneComponent.Neutralize
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USQCaptureZoneComponent::Neutralize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCaptureZoneComponent", "Neutralize");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCaptureZoneComponent.OnIndexedTeamStatesReplicated
// (Final, Native, Private)

void USQCaptureZoneComponent::OnIndexedTeamStatesReplicated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCaptureZoneComponent", "OnIndexedTeamStatesReplicated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCaptureZoneComponent.OnRep_CapturePercent
// (Final, Native, Private)

void USQCaptureZoneComponent::OnRep_CapturePercent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCaptureZoneComponent", "OnRep_CapturePercent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCaptureZoneComponent.OnRep_CapturingTeam
// (Final, Native, Private)

void USQCaptureZoneComponent::OnRep_CapturingTeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCaptureZoneComponent", "OnRep_CapturingTeam");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCaptureZoneComponent.OnRep_OwningTeam
// (Final, Native, Private)

void USQCaptureZoneComponent::OnRep_OwningTeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCaptureZoneComponent", "OnRep_OwningTeam");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCaptureZoneComponent.OnRep_TeamCapturabilities
// (Final, Native, Private)

void USQCaptureZoneComponent::OnRep_TeamCapturabilities()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCaptureZoneComponent", "OnRep_TeamCapturabilities");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCaptureZoneComponent.OnRep_TeamKnowledge
// (Final, Native, Private)

void USQCaptureZoneComponent::OnRep_TeamKnowledge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCaptureZoneComponent", "OnRep_TeamKnowledge");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCaptureZoneComponent.OnRep_Uncappable
// (Final, Native, Private)

void USQCaptureZoneComponent::OnRep_Uncappable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCaptureZoneComponent", "OnRep_Uncappable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCaptureZoneComponent.SetTeamCanCapture
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   Team                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCanCap                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQCaptureZoneComponent::SetTeamCanCapture(uint8 Team, bool bCanCap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCaptureZoneComponent", "SetTeamCanCapture");

	Params::SQCaptureZoneComponent_SetTeamCanCapture Parms{};

	Parms.Team = Team;
	Parms.bCanCap = bCanCap;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCaptureZoneComponent.SetTeamHaveKnowledge
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   Team                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHaveKnowledge                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQCaptureZoneComponent::SetTeamHaveKnowledge(uint8 Team, bool bHaveKnowledge)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCaptureZoneComponent", "SetTeamHaveKnowledge");

	Params::SQCaptureZoneComponent_SetTeamHaveKnowledge Parms{};

	Parms.Team = Team;
	Parms.bHaveKnowledge = bHaveKnowledge;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCaptureZoneComponent.UnlockCaptureZone
// (Final, Native, Public, BlueprintCallable)

void USQCaptureZoneComponent::UnlockCaptureZone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCaptureZoneComponent", "UnlockCaptureZone");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCaptureZoneComponent.UpdateCanCaptureState
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class USQCaptureZoneComponent*>  TeamOneDir                                             (Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<class USQCaptureZoneComponent*>  TeamTwoDir                                             (Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USQCaptureZoneComponent::UpdateCanCaptureState(TArray<class USQCaptureZoneComponent*>& TeamOneDir, TArray<class USQCaptureZoneComponent*>& TeamTwoDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCaptureZoneComponent", "UpdateCanCaptureState");

	Params::SQCaptureZoneComponent_UpdateCanCaptureState Parms{};

	Parms.TeamOneDir = std::move(TeamOneDir);
	Parms.TeamTwoDir = std::move(TeamTwoDir);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TeamOneDir = std::move(Parms.TeamOneDir);
	TeamTwoDir = std::move(Parms.TeamTwoDir);
}


// Function Squad.SQCaptureZoneComponent.UpdateCaptureState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQCaptureZoneComponent*          CaptureZone                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   Team                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCaptureZoneComponent::UpdateCaptureState(class USQCaptureZoneComponent* CaptureZone, uint8 Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCaptureZoneComponent", "UpdateCaptureState");

	Params::SQCaptureZoneComponent_UpdateCaptureState Parms{};

	Parms.CaptureZone = CaptureZone;
	Parms.Team = Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCaptureZoneComponent.UpdateLockState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USQCaptureZoneComponent::UpdateLockState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCaptureZoneComponent", "UpdateLockState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCaptureZoneComponent.UpdateTeamKnowledge
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class USQCaptureZoneComponent*>  TeamOneDir                                             (Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<class USQCaptureZoneComponent*>  TeamTwoDir                                             (Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USQCaptureZoneComponent::UpdateTeamKnowledge(TArray<class USQCaptureZoneComponent*>& TeamOneDir, TArray<class USQCaptureZoneComponent*>& TeamTwoDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCaptureZoneComponent", "UpdateTeamKnowledge");

	Params::SQCaptureZoneComponent_UpdateTeamKnowledge Parms{};

	Parms.TeamOneDir = std::move(TeamOneDir);
	Parms.TeamTwoDir = std::move(TeamTwoDir);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TeamOneDir = std::move(Parms.TeamOneDir);
	TeamTwoDir = std::move(Parms.TeamTwoDir);
}


// Function Squad.SQCaptureZoneComponent.GetCanTeamCapture
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// uint8                                   Team                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQCaptureZoneComponent::GetCanTeamCapture(uint8 Team) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCaptureZoneComponent", "GetCanTeamCapture");

	Params::SQCaptureZoneComponent_GetCanTeamCapture Parms{};

	Parms.Team = Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCaptureZoneComponent.GetCurrentModeCaptureZoneStats
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FCaptureZoneStats                OutputCaptureZoneStats                                 (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQCaptureZoneComponent::GetCurrentModeCaptureZoneStats(struct FCaptureZoneStats* OutputCaptureZoneStats) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCaptureZoneComponent", "GetCurrentModeCaptureZoneStats");

	Params::SQCaptureZoneComponent_GetCurrentModeCaptureZoneStats Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutputCaptureZoneStats != nullptr)
		*OutputCaptureZoneStats = std::move(Parms.OutputCaptureZoneStats);

	return Parms.ReturnValue;
}


// Function Squad.SQCaptureZoneComponent.GetTeamHaveKnowledge
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// uint8                                   Team                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQCaptureZoneComponent::GetTeamHaveKnowledge(uint8 Team) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCaptureZoneComponent", "GetTeamHaveKnowledge");

	Params::SQCaptureZoneComponent_GetTeamHaveKnowledge Parms{};

	Parms.Team = Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCdnFile.GetAsTexture
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* USQCdnFile::GetAsTexture() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCdnFile", "GetAsTexture");

	Params::SQCdnFile_GetAsTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCheatManager.SqDumpPakContents
// (Final, Exec, Native, Private)
// Parameters:
// class FString                           OutputFilename                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCheatManager::SqDumpPakContents(const class FString& OutputFilename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCheatManager", "SqDumpPakContents");

	Params::SQCheatManager_SqDumpPakContents Parms{};

	Parms.OutputFilename = std::move(OutputFilename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQFriendsBrowserWidget.OnFailure
// (Event, Public, BlueprintEvent)

void USQFriendsBrowserWidget::OnFailure()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFriendsBrowserWidget", "OnFailure");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQFriendsBrowserWidget.OnFindFriendsCompleted
// (Final, Native, Private, HasOutParams)
// Parameters:
// TArray<struct FSQBlueprintFriend>       Results                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bSuccess                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQFriendsBrowserWidget::OnFindFriendsCompleted(const TArray<struct FSQBlueprintFriend>& Results, bool bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFriendsBrowserWidget", "OnFindFriendsCompleted");

	Params::SQFriendsBrowserWidget_OnFindFriendsCompleted Parms{};

	Parms.Results = std::move(Results);
	Parms.bSuccess = bSuccess;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQFriendsBrowserWidget.OnSuccess
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<struct FSQBlueprintFriend>       Results                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USQFriendsBrowserWidget::OnSuccess(const TArray<struct FSQBlueprintFriend>& Results)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFriendsBrowserWidget", "OnSuccess");

	Params::SQFriendsBrowserWidget_OnSuccess Parms{};

	Parms.Results = std::move(Results);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQFriendsBrowserWidget.StartFindFriends
// (Final, Native, Private, BlueprintCallable)

void USQFriendsBrowserWidget::StartFindFriends()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFriendsBrowserWidget", "StartFindFriends");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQChunkSettings.GetChunkSettings
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USQChunkSettings*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQChunkSettings* USQChunkSettings::GetChunkSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQChunkSettings", "GetChunkSettings");

	Params::SQChunkSettings_GetChunkSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQChunkSettings.CollectFactionSetupsFromFactions
// (Final, Native, Public, BlueprintCallable)

void USQChunkSettings::CollectFactionSetupsFromFactions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQChunkSettings", "CollectFactionSetupsFromFactions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQChunkSettings.CollectLayersFromLevels
// (Final, Native, Public, BlueprintCallable)

void USQChunkSettings::CollectLayersFromLevels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQChunkSettings", "CollectLayersFromLevels");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCloudServicesSubsystem.AcceptPrivacyPolicy
// (Final, Native, Static, Public, BlueprintCallable)

void USQCloudServicesSubsystem::AcceptPrivacyPolicy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQCloudServicesSubsystem", "AcceptPrivacyPolicy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCloudServicesSubsystem.GetCrossPromotionData
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FCrossPromotionData        ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FCrossPromotionData USQCloudServicesSubsystem::GetCrossPromotionData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQCloudServicesSubsystem", "GetCrossPromotionData");

	Params::SQCloudServicesSubsystem_GetCrossPromotionData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCloudServicesSubsystem.GetNewsData
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FNewsData                  ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FNewsData USQCloudServicesSubsystem::GetNewsData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQCloudServicesSubsystem", "GetNewsData");

	Params::SQCloudServicesSubsystem_GetNewsData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCloudServicesSubsystem.GetTitleData
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FTitleData                 ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FTitleData USQCloudServicesSubsystem::GetTitleData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQCloudServicesSubsystem", "GetTitleData");

	Params::SQCloudServicesSubsystem_GetTitleData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCloudServicesSubsystem.RequestFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(class USQCdnFile* File)> OnReadyDelegate                                        (Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)

void USQCloudServicesSubsystem::RequestFile(const class FString& Filename, TDelegate<void(class USQCdnFile* File)> OnReadyDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQCloudServicesSubsystem", "RequestFile");

	Params::SQCloudServicesSubsystem_RequestFile Parms{};

	Parms.Filename = std::move(Filename);
	Parms.OnReadyDelegate = OnReadyDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCloudServicesSubsystem.RequestNewsData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bForceRefresh                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCloudServicesSubsystem::RequestNewsData(bool bForceRefresh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQCloudServicesSubsystem", "RequestNewsData");

	Params::SQCloudServicesSubsystem_RequestNewsData Parms{};

	Parms.bForceRefresh = bForceRefresh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCloudServicesSubsystem.RequestPlayerData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bForceRefresh                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCloudServicesSubsystem::RequestPlayerData(bool bForceRefresh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQCloudServicesSubsystem", "RequestPlayerData");

	Params::SQCloudServicesSubsystem_RequestPlayerData Parms{};

	Parms.bForceRefresh = bForceRefresh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCloudServicesSubsystem.RequestTitleData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bForceRefresh                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCloudServicesSubsystem::RequestTitleData(bool bForceRefresh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQCloudServicesSubsystem", "RequestTitleData");

	Params::SQCloudServicesSubsystem_RequestTitleData Parms{};

	Parms.bForceRefresh = bForceRefresh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCloudServicesSubsystem.SendAnalyticEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           EventName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EventDataKey                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EventData                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCloudServicesSubsystem::SendAnalyticEvent(const class FString& EventName, const class FString& EventDataKey, const class FString& EventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQCloudServicesSubsystem", "SendAnalyticEvent");

	Params::SQCloudServicesSubsystem_SendAnalyticEvent Parms{};

	Parms.EventName = std::move(EventName);
	Parms.EventDataKey = std::move(EventDataKey);
	Parms.EventData = std::move(EventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCloudServicesSubsystem.SendAnalyticEventArray
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           EventName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAnalyticKeyValue>        EventData                                              (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void USQCloudServicesSubsystem::SendAnalyticEventArray(const class FString& EventName, const TArray<struct FAnalyticKeyValue>& EventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQCloudServicesSubsystem", "SendAnalyticEventArray");

	Params::SQCloudServicesSubsystem_SendAnalyticEventArray Parms{};

	Parms.EventName = std::move(EventName);
	Parms.EventData = std::move(EventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCollisionDamage.ApplyDamage
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCollisionDamage::ApplyDamage(float Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCollisionDamage", "ApplyDamage");

	Params::SQCollisionDamage_ApplyDamage Parms{};

	Parms.Damage = Damage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCollisionDamage.OnActorHit
// (Final, Native, Private, HasOutParams, HasDefaults)
// Parameters:
// class AActor*                           SelfActor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USQCollisionDamage::OnActorHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCollisionDamage", "OnActorHit");

	Params::SQCollisionDamage_OnActorHit Parms{};

	Parms.SelfActor = SelfActor;
	Parms.OtherActor = OtherActor;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCollisionDamage.CalculateDamage
// (Native, Event, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AActor*                           SelfActor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQCollisionDamage::CalculateDamage(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCollisionDamage", "CalculateDamage");

	Params::SQCollisionDamage_CalculateDamage Parms{};

	Parms.SelfActor = SelfActor;
	Parms.OtherActor = OtherActor;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQColorsDataAsset.GetColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESQMapWidgetTint                        TintValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FireTeamIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor USQColorsDataAsset::GetColor(ESQMapWidgetTint TintValue, int32 FireTeamIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQColorsDataAsset", "GetColor");

	Params::SQColorsDataAsset_GetColor Parms{};

	Parms.TintValue = TintValue;
	Parms.FireTeamIndex = FireTeamIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQColorsDataAsset.GetUIColors
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ColorIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor USQColorsDataAsset::GetUIColors(int32 ColorIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQColorsDataAsset", "GetUIColors");

	Params::SQColorsDataAsset_GetUIColors Parms{};

	Parms.ColorIndex = ColorIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCommandActor.OnRep_Action
// (Event, Public, BlueprintEvent)

void ASQCommandActor::OnRep_Action()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommandActor", "OnRep_Action");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCommandActor.SetAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class USQGridData_CommandOption>NewAction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQCommandActor::SetAction(TSubclassOf<class USQGridData_CommandOption> NewAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommandActor", "SetAction");

	Params::SQCommandActor_SetAction Parms{};

	Parms.NewAction = NewAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQFreeLookComponent.OnRep_ReplicatedFreeLookRot
// (Final, Native, Private)

void USQFreeLookComponent::OnRep_ReplicatedFreeLookRot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFreeLookComponent", "OnRep_ReplicatedFreeLookRot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQFreeLookComponent.ResetFreeLook
// (Final, Native, Public, BlueprintCallable)

void USQFreeLookComponent::ResetFreeLook()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFreeLookComponent", "ResetFreeLook");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQFreeLookComponent.ServerSetFreeLookRotation
// (Final, Net, Native, Event, Private, NetServer, HasDefaults, NetValidate)
// Parameters:
// struct FRotator                         NewFreeLookRotation                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void USQFreeLookComponent::ServerSetFreeLookRotation(const struct FRotator& NewFreeLookRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFreeLookComponent", "ServerSetFreeLookRotation");

	Params::SQFreeLookComponent_ServerSetFreeLookRotation Parms{};

	Parms.NewFreeLookRotation = std::move(NewFreeLookRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQFreeLookComponent.SetCanFreelookWhileADS
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewBool                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQFreeLookComponent::SetCanFreelookWhileADS(const bool bNewBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFreeLookComponent", "SetCanFreelookWhileADS");

	Params::SQFreeLookComponent_SetCanFreelookWhileADS Parms{};

	Parms.bNewBool = bNewBool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQFreeLookComponent.SetFreeLookCamera
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCameraComponent*                 NewCamera                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQFreeLookComponent::SetFreeLookCamera(class UCameraComponent* NewCamera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFreeLookComponent", "SetFreeLookCamera");

	Params::SQFreeLookComponent_SetFreeLookCamera Parms{};

	Parms.NewCamera = NewCamera;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQFreeLookComponent.SetFreelookCanRecenterWeapons
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewBool                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQFreeLookComponent::SetFreelookCanRecenterWeapons(const bool bNewBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFreeLookComponent", "SetFreelookCanRecenterWeapons");

	Params::SQFreeLookComponent_SetFreelookCanRecenterWeapons Parms{};

	Parms.bNewBool = bNewBool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQFreeLookComponent.SetFreeLookMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EFreeLookMode                           NewFreeLookMode                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQFreeLookComponent::SetFreeLookMode(const EFreeLookMode NewFreeLookMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFreeLookComponent", "SetFreeLookMode");

	Params::SQFreeLookComponent_SetFreeLookMode Parms{};

	Parms.NewFreeLookMode = NewFreeLookMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQFreeLookComponent.SetFreeLookRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         NewFreeLookRotator                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void USQFreeLookComponent::SetFreeLookRotation(const struct FRotator& NewFreeLookRotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFreeLookComponent", "SetFreeLookRotation");

	Params::SQFreeLookComponent_SetFreeLookRotation Parms{};

	Parms.NewFreeLookRotator = std::move(NewFreeLookRotator);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQFreeLookComponent.SetIsToggleActive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewState                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQFreeLookComponent::SetIsToggleActive(const bool bNewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFreeLookComponent", "SetIsToggleActive");

	Params::SQFreeLookComponent_SetIsToggleActive Parms{};

	Parms.bNewState = bNewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQFreeLookComponent.SetPitchLimits
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        NewPitchLimits                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQFreeLookComponent::SetPitchLimits(const struct FVector2D& NewPitchLimits)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFreeLookComponent", "SetPitchLimits");

	Params::SQFreeLookComponent_SetPitchLimits Parms{};

	Parms.NewPitchLimits = std::move(NewPitchLimits);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQFreeLookComponent.SetReplicateFreeLookRotation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewBool                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQFreeLookComponent::SetReplicateFreeLookRotation(const bool bNewBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFreeLookComponent", "SetReplicateFreeLookRotation");

	Params::SQFreeLookComponent_SetReplicateFreeLookRotation Parms{};

	Parms.bNewBool = bNewBool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQFreeLookComponent.SetRotationSpeed
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        NewRotationSpeed                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQFreeLookComponent::SetRotationSpeed(const struct FVector2D& NewRotationSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFreeLookComponent", "SetRotationSpeed");

	Params::SQFreeLookComponent_SetRotationSpeed Parms{};

	Parms.NewRotationSpeed = std::move(NewRotationSpeed);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQFreeLookComponent.SetYawLimits
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        NewYawLimits                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQFreeLookComponent::SetYawLimits(const struct FVector2D& NewYawLimits)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFreeLookComponent", "SetYawLimits");

	Params::SQFreeLookComponent_SetYawLimits Parms{};

	Parms.NewYawLimits = std::move(NewYawLimits);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQFreeLookComponent.CalculateFreeLookRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator USQFreeLookComponent::CalculateFreeLookRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFreeLookComponent", "CalculateFreeLookRotation");

	Params::SQFreeLookComponent_CalculateFreeLookRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQFreeLookComponent.GetCanFreelookWhileADS
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQFreeLookComponent::GetCanFreelookWhileADS() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFreeLookComponent", "GetCanFreelookWhileADS");

	Params::SQFreeLookComponent_GetCanFreelookWhileADS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQFreeLookComponent.GetFreeLookCamera
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCameraComponent*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCameraComponent* USQFreeLookComponent::GetFreeLookCamera() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFreeLookComponent", "GetFreeLookCamera");

	Params::SQFreeLookComponent_GetFreeLookCamera Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQFreeLookComponent.GetFreelookCanRecenterWeapons
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQFreeLookComponent::GetFreelookCanRecenterWeapons() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFreeLookComponent", "GetFreelookCanRecenterWeapons");

	Params::SQFreeLookComponent_GetFreelookCanRecenterWeapons Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQFreeLookComponent.GetIsFreeLookComponentActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQFreeLookComponent::GetIsFreeLookComponentActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFreeLookComponent", "GetIsFreeLookComponentActive");

	Params::SQFreeLookComponent_GetIsFreeLookComponentActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQFreeLookComponent.GetIsUsingFreeLook
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQFreeLookComponent::GetIsUsingFreeLook() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFreeLookComponent", "GetIsUsingFreeLook");

	Params::SQFreeLookComponent_GetIsUsingFreeLook Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQFreeLookComponent.GetPitchLimits
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D USQFreeLookComponent::GetPitchLimits() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFreeLookComponent", "GetPitchLimits");

	Params::SQFreeLookComponent_GetPitchLimits Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQFreeLookComponent.GetRotationSpeed
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D USQFreeLookComponent::GetRotationSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFreeLookComponent", "GetRotationSpeed");

	Params::SQFreeLookComponent_GetRotationSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQFreeLookComponent.GetYawLimits
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D USQFreeLookComponent::GetYawLimits() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFreeLookComponent", "GetYawLimits");

	Params::SQFreeLookComponent_GetYawLimits Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCommanderInputComponent.AttemptSetActionsUsableState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewActionsEnabled                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCommanderInputComponent::AttemptSetActionsUsableState(bool bNewActionsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderInputComponent", "AttemptSetActionsUsableState");

	Params::SQCommanderInputComponent_AttemptSetActionsUsableState Parms{};

	Parms.bNewActionsEnabled = bNewActionsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCommanderInputComponent.ClientActionAttemptFinished
// (Net, NetReliable, Native, Event, Public, NetClient)

void USQCommanderInputComponent::ClientActionAttemptFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderInputComponent", "ClientActionAttemptFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCommanderInputComponent.DebugBecomeCommander
// (Final, Exec, Native, Public)

void USQCommanderInputComponent::DebugBecomeCommander()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderInputComponent", "DebugBecomeCommander");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCommanderInputComponent.DebugDemoteCommander
// (Exec, Native, Public)

void USQCommanderInputComponent::DebugDemoteCommander()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderInputComponent", "DebugDemoteCommander");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCommanderInputComponent.DebugEnableVoteRequirements
// (Exec, Native, Public)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCommanderInputComponent::DebugEnableVoteRequirements(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderInputComponent", "DebugEnableVoteRequirements");

	Params::SQCommanderInputComponent_DebugEnableVoteRequirements Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCommanderInputComponent.DebugVoteForCommander
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           PlayerName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCommanderInputComponent::DebugVoteForCommander(const class FString& PlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderInputComponent", "DebugVoteForCommander");

	Params::SQCommanderInputComponent_DebugVoteForCommander Parms{};

	Parms.PlayerName = std::move(PlayerName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCommanderInputComponent.RequestCommandActorDestroyed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class USQGridData_CommandOption>CommandOption                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCommanderInputComponent::RequestCommandActorDestroyed(TSubclassOf<class USQGridData_CommandOption> CommandOption)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderInputComponent", "RequestCommandActorDestroyed");

	Params::SQCommanderInputComponent_RequestCommandActorDestroyed Parms{};

	Parms.CommandOption = CommandOption;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCommanderInputComponent.RequestCreateCommandActor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// TSubclassOf<class USQGridData_CommandOption>CommandOption                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   Distance                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCommanderInputComponent::RequestCreateCommandActor(TSubclassOf<class USQGridData_CommandOption> CommandOption, const struct FTransform& Transform, const float Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderInputComponent", "RequestCreateCommandActor");

	Params::SQCommanderInputComponent_RequestCreateCommandActor Parms{};

	Parms.CommandOption = CommandOption;
	Parms.Transform = std::move(Transform);
	Parms.Distance = Distance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCommanderInputComponent.RequestDemoteCommander
// (Final, Native, Public, BlueprintCallable)

void USQCommanderInputComponent::RequestDemoteCommander()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderInputComponent", "RequestDemoteCommander");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCommanderInputComponent.RequestPromoteCommander
// (Final, Native, Public, BlueprintCallable)

void USQCommanderInputComponent::RequestPromoteCommander()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderInputComponent", "RequestPromoteCommander");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCommanderInputComponent.RequestSupportAtLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          WorldLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCommanderInputComponent::RequestSupportAtLocation(const struct FVector& WorldLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderInputComponent", "RequestSupportAtLocation");

	Params::SQCommanderInputComponent_RequestSupportAtLocation Parms{};

	Parms.WorldLocation = std::move(WorldLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCommanderInputComponent.ServerAttemptSetActionsUsableState
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// bool                                    bNewActionsEnabled                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCommanderInputComponent::ServerAttemptSetActionsUsableState(bool bNewActionsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderInputComponent", "ServerAttemptSetActionsUsableState");

	Params::SQCommanderInputComponent_ServerAttemptSetActionsUsableState Parms{};

	Parms.bNewActionsEnabled = bNewActionsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCommanderInputComponent.ServerDebugEnableVoteRequirements
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCommanderInputComponent::ServerDebugEnableVoteRequirements(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderInputComponent", "ServerDebugEnableVoteRequirements");

	Params::SQCommanderInputComponent_ServerDebugEnableVoteRequirements Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCommanderInputComponent.ServerDemoteCommander
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)

void USQCommanderInputComponent::ServerDemoteCommander()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderInputComponent", "ServerDemoteCommander");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCommanderInputComponent.ServerMakePlayerCommander
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class ASQPlayerState*                   NewCommander                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCommanderInputComponent::ServerMakePlayerCommander(class ASQPlayerState* NewCommander)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderInputComponent", "ServerMakePlayerCommander");

	Params::SQCommanderInputComponent_ServerMakePlayerCommander Parms{};

	Parms.NewCommander = NewCommander;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCommanderInputComponent.ServerRequestCommandActorDestroyed
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// TSubclassOf<class USQGridData_CommandOption>CommandOption                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCommanderInputComponent::ServerRequestCommandActorDestroyed(TSubclassOf<class USQGridData_CommandOption> CommandOption)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderInputComponent", "ServerRequestCommandActorDestroyed");

	Params::SQCommanderInputComponent_ServerRequestCommandActorDestroyed Parms{};

	Parms.CommandOption = CommandOption;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCommanderInputComponent.ServerRequestCreateCommandActor
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults, NetValidate)
// Parameters:
// TSubclassOf<class USQGridData_CommandOption>CommandOption                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       Transform                                              (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   Distance                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCommanderInputComponent::ServerRequestCreateCommandActor(TSubclassOf<class USQGridData_CommandOption> CommandOption, const struct FTransform& Transform, const float Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderInputComponent", "ServerRequestCreateCommandActor");

	Params::SQCommanderInputComponent_ServerRequestCreateCommandActor Parms{};

	Parms.CommandOption = CommandOption;
	Parms.Transform = std::move(Transform);
	Parms.Distance = Distance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCommanderInputComponent.ServerRequestSupportAtLocation
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults, NetValidate)
// Parameters:
// struct FVector                          WorldLocation                                          (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCommanderInputComponent::ServerRequestSupportAtLocation(const struct FVector& WorldLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderInputComponent", "ServerRequestSupportAtLocation");

	Params::SQCommanderInputComponent_ServerRequestSupportAtLocation Parms{};

	Parms.WorldLocation = std::move(WorldLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCommanderInputComponent.ServerVoteForCommander
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class ASQPlayerState*                   Nominee                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCommanderInputComponent::ServerVoteForCommander(class ASQPlayerState* Nominee)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderInputComponent", "ServerVoteForCommander");

	Params::SQCommanderInputComponent_ServerVoteForCommander Parms{};

	Parms.Nominee = Nominee;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCommanderInputComponent.VotePlayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ASQPlayerState*                   Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCommanderInputComponent::VotePlayer(class ASQPlayerState* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderInputComponent", "VotePlayer");

	Params::SQCommanderInputComponent_VotePlayer Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameInstance.GetServerUniqueId
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FBlueprintSessionResult          BlueprintSessionResult                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutUniqueId                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameInstance::GetServerUniqueId(const struct FBlueprintSessionResult& BlueprintSessionResult, class UObject* WorldContextObject, class FString* OutUniqueId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQGameInstance", "GetServerUniqueId");

	Params::SQGameInstance_GetServerUniqueId Parms{};

	Parms.BlueprintSessionResult = std::move(BlueprintSessionResult);
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutUniqueId != nullptr)
		*OutUniqueId = std::move(Parms.OutUniqueId);

	return Parms.ReturnValue;
}


// Function Squad.SQGameInstance.CanQueueForServer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQSessionInfo*                   ServerSession                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameInstance::CanQueueForServer(class UObject* WorldContextObject, const class USQSessionInfo* ServerSession)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "CanQueueForServer");

	Params::SQGameInstance_CanQueueForServer Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ServerSession = ServerSession;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameInstance.DetermineNextLayer
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void USQGameInstance::DetermineNextLayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "DetermineNextLayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameInstance.DetermineNextLevel
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void USQGameInstance::DetermineNextLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "DetermineNextLevel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameInstance.DetermineNextMap
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void USQGameInstance::DetermineNextMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "DetermineNextMap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameInstance.DetermineStartupLayer
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameInstance::DetermineStartupLayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "DetermineStartupLayer");

	Params::SQGameInstance_DetermineStartupLayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameInstance.DisconnectToMenu
// (Exec, Native, Public)

void USQGameInstance::DisconnectToMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "DisconnectToMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameInstance.ForceLoadFaction
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             FactionID                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQFaction*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQFaction* USQGameInstance::ForceLoadFaction(const class FName& FactionID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "ForceLoadFaction");

	Params::SQGameInstance_ForceLoadFaction Parms{};

	Parms.FactionID = FactionID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameInstance.GetPipTextureIfAvailable
// (Final, Native, Public)
// Parameters:
// class USQPipScopeCaptureComponent*      InCaptureComponent                                     (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* USQGameInstance::GetPipTextureIfAvailable(const class USQPipScopeCaptureComponent* InCaptureComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "GetPipTextureIfAvailable");

	Params::SQGameInstance_GetPipTextureIfAvailable Parms{};

	Parms.InCaptureComponent = InCaptureComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameInstance.GetSquadUISettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USQUISettings*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQUISettings* USQGameInstance::GetSquadUISettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "GetSquadUISettings");

	Params::SQGameInstance_GetSquadUISettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameInstance.GotoMainMenu
// (Final, Native, Public, BlueprintCallable)

void USQGameInstance::GotoMainMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "GotoMainMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameInstance.HideLoadingScreen
// (Final, Native, Public, BlueprintCallable)

void USQGameInstance::HideLoadingScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "HideLoadingScreen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameInstance.HostGame
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULocalPlayer*                     LocalPlayer                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           GameType                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InTravelURL                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameInstance::HostGame(class ULocalPlayer* LocalPlayer, const class FString& GameType, const class FString& InTravelURL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "HostGame");

	Params::SQGameInstance_HostGame Parms{};

	Parms.LocalPlayer = LocalPlayer;
	Parms.GameType = std::move(GameType);
	Parms.InTravelURL = std::move(InTravelURL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameInstance.IsLoadingFinished
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameInstance::IsLoadingFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "IsLoadingFinished");

	Params::SQGameInstance_IsLoadingFinished Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameInstance.IsOnlineServiceConnected
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameInstance::IsOnlineServiceConnected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "IsOnlineServiceConnected");

	Params::SQGameInstance_IsOnlineServiceConnected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameInstance.IsSteamConnected
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameInstance::IsSteamConnected()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "IsSteamConnected");

	Params::SQGameInstance_IsSteamConnected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameInstance.MakePipTextureTargetAvailable
// (Final, Native, Public)
// Parameters:
// class UTextureRenderTarget2D*           InTextureTarget                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameInstance::MakePipTextureTargetAvailable(const class UTextureRenderTarget2D* InTextureTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "MakePipTextureTargetAvailable");

	Params::SQGameInstance_MakePipTextureTargetAvailable Parms{};

	Parms.InTextureTarget = InTextureTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameInstance.MarkLoadingRequirementFinished
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESQLoadingRequirement                   Requirement                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameInstance::MarkLoadingRequirementFinished(ESQLoadingRequirement Requirement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "MarkLoadingRequirementFinished");

	Params::SQGameInstance_MarkLoadingRequirementFinished Parms{};

	Parms.Requirement = Requirement;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameInstance.OnNewModdedFactionAvailable
// (Event, Public, BlueprintEvent)
// Parameters:
// class USQFaction*                       Faction                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameInstance::OnNewModdedFactionAvailable(class USQFaction* Faction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "OnNewModdedFactionAvailable");

	Params::SQGameInstance_OnNewModdedFactionAvailable Parms{};

	Parms.Faction = Faction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQGameInstance.OnNewModdedFactionSetupAvailable
// (Event, Public, BlueprintEvent)
// Parameters:
// class USQFactionSetup*                  FactionSetup                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameInstance::OnNewModdedFactionSetupAvailable(class USQFactionSetup* FactionSetup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "OnNewModdedFactionSetupAvailable");

	Params::SQGameInstance_OnNewModdedFactionSetupAvailable Parms{};

	Parms.FactionSetup = FactionSetup;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQGameInstance.OnNewModdedLayerAvailable
// (Event, Public, BlueprintEvent)
// Parameters:
// class USQLayer*                         Layer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameInstance::OnNewModdedLayerAvailable(class USQLayer* Layer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "OnNewModdedLayerAvailable");

	Params::SQGameInstance_OnNewModdedLayerAvailable Parms{};

	Parms.Layer = Layer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQGameInstance.OnNewModdedLevelAvailable
// (Event, Public, BlueprintEvent)
// Parameters:
// class USQLevel*                         Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameInstance::OnNewModdedLevelAvailable(class USQLevel* Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "OnNewModdedLevelAvailable");

	Params::SQGameInstance_OnNewModdedLevelAvailable Parms{};

	Parms.Level = Level;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQGameInstance.OverrideNextLayer
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             NextLayerName                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQLayerSettings                 LayerData                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bExtendSearch                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameInstance::OverrideNextLayer(const class FName& NextLayerName, const struct FSQLayerSettings& LayerData, bool bExtendSearch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "OverrideNextLayer");

	Params::SQGameInstance_OverrideNextLayer Parms{};

	Parms.NextLayerName = NextLayerName;
	Parms.LayerData = std::move(LayerData);
	Parms.bExtendSearch = bExtendSearch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameInstance.OverrideNextLevel
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             NextLevelName                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExtendSearch                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameInstance::OverrideNextLevel(const class FName& NextLevelName, bool bExtendSearch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "OverrideNextLevel");

	Params::SQGameInstance_OverrideNextLevel Parms{};

	Parms.NextLevelName = NextLevelName;
	Parms.bExtendSearch = bExtendSearch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameInstance.PlayMusic
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USoundBase*                       InOverrideMusic                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameInstance::PlayMusic(class USoundBase* InOverrideMusic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "PlayMusic");

	Params::SQGameInstance_PlayMusic Parms{};

	Parms.InOverrideMusic = InOverrideMusic;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameInstance.QueueForServer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQSessionInfo*                   ServerSession                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQJoinBeaconClient*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQJoinBeaconClient* USQGameInstance::QueueForServer(class UObject* WorldContextObject, class USQSessionInfo* ServerSession)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "QueueForServer");

	Params::SQGameInstance_QueueForServer Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ServerSession = ServerSession;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameInstance.RandomizeRotation
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void USQGameInstance::RandomizeRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "RandomizeRotation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameInstance.ResetRotation
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void USQGameInstance::ResetRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "ResetRotation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameInstance.ServerTravelToNextLayer
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Params_0                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameInstance::ServerTravelToNextLayer(const class FString& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "ServerTravelToNextLayer");

	Params::SQGameInstance_ServerTravelToNextLayer Parms{};

	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameInstance.ServerTravelToNextLevel
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Params_0                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameInstance::ServerTravelToNextLevel(const class FString& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "ServerTravelToNextLevel");

	Params::SQGameInstance_ServerTravelToNextLevel Parms{};

	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameInstance.ServerTravelToNextMap
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Params_0                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameInstance::ServerTravelToNextMap(const class FString& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "ServerTravelToNextMap");

	Params::SQGameInstance_ServerTravelToNextMap Parms{};

	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameInstance.ShowLoadingScreen
// (Final, Native, Public, BlueprintCallable)

void USQGameInstance::ShowLoadingScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "ShowLoadingScreen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameInstance.StopMusic
// (Final, Native, Public, BlueprintCallable)

void USQGameInstance::StopMusic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "StopMusic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameInstance.TryGetNextLayers
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   InCount                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USQLayer*>                 OutLayers                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameInstance::TryGetNextLayers(int32 InCount, TArray<class USQLayer*>* OutLayers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "TryGetNextLayers");

	Params::SQGameInstance_TryGetNextLayers Parms{};

	Parms.InCount = InCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLayers != nullptr)
		*OutLayers = std::move(Parms.OutLayers);

	return Parms.ReturnValue;
}


// Function Squad.SQGameInstance.TryGetNextLevels
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   InCount                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USQLevel*>                 OutLevels                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameInstance::TryGetNextLevels(int32 InCount, TArray<class USQLevel*>* OutLevels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "TryGetNextLevels");

	Params::SQGameInstance_TryGetNextLevels Parms{};

	Parms.InCount = InCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLevels != nullptr)
		*OutLevels = std::move(Parms.OutLevels);

	return Parms.ReturnValue;
}


// Function Squad.SQGameInstance.TryMarkDeploymentLoadingState
// (Final, Native, Public)

void USQGameInstance::TryMarkDeploymentLoadingState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "TryMarkDeploymentLoadingState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameInstance.VerifyPassword
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FBlueprintSessionResult          BlueprintSessionResult                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           UserPassword                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameInstance::VerifyPassword(const struct FBlueprintSessionResult& BlueprintSessionResult, const class FString& UserPassword)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "VerifyPassword");

	Params::SQGameInstance_VerifyPassword Parms{};

	Parms.BlueprintSessionResult = std::move(BlueprintSessionResult);
	Parms.UserPassword = std::move(UserPassword);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameInstance.DetermineLayerFromName
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// class FName                             InLayerName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQLayer*                         OutLayer                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameInstance::DetermineLayerFromName(const class FName& InLayerName, class USQLayer** OutLayer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "DetermineLayerFromName");

	Params::SQGameInstance_DetermineLayerFromName Parms{};

	Parms.InLayerName = InLayerName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLayer != nullptr)
		*OutLayer = Parms.OutLayer;

	return Parms.ReturnValue;
}


// Function Squad.SQGameInstance.FindLayers
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FString>                   InSpecificLayerList                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class USQLayer*>                 OutLayers                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameInstance::FindLayers(const TArray<class FString>& InSpecificLayerList, TArray<class USQLayer*>* OutLayers) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "FindLayers");

	Params::SQGameInstance_FindLayers Parms{};

	Parms.InSpecificLayerList = std::move(InSpecificLayerList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLayers != nullptr)
		*OutLayers = std::move(Parms.OutLayers);

	return Parms.ReturnValue;
}


// Function Squad.SQGameInstance.FindLevels
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FString>                   InSpecificLevelList                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class USQLevel*>                 OutLevels                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameInstance::FindLevels(const TArray<class FString>& InSpecificLevelList, TArray<class USQLevel*>* OutLevels) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "FindLevels");

	Params::SQGameInstance_FindLevels Parms{};

	Parms.InSpecificLevelList = std::move(InSpecificLevelList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLevels != nullptr)
		*OutLevels = std::move(Parms.OutLevels);

	return Parms.ReturnValue;
}


// Function Squad.SQGameInstance.GetCurrentLayerDisplayName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQGameInstance::GetCurrentLayerDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "GetCurrentLayerDisplayName");

	Params::SQGameInstance_GetCurrentLayerDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameInstance.GetCurrentLayerDisplayText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText USQGameInstance::GetCurrentLayerDisplayText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "GetCurrentLayerDisplayText");

	Params::SQGameInstance_GetCurrentLayerDisplayText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameInstance.GetCurrentLayerId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQGameInstance::GetCurrentLayerId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "GetCurrentLayerId");

	Params::SQGameInstance_GetCurrentLayerId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameInstance.GetCurrentLevelDisplayName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQGameInstance::GetCurrentLevelDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "GetCurrentLevelDisplayName");

	Params::SQGameInstance_GetCurrentLevelDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameInstance.GetCurrentLevelId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQGameInstance::GetCurrentLevelId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "GetCurrentLevelId");

	Params::SQGameInstance_GetCurrentLevelId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameInstance.GetMenuMap
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQGameInstance::GetMenuMap() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "GetMenuMap");

	Params::SQGameInstance_GetMenuMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameInstance.GetNextLayerDisplayName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQGameInstance::GetNextLayerDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "GetNextLayerDisplayName");

	Params::SQGameInstance_GetNextLayerDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameInstance.GetNextLayerId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQGameInstance::GetNextLayerId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "GetNextLayerId");

	Params::SQGameInstance_GetNextLayerId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameInstance.GetNextLevelDisplayName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQGameInstance::GetNextLevelDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "GetNextLevelDisplayName");

	Params::SQGameInstance_GetNextLevelDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameInstance.GetServerSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FSQServerSettings                ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSQServerSettings USQGameInstance::GetServerSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "GetServerSettings");

	Params::SQGameInstance_GetServerSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameInstance.GetServerTagManager
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQServerTagManager*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQServerTagManager* USQGameInstance::GetServerTagManager() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "GetServerTagManager");

	Params::SQGameInstance_GetServerTagManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameInstance.NeedToVoteForNextLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameInstance::NeedToVoteForNextLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "NeedToVoteForNextLevel");

	Params::SQGameInstance_NeedToVoteForNextLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameInstance.TryGetLayersInRotationFor
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQLevel*                         InLevel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USQLayer*>                 OutLayers                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameInstance::TryGetLayersInRotationFor(class USQLevel* InLevel, TArray<class USQLayer*>* OutLayers) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameInstance", "TryGetLayersInRotationFor");

	Params::SQGameInstance_TryGetLayersInRotationFor Parms{};

	Parms.InLevel = InLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLayers != nullptr)
		*OutLayers = std::move(Parms.OutLayers);

	return Parms.ReturnValue;
}


// Function Squad.SQTeam.GetNatoStringOrSquadString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   Idx                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ASQTeam::GetNatoStringOrSquadString(int32 Idx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQTeam", "GetNatoStringOrSquadString");

	Params::SQTeam_GetNatoStringOrSquadString Parms{};

	Parms.Idx = Idx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQTeam.ApplySlomoFactor
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   TimeDilationFactor                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQTeam::ApplySlomoFactor(float TimeDilationFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeam", "ApplySlomoFactor");

	Params::SQTeam_ApplySlomoFactor Parms{};

	Parms.TimeDilationFactor = TimeDilationFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTeam.InitializeAvailabilities
// (Final, Native, Private, BlueprintCallable)

void ASQTeam::InitializeAvailabilities()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeam", "InitializeAvailabilities");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTeam.Release_Action
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             SettingId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQTeam::Release_Action(const class FName& SettingId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeam", "Release_Action");

	Params::SQTeam_Release_Action Parms{};

	Parms.SettingId = SettingId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTeam.Release_Deployable
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             SettingId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQTeam::Release_Deployable(const class FName& SettingId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeam", "Release_Deployable");

	Params::SQTeam_Release_Deployable Parms{};

	Parms.SettingId = SettingId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTeam.Release_Role
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             SettingId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQTeam::Release_Role(const class FName& SettingId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeam", "Release_Role");

	Params::SQTeam_Release_Role Parms{};

	Parms.SettingId = SettingId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTeam.Release_Vehicle
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             SettingId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Param_Index                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQTeam::Release_Vehicle(const class FName& SettingId, const int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeam", "Release_Vehicle");

	Params::SQTeam_Release_Vehicle Parms{};

	Parms.SettingId = SettingId;
	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTeam.Request_Player_Action
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             ActionId                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQActionSettings*                OutSetting                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDataTableRowHandle              OutUnavailabilityReason                                (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQTeam::Request_Player_Action(const class FName& ActionId, class ASQPlayerController* InPlayer, class USQActionSettings* OutSetting, struct FDataTableRowHandle* OutUnavailabilityReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeam", "Request_Player_Action");

	Params::SQTeam_Request_Player_Action Parms{};

	Parms.ActionId = ActionId;
	Parms.InPlayer = InPlayer;
	Parms.OutSetting = OutSetting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutUnavailabilityReason != nullptr)
		*OutUnavailabilityReason = std::move(Parms.OutUnavailabilityReason);

	return Parms.ReturnValue;
}


// Function Squad.SQTeam.Request_Player_Deployable_Refund
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQDeployable*                    InDeployable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQTeam::Request_Player_Deployable_Refund(class ASQPlayerController* InPlayer, class ASQDeployable* InDeployable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeam", "Request_Player_Deployable_Refund");

	Params::SQTeam_Request_Player_Deployable_Refund Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InDeployable = InDeployable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQTeam.Request_Player_Role
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             RoleId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQRoleSettings*                  OutSetting                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDataTableRowHandle              OutUnavailabilityReason                                (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQTeam::Request_Player_Role(const class FName& RoleId, class ASQPlayerController* InPlayer, class USQRoleSettings** OutSetting, struct FDataTableRowHandle* OutUnavailabilityReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeam", "Request_Player_Role");

	Params::SQTeam_Request_Player_Role Parms{};

	Parms.RoleId = RoleId;
	Parms.InPlayer = InPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSetting != nullptr)
		*OutSetting = Parms.OutSetting;

	if (OutUnavailabilityReason != nullptr)
		*OutUnavailabilityReason = std::move(Parms.OutUnavailabilityReason);

	return Parms.ReturnValue;
}


// Function Squad.SQTeam.Request_Player_Role_Rearm
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             RoleId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class ISQRearmSource>  InRearmSource                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// class USQRoleSettings*                  OutSetting                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDataTableRowHandle              OutUnavailabilityReason                                (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQTeam::Request_Player_Role_Rearm(const class FName& RoleId, class ASQPlayerController* InPlayer, const TScriptInterface<class ISQRearmSource>& InRearmSource, class USQRoleSettings** OutSetting, struct FDataTableRowHandle* OutUnavailabilityReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeam", "Request_Player_Role_Rearm");

	Params::SQTeam_Request_Player_Role_Rearm Parms{};

	Parms.RoleId = RoleId;
	Parms.InPlayer = InPlayer;
	Parms.InRearmSource = InRearmSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSetting != nullptr)
		*OutSetting = Parms.OutSetting;

	if (OutUnavailabilityReason != nullptr)
		*OutUnavailabilityReason = std::move(Parms.OutUnavailabilityReason);

	return Parms.ReturnValue;
}


// Function Squad.SQTeam.Request_Player_Vehicle
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             VehicleId                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQVehicleSettings*               OutSetting                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDataTableRowHandle              OutUnavailabilityReason                                (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQTeam::Request_Player_Vehicle(const class FName& VehicleId, class ASQPlayerController* InPlayer, class USQVehicleSettings** OutSetting, struct FDataTableRowHandle* OutUnavailabilityReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeam", "Request_Player_Vehicle");

	Params::SQTeam_Request_Player_Vehicle Parms{};

	Parms.VehicleId = VehicleId;
	Parms.InPlayer = InPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSetting != nullptr)
		*OutSetting = Parms.OutSetting;

	if (OutUnavailabilityReason != nullptr)
		*OutUnavailabilityReason = std::move(Parms.OutUnavailabilityReason);

	return Parms.ReturnValue;
}


// Function Squad.SQTeam.Request_Team_Deployable
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSQAvailabilityState_Deployable  DeployableStatus                                       (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQTeam::Request_Team_Deployable(const struct FSQAvailabilityState_Deployable& DeployableStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeam", "Request_Team_Deployable");

	Params::SQTeam_Request_Team_Deployable Parms{};

	Parms.DeployableStatus = std::move(DeployableStatus);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQTeam.Request_Team_Vehicle
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSQAvailabilityState_Vehicle     VehicleStatus                                          (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQTeam::Request_Team_Vehicle(const struct FSQAvailabilityState_Vehicle& VehicleStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeam", "Request_Team_Vehicle");

	Params::SQTeam_Request_Team_Vehicle Parms{};

	Parms.VehicleStatus = std::move(VehicleStatus);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQTeam.SetFactionSetup
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USQFactionSetup*                  InFactionSetup                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQTeam::SetFactionSetup(class USQFactionSetup* InFactionSetup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeam", "SetFactionSetup");

	Params::SQTeam_SetFactionSetup Parms{};

	Parms.InFactionSetup = InFactionSetup;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTeam.SetTeamConfig
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USQLayerTeamConfig*               InLayerTeamConfig                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQTeam::SetTeamConfig(class USQLayerTeamConfig* InLayerTeamConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeam", "SetTeamConfig");

	Params::SQTeam_SetTeamConfig Parms{};

	Parms.InLayerTeamConfig = InLayerTeamConfig;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTeam.UpdateAvailabilities
// (Final, Native, Private, BlueprintCallable)

void ASQTeam::UpdateAvailabilities()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeam", "UpdateAvailabilities");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTeam.GetDefaultRole
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQRoleSettings*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQRoleSettings* ASQTeam::GetDefaultRole() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeam", "GetDefaultRole");

	Params::SQTeam_GetDefaultRole Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQTeam.GetDefaultSquadLeaderRole
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQRoleSettings*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQRoleSettings* ASQTeam::GetDefaultSquadLeaderRole() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeam", "GetDefaultSquadLeaderRole");

	Params::SQTeam_GetDefaultSquadLeaderRole Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQTeam.GetFaction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQFaction*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQFaction* ASQTeam::GetFaction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeam", "GetFaction");

	Params::SQTeam_GetFaction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQTeam.GetFactionDisplayName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ASQTeam::GetFactionDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeam", "GetFactionDisplayName");

	Params::SQTeam_GetFactionDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQTeam.GetFactionId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName ASQTeam::GetFactionId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeam", "GetFactionId");

	Params::SQTeam_GetFactionId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQTeam.GetFactionSetup
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQFactionSetup*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQFactionSetup* ASQTeam::GetFactionSetup() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeam", "GetFactionSetup");

	Params::SQTeam_GetFactionSetup Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQTeam.GetFactionSetupDisplayName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ASQTeam::GetFactionSetupDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeam", "GetFactionSetupDisplayName");

	Params::SQTeam_GetFactionSetupDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQTeam.GetFactionSetupId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName ASQTeam::GetFactionSetupId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeam", "GetFactionSetupId");

	Params::SQTeam_GetFactionSetupId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQTeam.GetLeaveSquadRole
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQRoleSettings*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQRoleSettings* ASQTeam::GetLeaveSquadRole() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeam", "GetLeaveSquadRole");

	Params::SQTeam_GetLeaveSquadRole Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQTeam.GetPlayerCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQTeam::GetPlayerCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeam", "GetPlayerCount");

	Params::SQTeam_GetPlayerCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQTeam.GetTeamId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQTeam::GetTeamId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeam", "GetTeamId");

	Params::SQTeam_GetTeamId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQTeam.HasFactionSetup
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQTeam::HasFactionSetup() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeam", "HasFactionSetup");

	Params::SQTeam_HasFactionSetup Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQTeam.IsConfigured
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQTeam::IsConfigured() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeam", "IsConfigured");

	Params::SQTeam_IsConfigured Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQTeam.TryGetFactionDisplayName
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             OutDisplayName                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQTeam::TryGetFactionDisplayName(class FText* OutDisplayName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeam", "TryGetFactionDisplayName");

	Params::SQTeam_TryGetFactionDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDisplayName != nullptr)
		*OutDisplayName = std::move(Parms.OutDisplayName);

	return Parms.ReturnValue;
}


// Function Squad.SQTeam.TryGetFactionSetupDisplayName
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             OutDisplayName                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQTeam::TryGetFactionSetupDisplayName(class FText* OutDisplayName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeam", "TryGetFactionSetupDisplayName");

	Params::SQTeam_TryGetFactionSetupDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDisplayName != nullptr)
		*OutDisplayName = std::move(Parms.OutDisplayName);

	return Parms.ReturnValue;
}


// Function Squad.SQDeployable.AttachToUnderlyingActor
// (Native, Public, BlueprintCallable)

void ASQDeployable::AttachToUnderlyingActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "AttachToUnderlyingActor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployable.BeginDeath
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   KillingDamage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDamageEvent                     DamageEvent                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AController*                      Killer                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeployable::BeginDeath(float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "BeginDeath");

	Params::SQDeployable_BeginDeath Parms{};

	Parms.KillingDamage = KillingDamage;
	Parms.DamageEvent = std::move(DamageEvent);
	Parms.Killer = Killer;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployable.BP_ExtraTrackDeployableRules
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASQPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeSelf                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQTrackDeployableResult                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESQTrackDeployableResult ASQDeployable::BP_ExtraTrackDeployableRules(class ASQPlayerState* PlayerState, bool bIncludeSelf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "BP_ExtraTrackDeployableRules");

	Params::SQDeployable_BP_ExtraTrackDeployableRules Parms{};

	Parms.PlayerState = PlayerState;
	Parms.bIncludeSelf = bIncludeSelf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQDeployable.BP_OnStateChange
// (Event, Public, BlueprintEvent)
// Parameters:
// ESQBuildState                           OldBuildState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeployable::BP_OnStateChange(ESQBuildState OldBuildState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "BP_OnStateChange");

	Params::SQDeployable_BP_OnStateChange Parms{};

	Parms.OldBuildState = OldBuildState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQDeployable.BP_OnStateChangeClient
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// ESQBuildState                           OldBuildState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeployable::BP_OnStateChangeClient(ESQBuildState OldBuildState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "BP_OnStateChangeClient");

	Params::SQDeployable_BP_OnStateChangeClient Parms{};

	Parms.OldBuildState = OldBuildState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQDeployable.BPOnDeath
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   KillingDamage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDamageEvent                     DamageEvent                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AController*                      Killer                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeployable::BPOnDeath(float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "BPOnDeath");

	Params::SQDeployable_BPOnDeath Parms{};

	Parms.KillingDamage = KillingDamage;
	Parms.DamageEvent = std::move(DamageEvent);
	Parms.Killer = Killer;
	Parms.DamageCauser = DamageCauser;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQDeployable.BPOnGhostMade
// (Event, Public, BlueprintEvent)

void ASQDeployable::BPOnGhostMade()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "BPOnGhostMade");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQDeployable.CompletedConstruction
// (Native, Event, Public, BlueprintEvent)

void ASQDeployable::CompletedConstruction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "CompletedConstruction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployable.ConstructionHit
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASQSoldier*                       Activator                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      Inst                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeployable::ConstructionHit(class ASQSoldier* Activator, class AController* Inst, float Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "ConstructionHit");

	Params::SQDeployable_ConstructionHit Parms{};

	Parms.Activator = Activator;
	Parms.Inst = Inst;
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployable.GetFailedSpawnReasonText
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESQInvalidPlacementReason               Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText ASQDeployable::GetFailedSpawnReasonText(ESQInvalidPlacementReason Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "GetFailedSpawnReasonText");

	Params::SQDeployable_GetFailedSpawnReasonText Parms{};

	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQDeployable.GetNearestFOB
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    bIsFriendly                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQForwardBase*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQForwardBase* ASQDeployable::GetNearestFOB(bool bIsFriendly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "GetNearestFOB");

	Params::SQDeployable_GetNearestFOB Parms{};

	Parms.bIsFriendly = bIsFriendly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQDeployable.GetTrackDeployableResult
// (Native, Public, BlueprintCallable)
// Parameters:
// class ASQPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeSelf                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQTrackDeployableResult                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESQTrackDeployableResult ASQDeployable::GetTrackDeployableResult(class ASQPlayerState* PlayerState, bool bIncludeSelf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "GetTrackDeployableResult");

	Params::SQDeployable_GetTrackDeployableResult Parms{};

	Parms.PlayerState = PlayerState;
	Parms.bIncludeSelf = bIncludeSelf;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQDeployable.GoToBuildState
// (Final, BlueprintAuthorityOnly, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// ESQBuildState                           InBuildState                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeployable::GoToBuildState(ESQBuildState InBuildState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "GoToBuildState");

	Params::SQDeployable_GoToBuildState Parms{};

	Parms.InBuildState = InBuildState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployable.InvalidatePlacement
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ASQDeployable::InvalidatePlacement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "InvalidatePlacement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployable.IsDeployableEmpty
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQDeployable::IsDeployableEmpty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "IsDeployableEmpty");

	Params::SQDeployable_IsDeployableEmpty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQDeployable.IsValidPlacement
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ESQInvalidPlacementReason               Reason                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQDeployable::IsValidPlacement(ESQInvalidPlacementReason* Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "IsValidPlacement");

	Params::SQDeployable_IsValidPlacement Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Reason != nullptr)
		*Reason = Parms.Reason;

	return Parms.ReturnValue;
}


// Function Squad.SQDeployable.MakeGhost
// (Final, Native, Public, BlueprintCallable)

void ASQDeployable::MakeGhost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "MakeGhost");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployable.MulticastPlayDamageEffects
// (Net, Native, Event, NetMulticast, Public, HasDefaults)
// Parameters:
// TSubclassOf<class UDamageType>          DamageTypeClass                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ImpactLocationZeroBased                                (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQBuildState                           OldBuildState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQBuildState                           NewBuildState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeployable::MulticastPlayDamageEffects(TSubclassOf<class UDamageType> DamageTypeClass, const struct FVector& ImpactLocationZeroBased, ESQBuildState OldBuildState, ESQBuildState NewBuildState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "MulticastPlayDamageEffects");

	Params::SQDeployable_MulticastPlayDamageEffects Parms{};

	Parms.DamageTypeClass = DamageTypeClass;
	Parms.ImpactLocationZeroBased = std::move(ImpactLocationZeroBased);
	Parms.OldBuildState = OldBuildState;
	Parms.NewBuildState = NewBuildState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployable.MulticastPlayDestructionEffect
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void ASQDeployable::MulticastPlayDestructionEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "MulticastPlayDestructionEffect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployable.OnAttachedActorDestroyed
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeployable::OnAttachedActorDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "OnAttachedActorDestroyed");

	Params::SQDeployable_OnAttachedActorDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployable.OnRep_BuildState
// (Final, Native, Public)
// Parameters:
// ESQBuildState                           OldBuildState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeployable::OnRep_BuildState(ESQBuildState OldBuildState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "OnRep_BuildState");

	Params::SQDeployable_OnRep_BuildState Parms{};

	Parms.OldBuildState = OldBuildState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployable.OnRep_Team
// (Final, Native, Protected)

void ASQDeployable::OnRep_Team()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "OnRep_Team");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployable.OnStateChangeClient
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESQBuildState                           OldBuildState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeployable::OnStateChangeClient(ESQBuildState OldBuildState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "OnStateChangeClient");

	Params::SQDeployable_OnStateChangeClient Parms{};

	Parms.OldBuildState = OldBuildState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployable.Placed
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ASQDeployable::Placed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "Placed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployable.PlayStateChangeEffects
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESQBuildState                           OldBuildState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeployable::PlayStateChangeEffects(ESQBuildState OldBuildState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "PlayStateChangeEffects");

	Params::SQDeployable_PlayStateChangeEffects Parms{};

	Parms.OldBuildState = OldBuildState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployable.PostModifyHealth
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaHealth                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      Inst                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCausedByDamage                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeployable::PostModifyHealth(const float DeltaHealth, class AController* Inst, const bool bCausedByDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "PostModifyHealth");

	Params::SQDeployable_PostModifyHealth Parms{};

	Parms.DeltaHealth = DeltaHealth;
	Parms.Inst = Inst;
	Parms.bCausedByDamage = bCausedByDamage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployable.PreModifyHealth
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaHealth                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      Inst                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCausedByDamage                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQDeployable::PreModifyHealth(const float DeltaHealth, class AController* Inst, const bool bCausedByDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "PreModifyHealth");

	Params::SQDeployable_PreModifyHealth Parms{};

	Parms.DeltaHealth = DeltaHealth;
	Parms.Inst = Inst;
	Parms.bCausedByDamage = bCausedByDamage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQDeployable.PushSoldiersOutOfBounds
// (Final, Native, Public, BlueprintCallable)

void ASQDeployable::PushSoldiersOutOfBounds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "PushSoldiersOutOfBounds");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployable.RemovedFromPlayersPlacedList
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ASQDeployable::RemovedFromPlayersPlacedList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "RemovedFromPlayersPlacedList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployable.SetStateCompleted
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)

void ASQDeployable::SetStateCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "SetStateCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployable.SetStateHalfBuilt
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)

void ASQDeployable::SetStateHalfBuilt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "SetStateHalfBuilt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployable.SetStateUnbuilt
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)

void ASQDeployable::SetStateUnbuilt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "SetStateUnbuilt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployable.SetTeam
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Team                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeployable::SetTeam(int32 Param_Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "SetTeam");

	Params::SQDeployable_SetTeam Parms{};

	Parms.Param_Team = Param_Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployable.UpdateState
// (Final, Native, Public, BlueprintCallable)

void ASQDeployable::UpdateState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "UpdateState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployable.GetBuildState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESQBuildState                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESQBuildState ASQDeployable::GetBuildState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "GetBuildState");

	Params::SQDeployable_GetBuildState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQDeployable.IsGhost
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQDeployable::IsGhost() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployable", "IsGhost");

	Params::SQDeployable_IsGhost Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQForwardBase.BP_OnDeployableAdded
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASQDeployable*                    InDeployable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQForwardBase::BP_OnDeployableAdded(class ASQDeployable* InDeployable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "BP_OnDeployableAdded");

	Params::SQForwardBase_BP_OnDeployableAdded Parms{};

	Parms.InDeployable = InDeployable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQForwardBase.BP_OnDeployableRemoved
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASQDeployable*                    InDeployable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQForwardBase::BP_OnDeployableRemoved(class ASQDeployable* InDeployable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "BP_OnDeployableRemoved");

	Params::SQForwardBase_BP_OnDeployableRemoved Parms{};

	Parms.InDeployable = InDeployable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQForwardBase.BPOnIsBleedingChanged
// (Event, Public, BlueprintEvent)

void ASQForwardBase::BPOnIsBleedingChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "BPOnIsBleedingChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQForwardBase.BPOverrun
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bFriendly                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQForwardBase::BPOverrun(bool bFriendly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "BPOverrun");

	Params::SQForwardBase_BPOverrun Parms{};

	Parms.bFriendly = bFriendly;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQForwardBase.BPPostTicketTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   Difference                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQForwardBase::BPPostTicketTick(float Difference)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "BPPostTicketTick");

	Params::SQForwardBase_BPPostTicketTick Parms{};

	Parms.Difference = Difference;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQForwardBase.CheckDeploymentRules
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQForwardBase::CheckDeploymentRules()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "CheckDeploymentRules");

	Params::SQForwardBase_CheckDeploymentRules Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQForwardBase.ConsumeConstructionPoints
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQForwardBase::ConsumeConstructionPoints(float Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "ConsumeConstructionPoints");

	Params::SQForwardBase_ConsumeConstructionPoints Parms{};

	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQForwardBase.ConsumeFOBAmmo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQForwardBase::ConsumeFOBAmmo(float Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "ConsumeFOBAmmo");

	Params::SQForwardBase_ConsumeFOBAmmo Parms{};

	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQForwardBase.CreateSpawnPointOnFob
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ASQGameSpawn*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQGameSpawn* ASQForwardBase::CreateSpawnPointOnFob()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "CreateSpawnPointOnFob");

	Params::SQForwardBase_CreateSpawnPointOnFob Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQForwardBase.CreateSpawnPointSeperately
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQGameSpawn*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQGameSpawn* ASQForwardBase::CreateSpawnPointSeperately(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "CreateSpawnPointSeperately");

	Params::SQForwardBase_CreateSpawnPointSeperately Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQForwardBase.HasConstructionPointsFor
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQForwardBase::HasConstructionPointsFor(float Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "HasConstructionPointsFor");

	Params::SQForwardBase_HasConstructionPointsFor Parms{};

	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQForwardBase.OnBleedOut
// (Native, Event, Public, BlueprintEvent)

void ASQForwardBase::OnBleedOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "OnBleedOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQForwardBase.OnRep_ActivatedTimeChanged
// (Native, Protected)

void ASQForwardBase::OnRep_ActivatedTimeChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "OnRep_ActivatedTimeChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQForwardBase.OnRep_AmmoChanged
// (Native, Protected)

void ASQForwardBase::OnRep_AmmoChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "OnRep_AmmoChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQForwardBase.OnRep_ConstructionPointsChanged
// (Native, Protected)

void ASQForwardBase::OnRep_ConstructionPointsChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "OnRep_ConstructionPointsChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQForwardBase.OnRep_IsBleedingChanged
// (Final, Native, Private)
// Parameters:
// bool                                    bPrevIsBleeding                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQForwardBase::OnRep_IsBleedingChanged(bool bPrevIsBleeding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "OnRep_IsBleedingChanged");

	Params::SQForwardBase_OnRep_IsBleedingChanged Parms{};

	Parms.bPrevIsBleeding = bPrevIsBleeding;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQForwardBase.OnRep_SiegedChanged
// (Native, Protected)

void ASQForwardBase::OnRep_SiegedChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "OnRep_SiegedChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQForwardBase.OnRep_SpawningEnabledChanged
// (Native, Protected)

void ASQForwardBase::OnRep_SpawningEnabledChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "OnRep_SpawningEnabledChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQForwardBase.OnRep_SpawnPointsChanged
// (Native, Protected)

void ASQForwardBase::OnRep_SpawnPointsChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "OnRep_SpawnPointsChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQForwardBase.OnSpawningActivatedTimestampChanged
// (Final, Native, Private)
// Parameters:
// class ASQGameSpawn*                     SpawnPoint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQForwardBase::OnSpawningActivatedTimestampChanged(class ASQGameSpawn* SpawnPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "OnSpawningActivatedTimestampChanged");

	Params::SQForwardBase_OnSpawningActivatedTimestampChanged Parms{};

	Parms.SpawnPoint = SpawnPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQForwardBase.OnSpawningEnabledChanged
// (Final, Native, Private)
// Parameters:
// class ASQGameSpawn*                     SpawnPoint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQForwardBase::OnSpawningEnabledChanged(class ASQGameSpawn* SpawnPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "OnSpawningEnabledChanged");

	Params::SQForwardBase_OnSpawningEnabledChanged Parms{};

	Parms.SpawnPoint = SpawnPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQForwardBase.OnSpawnPointDestroyed
// (Final, Native, Private)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQForwardBase::OnSpawnPointDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "OnSpawnPointDestroyed");

	Params::SQForwardBase_OnSpawnPointDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQForwardBase.OnSpawnSiegedStateChanged
// (Final, Native, Private)
// Parameters:
// class ASQGameSpawn*                     SpawnPoint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQForwardBase::OnSpawnSiegedStateChanged(class ASQGameSpawn* SpawnPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "OnSpawnSiegedStateChanged");

	Params::SQForwardBase_OnSpawnSiegedStateChanged Parms{};

	Parms.SpawnPoint = SpawnPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQForwardBase.OnTrackedDeployableDestroyed
// (Native, Public)
// Parameters:
// class ASQDeployable*                    Deployable                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQForwardBase::OnTrackedDeployableDestroyed(class ASQDeployable* Deployable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "OnTrackedDeployableDestroyed");

	Params::SQForwardBase_OnTrackedDeployableDestroyed Parms{};

	Parms.Deployable = Deployable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQForwardBase.Overrun
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bFriendly                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQForwardBase::Overrun(bool bFriendly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "Overrun");

	Params::SQForwardBase_Overrun Parms{};

	Parms.bFriendly = bFriendly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQForwardBase.SetActivateDelay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DelaySeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQForwardBase::SetActivateDelay(float DelaySeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "SetActivateDelay");

	Params::SQForwardBase_SetActivateDelay Parms{};

	Parms.DelaySeconds = DelaySeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQForwardBase.SetAmmo
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewAmmo                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQForwardBase::SetAmmo(float NewAmmo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "SetAmmo");

	Params::SQForwardBase_SetAmmo Parms{};

	Parms.NewAmmo = NewAmmo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQForwardBase.SetBleedState
// (Final, BlueprintAuthorityOnly, Native, Private, BlueprintCallable)
// Parameters:
// bool                                    bNewIsBleeding                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQForwardBase::SetBleedState(bool bNewIsBleeding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "SetBleedState");

	Params::SQForwardBase_SetBleedState Parms{};

	Parms.bNewIsBleeding = bNewIsBleeding;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQForwardBase.SetConstructionPoints
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewConstructionPoints                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQForwardBase::SetConstructionPoints(float NewConstructionPoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "SetConstructionPoints");

	Params::SQForwardBase_SetConstructionPoints Parms{};

	Parms.NewConstructionPoints = NewConstructionPoints;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQForwardBase.SetSieged
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQForwardBase::SetSieged(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "SetSieged");

	Params::SQForwardBase_SetSieged Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQForwardBase.SetSpawnPointsEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQForwardBase::SetSpawnPointsEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "SetSpawnPointsEnabled");

	Params::SQForwardBase_SetSpawnPointsEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQForwardBase.TrackDeployable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ASQDeployable*                    Deployable                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQForwardBase::TrackDeployable(class ASQDeployable* Deployable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "TrackDeployable");

	Params::SQForwardBase_TrackDeployable Parms{};

	Parms.Deployable = Deployable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQForwardBase.GetActivatedSpawnDelay
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    BMax                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQForwardBase::GetActivatedSpawnDelay(bool BMax) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "GetActivatedSpawnDelay");

	Params::SQForwardBase_GetActivatedSpawnDelay Parms{};

	Parms.BMax = BMax;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQForwardBase.GetActivatedTimeStamp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    BMax                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQForwardBase::GetActivatedTimeStamp(bool BMax) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "GetActivatedTimeStamp");

	Params::SQForwardBase_GetActivatedTimeStamp Parms{};

	Parms.BMax = BMax;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQForwardBase.GetClientRemainingActivatingTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQForwardBase::GetClientRemainingActivatingTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "GetClientRemainingActivatingTime");

	Params::SQForwardBase_GetClientRemainingActivatingTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQForwardBase.GetNumActivatedSpawnPoints
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQForwardBase::GetNumActivatedSpawnPoints() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "GetNumActivatedSpawnPoints");

	Params::SQForwardBase_GetNumActivatedSpawnPoints Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQForwardBase.GetRemainingActivatingTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    BMax                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQForwardBase::GetRemainingActivatingTime(bool BMax) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "GetRemainingActivatingTime");

	Params::SQForwardBase_GetRemainingActivatingTime Parms{};

	Parms.BMax = BMax;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQForwardBase.GetSpawnPointsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQForwardBase::GetSpawnPointsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "GetSpawnPointsEnabled");

	Params::SQForwardBase_GetSpawnPointsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQForwardBase.HasAmmoFor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQForwardBase::HasAmmoFor(float Amount) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBase", "HasAmmoFor");

	Params::SQForwardBase_HasAmmoFor Parms{};

	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCommanderManager.CalculateCategoryCurrentRemainingTime
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   CommandOptionType                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQCommanderState*                SQCommanderState                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQCommanderManager::CalculateCategoryCurrentRemainingTime(const uint8& CommandOptionType, const class ASQCommanderState* SQCommanderState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQCommanderManager", "CalculateCategoryCurrentRemainingTime");

	Params::SQCommanderManager_CalculateCategoryCurrentRemainingTime Parms{};

	Parms.CommandOptionType = CommandOptionType;
	Parms.SQCommanderState = SQCommanderState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCommanderManager.CalculateCategoryLocked
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   CommandOptionType                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQCommanderState*                SQCommanderState                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQCommanderManager::CalculateCategoryLocked(const uint8& CommandOptionType, const class ASQCommanderState* SQCommanderState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQCommanderManager", "CalculateCategoryLocked");

	Params::SQCommanderManager_CalculateCategoryLocked Parms{};

	Parms.CommandOptionType = CommandOptionType;
	Parms.SQCommanderState = SQCommanderState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCommanderManager.CalculateCategoryPercentRemainingTime
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   CommandOptionType                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQCommanderState*                SQCommanderState                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQCommanderManager::CalculateCategoryPercentRemainingTime(const uint8& CommandOptionType, const class ASQCommanderState* SQCommanderState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQCommanderManager", "CalculateCategoryPercentRemainingTime");

	Params::SQCommanderManager_CalculateCategoryPercentRemainingTime Parms{};

	Parms.CommandOptionType = CommandOptionType;
	Parms.SQCommanderState = SQCommanderState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCommanderManager.CalculateState
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class USQGridData_CommandOption>CommandOption                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQCommanderState*                SQCommanderState                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQCommandOptionState                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESQCommandOptionState USQCommanderManager::CalculateState(const TSubclassOf<class USQGridData_CommandOption> CommandOption, const class ASQCommanderState* SQCommanderState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQCommanderManager", "CalculateState");

	Params::SQCommanderManager_CalculateState Parms{};

	Parms.CommandOption = CommandOption;
	Parms.SQCommanderState = SQCommanderState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCommanderManager.CalculateStatePercentTimeRemaining
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class USQGridData_CommandOption>CommandOption                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQCommanderState*                SQCommanderState                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQCommandOptionState                   CommandOptionState                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQCommanderManager::CalculateStatePercentTimeRemaining(const TSubclassOf<class USQGridData_CommandOption> CommandOption, const class ASQCommanderState* SQCommanderState, const ESQCommandOptionState& CommandOptionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQCommanderManager", "CalculateStatePercentTimeRemaining");

	Params::SQCommanderManager_CalculateStatePercentTimeRemaining Parms{};

	Parms.CommandOption = CommandOption;
	Parms.SQCommanderState = SQCommanderState;
	Parms.CommandOptionState = CommandOptionState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCommanderManager.CalculateStateTimeRemaining
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class USQGridData_CommandOption>CommandOption                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQCommanderState*                SQCommanderState                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQCommandOptionState                   CommandOptionState                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQCommanderManager::CalculateStateTimeRemaining(const TSubclassOf<class USQGridData_CommandOption> CommandOption, const class ASQCommanderState* SQCommanderState, const ESQCommandOptionState& CommandOptionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQCommanderManager", "CalculateStateTimeRemaining");

	Params::SQCommanderManager_CalculateStateTimeRemaining Parms{};

	Parms.CommandOption = CommandOption;
	Parms.SQCommanderState = SQCommanderState;
	Parms.CommandOptionState = CommandOptionState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCommanderManager.CalculateTotalTimeRemaining
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class USQGridData_CommandOption>CommandOption                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQCommanderState*                SQCommanderState                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQCommanderManager::CalculateTotalTimeRemaining(const TSubclassOf<class USQGridData_CommandOption> CommandOption, const class ASQCommanderState* SQCommanderState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQCommanderManager", "CalculateTotalTimeRemaining");

	Params::SQCommanderManager_CalculateTotalTimeRemaining Parms{};

	Parms.CommandOption = CommandOption;
	Parms.SQCommanderState = SQCommanderState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCommanderManager.CanUseAction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class USQGridData_CommandOption>CommandOption                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQCommanderState*                SQCommanderState                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQCommanderManager::CanUseAction(const TSubclassOf<class USQGridData_CommandOption> CommandOption, const class ASQCommanderState* SQCommanderState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQCommanderManager", "CanUseAction");

	Params::SQCommanderManager_CanUseAction Parms{};

	Parms.CommandOption = CommandOption;
	Parms.SQCommanderState = SQCommanderState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCommanderManager.GetInterval
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class USQGridData_CommandOption>CommandOption                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQCommanderState*                SQCommanderState                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQCommandActionData             ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSQCommandActionData USQCommanderManager::GetInterval(const TSubclassOf<class USQGridData_CommandOption> CommandOption, const class ASQCommanderState* SQCommanderState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQCommanderManager", "GetInterval");

	Params::SQCommanderManager_GetInterval Parms{};

	Parms.CommandOption = CommandOption;
	Parms.SQCommanderState = SQCommanderState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction Squad.SQCommanderManager.CommanderChangedDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class ASQPlayerState*                   OldCommander                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCommanderManager::CommanderChangedDelegate__DelegateSignature(class ASQPlayerState* OldCommander)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderManager", "CommanderChangedDelegate__DelegateSignature");

	Params::SQCommanderManager_CommanderChangedDelegate__DelegateSignature Parms{};

	Parms.OldCommander = OldCommander;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQCommanderState.GetActionsEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQCommanderState::GetActionsEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderState", "GetActionsEnabled");

	Params::SQCommanderState_GetActionsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCommanderState.GetCommandActions
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<TSubclassOf<class USQGridData_CommandOption>>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)

TArray<TSubclassOf<class USQGridData_CommandOption>> ASQCommanderState::GetCommandActions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderState", "GetCommandActions");

	Params::SQCommanderState_GetCommandActions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCommanderState.GetCommandActionsById
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// uint8                                   ID                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<TSubclassOf<class USQGridData_CommandOption>>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)

TArray<TSubclassOf<class USQGridData_CommandOption>> ASQCommanderState::GetCommandActionsById(const uint8& ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderState", "GetCommandActionsById");

	Params::SQCommanderState_GetCommandActionsById Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCommanderState.OnRep_CurrentCommander
// (Final, Native, Private)
// Parameters:
// class ASQPlayerState*                   OldCommander                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQCommanderState::OnRep_CurrentCommander(class ASQPlayerState* OldCommander)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderState", "OnRep_CurrentCommander");

	Params::SQCommanderState_OnRep_CurrentCommander Parms{};

	Parms.OldCommander = OldCommander;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCommanderState.OnRep_VoteInProgressChanged
// (Final, Native, Public)

void ASQCommanderState::OnRep_VoteInProgressChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderState", "OnRep_VoteInProgressChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCommanderState.GetCurrentCommander
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQPlayerState* ASQCommanderState::GetCurrentCommander() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderState", "GetCurrentCommander");

	Params::SQCommanderState_GetCurrentCommander Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCommanderState.IsCommanderActionAllowed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class USQGridData_CommandOption>CommandOption                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQCommanderState::IsCommanderActionAllowed(const TSubclassOf<class USQGridData_CommandOption> CommandOption) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderState", "IsCommanderActionAllowed");

	Params::SQCommanderState_IsCommanderActionAllowed Parms{};

	Parms.CommandOption = CommandOption;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCommanderVotingPlayerItem.OnIsVotedByPlayerChanged
// (Event, Public, BlueprintEvent)

void USQCommanderVotingPlayerItem::OnIsVotedByPlayerChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderVotingPlayerItem", "OnIsVotedByPlayerChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCommanderVotingPlayerItem.OnNomineeNameChanged
// (Event, Public, BlueprintEvent)

void USQCommanderVotingPlayerItem::OnNomineeNameChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderVotingPlayerItem", "OnNomineeNameChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCommanderVotingPlayerItem.OnVoteCountChanged
// (Event, Public, BlueprintEvent)

void USQCommanderVotingPlayerItem::OnVoteCountChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderVotingPlayerItem", "OnVoteCountChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCommanderVotingWidget.Init
// (Final, Native, Public, BlueprintCallable)

void USQCommanderVotingWidget::Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderVotingWidget", "Init");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCommanderVotingWidget.OnIsVoteInProgressChanged
// (Event, Public, BlueprintEvent)

void USQCommanderVotingWidget::OnIsVoteInProgressChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderVotingWidget", "OnIsVoteInProgressChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCommanderVotingWidget.OnIsVotingAvailableChanged
// (Event, Public, BlueprintEvent)

void USQCommanderVotingWidget::OnIsVotingAvailableChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderVotingWidget", "OnIsVotingAvailableChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCommanderVotingWidget.OnVotingTimeChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   Seconds                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCommanderVotingWidget::OnVotingTimeChanged(float Seconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderVotingWidget", "OnVotingTimeChanged");

	Params::SQCommanderVotingWidget_OnVotingTimeChanged Parms{};

	Parms.Seconds = Seconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQCommanderVotingWidget.UpdateFromData
// (Final, Native, Public, BlueprintCallable)

void USQCommanderVotingWidget::UpdateFromData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCommanderVotingWidget", "UpdateFromData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCompassMarker.InitWidget
// (Native, Public, BlueprintCallable)

void USQCompassMarker::InitWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCompassMarker", "InitWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCompassMarker.RefreshDisplayMode
// (Event, Public, BlueprintEvent)

void USQCompassMarker::RefreshDisplayMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCompassMarker", "RefreshDisplayMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCompassMarker.UpdateState
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InScale                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShowIcon                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCompassMarker::UpdateState(float InScale, bool bShowIcon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCompassMarker", "UpdateState");

	Params::SQCompassMarker_UpdateState Parms{};

	Parms.InScale = InScale;
	Parms.bShowIcon = bShowIcon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCompassMK2.CreateNewCompassMarker
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FSQMapMarkerVisualData           MapMarkerVisualData                                    (Parm, NoDestructor, NativeAccessSpecifierPublic)

void USQCompassMK2::CreateNewCompassMarker(const struct FSQMapMarkerVisualData& MapMarkerVisualData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCompassMK2", "CreateNewCompassMarker");

	Params::SQCompassMK2_CreateNewCompassMarker Parms{};

	Parms.MapMarkerVisualData = std::move(MapMarkerVisualData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCompassMK2.CreateNewMarker
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SquadId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQMapMarker*                     Marker                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCompassMK2::CreateNewMarker(int32 SquadId, class ASQMapMarker* Marker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCompassMK2", "CreateNewMarker");

	Params::SQCompassMK2_CreateNewMarker Parms{};

	Parms.SquadId = SquadId;
	Parms.Marker = Marker;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCompassMK2.CreateSquadMateWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ASQPlayerState*                   SquadMate                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCompassMK2::CreateSquadMateWidget(class ASQPlayerState* SquadMate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCompassMK2", "CreateSquadMateWidget");

	Params::SQCompassMK2_CreateSquadMateWidget Parms{};

	Parms.SquadMate = SquadMate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCompassMK2.InitWidget
// (Native, Public, BlueprintCallable)

void USQCompassMK2::InitWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCompassMK2", "InitWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCompassMK2.PlayerJoinedSquad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ASQSquadState*                    Squad                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCompassMK2::PlayerJoinedSquad(class ASQSquadState* Squad, class ASQPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCompassMK2", "PlayerJoinedSquad");

	Params::SQCompassMK2_PlayerJoinedSquad Parms{};

	Parms.Squad = Squad;
	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCompassMK2.PlayerLeftSquad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ASQSquadState*                    Squad                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCompassMK2::PlayerLeftSquad(class ASQSquadState* Squad, class ASQPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCompassMK2", "PlayerLeftSquad");

	Params::SQCompassMK2_PlayerLeftSquad Parms{};

	Parms.Squad = Squad;
	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCompassMK2.RemoveCompassMarker
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCompassMK2::RemoveCompassMarker(uint8 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCompassMK2", "RemoveCompassMarker");

	Params::SQCompassMK2_RemoveCompassMarker Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCompassMK2.RemoveMarker
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCompassMK2::RemoveMarker(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCompassMK2", "RemoveMarker");

	Params::SQCompassMK2_RemoveMarker Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCompassMK2.SquadChangedHandler
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ASQSquadState*                    NewSquad                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQSquadState*                    OldSquad                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQPlayerState*                   Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCompassMK2::SquadChangedHandler(class ASQSquadState* NewSquad, class ASQSquadState* OldSquad, class ASQPlayerState* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCompassMK2", "SquadChangedHandler");

	Params::SQCompassMK2_SquadChangedHandler Parms{};

	Parms.NewSquad = NewSquad;
	Parms.OldSquad = OldSquad;
	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCompassMK2.UpdateCompassBearing
// (Native, Public, BlueprintCallable)

void USQCompassMK2::UpdateCompassBearing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCompassMK2", "UpdateCompassBearing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCompassMK2.UpdateMarkerArrows
// (Native, Public, BlueprintCallable)

void USQCompassMK2::UpdateMarkerArrows()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCompassMK2", "UpdateMarkerArrows");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCompassMK2.UpdatePlayerWidgetTransform
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                                    bShowIcon                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQSoldier*                       SoldierRef                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQCompassPlayer*                 WidgetRef                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQCompassMK2::UpdatePlayerWidgetTransform(bool* bShowIcon, class ASQSoldier* SoldierRef, class USQCompassPlayer* WidgetRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCompassMK2", "UpdatePlayerWidgetTransform");

	Params::SQCompassMK2_UpdatePlayerWidgetTransform Parms{};

	Parms.SoldierRef = SoldierRef;
	Parms.WidgetRef = WidgetRef;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bShowIcon != nullptr)
		*bShowIcon = Parms.bShowIcon;

	return Parms.ReturnValue;
}


// Function Squad.SQCompassMK2.UpdateSquadMarkers
// (Native, Public, BlueprintCallable)

void USQCompassMK2::UpdateSquadMarkers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCompassMK2", "UpdateSquadMarkers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCompassMK2.UpdateSquadMembers
// (Native, Public, BlueprintCallable)

void USQCompassMK2::UpdateSquadMembers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCompassMK2", "UpdateSquadMembers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCompassMK2.UpdateVisibility
// (Native, Public, BlueprintCallable)

void USQCompassMK2::UpdateVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCompassMK2", "UpdateVisibility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameCommandComponent.HandleVoteResult_Vote
// (Final, Native, Private, HasOutParams)
// Parameters:
// class USQVoteSession*                   VoteSession                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQChoice                        Winner                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USQGameCommandComponent::HandleVoteResult_Vote(class USQVoteSession* VoteSession, const struct FSQChoice& Winner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameCommandComponent", "HandleVoteResult_Vote");

	Params::SQGameCommandComponent_HandleVoteResult_Vote Parms{};

	Parms.VoteSession = VoteSession;
	Parms.Winner = std::move(Winner);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCompassPlayer.InitWidget
// (Native, Public, BlueprintCallable)

void USQCompassPlayer::InitWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCompassPlayer", "InitWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCompassPlayer.UpdateState
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InScale                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShowIcon                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HealthStateIndex                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsMedic                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsSL                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsOwnderMedic                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCompassPlayer::UpdateState(float InScale, bool bShowIcon, int32 HealthStateIndex, bool bIsMedic, bool bIsSL, bool bIsOwnderMedic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCompassPlayer", "UpdateState");

	Params::SQCompassPlayer_UpdateState Parms{};

	Parms.InScale = InScale;
	Parms.bShowIcon = bShowIcon;
	Parms.HealthStateIndex = HealthStateIndex;
	Parms.bIsMedic = bIsMedic;
	Parms.bIsSL = bIsSL;
	Parms.bIsOwnderMedic = bIsOwnderMedic;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameSession.GetLastLoginError
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ASQGameSession::GetLastLoginError()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSession", "GetLastLoginError");

	Params::SQGameSession_GetLastLoginError Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameSession.IsLoggedIn
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQGameSession::IsLoggedIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSession", "IsLoggedIn");

	Params::SQGameSession_IsLoggedIn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameSession.IsLoginBusy
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQGameSession::IsLoginBusy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSession", "IsLoginBusy");

	Params::SQGameSession_IsLoginBusy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameSession.Login
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           LoginName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InPassword                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQGameSession::Login(const class FString& LoginName, const class FString& InPassword)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSession", "Login");

	Params::SQGameSession_Login Parms{};

	Parms.LoginName = std::move(LoginName);
	Parms.InPassword = std::move(InPassword);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameSession.Logout
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQGameSession::Logout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSession", "Logout");

	Params::SQGameSession_Logout Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameSession.OnServerLicenseValidated
// (Final, Native, Protected)
// Parameters:
// bool                                    bIsValidLicense                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameSession::OnServerLicenseValidated(bool bIsValidLicense)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSession", "OnServerLicenseValidated");

	Params::SQGameSession_OnServerLicenseValidated Parms{};

	Parms.bIsValidLicense = bIsValidLicense;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameSession.SetMaxNumPlayers
// (Native, Public)
// Parameters:
// int32                                   NumPlayers                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIgnoreRestrictions                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameSession::SetMaxNumPlayers(int32 NumPlayers, bool bIgnoreRestrictions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSession", "SetMaxNumPlayers");

	Params::SQGameSession_SetMaxNumPlayers Parms{};

	Parms.NumPlayers = NumPlayers;
	Parms.bIgnoreRestrictions = bIgnoreRestrictions;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameSession.SetNumReservedSlots
// (Native, Public)
// Parameters:
// int32                                   NumReserved                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameSession::SetNumReservedSlots(int32 NumReserved)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSession", "SetNumReservedSlots");

	Params::SQGameSession_SetNumReservedSlots Parms{};

	Parms.NumReserved = NumReserved;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameSession.SetPublicQueueLimit
// (Native, Public)
// Parameters:
// int64                                   PublicQueueLimit                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameSession::SetPublicQueueLimit(int64 PublicQueueLimit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSession", "SetPublicQueueLimit");

	Params::SQGameSession_SetPublicQueueLimit Parms{};

	Parms.PublicQueueLimit = PublicQueueLimit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameSession.SetServerPassword
// (Native, Public)
// Parameters:
// class FString                           ServerPassword                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameSession::SetServerPassword(const class FString& ServerPassword)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSession", "SetServerPassword");

	Params::SQGameSession_SetServerPassword Parms{};

	Parms.ServerPassword = std::move(ServerPassword);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameSession.GetSquadConfig
// (Native, Public, Const)
// Parameters:
// class USQConfig*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQConfig* ASQGameSession::GetSquadConfig() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSession", "GetSquadConfig");

	Params::SQGameSession_GetSquadConfig Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCoreStateComponent.OnConnectionCreate
// (Final, Native, Private)
// Parameters:
// class USQCoreStateConnection*           Connection                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCoreStateComponent::OnConnectionCreate(class USQCoreStateConnection* Connection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateComponent", "OnConnectionCreate");

	Params::SQCoreStateComponent_OnConnectionCreate Parms{};

	Parms.Connection = Connection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCoreStateComponent.OnRep_DataObject
// (Final, Native, Private)
// Parameters:
// class USQCoreStateData*                 PrevDataObject                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCoreStateComponent::OnRep_DataObject(class USQCoreStateData* PrevDataObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateComponent", "OnRep_DataObject");

	Params::SQCoreStateComponent_OnRep_DataObject Parms{};

	Parms.PrevDataObject = PrevDataObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCoreStateComponent.ServerConfigure
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)

void USQCoreStateComponent::ServerConfigure()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateComponent", "ServerConfigure");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCoreStateComponent.ServerSetIsVisible
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// bool                                    bValue                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCoreStateComponent::ServerSetIsVisible(const bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateComponent", "ServerSetIsVisible");

	Params::SQCoreStateComponent_ServerSetIsVisible Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCoreStateComponent.GetId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FSQCoreStateId                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FSQCoreStateId USQCoreStateComponent::GetId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateComponent", "GetId");

	Params::SQCoreStateComponent_GetId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCoreStateConnection.OnComponentObtainedId
// (Final, Native, Private)
// Parameters:
// class USQCoreStateComponent*            Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCoreStateConnection::OnComponentObtainedId(class USQCoreStateComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateConnection", "OnComponentObtainedId");

	Params::SQCoreStateConnection_OnComponentObtainedId Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGraphVisualizerComponent.UpdateDesignLinks
// (Final, Native, Public, BlueprintCallable)

void USQGraphVisualizerComponent::UpdateDesignLinks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGraphVisualizerComponent", "UpdateDesignLinks");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGraphVisualizerComponent.Draw
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, Const)

void USQGraphVisualizerComponent::Draw() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGraphVisualizerComponent", "Draw");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGraphVisualizerComponent.DrawLink
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class USQGraphNodeComponent*            NodeA                                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQGraphNodeComponent*            NodeB                                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           LinkColor                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGraphVisualizerComponent::DrawLink(const class USQGraphNodeComponent* NodeA, const class USQGraphNodeComponent* NodeB, const struct FColor& LinkColor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGraphVisualizerComponent", "DrawLink");

	Params::SQGraphVisualizerComponent_DrawLink Parms{};

	Parms.NodeA = NodeA;
	Parms.NodeB = NodeB;
	Parms.LinkColor = std::move(LinkColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGraphVisualizerComponent.DrawNode
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class USQGraphNodeComponent*            Node                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           Color                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGraphVisualizerComponent::DrawNode(class USQGraphNodeComponent* Node, const struct FColor& Color) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGraphVisualizerComponent", "DrawNode");

	Params::SQGraphVisualizerComponent_DrawNode Parms{};

	Parms.Node = Node;
	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.EnumToString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EUpscaleMode                            InUpscaleMode                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQGameUserSettings::EnumToString(EUpscaleMode InUpscaleMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQGameUserSettings", "EnumToString");

	Params::SQGameUserSettings_EnumToString Parms{};

	Parms.InUpscaleMode = InUpscaleMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameUserSettings.GetFloatFromConfig
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           SectionName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CVar                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const float USQGameUserSettings::GetFloatFromConfig(const class FString& SectionName, int32 Level, const class FString& CVar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQGameUserSettings", "GetFloatFromConfig");

	Params::SQGameUserSettings_GetFloatFromConfig Parms{};

	Parms.SectionName = std::move(SectionName);
	Parms.Level = Level;
	Parms.CVar = std::move(CVar);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameUserSettings.GetInt32FromConfig
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           SectionName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           CVar                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const int32 USQGameUserSettings::GetInt32FromConfig(const class FString& SectionName, int32 Level, const class FString& CVar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQGameUserSettings", "GetInt32FromConfig");

	Params::SQGameUserSettings_GetInt32FromConfig Parms{};

	Parms.SectionName = std::move(SectionName);
	Parms.Level = Level;
	Parms.CVar = std::move(CVar);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameUserSettings.ReadFloatSetting
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSQFloatCVarSetting              InSetting                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQGameUserSettings::ReadFloatSetting(const struct FSQFloatCVarSetting& InSetting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQGameUserSettings", "ReadFloatSetting");

	Params::SQGameUserSettings_ReadFloatSetting Parms{};

	Parms.InSetting = std::move(InSetting);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameUserSettings.ReadIntSetting
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSQInt32CVarSetting              InSetting                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQGameUserSettings::ReadIntSetting(const struct FSQInt32CVarSetting& InSetting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQGameUserSettings", "ReadIntSetting");

	Params::SQGameUserSettings_ReadIntSetting Parms{};

	Parms.InSetting = std::move(InSetting);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameUserSettings.BenchmarkGraphicsSettings
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bApplyPostBenchmark                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::BenchmarkGraphicsSettings(bool bApplyPostBenchmark)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "BenchmarkGraphicsSettings");

	Params::SQGameUserSettings_BenchmarkGraphicsSettings Parms{};

	Parms.bApplyPostBenchmark = bApplyPostBenchmark;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.BlueprintApplySettings
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bCheckForCommandLineOverrides                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::BlueprintApplySettings(bool bCheckForCommandLineOverrides)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "BlueprintApplySettings");

	Params::SQGameUserSettings_BlueprintApplySettings Parms{};

	Parms.bCheckForCommandLineOverrides = bCheckForCommandLineOverrides;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.BlueprintGetBasicGraphicsSettings
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TArray<int32>                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<int32> USQGameUserSettings::BlueprintGetBasicGraphicsSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "BlueprintGetBasicGraphicsSettings");

	Params::SQGameUserSettings_BlueprintGetBasicGraphicsSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameUserSettings.BlueprintGetFullscreenMode
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQGameUserSettings::BlueprintGetFullscreenMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "BlueprintGetFullscreenMode");

	Params::SQGameUserSettings_BlueprintGetFullscreenMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameUserSettings.BlueprintGetScreenResolution
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FIntPoint                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntPoint USQGameUserSettings::BlueprintGetScreenResolution()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "BlueprintGetScreenResolution");

	Params::SQGameUserSettings_BlueprintGetScreenResolution Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameUserSettings.BlueprintGetVSync
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameUserSettings::BlueprintGetVSync()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "BlueprintGetVSync");

	Params::SQGameUserSettings_BlueprintGetVSync Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameUserSettings.BlueprintResetLocalAppdata
// (Native, Public, BlueprintCallable)

void USQGameUserSettings::BlueprintResetLocalAppdata()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "BlueprintResetLocalAppdata");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.BlueprintResetToCurrentSettings
// (Native, Public, BlueprintCallable)

void USQGameUserSettings::BlueprintResetToCurrentSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "BlueprintResetToCurrentSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.BlueprintSetFullscreenMode
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InFullscreenMode                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::BlueprintSetFullscreenMode(int32 InFullscreenMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "BlueprintSetFullscreenMode");

	Params::SQGameUserSettings_BlueprintSetFullscreenMode Parms{};

	Parms.InFullscreenMode = InFullscreenMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.BlueprintSetGameToDefaults
// (Native, Public, BlueprintCallable)

void USQGameUserSettings::BlueprintSetGameToDefaults()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "BlueprintSetGameToDefaults");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.BlueprintSetGraphicsToDefaults
// (Native, Public, BlueprintCallable)

void USQGameUserSettings::BlueprintSetGraphicsToDefaults()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "BlueprintSetGraphicsToDefaults");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.BlueprintSetKeysToDefaults
// (Native, Public, BlueprintCallable)

void USQGameUserSettings::BlueprintSetKeysToDefaults()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "BlueprintSetKeysToDefaults");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.BlueprintSetPoolSize
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InTextureQuality                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::BlueprintSetPoolSize(int32 InTextureQuality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "BlueprintSetPoolSize");

	Params::SQGameUserSettings_BlueprintSetPoolSize Parms{};

	Parms.InTextureQuality = InTextureQuality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.BlueprintSetScreenResolution
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FIntPoint                        Resolution                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::BlueprintSetScreenResolution(const struct FIntPoint& Resolution)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "BlueprintSetScreenResolution");

	Params::SQGameUserSettings_BlueprintSetScreenResolution Parms{};

	Parms.Resolution = std::move(Resolution);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.BlueprintSetSoundsToDefaults
// (Native, Public, BlueprintCallable)

void USQGameUserSettings::BlueprintSetSoundsToDefaults()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "BlueprintSetSoundsToDefaults");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.BlueprintSetToDefaults
// (Native, Public, BlueprintCallable)

void USQGameUserSettings::BlueprintSetToDefaults()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "BlueprintSetToDefaults");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.BlueprintSetVSync
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::BlueprintSetVSync(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "BlueprintSetVSync");

	Params::SQGameUserSettings_BlueprintSetVSync Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.ChangeFloatSetting
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSQFloatCVarSetting              InSetting                                              (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::ChangeFloatSetting(struct FSQFloatCVarSetting& InSetting, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "ChangeFloatSetting");

	Params::SQGameUserSettings_ChangeFloatSetting Parms{};

	Parms.InSetting = std::move(InSetting);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InSetting = std::move(Parms.InSetting);
}


// Function Squad.SQGameUserSettings.ChangeIntSetting
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSQInt32CVarSetting              InSetting                                              (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::ChangeIntSetting(struct FSQInt32CVarSetting& InSetting, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "ChangeIntSetting");

	Params::SQGameUserSettings_ChangeIntSetting Parms{};

	Parms.InSetting = std::move(InSetting);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InSetting = std::move(Parms.InSetting);
}


// Function Squad.SQGameUserSettings.ChangeSetting
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSQCVarSetting                   InSetting                                              (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::ChangeSetting(struct FSQCVarSetting& InSetting, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "ChangeSetting");

	Params::SQGameUserSettings_ChangeSetting Parms{};

	Parms.InSetting = std::move(InSetting);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	InSetting = std::move(Parms.InSetting);
}


// Function Squad.SQGameUserSettings.ChangeSettingOfName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             CVarSettingName                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::ChangeSettingOfName(const class FName& CVarSettingName, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "ChangeSettingOfName");

	Params::SQGameUserSettings_ChangeSettingOfName Parms{};

	Parms.CVarSettingName = CVarSettingName;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.DeleteKeybindsBackup
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameUserSettings::DeleteKeybindsBackup(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "DeleteKeybindsBackup");

	Params::SQGameUserSettings_DeleteKeybindsBackup Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameUserSettings.GetActiveAudioInputDevice
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           OutCurrentDevice                                       (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::GetActiveAudioInputDevice(class FString* OutCurrentDevice)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "GetActiveAudioInputDevice");

	Params::SQGameUserSettings_GetActiveAudioInputDevice Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutCurrentDevice != nullptr)
		*OutCurrentDevice = std::move(Parms.OutCurrentDevice);
}


// Function Squad.SQGameUserSettings.GetAvailableAudioOutputDevice
// (Final, Native, Private, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   OutAvailableDevice                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           OutCurrentDevice                                       (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::GetAvailableAudioOutputDevice(TArray<class FString>* OutAvailableDevice, class FString* OutCurrentDevice)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "GetAvailableAudioOutputDevice");

	Params::SQGameUserSettings_GetAvailableAudioOutputDevice Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAvailableDevice != nullptr)
		*OutAvailableDevice = std::move(Parms.OutAvailableDevice);

	if (OutCurrentDevice != nullptr)
		*OutCurrentDevice = std::move(Parms.OutCurrentDevice);
}


// Function Squad.SQGameUserSettings.GetEmoteAtIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class USQEmotesData>     ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class USQEmotesData> USQGameUserSettings::GetEmoteAtIndex(int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "GetEmoteAtIndex");

	Params::SQGameUserSettings_GetEmoteAtIndex Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameUserSettings.GetJoyConfig
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESQJoyStickControls                     Control                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSQJoyStickConfig          ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FSQJoyStickConfig USQGameUserSettings::GetJoyConfig(ESQJoyStickControls Control)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "GetJoyConfig");

	Params::SQGameUserSettings_GetJoyConfig Parms{};

	Parms.Control = Control;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameUserSettings.GetQualityFromLastBenchmark
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQGameUserSettings::GetQualityFromLastBenchmark()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "GetQualityFromLastBenchmark");

	Params::SQGameUserSettings_GetQualityFromLastBenchmark Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameUserSettings.GetTexturePoolSize
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQGameUserSettings::GetTexturePoolSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "GetTexturePoolSize");

	Params::SQGameUserSettings_GetTexturePoolSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameUserSettings.GetTexturePoolUsage
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQGameUserSettings::GetTexturePoolUsage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "GetTexturePoolUsage");

	Params::SQGameUserSettings_GetTexturePoolUsage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameUserSettings.GetTotalVRAMCapacity
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQGameUserSettings::GetTotalVRAMCapacity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "GetTotalVRAMCapacity");

	Params::SQGameUserSettings_GetTotalVRAMCapacity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameUserSettings.GetUpscaleMode
// (Native, Public, BlueprintCallable)
// Parameters:
// EUpscaleMode                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUpscaleMode USQGameUserSettings::GetUpscaleMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "GetUpscaleMode");

	Params::SQGameUserSettings_GetUpscaleMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameUserSettings.IsDLSSGFeatureEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameUserSettings::IsDLSSGFeatureEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "IsDLSSGFeatureEnabled");

	Params::SQGameUserSettings_IsDLSSGFeatureEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameUserSettings.IsSteamItemEnabled
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ItemId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameUserSettings::IsSteamItemEnabled(int32 ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "IsSteamItemEnabled");

	Params::SQGameUserSettings_IsSteamItemEnabled Parms{};

	Parms.ItemId = ItemId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameUserSettings.IsUsingCustomSettings
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameUserSettings::IsUsingCustomSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "IsUsingCustomSettings");

	Params::SQGameUserSettings_IsUsingCustomSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameUserSettings.LoadBackupKeyBinds
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameUserSettings::LoadBackupKeyBinds(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "LoadBackupKeyBinds");

	Params::SQGameUserSettings_LoadBackupKeyBinds Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameUserSettings.OverrideTemporalFrameWeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOverride                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::OverrideTemporalFrameWeight(float Value, bool bOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "OverrideTemporalFrameWeight");

	Params::SQGameUserSettings_OverrideTemporalFrameWeight Parms{};

	Parms.Value = Value;
	Parms.bOverride = bOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.ReadCVarSetting
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             CVarSettingName                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class FString USQGameUserSettings::ReadCVarSetting(const class FName& CVarSettingName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "ReadCVarSetting");

	Params::SQGameUserSettings_ReadCVarSetting Parms{};

	Parms.CVarSettingName = CVarSettingName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameUserSettings.SaveBackupKeyBinds
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameUserSettings::SaveBackupKeyBinds(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "SaveBackupKeyBinds");

	Params::SQGameUserSettings_SaveBackupKeyBinds Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameUserSettings.SetActiveAudioInputDevice
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           InDevice                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::SetActiveAudioInputDevice(const class FString& InDevice)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "SetActiveAudioInputDevice");

	Params::SQGameUserSettings_SetActiveAudioInputDevice Parms{};

	Parms.InDevice = std::move(InDevice);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.SetActiveAudioOutputDevice
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// class FString                           InDevice                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::SetActiveAudioOutputDevice(const class FString& InDevice)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "SetActiveAudioOutputDevice");

	Params::SQGameUserSettings_SetActiveAudioOutputDevice Parms{};

	Parms.InDevice = std::move(InDevice);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.SetDLSSFrameGenerationMode
// (Native, Public, BlueprintCallable)
// Parameters:
// EUStreamlineDLSSGMode                   DLSSGMode                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::SetDLSSFrameGenerationMode(EUStreamlineDLSSGMode DLSSGMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "SetDLSSFrameGenerationMode");

	Params::SQGameUserSettings_SetDLSSFrameGenerationMode Parms{};

	Parms.DLSSGMode = DLSSGMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.SetDLSSMode
// (Native, Public, BlueprintCallable)
// Parameters:
// EUDLSSMode                              Param_DLSSMode                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::SetDLSSMode(EUDLSSMode Param_DLSSMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "SetDLSSMode");

	Params::SQGameUserSettings_SetDLSSMode Parms{};

	Parms.Param_DLSSMode = Param_DLSSMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.SetDLSSSharpness
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   Sharpness                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::SetDLSSSharpness(float Sharpness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "SetDLSSSharpness");

	Params::SQGameUserSettings_SetDLSSSharpness Parms{};

	Parms.Sharpness = Sharpness;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.SetEffectsQuality
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Param_EffectsQuality                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::SetEffectsQuality(int32 Param_EffectsQuality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "SetEffectsQuality");

	Params::SQGameUserSettings_SetEffectsQuality Parms{};

	Parms.Param_EffectsQuality = Param_EffectsQuality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.SetGraphicsQuality
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InGraphicsQuality                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::SetGraphicsQuality(int32 InGraphicsQuality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "SetGraphicsQuality");

	Params::SQGameUserSettings_SetGraphicsQuality Parms{};

	Parms.InGraphicsQuality = InGraphicsQuality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.SetGraphicsSliderValues
// (Final, Native, Public, BlueprintCallable)

void USQGameUserSettings::SetGraphicsSliderValues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "SetGraphicsSliderValues");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.SetJoyConfig
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESQJoyStickControls                     Control                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQJoyStickConfig                Config                                                 (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)

void USQGameUserSettings::SetJoyConfig(const ESQJoyStickControls Control, const struct FSQJoyStickConfig& Config)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "SetJoyConfig");

	Params::SQGameUserSettings_SetJoyConfig Parms{};

	Parms.Control = Control;
	Parms.Config = std::move(Config);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.SetMenuFrameRateLimit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewLimit                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::SetMenuFrameRateLimit(float NewLimit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "SetMenuFrameRateLimit");

	Params::SQGameUserSettings_SetMenuFrameRateLimit Parms{};

	Parms.NewLimit = NewLimit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.SetPostProcessQuality
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InPostProcessQuality                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::SetPostProcessQuality(int32 InPostProcessQuality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "SetPostProcessQuality");

	Params::SQGameUserSettings_SetPostProcessQuality Parms{};

	Parms.InPostProcessQuality = InPostProcessQuality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.SetReflexMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUStreamlineReflexMode                  InReflexMode                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::SetReflexMode(EUStreamlineReflexMode InReflexMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "SetReflexMode");

	Params::SQGameUserSettings_SetReflexMode Parms{};

	Parms.InReflexMode = InReflexMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.SetResolutionQuality
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Param_ResolutionQuality                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::SetResolutionQuality(int32 Param_ResolutionQuality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "SetResolutionQuality");

	Params::SQGameUserSettings_SetResolutionQuality Parms{};

	Parms.Param_ResolutionQuality = Param_ResolutionQuality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.SetScopeClarity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::SetScopeClarity(const int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "SetScopeClarity");

	Params::SQGameUserSettings_SetScopeClarity Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.SetScopeResolutionScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::SetScopeResolutionScale(const float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "SetScopeResolutionScale");

	Params::SQGameUserSettings_SetScopeResolutionScale Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.SetScopeUpdateRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::SetScopeUpdateRate(const int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "SetScopeUpdateRate");

	Params::SQGameUserSettings_SetScopeUpdateRate Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.SetSteamItemEnabled
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ItemId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::SetSteamItemEnabled(int32 ItemId, bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "SetSteamItemEnabled");

	Params::SQGameUserSettings_SetSteamItemEnabled Parms{};

	Parms.ItemId = ItemId;
	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.SetUpscaleMode
// (Native, Public, BlueprintCallable)
// Parameters:
// EUpscaleMode                            InUpscaleMode                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::SetUpscaleMode(const EUpscaleMode InUpscaleMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "SetUpscaleMode");

	Params::SQGameUserSettings_SetUpscaleMode Parms{};

	Parms.InUpscaleMode = InUpscaleMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.SetUseDX12
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bUse                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::SetUseDX12(bool bUse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "SetUseDX12");

	Params::SQGameUserSettings_SetUseDX12 Parms{};

	Parms.bUse = bUse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.SetXeSSQuality
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InXeSSQuality                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::SetXeSSQuality(const int32 InXeSSQuality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "SetXeSSQuality");

	Params::SQGameUserSettings_SetXeSSQuality Parms{};

	Parms.InXeSSQuality = InXeSSQuality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.ToggleAntiAliasingMode
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::ToggleAntiAliasingMode(const bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "ToggleAntiAliasingMode");

	Params::SQGameUserSettings_ToggleAntiAliasingMode Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.ToggleDLSSDependantSettings
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bDLSSEnabled                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::ToggleDLSSDependantSettings(bool bDLSSEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "ToggleDLSSDependantSettings");

	Params::SQGameUserSettings_ToggleDLSSDependantSettings Parms{};

	Parms.bDLSSEnabled = bDLSSEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.ToggleFSR2
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::ToggleFSR2(const bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "ToggleFSR2");

	Params::SQGameUserSettings_ToggleFSR2 Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.ToggleStreamerModeEnabledForLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESQStreamerModeLevel                    Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::ToggleStreamerModeEnabledForLevel(ESQStreamerModeLevel Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "ToggleStreamerModeEnabledForLevel");

	Params::SQGameUserSettings_ToggleStreamerModeEnabledForLevel Parms{};

	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.ToggleXeSS
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameUserSettings::ToggleXeSS(const bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "ToggleXeSS");

	Params::SQGameUserSettings_ToggleXeSS Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameUserSettings.GetIsUsingDX12
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameUserSettings::GetIsUsingDX12() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "GetIsUsingDX12");

	Params::SQGameUserSettings_GetIsUsingDX12 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameUserSettings.GetMenuFrameRateLimit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQGameUserSettings::GetMenuFrameRateLimit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "GetMenuFrameRateLimit");

	Params::SQGameUserSettings_GetMenuFrameRateLimit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameUserSettings.GetStreamerModeEnabledForLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESQStreamerModeLevel                    Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameUserSettings::GetStreamerModeEnabledForLevel(ESQStreamerModeLevel Level) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "GetStreamerModeEnabledForLevel");

	Params::SQGameUserSettings_GetStreamerModeEnabledForLevel Parms{};

	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameUserSettings.GetWeaponModelBlurDisabled
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameUserSettings::GetWeaponModelBlurDisabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "GetWeaponModelBlurDisabled");

	Params::SQGameUserSettings_GetWeaponModelBlurDisabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameUserSettings.IsServerFiltersDefault
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameUserSettings::IsServerFiltersDefault() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "IsServerFiltersDefault");

	Params::SQGameUserSettings_IsServerFiltersDefault Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameUserSettings.ProcessBenchmarkScore
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   LastBenchmarkScore                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           Thresholds                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQGameUserSettings::ProcessBenchmarkScore(const int32 LastBenchmarkScore, const TArray<int32>& Thresholds) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "ProcessBenchmarkScore");

	Params::SQGameUserSettings_ProcessBenchmarkScore Parms{};

	Parms.LastBenchmarkScore = LastBenchmarkScore;
	Parms.Thresholds = std::move(Thresholds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameUserSettings.UpdateQualityBasedOnGraphicsQuality
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   InBaseQuality                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InGraphicsQuality                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQGameUserSettings::UpdateQualityBasedOnGraphicsQuality(const int32 InBaseQuality, const int32 InGraphicsQuality) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameUserSettings", "UpdateQualityBasedOnGraphicsQuality");

	Params::SQGameUserSettings_UpdateQualityBasedOnGraphicsQuality Parms{};

	Parms.InBaseQuality = InBaseQuality;
	Parms.InGraphicsQuality = InGraphicsQuality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCoreStateData.OnListenerCreate
// (Final, Native, Private)
// Parameters:
// class USQCoreStateListener*             Listener                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCoreStateData::OnListenerCreate(class USQCoreStateListener* Listener)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateData", "OnListenerCreate");

	Params::SQCoreStateData_OnListenerCreate Parms{};

	Parms.Listener = Listener;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCoreStateData.OnWorldCleanup
// (Final, Native, Private)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSessionEnded                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCleanupResources                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCoreStateData::OnWorldCleanup(class UWorld* World, bool bSessionEnded, bool bCleanupResources)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateData", "OnWorldCleanup");

	Params::SQCoreStateData_OnWorldCleanup Parms{};

	Parms.World = World;
	Parms.bSessionEnded = bSessionEnded;
	Parms.bCleanupResources = bCleanupResources;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameSpawn.BP_OnActivatedTimeStampChanged
// (Event, Public, BlueprintEvent)

void ASQGameSpawn::BP_OnActivatedTimeStampChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSpawn", "BP_OnActivatedTimeStampChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQGameSpawn.BP_OnSiegedStateChanged
// (Event, Public, BlueprintEvent)

void ASQGameSpawn::BP_OnSiegedStateChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSpawn", "BP_OnSiegedStateChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQGameSpawn.ClearActivatingTimestamp
// (Final, Native, Public, BlueprintCallable)

void ASQGameSpawn::ClearActivatingTimestamp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSpawn", "ClearActivatingTimestamp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameSpawn.GetRespawnDelay
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQGameSpawn::GetRespawnDelay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSpawn", "GetRespawnDelay");

	Params::SQGameSpawn_GetRespawnDelay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameSpawn.GetSpawnActor
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* ASQGameSpawn::GetSpawnActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSpawn", "GetSpawnActor");

	Params::SQGameSpawn_GetSpawnActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameSpawn.GetValidSpawnLocation
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UClass*                           DefaultPawnClass                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ASQGameSpawn::GetValidSpawnLocation(class UClass* DefaultPawnClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSpawn", "GetValidSpawnLocation");

	Params::SQGameSpawn_GetValidSpawnLocation Parms{};

	Parms.DefaultPawnClass = DefaultPawnClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameSpawn.GetValidSpawnLocations
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FVector>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVector> ASQGameSpawn::GetValidSpawnLocations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSpawn", "GetValidSpawnLocations");

	Params::SQGameSpawn_GetValidSpawnLocations Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameSpawn.OnActivatedTimestampReached
// (Final, Native, Private)

void ASQGameSpawn::OnActivatedTimestampReached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSpawn", "OnActivatedTimestampReached");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameSpawn.OnRep_ActivatedTimeStamp
// (Native, Public)

void ASQGameSpawn::OnRep_ActivatedTimeStamp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSpawn", "OnRep_ActivatedTimeStamp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameSpawn.OnRep_HasValidSpawnLocation
// (Native, Public)

void ASQGameSpawn::OnRep_HasValidSpawnLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSpawn", "OnRep_HasValidSpawnLocation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameSpawn.OnRep_Sieged
// (Native, Public)

void ASQGameSpawn::OnRep_Sieged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSpawn", "OnRep_Sieged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameSpawn.OnRep_SpawningEnabled
// (Native, Public)

void ASQGameSpawn::OnRep_SpawningEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSpawn", "OnRep_SpawningEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameSpawn.OnRep_Team
// (Native, Public)

void ASQGameSpawn::OnRep_Team()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSpawn", "OnRep_Team");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameSpawn.SetActivatedTimeStamp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameSpawn::SetActivatedTimeStamp(const float Value, bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSpawn", "SetActivatedTimeStamp");

	Params::SQGameSpawn_SetActivatedTimeStamp Parms{};

	Parms.Value = Value;
	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameSpawn.SetRespawnIncrease
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameSpawn::SetRespawnIncrease(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSpawn", "SetRespawnIncrease");

	Params::SQGameSpawn_SetRespawnIncrease Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameSpawn.SetSieged
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameSpawn::SetSieged(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSpawn", "SetSieged");

	Params::SQGameSpawn_SetSieged Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameSpawn.SetSpawningEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameSpawn::SetSpawningEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSpawn", "SetSpawningEnabled");

	Params::SQGameSpawn_SetSpawningEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameSpawn.SetTeam
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESQTeam                                 Param_Team                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameSpawn::SetTeam(ESQTeam Param_Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSpawn", "SetTeam");

	Params::SQGameSpawn_SetTeam Parms{};

	Parms.Param_Team = Param_Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameSpawn.CanSpawn
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQGameSpawn::CanSpawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSpawn", "CanSpawn");

	Params::SQGameSpawn_CanSpawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameSpawn.GetActivatedState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQGameSpawn::GetActivatedState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSpawn", "GetActivatedState");

	Params::SQGameSpawn_GetActivatedState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameSpawn.GetActivatedTimeStamp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQGameSpawn::GetActivatedTimeStamp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSpawn", "GetActivatedTimeStamp");

	Params::SQGameSpawn_GetActivatedTimeStamp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameSpawn.GetRemainingActivatingTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQGameSpawn::GetRemainingActivatingTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSpawn", "GetRemainingActivatingTime");

	Params::SQGameSpawn_GetRemainingActivatingTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameSpawn.GetRespawnIncrease
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQGameSpawn::GetRespawnIncrease() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSpawn", "GetRespawnIncrease");

	Params::SQGameSpawn_GetRespawnIncrease Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameSpawn.GetSieged
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQGameSpawn::GetSieged() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSpawn", "GetSieged");

	Params::SQGameSpawn_GetSieged Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameSpawn.GetSpawningEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQGameSpawn::GetSpawningEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSpawn", "GetSpawningEnabled");

	Params::SQGameSpawn_GetSpawningEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameSpawn.GetSpawnPointType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESQSpawnPointType                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESQSpawnPointType ASQGameSpawn::GetSpawnPointType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSpawn", "GetSpawnPointType");

	Params::SQGameSpawn_GetSpawnPointType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameSpawn.GetTeam
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESQTeam                                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESQTeam ASQGameSpawn::GetTeam() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSpawn", "GetTeam");

	Params::SQGameSpawn_GetTeam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameSpawn.GetWaveIntervalTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQGameSpawn::GetWaveIntervalTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSpawn", "GetWaveIntervalTime");

	Params::SQGameSpawn_GetWaveIntervalTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameSpawn.GetWaveSpawnStartTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQGameSpawn::GetWaveSpawnStartTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSpawn", "GetWaveSpawnStartTime");

	Params::SQGameSpawn_GetWaveSpawnStartTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameSpawn.GetWaveTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQGameSpawn::GetWaveTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSpawn", "GetWaveTime");

	Params::SQGameSpawn_GetWaveTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameSpawn.HasValidSpawnLocation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQGameSpawn::HasValidSpawnLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSpawn", "HasValidSpawnLocation");

	Params::SQGameSpawn_HasValidSpawnLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameRallyPoint.GetNumberOfSpawns
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQGameRallyPoint::GetNumberOfSpawns() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameRallyPoint", "GetNumberOfSpawns");

	Params::SQGameRallyPoint_GetNumberOfSpawns Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCoreStateListener.OnDataCreate
// (Final, Native, Private)
// Parameters:
// class USQCoreStateData*                 Data                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCoreStateListener::OnDataCreate(class USQCoreStateData* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateListener", "OnDataCreate");

	Params::SQCoreStateListener_OnDataCreate Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCoreStateListener.RefreshVisbility
// (Final, Native, Private)
// Parameters:
// class APlayerController*                PC                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCoreStateListener::RefreshVisbility(const class APlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateListener", "RefreshVisbility");

	Params::SQCoreStateListener_RefreshVisbility Parms{};

	Parms.PC = PC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCoreStateWidgetFactory.ReceiveSelection
// (Native, Protected, HasOutParams, Const)
// Parameters:
// struct FSQCoreStateId                   ComponentId                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQSelectionState                       SelectionState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          SelectionInstigator                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCoreStateWidgetFactory::ReceiveSelection(const struct FSQCoreStateId& ComponentId, ESQSelectionState SelectionState, const class UObject* SelectionInstigator) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateWidgetFactory", "ReceiveSelection");

	Params::SQCoreStateWidgetFactory_ReceiveSelection Parms{};

	Parms.ComponentId = std::move(ComponentId);
	Parms.SelectionState = SelectionState;
	Parms.SelectionInstigator = SelectionInstigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCoreStateWidgetFactory.UnselectAll
// (Native, Protected, Const)
// Parameters:
// class UObject*                          SelectionInstigator                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCoreStateWidgetFactory::UnselectAll(const class UObject* SelectionInstigator) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateWidgetFactory", "UnselectAll");

	Params::SQCoreStateWidgetFactory_UnselectAll Parms{};

	Parms.SelectionInstigator = SelectionInstigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGraphInitializerComponent.PopulateGraph
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USQGraphInitializerComponent::PopulateGraph()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGraphInitializerComponent", "PopulateGraph");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGraphInitializerComponent.UpdateDesignLinks
// (Final, Native, Public, BlueprintCallable)

void USQGraphInitializerComponent::UpdateDesignLinks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGraphInitializerComponent", "UpdateDesignLinks");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCoreStateMapComponent.SetRootWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPanelWidget*                     Value                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCoreStateMapComponent::SetRootWidget(class UPanelWidget* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateMapComponent", "SetRootWidget");

	Params::SQCoreStateMapComponent_SetRootWidget Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCoreStateMapComponent.SetWidgetScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   UniformScale                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCoreStateMapComponent::SetWidgetScale(float UniformScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateMapComponent", "SetWidgetScale");

	Params::SQCoreStateMapComponent_SetWidgetScale Parms{};

	Parms.UniformScale = UniformScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCoreStateMapComponent.GetOrderTargetWidgets
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<int32, struct FSQCoreStateId>ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<int32, struct FSQCoreStateId> USQCoreStateMapComponent::GetOrderTargetWidgets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateMapComponent", "GetOrderTargetWidgets");

	Params::SQCoreStateMapComponent_GetOrderTargetWidgets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCoreStateMapComponent.GetWaypointFTWidgets
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<int32, struct FSQCoreStateId>ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<int32, struct FSQCoreStateId> USQCoreStateMapComponent::GetWaypointFTWidgets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateMapComponent", "GetWaypointFTWidgets");

	Params::SQCoreStateMapComponent_GetWaypointFTWidgets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCoreStateMapComponent.GetWaypointWidgets
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<int32, struct FSQCoreStateId>ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<int32, struct FSQCoreStateId> USQCoreStateMapComponent::GetWaypointWidgets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateMapComponent", "GetWaypointWidgets");

	Params::SQCoreStateMapComponent_GetWaypointWidgets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCoreStateMapComponent.GetWidgetScreenPosition
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        OutPosition                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQCoreStateId                   ID                                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQCoreStateMapComponent::GetWidgetScreenPosition(struct FVector2D* OutPosition, const struct FSQCoreStateId& ID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateMapComponent", "GetWidgetScreenPosition");

	Params::SQCoreStateMapComponent_GetWidgetScreenPosition Parms{};

	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPosition != nullptr)
		*OutPosition = std::move(Parms.OutPosition);

	return Parms.ReturnValue;
}


// Function Squad.SQCoreStateMapComponent.GetWidgetWorldLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          OutWorldLocation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQCoreStateId                   ID                                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQCoreStateMapComponent::GetWidgetWorldLocation(struct FVector* OutWorldLocation, const struct FSQCoreStateId& ID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateMapComponent", "GetWidgetWorldLocation");

	Params::SQCoreStateMapComponent_GetWidgetWorldLocation Parms{};

	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutWorldLocation != nullptr)
		*OutWorldLocation = std::move(Parms.OutWorldLocation);

	return Parms.ReturnValue;
}


// Function Squad.SQGrenade.BlueprintOnGrenadeStateChanged
// (Event, Protected, BlueprintEvent)

void ASQGrenade::BlueprintOnGrenadeStateChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGrenade", "BlueprintOnGrenadeStateChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQGrenade.GetAimDirection
// (Native, Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator ASQGrenade::GetAimDirection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGrenade", "GetAimDirection");

	Params::SQGrenade_GetAimDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGrenade.GetAimLocation
// (Native, Event, Protected, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ASQGrenade::GetAimLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGrenade", "GetAimLocation");

	Params::SQGrenade_GetAimLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGrenade.OnRep_GrenadeState
// (Final, Native, Protected)

void ASQGrenade::OnRep_GrenadeState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGrenade", "OnRep_GrenadeState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGrenade.ServerPrepareThrow
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// bool                                    bOverhand                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGrenade::ServerPrepareThrow(bool bOverhand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGrenade", "ServerPrepareThrow");

	Params::SQGrenade_ServerPrepareThrow Parms{};

	Parms.bOverhand = bOverhand;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGrenade.ServerReleaseThrow
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// bool                                    bOverhand                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGrenade::ServerReleaseThrow(bool bOverhand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGrenade", "ServerReleaseThrow");

	Params::SQGrenade_ServerReleaseThrow Parms{};

	Parms.bOverhand = bOverhand;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGrenade.ServerSpawnGrenade
// (Net, NetReliable, Native, Event, Protected, NetServer, HasDefaults, NetValidate)
// Parameters:
// struct FVector                          SpawnLocationZeroBased                                 (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGrenade::ServerSpawnGrenade(const struct FVector& SpawnLocationZeroBased)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGrenade", "ServerSpawnGrenade");

	Params::SQGrenade_ServerSpawnGrenade Parms{};

	Parms.SpawnLocationZeroBased = std::move(SpawnLocationZeroBased);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGrenade.UpdateOverhandPinpull
// (Final, Native, Protected, BlueprintCallable)

void ASQGrenade::UpdateOverhandPinpull()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGrenade", "UpdateOverhandPinpull");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGrenade.UpdateOverhandThrow
// (Final, Native, Protected, BlueprintCallable)

void ASQGrenade::UpdateOverhandThrow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGrenade", "UpdateOverhandThrow");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGrenade.UpdateReloading
// (Final, Native, Protected, BlueprintCallable)

void ASQGrenade::UpdateReloading()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGrenade", "UpdateReloading");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGrenade.UpdateUnderhandPinpull
// (Final, Native, Protected, BlueprintCallable)

void ASQGrenade::UpdateUnderhandPinpull()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGrenade", "UpdateUnderhandPinpull");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGrenade.UpdateUnderhandThrow
// (Final, Native, Protected, BlueprintCallable)

void ASQGrenade::UpdateUnderhandThrow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGrenade", "UpdateUnderhandThrow");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGrenade.GetGrenadeStaticInfo
// (Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQGrenadeStaticInfo*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQGrenadeStaticInfo* ASQGrenade::GetGrenadeStaticInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGrenade", "GetGrenadeStaticInfo");

	Params::SQGrenade_GetGrenadeStaticInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGrenade.GetOwnerSoldier
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQSoldier*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQSoldier* ASQGrenade::GetOwnerSoldier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGrenade", "GetOwnerSoldier");

	Params::SQGrenade_GetOwnerSoldier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.RouteSelectorPredicate.Execute
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// TArray<class USQGraphNodeComponent*>    LinksLeft                                              (Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<class USQGraphNodeComponent*>    ChosenLinks                                            (Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FRandomStream                    RandStream                                             (Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URouteSelectorPredicate::Execute(TArray<class USQGraphNodeComponent*>& LinksLeft, TArray<class USQGraphNodeComponent*>& ChosenLinks, struct FRandomStream& RandStream)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RouteSelectorPredicate", "Execute");

	Params::RouteSelectorPredicate_Execute Parms{};

	Parms.LinksLeft = std::move(LinksLeft);
	Parms.ChosenLinks = std::move(ChosenLinks);
	Parms.RandStream = std::move(RandStream);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	LinksLeft = std::move(Parms.LinksLeft);
	ChosenLinks = std::move(Parms.ChosenLinks);
	RandStream = std::move(Parms.RandStream);

	return Parms.ReturnValue;
}


// Function Squad.SQCoreStateSquadListComponent.SetRootWidgets
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPanelWidget*                     InSquadRoot                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPanelWidget*                     InUnassignedRoot                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPanelWidget*                     InCommanderRoot                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCoreStateSquadListComponent::SetRootWidgets(class UPanelWidget* InSquadRoot, class UPanelWidget* InUnassignedRoot, class UPanelWidget* InCommanderRoot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSquadListComponent", "SetRootWidgets");

	Params::SQCoreStateSquadListComponent_SetRootWidgets Parms{};

	Parms.InSquadRoot = InSquadRoot;
	Parms.InUnassignedRoot = InUnassignedRoot;
	Parms.InCommanderRoot = InCommanderRoot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGenericPunchSubsystem.AddGenericCameraPunch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FSQGenericPunchInput             CameraRotationData                                     (Parm, NativeAccessSpecifierPublic)
// struct FSQGenericPunchInput             CameraLocationData                                     (Parm, NativeAccessSpecifierPublic)

void USQGenericPunchSubsystem::AddGenericCameraPunch(const struct FSQGenericPunchInput& CameraRotationData, const struct FSQGenericPunchInput& CameraLocationData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGenericPunchSubsystem", "AddGenericCameraPunch");

	Params::SQGenericPunchSubsystem_AddGenericCameraPunch Parms{};

	Parms.CameraRotationData = std::move(CameraRotationData);
	Parms.CameraLocationData = std::move(CameraLocationData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGenericPunchSubsystem.AddGenericWeaponPunch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FSQGenericPunchInput             WeaponSwayData                                         (Parm, NativeAccessSpecifierPublic)
// struct FSQGenericPunchInput             WeaponAlignmentData                                    (Parm, NativeAccessSpecifierPublic)
// struct FSQGenericPunchInput             WeaponLocationData                                     (Parm, NativeAccessSpecifierPublic)

void USQGenericPunchSubsystem::AddGenericWeaponPunch(const struct FSQGenericPunchInput& WeaponSwayData, const struct FSQGenericPunchInput& WeaponAlignmentData, const struct FSQGenericPunchInput& WeaponLocationData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGenericPunchSubsystem", "AddGenericWeaponPunch");

	Params::SQGenericPunchSubsystem_AddGenericWeaponPunch Parms{};

	Parms.WeaponSwayData = std::move(WeaponSwayData);
	Parms.WeaponAlignmentData = std::move(WeaponAlignmentData);
	Parms.WeaponLocationData = std::move(WeaponLocationData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGenericPunchSubsystem.ResumePausedPunch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             PunchID                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGenericPunchSubsystem::ResumePausedPunch(const class FName PunchID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGenericPunchSubsystem", "ResumePausedPunch");

	Params::SQGenericPunchSubsystem_ResumePausedPunch Parms{};

	Parms.PunchID = PunchID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGenericPunchSubsystem.PunchExistsByID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             PunchID                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGenericPunchSubsystem::PunchExistsByID(const class FName PunchID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGenericPunchSubsystem", "PunchExistsByID");

	Params::SQGenericPunchSubsystem_PunchExistsByID Parms{};

	Parms.PunchID = PunchID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCoreStateSelectionHUB.UnselectAll
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class UObject*                          SelectionInstigator                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCoreStateSelectionHUB::UnselectAll(const class UObject* SelectionInstigator) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSelectionHUB", "UnselectAll");

	Params::SQCoreStateSelectionHUB_UnselectAll Parms{};

	Parms.SelectionInstigator = SelectionInstigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCoreStateSpawnPointsListComponent.SetRootWidgets
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGridPanel*                       InBaseRoot                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGridPanel*                       InHABRoot                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGridPanel*                       InRallyRoot                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCoreStateSpawnPointsListComponent::SetRootWidgets(class UGridPanel* InBaseRoot, class UGridPanel* InHABRoot, class UGridPanel* InRallyRoot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSpawnPointsListComponent", "SetRootWidgets");

	Params::SQCoreStateSpawnPointsListComponent_SetRootWidgets Parms{};

	Parms.InBaseRoot = InBaseRoot;
	Parms.InHABRoot = InHABRoot;
	Parms.InRallyRoot = InRallyRoot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCoreStateSpawnPointsListWidget.OnActivatedTimeStampChanged
// (Event, Protected, BlueprintEvent)

void USQCoreStateSpawnPointsListWidget::OnActivatedTimeStampChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSpawnPointsListWidget", "OnActivatedTimeStampChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCoreStateSpawnPointsListWidget.OnIsSelectedChanged
// (Event, Protected, BlueprintEvent)

void USQCoreStateSpawnPointsListWidget::OnIsSelectedChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSpawnPointsListWidget", "OnIsSelectedChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCoreStateSpawnPointsListWidget.OnSiegedChanged
// (Event, Protected, BlueprintEvent)

void USQCoreStateSpawnPointsListWidget::OnSiegedChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSpawnPointsListWidget", "OnSiegedChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCoreStateSpawnPointsListWidget.OnSpawningEnabledChanged
// (Event, Protected, BlueprintEvent)

void USQCoreStateSpawnPointsListWidget::OnSpawningEnabledChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSpawnPointsListWidget", "OnSpawningEnabledChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCoreStateSpawnPointsListWidget.OnSpawnPointLocationChanged
// (Event, Protected, BlueprintEvent)

void USQCoreStateSpawnPointsListWidget::OnSpawnPointLocationChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSpawnPointsListWidget", "OnSpawnPointLocationChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCoreStateSpawnPointsListWidget.OnSpawnPointTypeChanged
// (Event, Protected, BlueprintEvent)

void USQCoreStateSpawnPointsListWidget::OnSpawnPointTypeChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSpawnPointsListWidget", "OnSpawnPointTypeChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCoreStateSpawnPointsListWidget.SelectSpawnPoint
// (Final, Native, Public, BlueprintCallable)

void USQCoreStateSpawnPointsListWidget::SelectSpawnPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSpawnPointsListWidget", "SelectSpawnPoint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCoreStateSpawnPointsListWidget.GetSpawnIcon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* USQCoreStateSpawnPointsListWidget::GetSpawnIcon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSpawnPointsListWidget", "GetSpawnIcon");

	Params::SQCoreStateSpawnPointsListWidget_GetSpawnIcon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCoreStateSquadListWidget.OnListLayoutChanged
// (Event, Protected, BlueprintEvent)

void USQCoreStateSquadListWidget::OnListLayoutChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSquadListWidget", "OnListLayoutChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQGuidanceControllerComponent.GetFirstGuidanceComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USQGuidanceComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQGuidanceComponent* USQGuidanceControllerComponent::GetFirstGuidanceComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGuidanceControllerComponent", "GetFirstGuidanceComponent");

	Params::SQGuidanceControllerComponent_GetFirstGuidanceComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGuidanceControllerComponent.OnProjectileSpawned
// (Final, Native, Protected)
// Parameters:
// class ASQProjectile*                    SpawnedProjectile                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGuidanceControllerComponent::OnProjectileSpawned(class ASQProjectile* SpawnedProjectile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGuidanceControllerComponent", "OnProjectileSpawned");

	Params::SQGuidanceControllerComponent_OnProjectileSpawned Parms{};

	Parms.SpawnedProjectile = SpawnedProjectile;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGuidanceControllerComponent.OnRep_JitterSeed
// (Final, Native, Public)

void USQGuidanceControllerComponent::OnRep_JitterSeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGuidanceControllerComponent", "OnRep_JitterSeed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGuidanceControllerComponent.PlayConnectionLossEffects
// (Final, Native, Private)
// Parameters:
// EGuidanceLossReason                     LossReason                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGuidanceControllerComponent::PlayConnectionLossEffects(const EGuidanceLossReason LossReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGuidanceControllerComponent", "PlayConnectionLossEffects");

	Params::SQGuidanceControllerComponent_PlayConnectionLossEffects Parms{};

	Parms.LossReason = LossReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGuidanceControllerComponent.UnregisterGuidanceComponent
// (Final, Native, Private)
// Parameters:
// class USQGuidanceComponent*             InGuidanceComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGuidanceLossReason                     LossReason                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGuidanceControllerComponent::UnregisterGuidanceComponent(class USQGuidanceComponent* InGuidanceComponent, const EGuidanceLossReason LossReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGuidanceControllerComponent", "UnregisterGuidanceComponent");

	Params::SQGuidanceControllerComponent_UnregisterGuidanceComponent Parms{};

	Parms.InGuidanceComponent = InGuidanceComponent;
	Parms.LossReason = LossReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCoreStateSquadItemWidget.GetCachedSQPlayerController
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// class ASQPlayerController*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQPlayerController* USQCoreStateSquadItemWidget::GetCachedSQPlayerController()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSquadItemWidget", "GetCachedSQPlayerController");

	Params::SQCoreStateSquadItemWidget_GetCachedSQPlayerController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCoreStateSquadItemWidget.JoinSquad
// (Final, Native, Protected, BlueprintCallable)

void USQCoreStateSquadItemWidget::JoinSquad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSquadItemWidget", "JoinSquad");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCoreStateSquadItemWidget.OnBanned
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   Param_SquadId                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BanDuration                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCoreStateSquadItemWidget::OnBanned(int32 Param_SquadId, float BanDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSquadItemWidget", "OnBanned");

	Params::SQCoreStateSquadItemWidget_OnBanned Parms{};

	Parms.Param_SquadId = Param_SquadId;
	Parms.BanDuration = BanDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQCoreStateSquadItemWidget.OnIsCommandSquadChanged
// (Event, Protected, BlueprintEvent)

void USQCoreStateSquadItemWidget::OnIsCommandSquadChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSquadItemWidget", "OnIsCommandSquadChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCoreStateSquadItemWidget.OnIsSelfInSquadChanged
// (Event, Protected, BlueprintEvent)

void USQCoreStateSquadItemWidget::OnIsSelfInSquadChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSquadItemWidget", "OnIsSelfInSquadChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCoreStateSquadItemWidget.OnJoinButtonStateChanged
// (Event, Protected, BlueprintEvent)

void USQCoreStateSquadItemWidget::OnJoinButtonStateChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSquadItemWidget", "OnJoinButtonStateChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCoreStateSquadItemWidget.OnLeaderNameChanged
// (Event, Protected, BlueprintEvent)

void USQCoreStateSquadItemWidget::OnLeaderNameChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSquadItemWidget", "OnLeaderNameChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCoreStateSquadItemWidget.OnMaxMembersChanged
// (Event, Protected, BlueprintEvent)

void USQCoreStateSquadItemWidget::OnMaxMembersChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSquadItemWidget", "OnMaxMembersChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCoreStateSquadItemWidget.OnMemberNumChanged
// (Event, Protected, BlueprintEvent)

void USQCoreStateSquadItemWidget::OnMemberNumChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSquadItemWidget", "OnMemberNumChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCoreStateSquadItemWidget.OnSquadIdChanged
// (Event, Protected, BlueprintEvent)

void USQCoreStateSquadItemWidget::OnSquadIdChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSquadItemWidget", "OnSquadIdChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCoreStateSquadItemWidget.OnSquadNameChanged
// (Event, Protected, BlueprintEvent)

void USQCoreStateSquadItemWidget::OnSquadNameChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSquadItemWidget", "OnSquadNameChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCoreStateSquadItemWidget.GetMemberRoot
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// int32                                   FireTeamIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPanelWidget*                     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPanelWidget* USQCoreStateSquadItemWidget::GetMemberRoot(int32 FireTeamIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSquadItemWidget", "GetMemberRoot");

	Params::SQCoreStateSquadItemWidget_GetMemberRoot Parms{};

	Parms.FireTeamIndex = FireTeamIndex;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Squad.SQCoreStateSquadMemberWidget.OnCurrentVehicleDataChanged
// (Event, Protected, BlueprintEvent)

void USQCoreStateSquadMemberWidget::OnCurrentVehicleDataChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSquadMemberWidget", "OnCurrentVehicleDataChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCoreStateSquadMemberWidget.OnDeployRoleChanged
// (Event, Protected, BlueprintEvent)

void USQCoreStateSquadMemberWidget::OnDeployRoleChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSquadMemberWidget", "OnDeployRoleChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCoreStateSquadMemberWidget.OnFireTeamIndexChanged
// (Event, Protected, BlueprintEvent)

void USQCoreStateSquadMemberWidget::OnFireTeamIndexChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSquadMemberWidget", "OnFireTeamIndexChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCoreStateSquadMemberWidget.OnFireTeamPositionChanged
// (Event, Protected, BlueprintEvent)

void USQCoreStateSquadMemberWidget::OnFireTeamPositionChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSquadMemberWidget", "OnFireTeamPositionChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCoreStateSquadMemberWidget.OnIsAliveChanged
// (Event, Protected, BlueprintEvent)

void USQCoreStateSquadMemberWidget::OnIsAliveChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSquadMemberWidget", "OnIsAliveChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCoreStateSquadMemberWidget.OnIsBleedingChanged
// (Event, Protected, BlueprintEvent)

void USQCoreStateSquadMemberWidget::OnIsBleedingChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSquadMemberWidget", "OnIsBleedingChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCoreStateSquadMemberWidget.OnIsFireTeamLeaderChanged
// (Event, Protected, BlueprintEvent)

void USQCoreStateSquadMemberWidget::OnIsFireTeamLeaderChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSquadMemberWidget", "OnIsFireTeamLeaderChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCoreStateSquadMemberWidget.OnIsMutedChanged
// (Event, Protected, BlueprintEvent)

void USQCoreStateSquadMemberWidget::OnIsMutedChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSquadMemberWidget", "OnIsMutedChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCoreStateSquadMemberWidget.OnIsPossessingPawnChanged
// (Event, Protected, BlueprintEvent)

void USQCoreStateSquadMemberWidget::OnIsPossessingPawnChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSquadMemberWidget", "OnIsPossessingPawnChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCoreStateSquadMemberWidget.OnIsSquadLeaderChanged
// (Event, Protected, BlueprintEvent)

void USQCoreStateSquadMemberWidget::OnIsSquadLeaderChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSquadMemberWidget", "OnIsSquadLeaderChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCoreStateSquadMemberWidget.OnIsWoundedChanged
// (Event, Protected, BlueprintEvent)

void USQCoreStateSquadMemberWidget::OnIsWoundedChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSquadMemberWidget", "OnIsWoundedChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCoreStateSquadMemberWidget.OnPlayerNameChanged
// (Event, Protected, BlueprintEvent)

void USQCoreStateSquadMemberWidget::OnPlayerNameChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSquadMemberWidget", "OnPlayerNameChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCoreStateSquadMemberWidget.OnSquadIdChanged
// (Event, Protected, BlueprintEvent)

void USQCoreStateSquadMemberWidget::OnSquadIdChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSquadMemberWidget", "OnSquadIdChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQCoreStateSquadMemberWidget.OnVoipChannelChanged
// (Event, Protected, BlueprintEvent)

void USQCoreStateSquadMemberWidget::OnVoipChannelChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCoreStateSquadMemberWidget", "OnVoipChannelChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQProjectile.BlueprintOnImpact
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FHitResult                       HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASQProjectile::BlueprintOnImpact(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProjectile", "BlueprintOnImpact");

	Params::SQProjectile_BlueprintOnImpact Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQProjectile.BPApplyExplosiveDamage
// (BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHitResult                       LastHitResult                                          (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   IgnoreActors                                           (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQProjectile::BPApplyExplosiveDamage(const struct FHitResult& LastHitResult, class AActor* DamageCauser, const TArray<class AActor*>& IgnoreActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProjectile", "BPApplyExplosiveDamage");

	Params::SQProjectile_BPApplyExplosiveDamage Parms{};

	Parms.LastHitResult = std::move(LastHitResult);
	Parms.DamageCauser = DamageCauser;
	Parms.IgnoreActors = std::move(IgnoreActors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQProjectile.DisableAndDestroy
// (Native, Protected, BlueprintCallable)

void ASQProjectile::DisableAndDestroy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProjectile", "DisableAndDestroy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQProjectile.GetDamage
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQProjectile::GetDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProjectile", "GetDamage");

	Params::SQProjectile_GetDamage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQProjectile.GetWeapon
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ASQEquipableItem*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQEquipableItem* ASQProjectile::GetWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProjectile", "GetWeapon");

	Params::SQProjectile_GetWeapon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQProjectile.OnImpact
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           SelfActor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASQProjectile::OnImpact(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProjectile", "OnImpact");

	Params::SQProjectile_OnImpact Parms{};

	Parms.SelfActor = SelfActor;
	Parms.OtherActor = OtherActor;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQProjectile.OnOverlap
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASQProjectile::OnOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProjectile", "OnOverlap");

	Params::SQProjectile_OnOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQProjectile.PlayExplosionEffect
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       ImpactHit                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQProjectile::PlayExplosionEffect(const struct FHitResult& ImpactHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProjectile", "PlayExplosionEffect");

	Params::SQProjectile_PlayExplosionEffect Parms{};

	Parms.ImpactHit = std::move(ImpactHit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQProjectile.PlayProjectileSound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USoundCue*                        Sound                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAudioComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAudioComponent* ASQProjectile::PlayProjectileSound(class USoundCue* Sound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProjectile", "PlayProjectileSound");

	Params::SQProjectile_PlayProjectileSound Parms{};

	Parms.Sound = Sound;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQProjectile.SelfDestruct
// (Final, Native, Public)

void ASQProjectile::SelfDestruct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProjectile", "SelfDestruct");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGrenadeProjectile.BP_Explode
// (Event, Public, BlueprintEvent)

void ASQGrenadeProjectile::BP_Explode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGrenadeProjectile", "BP_Explode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQGrenadeProjectile.Explode
// (Native, Public, BlueprintCallable)

void ASQGrenadeProjectile::Explode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGrenadeProjectile", "Explode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGrenadeProjectile.PlayThrowableImpactEffect
// (Final, BlueprintCosmetic, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FHitResult                       ImpactHit                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQGrenadeProjectile::PlayThrowableImpactEffect(const struct FHitResult& ImpactHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGrenadeProjectile", "PlayThrowableImpactEffect");

	Params::SQGrenadeProjectile_PlayThrowableImpactEffect Parms{};

	Parms.ImpactHit = std::move(ImpactHit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCountParameterBase.TryGetValueForPlayer
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQCountParameterBase::TryGetValueForPlayer(const class ASQPlayerController* InPlayer, int32* OutValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCountParameterBase", "TryGetValueForPlayer");

	Params::SQCountParameterBase_TryGetValueForPlayer Parms{};

	Parms.InPlayer = InPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;

	return Parms.ReturnValue;
}


// Function Squad.SQCountParameterBase.TryGetValueForTeam
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQTeam*                          InTeam                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQCountParameterBase::TryGetValueForTeam(const class ASQTeam* InTeam, int32* OutValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCountParameterBase", "TryGetValueForTeam");

	Params::SQCountParameterBase_TryGetValueForTeam Parms{};

	Parms.InTeam = InTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;

	return Parms.ReturnValue;
}


// Function Squad.RouteCombinerPredicate.Execute
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// TArray<struct FSQRoute2>                NewRoutes                                              (Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TArray<struct FSQRoute2>                Routes                                                 (Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void URouteCombinerPredicate::Execute(TArray<struct FSQRoute2>& NewRoutes, TArray<struct FSQRoute2>& Routes) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RouteCombinerPredicate", "Execute");

	Params::RouteCombinerPredicate_Execute Parms{};

	Parms.NewRoutes = std::move(NewRoutes);
	Parms.Routes = std::move(Routes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	NewRoutes = std::move(Parms.NewRoutes);
	Routes = std::move(Parms.Routes);
}


// Function Squad.SQCountParameter.TryGetInputValueForPlayer
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQCountParameter::TryGetInputValueForPlayer(const class ASQPlayerController* InPlayer, float* OutValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCountParameter", "TryGetInputValueForPlayer");

	Params::SQCountParameter_TryGetInputValueForPlayer Parms{};

	Parms.InPlayer = InPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;

	return Parms.ReturnValue;
}


// Function Squad.SQCountParameter.TryGetInputValueForTeam
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQTeam*                          InTeam                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQCountParameter::TryGetInputValueForTeam(const class ASQTeam* InTeam, float* OutValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCountParameter", "TryGetInputValueForTeam");

	Params::SQCountParameter_TryGetInputValueForTeam Parms{};

	Parms.InTeam = InTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;

	return Parms.ReturnValue;
}


// Function Squad.SQCountParameter_Legacy.GetGroupLimit
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FSQRoleGroupLimit                ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSQRoleGroupLimit USQCountParameter_Legacy::GetGroupLimit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCountParameter_Legacy", "GetGroupLimit");

	Params::SQCountParameter_Legacy_GetGroupLimit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCountParameter_Legacy.IsPartOfRoleGroup
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USQRoleSettings*                  InRole                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQCountParameter_Legacy::IsPartOfRoleGroup(const class USQRoleSettings* InRole) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCountParameter_Legacy", "IsPartOfRoleGroup");

	Params::SQCountParameter_Legacy_IsPartOfRoleGroup Parms{};

	Parms.InRole = InRole;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMapMarkerInputComponent.RefreshMarkerWidgets
// (Final, Native, Public, BlueprintCallable)

void USQMapMarkerInputComponent::RefreshMarkerWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMarkerInputComponent", "RefreshMarkerWidgets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapMarkerInputComponent.ServerRequestMapMarker
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)
// Parameters:
// struct FSQMapMarkerGameplayData         MarkerGameplayData                                     (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USQMapMarkerInputComponent::ServerRequestMapMarker(const struct FSQMapMarkerGameplayData& MarkerGameplayData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMarkerInputComponent", "ServerRequestMapMarker");

	Params::SQMapMarkerInputComponent_ServerRequestMapMarker Parms{};

	Parms.MarkerGameplayData = std::move(MarkerGameplayData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapMarkerInputComponent.ServerRequestRemoveMapMarker
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)
// Parameters:
// uint8                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQMapMarkerInputComponent::ServerRequestRemoveMapMarker(uint8 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMarkerInputComponent", "ServerRequestRemoveMapMarker");

	Params::SQMapMarkerInputComponent_ServerRequestRemoveMapMarker Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCreateSquadButton.SquadNameTextChanged
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             Text                                                   (Parm, NativeAccessSpecifierPublic)

void USQCreateSquadButton::SquadNameTextChanged(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCreateSquadButton", "SquadNameTextChanged");

	Params::SQCreateSquadButton_SquadNameTextChanged Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCreateSquadButton.SquadNameTextCommit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             Text                                                   (Parm, NativeAccessSpecifierPublic)
// ETextCommit                             CommitMethodEnum                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCreateSquadButton::SquadNameTextCommit(const class FText& Text, ETextCommit CommitMethodEnum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCreateSquadButton", "SquadNameTextCommit");

	Params::SQCreateSquadButton_SquadNameTextCommit Parms{};

	Parms.Text = std::move(Text);
	Parms.CommitMethodEnum = CommitMethodEnum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCustomizationScreen.CreateEmotesGrid
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUniformGridPanel*                GridParent                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UniformSize                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCustomizationScreen::CreateEmotesGrid(class UUniformGridPanel* GridParent, int32 UniformSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCustomizationScreen", "CreateEmotesGrid");

	Params::SQCustomizationScreen_CreateEmotesGrid Parms{};

	Parms.GridParent = GridParent;
	Parms.UniformSize = UniformSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCustomizationScreen.CreateEmotesGridFromBundle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUniformGridPanel*                GridParent                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UniformSize                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UODKBazaarBundle*                 Bundle                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFlip                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCustomizationScreen::CreateEmotesGridFromBundle(class UUniformGridPanel* GridParent, int32 UniformSize, class UODKBazaarBundle* Bundle, bool bFlip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCustomizationScreen", "CreateEmotesGridFromBundle");

	Params::SQCustomizationScreen_CreateEmotesGridFromBundle Parms{};

	Parms.GridParent = GridParent;
	Parms.UniformSize = UniformSize;
	Parms.Bundle = Bundle;
	Parms.bFlip = bFlip;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCustomizationScreen.CreateEmotesList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UListView*                        ListParent                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCustomizationScreen::CreateEmotesList(class UListView* ListParent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCustomizationScreen", "CreateEmotesList");

	Params::SQCustomizationScreen_CreateEmotesList Parms{};

	Parms.ListParent = ListParent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCustomizationScreen.CreateFactionGrid
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUniformGridPanel*                GridParent                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UniformSize                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOnlyShowFactionsWithOwnedSkins                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCustomizationScreen::CreateFactionGrid(class UUniformGridPanel* GridParent, int32 UniformSize, bool bOnlyShowFactionsWithOwnedSkins)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCustomizationScreen", "CreateFactionGrid");

	Params::SQCustomizationScreen_CreateFactionGrid Parms{};

	Parms.GridParent = GridParent;
	Parms.UniformSize = UniformSize;
	Parms.bOnlyShowFactionsWithOwnedSkins = bOnlyShowFactionsWithOwnedSkins;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCustomizationScreen.CreateWeaponSkinGrid
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUniformGridPanel*                GridParent                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UniformSize                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCustomizationScreen::CreateWeaponSkinGrid(class UUniformGridPanel* GridParent, int32 UniformSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCustomizationScreen", "CreateWeaponSkinGrid");

	Params::SQCustomizationScreen_CreateWeaponSkinGrid Parms{};

	Parms.GridParent = GridParent;
	Parms.UniformSize = UniformSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCustomizationScreen.CreateWeaponSkinsGridFromBundle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUniformGridPanel*                GridParent                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UniformSize                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UODKBazaarBundle*                 Bundle                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFlip                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCustomizationScreen::CreateWeaponSkinsGridFromBundle(class UUniformGridPanel* GridParent, int32 UniformSize, class UODKBazaarBundle* Bundle, bool bFlip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCustomizationScreen", "CreateWeaponSkinsGridFromBundle");

	Params::SQCustomizationScreen_CreateWeaponSkinsGridFromBundle Parms{};

	Parms.GridParent = GridParent;
	Parms.UniformSize = UniformSize;
	Parms.Bundle = Bundle;
	Parms.bFlip = bFlip;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCustomizationScreen.CreateWeaponSkinsGridFromFaction
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UUniformGridPanel*                GridParent                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   UniformSize                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             FactionName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShowOnlyOwned                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFlip                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCustomizationScreen::CreateWeaponSkinsGridFromFaction(class UUniformGridPanel* GridParent, int32 UniformSize, const class FName& FactionName, bool bShowOnlyOwned, bool bFlip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCustomizationScreen", "CreateWeaponSkinsGridFromFaction");

	Params::SQCustomizationScreen_CreateWeaponSkinsGridFromFaction Parms{};

	Parms.GridParent = GridParent;
	Parms.UniformSize = UniformSize;
	Parms.FactionName = FactionName;
	Parms.bShowOnlyOwned = bShowOnlyOwned;
	Parms.bFlip = bFlip;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCustomizationScreen.GetOwnedEmotesAsWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class USQEmoteItemWidget*>       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class USQEmoteItemWidget*> USQCustomizationScreen::GetOwnedEmotesAsWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCustomizationScreen", "GetOwnedEmotesAsWidget");

	Params::SQCustomizationScreen_GetOwnedEmotesAsWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQCustomizationScreen.OnEmoteHovered
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQEmotesData*                    EmoteData                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCustomizationScreen::OnEmoteHovered(class USQEmotesData* EmoteData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCustomizationScreen", "OnEmoteHovered");

	Params::SQCustomizationScreen_OnEmoteHovered Parms{};

	Parms.EmoteData = EmoteData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQCustomizationScreen.OnEmoteSelected
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQEmotesData*                    EmoteData                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCustomizationScreen::OnEmoteSelected(class USQEmotesData* EmoteData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCustomizationScreen", "OnEmoteSelected");

	Params::SQCustomizationScreen_OnEmoteSelected Parms{};

	Parms.EmoteData = EmoteData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQCustomizationScreen.OnFactionHovered
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             FactionName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCustomizationScreen::OnFactionHovered(class FName FactionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCustomizationScreen", "OnFactionHovered");

	Params::SQCustomizationScreen_OnFactionHovered Parms{};

	Parms.FactionName = FactionName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQCustomizationScreen.OnFactionSelected
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             FactionName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCustomizationScreen::OnFactionSelected(class FName FactionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCustomizationScreen", "OnFactionSelected");

	Params::SQCustomizationScreen_OnFactionSelected Parms{};

	Parms.FactionName = FactionName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQCustomizationScreen.OnPurchaseCompleted
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FODKBazaarPurchaseCompletedData  PurchaseCompletedData                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USQCustomizationScreen::OnPurchaseCompleted(const struct FODKBazaarPurchaseCompletedData& PurchaseCompletedData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCustomizationScreen", "OnPurchaseCompleted");

	Params::SQCustomizationScreen_OnPurchaseCompleted Parms{};

	Parms.PurchaseCompletedData = std::move(PurchaseCompletedData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQCustomizationScreen.OnWeaponSkinHovered
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQItemSkinCollection*            SkinData                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCustomizationScreen::OnWeaponSkinHovered(class USQItemSkinCollection* SkinData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCustomizationScreen", "OnWeaponSkinHovered");

	Params::SQCustomizationScreen_OnWeaponSkinHovered Parms{};

	Parms.SkinData = SkinData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQCustomizationScreen.OnWeaponSkinSelected
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SkinName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQCustomizationScreen::OnWeaponSkinSelected(const class FName& SkinName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQCustomizationScreen", "OnWeaponSkinSelected");

	Params::SQCustomizationScreen_OnWeaponSkinSelected Parms{};

	Parms.SkinName = SkinName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQMapIconWidget.IsMarkerVisible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQMapIconWidget::IsMarkerVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapIconWidget", "IsMarkerVisible");

	Params::SQMapIconWidget_IsMarkerVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMapIconWidget.GetEnemyColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor USQMapIconWidget::GetEnemyColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapIconWidget", "GetEnemyColor");

	Params::SQMapIconWidget_GetEnemyColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMapIconWidget.GetFriendlyColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor USQMapIconWidget::GetFriendlyColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapIconWidget", "GetFriendlyColor");

	Params::SQMapIconWidget_GetFriendlyColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMapIconWidget.GetNeutralColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor USQMapIconWidget::GetNeutralColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapIconWidget", "GetNeutralColor");

	Params::SQMapIconWidget_GetNeutralColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMapIconWidget.GetSquadColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor USQMapIconWidget::GetSquadColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapIconWidget", "GetSquadColor");

	Params::SQMapIconWidget_GetSquadColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMapIconWidget.ShouldMarkerUpdate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQMapIconWidget::ShouldMarkerUpdate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapIconWidget", "ShouldMarkerUpdate");

	Params::SQMapIconWidget_ShouldMarkerUpdate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMapPawnIconWidget.GetWidgetPlayerState
// (Native, Public, BlueprintCallable)
// Parameters:
// class ASQPlayerState*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQPlayerState* USQMapPawnIconWidget::GetWidgetPlayerState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapPawnIconWidget", "GetWidgetPlayerState");

	Params::SQMapPawnIconWidget_GetWidgetPlayerState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMapPawnIconWidget.UpdateIsInSameSquad
// (Native, Public, BlueprintCallable)

void USQMapPawnIconWidget::UpdateIsInSameSquad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapPawnIconWidget", "UpdateIsInSameSquad");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapPawnIconWidget.UpdateIsInSameTeam
// (Native, Public, BlueprintCallable)

void USQMapPawnIconWidget::UpdateIsInSameTeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapPawnIconWidget", "UpdateIsInSameTeam");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapPawnIconWidget.UpdateIsSelf
// (Native, Public, BlueprintCallable)

void USQMapPawnIconWidget::UpdateIsSelf()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapPawnIconWidget", "UpdateIsSelf");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapPawnIconWidget.UpdateIsSl
// (Native, Public, BlueprintCallable)

void USQMapPawnIconWidget::UpdateIsSl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapPawnIconWidget", "UpdateIsSl");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapPawnIconWidget.UpdateTeam
// (Native, Public, BlueprintCallable)

void USQMapPawnIconWidget::UpdateTeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapPawnIconWidget", "UpdateTeam");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapSoldierIconWidget.UpdateIsAlive
// (Final, Native, Public, BlueprintCallable)

void USQMapSoldierIconWidget::UpdateIsAlive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapSoldierIconWidget", "UpdateIsAlive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapSoldierIconWidget.UpdateIsBleeding
// (Final, Native, Public, BlueprintCallable)

void USQMapSoldierIconWidget::UpdateIsBleeding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapSoldierIconWidget", "UpdateIsBleeding");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapSoldierIconWidget.UpdateIsInVehicle
// (Final, Native, Public, BlueprintCallable)

void USQMapSoldierIconWidget::UpdateIsInVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapSoldierIconWidget", "UpdateIsInVehicle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapSoldierIconWidget.UpdateIsMedic
// (Final, Native, Public, BlueprintCallable)

void USQMapSoldierIconWidget::UpdateIsMedic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapSoldierIconWidget", "UpdateIsMedic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapSoldierIconWidget.UpdateIsSelfMedic
// (Final, Native, Public, BlueprintCallable)

void USQMapSoldierIconWidget::UpdateIsSelfMedic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapSoldierIconWidget", "UpdateIsSelfMedic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapSoldierIconWidget.UpdateIsWithinMedicRange
// (Final, Native, Public, BlueprintCallable)

void USQMapSoldierIconWidget::UpdateIsWithinMedicRange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapSoldierIconWidget", "UpdateIsWithinMedicRange");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapMarkerBase.GetMapMarkerData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FSQMapMarkerVisualData           ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSQMapMarkerVisualData USQMapMarkerBase::GetMapMarkerData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMarkerBase", "GetMapMarkerData");

	Params::SQMapMarkerBase_GetMapMarkerData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMapMarkerBase.OnHasFadedChanged
// (Event, Public, BlueprintEvent)

void USQMapMarkerBase::OnHasFadedChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMarkerBase", "OnHasFadedChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapMarkerBase.OnScaleChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   ScaleValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQMapMarkerBase::OnScaleChanged(float ScaleValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMarkerBase", "OnScaleChanged");

	Params::SQMapMarkerBase_OnScaleChanged Parms{};

	Parms.ScaleValue = ScaleValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQMapMarkerBase.SetupMapMarker
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCanvasPanelSlot*                 PanelSlot                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQMapMarkerBase::SetupMapMarker(class UCanvasPanelSlot* PanelSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMarkerBase", "SetupMapMarker");

	Params::SQMapMarkerBase_SetupMapMarker Parms{};

	Parms.PanelSlot = PanelSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMovementComponentBase.ClientAckGoodMove
// (Net, Native, Event, Protected, NetClient)
// Parameters:
// float                                   Timestamp                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQMovementComponentBase::ClientAckGoodMove(float Timestamp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMovementComponentBase", "ClientAckGoodMove");

	Params::SQMovementComponentBase_ClientAckGoodMove Parms{};

	Parms.Timestamp = Timestamp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMovementComponentBase.ClientAdjustPosition
// (Net, Native, Event, Protected, HasDefaults, NetClient)
// Parameters:
// float                                   Timestamp                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          LocationZeroBased                                      (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InVelocity                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQMovementComponentBase::ClientAdjustPosition(float Timestamp, const struct FVector& LocationZeroBased, const struct FVector& InVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMovementComponentBase", "ClientAdjustPosition");

	Params::SQMovementComponentBase_ClientAdjustPosition Parms{};

	Parms.Timestamp = Timestamp;
	Parms.LocationZeroBased = std::move(LocationZeroBased);
	Parms.InVelocity = std::move(InVelocity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMovementComponentBase.ClientAdjustPositionAndRotation
// (Net, Native, Event, Protected, HasDefaults, NetClient)
// Parameters:
// float                                   Timestamp                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          LocationZeroBased                                      (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InVelocity                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void USQMovementComponentBase::ClientAdjustPositionAndRotation(const float Timestamp, const struct FVector& LocationZeroBased, const struct FVector& InVelocity, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMovementComponentBase", "ClientAdjustPositionAndRotation");

	Params::SQMovementComponentBase_ClientAdjustPositionAndRotation Parms{};

	Parms.Timestamp = Timestamp;
	Parms.LocationZeroBased = std::move(LocationZeroBased);
	Parms.InVelocity = std::move(InVelocity);
	Parms.Rotation = std::move(Rotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMovementComponentBase.OnRep_Movement
// (Native, Protected)

void USQMovementComponentBase::OnRep_Movement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMovementComponentBase", "OnRep_Movement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMovementComponentBase.ServerMove
// (Net, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// TArray<uint8>                           Move                                                   (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USQMovementComponentBase::ServerMove(const TArray<uint8>& Move)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMovementComponentBase", "ServerMove");

	Params::SQMovementComponentBase_ServerMove Parms{};

	Parms.Move = std::move(Move);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMovementComponentBase.ServerMoveDual
// (Net, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// TArray<uint8>                           Move1                                                  (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<uint8>                           Move2                                                  (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USQMovementComponentBase::ServerMoveDual(const TArray<uint8>& Move1, const TArray<uint8>& Move2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMovementComponentBase", "ServerMoveDual");

	Params::SQMovementComponentBase_ServerMoveDual Parms{};

	Parms.Move1 = std::move(Move1);
	Parms.Move2 = std::move(Move2);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMovementComponentBase.ServerMoveOld
// (Net, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// TArray<uint8>                           Move                                                   (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USQMovementComponentBase::ServerMoveOld(const TArray<uint8>& Move)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMovementComponentBase", "ServerMoveOld");

	Params::SQMovementComponentBase_ServerMoveOld Parms{};

	Parms.Move = std::move(Move);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMovementComponentBase.GetCurrentAcceleration
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector USQMovementComponentBase::GetCurrentAcceleration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMovementComponentBase", "GetCurrentAcceleration");

	Params::SQMovementComponentBase_GetCurrentAcceleration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMovementComponentBase.GetCurrentRotationalAcceleration
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector USQMovementComponentBase::GetCurrentRotationalAcceleration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMovementComponentBase", "GetCurrentRotationalAcceleration");

	Params::SQMovementComponentBase_GetCurrentRotationalAcceleration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMovementComponentBase.GetCurrentRotationalVelocity
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector USQMovementComponentBase::GetCurrentRotationalVelocity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMovementComponentBase", "GetCurrentRotationalVelocity");

	Params::SQMovementComponentBase_GetCurrentRotationalVelocity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMovementComponentBase.GetCurrentVelocity
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector USQMovementComponentBase::GetCurrentVelocity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMovementComponentBase", "GetCurrentVelocity");

	Params::SQMovementComponentBase_GetCurrentVelocity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMovementComponentBase.IsLocallyControlledComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQMovementComponentBase::IsLocallyControlledComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMovementComponentBase", "IsLocallyControlledComponent");

	Params::SQMovementComponentBase_IsLocallyControlledComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMovementComponentBase.IsServerComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQMovementComponentBase::IsServerComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMovementComponentBase", "IsServerComponent");

	Params::SQMovementComponentBase_IsServerComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMovementComponentBase.IsSimulatedProxy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQMovementComponentBase::IsSimulatedProxy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMovementComponentBase", "IsSimulatedProxy");

	Params::SQMovementComponentBase_IsSimulatedProxy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQDataGatheringComponent.RecordHeatMap
// (Final, Exec, Native, Public)
// Parameters:
// float                                   XStepSize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   YStepSize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HeightOffset                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRecordRawValues                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PositionWaitTime                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   YawRotationAngle                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PitchRotationAngle                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQDataGatheringComponent::RecordHeatMap(float XStepSize, float YStepSize, float HeightOffset, bool bRecordRawValues, float PositionWaitTime, float YawRotationAngle, float PitchRotationAngle, const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDataGatheringComponent", "RecordHeatMap");

	Params::SQDataGatheringComponent_RecordHeatMap Parms{};

	Parms.XStepSize = XStepSize;
	Parms.YStepSize = YStepSize;
	Parms.HeightOffset = HeightOffset;
	Parms.bRecordRawValues = bRecordRawValues;
	Parms.PositionWaitTime = PositionWaitTime;
	Parms.YawRotationAngle = YawRotationAngle;
	Parms.PitchRotationAngle = PitchRotationAngle;
	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDataGatheringComponent.RunMultiMapHeatMap
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQDataGatheringComponent::RunMultiMapHeatMap(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDataGatheringComponent", "RunMultiMapHeatMap");

	Params::SQDataGatheringComponent_RunMultiMapHeatMap Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHUD.AddChatMessage
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ASQPlayerState*                   Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQChat                                 Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MessageLifetimeOverride                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQNotificationTypes                    NotificationType                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQHUD::AddChatMessage(class ASQPlayerState* Player, const class FString& Message, ESQChat Channel, const struct FLinearColor& Color, float MessageLifetimeOverride, ESQNotificationTypes NotificationType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "AddChatMessage");

	Params::SQHUD_AddChatMessage Parms{};

	Parms.Player = Player;
	Parms.Message = std::move(Message);
	Parms.Channel = Channel;
	Parms.Color = std::move(Color);
	Parms.MessageLifetimeOverride = MessageLifetimeOverride;
	Parms.NotificationType = NotificationType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHUD.AddChatMessageDefaultColor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ASQPlayerState*                   Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQChat                                 Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MessageLifetimeOverride                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQNotificationTypes                    NotificationType                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQHUD::AddChatMessageDefaultColor(class ASQPlayerState* Player, const class FString& Message, ESQChat Channel, float MessageLifetimeOverride, ESQNotificationTypes NotificationType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "AddChatMessageDefaultColor");

	Params::SQHUD_AddChatMessageDefaultColor Parms{};

	Parms.Player = Player;
	Parms.Message = std::move(Message);
	Parms.Channel = Channel;
	Parms.MessageLifetimeOverride = MessageLifetimeOverride;
	Parms.NotificationType = NotificationType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHUD.AddInputStackState
// (Native, Protected, BlueprintCallable)
// Parameters:
// struct FSQInputState                    NewState                                               (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FSQInputState                    ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FSQInputState ASQHUD::AddInputStackState(const struct FSQInputState& NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "AddInputStackState");

	Params::SQHUD_AddInputStackState Parms{};

	Parms.NewState = std::move(NewState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHUD.AddLineOfSightActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQHUD::AddLineOfSightActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "AddLineOfSightActor");

	Params::SQHUD_AddLineOfSightActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHUD.AddSystemMessage
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class FString                           Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MessageLifetimeOverride                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQNotificationTypes                    NotificationType                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQHUD::AddSystemMessage(const class FString& Message, const struct FLinearColor& Color, const float MessageLifetimeOverride, ESQNotificationTypes NotificationType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "AddSystemMessage");

	Params::SQHUD_AddSystemMessage Parms{};

	Parms.Message = std::move(Message);
	Parms.Color = std::move(Color);
	Parms.MessageLifetimeOverride = MessageLifetimeOverride;
	Parms.NotificationType = NotificationType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHUD.BlueprintNotifyHit
// (BlueprintCosmetic, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   DamageTaken                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDamageEvent                     DamageEvent                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class APawn*                            PawnInstigator                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQHUD::BlueprintNotifyHit(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "BlueprintNotifyHit");

	Params::SQHUD_BlueprintNotifyHit Parms{};

	Parms.DamageTaken = DamageTaken;
	Parms.DamageEvent = std::move(DamageEvent);
	Parms.PawnInstigator = PawnInstigator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQHUD.BPOnSetHudWidgetsEnabled
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQHUD::BPOnSetHudWidgetsEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "BPOnSetHudWidgetsEnabled");

	Params::SQHUD_BPOnSetHudWidgetsEnabled Parms{};

	Parms.bEnabled = bEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQHUD.BPOnUsableVisible
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsVisible                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQHUD::BPOnUsableVisible(class AActor* Actor, bool bIsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "BPOnUsableVisible");

	Params::SQHUD_BPOnUsableVisible Parms{};

	Parms.Actor = Actor;
	Parms.bIsVisible = bIsVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQHUD.ConditionalCloseScoreboard
// (Final, Native, Public, BlueprintCallable)

void ASQHUD::ConditionalCloseScoreboard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "ConditionalCloseScoreboard");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHUD.DeleteMarkerOnHUD
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ASQHUD::DeleteMarkerOnHUD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "DeleteMarkerOnHUD");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQHUD.DisplayAmmoBagOverlay
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASQDeployableAmmoBag*             Ammobag                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCanPickup                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQHUD::DisplayAmmoBagOverlay(class ASQDeployableAmmoBag* Ammobag, bool bCanPickup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "DisplayAmmoBagOverlay");

	Params::SQHUD_DisplayAmmoBagOverlay Parms{};

	Parms.Ammobag = Ammobag;
	Parms.bCanPickup = bCanPickup;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQHUD.DisplayDeployableInteractableOverlay
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASQDeployableInteractable*        Ammobag                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCanPickup                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQHUD::DisplayDeployableInteractableOverlay(class ASQDeployableInteractable* Ammobag, bool bCanPickup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "DisplayDeployableInteractableOverlay");

	Params::SQHUD_DisplayDeployableInteractableOverlay Parms{};

	Parms.Ammobag = Ammobag;
	Parms.bCanPickup = bCanPickup;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQHUD.DrawChatMessages
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSQMessageBoxInfo                ChatBox                                                (Parm, OutParm, NativeAccessSpecifierPublic)
// float                                   PosX                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PosY                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQHUD::DrawChatMessages(struct FSQMessageBoxInfo* ChatBox, const float PosX, const float PosY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "DrawChatMessages");

	Params::SQHUD_DrawChatMessages Parms{};

	Parms.PosX = PosX;
	Parms.PosY = PosY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ChatBox != nullptr)
		*ChatBox = std::move(Parms.ChatBox);
}


// Function Squad.SQHUD.DrawString
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PosX                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PosY                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQMessageBoxInfo                Info                                                   (Parm, NativeAccessSpecifierPublic)
// ESQTextHorizontalAlignment              HorizontalAlignment                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQTextVerticalAlignment                VerticalAlignment                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQHUD::DrawString(int32 Param_Index, const class FString& Text, float PosX, float PosY, const struct FLinearColor& Color, const struct FSQMessageBoxInfo& Info, ESQTextHorizontalAlignment HorizontalAlignment, ESQTextVerticalAlignment VerticalAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "DrawString");

	Params::SQHUD_DrawString Parms{};

	Parms.Param_Index = Param_Index;
	Parms.Text = std::move(Text);
	Parms.PosX = PosX;
	Parms.PosY = PosY;
	Parms.Color = std::move(Color);
	Parms.Info = std::move(Info);
	Parms.HorizontalAlignment = HorizontalAlignment;
	Parms.VerticalAlignment = VerticalAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHUD.DrawSystemMessages
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   PosX                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PosY                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQHUD::DrawSystemMessages(const float PosX, const float PosY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "DrawSystemMessages");

	Params::SQHUD_DrawSystemMessages Parms{};

	Parms.PosX = PosX;
	Parms.PosY = PosY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHUD.GetCanvas
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UCanvas*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCanvas* ASQHUD::GetCanvas()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "GetCanvas");

	Params::SQHUD_GetCanvas Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHUD.GetEnemyColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor ASQHUD::GetEnemyColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "GetEnemyColor");

	Params::SQHUD_GetEnemyColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHUD.GetFireTeamColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor ASQHUD::GetFireTeamColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "GetFireTeamColor");

	Params::SQHUD_GetFireTeamColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHUD.GetRemoteTalkers
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const TArray<struct FSQRemoteTalkerDisplayInfo>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FSQRemoteTalkerDisplayInfo> ASQHUD::GetRemoteTalkers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "GetRemoteTalkers");

	Params::SQHUD_GetRemoteTalkers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHUD.GetScaleUI
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQHUD::GetScaleUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "GetScaleUI");

	Params::SQHUD_GetScaleUI Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHUD.GetSquadColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor ASQHUD::GetSquadColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "GetSquadColor");

	Params::SQHUD_GetSquadColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHUD.GetSystemMessagesColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor ASQHUD::GetSystemMessagesColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "GetSystemMessagesColor");

	Params::SQHUD_GetSystemMessagesColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHUD.GetTeamColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor ASQHUD::GetTeamColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "GetTeamColor");

	Params::SQHUD_GetTeamColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHUD.HideAmmoBagOverlay
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASQDeployableAmmoBag*             Ammobag                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQHUD::HideAmmoBagOverlay(class ASQDeployableAmmoBag* Ammobag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "HideAmmoBagOverlay");

	Params::SQHUD_HideAmmoBagOverlay Parms{};

	Parms.Ammobag = Ammobag;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQHUD.HideDeployableInteractableOverlay
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASQDeployableInteractable*        Ammobag                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQHUD::HideDeployableInteractableOverlay(class ASQDeployableInteractable* Ammobag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "HideDeployableInteractableOverlay");

	Params::SQHUD_HideDeployableInteractableOverlay Parms{};

	Parms.Ammobag = Ammobag;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQHUD.IncrementMapZoomLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   CurrentMapZoom                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLoop                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQHUD::IncrementMapZoomLevel(float CurrentMapZoom, int32 Amount, bool bLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "IncrementMapZoomLevel");

	Params::SQHUD_IncrementMapZoomLevel Parms{};

	Parms.CurrentMapZoom = CurrentMapZoom;
	Parms.Amount = Amount;
	Parms.bLoop = bLoop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction Squad.SQHUD.OnReceiveChatEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate, HasDefaults)
// Parameters:
// class FString                           PlayerName                                             (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Message                                                (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQChat                                 Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQNotificationTypes                    NotificationType                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQHUD::OnReceiveChatEvent__DelegateSignature(const class FString& PlayerName, const class FString& Message, ESQChat Channel, const struct FLinearColor& Color, ESQNotificationTypes NotificationType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "OnReceiveChatEvent__DelegateSignature");

	Params::SQHUD_OnReceiveChatEvent__DelegateSignature Parms{};

	Parms.PlayerName = std::move(PlayerName);
	Parms.Message = std::move(Message);
	Parms.Channel = Channel;
	Parms.Color = std::move(Color);
	Parms.NotificationType = NotificationType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQHUD.RemoveInputStackState
// (Native, Protected, BlueprintCallable)
// Parameters:
// struct FSQInputState                    OldState                                               (Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FSQInputState                    ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FSQInputState ASQHUD::RemoveInputStackState(const struct FSQInputState& OldState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "RemoveInputStackState");

	Params::SQHUD_RemoveInputStackState Parms{};

	Parms.OldState = std::move(OldState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHUD.RemoveLineOfSightActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQHUD::RemoveLineOfSightActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "RemoveLineOfSightActor");

	Params::SQHUD_RemoveLineOfSightActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHUD.SetHudWidgetsEnabled
// (Exec, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQHUD::SetHudWidgetsEnabled(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "SetHudWidgetsEnabled");

	Params::SQHUD_SetHudWidgetsEnabled Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHUD.ShowMarkerOnHUD
// (Event, Public, BlueprintEvent)
// Parameters:
// struct FSQMapMarkerVisualData           MapMarkerVisualData                                    (Parm, NoDestructor, NativeAccessSpecifierPublic)

void ASQHUD::ShowMarkerOnHUD(const struct FSQMapMarkerVisualData& MapMarkerVisualData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "ShowMarkerOnHUD");

	Params::SQHUD_ShowMarkerOnHUD Parms{};

	Parms.MapMarkerVisualData = std::move(MapMarkerVisualData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQHUD.ShowScoreboard
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQHUD::ShowScoreboard(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "ShowScoreboard");

	Params::SQHUD_ShowScoreboard Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHUD.StatFrameGenerationFPS
// (Exec, Native, Public)

void ASQHUD::StatFrameGenerationFPS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "StatFrameGenerationFPS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHUD.ToggleScoreboard
// (Final, Native, Public, BlueprintCallable)

void ASQHUD::ToggleScoreboard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "ToggleScoreboard");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHUD.TraceViewToggle
// (Exec, Native, Public)

void ASQHUD::TraceViewToggle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "TraceViewToggle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHUD.VehicleChangeZoomOverlay
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewZoomOverlayIndex                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQHUD::VehicleChangeZoomOverlay(const int32 NewZoomOverlayIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "VehicleChangeZoomOverlay");

	Params::SQHUD_VehicleChangeZoomOverlay Parms{};

	Parms.NewZoomOverlayIndex = NewZoomOverlayIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHUD.VehicleCreateOverlay
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSubclassOf<class USQVehicleViewWidget> WidgetClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQHUD::VehicleCreateOverlay(TSubclassOf<class USQVehicleViewWidget> WidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "VehicleCreateOverlay");

	Params::SQHUD_VehicleCreateOverlay Parms{};

	Parms.WidgetClass = WidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHUD.VehicleRemoveOverlay
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSubclassOf<class USQVehicleViewWidget> WidgetClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQHUD::VehicleRemoveOverlay(TSubclassOf<class USQVehicleViewWidget> WidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "VehicleRemoveOverlay");

	Params::SQHUD_VehicleRemoveOverlay Parms{};

	Parms.WidgetClass = WidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHUD.VehicleResetZoom
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ASQHUD::VehicleResetZoom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "VehicleResetZoom");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHUD.WorldOriginUpdated
// (Final, Native, Protected, HasDefaults)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       Old                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       New                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQHUD::WorldOriginUpdated(class UWorld* World, const struct FIntVector& Old, const struct FIntVector& New)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "WorldOriginUpdated");

	Params::SQHUD_WorldOriginUpdated Parms{};

	Parms.World = World;
	Parms.Old = std::move(Old);
	Parms.New = std::move(New);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHUD.GetMouseScreenSpacePosition
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FIntPoint                        OutPosition                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQHUD::GetMouseScreenSpacePosition(struct FIntPoint* OutPosition) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "GetMouseScreenSpacePosition");

	Params::SQHUD_GetMouseScreenSpacePosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPosition != nullptr)
		*OutPosition = std::move(Parms.OutPosition);

	return Parms.ReturnValue;
}


// Function Squad.SQHUD.GetOtherPlayerColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQPlayerState*                   OtherPlayer                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor ASQHUD::GetOtherPlayerColor(class ASQPlayerState* OtherPlayer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "GetOtherPlayerColor");

	Params::SQHUD_GetOtherPlayerColor Parms{};

	Parms.OtherPlayer = OtherPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHUD.GetOwnerSpeakerState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESQVoiceChannel                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESQVoiceChannel ASQHUD::GetOwnerSpeakerState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "GetOwnerSpeakerState");

	Params::SQHUD_GetOwnerSpeakerState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHUD.GetStartingMapZoom
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQHUD::GetStartingMapZoom() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "GetStartingMapZoom");

	Params::SQHUD_GetStartingMapZoom Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHUD.GetTeamBasedColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESQTeam                                 InTeam                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor ASQHUD::GetTeamBasedColor(ESQTeam InTeam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "GetTeamBasedColor");

	Params::SQHUD_GetTeamBasedColor Parms{};

	Parms.InTeam = InTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHUD.HudWidgetsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQHUD::HudWidgetsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "HudWidgetsEnabled");

	Params::SQHUD_HudWidgetsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHUD.IsScoreboardVisible
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQHUD::IsScoreboardVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "IsScoreboardVisible");

	Params::SQHUD_IsScoreboardVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHUD.ShouldOffsetSpawnText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQHUD::ShouldOffsetSpawnText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUD", "ShouldOffsetSpawnText");

	Params::SQHUD_ShouldOffsetSpawnText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQDataSettings.GetDataSettings
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USQDataSettings*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQDataSettings* USQDataSettings::GetDataSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQDataSettings", "GetDataSettings");

	Params::SQDataSettings_GetDataSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQDataSettings.UseVote
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQDataSettings::UseVote() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDataSettings", "UseVote");

	Params::SQDataSettings_UseVote Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHelicopterCollisionDamage.HandleImpact
// (Final, Native, Protected, HasOutParams, HasDefaults)
// Parameters:
// struct FHitResult                       Impact                                                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   TimeSlice                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          MoveDelta                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQHelicopterCollisionDamage::HandleImpact(const struct FHitResult& Impact, float TimeSlice, const struct FVector& MoveDelta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHelicopterCollisionDamage", "HandleImpact");

	Params::SQHelicopterCollisionDamage_HandleImpact Parms{};

	Parms.Impact = std::move(Impact);
	Parms.TimeSlice = TimeSlice;
	Parms.MoveDelta = std::move(MoveDelta);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployableAmmoBag.BP_PickedUp
// (Event, Public, BlueprintEvent)
// Parameters:
// class ASQEquipableItem*                 EquippableAmmoBag                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeployableAmmoBag::BP_PickedUp(class ASQEquipableItem* EquippableAmmoBag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployableAmmoBag", "BP_PickedUp");

	Params::SQDeployableAmmoBag_BP_PickedUp Parms{};

	Parms.EquippableAmmoBag = EquippableAmmoBag;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQDeployableAmmoBag.OnRep_AmmoCount
// (Final, Native, Public)

void ASQDeployableAmmoBag::OnRep_AmmoCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployableAmmoBag", "OnRep_AmmoCount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployableChildActorComponent.OnDeployableStateChange
// (Native, Public)
// Parameters:
// ESQBuildState                           BuildState                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQDeployableChildActorComponent::OnDeployableStateChange(ESQBuildState BuildState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployableChildActorComponent", "OnDeployableStateChange");

	Params::SQDeployableChildActorComponent_OnDeployableStateChange Parms{};

	Parms.BuildState = BuildState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQInventoryWidget.InitWidget
// (Native, Public, BlueprintCallable)

void USQInventoryWidget::InitWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQInventoryWidget", "InitWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQInventoryWidget.SetupInventoryWidgets
// (Native, Protected, BlueprintCallable)

void USQInventoryWidget::SetupInventoryWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQInventoryWidget", "SetupInventoryWidgets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQInventoryWidget.UpdateElements
// (Final, Native, Public, BlueprintCallable)

void USQInventoryWidget::UpdateElements()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQInventoryWidget", "UpdateElements");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQInventoryWidget.UpdateInventoryWidgets
// (Final, Native, Protected)

void USQInventoryWidget::UpdateInventoryWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQInventoryWidget", "UpdateInventoryWidgets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQServerListItemWidget.ClientJoinAccepted
// (Event, Public, BlueprintEvent)

void USQServerListItemWidget::ClientJoinAccepted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQServerListItemWidget", "ClientJoinAccepted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQServerListItemWidget.GetServerURL
// (Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQServerListItemWidget::GetServerURL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQServerListItemWidget", "GetServerURL");

	Params::SQServerListItemWidget_GetServerURL Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQServerListItemWidget.ServerConnectionCheckUpdate
// (Event, Public, BlueprintEvent)
// Parameters:
// struct FSQConnectionCheckResponse       UpdateResponse                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)

void USQServerListItemWidget::ServerConnectionCheckUpdate(const struct FSQConnectionCheckResponse& UpdateResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQServerListItemWidget", "ServerConnectionCheckUpdate");

	Params::SQServerListItemWidget_ServerConnectionCheckUpdate Parms{};

	Parms.UpdateResponse = std::move(UpdateResponse);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQServerListItemWidget.SetSession
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USQServerListItemWidget::SetSession(const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQServerListItemWidget", "SetSession");

	Params::SQServerListItemWidget_SetSession Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQServerListItemWidget.UpdatePing
// (Final, Native, Public, BlueprintCallable)

void USQServerListItemWidget::UpdatePing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQServerListItemWidget", "UpdatePing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQServerListItemWidget.GetServerName
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQServerListItemWidget::GetServerName(const struct FBlueprintSessionResult& Result) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQServerListItemWidget", "GetServerName");

	Params::SQServerListItemWidget_GetServerName Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQDeployableInteractable.BP_PickedUp
// (Event, Public, BlueprintEvent)
// Parameters:
// class ASQEquipableItem*                 EquippableDeployableInteractable                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeployableInteractable::BP_PickedUp(class ASQEquipableItem* EquippableDeployableInteractable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployableInteractable", "BP_PickedUp");

	Params::SQDeployableInteractable_BP_PickedUp Parms{};

	Parms.EquippableDeployableInteractable = EquippableDeployableInteractable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQObjectiveRuleset.ClearAndGenerateMarkersForTeam
// (Native, Protected, BlueprintCallable)
// Parameters:
// ESQTeam                                 Team                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQObjectiveRuleset::ClearAndGenerateMarkersForTeam(ESQTeam Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQObjectiveRuleset", "ClearAndGenerateMarkersForTeam");

	Params::SQObjectiveRuleset_ClearAndGenerateMarkersForTeam Parms{};

	Parms.Team = Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQObjectiveRuleset.ClearAndGenerateMarkersForTeamOne
// (Native, Protected, BlueprintCallable)

void ASQObjectiveRuleset::ClearAndGenerateMarkersForTeamOne()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQObjectiveRuleset", "ClearAndGenerateMarkersForTeamOne");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQObjectiveRuleset.ClearAndGenerateMarkersForTeamTwo
// (Native, Protected, BlueprintCallable)

void ASQObjectiveRuleset::ClearAndGenerateMarkersForTeamTwo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQObjectiveRuleset", "ClearAndGenerateMarkersForTeamTwo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQObjectiveRuleset.DelayShowNewObjectives
// (Native, Protected, BlueprintCallable)
// Parameters:
// float                                   InDelay                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQObjectiveRuleset::DelayShowNewObjectives(float InDelay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQObjectiveRuleset", "DelayShowNewObjectives");

	Params::SQObjectiveRuleset_DelayShowNewObjectives Parms{};

	Parms.InDelay = InDelay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQObjectiveRuleset.GenerateMarkersForTeam
// (Native, Protected, BlueprintCallable)
// Parameters:
// ESQTeam                                 Team                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQObjectiveRuleset::GenerateMarkersForTeam(ESQTeam Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQObjectiveRuleset", "GenerateMarkersForTeam");

	Params::SQObjectiveRuleset_GenerateMarkersForTeam Parms{};

	Parms.Team = Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQObjectiveRuleset.OnObjectiveMet
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASQObjective*                     ObjectiveMet                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQObjectiveRuleset::OnObjectiveMet(class ASQObjective* ObjectiveMet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQObjectiveRuleset", "OnObjectiveMet");

	Params::SQObjectiveRuleset_OnObjectiveMet Parms{};

	Parms.ObjectiveMet = ObjectiveMet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQObjectiveRuleset.OnObjectiveShown
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASQObjective*                     ObjectiveShown                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQObjectiveRuleset::OnObjectiveShown(class ASQObjective* ObjectiveShown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQObjectiveRuleset", "OnObjectiveShown");

	Params::SQObjectiveRuleset_OnObjectiveShown Parms{};

	Parms.ObjectiveShown = ObjectiveShown;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQObjectiveRuleset.ShowNewObjectives
// (Native, Protected, BlueprintCallable)
// Parameters:
// TArray<class ASQObjective*>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ASQObjective*> ASQObjectiveRuleset::ShowNewObjectives()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQObjectiveRuleset", "ShowNewObjectives");

	Params::SQObjectiveRuleset_ShowNewObjectives Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQObjectiveRuleset.ShowNewObjectivesFromTimer
// (Native, Protected)

void ASQObjectiveRuleset::ShowNewObjectivesFromTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQObjectiveRuleset", "ShowNewObjectivesFromTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQObjectiveRuleset.RandomlySelectDistantUnusedObjectiveLocation
// (Native, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTransform                       OutTransform                                           (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQObjectiveRuleset::RandomlySelectDistantUnusedObjectiveLocation(struct FTransform* OutTransform) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQObjectiveRuleset", "RandomlySelectDistantUnusedObjectiveLocation");

	Params::SQObjectiveRuleset_RandomlySelectDistantUnusedObjectiveLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTransform != nullptr)
		*OutTransform = std::move(Parms.OutTransform);

	return Parms.ReturnValue;
}


// Function Squad.SQObjectiveRuleset.RandomlySelectUnusedObjectiveLocation
// (Native, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTransform                       OutTransform                                           (Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQObjectiveRuleset::RandomlySelectUnusedObjectiveLocation(struct FTransform* OutTransform) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQObjectiveRuleset", "RandomlySelectUnusedObjectiveLocation");

	Params::SQObjectiveRuleset_RandomlySelectUnusedObjectiveLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTransform != nullptr)
		*OutTransform = std::move(Parms.OutTransform);

	return Parms.ReturnValue;
}


// Function Squad.SQInsurgencyRuleset.CheckIntelligencePoints
// (Native, Protected, BlueprintCallable)

void ASQInsurgencyRuleset::CheckIntelligencePoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQInsurgencyRuleset", "CheckIntelligencePoints");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQInsurgencyRuleset.GetNumberOfPlayersOnServer
// (Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQInsurgencyRuleset::GetNumberOfPlayersOnServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQInsurgencyRuleset", "GetNumberOfPlayersOnServer");

	Params::SQInsurgencyRuleset_GetNumberOfPlayersOnServer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQInsurgencyRuleset.NotifyCoalitionOfCaches
// (Native, Protected)
// Parameters:
// TArray<class ASQObjective*>             NewCaches                                              (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void ASQInsurgencyRuleset::NotifyCoalitionOfCaches(const TArray<class ASQObjective*>& NewCaches)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQInsurgencyRuleset", "NotifyCoalitionOfCaches");

	Params::SQInsurgencyRuleset_NotifyCoalitionOfCaches Parms{};

	Parms.NewCaches = std::move(NewCaches);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQInsurgencyRuleset.NotifyCoalitionOfSingleCache
// (Native, Protected)

void ASQInsurgencyRuleset::NotifyCoalitionOfSingleCache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQInsurgencyRuleset", "NotifyCoalitionOfSingleCache");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.BlueprintOnFire
// (Native, Event, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Origin                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQWeapon::BlueprintOnFire(const struct FVector& Origin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "BlueprintOnFire");

	Params::SQWeapon_BlueprintOnFire Parms{};

	Parms.Origin = std::move(Origin);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.BlueprintOnPreReload
// (Event, Protected, BlueprintEvent)

void ASQWeapon::BlueprintOnPreReload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "BlueprintOnPreReload");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQWeapon.BlueprintOnReload
// (Native, Event, Protected, BlueprintEvent)

void ASQWeapon::BlueprintOnReload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "BlueprintOnReload");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.BlueprintOnReloaded
// (Event, Protected, BlueprintEvent)

void ASQWeapon::BlueprintOnReloaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "BlueprintOnReloaded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQWeapon.BlueprintOnToggleFiremode
// (Native, Event, Protected, BlueprintEvent)

void ASQWeapon::BlueprintOnToggleFiremode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "BlueprintOnToggleFiremode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.BlueprintOnZoom
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bNewZoom                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQWeapon::BlueprintOnZoom(bool bNewZoom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "BlueprintOnZoom");

	Params::SQWeapon_BlueprintOnZoom Parms{};

	Parms.bNewZoom = bNewZoom;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.FinishAdsTransition
// (Final, Native, Public)

void ASQWeapon::FinishAdsTransition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "FinishAdsTransition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.ModifyZeroing
// (Final, Native, Public)
// Parameters:
// bool                                    bIncrease                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQWeapon::ModifyZeroing(bool bIncrease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "ModifyZeroing");

	Params::SQWeapon_ModifyZeroing Parms{};

	Parms.bIncrease = bIncrease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.MulticastCancelReload
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void ASQWeapon::MulticastCancelReload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "MulticastCancelReload");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.MulticastFireMultipleProjectileEffects
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// TArray<struct FSQPenetrationProxy>      HitResultsZeroBased                                    (ConstParm, Parm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FSQShotInfo                      ShotInfoZeroBased                                      (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bIsRayTracedShot                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsManuallyCalled                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQWeapon::MulticastFireMultipleProjectileEffects(const TArray<struct FSQPenetrationProxy>& HitResultsZeroBased, const struct FSQShotInfo& ShotInfoZeroBased, bool bIsRayTracedShot, bool bIsManuallyCalled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "MulticastFireMultipleProjectileEffects");

	Params::SQWeapon_MulticastFireMultipleProjectileEffects Parms{};

	Parms.HitResultsZeroBased = std::move(HitResultsZeroBased);
	Parms.ShotInfoZeroBased = std::move(ShotInfoZeroBased);
	Parms.bIsRayTracedShot = bIsRayTracedShot;
	Parms.bIsManuallyCalled = bIsManuallyCalled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.MulticastFireProjectile
// (Net, NetReliable, Native, Event, NetMulticast, Protected, HasDefaults)
// Parameters:
// struct FVector                          OriginZeroBased                                        (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantizeNormal        ShootDir                                               (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQWeapon::MulticastFireProjectile(const struct FVector& OriginZeroBased, const struct FVector_NetQuantizeNormal& ShootDir)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "MulticastFireProjectile");

	Params::SQWeapon_MulticastFireProjectile Parms{};

	Parms.OriginZeroBased = std::move(OriginZeroBased);
	Parms.ShootDir = std::move(ShootDir);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.MulticastFireProjectileWithId
// (Net, NetReliable, Native, Event, NetMulticast, Protected, HasDefaults)
// Parameters:
// struct FVector                          OriginZeroBased                                        (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector_NetQuantizeNormal        ShootDir                                               (ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint64                                  UniqueProjectileId                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQWeapon::MulticastFireProjectileWithId(const struct FVector& OriginZeroBased, const struct FVector_NetQuantizeNormal& ShootDir, uint64 UniqueProjectileId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "MulticastFireProjectileWithId");

	Params::SQWeapon_MulticastFireProjectileWithId Parms{};

	Parms.OriginZeroBased = std::move(OriginZeroBased);
	Parms.ShootDir = std::move(ShootDir);
	Parms.UniqueProjectileId = UniqueProjectileId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.OnPawnOwnerChanged
// (Final, Native, Private)
// Parameters:
// class APawn*                            NewPawnOwner                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQWeapon::OnPawnOwnerChanged(class APawn* NewPawnOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "OnPawnOwnerChanged");

	Params::SQWeapon_OnPawnOwnerChanged Parms{};

	Parms.NewPawnOwner = NewPawnOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.OnRep_AimingDownSights
// (Native, Protected)
// Parameters:
// bool                                    bPrevAimingDownSights                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQWeapon::OnRep_AimingDownSights(bool bPrevAimingDownSights)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "OnRep_AimingDownSights");

	Params::SQWeapon_OnRep_AimingDownSights Parms{};

	Parms.bPrevAimingDownSights = bPrevAimingDownSights;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.OnRep_Firing
// (Final, Native, Protected)

void ASQWeapon::OnRep_Firing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "OnRep_Firing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.OnRep_Magazines
// (Final, Native, Public, HasOutParams)
// Parameters:
// TArray<struct FSQMagazineData>          OldMagazines                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void ASQWeapon::OnRep_Magazines(TArray<struct FSQMagazineData>* OldMagazines)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "OnRep_Magazines");

	Params::SQWeapon_OnRep_Magazines Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OldMagazines != nullptr)
		*OldMagazines = std::move(Parms.OldMagazines);
}


// Function Squad.SQWeapon.OnRep_Reloading
// (Final, Native, Protected)

void ASQWeapon::OnRep_Reloading()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "OnRep_Reloading");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.PlayFiringSound
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USoundBase*                       Sound1p                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundBase*                       Sound3p                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQWeapon::PlayFiringSound(class USoundBase* Sound1p, class USoundBase* Sound3p, const class FName& SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "PlayFiringSound");

	Params::SQWeapon_PlayFiringSound Parms{};

	Parms.Sound1p = Sound1p;
	Parms.Sound3p = Sound3p;
	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.PlayImpactEffect
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSQPenetrationTrace              PenetrationHitInputZeroBased                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    bIsProjectileTracer                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQWeapon::PlayImpactEffect(const struct FSQPenetrationTrace& PenetrationHitInputZeroBased, bool bIsProjectileTracer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "PlayImpactEffect");

	Params::SQWeapon_PlayImpactEffect Parms{};

	Parms.PenetrationHitInputZeroBased = std::move(PenetrationHitInputZeroBased);
	Parms.bIsProjectileTracer = bIsProjectileTracer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.ServerFireProjectile
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// struct FSQShotInfo                      ShotInfoZeroBased                                      (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ASQWeapon::ServerFireProjectile(const struct FSQShotInfo& ShotInfoZeroBased)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "ServerFireProjectile");

	Params::SQWeapon_ServerFireProjectile Parms{};

	Parms.ShotInfoZeroBased = std::move(ShotInfoZeroBased);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.ServerFireProjectileWithId
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// struct FSQShotInfo                      ShotInfoZeroBased                                      (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// uint64                                  UniqueProjectileId                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQWeapon::ServerFireProjectileWithId(const struct FSQShotInfo& ShotInfoZeroBased, uint64 UniqueProjectileId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "ServerFireProjectileWithId");

	Params::SQWeapon_ServerFireProjectileWithId Parms{};

	Parms.ShotInfoZeroBased = std::move(ShotInfoZeroBased);
	Parms.UniqueProjectileId = UniqueProjectileId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.ServerNotifyFireAndMiss
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// struct FSQShotInfo                      ShotInfoZeroBased                                      (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FHitResult                       HitResultZeroBased                                     (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    bIsRayTracedShot                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQWeapon::ServerNotifyFireAndMiss(const struct FSQShotInfo& ShotInfoZeroBased, const struct FHitResult& HitResultZeroBased, bool bIsRayTracedShot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "ServerNotifyFireAndMiss");

	Params::SQWeapon_ServerNotifyFireAndMiss Parms{};

	Parms.ShotInfoZeroBased = std::move(ShotInfoZeroBased);
	Parms.HitResultZeroBased = std::move(HitResultZeroBased);
	Parms.bIsRayTracedShot = bIsRayTracedShot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.ServerNotifyHit
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// struct FSQShotInfo                      ShotInfoZeroBased                                      (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<struct FSQPenetrationTrace>      TargetsZeroBased                                       (ConstParm, Parm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    bIsRayTracedShot                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsManuallyCalled                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQWeapon::ServerNotifyHit(const struct FSQShotInfo& ShotInfoZeroBased, const TArray<struct FSQPenetrationTrace>& TargetsZeroBased, bool bIsRayTracedShot, bool bIsManuallyCalled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "ServerNotifyHit");

	Params::SQWeapon_ServerNotifyHit Parms{};

	Parms.ShotInfoZeroBased = std::move(ShotInfoZeroBased);
	Parms.TargetsZeroBased = std::move(TargetsZeroBased);
	Parms.bIsRayTracedShot = bIsRayTracedShot;
	Parms.bIsManuallyCalled = bIsManuallyCalled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.ServerSetCurrentFireMode
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// int32                                   NewCurrentFireMode                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQWeapon::ServerSetCurrentFireMode(int32 NewCurrentFireMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "ServerSetCurrentFireMode");

	Params::SQWeapon_ServerSetCurrentFireMode Parms{};

	Parms.NewCurrentFireMode = NewCurrentFireMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.ServerSetIsAimingDownSights
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// bool                                    bIsAimingDownSights                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQWeapon::ServerSetIsAimingDownSights(bool bIsAimingDownSights)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "ServerSetIsAimingDownSights");

	Params::SQWeapon_ServerSetIsAimingDownSights Parms{};

	Parms.bIsAimingDownSights = bIsAimingDownSights;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.ServerStartFire
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void ASQWeapon::ServerStartFire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "ServerStartFire");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.ServerStartReload
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void ASQWeapon::ServerStartReload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "ServerStartReload");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.ServerStopFire
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void ASQWeapon::ServerStopFire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "ServerStopFire");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.SetZoom
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewZoom                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForce                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQWeapon::SetZoom(bool bNewZoom, bool bForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "SetZoom");

	Params::SQWeapon_SetZoom Parms{};

	Parms.bNewZoom = bNewZoom;
	Parms.bForce = bForce;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.StartModifyZeroing
// (Native, Event, Public, BlueprintEvent)

void ASQWeapon::StartModifyZeroing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "StartModifyZeroing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.StartReload
// (Native, Public, BlueprintCallable)

void ASQWeapon::StartReload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "StartReload");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.StopModifyZeroing
// (Native, Event, Public, BlueprintEvent)

void ASQWeapon::StopModifyZeroing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "StopModifyZeroing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.ToggleFiremode
// (Native, Public, BlueprintCallable)

void ASQWeapon::ToggleFiremode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "ToggleFiremode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.UpdateAdjustableSightAnimPos
// (Final, Native, Public)

void ASQWeapon::UpdateAdjustableSightAnimPos()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "UpdateAdjustableSightAnimPos");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.UpdateAimProneBobbing
// (Native, Protected, BlueprintCallable)

void ASQWeapon::UpdateAimProneBobbing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "UpdateAimProneBobbing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.UpdateBipod
// (Native, Protected, BlueprintCallable)

void ASQWeapon::UpdateBipod()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "UpdateBipod");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.UpdateVariableADSBipod
// (Final, Native, Private)
// Parameters:
// bool                                    bIsBipod                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQWeapon::UpdateVariableADSBipod(bool bIsBipod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "UpdateVariableADSBipod");

	Params::SQWeapon_UpdateVariableADSBipod Parms{};

	Parms.bIsBipod = bIsBipod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.UpdateVariableADSStance
// (Final, Native, Private)
// Parameters:
// ESQStance                               Stance                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQWeapon::UpdateVariableADSStance(ESQStance Stance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "UpdateVariableADSStance");

	Params::SQWeapon_UpdateVariableADSStance Parms{};

	Parms.Stance = Stance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon.CanToggleFiremode
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQWeapon::CanToggleFiremode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "CanToggleFiremode");

	Params::SQWeapon_CanToggleFiremode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQWeapon.GetAimDirection
// (Native, Event, Public, HasDefaults, BlueprintEvent, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ASQWeapon::GetAimDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "GetAimDirection");

	Params::SQWeapon_GetAimDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQWeapon.GetAimLocation
// (Native, Event, Public, HasDefaults, BlueprintEvent, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ASQWeapon::GetAimLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "GetAimLocation");

	Params::SQWeapon_GetAimLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQWeapon.GetCurrentMOA
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQWeapon::GetCurrentMOA() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "GetCurrentMOA");

	Params::SQWeapon_GetCurrentMOA Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQWeapon.GetMOAAdjustedAimDirection
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          AimDirection                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ASQWeapon::GetMOAAdjustedAimDirection(const struct FVector& AimDirection) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "GetMOAAdjustedAimDirection");

	Params::SQWeapon_GetMOAAdjustedAimDirection Parms{};

	Parms.AimDirection = std::move(AimDirection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQWeapon.GetMOAAdjustedAimDirectionFromRotator
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         AimDirection                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ASQWeapon::GetMOAAdjustedAimDirectionFromRotator(const struct FRotator& AimDirection) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "GetMOAAdjustedAimDirectionFromRotator");

	Params::SQWeapon_GetMOAAdjustedAimDirectionFromRotator Parms{};

	Parms.AimDirection = std::move(AimDirection);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQWeapon.GetProjectileSpawnTransform
// (Native, Event, Public, HasDefaults, BlueprintEvent, Const)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform ASQWeapon::GetProjectileSpawnTransform() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "GetProjectileSpawnTransform");

	Params::SQWeapon_GetProjectileSpawnTransform Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQWeapon.GetWeaponStaticInfo
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQWeaponStaticInfo*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQWeaponStaticInfo* ASQWeapon::GetWeaponStaticInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "GetWeaponStaticInfo");

	Params::SQWeapon_GetWeaponStaticInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQWeapon.GetZoomProgress
// (Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bJustToggledZoom                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQWeapon::GetZoomProgress(bool bJustToggledZoom) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "GetZoomProgress");

	Params::SQWeapon_GetZoomProgress Parms{};

	Parms.bJustToggledZoom = bJustToggledZoom;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQWeapon.IsAimingDownSights
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQWeapon::IsAimingDownSights() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "IsAimingDownSights");

	Params::SQWeapon_IsAimingDownSights Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQWeapon.IsFullyZoomed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQWeapon::IsFullyZoomed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "IsFullyZoomed");

	Params::SQWeapon_IsFullyZoomed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQWeapon.IsPendingFire
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQWeapon::IsPendingFire() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "IsPendingFire");

	Params::SQWeapon_IsPendingFire Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQWeapon.IsPullingTrigger
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQWeapon::IsPullingTrigger() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "IsPullingTrigger");

	Params::SQWeapon_IsPullingTrigger Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQWeapon.IsReloading
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQWeapon::IsReloading() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "IsReloading");

	Params::SQWeapon_IsReloading Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQWeapon.IsZoomed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQWeapon::IsZoomed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "IsZoomed");

	Params::SQWeapon_IsZoomed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQWeapon.MagazineHasAmmo
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQWeapon::MagazineHasAmmo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon", "MagazineHasAmmo");

	Params::SQWeapon_MagazineHasAmmo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQProgressWidget.BPOnTimerCanceled
// (Event, Public, BlueprintEvent)

void USQProgressWidget::BPOnTimerCanceled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProgressWidget", "BPOnTimerCanceled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQProgressWidget.BPOnTimerPaused
// (Event, Public, BlueprintEvent)

void USQProgressWidget::BPOnTimerPaused()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProgressWidget", "BPOnTimerPaused");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQProgressWidget.BPOnTimerProgress
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   RemainingPct                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQProgressWidget::BPOnTimerProgress(float RemainingPct)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProgressWidget", "BPOnTimerProgress");

	Params::SQProgressWidget_BPOnTimerProgress Parms{};

	Parms.RemainingPct = RemainingPct;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQProgressWidget.BPOnTimerReached
// (Event, Public, BlueprintEvent)

void USQProgressWidget::BPOnTimerReached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProgressWidget", "BPOnTimerReached");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQProgressWidget.BPOnTimerResumed
// (Event, Public, BlueprintEvent)

void USQProgressWidget::BPOnTimerResumed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProgressWidget", "BPOnTimerResumed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQProgressWidget.BPOnTimerStarted
// (Event, Public, BlueprintEvent)

void USQProgressWidget::BPOnTimerStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProgressWidget", "BPOnTimerStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQProgressWidget.CancelTimer
// (Final, Native, Public, BlueprintCallable)

void USQProgressWidget::CancelTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProgressWidget", "CancelTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQProgressWidget.PauseTimer
// (Final, Native, Public, BlueprintCallable)

void USQProgressWidget::PauseTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProgressWidget", "PauseTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQProgressWidget.ResumeTimer
// (Final, Native, Public, BlueprintCallable)

void USQProgressWidget::ResumeTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProgressWidget", "ResumeTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQProgressWidget.ResumeTimerFromTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   TimerStartedAt                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQProgressWidget::ResumeTimerFromTime(float TimerStartedAt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProgressWidget", "ResumeTimerFromTime");

	Params::SQProgressWidget_ResumeTimerFromTime Parms{};

	Parms.TimerStartedAt = TimerStartedAt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQProgressWidget.StartTimer
// (Final, Native, Public, BlueprintCallable)

void USQProgressWidget::StartTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProgressWidget", "StartTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQProgressWidget.ToggleTimer
// (Final, Native, Public, BlueprintCallable)

void USQProgressWidget::ToggleTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProgressWidget", "ToggleTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSeatProgressWidget.BPOnShowVehicleInventory
// (Event, Public, BlueprintEvent)

void USQSeatProgressWidget::BPOnShowVehicleInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSeatProgressWidget", "BPOnShowVehicleInventory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQSeatProgressWidget.FinishOnServer
// (Final, Native, Protected, BlueprintCallable)

void USQSeatProgressWidget::FinishOnServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSeatProgressWidget", "FinishOnServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployableVehicle.IsCurrentWeaponInputEnabled
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQDeployableVehicle::IsCurrentWeaponInputEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployableVehicle", "IsCurrentWeaponInputEnabled");

	Params::SQDeployableVehicle_IsCurrentWeaponInputEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQDeployableVehicle.LookUp
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeployableVehicle::LookUp(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployableVehicle", "LookUp");

	Params::SQDeployableVehicle_LookUp Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployableVehicle.LookUpAtRate
// (Final, Native, Protected)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeployableVehicle::LookUpAtRate(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployableVehicle", "LookUpAtRate");

	Params::SQDeployableVehicle_LookUpAtRate Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployableVehicle.Turn
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeployableVehicle::Turn(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployableVehicle", "Turn");

	Params::SQDeployableVehicle_Turn Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployableVehicle.TurnAtRate
// (Final, Native, Protected)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeployableVehicle::TurnAtRate(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployableVehicle", "TurnAtRate");

	Params::SQDeployableVehicle_TurnAtRate Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployableVehicle.GetOwnerDeployable
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQDeployable*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQDeployable* ASQDeployableVehicle::GetOwnerDeployable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployableVehicle", "GetOwnerDeployable");

	Params::SQDeployableVehicle_GetOwnerDeployable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQServerTagManager.GetPreferencesTags
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> USQServerTagManager::GetPreferencesTags()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQServerTagManager", "GetPreferencesTags");

	Params::SQServerTagManager_GetPreferencesTags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQServerTagManager.GetServerTags
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FBlueprintSessionResult          ServerSearchResult                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FSQServerTag>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FSQServerTag> USQServerTagManager::GetServerTags(const struct FBlueprintSessionResult& ServerSearchResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQServerTagManager", "GetServerTags");

	Params::SQServerTagManager_GetServerTags Parms{};

	Parms.ServerSearchResult = std::move(ServerSearchResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQServerTagManager.SetFilterByBitMask
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ESQTagType                              Section                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BitMask                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQServerTagManager::SetFilterByBitMask(const ESQTagType& Section, const int32& BitMask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQServerTagManager", "SetFilterByBitMask");

	Params::SQServerTagManager_SetFilterByBitMask Parms{};

	Parms.Section = Section;
	Parms.BitMask = BitMask;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQServerTagManager.SetSearchFilter
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     Tags                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQServerTagManager::SetSearchFilter(const TArray<class FName>& Tags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQServerTagManager", "SetSearchFilter");

	Params::SQServerTagManager_SetSearchFilter Parms{};

	Parms.Tags = std::move(Tags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQServerTagManager.GetAllFiltersInSection
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESQTagType                              Section                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FName, struct FSQServerTag>  ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FName, struct FSQServerTag> USQServerTagManager::GetAllFiltersInSection(const ESQTagType& Section) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQServerTagManager", "GetAllFiltersInSection");

	Params::SQServerTagManager_GetAllFiltersInSection Parms{};

	Parms.Section = Section;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQServerTagManager.GetFiltersBits
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESQTagType                              Section                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQServerTagManager::GetFiltersBits(const ESQTagType& Section) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQServerTagManager", "GetFiltersBits");

	Params::SQServerTagManager_GetFiltersBits Parms{};

	Parms.Section = Section;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQServerTagManager.GetTagSettings
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<ESQTagType, class FName>     ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<ESQTagType, class FName> USQServerTagManager::GetTagSettings() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQServerTagManager", "GetTagSettings");

	Params::SQServerTagManager_GetTagSettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQServerTagManager.IsFilteringEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQServerTagManager::IsFilteringEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQServerTagManager", "IsFilteringEnabled");

	Params::SQServerTagManager_IsFilteringEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQDeployableSettings.TryGetDeployableWithLayer
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USQLayer*                         InLayer                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             OutDeployable                                          (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQDeployableSettings::TryGetDeployableWithLayer(const class USQLayer* InLayer, TSoftClassPtr<class UClass>* OutDeployable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployableSettings", "TryGetDeployableWithLayer");

	Params::SQDeployableSettings_TryGetDeployableWithLayer Parms{};

	Parms.InLayer = InLayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDeployable != nullptr)
		*OutDeployable = Parms.OutDeployable;

	return Parms.ReturnValue;
}


// Function Squad.SQSpawner.ComputeSpawnPosition
// (Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSpawner::ComputeSpawnPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSpawner", "ComputeSpawnPosition");

	Params::SQSpawner_ComputeSpawnPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSpawner.InitializeSpawnerDelay
// (Native, Protected, BlueprintCallable)

void ASQSpawner::InitializeSpawnerDelay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSpawner", "InitializeSpawnerDelay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSpawner.ReportSpawnFinished
// (Final, Native, Protected, BlueprintCallable)

void ASQSpawner::ReportSpawnFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSpawner", "ReportSpawnFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSpawner.ResetSpawnerDelay
// (Native, Protected, BlueprintCallable)

void ASQSpawner::ResetSpawnerDelay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSpawner", "ResetSpawnerDelay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSpawner.SetTeam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESQTeam                                 NewTeam                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSpawner::SetTeam(ESQTeam NewTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSpawner", "SetTeam");

	Params::SQSpawner_SetTeam Parms{};

	Parms.NewTeam = NewTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSpawner.TrySpawn
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSpawner::TrySpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSpawner", "TrySpawn");

	Params::SQSpawner_TrySpawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSpawner.ComputeInitialSpawnerDelay
// (Native, Event, Protected, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FTimespan                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTimespan ASQSpawner::ComputeInitialSpawnerDelay() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSpawner", "ComputeInitialSpawnerDelay");

	Params::SQSpawner_ComputeInitialSpawnerDelay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSpawner.ComputeSpawnerDelay
// (Native, Event, Protected, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FTimespan                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTimespan ASQSpawner::ComputeSpawnerDelay() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSpawner", "ComputeSpawnerDelay");

	Params::SQSpawner_ComputeSpawnerDelay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSpawner.GetSpawnerBound
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          OutBounds                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSpawner::GetSpawnerBound(struct FVector* OutBounds) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSpawner", "GetSpawnerBound");

	Params::SQSpawner_GetSpawnerBound Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutBounds != nullptr)
		*OutBounds = std::move(Parms.OutBounds);
}


// Function Squad.SQSpawner.GetTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESQTeam                                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESQTeam ASQSpawner::GetTeam() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSpawner", "GetTeam");

	Params::SQSpawner_GetTeam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSpawner.IsConfigurationValid
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSpawner::IsConfigurationValid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSpawner", "IsConfigurationValid");

	Params::SQSpawner_IsConfigurationValid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSpawner.IsSpawnerAvailable
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSpawner::IsSpawnerAvailable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSpawner", "IsSpawnerAvailable");

	Params::SQSpawner_IsSpawnerAvailable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSpawner.IsSpawnerOverlapped
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSpawner::IsSpawnerOverlapped() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSpawner", "IsSpawnerOverlapped");

	Params::SQSpawner_IsSpawnerOverlapped Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSpawner.SpawnPositionPostProcess
// (Native, Event, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FHitResult                       HitSpawnPosition                                       (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FVector                          Bounds                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform ASQSpawner::SpawnPositionPostProcess(const struct FHitResult& HitSpawnPosition, const struct FVector& Bounds) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSpawner", "SpawnPositionPostProcess");

	Params::SQSpawner_SpawnPositionPostProcess Parms{};

	Parms.HitSpawnPosition = std::move(HitSpawnPosition);
	Parms.Bounds = std::move(Bounds);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQDeployableSpawner.OnDeployableLoaded
// (Final, Native, Protected)
// Parameters:
// TSoftClassPtr<class UClass>             InDeployableReference                                  (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQDeployableSettings*            InDeployableSettings                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeployableSpawner::OnDeployableLoaded(TSoftClassPtr<class UClass> InDeployableReference, class USQDeployableSettings* InDeployableSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployableSpawner", "OnDeployableLoaded");

	Params::SQDeployableSpawner_OnDeployableLoaded Parms{};

	Parms.InDeployableReference = InDeployableReference;
	Parms.InDeployableSettings = InDeployableSettings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployableSpawner.OnDeployableSpawned
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ASQDeployable*                    OutDeployable                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeployableSpawner::OnDeployableSpawned(class ASQDeployable* OutDeployable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployableSpawner", "OnDeployableSpawned");

	Params::SQDeployableSpawner_OnDeployableSpawned Parms{};

	Parms.OutDeployable = OutDeployable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQDeployableSpawner.StartLoadAndSpawnDeployable
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class USQDeployableSettings*            InDeployableSettings                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeployableSpawner::StartLoadAndSpawnDeployable(class USQDeployableSettings* InDeployableSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployableSpawner", "StartLoadAndSpawnDeployable");

	Params::SQDeployableSpawner_StartLoadAndSpawnDeployable Parms{};

	Parms.InDeployableSettings = InDeployableSettings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployableSpawner.CanSpawnDeployable
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USQDeployableSettings*            InAvailableDeployable                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQDeployableSpawner::CanSpawnDeployable(const class USQDeployableSettings* InAvailableDeployable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployableSpawner", "CanSpawnDeployable");

	Params::SQDeployableSpawner_CanSpawnDeployable Parms{};

	Parms.InAvailableDeployable = InAvailableDeployable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQDeployableSpawner.GetDeployablePriority
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FSQAvailabilityState_Deployable  InAvailableDeployable                                  (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQDeployableSpawner::GetDeployablePriority(const struct FSQAvailabilityState_Deployable& InAvailableDeployable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployableSpawner", "GetDeployablePriority");

	Params::SQDeployableSpawner_GetDeployablePriority Parms{};

	Parms.InAvailableDeployable = std::move(InAvailableDeployable);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQDeployableSpawner.GetDeployableReference
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USQDeployableSettings*            InDeployableSettings                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             OutDeployableReference                                 (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeployableSpawner::GetDeployableReference(class USQDeployableSettings* InDeployableSettings, TSoftClassPtr<class UClass>* OutDeployableReference) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployableSpawner", "GetDeployableReference");

	Params::SQDeployableSpawner_GetDeployableReference Parms{};

	Parms.InDeployableSettings = InDeployableSettings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDeployableReference != nullptr)
		*OutDeployableReference = Parms.OutDeployableReference;
}


// Function Squad.SQDeployableSpawner.GetDeployableToSpawn
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TArray<struct FSQAvailabilityState_Deployable>InDeployableAvailabilityStates                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState_Deployable  OutSelectedDeployable                                  (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQDeployableSpawner::GetDeployableToSpawn(const TArray<struct FSQAvailabilityState_Deployable>& InDeployableAvailabilityStates, struct FSQAvailabilityState_Deployable* OutSelectedDeployable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployableSpawner", "GetDeployableToSpawn");

	Params::SQDeployableSpawner_GetDeployableToSpawn Parms{};

	Parms.InDeployableAvailabilityStates = std::move(InDeployableAvailabilityStates);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSelectedDeployable != nullptr)
		*OutSelectedDeployable = std::move(Parms.OutSelectedDeployable);

	return Parms.ReturnValue;
}


// Function Squad.SQScriptActionExecutor.OnConditionValueUpdated
// (Final, Native, Protected)
// Parameters:
// class USQScriptCondition*               ConditionObject                                        (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQScriptActionExecutor::OnConditionValueUpdated(const class USQScriptCondition* ConditionObject, bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQScriptActionExecutor", "OnConditionValueUpdated");

	Params::SQScriptActionExecutor_OnConditionValueUpdated Parms{};

	Parms.ConditionObject = ConditionObject;
	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployableSpawnerSettings.IsDeployableMatching
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USQDeployableSettings*            InAvailableDeployable                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQDeployableSpawnerSettings::IsDeployableMatching(const class USQDeployableSettings* InAvailableDeployable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployableSpawnerSettings", "IsDeployableMatching");

	Params::SQDeployableSpawnerSettings_IsDeployableMatching Parms{};

	Parms.InAvailableDeployable = InAvailableDeployable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQDeployableSpawnerSettings.SelectDeployableToSpawn
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FSQAvailabilityState_Deployable>InDeployables                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState_Deployable  OutSelectDeployable                                    (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQDeployableSpawnerSettings::SelectDeployableToSpawn(const TArray<struct FSQAvailabilityState_Deployable>& InDeployables, struct FSQAvailabilityState_Deployable* OutSelectDeployable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployableSpawnerSettings", "SelectDeployableToSpawn");

	Params::SQDeployableSpawnerSettings_SelectDeployableToSpawn Parms{};

	Parms.InDeployables = std::move(InDeployables);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSelectDeployable != nullptr)
		*OutSelectDeployable = std::move(Parms.OutSelectDeployable);

	return Parms.ReturnValue;
}


// Function Squad.SQDeployableTripodVehicle.CycleMagnificationLevel
// (Final, Native, Public, BlueprintCallable)

void ASQDeployableTripodVehicle::CycleMagnificationLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployableTripodVehicle", "CycleMagnificationLevel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployableTripodVehicle.PlayCycleMagnificationSounds
// (Event, Protected, BlueprintEvent)

void ASQDeployableTripodVehicle::PlayCycleMagnificationSounds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployableTripodVehicle", "PlayCycleMagnificationSounds");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQDeployableTripodVehicle.ResetVehicleMagnificationLevel
// (Final, Native, Public, BlueprintCallable)

void ASQDeployableTripodVehicle::ResetVehicleMagnificationLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployableTripodVehicle", "ResetVehicleMagnificationLevel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployableTripodVehicle.SetCurrentMagnificationLevelIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewMagnificationLevelIndex                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeployableTripodVehicle::SetCurrentMagnificationLevelIndex(const int32 NewMagnificationLevelIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployableTripodVehicle", "SetCurrentMagnificationLevelIndex");

	Params::SQDeployableTripodVehicle_SetCurrentMagnificationLevelIndex Parms{};

	Parms.NewMagnificationLevelIndex = NewMagnificationLevelIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeployableTripodVehicle.ShouldUseVehicleZoom
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQDeployableTripodVehicle::ShouldUseVehicleZoom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployableTripodVehicle", "ShouldUseVehicleZoom");

	Params::SQDeployableTripodVehicle_ShouldUseVehicleZoom Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Squad.SQDeployableTripodVehicle.GetMagnificationLevels
// (Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TArray<float>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<float> ASQDeployableTripodVehicle::GetMagnificationLevels() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployableTripodVehicle", "GetMagnificationLevels");

	Params::SQDeployableTripodVehicle_GetMagnificationLevels Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Squad.SQDeployableTripodVehicle.GetTurretMovementComponent
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USQTurretMovementComponent*       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQTurretMovementComponent* ASQDeployableTripodVehicle::GetTurretMovementComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeployableTripodVehicle", "GetTurretMovementComponent");

	Params::SQDeployableTripodVehicle_GetTurretMovementComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQDestroyedVehicle.CheckIfDestroyedVehicleUnderwater
// (Final, Native, Public)

void ASQDestroyedVehicle::CheckIfDestroyedVehicleUnderwater()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDestroyedVehicle", "CheckIfDestroyedVehicleUnderwater");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDestroyedVehicle.EnableWreckPhysics
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDestroyedVehicle::EnableWreckPhysics(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDestroyedVehicle", "EnableWreckPhysics");

	Params::SQDestroyedVehicle_EnableWreckPhysics Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDestroyedVehicle.MulticastPlayDestructionEffect
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void ASQDestroyedVehicle::MulticastPlayDestructionEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDestroyedVehicle", "MulticastPlayDestructionEffect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDestroyedVehicle.OnBeginDestroyedVehicle
// (Native, Event, Public, BlueprintEvent)

void ASQDestroyedVehicle::OnBeginDestroyedVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDestroyedVehicle", "OnBeginDestroyedVehicle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDestroyedVehicle.OnEnteredWater
// (Native, Event, Public, BlueprintEvent)

void ASQDestroyedVehicle::OnEnteredWater()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDestroyedVehicle", "OnEnteredWater");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDestroyedVehicle.OnExitedWater
// (Native, Event, Public, BlueprintEvent)

void ASQDestroyedVehicle::OnExitedWater()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDestroyedVehicle", "OnExitedWater");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDestroyedVehicle.OnNiagaraVFXComplete
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UNiagaraComponent*                PSystem                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDestroyedVehicle::OnNiagaraVFXComplete(class UNiagaraComponent* PSystem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDestroyedVehicle", "OnNiagaraVFXComplete");

	Params::SQDestroyedVehicle_OnNiagaraVFXComplete Parms{};

	Parms.PSystem = PSystem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDestroyedVehicle.OnReplicationTimeComplete
// (Final, Native, Public)

void ASQDestroyedVehicle::OnReplicationTimeComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDestroyedVehicle", "OnReplicationTimeComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDestroyedVehicle.OnVFXComplete
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UParticleSystemComponent*         PSystem                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDestroyedVehicle::OnVFXComplete(class UParticleSystemComponent* PSystem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDestroyedVehicle", "OnVFXComplete");

	Params::SQDestroyedVehicle_OnVFXComplete Parms{};

	Parms.PSystem = PSystem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDestroyedVehicle.PlayFX
// (Final, Native, Public, BlueprintCallable)

void ASQDestroyedVehicle::PlayFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDestroyedVehicle", "PlayFX");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDestroyedVehicle.ResyncTimeDilationOnNiagaraComponent
// (Final, Native, Public)
// Parameters:
// class UNiagaraComponent*                NiagaraComponent                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimerHandle                     TimeDilationResetTimer                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDestroyedVehicle::ResyncTimeDilationOnNiagaraComponent(class UNiagaraComponent* NiagaraComponent, const struct FTimerHandle& TimeDilationResetTimer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDestroyedVehicle", "ResyncTimeDilationOnNiagaraComponent");

	Params::SQDestroyedVehicle_ResyncTimeDilationOnNiagaraComponent Parms{};

	Parms.NiagaraComponent = NiagaraComponent;
	Parms.TimeDilationResetTimer = std::move(TimeDilationResetTimer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDestroyedVehicle.ResyncTimeDilationOnParticleSystemComponent
// (Final, Native, Public)
// Parameters:
// class UParticleSystemComponent*         PSCEffect                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimerHandle                     TimeDilationResetTimer                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDestroyedVehicle::ResyncTimeDilationOnParticleSystemComponent(class UParticleSystemComponent* PSCEffect, const struct FTimerHandle& TimeDilationResetTimer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDestroyedVehicle", "ResyncTimeDilationOnParticleSystemComponent");

	Params::SQDestroyedVehicle_ResyncTimeDilationOnParticleSystemComponent Parms{};

	Parms.PSCEffect = PSCEffect;
	Parms.TimeDilationResetTimer = std::move(TimeDilationResetTimer);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDestroyedVehicle.SetInitialMovement
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InInitialVelocity                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InInitialAngularVelocity                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDestroyedVehicle::SetInitialMovement(const struct FVector& InInitialVelocity, const struct FVector& InInitialAngularVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDestroyedVehicle", "SetInitialMovement");

	Params::SQDestroyedVehicle_SetInitialMovement Parms{};

	Parms.InInitialVelocity = std::move(InInitialVelocity);
	Parms.InInitialAngularVelocity = std::move(InInitialAngularVelocity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDestroyedVehicle.StopReplication
// (Native, Event, Public, BlueprintEvent)

void ASQDestroyedVehicle::StopReplication()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDestroyedVehicle", "StopReplication");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDestroyedVehicle.TransferBurningLastingEffect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ASQLastingEffect*                 LastingEffect                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDestroyedVehicle::TransferBurningLastingEffect(class ASQLastingEffect* LastingEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDestroyedVehicle", "TransferBurningLastingEffect");

	Params::SQDestroyedVehicle_TransferBurningLastingEffect Parms{};

	Parms.LastingEffect = LastingEffect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQLicensedServerManager.IsServerPromoted
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQLicensedServerManager::IsServerPromoted(const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLicensedServerManager", "IsServerPromoted");

	Params::SQLicensedServerManager_IsServerPromoted Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQDeveloperCameraMan.ActorTrace
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* ASQDeveloperCameraMan::ActorTrace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeveloperCameraMan", "ActorTrace");

	Params::SQDeveloperCameraMan_ActorTrace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQDeveloperCameraMan.ClearWrecks
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)

void ASQDeveloperCameraMan::ClearWrecks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeveloperCameraMan", "ClearWrecks");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeveloperCameraMan.DamageVehicleComponent
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// class USQVehicleComponent*              Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DamageAmount                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSQDamageModifier>        AllowableDamageTypes                                   (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TSubclassOf<class UDamageType>          DamageType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeveloperCameraMan::DamageVehicleComponent(class USQVehicleComponent* Component, float DamageAmount, const TArray<struct FSQDamageModifier>& AllowableDamageTypes, TSubclassOf<class UDamageType> DamageType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeveloperCameraMan", "DamageVehicleComponent");

	Params::SQDeveloperCameraMan_DamageVehicleComponent Parms{};

	Parms.Component = Component;
	Parms.DamageAmount = DamageAmount;
	Parms.AllowableDamageTypes = std::move(AllowableDamageTypes);
	Parms.DamageType = DamageType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeveloperCameraMan.GetToolMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EToolMode                               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EToolMode ASQDeveloperCameraMan::GetToolMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeveloperCameraMan", "GetToolMode");

	Params::SQDeveloperCameraMan_GetToolMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQDeveloperCameraMan.OnActorPlaced
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeveloperCameraMan::OnActorPlaced(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeveloperCameraMan", "OnActorPlaced");

	Params::SQDeveloperCameraMan_OnActorPlaced Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeveloperCameraMan.OnGhostDestroyed
// (Final, Native, Protected)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeveloperCameraMan::OnGhostDestroyed(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeveloperCameraMan", "OnGhostDestroyed");

	Params::SQDeveloperCameraMan_OnGhostDestroyed Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeveloperCameraMan.OnStartTrackingTarget
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           TrackedActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeveloperCameraMan::OnStartTrackingTarget(class AActor* TrackedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeveloperCameraMan", "OnStartTrackingTarget");

	Params::SQDeveloperCameraMan_OnStartTrackingTarget Parms{};

	Parms.TrackedActor = TrackedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeveloperCameraMan.ReplaceExistingGhost
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USQSpawnableItemBase*             SpawnableItem                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       SpawnTransform                                         (ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class ASQSpawnableGhost*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQSpawnableGhost* ASQDeveloperCameraMan::ReplaceExistingGhost(class USQSpawnableItemBase* SpawnableItem, const struct FTransform& SpawnTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeveloperCameraMan", "ReplaceExistingGhost");

	Params::SQDeveloperCameraMan_ReplaceExistingGhost Parms{};

	Parms.SpawnableItem = SpawnableItem;
	Parms.SpawnTransform = std::move(SpawnTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQDeveloperCameraMan.SelectionTrace
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* ASQDeveloperCameraMan::SelectionTrace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeveloperCameraMan", "SelectionTrace");

	Params::SQDeveloperCameraMan_SelectionTrace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQDeveloperCameraMan.SetMouseMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMouseMode                              NewMode                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeveloperCameraMan::SetMouseMode(EMouseMode NewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeveloperCameraMan", "SetMouseMode");

	Params::SQDeveloperCameraMan_SetMouseMode Parms{};

	Parms.NewMode = NewMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeveloperCameraMan.SetSoldierRole
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable)
// Parameters:
// class ASQSoldier*                       Soldier                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQRoleSettings*                  RoleSettings                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeveloperCameraMan::SetSoldierRole(class ASQSoldier* Soldier, class USQRoleSettings* RoleSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeveloperCameraMan", "SetSoldierRole");

	Params::SQDeveloperCameraMan_SetSoldierRole Parms{};

	Parms.Soldier = Soldier;
	Parms.RoleSettings = RoleSettings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeveloperCameraMan.SetToolMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EToolMode                               NewMode                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeveloperCameraMan::SetToolMode(EToolMode NewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeveloperCameraMan", "SetToolMode");

	Params::SQDeveloperCameraMan_SetToolMode Parms{};

	Parms.NewMode = NewMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeveloperCameraMan.SetTrackPlayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ASQPlayerState*                   TargetPlayer                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeveloperCameraMan::SetTrackPlayer(class ASQPlayerState* TargetPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeveloperCameraMan", "SetTrackPlayer");

	Params::SQDeveloperCameraMan_SetTrackPlayer Parms{};

	Parms.TargetPlayer = TargetPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeveloperCameraMan.SetTrackTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQDeveloperCameraMan::SetTrackTarget(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeveloperCameraMan", "SetTrackTarget");

	Params::SQDeveloperCameraMan_SetTrackTarget Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeveloperCameraMan.SpawnNewDeployable
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults, BlueprintCallable)
// Parameters:
// TSubclassOf<class ASQDeployable>        DeployableClass                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Team                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQBuildState                           BuildState                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQDeployableSettings*            Settings                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       Transform                                              (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ASQDeveloperCameraMan::SpawnNewDeployable(TSubclassOf<class ASQDeployable> DeployableClass, int32 Team, ESQBuildState BuildState, class USQDeployableSettings* Settings, const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeveloperCameraMan", "SpawnNewDeployable");

	Params::SQDeveloperCameraMan_SpawnNewDeployable Parms{};

	Parms.DeployableClass = DeployableClass;
	Parms.Team = Team;
	Parms.BuildState = BuildState;
	Parms.Settings = Settings;
	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeveloperCameraMan.SpawnNewSoldier
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults, BlueprintCallable)
// Parameters:
// TSubclassOf<class ASQSoldier>           Param_Class                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQRoleSettings*                  RoleSetting                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQTeam                                 Team                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       Transform                                              (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ASQDeveloperCameraMan::SpawnNewSoldier(TSubclassOf<class ASQSoldier> Param_Class, class USQRoleSettings* RoleSetting, const ESQTeam Team, const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeveloperCameraMan", "SpawnNewSoldier");

	Params::SQDeveloperCameraMan_SpawnNewSoldier Parms{};

	Parms.Param_Class = Param_Class;
	Parms.RoleSetting = RoleSetting;
	Parms.Team = Team;
	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeveloperCameraMan.SpawnNewVehicle
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults, BlueprintCallable)
// Parameters:
// TSubclassOf<class ASQVehicle>           Param_Class                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQVehicleSettings*               VehicleSetting                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQTeam                                 Team                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       Transform                                              (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ASQDeveloperCameraMan::SpawnNewVehicle(TSubclassOf<class ASQVehicle> Param_Class, class USQVehicleSettings* VehicleSetting, const ESQTeam Team, const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeveloperCameraMan", "SpawnNewVehicle");

	Params::SQDeveloperCameraMan_SpawnNewVehicle Parms{};

	Parms.Param_Class = Param_Class;
	Parms.VehicleSetting = VehicleSetting;
	Parms.Team = Team;
	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeveloperCameraMan.ToggleMenu
// (Native, Event, Public, BlueprintEvent)

void ASQDeveloperCameraMan::ToggleMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeveloperCameraMan", "ToggleMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDeveloperCameraMan.CameraTrace
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FHitResult                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

struct FHitResult ASQDeveloperCameraMan::CameraTrace() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeveloperCameraMan", "CameraTrace");

	Params::SQDeveloperCameraMan_CameraTrace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQDeveloperCameraMan.IsTracking
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQDeveloperCameraMan::IsTracking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDeveloperCameraMan", "IsTracking");

	Params::SQDeveloperCameraMan_IsTracking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQDiplomacyService.GetRelationShip
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class ISQTeamInterface>InActorA                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// TScriptInterface<class ISQTeamInterface>InActorB                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// ESQTeamRelationShip                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESQTeamRelationShip USQDiplomacyService::GetRelationShip(const class UObject* WorldContextObject, TScriptInterface<class ISQTeamInterface> InActorA, TScriptInterface<class ISQTeamInterface> InActorB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQDiplomacyService", "GetRelationShip");

	Params::SQDiplomacyService_GetRelationShip Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InActorA = InActorA;
	Parms.InActorB = InActorB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQDiplomacyService.GetRelationShipByIds
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQTeam                                 InTeamIdA                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQTeam                                 InTeamIdB                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQTeamRelationShip                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESQTeamRelationShip USQDiplomacyService::GetRelationShipByIds(const class UObject* WorldContextObject, const ESQTeam InTeamIdA, const ESQTeam InTeamIdB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQDiplomacyService", "GetRelationShipByIds");

	Params::SQDiplomacyService_GetRelationShipByIds Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InTeamIdA = InTeamIdA;
	Parms.InTeamIdB = InTeamIdB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQDiplomacyService.GetRelationShipByIndex
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InTeamIdA                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InTeamIdB                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQTeamRelationShip                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESQTeamRelationShip USQDiplomacyService::GetRelationShipByIndex(const class UObject* WorldContextObject, const int32 InTeamIdA, const int32 InTeamIdB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQDiplomacyService", "GetRelationShipByIndex");

	Params::SQDiplomacyService_GetRelationShipByIndex Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InTeamIdA = InTeamIdA;
	Parms.InTeamIdB = InTeamIdB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQDiplomacyService.GetRelationShipByTeams
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ASQTeam*                          InTeamA                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQTeam*                          InTeamB                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQTeamRelationShip                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESQTeamRelationShip USQDiplomacyService::GetRelationShipByTeams(const class ASQTeam* InTeamA, const class ASQTeam* InTeamB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQDiplomacyService", "GetRelationShipByTeams");

	Params::SQDiplomacyService_GetRelationShipByTeams Parms{};

	Parms.InTeamA = InTeamA;
	Parms.InTeamB = InTeamB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQDiplomacyService.GetTeamsFromRelationShip
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class ISQTeamInterface>InActor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// TArray<ESQTeamRelationShip>             InRelationShips                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<int32>                           OutTeamIds                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USQDiplomacyService::GetTeamsFromRelationShip(const class UObject* WorldContextObject, TScriptInterface<class ISQTeamInterface> InActor, const TArray<ESQTeamRelationShip>& InRelationShips, TArray<int32>* OutTeamIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQDiplomacyService", "GetTeamsFromRelationShip");

	Params::SQDiplomacyService_GetTeamsFromRelationShip Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InActor = InActor;
	Parms.InRelationShips = std::move(InRelationShips);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTeamIds != nullptr)
		*OutTeamIds = std::move(Parms.OutTeamIds);
}


// Function Squad.SQDiplomacyService.GetTeamsFromRelationShipById
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQTeam                                 InTeamId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<ESQTeamRelationShip>             InRelationShips                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<int32>                           OutTeamIds                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USQDiplomacyService::GetTeamsFromRelationShipById(const class UObject* WorldContextObject, const ESQTeam InTeamId, const TArray<ESQTeamRelationShip>& InRelationShips, TArray<int32>* OutTeamIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQDiplomacyService", "GetTeamsFromRelationShipById");

	Params::SQDiplomacyService_GetTeamsFromRelationShipById Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InTeamId = InTeamId;
	Parms.InRelationShips = std::move(InRelationShips);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTeamIds != nullptr)
		*OutTeamIds = std::move(Parms.OutTeamIds);
}


// Function Squad.SQDiplomacyService.GetTeamsFromRelationShipByTeam
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ASQTeam*                          InTeam                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<ESQTeamRelationShip>             InRelationShips                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<int32>                           OutTeamIds                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USQDiplomacyService::GetTeamsFromRelationShipByTeam(const class ASQTeam* InTeam, const TArray<ESQTeamRelationShip>& InRelationShips, TArray<int32>* OutTeamIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQDiplomacyService", "GetTeamsFromRelationShipByTeam");

	Params::SQDiplomacyService_GetTeamsFromRelationShipByTeam Parms{};

	Parms.InTeam = InTeam;
	Parms.InRelationShips = std::move(InRelationShips);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTeamIds != nullptr)
		*OutTeamIds = std::move(Parms.OutTeamIds);
}


// Function Squad.SQDiplomacyService.GetTeamsFromRelationShipSet
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class ISQTeamInterface>InActor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// TSet<ESQTeamRelationShip>               InRelationShips                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<int32>                           OutTeamIds                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USQDiplomacyService::GetTeamsFromRelationShipSet(const class UObject* WorldContextObject, TScriptInterface<class ISQTeamInterface> InActor, const TSet<ESQTeamRelationShip>& InRelationShips, TArray<int32>* OutTeamIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQDiplomacyService", "GetTeamsFromRelationShipSet");

	Params::SQDiplomacyService_GetTeamsFromRelationShipSet Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InActor = InActor;
	Parms.InRelationShips = std::move(InRelationShips);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTeamIds != nullptr)
		*OutTeamIds = std::move(Parms.OutTeamIds);
}


// Function Squad.SQDiplomacyService.GetTeamsFromRelationShipSetById
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQTeam                                 InTeamId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSet<ESQTeamRelationShip>               InRelationShips                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<int32>                           OutTeamIds                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USQDiplomacyService::GetTeamsFromRelationShipSetById(const class UObject* WorldContextObject, const ESQTeam InTeamId, const TSet<ESQTeamRelationShip>& InRelationShips, TArray<int32>* OutTeamIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQDiplomacyService", "GetTeamsFromRelationShipSetById");

	Params::SQDiplomacyService_GetTeamsFromRelationShipSetById Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InTeamId = InTeamId;
	Parms.InRelationShips = std::move(InRelationShips);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTeamIds != nullptr)
		*OutTeamIds = std::move(Parms.OutTeamIds);
}


// Function Squad.SQDiplomacyService.GetTeamsFromRelationShipSetByTeam
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ASQTeam*                          InTeam                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSet<ESQTeamRelationShip>               InRelationShips                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<int32>                           OutTeamIds                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USQDiplomacyService::GetTeamsFromRelationShipSetByTeam(const class ASQTeam* InTeam, const TSet<ESQTeamRelationShip>& InRelationShips, TArray<int32>* OutTeamIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQDiplomacyService", "GetTeamsFromRelationShipSetByTeam");

	Params::SQDiplomacyService_GetTeamsFromRelationShipSetByTeam Parms{};

	Parms.InTeam = InTeam;
	Parms.InRelationShips = std::move(InRelationShips);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTeamIds != nullptr)
		*OutTeamIds = std::move(Parms.OutTeamIds);
}


// Function Squad.SQDiplomacyService.GetTeamsFromSingleRelationShip
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class ISQTeamInterface>InActor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// ESQTeamRelationShip                     InRelationShip                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           OutTeamIds                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USQDiplomacyService::GetTeamsFromSingleRelationShip(const class UObject* WorldContextObject, TScriptInterface<class ISQTeamInterface> InActor, const ESQTeamRelationShip InRelationShip, TArray<int32>* OutTeamIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQDiplomacyService", "GetTeamsFromSingleRelationShip");

	Params::SQDiplomacyService_GetTeamsFromSingleRelationShip Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InActor = InActor;
	Parms.InRelationShip = InRelationShip;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTeamIds != nullptr)
		*OutTeamIds = std::move(Parms.OutTeamIds);
}


// Function Squad.SQDiplomacyService.GetTeamsFromSingleRelationShipById
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQTeam                                 InTeamId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQTeamRelationShip                     InRelationShip                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           OutTeamIds                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USQDiplomacyService::GetTeamsFromSingleRelationShipById(const class UObject* WorldContextObject, const ESQTeam InTeamId, const ESQTeamRelationShip InRelationShip, TArray<int32>* OutTeamIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQDiplomacyService", "GetTeamsFromSingleRelationShipById");

	Params::SQDiplomacyService_GetTeamsFromSingleRelationShipById Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InTeamId = InTeamId;
	Parms.InRelationShip = InRelationShip;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTeamIds != nullptr)
		*OutTeamIds = std::move(Parms.OutTeamIds);
}


// Function Squad.SQDiplomacyService.GetTeamsFromSingleRelationShipByTeam
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ASQTeam*                          InTeam                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQTeamRelationShip                     InRelationShip                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           OutTeamIds                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USQDiplomacyService::GetTeamsFromSingleRelationShipByTeam(const class ASQTeam* InTeam, const ESQTeamRelationShip InRelationShip, TArray<int32>* OutTeamIds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQDiplomacyService", "GetTeamsFromSingleRelationShipByTeam");

	Params::SQDiplomacyService_GetTeamsFromSingleRelationShipByTeam Parms{};

	Parms.InTeam = InTeam;
	Parms.InRelationShip = InRelationShip;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTeamIds != nullptr)
		*OutTeamIds = std::move(Parms.OutTeamIds);
}


// Function Squad.SQRotorsAnimInstance.GetRotationByBoneName
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             BoneName                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator                   ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

const struct FRotator USQRotorsAnimInstance::GetRotationByBoneName(const class FName BoneName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRotorsAnimInstance", "GetRotationByBoneName");

	Params::SQRotorsAnimInstance_GetRotationByBoneName Parms{};

	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPrimaryData.GetLogId
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQPrimaryData::GetLogId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPrimaryData", "GetLogId");

	Params::SQPrimaryData_GetLogId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPrimaryData.GetModID
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQPrimaryData::GetModID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPrimaryData", "GetModID");

	Params::SQPrimaryData_GetModID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPrimaryData.GetDisplayName
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             OutDisplayName                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQPrimaryData::GetDisplayName(class FText* OutDisplayName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPrimaryData", "GetDisplayName");

	Params::SQPrimaryData_GetDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDisplayName != nullptr)
		*OutDisplayName = std::move(Parms.OutDisplayName);

	return Parms.ReturnValue;
}


// Function Squad.SQPrimaryData.GetId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName USQPrimaryData::GetId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPrimaryData", "GetId");

	Params::SQPrimaryData_GetId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPrimaryData.GetIdAsString
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQPrimaryData::GetIdAsString() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPrimaryData", "GetIdAsString");

	Params::SQPrimaryData_GetIdAsString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQLayer.AddObjectiveLocation
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSQLayerPOIData                  POI                                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USQLayer::AddObjectiveLocation(const struct FSQLayerPOIData& POI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLayer", "AddObjectiveLocation");

	Params::SQLayer_AddObjectiveLocation Parms{};

	Parms.POI = std::move(POI);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQLayer.ResetObjectivesLocation
// (Final, Native, Public, BlueprintCallable)

void USQLayer::ResetObjectivesLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLayer", "ResetObjectivesLocation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQLayer.CanVoteForFactionConcurrently
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQLayer::CanVoteForFactionConcurrently() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLayer", "CanVoteForFactionConcurrently");

	Params::SQLayer_CanVoteForFactionConcurrently Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Squad.SQLayer.GetCompatibleFactionSetups
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   InTeam                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FName, class USQFactionSetup*>InAvailableFactionSetups                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class USQFactionSetup*>          OutCompatibleFactionSetups                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQLayer::GetCompatibleFactionSetups(const int32 InTeam, const TMap<class FName, class USQFactionSetup*>& InAvailableFactionSetups, TArray<class USQFactionSetup*>* OutCompatibleFactionSetups) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLayer", "GetCompatibleFactionSetups");

	Params::SQLayer_GetCompatibleFactionSetups Parms{};

	Parms.InTeam = InTeam;
	Parms.InAvailableFactionSetups = std::move(InAvailableFactionSetups);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutCompatibleFactionSetups != nullptr)
		*OutCompatibleFactionSetups = std::move(Parms.OutCompatibleFactionSetups);

	return Parms.ReturnValue;
}


// Function Squad.SQLayer.GetDefaultFactionSetup
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// int32                                   TeamId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQFactionSetup*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQFactionSetup* USQLayer::GetDefaultFactionSetup(const int32& TeamId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLayer", "GetDefaultFactionSetup");

	Params::SQLayer_GetDefaultFactionSetup Parms{};

	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQLayer.GetFactionSetupByID
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// class FName                             FactionID                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQFactionSetup*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQFactionSetup* USQLayer::GetFactionSetupByID(const class FName& FactionID, const int32& TeamId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLayer", "GetFactionSetupByID");

	Params::SQLayer_GetFactionSetupByID Parms{};

	Parms.FactionID = FactionID;
	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQLayer.GetFactionSetupByIDType
// (Final, Native, Public, HasOutParams, BlueprintCallable, Const)
// Parameters:
// class FName                             FactionID                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             FactionType                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQFactionSetup*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQFactionSetup* USQLayer::GetFactionSetupByIDType(const class FName& FactionID, const class FName& FactionType, const int32& TeamId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLayer", "GetFactionSetupByIDType");

	Params::SQLayer_GetFactionSetupByIDType Parms{};

	Parms.FactionID = FactionID;
	Parms.FactionType = FactionType;
	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQLayer.GetFobRadiusTableRow
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const struct FDataTableRowHandle        ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FDataTableRowHandle USQLayer::GetFobRadiusTableRow() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLayer", "GetFobRadiusTableRow");

	Params::SQLayer_GetFobRadiusTableRow Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Squad.SQLayer.GetGameModeID
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName USQLayer::GetGameModeID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLayer", "GetGameModeID");

	Params::SQLayer_GetGameModeID Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Squad.SQLayer.GetLayerSize
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName USQLayer::GetLayerSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLayer", "GetLayerSize");

	Params::SQLayer_GetLayerSize Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Squad.SQLayer.GetMapNames
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FString>                   OutMapNames                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQLayer::GetMapNames(TArray<class FString>* OutMapNames) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLayer", "GetMapNames");

	Params::SQLayer_GetMapNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMapNames != nullptr)
		*OutMapNames = std::move(Parms.OutMapNames);

	return Parms.ReturnValue;
}


// Function Squad.SQLayer.GetMapPaths
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FString>                   OutMapPaths                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQLayer::GetMapPaths(TArray<class FString>* OutMapPaths) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLayer", "GetMapPaths");

	Params::SQLayer_GetMapPaths Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMapPaths != nullptr)
		*OutMapPaths = std::move(Parms.OutMapPaths);

	return Parms.ReturnValue;
}


// Function Squad.SQLayer.HasFactionSetupChoice
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   InTeam                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQFactionSetup*                  OutSpecificFaction                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     Excluded                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQLayer::HasFactionSetupChoice(const int32 InTeam, class USQFactionSetup** OutSpecificFaction, const TArray<class FName>& Excluded) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLayer", "HasFactionSetupChoice");

	Params::SQLayer_HasFactionSetupChoice Parms{};

	Parms.InTeam = InTeam;
	Parms.Excluded = std::move(Excluded);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSpecificFaction != nullptr)
		*OutSpecificFaction = Parms.OutSpecificFaction;

	return Parms.ReturnValue;
}


// Function Squad.SQLayer.HasMapName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           MapName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQLayer::HasMapName(const class FString& MapName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLayer", "HasMapName");

	Params::SQLayer_HasMapName Parms{};

	Parms.MapName = std::move(MapName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQLayer.HasMapPath
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           MapPath                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQLayer::HasMapPath(const class FString& MapPath) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLayer", "HasMapPath");

	Params::SQLayer_HasMapPath Parms{};

	Parms.MapPath = std::move(MapPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQLayer.HasTeamConfig
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQLayer::HasTeamConfig(int32 TeamId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLayer", "HasTeamConfig");

	Params::SQLayer_HasTeamConfig Parms{};

	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQLayer.TryGetAvailabilityModifierPct
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   InTeam                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQAvailability*                  InAvailability                                         (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutModifier                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQLayer::TryGetAvailabilityModifierPct(const int32 InTeam, const class USQAvailability* InAvailability, int32* OutModifier) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLayer", "TryGetAvailabilityModifierPct");

	Params::SQLayer_TryGetAvailabilityModifierPct Parms{};

	Parms.InTeam = InTeam;
	Parms.InAvailability = InAvailability;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutModifier != nullptr)
		*OutModifier = Parms.OutModifier;

	return Parms.ReturnValue;
}


// Function Squad.SQLayer.TryGetDisplayName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FText                             OutDisplayName                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQLayer::TryGetDisplayName(class FText* OutDisplayName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLayer", "TryGetDisplayName");

	Params::SQLayer_TryGetDisplayName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutDisplayName != nullptr)
		*OutDisplayName = std::move(Parms.OutDisplayName);

	return Parms.ReturnValue;
}


// Function Squad.SQLayer.TryGetGameModeName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FText                             OutGameMode                                            (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQLayer::TryGetGameModeName(class FText* OutGameMode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLayer", "TryGetGameModeName");

	Params::SQLayer_TryGetGameModeName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutGameMode != nullptr)
		*OutGameMode = std::move(Parms.OutGameMode);

	return Parms.ReturnValue;
}


// Function Squad.SQLayer.TryGetGameModeShortName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FText                             OutGameMode                                            (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQLayer::TryGetGameModeShortName(class FText* OutGameMode) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLayer", "TryGetGameModeShortName");

	Params::SQLayer_TryGetGameModeShortName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutGameMode != nullptr)
		*OutGameMode = std::move(Parms.OutGameMode);

	return Parms.ReturnValue;
}


// Function Squad.SQLayer.TryGetLayerStagingDuration
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FTimespan                        OutDuration                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQLayer::TryGetLayerStagingDuration(struct FTimespan* OutDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLayer", "TryGetLayerStagingDuration");

	Params::SQLayer_TryGetLayerStagingDuration Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutDuration != nullptr)
		*OutDuration = std::move(Parms.OutDuration);

	return Parms.ReturnValue;
}


// Function Squad.SQLayer.TryGetLoadingMusic
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USoundBase*                       OutLoadingMusic                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQLayer::TryGetLoadingMusic(class USoundBase** OutLoadingMusic) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLayer", "TryGetLoadingMusic");

	Params::SQLayer_TryGetLoadingMusic Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLoadingMusic != nullptr)
		*OutLoadingMusic = Parms.OutLoadingMusic;

	return Parms.ReturnValue;
}


// Function Squad.SQLayer.TryGetTeamConfig
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USQLayerTeamConfig>   LayerTeamConfigClass                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQLayerTeamConfig*               OutTeamConfig                                          (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQLayer::TryGetTeamConfig(int32 TeamId, TSubclassOf<class USQLayerTeamConfig> LayerTeamConfigClass, class USQLayerTeamConfig** OutTeamConfig) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLayer", "TryGetTeamConfig");

	Params::SQLayer_TryGetTeamConfig Parms{};

	Parms.TeamId = TeamId;
	Parms.LayerTeamConfigClass = LayerTeamConfigClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTeamConfig != nullptr)
		*OutTeamConfig = Parms.OutTeamConfig;

	return Parms.ReturnValue;
}


// Function Squad.SQLayer.ValidateFactions
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FSQLayerSettings                 LayerSettings                                          (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void USQLayer::ValidateFactions(struct FSQLayerSettings* LayerSettings) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLayer", "ValidateFactions");

	Params::SQLayer_ValidateFactions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (LayerSettings != nullptr)
		*LayerSettings = std::move(Parms.LayerSettings);
}


// Function Squad.SQDrawChatWidget.DrawWidget
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USQDrawChatWidget*                ChatWidget                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPaintContext                    Context                                                (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USQDrawChatWidget::DrawWidget(class USQDrawChatWidget* ChatWidget, struct FPaintContext& Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQDrawChatWidget", "DrawWidget");

	Params::SQDrawChatWidget_DrawWidget Parms{};

	Parms.ChatWidget = ChatWidget;
	Parms.Context = std::move(Context);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
}


// Function Squad.SQDrawChatWidget.InitWidget
// (Native, Public, BlueprintCallable)

void USQDrawChatWidget::InitWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDrawChatWidget", "InitWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleComponent.GetParentVehicle
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class ASQVehicle*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQVehicle* USQVehicleComponent::GetParentVehicle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleComponent", "GetParentVehicle");

	Params::SQVehicleComponent_GetParentVehicle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleComponent.MulticastComponentDestroyed
// (Net, NetReliable, Native, Event, NetMulticast, Protected, NetValidate)
// Parameters:
// TSubclassOf<class UDamageType>          DamageTypeClass                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVehicleComponent::MulticastComponentDestroyed(TSubclassOf<class UDamageType> DamageTypeClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleComponent", "MulticastComponentDestroyed");

	Params::SQVehicleComponent_MulticastComponentDestroyed Parms{};

	Parms.DamageTypeClass = DamageTypeClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleComponent.MulticastComponentFullyRepaired
// (Net, NetReliable, Native, Event, NetMulticast, Protected, NetValidate)

void USQVehicleComponent::MulticastComponentFullyRepaired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleComponent", "MulticastComponentFullyRepaired");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleComponent.MulticastComponentRepairedFromDestruction
// (Net, NetReliable, Native, Event, NetMulticast, Protected, NetValidate)

void USQVehicleComponent::MulticastComponentRepairedFromDestruction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleComponent", "MulticastComponentRepairedFromDestruction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleComponent.OnRep_HealthChanged
// (Native, Protected)
// Parameters:
// float                                   PreviousHealthValue                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVehicleComponent::OnRep_HealthChanged(float PreviousHealthValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleComponent", "OnRep_HealthChanged");

	Params::SQVehicleComponent_OnRep_HealthChanged Parms{};

	Parms.PreviousHealthValue = PreviousHealthValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleComponent.OnRep_VehicleComponentState
// (Final, Native, Private)
// Parameters:
// ESQVehicleComponentStates               PreviousState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVehicleComponent::OnRep_VehicleComponentState(ESQVehicleComponentStates PreviousState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleComponent", "OnRep_VehicleComponentState");

	Params::SQVehicleComponent_OnRep_VehicleComponentState Parms{};

	Parms.PreviousState = PreviousState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleComponent.SetHealth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewHealth                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVehicleComponent::SetHealth(float NewHealth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleComponent", "SetHealth");

	Params::SQVehicleComponent_SetHealth Parms{};

	Parms.NewHealth = NewHealth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleComponent.GetHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQVehicleComponent::GetHealth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleComponent", "GetHealth");

	Params::SQVehicleComponent_GetHealth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleComponent.GetMaximumHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQVehicleComponent::GetMaximumHealth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleComponent", "GetMaximumHealth");

	Params::SQVehicleComponent_GetMaximumHealth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleComponent.GetNormalizedHealth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQVehicleComponent::GetNormalizedHealth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleComponent", "GetNormalizedHealth");

	Params::SQVehicleComponent_GetNormalizedHealth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleComponent.GetPreviousVehicleComponentState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESQVehicleComponentStates               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESQVehicleComponentStates USQVehicleComponent::GetPreviousVehicleComponentState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleComponent", "GetPreviousVehicleComponentState");

	Params::SQVehicleComponent_GetPreviousVehicleComponentState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleComponent.GetVehicleComponentState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESQVehicleComponentStates               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESQVehicleComponentStates USQVehicleComponent::GetVehicleComponentState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleComponent", "GetVehicleComponentState");

	Params::SQVehicleComponent_GetVehicleComponentState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleComponent.IsDestroyed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVehicleComponent::IsDestroyed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleComponent", "IsDestroyed");

	Params::SQVehicleComponent_IsDestroyed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMagazineWidget.InitWidget
// (Native, Public, BlueprintCallable)

void USQMagazineWidget::InitWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMagazineWidget", "InitWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDriveTrainComponent.OnDriveTrainComponentBeginOverlap
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USQDriveTrainComponent::OnDriveTrainComponentBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDriveTrainComponent", "OnDriveTrainComponentBeginOverlap");

	Params::SQDriveTrainComponent_OnDriveTrainComponentBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQDriveTrainComponent.OnDriveTrainComponentEndOverlap
// (Final, Native, Public)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQDriveTrainComponent::OnDriveTrainComponentEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQDriveTrainComponent", "OnDriveTrainComponentEndOverlap");

	Params::SQDriveTrainComponent_OnDriveTrainComponentEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEditorPlaySettings.GetEditorPlaySettings
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USQEditorPlaySettings*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQEditorPlaySettings* USQEditorPlaySettings::GetEditorPlaySettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQEditorPlaySettings", "GetEditorPlaySettings");

	Params::SQEditorPlaySettings_GetEditorPlaySettings Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEditorPlaySettings.RemoveCustomOption
// (Final, Native, Static, Public)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQEditorPlaySettings::RemoveCustomOption(const class FString& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQEditorPlaySettings", "RemoveCustomOption");

	Params::SQEditorPlaySettings_RemoveCustomOption Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEditorPlaySettings.SetCustomOption
// (Final, Native, Static, Public)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQEditorPlaySettings::SetCustomOption(const class FString& Key, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQEditorPlaySettings", "SetCustomOption");

	Params::SQEditorPlaySettings_SetCustomOption Parms{};

	Parms.Key = std::move(Key);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEditorPlaySettings.TryGetEditorFactionSetup
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ESQTeam                                 InTeam                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQFactionSetup*                  OutFactionSetup                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQEditorPlaySettings::TryGetEditorFactionSetup(const ESQTeam InTeam, class USQFactionSetup** OutFactionSetup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEditorPlaySettings", "TryGetEditorFactionSetup");

	Params::SQEditorPlaySettings_TryGetEditorFactionSetup Parms{};

	Parms.InTeam = InTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFactionSetup != nullptr)
		*OutFactionSetup = Parms.OutFactionSetup;

	return Parms.ReturnValue;
}


// Function Squad.SQEditorPlaySettings.TryGetEditorSQLayer
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USQLayer*                         OutEditorLayer                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQEditorPlaySettings::TryGetEditorSQLayer(class USQLayer** OutEditorLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEditorPlaySettings", "TryGetEditorSQLayer");

	Params::SQEditorPlaySettings_TryGetEditorSQLayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutEditorLayer != nullptr)
		*OutEditorLayer = Parms.OutEditorLayer;

	return Parms.ReturnValue;
}


// Function Squad.SQEditorPlaySettings.TryGetEditorSQLevel
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USQLevel*                         OutEditorLevel                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQEditorPlaySettings::TryGetEditorSQLevel(class USQLevel** OutEditorLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEditorPlaySettings", "TryGetEditorSQLevel");

	Params::SQEditorPlaySettings_TryGetEditorSQLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutEditorLevel != nullptr)
		*OutEditorLevel = Parms.OutEditorLevel;

	return Parms.ReturnValue;
}


// Function Squad.SQEditorPlaySettings.HasLayerOverride
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQEditorPlaySettings::HasLayerOverride() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEditorPlaySettings", "HasLayerOverride");

	Params::SQEditorPlaySettings_HasLayerOverride Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEmotePlayer.MulticastCancelEmote
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class FName                             EmoteName                                              (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQEmotePlayer::MulticastCancelEmote(const class FName& EmoteName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEmotePlayer", "MulticastCancelEmote");

	Params::SQEmotePlayer_MulticastCancelEmote Parms{};

	Parms.EmoteName = EmoteName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEmotePlayer.MulticastPlayEmote
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class FName                             EmoteName                                              (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint16                                  RandomVal                                              (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQEmotePlayer::MulticastPlayEmote(const class FName& EmoteName, const uint16& RandomVal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEmotePlayer", "MulticastPlayEmote");

	Params::SQEmotePlayer_MulticastPlayEmote Parms{};

	Parms.EmoteName = EmoteName;
	Parms.RandomVal = RandomVal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEmotePlayer.CanPlayEmote
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQEmotesData*                    Emote                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQEmotePlayer::CanPlayEmote(const class USQEmotesData* Emote) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEmotePlayer", "CanPlayEmote");

	Params::SQEmotePlayer_CanPlayEmote Parms{};

	Parms.Emote = Emote;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEmotePlayer.CanShowEmotesWheel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQEmotePlayer::CanShowEmotesWheel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEmotePlayer", "CanShowEmotesWheel");

	Params::SQEmotePlayer_CanShowEmotesWheel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEmotePlayer.GetRestrictionText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQEmotesData*                    Emote                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> USQEmotePlayer::GetRestrictionText(const class USQEmotesData* Emote) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEmotePlayer", "GetRestrictionText");

	Params::SQEmotePlayer_GetRestrictionText Parms{};

	Parms.Emote = Emote;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEmotePlayer.IsEmotePlaying
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQEmotesData*                    Emote                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQEmotePlayer::IsEmotePlaying(const class USQEmotesData* Emote) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEmotePlayer", "IsEmotePlaying");

	Params::SQEmotePlayer_IsEmotePlaying Parms{};

	Parms.Emote = Emote;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQLastingEffect.Activate
// (Final, Native, Public, BlueprintCallable)

void ASQLastingEffect::Activate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLastingEffect", "Activate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQLastingEffect.Deactivate
// (Final, Native, Public, BlueprintCallable)

void ASQLastingEffect::Deactivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLastingEffect", "Deactivate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQLastingEffect.OnActorHitEvent
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           SelfActor                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASQLastingEffect::OnActorHitEvent(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLastingEffect", "OnActorHitEvent");

	Params::SQLastingEffect_OnActorHitEvent Parms{};

	Parms.SelfActor = SelfActor;
	Parms.OtherActor = OtherActor;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQLastingEffect.OnBeginPlayTimerExpired
// (Native, Event, Public, BlueprintEvent)

void ASQLastingEffect::OnBeginPlayTimerExpired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLastingEffect", "OnBeginPlayTimerExpired");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQLastingEffect.OnDestroyedEvent
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           DestroyedActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQLastingEffect::OnDestroyedEvent(class AActor* DestroyedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLastingEffect", "OnDestroyedEvent");

	Params::SQLastingEffect_OnDestroyedEvent Parms{};

	Parms.DestroyedActor = DestroyedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQLastingEffect.OnTriggerLastingEffectEvent
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ASQLastingEffect::OnTriggerLastingEffectEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLastingEffect", "OnTriggerLastingEffectEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQLastingEffect.OnTriggerLastingEffectTimerExpired
// (Native, Event, Public, BlueprintEvent)

void ASQLastingEffect::OnTriggerLastingEffectTimerExpired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLastingEffect", "OnTriggerLastingEffectTimerExpired");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEmoteProp.RunAnimation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ASQEmoteProp::RunAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEmoteProp", "RunAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEmoteProp.SetPropData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSQEmotePropData                 InStructInfo                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ASQEmoteProp::SetPropData(const struct FSQEmotePropData& InStructInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEmoteProp", "SetPropData");

	Params::SQEmoteProp_SetPropData Parms{};

	Parms.InStructInfo = std::move(InStructInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEmotesData.GetRestrictionsText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> USQEmotesData::GetRestrictionsText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEmotesData", "GetRestrictionsText");

	Params::SQEmotesData_GetRestrictionsText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEmoteItemWidget.OnHover
// (Final, Native, Public, BlueprintCallable)

void USQEmoteItemWidget::OnHover()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEmoteItemWidget", "OnHover");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEmoteItemWidget.IsNew
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQEmoteItemWidget::IsNew() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEmoteItemWidget", "IsNew");

	Params::SQEmoteItemWidget_IsNew Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEmoteItemWidget.IsOwned
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQEmoteItemWidget::IsOwned() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEmoteItemWidget", "IsOwned");

	Params::SQEmoteItemWidget_IsOwned Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMap.SetWorldCoords
// (Native, Public, BlueprintCallable)

void USQMap::SetWorldCoords()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMap", "SetWorldCoords");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMap.UpdateTickZoom
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        MapCoords                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQMap::UpdateTickZoom(float DeltaTime, struct FVector2D* MapCoords)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMap", "UpdateTickZoom");

	Params::SQMap_UpdateTickZoom Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MapCoords != nullptr)
		*MapCoords = std::move(Parms.MapCoords);
}


// Function Squad.SQMap.ZoomSwitch
// (Native, Public, BlueprintCallable)

void USQMap::ZoomSwitch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMap", "ZoomSwitch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMap.CalculatePathDistanceAndAngle
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        PointStart                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        PointEnd                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQMap::CalculatePathDistanceAndAngle(const struct FVector2D& PointStart, const struct FVector2D& PointEnd, float* Distance, float* Angle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMap", "CalculatePathDistanceAndAngle");

	Params::SQMap_CalculatePathDistanceAndAngle Parms{};

	Parms.PointStart = std::move(PointStart);
	Parms.PointEnd = std::move(PointEnd);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Distance != nullptr)
		*Distance = Parms.Distance;

	if (Angle != nullptr)
		*Angle = Parms.Angle;
}


// Function Squad.SQMap.GetCurrentTeam
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQMap::GetCurrentTeam() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMap", "GetCurrentTeam");

	Params::SQMap_GetCurrentTeam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMap.GetCursorNormalizedPos
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D USQMap::GetCursorNormalizedPos() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMap", "GetCursorNormalizedPos");

	Params::SQMap_GetCursorNormalizedPos Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMap.GetCursorPos
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D USQMap::GetCursorPos() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMap", "GetCursorPos");

	Params::SQMap_GetCursorPos Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMap.GetMajorGridSpacingInCM
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQMap::GetMajorGridSpacingInCM() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMap", "GetMajorGridSpacingInCM");

	Params::SQMap_GetMajorGridSpacingInCM Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMap.GetMapDisplayName
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText USQMap::GetMapDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMap", "GetMapDisplayName");

	Params::SQMap_GetMapDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMap.IsCursorOverMapPos
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    OutbIsOverMap                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D USQMap::IsCursorOverMapPos(bool* OutbIsOverMap) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMap", "IsCursorOverMapPos");

	Params::SQMap_IsCursorOverMapPos Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutbIsOverMap != nullptr)
		*OutbIsOverMap = Parms.OutbIsOverMap;

	return Parms.ReturnValue;
}


// Function Squad.SQMap.IsInCameraMan
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              SQPlayerController                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQMap::IsInCameraMan(class ASQPlayerController* SQPlayerController) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMap", "IsInCameraMan");

	Params::SQMap_IsInCameraMan Parms{};

	Parms.SQPlayerController = SQPlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMap.IsSquadLeader
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQMap::IsSquadLeader() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMap", "IsSquadLeader");

	Params::SQMap_IsSquadLeader Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMap.TranslateInverseMapCoords
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        InCoords                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D USQMap::TranslateInverseMapCoords(const struct FVector2D& InCoords) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMap", "TranslateInverseMapCoords");

	Params::SQMap_TranslateInverseMapCoords Parms{};

	Parms.InCoords = std::move(InCoords);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMap.TranslateMapCoords
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        InCoords                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D USQMap::TranslateMapCoords(const struct FVector2D& InCoords) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMap", "TranslateMapCoords");

	Params::SQMap_TranslateMapCoords Parms{};

	Parms.InCoords = std::move(InCoords);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMap.TranslateMapCoordsIsInRange
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        InCoords                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OutbIsInRange                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D USQMap::TranslateMapCoordsIsInRange(const struct FVector2D& InCoords, bool* OutbIsInRange) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMap", "TranslateMapCoordsIsInRange");

	Params::SQMap_TranslateMapCoordsIsInRange Parms{};

	Parms.InCoords = std::move(InCoords);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutbIsInRange != nullptr)
		*OutbIsInRange = Parms.OutbIsInRange;

	return Parms.ReturnValue;
}


// Function Squad.SQMap.TranslateMapPathBorderClamp
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        InCoords                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OutbIsClamped                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D USQMap::TranslateMapPathBorderClamp(const struct FVector2D& InCoords, bool* OutbIsClamped) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMap", "TranslateMapPathBorderClamp");

	Params::SQMap_TranslateMapPathBorderClamp Parms{};

	Parms.InCoords = std::move(InCoords);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutbIsClamped != nullptr)
		*OutbIsClamped = Parms.OutbIsClamped;

	return Parms.ReturnValue;
}


// Function Squad.SQMap.TranslateMapToWorld
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        InCoords                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USQMap::TranslateMapToWorld(const struct FVector2D& InCoords) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMap", "TranslateMapToWorld");

	Params::SQMap_TranslateMapToWorld Parms{};

	Parms.InCoords = std::move(InCoords);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMap.TranslateMapToWorldRayTrace
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        InCoords                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USQMap::TranslateMapToWorldRayTrace(const struct FVector2D& InCoords) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMap", "TranslateMapToWorldRayTrace");

	Params::SQMap_TranslateMapToWorldRayTrace Parms{};

	Parms.InCoords = std::move(InCoords);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMap.TranslateWorldToMapAnchorsDirect
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          InWorldCoords                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D USQMap::TranslateWorldToMapAnchorsDirect(const struct FVector& InWorldCoords) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMap", "TranslateWorldToMapAnchorsDirect");

	Params::SQMap_TranslateWorldToMapAnchorsDirect Parms{};

	Parms.InWorldCoords = std::move(InWorldCoords);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMap.TranslateWorldToMapZoom
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          InWorldCoords                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OutbIsInRange                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D USQMap::TranslateWorldToMapZoom(const struct FVector& InWorldCoords, bool* OutbIsInRange) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMap", "TranslateWorldToMapZoom");

	Params::SQMap_TranslateWorldToMapZoom Parms{};

	Parms.InWorldCoords = std::move(InWorldCoords);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutbIsInRange != nullptr)
		*OutbIsInRange = Parms.OutbIsInRange;

	return Parms.ReturnValue;
}


// Function Squad.SQLockButtonWidget.OnPressed
// (Final, Native, Protected, BlueprintCallable)

void USQLockButtonWidget::OnPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLockButtonWidget", "OnPressed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEnvironmentInteraction.ApplyFrontProjection
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQEnvironmentInteraction::ApplyFrontProjection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEnvironmentInteraction", "ApplyFrontProjection");

	Params::SQEnvironmentInteraction_ApplyFrontProjection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEnvironmentInteraction.AreBiomeParamsValid
// (BlueprintCosmetic, Native, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQEnvironmentInteraction::AreBiomeParamsValid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEnvironmentInteraction", "AreBiomeParamsValid");

	Params::SQEnvironmentInteraction_AreBiomeParamsValid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEnvironmentInteraction.ByteToFloat
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// uint8                                   Input                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQEnvironmentInteraction::ByteToFloat(uint8 Input)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEnvironmentInteraction", "ByteToFloat");

	Params::SQEnvironmentInteraction_ByteToFloat Parms{};

	Parms.Input = Input;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEnvironmentInteraction.CanTrace
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQEnvironmentInteraction::CanTrace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEnvironmentInteraction", "CanTrace");

	Params::SQEnvironmentInteraction_CanTrace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEnvironmentInteraction.CosmeticUpdate
// (BlueprintCosmetic, Native, Event, Protected, BlueprintEvent)

void USQEnvironmentInteraction::CosmeticUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEnvironmentInteraction", "CosmeticUpdate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEnvironmentInteraction.CreateMIDs
// (BlueprintCosmetic, Native, Event, Protected, BlueprintEvent)

void USQEnvironmentInteraction::CreateMIDs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEnvironmentInteraction", "CreateMIDs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEnvironmentInteraction.FloatToByte
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Input                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 USQEnvironmentInteraction::FloatToByte(float Input)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEnvironmentInteraction", "FloatToByte");

	Params::SQEnvironmentInteraction_FloatToByte Parms{};

	Parms.Input = Input;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEnvironmentInteraction.Initialize
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQEnvironmentInteraction::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEnvironmentInteraction", "Initialize");

	Params::SQEnvironmentInteraction_Initialize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEnvironmentInteraction.OnRep_BottomRep
// (Native, Event, Protected, BlueprintEvent)

void USQEnvironmentInteraction::OnRep_BottomRep()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEnvironmentInteraction", "OnRep_BottomRep");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEnvironmentInteraction.OnRep_FrontRep
// (Native, Event, Protected, BlueprintEvent)

void USQEnvironmentInteraction::OnRep_FrontRep()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEnvironmentInteraction", "OnRep_FrontRep");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEnvironmentInteraction.PassBiomeParamsToMIDs
// (BlueprintCosmetic, Native, Protected)

void USQEnvironmentInteraction::PassBiomeParamsToMIDs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEnvironmentInteraction", "PassBiomeParamsToMIDs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEnvironmentInteraction.PauseUpdates
// (Native, Protected, BlueprintCallable)

void USQEnvironmentInteraction::PauseUpdates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEnvironmentInteraction", "PauseUpdates");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEnvironmentInteraction.ServerForceUpdate
// (BlueprintAuthorityOnly, Native, Event, Protected, BlueprintEvent)

void USQEnvironmentInteraction::ServerForceUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEnvironmentInteraction", "ServerForceUpdate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEnvironmentInteraction.StartUpdates
// (Native, Protected, BlueprintCallable)

void USQEnvironmentInteraction::StartUpdates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEnvironmentInteraction", "StartUpdates");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEnvironmentInteraction.Update
// (BlueprintAuthorityOnly, Native, Event, Protected, BlueprintEvent)

void USQEnvironmentInteraction::Update()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEnvironmentInteraction", "Update");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQEnvironmentInteraction.UpdateShaderValues
// (BlueprintCosmetic, Native, Event, Protected, BlueprintEvent)
// Parameters:
// float                                   NewStrength                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsFront                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQEnvironmentInteraction::UpdateShaderValues(float NewStrength, bool IsFront)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEnvironmentInteraction", "UpdateShaderValues");

	Params::SQEnvironmentInteraction_UpdateShaderValues Parms{};

	Parms.NewStrength = NewStrength;
	Parms.IsFront = IsFront;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapMK2.MapCalculateOffsets
// (Native, Public, BlueprintCallable)

void USQMapMK2::MapCalculateOffsets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMK2", "MapCalculateOffsets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapMK2.MapFollowPlayer
// (Native, Public, BlueprintCallable)

void USQMapMK2::MapFollowPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMK2", "MapFollowPlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapMK2.UpdateDrawOffsets
// (Native, Public, BlueprintCallable)

void USQMapMK2::UpdateDrawOffsets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMK2", "UpdateDrawOffsets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapMK2.UpdatePosition
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        NewMapCoord                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQMapMK2::UpdatePosition(const struct FVector2D& NewMapCoord)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMK2", "UpdatePosition");

	Params::SQMapMK2_UpdatePosition Parms{};

	Parms.NewMapCoord = std::move(NewMapCoord);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQFaction.TryGetFactionShortName
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             OutName                                                (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQFaction::TryGetFactionShortName(class FText* OutName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFaction", "TryGetFactionShortName");

	Params::SQFaction_TryGetFactionShortName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutName != nullptr)
		*OutName = std::move(Parms.OutName);

	return Parms.ReturnValue;
}


// Function Squad.SQFaction.TryGetFlagForFullScreen
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        OutTexture                                             (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQFaction::TryGetFlagForFullScreen(TSoftObjectPtr<class UTexture2D>* OutTexture) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFaction", "TryGetFlagForFullScreen");

	Params::SQFaction_TryGetFlagForFullScreen Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutTexture != nullptr)
		*OutTexture = Parms.OutTexture;

	return Parms.ReturnValue;
}


// Function Squad.SQFaction.TryGetFlagForMap
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        OutTexture                                             (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQFaction::TryGetFlagForMap(TSoftObjectPtr<class UTexture2D>* OutTexture) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFaction", "TryGetFlagForMap");

	Params::SQFaction_TryGetFlagForMap Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutTexture != nullptr)
		*OutTexture = Parms.OutTexture;

	return Parms.ReturnValue;
}


// Function Squad.SQFaction.TryGetRallyPointMesh
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USQLayer*                         Layer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UStaticMesh>       OutMesh                                                (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQFaction::TryGetRallyPointMesh(class USQLayer* Layer, TSoftObjectPtr<class UStaticMesh>* OutMesh) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFaction", "TryGetRallyPointMesh");

	Params::SQFaction_TryGetRallyPointMesh Parms{};

	Parms.Layer = Layer;

	UObject::ProcessEvent(Func, &Parms);

	if (OutMesh != nullptr)
		*OutMesh = Parms.OutMesh;

	return Parms.ReturnValue;
}


// Function Squad.SQTeamActor.OnRep_Team
// (Native, Public)

void ASQTeamActor::OnRep_Team()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamActor", "OnRep_Team");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTeamActor.SetTeam
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESQTeam                                 Param_Team                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQTeamActor::SetTeam(ESQTeam Param_Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamActor", "SetTeam");

	Params::SQTeamActor_SetTeam Parms{};

	Parms.Param_Team = Param_Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTeamActor.GetTeam
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESQTeam                                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESQTeam ASQTeamActor::GetTeam() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamActor", "GetTeam");

	Params::SQTeamActor_GetTeam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQFactionSetup.CanPlayAgainst
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USQFactionSetup*                  OtherFaction                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQFactionSetup::CanPlayAgainst(const class USQFactionSetup* OtherFaction) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFactionSetup", "CanPlayAgainst");

	Params::SQFactionSetup_CanPlayAgainst Parms{};

	Parms.OtherFaction = OtherFaction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQFactionSetup.GetFactionTypeName
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName USQFactionSetup::GetFactionTypeName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFactionSetup", "GetFactionTypeName");

	Params::SQFactionSetup_GetFactionTypeName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHealingEquipableItem.OnRep_HealedTarget
// (Final, Native, Protected)
// Parameters:
// class ASQSoldier*                       PreviousHealedTarget                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQHealingEquipableItem::OnRep_HealedTarget(class ASQSoldier* PreviousHealedTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHealingEquipableItem", "OnRep_HealedTarget");

	Params::SQHealingEquipableItem_OnRep_HealedTarget Parms{};

	Parms.PreviousHealedTarget = PreviousHealedTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapBoundary.CalcKillTimestamp
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class UObject>              Param_Class                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQMapBoundary::CalcKillTimestamp(const TSubclassOf<class UObject>& Param_Class)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapBoundary", "CalcKillTimestamp");

	Params::SQMapBoundary_CalcKillTimestamp Parms{};

	Parms.Param_Class = Param_Class;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMapBoundary.FindKillTime
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class UObject>              Param_Class                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQMapBoundary::FindKillTime(const TSubclassOf<class UObject>& Param_Class)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapBoundary", "FindKillTime");

	Params::SQMapBoundary_FindKillTime Parms{};

	Parms.Param_Class = Param_Class;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQFieldDressing.Revive
// (Final, Native, Private)

void ASQFieldDressing::Revive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFieldDressing", "Revive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQFieldDressing.StopBleeding
// (Final, Native, Private)

void ASQFieldDressing::StopBleeding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFieldDressing", "StopBleeding");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeapon_Effects.InterpRecoil
// (Native, Public)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQWeapon_Effects::InterpRecoil(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeapon_Effects", "InterpRecoil");

	Params::SQWeapon_Effects_InterpRecoil Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleWeapon.SoldierEntersVehicle
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASQSoldier*                       Soldier                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQVehicleWeapon::SoldierEntersVehicle(class ASQSoldier* Soldier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleWeapon", "SoldierEntersVehicle");

	Params::SQVehicleWeapon_SoldierEntersVehicle Parms{};

	Parms.Soldier = Soldier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleWeapon.SoldierLeavesVehicle
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASQSoldier*                       Soldier                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQVehicleWeapon::SoldierLeavesVehicle(class ASQSoldier* Soldier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleWeapon", "SoldierLeavesVehicle");

	Params::SQVehicleWeapon_SoldierLeavesVehicle Parms{};

	Parms.Soldier = Soldier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleWeapon.GetOwnerSeat
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQVehicleSeat*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQVehicleSeat* ASQVehicleWeapon::GetOwnerSeat() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleWeapon", "GetOwnerSeat");

	Params::SQVehicleWeapon_GetOwnerSeat Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleWeapon.GetSoldier
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQSoldier*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQSoldier* ASQVehicleWeapon::GetSoldier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleWeapon", "GetSoldier");

	Params::SQVehicleWeapon_GetSoldier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleWeapon.GetWeaponRotation
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator ASQVehicleWeapon::GetWeaponRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleWeapon", "GetWeaponRotation");

	Params::SQVehicleWeapon_GetWeaponRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleSmokeGenerator.MulticastActivate
// (Net, NetReliable, Native, Event, NetMulticast, Protected)

void ASQVehicleSmokeGenerator::MulticastActivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSmokeGenerator", "MulticastActivate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleSmokeGenerator.MulticastDeactivate
// (Net, NetReliable, Native, Event, NetMulticast, Protected)

void ASQVehicleSmokeGenerator::MulticastDeactivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSmokeGenerator", "MulticastDeactivate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleSmokeGenerator.ServerStopGenerator
// (Net, NetReliable, Native, Event, Protected, NetServer)

void ASQVehicleSmokeGenerator::ServerStopGenerator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSmokeGenerator", "ServerStopGenerator");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleSmokeGenerator.ServerUseGenerator
// (Net, NetReliable, Native, Event, Protected, NetServer)

void ASQVehicleSmokeGenerator::ServerUseGenerator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSmokeGenerator", "ServerUseGenerator");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleSmokeGenerator.SetupParticleSystem
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                           OwnerActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQVehicleSmokeGenerator::SetupParticleSystem(class AActor* OwnerActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSmokeGenerator", "SetupParticleSystem");

	Params::SQVehicleSmokeGenerator_SetupParticleSystem Parms{};

	Parms.OwnerActor = OwnerActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQVehicleSmokeGenerator.SpawnSmokeStart
// (Final, Native, Protected)

void ASQVehicleSmokeGenerator::SpawnSmokeStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSmokeGenerator", "SpawnSmokeStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleSmokeGenerator.SpawnSmokeStop
// (Final, Native, Protected)

void ASQVehicleSmokeGenerator::SpawnSmokeStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSmokeGenerator", "SpawnSmokeStop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQFindSessionsCallbackProxy.GetAnticheatProtected
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQFindSessionsCallbackProxy::GetAnticheatProtected(const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQFindSessionsCallbackProxy", "GetAnticheatProtected");

	Params::SQFindSessionsCallbackProxy_GetAnticheatProtected Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQFindSessionsCallbackProxy.GetCurrentPlayers
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQFindSessionsCallbackProxy::GetCurrentPlayers(const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQFindSessionsCallbackProxy", "GetCurrentPlayers");

	Params::SQFindSessionsCallbackProxy_GetCurrentPlayers Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQFindSessionsCallbackProxy.GetGameMode
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQFindSessionsCallbackProxy::GetGameMode(const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQFindSessionsCallbackProxy", "GetGameMode");

	Params::SQFindSessionsCallbackProxy_GetGameMode Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQFindSessionsCallbackProxy.GetGameVersion
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQFindSessionsCallbackProxy::GetGameVersion(const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQFindSessionsCallbackProxy", "GetGameVersion");

	Params::SQFindSessionsCallbackProxy_GetGameVersion Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQFindSessionsCallbackProxy.GetLicensedServer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          Param_WorldContextObject                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQFindSessionsCallbackProxy::GetLicensedServer(class UObject* Param_WorldContextObject, const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQFindSessionsCallbackProxy", "GetLicensedServer");

	Params::SQFindSessionsCallbackProxy_GetLicensedServer Parms{};

	Parms.Param_WorldContextObject = Param_WorldContextObject;
	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQFindSessionsCallbackProxy.GetLicenseID
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQFindSessionsCallbackProxy::GetLicenseID(const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQFindSessionsCallbackProxy", "GetLicenseID");

	Params::SQFindSessionsCallbackProxy_GetLicenseID Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQFindSessionsCallbackProxy.GetMapName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQFindSessionsCallbackProxy::GetMapName(const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQFindSessionsCallbackProxy", "GetMapName");

	Params::SQFindSessionsCallbackProxy_GetMapName Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQFindSessionsCallbackProxy.GetMatchTimeout
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQFindSessionsCallbackProxy::GetMatchTimeout(const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQFindSessionsCallbackProxy", "GetMatchTimeout");

	Params::SQFindSessionsCallbackProxy_GetMatchTimeout Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQFindSessionsCallbackProxy.GetMaxPlayers
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQFindSessionsCallbackProxy::GetMaxPlayers(const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQFindSessionsCallbackProxy", "GetMaxPlayers");

	Params::SQFindSessionsCallbackProxy_GetMaxPlayers Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQFindSessionsCallbackProxy.GetPasswordProtected
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQFindSessionsCallbackProxy::GetPasswordProtected(const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQFindSessionsCallbackProxy", "GetPasswordProtected");

	Params::SQFindSessionsCallbackProxy_GetPasswordProtected Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQFindSessionsCallbackProxy.GetPingInMs
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQFindSessionsCallbackProxy::GetPingInMs(const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQFindSessionsCallbackProxy", "GetPingInMs");

	Params::SQFindSessionsCallbackProxy_GetPingInMs Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQFindSessionsCallbackProxy.GetReservedSlots
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQFindSessionsCallbackProxy::GetReservedSlots(const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQFindSessionsCallbackProxy", "GetReservedSlots");

	Params::SQFindSessionsCallbackProxy_GetReservedSlots Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQFindSessionsCallbackProxy.GetSearchKeywords
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQFindSessionsCallbackProxy::GetSearchKeywords(const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQFindSessionsCallbackProxy", "GetSearchKeywords");

	Params::SQFindSessionsCallbackProxy_GetSearchKeywords Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQFindSessionsCallbackProxy.GetServerName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQFindSessionsCallbackProxy::GetServerName(const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQFindSessionsCallbackProxy", "GetServerName");

	Params::SQFindSessionsCallbackProxy_GetServerName Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQFindSessionsCallbackProxy.GetSessionFlagStruct
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSQSessionFlagStruct             ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSQSessionFlagStruct USQFindSessionsCallbackProxy::GetSessionFlagStruct(const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQFindSessionsCallbackProxy", "GetSessionFlagStruct");

	Params::SQFindSessionsCallbackProxy_GetSessionFlagStruct Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQFindSessionsCallbackProxy.IsSameServer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintSessionResult          ResultA                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FBlueprintSessionResult          ResultB                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQFindSessionsCallbackProxy::IsSameServer(const struct FBlueprintSessionResult& ResultA, const struct FBlueprintSessionResult& ResultB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQFindSessionsCallbackProxy", "IsSameServer");

	Params::SQFindSessionsCallbackProxy_IsSameServer Parms{};

	Parms.ResultA = std::move(ResultA);
	Parms.ResultB = std::move(ResultB);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQFindSessionsCallbackProxy.OnServerPingResponse
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FBlueprintSessionResult          SessionResult                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Ping                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQFindSessionsCallbackProxy::OnServerPingResponse(const struct FBlueprintSessionResult& SessionResult, float Ping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFindSessionsCallbackProxy", "OnServerPingResponse");

	Params::SQFindSessionsCallbackProxy_OnServerPingResponse Parms{};

	Parms.SessionResult = std::move(SessionResult);
	Parms.Ping = Ping;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQFlagScoringRuleset.OnFlagStateChange
// (Native, Public)
// Parameters:
// class USQCaptureZoneComponent*          CaptureZone                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   Team                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQFlagScoringRuleset::OnFlagStateChange(class USQCaptureZoneComponent* CaptureZone, uint8 Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFlagScoringRuleset", "OnFlagStateChange");

	Params::SQFlagScoringRuleset_OnFlagStateChange Parms{};

	Parms.CaptureZone = CaptureZone;
	Parms.Team = Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQFlagScoringRuleset.OnFlagTick
// (Native, Public)

void ASQFlagScoringRuleset::OnFlagTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFlagScoringRuleset", "OnFlagTick");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleTurret.IsCurrentWeaponInputEnabled
// (Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQVehicleTurret::IsCurrentWeaponInputEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleTurret", "IsCurrentWeaponInputEnabled");

	Params::SQVehicleTurret_IsCurrentWeaponInputEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleTurret.GetTurretMovementComponent
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USQTurretMovementComponent*       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQTurretMovementComponent* ASQVehicleTurret::GetTurretMovementComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleTurret", "GetTurretMovementComponent");

	Params::SQVehicleTurret_GetTurretMovementComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQFoliageBender.GetSoldierLocationAndSpread
// (Final, Native, Protected, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ASQSoldier*                       Soldier                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   X                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SpreadMultiplier                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQFoliageBender::GetSoldierLocationAndSpread(class ASQSoldier* Soldier, float* X, float* Y, float* Z, float* SpreadMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFoliageBender", "GetSoldierLocationAndSpread");

	Params::SQFoliageBender_GetSoldierLocationAndSpread Parms{};

	Parms.Soldier = Soldier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (X != nullptr)
		*X = Parms.X;

	if (Y != nullptr)
		*Y = Parms.Y;

	if (Z != nullptr)
		*Z = Parms.Z;

	if (SpreadMultiplier != nullptr)
		*SpreadMultiplier = Parms.SpreadMultiplier;
}


// Function Squad.SQForceNetMovementComponent.AddForce
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Force                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQForceNetMovementComponent::AddForce(const struct FVector& Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForceNetMovementComponent", "AddForce");

	Params::SQForceNetMovementComponent_AddForce Parms{};

	Parms.Force = std::move(Force);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQForceNetMovementComponent.AddForceAtLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Force                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TorqueMultiplier                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQForceNetMovementComponent::AddForceAtLocation(const struct FVector& Force, const struct FVector& Position, float TorqueMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForceNetMovementComponent", "AddForceAtLocation");

	Params::SQForceNetMovementComponent_AddForceAtLocation Parms{};

	Parms.Force = std::move(Force);
	Parms.Position = std::move(Position);
	Parms.TorqueMultiplier = TorqueMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQForceNetMovementComponent.AddForceAtLocationWithTorqueMultiplier
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Force                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TorqueMultiplier                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQForceNetMovementComponent::AddForceAtLocationWithTorqueMultiplier(const struct FVector& Force, const struct FVector& Position, const struct FVector& TorqueMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForceNetMovementComponent", "AddForceAtLocationWithTorqueMultiplier");

	Params::SQForceNetMovementComponent_AddForceAtLocationWithTorqueMultiplier Parms{};

	Parms.Force = std::move(Force);
	Parms.Position = std::move(Position);
	Parms.TorqueMultiplier = std::move(TorqueMultiplier);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQForceNetMovementComponent.AddPitchTorque
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQForceNetMovementComponent::AddPitchTorque(float Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForceNetMovementComponent", "AddPitchTorque");

	Params::SQForceNetMovementComponent_AddPitchTorque Parms{};

	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQForceNetMovementComponent.AddRollTorque
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQForceNetMovementComponent::AddRollTorque(float Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForceNetMovementComponent", "AddRollTorque");

	Params::SQForceNetMovementComponent_AddRollTorque Parms{};

	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQForceNetMovementComponent.AddTorque
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Torque                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQForceNetMovementComponent::AddTorque(const struct FVector& Torque)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForceNetMovementComponent", "AddTorque");

	Params::SQForceNetMovementComponent_AddTorque Parms{};

	Parms.Torque = std::move(Torque);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQForceNetMovementComponent.AddYawTorque
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQForceNetMovementComponent::AddYawTorque(float Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForceNetMovementComponent", "AddYawTorque");

	Params::SQForceNetMovementComponent_AddYawTorque Parms{};

	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleWeaponTOW.BlueprintOnPreFire
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void ASQVehicleWeaponTOW::BlueprintOnPreFire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleWeaponTOW", "BlueprintOnPreFire");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQVehicleWeaponTOW.DelayedFireWeapon
// (Native, Protected)

void ASQVehicleWeaponTOW::DelayedFireWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleWeaponTOW", "DelayedFireWeapon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleWeaponTOW.GetPostProcessSettings
// (Event, Protected, BlueprintEvent)
// Parameters:
// struct FPostProcessSettings             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FPostProcessSettings ASQVehicleWeaponTOW::GetPostProcessSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleWeaponTOW", "GetPostProcessSettings");

	Params::SQVehicleWeaponTOW_GetPostProcessSettings Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleWeaponTOW.GetReticleClass
// (Event, Protected, BlueprintEvent)
// Parameters:
// TSubclassOf<class USQVehicleViewWidget> ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class USQVehicleViewWidget> ASQVehicleWeaponTOW::GetReticleClass()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleWeaponTOW", "GetReticleClass");

	Params::SQVehicleWeaponTOW_GetReticleClass Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleWeaponTOW.ToggleReticleOverlay
// (Final, Native, Protected)
// Parameters:
// bool                                    bIsAiming                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQVehicleWeaponTOW::ToggleReticleOverlay(const bool bIsAiming)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleWeaponTOW", "ToggleReticleOverlay");

	Params::SQVehicleWeaponTOW_ToggleReticleOverlay Parms{};

	Parms.bIsAiming = bIsAiming;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQForwardBaseSettings.HasInitialResources
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQForwardBaseSettings::HasInitialResources() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBaseSettings", "HasInitialResources");

	Params::SQForwardBaseSettings_HasInitialResources Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQForwardBaseSettings.HasTimeToEnableSpawning
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQForwardBaseSettings::HasTimeToEnableSpawning() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQForwardBaseSettings", "HasTimeToEnableSpawning");

	Params::SQForwardBaseSettings_HasTimeToEnableSpawning Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQFreeLookInterface.SetIsToggleActive
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewState                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISQFreeLookInterface::SetIsToggleActive(const bool bNewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFreeLookInterface", "SetIsToggleActive");

	Params::SQFreeLookInterface_SetIsToggleActive Parms{};

	Parms.bNewState = bNewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQFreeLookInterface.CalculateFreeLookRotation
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator ISQFreeLookInterface::CalculateFreeLookRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFreeLookInterface", "CalculateFreeLookRotation");

	Params::SQFreeLookInterface_CalculateFreeLookRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQFreeLookInterface.GetFreeLookComponent
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQFreeLookComponent*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQFreeLookComponent* ISQFreeLookInterface::GetFreeLookComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFreeLookInterface", "GetFreeLookComponent");

	Params::SQFreeLookInterface_GetFreeLookComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQFreeLookInterface.GetIsUsingFreeLook
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ISQFreeLookInterface::GetIsUsingFreeLook() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQFreeLookInterface", "GetIsUsingFreeLook");

	Params::SQFreeLookInterface_GetIsUsingFreeLook Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameState.AddGameModeRules
// (Native, Public)
// Parameters:
// TArray<struct FSQGameModeRules>         InGameModeRules                                        (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void ASQGameState::AddGameModeRules(const TArray<struct FSQGameModeRules>& InGameModeRules)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameState", "AddGameModeRules");

	Params::SQGameState_AddGameModeRules Parms{};

	Parms.InGameModeRules = std::move(InGameModeRules);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameState.OnRep_CurrentLayerInfo
// (Final, Native, Public)

void ASQGameState::OnRep_CurrentLayerInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameState", "OnRep_CurrentLayerInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameState.OnRep_GameModeRules
// (Final, Native, Public)

void ASQGameState::OnRep_GameModeRules()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameState", "OnRep_GameModeRules");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameState.OnRep_IndexedTeamStates
// (Final, Native, Public)

void ASQGameState::OnRep_IndexedTeamStates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameState", "OnRep_IndexedTeamStates");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameState.OnRep_MaxPlayers
// (Final, Native, Public)

void ASQGameState::OnRep_MaxPlayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameState", "OnRep_MaxPlayers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameState.OnRep_NeutralTeamInfoClass
// (Final, Native, Public)

void ASQGameState::OnRep_NeutralTeamInfoClass()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameState", "OnRep_NeutralTeamInfoClass");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameState.OnRep_ServerName
// (Final, Native, Public)

void ASQGameState::OnRep_ServerName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameState", "OnRep_ServerName");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameState.OnRep_ServerStartTimeStamp
// (Final, Native, Public)

void ASQGameState::OnRep_ServerStartTimeStamp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameState", "OnRep_ServerStartTimeStamp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameState.RefreshTeamStates
// (Final, Native, Public)

void ASQGameState::RefreshTeamStates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameState", "RefreshTeamStates");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameState.RequestFinishAndExitToMainMenu
// (Final, Native, Public)

void ASQGameState::RequestFinishAndExitToMainMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameState", "RequestFinishAndExitToMainMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameState.SetRemainingTime
// (Native, Public)
// Parameters:
// int32                                   Seconds                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameState::SetRemainingTime(int32 Seconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameState", "SetRemainingTime");

	Params::SQGameState_SetRemainingTime Parms{};

	Parms.Seconds = Seconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameState.CanChangeTeam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQGameState::CanChangeTeam() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameState", "CanChangeTeam");

	Params::SQGameState_CanChangeTeam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameState.GetMarkerManager
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQMapMarkerManagerComponent*     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQMapMarkerManagerComponent* ASQGameState::GetMarkerManager() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameState", "GetMarkerManager");

	Params::SQGameState_GetMarkerManager Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameState.GetPlayerCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQGameState::GetPlayerCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameState", "GetPlayerCount");

	Params::SQGameState_GetPlayerCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameState.GetRelationshipById
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// ESQTeam                                 InTeamA                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQTeam                                 InTeamIdB                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQTeamRelationShip                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESQTeamRelationShip ASQGameState::GetRelationshipById(const ESQTeam InTeamA, const ESQTeam InTeamIdB) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameState", "GetRelationshipById");

	Params::SQGameState_GetRelationshipById Parms{};

	Parms.InTeamA = InTeamA;
	Parms.InTeamIdB = InTeamIdB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameState.GetRelationShipByIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   InTeamIdA                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InTeamIdB                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQTeamRelationShip                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESQTeamRelationShip ASQGameState::GetRelationShipByIndex(const int32 InTeamIdA, const int32 InTeamIdB) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameState", "GetRelationShipByIndex");

	Params::SQGameState_GetRelationShipByIndex Parms{};

	Parms.InTeamIdA = InTeamIdA;
	Parms.InTeamIdB = InTeamIdB;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameState.GetRemainingTime
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQGameState::GetRemainingTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameState", "GetRemainingTime");

	Params::SQGameState_GetRemainingTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameState.IsGameReadyToStart
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQGameState::IsGameReadyToStart() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameState", "IsGameReadyToStart");

	Params::SQGameState_IsGameReadyToStart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameState.TryGetTeamState
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQTeamState*                     OutTeamState                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQGameState::TryGetTeamState(int32 TeamId, class ASQTeamState** OutTeamState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameState", "TryGetTeamState");

	Params::SQGameState_TryGetTeamState Parms{};

	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTeamState != nullptr)
		*OutTeamState = Parms.OutTeamState;

	return Parms.ReturnValue;
}


// Function Squad.SQTeamPrep.CheckOverlap
// (Final, Native, Protected)

void ASQTeamPrep::CheckOverlap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamPrep", "CheckOverlap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTeamPrep.OnCompBeginOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASQTeamPrep::OnCompBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamPrep", "OnCompBeginOverlap");

	Params::SQTeamPrep_OnCompBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTeamPrep.OnCompExit
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQTeamPrep::OnCompExit(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamPrep", "OnCompExit");

	Params::SQTeamPrep_OnCompExit Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTeamPrep.StartCountdown
// (Final, Native, Protected)
// Parameters:
// class FName                             NewMatchState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQTeamPrep::StartCountdown(class FName NewMatchState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamPrep", "StartCountdown");

	Params::SQTeamPrep_StartCountdown Parms{};

	Parms.NewMatchState = NewMatchState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTeamPrep.GetStagingTimeRemaining
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQTeamPrep::GetStagingTimeRemaining() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamPrep", "GetStagingTimeRemaining");

	Params::SQTeamPrep_GetStagingTimeRemaining Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameMode.AllowTeamChange
// (Final, Native, Public)
// Parameters:
// class ASQPlayerController*              RequestingPlayer                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewTeam                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQGameMode::AllowTeamChange(class ASQPlayerController* RequestingPlayer, int32 NewTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameMode", "AllowTeamChange");

	Params::SQGameMode_AllowTeamChange Parms{};

	Parms.RequestingPlayer = RequestingPlayer;
	Parms.NewTeam = NewTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameMode.GetConcretePawnClassForController
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      InController                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ASQSoldier>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class ASQSoldier> ASQGameMode::GetConcretePawnClassForController(class AController* InController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameMode", "GetConcretePawnClassForController");

	Params::SQGameMode_GetConcretePawnClassForController Parms{};

	Parms.InController = InController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameMode.IsDeployNow
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class APlayerController*                PC                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQGameMode::IsDeployNow(class APlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameMode", "IsDeployNow");

	Params::SQGameMode_IsDeployNow Parms{};

	Parms.PC = PC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameMode.LogisticsDropOff
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           VehicleActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AmmoDroppedOff                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ConstructionDroppedOff                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameMode::LogisticsDropOff(class AActor* VehicleActor, float AmmoDroppedOff, float ConstructionDroppedOff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameMode", "LogisticsDropOff");

	Params::SQGameMode_LogisticsDropOff Parms{};

	Parms.VehicleActor = VehicleActor;
	Parms.AmmoDroppedOff = AmmoDroppedOff;
	Parms.ConstructionDroppedOff = ConstructionDroppedOff;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameMode.OnCurrentLayerSelected
// (Final, Native, Public, HasOutParams)
// Parameters:
// class USQVoteSession*                   VoteSession                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQChoice                        Winner                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ASQGameMode::OnCurrentLayerSelected(class USQVoteSession* VoteSession, const struct FSQChoice& Winner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameMode", "OnCurrentLayerSelected");

	Params::SQGameMode_OnCurrentLayerSelected Parms{};

	Parms.VoteSession = VoteSession;
	Parms.Winner = std::move(Winner);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameMode.OnFactionSelected
// (Final, Native, Public, HasOutParams)
// Parameters:
// class USQVoteSession*                   VoteSession                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQChoice                        Winner                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ASQGameMode::OnFactionSelected(class USQVoteSession* VoteSession, const struct FSQChoice& Winner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameMode", "OnFactionSelected");

	Params::SQGameMode_OnFactionSelected Parms{};

	Parms.VoteSession = VoteSession;
	Parms.Winner = std::move(Winner);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameMode.OnNextLayerSelected
// (Final, Native, Public, HasOutParams)
// Parameters:
// class USQVoteSession*                   VoteSession                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQChoice                        Winner                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ASQGameMode::OnNextLayerSelected(class USQVoteSession* VoteSession, const struct FSQChoice& Winner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameMode", "OnNextLayerSelected");

	Params::SQGameMode_OnNextLayerSelected Parms{};

	Parms.VoteSession = VoteSession;
	Parms.Winner = std::move(Winner);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameMode.OnNextLevelSelected
// (Final, Native, Public, HasOutParams)
// Parameters:
// class USQVoteSession*                   VoteSession                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQChoice                        Winner                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ASQGameMode::OnNextLevelSelected(class USQVoteSession* VoteSession, const struct FSQChoice& Winner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameMode", "OnNextLevelSelected");

	Params::SQGameMode_OnNextLevelSelected Parms{};

	Parms.VoteSession = VoteSession;
	Parms.Winner = std::move(Winner);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameMode.PlayerBandaged
// (Native, Public, BlueprintCallable)
// Parameters:
// class AController*                      Bandager                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      BandagedPlayer                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameMode::PlayerBandaged(class AController* Bandager, class AController* BandagedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameMode", "PlayerBandaged");

	Params::SQGameMode_PlayerBandaged Parms{};

	Parms.Bandager = Bandager;
	Parms.BandagedPlayer = BandagedPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameMode.PlayerDied
// (Native, Public, BlueprintCallable)
// Parameters:
// class AController*                      Killer                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      KilledPlayer                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            KilledPawn                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDamageType*                      DamageType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameMode::PlayerDied(class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, const class UDamageType* DamageType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameMode", "PlayerDied");

	Params::SQGameMode_PlayerDied Parms{};

	Parms.Killer = Killer;
	Parms.KilledPlayer = KilledPlayer;
	Parms.KilledPawn = KilledPawn;
	Parms.DamageType = DamageType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameMode.PlayerHealed
// (Native, Public, BlueprintCallable)
// Parameters:
// class AController*                      Healer                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      HealedPlayer                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameMode::PlayerHealed(class AController* Healer, class AController* HealedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameMode", "PlayerHealed");

	Params::SQGameMode_PlayerHealed Parms{};

	Parms.Healer = Healer;
	Parms.HealedPlayer = HealedPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameMode.PlayerRevived
// (Native, Public, BlueprintCallable)
// Parameters:
// class AController*                      Reviver                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      RevivedPlayer                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameMode::PlayerRevived(class AController* Reviver, class AController* RevivedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameMode", "PlayerRevived");

	Params::SQGameMode_PlayerRevived Parms{};

	Parms.Reviver = Reviver;
	Parms.RevivedPlayer = RevivedPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameMode.PlayerWounded
// (Native, Public, BlueprintCallable)
// Parameters:
// class AController*                      Killer                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      KilledPlayer                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            KilledPawn                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDamageType*                      DamageType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameMode::PlayerWounded(class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, const class UDamageType* DamageType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameMode", "PlayerWounded");

	Params::SQGameMode_PlayerWounded Parms{};

	Parms.Killer = Killer;
	Parms.KilledPlayer = KilledPlayer;
	Parms.KilledPawn = KilledPawn;
	Parms.DamageType = DamageType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameMode.RegisterImportantActor
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameMode::RegisterImportantActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameMode", "RegisterImportantActor");

	Params::SQGameMode_RegisterImportantActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameMode.RegisterRuleSet
// (Final, Native, Private)
// Parameters:
// class ASQGameRuleSet*                   RuleSet                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameMode::RegisterRuleSet(class ASQGameRuleSet* RuleSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameMode", "RegisterRuleSet");

	Params::SQGameMode_RegisterRuleSet Parms{};

	Parms.RuleSet = RuleSet;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameMode.TryGetRulesetsOfClass
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class ASQGameRuleSet>       RulesetClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class ASQGameRuleSet*>           OutRulesets                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQGameMode::TryGetRulesetsOfClass(TSubclassOf<class ASQGameRuleSet> RulesetClass, TArray<class ASQGameRuleSet*>* OutRulesets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameMode", "TryGetRulesetsOfClass");

	Params::SQGameMode_TryGetRulesetsOfClass Parms{};

	Parms.RulesetClass = RulesetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRulesets != nullptr)
		*OutRulesets = std::move(Parms.OutRulesets);

	return Parms.ReturnValue;
}


// Function Squad.SQGameMode.TryToChangePlayersTeam
// (Native, Public, BlueprintCallable)
// Parameters:
// class ASQPlayerController*              PlayerToChange                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamToChangeTo                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForceChange                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQGameMode::TryToChangePlayersTeam(class ASQPlayerController* PlayerToChange, int32 TeamToChangeTo, bool bForceChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameMode", "TryToChangePlayersTeam");

	Params::SQGameMode_TryToChangePlayersTeam Parms{};

	Parms.PlayerToChange = PlayerToChange;
	Parms.TeamToChangeTo = TeamToChangeTo;
	Parms.bForceChange = bForceChange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameMode.UnregisterImportantActor
// (Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameMode::UnregisterImportantActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameMode", "UnregisterImportantActor");

	Params::SQGameMode_UnregisterImportantActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameMode.VehicleDestroyed
// (Native, Public, BlueprintCallable)
// Parameters:
// class AController*                      Killer                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      KilledPlayer                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            KilledPawn                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDamageType*                      DamageType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameMode::VehicleDestroyed(class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, const class UDamageType* DamageType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameMode", "VehicleDestroyed");

	Params::SQGameMode_VehicleDestroyed Parms{};

	Parms.Killer = Killer;
	Parms.KilledPlayer = KilledPlayer;
	Parms.KilledPawn = KilledPawn;
	Parms.DamageType = DamageType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameMode.GetDisplayName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ASQGameMode::GetDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameMode", "GetDisplayName");

	Params::SQGameMode_GetDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameMode.GetDisplayNameArray
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FString>                   OutArray                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void ASQGameMode::GetDisplayNameArray(TArray<class FString>* OutArray) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameMode", "GetDisplayNameArray");

	Params::SQGameMode_GetDisplayNameArray Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutArray != nullptr)
		*OutArray = std::move(Parms.OutArray);
}


// Function Squad.SQGameMode.GetDisplayText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText ASQGameMode::GetDisplayText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameMode", "GetDisplayText");

	Params::SQGameMode_GetDisplayText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameMode.GetTeam
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESQTeam                                 Team                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQTeam*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQTeam* ASQGameMode::GetTeam(ESQTeam Team) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameMode", "GetTeam");

	Params::SQGameMode_GetTeam Parms{};

	Parms.Team = Team;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameMode.OnPlayerChangedTeams
// (Final, Native, Public, Const)
// Parameters:
// class ASQPlayerController*              PlayerWhoSwitched                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGameMode::OnPlayerChangedTeams(class ASQPlayerController* PlayerWhoSwitched) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameMode", "OnPlayerChangedTeams");

	Params::SQGameMode_OnPlayerChangedTeams Parms{};

	Parms.PlayerWhoSwitched = PlayerWhoSwitched;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTeamStatePrivate.OnRep_IndexedTeamPrivateSquadStates
// (Native, Public)

void ASQTeamStatePrivate::OnRep_IndexedTeamPrivateSquadStates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamStatePrivate", "OnRep_IndexedTeamPrivateSquadStates");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTeamStatePrivate.GetId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQTeamStatePrivate::GetId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamStatePrivate", "GetId");

	Params::SQTeamStatePrivate_GetId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameplayService.GetServerUtcTime
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FDateTime USQGameplayService::GetServerUtcTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQGameplayService", "GetServerUtcTime");

	Params::SQGameplayService_GetServerUtcTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameplayService.TryGetGameMode
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ASQGameMode>          GameModeClass                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQGameMode*                      OutGameMode                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameplayService::TryGetGameMode(const class UObject* WorldContextObject, TSubclassOf<class ASQGameMode> GameModeClass, class ASQGameMode** OutGameMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQGameplayService", "TryGetGameMode");

	Params::SQGameplayService_TryGetGameMode Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.GameModeClass = GameModeClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutGameMode != nullptr)
		*OutGameMode = Parms.OutGameMode;

	return Parms.ReturnValue;
}


// Function Squad.SQGameplayService.TryGetGameState
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ASQGameState>         GameStateClass                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQGameState*                     OutGameState                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameplayService::TryGetGameState(const class UObject* WorldContextObject, TSubclassOf<class ASQGameState> GameStateClass, class ASQGameState** OutGameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQGameplayService", "TryGetGameState");

	Params::SQGameplayService_TryGetGameState Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.GameStateClass = GameStateClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutGameState != nullptr)
		*OutGameState = Parms.OutGameState;

	return Parms.ReturnValue;
}


// Function Squad.SQGameplayService.TryGetLocalPlayerController
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQPlayerController*              OutPlayerController                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameplayService::TryGetLocalPlayerController(const class UObject* WorldContextObject, class ASQPlayerController** OutPlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQGameplayService", "TryGetLocalPlayerController");

	Params::SQGameplayService_TryGetLocalPlayerController Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPlayerController != nullptr)
		*OutPlayerController = Parms.OutPlayerController;

	return Parms.ReturnValue;
}


// Function Squad.SQGameplayService.TryGetLocalPlayerState
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ASQPlayerState>       PlayerStateClass                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQPlayerState*                   OutPlayerState                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameplayService::TryGetLocalPlayerState(const class UObject* WorldContextObject, TSubclassOf<class ASQPlayerState> PlayerStateClass, class ASQPlayerState** OutPlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQGameplayService", "TryGetLocalPlayerState");

	Params::SQGameplayService_TryGetLocalPlayerState Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PlayerStateClass = PlayerStateClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPlayerState != nullptr)
		*OutPlayerState = Parms.OutPlayerState;

	return Parms.ReturnValue;
}


// Function Squad.SQGameplayService.TryGetLocalPlayerTeamId
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutTeamId                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameplayService::TryGetLocalPlayerTeamId(const class UObject* WorldContextObject, int32* OutTeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQGameplayService", "TryGetLocalPlayerTeamId");

	Params::SQGameplayService_TryGetLocalPlayerTeamId Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTeamId != nullptr)
		*OutTeamId = Parms.OutTeamId;

	return Parms.ReturnValue;
}


// Function Squad.SQGameplayService.TryGetLocalPlayerTeamState
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ASQTeamState>         TeamStateClass                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQTeamState*                     OutTeamState                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameplayService::TryGetLocalPlayerTeamState(const class UObject* WorldContextObject, TSubclassOf<class ASQTeamState> TeamStateClass, class ASQTeamState** OutTeamState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQGameplayService", "TryGetLocalPlayerTeamState");

	Params::SQGameplayService_TryGetLocalPlayerTeamState Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.TeamStateClass = TeamStateClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTeamState != nullptr)
		*OutTeamState = Parms.OutTeamState;

	return Parms.ReturnValue;
}


// Function Squad.SQGameplayService.TryGetPlayerOuterGameMode
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ASQPlayerController*              WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ASQGameMode>          GameModeClass                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQGameMode*                      OutGameMode                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameplayService::TryGetPlayerOuterGameMode(const class ASQPlayerController* WorldContextObject, TSubclassOf<class ASQGameMode> GameModeClass, class ASQGameMode** OutGameMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQGameplayService", "TryGetPlayerOuterGameMode");

	Params::SQGameplayService_TryGetPlayerOuterGameMode Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.GameModeClass = GameModeClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutGameMode != nullptr)
		*OutGameMode = Parms.OutGameMode;

	return Parms.ReturnValue;
}


// Function Squad.SQGameplayService.TryGetPlayerOuterGameState
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ASQPlayerController*              WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ASQGameState>         GameStateClass                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQGameState*                     OutGameState                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameplayService::TryGetPlayerOuterGameState(const class ASQPlayerController* WorldContextObject, TSubclassOf<class ASQGameState> GameStateClass, class ASQGameState** OutGameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQGameplayService", "TryGetPlayerOuterGameState");

	Params::SQGameplayService_TryGetPlayerOuterGameState Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.GameStateClass = GameStateClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutGameState != nullptr)
		*OutGameState = Parms.OutGameState;

	return Parms.ReturnValue;
}


// Function Squad.SQGameplayService.TryGetTeam
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ASQTeam>              TeamClass                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQTeam*                          OutTeam                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameplayService::TryGetTeam(const class UObject* WorldContextObject, int32 TeamId, TSubclassOf<class ASQTeam> TeamClass, class ASQTeam** OutTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQGameplayService", "TryGetTeam");

	Params::SQGameplayService_TryGetTeam Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.TeamId = TeamId;
	Parms.TeamClass = TeamClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTeam != nullptr)
		*OutTeam = Parms.OutTeam;

	return Parms.ReturnValue;
}


// Function Squad.SQGameplayService.TryGetTeamOuterGameMode
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ASQTeam*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ASQGameMode>          GameModeClass                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQGameMode*                      OutGameMode                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameplayService::TryGetTeamOuterGameMode(const class ASQTeam* WorldContextObject, TSubclassOf<class ASQGameMode> GameModeClass, class ASQGameMode** OutGameMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQGameplayService", "TryGetTeamOuterGameMode");

	Params::SQGameplayService_TryGetTeamOuterGameMode Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.GameModeClass = GameModeClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutGameMode != nullptr)
		*OutGameMode = Parms.OutGameMode;

	return Parms.ReturnValue;
}


// Function Squad.SQGameplayService.TryGetTeamOuterGameState
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class ASQTeam*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ASQGameState>         GameStateClass                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQGameState*                     OutGameState                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameplayService::TryGetTeamOuterGameState(const class ASQTeam* WorldContextObject, TSubclassOf<class ASQGameState> GameStateClass, class ASQGameState** OutGameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQGameplayService", "TryGetTeamOuterGameState");

	Params::SQGameplayService_TryGetTeamOuterGameState Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.GameStateClass = GameStateClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutGameState != nullptr)
		*OutGameState = Parms.OutGameState;

	return Parms.ReturnValue;
}


// Function Squad.SQGameplayService.TryGetTeamState
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ASQTeamState>         TeamStateClass                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQTeamState*                     OutTeamState                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameplayService::TryGetTeamState(const class UObject* WorldContextObject, int32 TeamId, TSubclassOf<class ASQTeamState> TeamStateClass, class ASQTeamState** OutTeamState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQGameplayService", "TryGetTeamState");

	Params::SQGameplayService_TryGetTeamState Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.TeamId = TeamId;
	Parms.TeamStateClass = TeamStateClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTeamState != nullptr)
		*OutTeamState = Parms.OutTeamState;

	return Parms.ReturnValue;
}


// Function Squad.SQGameSetupFunctionLibrary.CanInjectFactionSetup
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USQFactionSetup*                  SQFactionSetup                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQLevel*                         TargetLevel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQLayer*                         TargetLayer                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGameSetupFunctionLibrary::CanInjectFactionSetup(class USQFactionSetup* SQFactionSetup, class USQLevel* TargetLevel, class USQLayer* TargetLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQGameSetupFunctionLibrary", "CanInjectFactionSetup");

	Params::SQGameSetupFunctionLibrary_CanInjectFactionSetup Parms{};

	Parms.SQFactionSetup = SQFactionSetup;
	Parms.TargetLevel = TargetLevel;
	Parms.TargetLayer = TargetLayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameSetupFunctionLibrary.GetAllFactionCombinations
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USQLayer*                         FromLayer                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> USQGameSetupFunctionLibrary::GetAllFactionCombinations(const class USQLayer* FromLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQGameSetupFunctionLibrary", "GetAllFactionCombinations");

	Params::SQGameSetupFunctionLibrary_GetAllFactionCombinations Parms{};

	Parms.FromLayer = FromLayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameSetupFunctionLibrary.GetFactionsFromSettingsString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           InString                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ListIndex                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> USQGameSetupFunctionLibrary::GetFactionsFromSettingsString(const class FString& InString, const int32& ListIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQGameSetupFunctionLibrary", "GetFactionsFromSettingsString");

	Params::SQGameSetupFunctionLibrary_GetFactionsFromSettingsString Parms{};

	Parms.InString = std::move(InString);
	Parms.ListIndex = ListIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGameSetupFunctionLibrary.GetLayerSettingsFromString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           LayerString                                            (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQLayerSettings                 ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSQLayerSettings USQGameSetupFunctionLibrary::GetLayerSettingsFromString(class FString* LayerString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQGameSetupFunctionLibrary", "GetLayerSettingsFromString");

	Params::SQGameSetupFunctionLibrary_GetLayerSettingsFromString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (LayerString != nullptr)
		*LayerString = std::move(Parms.LayerString);

	return Parms.ReturnValue;
}


// Function Squad.SQGameSetupFunctionLibrary.InjectFactionSetup
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USQFactionSetup*                  SQFactionSetup                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQLayer*                         TargetLayer                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGameSetupFunctionLibrary::InjectFactionSetup(class USQFactionSetup* SQFactionSetup, class USQLayer* TargetLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQGameSetupFunctionLibrary", "InjectFactionSetup");

	Params::SQGameSetupFunctionLibrary_InjectFactionSetup Parms{};

	Parms.SQFactionSetup = SQFactionSetup;
	Parms.TargetLayer = TargetLayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGameSubsystemInterface.InitializeSubsystem
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class USQGameInstance*                  SquadGameInstance                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISQGameSubsystemInterface::InitializeSubsystem(class USQGameInstance* SquadGameInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGameSubsystemInterface", "InitializeSubsystem");

	Params::SQGameSubsystemInterface_InitializeSubsystem Parms{};

	Parms.SquadGameInstance = SquadGameInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquadSelection.HideSquadCreationWidgets
// (Final, Native, Public, BlueprintCallable)

void USQSquadSelection::HideSquadCreationWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadSelection", "HideSquadCreationWidgets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquadSelection.InitWidget
// (Final, Native, Public, BlueprintCallable)

void USQSquadSelection::InitWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadSelection", "InitWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquadSelection.LeaveSquad
// (Final, Native, Public, BlueprintCallable)

void USQSquadSelection::LeaveSquad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadSelection", "LeaveSquad");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquadSelection.RethrowSquadCreated
// (Final, Native, Public)

void USQSquadSelection::RethrowSquadCreated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadSelection", "RethrowSquadCreated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquadSelection.SelfTick
// (Final, Native, Public, BlueprintCallable)

void USQSquadSelection::SelfTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadSelection", "SelfTick");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquadSelection.ShowSquadCreationWidgets
// (Final, Native, Public, BlueprintCallable)

void USQSquadSelection::ShowSquadCreationWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadSelection", "ShowSquadCreationWidgets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleCleanupComponent.ResetDestructionTimer
// (Final, Native, Protected, BlueprintCallable)

void USQVehicleCleanupComponent::ResetDestructionTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleCleanupComponent", "ResetDestructionTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGraphRAASVisualizerComponent.UpdateCachedRoutes
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USQGraphRAASVisualizerComponent::UpdateCachedRoutes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGraphRAASVisualizerComponent", "UpdateCachedRoutes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleEmergencyRecoveryComponent.CustomRecoveryMulticast
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class ASQVehicle*                       Vehicle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Instigator                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVehicleEmergencyRecoveryComponent::CustomRecoveryMulticast(class ASQVehicle* Vehicle, class AActor* Instigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleEmergencyRecoveryComponent", "CustomRecoveryMulticast");

	Params::SQVehicleEmergencyRecoveryComponent_CustomRecoveryMulticast Parms{};

	Parms.Vehicle = Vehicle;
	Parms.Instigator = Instigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleEmergencyRecoveryComponent.EmergencyRecovery
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Instigator                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQVehicleRecoveryMethod                RecoveryMethod                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DesiredYawRotation                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVehicleEmergencyRecoveryComponent::EmergencyRecovery(class AActor* Instigator, ESQVehicleRecoveryMethod RecoveryMethod, float DesiredYawRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleEmergencyRecoveryComponent", "EmergencyRecovery");

	Params::SQVehicleEmergencyRecoveryComponent_EmergencyRecovery Parms{};

	Parms.Instigator = Instigator;
	Parms.RecoveryMethod = RecoveryMethod;
	Parms.DesiredYawRotation = DesiredYawRotation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleEmergencyRecoveryComponent.OnRep_LastEmergencyTeleportTimestamp
// (Final, Native, Public)

void USQVehicleEmergencyRecoveryComponent::OnRep_LastEmergencyTeleportTimestamp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleEmergencyRecoveryComponent", "OnRep_LastEmergencyTeleportTimestamp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleEmergencyRecoveryComponent.TeleportVehicleMulticast
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private, HasDefaults)
// Parameters:
// class ASQVehicle*                       Vehicle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Position                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void USQVehicleEmergencyRecoveryComponent::TeleportVehicleMulticast(class ASQVehicle* Vehicle, const struct FVector& Position, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleEmergencyRecoveryComponent", "TeleportVehicleMulticast");

	Params::SQVehicleEmergencyRecoveryComponent_TeleportVehicleMulticast Parms{};

	Parms.Vehicle = Vehicle;
	Parms.Position = std::move(Position);
	Parms.Rotation = std::move(Rotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleEmergencyRecoveryComponent.CanUseEmergencyRecovery
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESQVehicleRecoveryMethod                RecoveryMethod                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVehicleEmergencyRecoveryComponent::CanUseEmergencyRecovery(ESQVehicleRecoveryMethod RecoveryMethod) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleEmergencyRecoveryComponent", "CanUseEmergencyRecovery");

	Params::SQVehicleEmergencyRecoveryComponent_CanUseEmergencyRecovery Parms{};

	Parms.RecoveryMethod = RecoveryMethod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleEmergencyRecoveryComponent.GetOwningVehicle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQVehicle*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQVehicle* USQVehicleEmergencyRecoveryComponent::GetOwningVehicle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleEmergencyRecoveryComponent", "GetOwningVehicle");

	Params::SQVehicleEmergencyRecoveryComponent_GetOwningVehicle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleEmergencyRecoveryComponent.GetRemainingRecoverCooldown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQVehicleEmergencyRecoveryComponent::GetRemainingRecoverCooldown() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleEmergencyRecoveryComponent", "GetRemainingRecoverCooldown");

	Params::SQVehicleEmergencyRecoveryComponent_GetRemainingRecoverCooldown Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleEmergencyRecoveryComponent.IsRecoveryOnCooldown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVehicleEmergencyRecoveryComponent::IsRecoveryOnCooldown() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleEmergencyRecoveryComponent", "IsRecoveryOnCooldown");

	Params::SQVehicleEmergencyRecoveryComponent_IsRecoveryOnCooldown Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGridMarkerBase.DrawWidget
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USQGridMarkerBase*                MapGridMarker                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPaintContext                    Context                                                (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USQGridMarkerBase::DrawWidget(class USQGridMarkerBase* MapGridMarker, struct FPaintContext& Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQGridMarkerBase", "DrawWidget");

	Params::SQGridMarkerBase_DrawWidget Parms{};

	Parms.MapGridMarker = MapGridMarker;
	Parms.Context = std::move(Context);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
}


// Function Squad.SQGridMarkerBase.InitWidget
// (Final, Native, Public, BlueprintCallable)

void USQGridMarkerBase::InitWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGridMarkerBase", "InitWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleMovementCommonSystems.TrySpawnWaterMovementComponent
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UObject*                          Param_Outer                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USQWaterMovementComponent>ComponentToSpawn                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQWaterMovementComponent*        OutWaterMovementComponent                              (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVehicleMovementCommonSystems::TrySpawnWaterMovementComponent(class UObject* Param_Outer, TSubclassOf<class USQWaterMovementComponent> ComponentToSpawn, class USQWaterMovementComponent** OutWaterMovementComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleMovementCommonSystems", "TrySpawnWaterMovementComponent");

	Params::SQVehicleMovementCommonSystems_TrySpawnWaterMovementComponent Parms{};

	Parms.Param_Outer = Param_Outer;
	Parms.ComponentToSpawn = ComponentToSpawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutWaterMovementComponent != nullptr)
		*OutWaterMovementComponent = Parms.OutWaterMovementComponent;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleMovementCommonSystems.TryGetWaterMovementForwardSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   GroundSpeed                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   WheelCount                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQVehicleMovementCommonSystems::TryGetWaterMovementForwardSpeed(float GroundSpeed, int32 WheelCount) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleMovementCommonSystems", "TryGetWaterMovementForwardSpeed");

	Params::SQVehicleMovementCommonSystems_TryGetWaterMovementForwardSpeed Parms{};

	Parms.GroundSpeed = GroundSpeed;
	Parms.WheelCount = WheelCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleMovementCommonSystems.TryGetWaterMovementMaxRotationSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   OriginalMaxRotationSpeed                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   WheelCount                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQVehicleMovementCommonSystems::TryGetWaterMovementMaxRotationSpeed(float OriginalMaxRotationSpeed, int32 WheelCount) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleMovementCommonSystems", "TryGetWaterMovementMaxRotationSpeed");

	Params::SQVehicleMovementCommonSystems_TryGetWaterMovementMaxRotationSpeed Parms{};

	Parms.OriginalMaxRotationSpeed = OriginalMaxRotationSpeed;
	Parms.WheelCount = WheelCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleMovementCommonSystems.TryGetWaterMovementRotationSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   OriginalRotationSpeed                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   WheelCount                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQVehicleMovementCommonSystems::TryGetWaterMovementRotationSpeed(float OriginalRotationSpeed, int32 WheelCount) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleMovementCommonSystems", "TryGetWaterMovementRotationSpeed");

	Params::SQVehicleMovementCommonSystems_TryGetWaterMovementRotationSpeed Parms{};

	Parms.OriginalRotationSpeed = OriginalRotationSpeed;
	Parms.WheelCount = WheelCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGridMarkerUnit.SetBoxSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewSize                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGridMarkerUnit::SetBoxSize(const float NewSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGridMarkerUnit", "SetBoxSize");

	Params::SQGridMarkerUnit_SetBoxSize Parms{};

	Parms.NewSize = NewSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGuidanceComponent.LoseConnection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGuidanceLossReason                     LossReason                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGuidanceComponent::LoseConnection(const EGuidanceLossReason LossReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGuidanceComponent", "LoseConnection");

	Params::SQGuidanceComponent_LoseConnection Parms{};

	Parms.LossReason = LossReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGuidanceComponent.LoseGuidance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGuidanceLossReason                     LossReason                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGuidanceComponent::LoseGuidance(const EGuidanceLossReason LossReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGuidanceComponent", "LoseGuidance");

	Params::SQGuidanceComponent_LoseGuidance Parms{};

	Parms.LossReason = LossReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGuidanceComponent.RegainGuidance
// (Final, Native, Public, BlueprintCallable)

void USQGuidanceComponent::RegainGuidance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGuidanceComponent", "RegainGuidance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGuidanceComponent.StartLaunchPhase
// (Final, Native, Public)
// Parameters:
// class USQGuidanceControllerComponent*   GuidanceController                                     (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQGuidanceComponent::StartLaunchPhase(class USQGuidanceControllerComponent* GuidanceController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGuidanceComponent", "StartLaunchPhase");

	Params::SQGuidanceComponent_StartLaunchPhase Parms{};

	Parms.GuidanceController = GuidanceController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGuidanceComponent.TryGainGuidance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGuidanceComponent::TryGainGuidance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGuidanceComponent", "TryGainGuidance");

	Params::SQGuidanceComponent_TryGainGuidance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQGuidanceComponent.IsBeingGuided
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQGuidanceComponent::IsBeingGuided() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGuidanceComponent", "IsBeingGuided");

	Params::SQGuidanceComponent_IsBeingGuided Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleSettings.ShouldCauseSieged
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQGameSpawn*                     Spawn                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVehicleSettings::ShouldCauseSieged(const class ASQGameSpawn* Spawn) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSettings", "ShouldCauseSieged");

	Params::SQVehicleSettings_ShouldCauseSieged Parms{};

	Parms.Spawn = Spawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleSettings.TryGetVehicleWithLayer
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USQLayer*                         InLayer                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             OutVehicle                                             (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVehicleSettings::TryGetVehicleWithLayer(const class USQLayer* InLayer, TSoftClassPtr<class UClass>* OutVehicle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSettings", "TryGetVehicleWithLayer");

	Params::SQVehicleSettings_TryGetVehicleWithLayer Parms{};

	Parms.InLayer = InLayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutVehicle != nullptr)
		*OutVehicle = Parms.OutVehicle;

	return Parms.ReturnValue;
}


// Function Squad.SQMortarProjectile.SpawnArtilleryProjectile
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// TSubclassOf<class ASQMortarProjectile>  ProjectileClass                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      InstigatorController                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ProjectileOwner                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   InitialVelocity                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCreatedOnServer                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQMortarProjectile::SpawnArtilleryProjectile(TSubclassOf<class ASQMortarProjectile> ProjectileClass, class AController* InstigatorController, class AActor* ProjectileOwner, const struct FVector& Location, const struct FRotator& Rotation, float InitialVelocity, bool bCreatedOnServer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQMortarProjectile", "SpawnArtilleryProjectile");

	Params::SQMortarProjectile_SpawnArtilleryProjectile Parms{};

	Parms.ProjectileClass = ProjectileClass;
	Parms.InstigatorController = InstigatorController;
	Parms.ProjectileOwner = ProjectileOwner;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.InitialVelocity = InitialVelocity;
	Parms.bCreatedOnServer = bCreatedOnServer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMortarProjectile.BPOnBeginDescending
// (Event, Public, BlueprintEvent)

void ASQMortarProjectile::BPOnBeginDescending()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMortarProjectile", "BPOnBeginDescending");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMortarProjectile.BPOnNearGroundDistanceReached
// (Event, Public, BlueprintEvent)

void ASQMortarProjectile::BPOnNearGroundDistanceReached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMortarProjectile", "BPOnNearGroundDistanceReached");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMortarProjectile.CreateSmoke
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ASQMortarProjectile::CreateSmoke()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMortarProjectile", "CreateSmoke");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQGuidedProjectile.OnConnectionLost
// (Final, Native, Public)
// Parameters:
// class USQGuidanceComponent*             InGuidanceComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGuidanceLossReason                     LossReason                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQGuidedProjectile::OnConnectionLost(class USQGuidanceComponent* InGuidanceComponent, const EGuidanceLossReason LossReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQGuidedProjectile", "OnConnectionLost");

	Params::SQGuidedProjectile_OnConnectionLost Parms{};

	Parms.InGuidanceComponent = InGuidanceComponent;
	Parms.LossReason = LossReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHelicopter2.EnablePhysicsSimulation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bSimulate                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQHelicopter2::EnablePhysicsSimulation(bool bSimulate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHelicopter2", "EnablePhysicsSimulation");

	Params::SQHelicopter2_EnablePhysicsSimulation Parms{};

	Parms.bSimulate = bSimulate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHelicopter2.MainRotorDestroyedHandler
// (Final, Native, Protected)
// Parameters:
// class USQVehicleComponent*              VehicleComponent                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQHelicopter2::MainRotorDestroyedHandler(class USQVehicleComponent* VehicleComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHelicopter2", "MainRotorDestroyedHandler");

	Params::SQHelicopter2_MainRotorDestroyedHandler Parms{};

	Parms.VehicleComponent = VehicleComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHelicopter2.GetMainRotorThrust
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQHelicopter2::GetMainRotorThrust() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHelicopter2", "GetMainRotorThrust");

	Params::SQHelicopter2_GetMainRotorThrust Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Squad.SQHelicopter2.GetMaxRPM
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQHelicopter2::GetMaxRPM() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHelicopter2", "GetMaxRPM");

	Params::SQHelicopter2_GetMaxRPM Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Squad.SQHelicopter2.GetTailRotorThrust
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQHelicopter2::GetTailRotorThrust() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHelicopter2", "GetTailRotorThrust");

	Params::SQHelicopter2_GetTailRotorThrust Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Squad.SQHelicopter2.GetThrottle
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQHelicopter2::GetThrottle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHelicopter2", "GetThrottle");

	Params::SQHelicopter2_GetThrottle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Squad.SQHelicopter2.IsLanded
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQHelicopter2::IsLanded() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHelicopter2", "IsLanded");

	Params::SQHelicopter2_IsLanded Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Squad.SQHelicopter2.IsMainRotorColliding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQHelicopter2::IsMainRotorColliding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHelicopter2", "IsMainRotorColliding");

	Params::SQHelicopter2_IsMainRotorColliding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHelicopter2.IsPhysicsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQHelicopter2::IsPhysicsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHelicopter2", "IsPhysicsEnabled");

	Params::SQHelicopter2_IsPhysicsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHelicopter2.IsTailRotorColliding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQHelicopter2::IsTailRotorColliding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHelicopter2", "IsTailRotorColliding");

	Params::SQHelicopter2_IsTailRotorColliding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHelicopter2.SlerpToUpSideDown
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   AngleRad                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator ASQHelicopter2::SlerpToUpSideDown(float AngleRad) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHelicopter2", "SlerpToUpSideDown");

	Params::SQHelicopter2_SlerpToUpSideDown Parms{};

	Parms.AngleRad = AngleRad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHelicopterInstruments.SetActivationProgress
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   Progress                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISQHelicopterInstruments::SetActivationProgress(float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHelicopterInstruments", "SetActivationProgress");

	Params::SQHelicopterInstruments_SetActivationProgress Parms{};

	Parms.Progress = Progress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHelicopterInstruments.GetActivationProgress
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ISQHelicopterInstruments::GetActivationProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHelicopterInstruments", "GetActivationProgress");

	Params::SQHelicopterInstruments_GetActivationProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHelicopterInstruments.GetForwardSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ISQHelicopterInstruments::GetForwardSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHelicopterInstruments", "GetForwardSpeed");

	Params::SQHelicopterInstruments_GetForwardSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHelicopterInstruments.GetLiftInput
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ISQHelicopterInstruments::GetLiftInput() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHelicopterInstruments", "GetLiftInput");

	Params::SQHelicopterInstruments_GetLiftInput Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHelicopterInstruments.GetMaxLift
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ISQHelicopterInstruments::GetMaxLift() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHelicopterInstruments", "GetMaxLift");

	Params::SQHelicopterInstruments_GetMaxLift Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHelicopterInstruments.GetPitchInput
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ISQHelicopterInstruments::GetPitchInput() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHelicopterInstruments", "GetPitchInput");

	Params::SQHelicopterInstruments_GetPitchInput Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHelicopterInstruments.GetRollInput
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ISQHelicopterInstruments::GetRollInput() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHelicopterInstruments", "GetRollInput");

	Params::SQHelicopterInstruments_GetRollInput Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHelicopterInstruments.GetYawInput
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ISQHelicopterInstruments::GetYawInput() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHelicopterInstruments", "GetYawInput");

	Params::SQHelicopterInstruments_GetYawInput Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHelicopterInstruments.IsEngineActive
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ISQHelicopterInstruments::IsEngineActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHelicopterInstruments", "IsEngineActive");

	Params::SQHelicopterInstruments_IsEngineActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHelicopterMovementComponent.AddForce
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Force                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQHelicopterMovementComponent::AddForce(const struct FVector& Force)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHelicopterMovementComponent", "AddForce");

	Params::SQHelicopterMovementComponent_AddForce Parms{};

	Parms.Force = std::move(Force);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHelicopterMovementComponent.AddImpulse
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Impulse                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVelocityChange                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQHelicopterMovementComponent::AddImpulse(const struct FVector& Impulse, bool bVelocityChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHelicopterMovementComponent", "AddImpulse");

	Params::SQHelicopterMovementComponent_AddImpulse Parms{};

	Parms.Impulse = std::move(Impulse);
	Parms.bVelocityChange = bVelocityChange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHelicopterMovementComponent.AddRotationInput
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         InRotationInput                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void USQHelicopterMovementComponent::AddRotationInput(const struct FRotator& InRotationInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHelicopterMovementComponent", "AddRotationInput");

	Params::SQHelicopterMovementComponent_AddRotationInput Parms{};

	Parms.InRotationInput = std::move(InRotationInput);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHelicopterMovementComponent.CapsuleTouched
// (Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComp                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Other                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USQHelicopterMovementComponent::CapsuleTouched(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHelicopterMovementComponent", "CapsuleTouched");

	Params::SQHelicopterMovementComponent_CapsuleTouched Parms{};

	Parms.OverlappedComp = OverlappedComp;
	Parms.Other = Other;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHelicopterMovementComponent.OnRep_IsSimulatingPhysics
// (Final, Native, Protected)

void USQHelicopterMovementComponent::OnRep_IsSimulatingPhysics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHelicopterMovementComponent", "OnRep_IsSimulatingPhysics");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHelicopterMovementComponent.ResetMovementState
// (Final, Native, Public, BlueprintCallable)

void USQHelicopterMovementComponent::ResetMovementState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHelicopterMovementComponent", "ResetMovementState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHelicopterMovementComponent.GetMaxAcceleration
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQHelicopterMovementComponent::GetMaxAcceleration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHelicopterMovementComponent", "GetMaxAcceleration");

	Params::SQHelicopterMovementComponent_GetMaxAcceleration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHelicopterMovementComponent.GetMaxBrakingDeceleration
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQHelicopterMovementComponent::GetMaxBrakingDeceleration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHelicopterMovementComponent", "GetMaxBrakingDeceleration");

	Params::SQHelicopterMovementComponent_GetMaxBrakingDeceleration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHelicopterMovementComponent.GetRotationInput
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FRotator                   ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

const struct FRotator USQHelicopterMovementComponent::GetRotationInput() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHelicopterMovementComponent", "GetRotationInput");

	Params::SQHelicopterMovementComponent_GetRotationInput Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHelicopterMovementComponent.IsSimulatingPhysics
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQHelicopterMovementComponent::IsSimulatingPhysics() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHelicopterMovementComponent", "IsSimulatingPhysics");

	Params::SQHelicopterMovementComponent_IsSimulatingPhysics Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHUDWidget.Draw
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQHUDWidget::Draw(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUDWidget", "Draw");

	Params::SQHUDWidget_Draw Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHUDWidget.Init
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASQHUD*                           InHUD                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQHUDWidget::Init(class ASQHUD* InHUD)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUDWidget", "Init");

	Params::SQHUDWidget_Init Parms{};

	Parms.InHUD = InHUD;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHUDWidget.BPDrawMaterial
// (Native, Protected, HasDefaults, BlueprintCallable, Const)
// Parameters:
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   U                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   V                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   UL                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VL                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DrawingAlpha                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        DrawingOffset                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        RotationPivotPoint                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQHUDWidget::BPDrawMaterial(class UMaterialInterface* Material, float X, float Y, float Width, float Height, float U, float V, float UL, float VL, float DrawingAlpha, const struct FLinearColor& Color, const struct FVector2D& DrawingOffset, float Rotation, const struct FVector2D& RotationPivotPoint) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUDWidget", "BPDrawMaterial");

	Params::SQHUDWidget_BPDrawMaterial Parms{};

	Parms.Material = Material;
	Parms.X = X;
	Parms.Y = Y;
	Parms.Width = Width;
	Parms.Height = Height;
	Parms.U = U;
	Parms.V = V;
	Parms.UL = UL;
	Parms.VL = VL;
	Parms.DrawingAlpha = DrawingAlpha;
	Parms.Color = std::move(Color);
	Parms.DrawingOffset = std::move(DrawingOffset);
	Parms.Rotation = Rotation;
	Parms.RotationPivotPoint = std::move(RotationPivotPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHUDWidget.BPDrawSpriteTexture
// (Native, Protected, HasDefaults, BlueprintCallable, Const)
// Parameters:
// class UTexture*                         Texture                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TextureX                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TextureY                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TextureXL                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TextureYL                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DrawingAlpha                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        DrawingOffset                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        RotationPivotPoint                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsMask                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQHUDWidget::BPDrawSpriteTexture(class UTexture* Texture, float X, float Y, float Width, float Height, float TextureX, float TextureY, float TextureXL, float TextureYL, float DrawingAlpha, const struct FLinearColor& Color, const struct FVector2D& DrawingOffset, float Rotation, const struct FVector2D& RotationPivotPoint, bool bIsMask) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUDWidget", "BPDrawSpriteTexture");

	Params::SQHUDWidget_BPDrawSpriteTexture Parms{};

	Parms.Texture = Texture;
	Parms.X = X;
	Parms.Y = Y;
	Parms.Width = Width;
	Parms.Height = Height;
	Parms.TextureX = TextureX;
	Parms.TextureY = TextureY;
	Parms.TextureXL = TextureXL;
	Parms.TextureYL = TextureYL;
	Parms.DrawingAlpha = DrawingAlpha;
	Parms.Color = std::move(Color);
	Parms.DrawingOffset = std::move(DrawingOffset);
	Parms.Rotation = Rotation;
	Parms.RotationPivotPoint = std::move(RotationPivotPoint);
	Parms.bIsMask = bIsMask;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHUDWidget.BPDrawText
// (Native, Protected, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             Text                                                   (Parm, NativeAccessSpecifierPublic)
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFont*                            Font                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFontRenderInfo                  FontRenderInfo                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TextScale                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DrawingAlpha                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQTextHorizontalAlignment              HorizontalAlignment                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQTextVerticalAlignment                VerticalAlignment                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDrawShadow                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ShadowDirection                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ShadowColor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDrawOutline                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     OutlineColor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D USQHUDWidget::BPDrawText(const class FText& Text, float X, float Y, class UFont* Font, const struct FFontRenderInfo& FontRenderInfo, const struct FLinearColor& Color, float TextScale, float DrawingAlpha, ESQTextHorizontalAlignment HorizontalAlignment, ESQTextVerticalAlignment VerticalAlignment, bool bDrawShadow, const struct FVector2D& ShadowDirection, const struct FLinearColor& ShadowColor, bool bDrawOutline, const struct FLinearColor& OutlineColor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUDWidget", "BPDrawText");

	Params::SQHUDWidget_BPDrawText Parms{};

	Parms.Text = std::move(Text);
	Parms.X = X;
	Parms.Y = Y;
	Parms.Font = Font;
	Parms.FontRenderInfo = std::move(FontRenderInfo);
	Parms.Color = std::move(Color);
	Parms.TextScale = TextScale;
	Parms.DrawingAlpha = DrawingAlpha;
	Parms.HorizontalAlignment = HorizontalAlignment;
	Parms.VerticalAlignment = VerticalAlignment;
	Parms.bDrawShadow = bDrawShadow;
	Parms.ShadowDirection = std::move(ShadowDirection);
	Parms.ShadowColor = std::move(ShadowColor);
	Parms.bDrawOutline = bDrawOutline;
	Parms.OutlineColor = std::move(OutlineColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQHUDWidget.BPDrawTexture
// (Native, Protected, HasDefaults, BlueprintCallable, Const)
// Parameters:
// class UTexture*                         Texture                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   U                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   V                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   UL                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VL                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DrawingAlpha                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        DrawingOffset                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        RotationPivotPoint                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsMask                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQHUDWidget::BPDrawTexture(class UTexture* Texture, float X, float Y, float Width, float Height, float U, float V, float UL, float VL, float DrawingAlpha, const struct FLinearColor& Color, const struct FVector2D& DrawingOffset, float Rotation, const struct FVector2D& RotationPivotPoint, bool bIsMask) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUDWidget", "BPDrawTexture");

	Params::SQHUDWidget_BPDrawTexture Parms{};

	Parms.Texture = Texture;
	Parms.X = X;
	Parms.Y = Y;
	Parms.Width = Width;
	Parms.Height = Height;
	Parms.U = U;
	Parms.V = V;
	Parms.UL = UL;
	Parms.VL = VL;
	Parms.DrawingAlpha = DrawingAlpha;
	Parms.Color = std::move(Color);
	Parms.DrawingOffset = std::move(DrawingOffset);
	Parms.Rotation = Rotation;
	Parms.RotationPivotPoint = std::move(RotationPivotPoint);
	Parms.bIsMask = bIsMask;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQHUDWidget.CanDraw
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQHUDWidget::CanDraw() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQHUDWidget", "CanDraw");

	Params::SQHUDWidget_CanDraw Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQInfantryWeapon.BlueprintIsAnimationSystemValid
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQInfantryWeapon::BlueprintIsAnimationSystemValid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQInfantryWeapon", "BlueprintIsAnimationSystemValid");

	Params::SQInfantryWeapon_BlueprintIsAnimationSystemValid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQInfantryWeapon.CancelFireOnRestrictedStance
// (Final, Native, Public)
// Parameters:
// ESQStance                               Stance                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQInfantryWeapon::CancelFireOnRestrictedStance(ESQStance Stance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQInfantryWeapon", "CancelFireOnRestrictedStance");

	Params::SQInfantryWeapon_CancelFireOnRestrictedStance Parms{};

	Parms.Stance = Stance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQInfantryWeapon.LowStaminaDebuffs
// (Final, Native, Public)

void ASQInfantryWeapon::LowStaminaDebuffs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQInfantryWeapon", "LowStaminaDebuffs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQInfantryWeapon.MulticastCancelManualBolting
// (Net, NetReliable, Native, Event, NetMulticast, Protected)

void ASQInfantryWeapon::MulticastCancelManualBolting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQInfantryWeapon", "MulticastCancelManualBolting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQInfantryWeapon.MulticastStartManualBolting
// (Net, NetReliable, Native, Event, NetMulticast, Protected)

void ASQInfantryWeapon::MulticastStartManualBolting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQInfantryWeapon", "MulticastStartManualBolting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQInfantryWeapon.OnHoldBreathEaseUpdate
// (Final, Native, Protected)
// Parameters:
// float                                   CurveOutput                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQInfantryWeapon::OnHoldBreathEaseUpdate(float CurveOutput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQInfantryWeapon", "OnHoldBreathEaseUpdate");

	Params::SQInfantryWeapon_OnHoldBreathEaseUpdate Parms{};

	Parms.CurveOutput = CurveOutput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQInfantryWeapon.OnHoldBreathEvent
// (Final, Native, Public)
// Parameters:
// bool                                    bIsStartHoldBreath                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQInfantryWeapon::OnHoldBreathEvent(const bool bIsStartHoldBreath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQInfantryWeapon", "OnHoldBreathEvent");

	Params::SQInfantryWeapon_OnHoldBreathEvent Parms{};

	Parms.bIsStartHoldBreath = bIsStartHoldBreath;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQInfantryWeapon.OnRecoilGripAlignmentUpdate
// (Final, Native, Protected)
// Parameters:
// float                                   CurveOutput                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQInfantryWeapon::OnRecoilGripAlignmentUpdate(float CurveOutput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQInfantryWeapon", "OnRecoilGripAlignmentUpdate");

	Params::SQInfantryWeapon_OnRecoilGripAlignmentUpdate Parms{};

	Parms.CurveOutput = CurveOutput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQInfantryWeapon.OnRecoilShoulderAlignmentUpdate
// (Final, Native, Protected)
// Parameters:
// float                                   CurveOutput                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQInfantryWeapon::OnRecoilShoulderAlignmentUpdate(float CurveOutput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQInfantryWeapon", "OnRecoilShoulderAlignmentUpdate");

	Params::SQInfantryWeapon_OnRecoilShoulderAlignmentUpdate Parms{};

	Parms.CurveOutput = CurveOutput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQInfantryWeapon.RecoilAlignmentMultiplierSetup
// (Final, Native, Public, BlueprintCallable)

void ASQInfantryWeapon::RecoilAlignmentMultiplierSetup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQInfantryWeapon", "RecoilAlignmentMultiplierSetup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQInfantryWeapon.RecoilAlignmentTargetOffsetSetup
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        MaxVal                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        MaxBipodVal                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          CurrentOffset                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TargetOffset                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQInfantryWeapon::RecoilAlignmentTargetOffsetSetup(const struct FVector2D& MaxVal, const struct FVector2D& MaxBipodVal, const struct FVector& CurrentOffset, struct FVector* TargetOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQInfantryWeapon", "RecoilAlignmentTargetOffsetSetup");

	Params::SQInfantryWeapon_RecoilAlignmentTargetOffsetSetup Parms{};

	Parms.MaxVal = std::move(MaxVal);
	Parms.MaxBipodVal = std::move(MaxBipodVal);
	Parms.CurrentOffset = std::move(CurrentOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TargetOffset != nullptr)
		*TargetOffset = std::move(Parms.TargetOffset);
}


// Function Squad.SQInfantryWeapon.RecoilAlignmentTimelineEasing
// (Final, Native, Public, HasOutParams, HasDefaults)
// Parameters:
// struct FVector                          CurrentOffset                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TargetOffset                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        AngleLimits                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         NewAlignment                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   CurveOutput                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQInfantryWeapon::RecoilAlignmentTimelineEasing(struct FVector* CurrentOffset, const struct FVector& TargetOffset, const struct FVector2D& AngleLimits, struct FRotator* NewAlignment, const float CurveOutput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQInfantryWeapon", "RecoilAlignmentTimelineEasing");

	Params::SQInfantryWeapon_RecoilAlignmentTimelineEasing Parms{};

	Parms.TargetOffset = std::move(TargetOffset);
	Parms.AngleLimits = std::move(AngleLimits);
	Parms.CurveOutput = CurveOutput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CurrentOffset != nullptr)
		*CurrentOffset = std::move(Parms.CurrentOffset);

	if (NewAlignment != nullptr)
		*NewAlignment = std::move(Parms.NewAlignment);
}


// Function Squad.SQInfantryWeapon.ServerCancelManualBolting
// (Net, NetReliable, Native, Event, Protected, NetServer)

void ASQInfantryWeapon::ServerCancelManualBolting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQInfantryWeapon", "ServerCancelManualBolting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQInfantryWeapon.ServerStartManualBolting
// (Net, NetReliable, Native, Event, Protected, NetServer)

void ASQInfantryWeapon::ServerStartManualBolting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQInfantryWeapon", "ServerStartManualBolting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQInfantryWeapon.GetOwnerSoldier
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQSoldier*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQSoldier* ASQInfantryWeapon::GetOwnerSoldier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQInfantryWeapon", "GetOwnerSoldier");

	Params::SQInfantryWeapon_GetOwnerSoldier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVoteSession.GetChoiceDescription
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ChoiceId                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQChoice                        OutChoice                                              (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void USQVoteSession::GetChoiceDescription(const class FName& ChoiceId, struct FSQChoice* OutChoice) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVoteSession", "GetChoiceDescription");

	Params::SQVoteSession_GetChoiceDescription Parms{};

	Parms.ChoiceId = ChoiceId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutChoice != nullptr)
		*OutChoice = std::move(Parms.OutChoice);
}


// Function Squad.SQVoteSession.GetChoicesPerVoteOrder
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FName>                     OutChoiceId                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USQVoteSession::GetChoicesPerVoteOrder(TArray<class FName>* OutChoiceId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVoteSession", "GetChoicesPerVoteOrder");

	Params::SQVoteSession_GetChoicesPerVoteOrder Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutChoiceId != nullptr)
		*OutChoiceId = std::move(Parms.OutChoiceId);
}


// Function Squad.SQVoteSession.GetChoiceState
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ChoiceId                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQVoteSessionChoiceInfo         OutState                                               (Parm, OutParm, NativeAccessSpecifierPublic)

void USQVoteSession::GetChoiceState(const class FName& ChoiceId, struct FSQVoteSessionChoiceInfo* OutState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVoteSession", "GetChoiceState");

	Params::SQVoteSession_GetChoiceState Parms{};

	Parms.ChoiceId = ChoiceId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutState != nullptr)
		*OutState = std::move(Parms.OutState);
}


// Function Squad.SQVoteSession.GetData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FDataTableRowHandle              ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FDataTableRowHandle USQVoteSession::GetData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVoteSession", "GetData");

	Params::SQVoteSession_GetData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVoteSession.GetDuration
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTimespan                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTimespan USQVoteSession::GetDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVoteSession", "GetDuration");

	Params::SQVoteSession_GetDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVoteSession.GetId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName USQVoteSession::GetId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVoteSession", "GetId");

	Params::SQVoteSession_GetId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVoteSession.GetRemainingTime
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FTimespan                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTimespan USQVoteSession::GetRemainingTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVoteSession", "GetRemainingTime");

	Params::SQVoteSession_GetRemainingTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVoteSession.GetWinnerChoiceId
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName USQVoteSession::GetWinnerChoiceId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVoteSession", "GetWinnerChoiceId");

	Params::SQVoteSession_GetWinnerChoiceId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVoteSession.HasFinishedPresentingResults
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVoteSession::HasFinishedPresentingResults() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVoteSession", "HasFinishedPresentingResults");

	Params::SQVoteSession_HasFinishedPresentingResults Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVoteSession.HasTimedOut
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVoteSession::HasTimedOut() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVoteSession", "HasTimedOut");

	Params::SQVoteSession_HasTimedOut Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVoteSession.IsRegenerationChoicePossible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVoteSession::IsRegenerationChoicePossible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVoteSession", "IsRegenerationChoicePossible");

	Params::SQVoteSession_IsRegenerationChoicePossible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVoteSessionClient.SendVote
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             ChoiceId                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Positive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVoteSessionClient::SendVote(const class FName& ChoiceId, bool Positive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVoteSessionClient", "SendVote");

	Params::SQVoteSessionClient_SendVote Parms{};

	Parms.ChoiceId = ChoiceId;
	Parms.Positive = Positive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVoteSessionClient.SendVoteByChoice
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSQChoice                        Choice                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    Positive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVoteSessionClient::SendVoteByChoice(const struct FSQChoice& Choice, bool Positive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVoteSessionClient", "SendVoteByChoice");

	Params::SQVoteSessionClient_SendVoteByChoice Parms{};

	Parms.Choice = std::move(Choice);
	Parms.Positive = Positive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQInventoryGroupWidget.InitWidget
// (Native, Public, BlueprintCallable)

void USQInventoryGroupWidget::InitWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQInventoryGroupWidget", "InitWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQInventoryGroupWidget.UpdateState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USQInventoryGroupWidget::UpdateState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQInventoryGroupWidget", "UpdateState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQInventoryItemWidget.InitWidget
// (Native, Public, BlueprintCallable)

void USQInventoryItemWidget::InitWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQInventoryItemWidget", "InitWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQInventoryItemWidget.UpdateState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USQInventoryItemWidget::UpdateState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQInventoryItemWidget", "UpdateState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWaterBlueprintFunctionLibrary.GetActorImmersionDepthInWater
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ASQWaterBody*                     WaterBody                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           QueryingActor                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQWaterBlueprintFunctionLibrary::GetActorImmersionDepthInWater(const class ASQWaterBody* WaterBody, const class AActor* QueryingActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQWaterBlueprintFunctionLibrary", "GetActorImmersionDepthInWater");

	Params::SQWaterBlueprintFunctionLibrary_GetActorImmersionDepthInWater Parms{};

	Parms.WaterBody = WaterBody;
	Parms.QueryingActor = QueryingActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQWaterBlueprintFunctionLibrary.IsAValidWaterBody
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ActorToCheck                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQWaterBlueprintFunctionLibrary::IsAValidWaterBody(const class AActor* ActorToCheck)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQWaterBlueprintFunctionLibrary", "IsAValidWaterBody");

	Params::SQWaterBlueprintFunctionLibrary_IsAValidWaterBody Parms{};

	Parms.ActorToCheck = ActorToCheck;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQWaterBlueprintFunctionLibrary.WaterHasValidHit
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ASQWaterBody*                     HitWaterBody                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ProjectileOwner                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       InHit                                                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQWaterBlueprintFunctionLibrary::WaterHasValidHit(const class ASQWaterBody* HitWaterBody, const class AActor* ProjectileOwner, const struct FHitResult& InHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQWaterBlueprintFunctionLibrary", "WaterHasValidHit");

	Params::SQWaterBlueprintFunctionLibrary_WaterHasValidHit Parms{};

	Parms.HitWaterBody = HitWaterBody;
	Parms.ProjectileOwner = ProjectileOwner;
	Parms.InHit = std::move(InHit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQWaterBlueprintFunctionLibrary.WaterHasValidOverlap
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ASQWaterBody*                     OverlappedWaterBody                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQWaterBlueprintFunctionLibrary::WaterHasValidOverlap(const class ASQWaterBody* OverlappedWaterBody, class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQWaterBlueprintFunctionLibrary", "WaterHasValidOverlap");

	Params::SQWaterBlueprintFunctionLibrary_WaterHasValidOverlap Parms{};

	Parms.OverlappedWaterBody = OverlappedWaterBody;
	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQJoinBeaconClient.HostTravelRequestReconnect
// (Net, NetReliable, Native, Event, NetMulticast, Public, NetValidate)
// Parameters:
// int32                                   TimeLeftInMatch                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SecondsPerRetry                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQJoinBeaconClient::HostTravelRequestReconnect(int32 TimeLeftInMatch, float SecondsPerRetry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQJoinBeaconClient", "HostTravelRequestReconnect");

	Params::SQJoinBeaconClient_HostTravelRequestReconnect Parms{};

	Parms.TimeLeftInMatch = TimeLeftInMatch;
	Parms.SecondsPerRetry = SecondsPerRetry;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQJoinBeaconClient.InitConnection
// (Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ServerURL                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBlueprintSessionResult          ServerSession                                          (ConstParm, Parm, NativeAccessSpecifierPublic)

void ASQJoinBeaconClient::InitConnection(const class FString& ServerURL, const struct FBlueprintSessionResult& ServerSession)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQJoinBeaconClient", "InitConnection");

	Params::SQJoinBeaconClient_InitConnection Parms{};

	Parms.ServerURL = std::move(ServerURL);
	Parms.ServerSession = std::move(ServerSession);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQJoinBeaconClient.LeaveQueue
// (Final, Native, Public, BlueprintCallable)

void ASQJoinBeaconClient::LeaveQueue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQJoinBeaconClient", "LeaveQueue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQJoinBeaconClient.RequestClientJoin
// (Net, NetReliable, Native, Event, NetMulticast, Public, NetValidate)

void ASQJoinBeaconClient::RequestClientJoin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQJoinBeaconClient", "RequestClientJoin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQJoinSessionCallbackProxy.IsServerModded
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintSessionResult          SearchResult                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bIsWhitelisted                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQJoinSessionCallbackProxy::IsServerModded(const struct FBlueprintSessionResult& SearchResult, bool* bIsWhitelisted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQJoinSessionCallbackProxy", "IsServerModded");

	Params::SQJoinSessionCallbackProxy_IsServerModded Parms{};

	Parms.SearchResult = std::move(SearchResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bIsWhitelisted != nullptr)
		*bIsWhitelisted = Parms.bIsWhitelisted;

	return Parms.ReturnValue;
}


// Function Squad.SQJoinSessionCallbackProxy.JoinSession
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          Param_WorldContextObject                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBlueprintSessionResult          SearchResult                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class USQJoinSessionCallbackProxy*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQJoinSessionCallbackProxy* USQJoinSessionCallbackProxy::JoinSession(class UObject* Param_WorldContextObject, class APlayerController* PlayerController, const struct FBlueprintSessionResult& SearchResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQJoinSessionCallbackProxy", "JoinSession");

	Params::SQJoinSessionCallbackProxy_JoinSession Parms{};

	Parms.Param_WorldContextObject = Param_WorldContextObject;
	Parms.PlayerController = PlayerController;
	Parms.SearchResult = std::move(SearchResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQKickBanComponent.BanPlayer
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AdminId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQPlayerController*              ToBanPC                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BanSeconds                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           BanReason                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQKickBanComponent::BanPlayer(const class FString& AdminId, class ASQPlayerController* ToBanPC, const int32 BanSeconds, const class FString& BanReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQKickBanComponent", "BanPlayer");

	Params::SQKickBanComponent_BanPlayer Parms{};

	Parms.AdminId = std::move(AdminId);
	Parms.ToBanPC = ToBanPC;
	Parms.BanSeconds = BanSeconds;
	Parms.BanReason = std::move(BanReason);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQKickBanComponent.KickPlayer
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class ASQPlayerController*              ToKickPC                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           KickReason                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQKickBanComponent::KickPlayer(class ASQPlayerController* ToKickPC, const class FString& KickReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQKickBanComponent", "KickPlayer");

	Params::SQKickBanComponent_KickPlayer Parms{};

	Parms.ToKickPC = ToKickPC;
	Parms.KickReason = std::move(KickReason);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWheeledVehicleMovementComponentTank.SetBothTracksThrottleInput
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InThrottle                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQWheeledVehicleMovementComponentTank::SetBothTracksThrottleInput(float InThrottle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWheeledVehicleMovementComponentTank", "SetBothTracksThrottleInput");

	Params::SQWheeledVehicleMovementComponentTank_SetBothTracksThrottleInput Parms{};

	Parms.InThrottle = InThrottle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWheeledVehicleMovementComponentTank.SetLeftTrackThrottleInput
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InThrottle                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQWheeledVehicleMovementComponentTank::SetLeftTrackThrottleInput(float InThrottle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWheeledVehicleMovementComponentTank", "SetLeftTrackThrottleInput");

	Params::SQWheeledVehicleMovementComponentTank_SetLeftTrackThrottleInput Parms{};

	Parms.InThrottle = InThrottle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWheeledVehicleMovementComponentTank.SetRightTrackThrottleInput
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InThrottle                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQWheeledVehicleMovementComponentTank::SetRightTrackThrottleInput(float InThrottle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWheeledVehicleMovementComponentTank", "SetRightTrackThrottleInput");

	Params::SQWheeledVehicleMovementComponentTank_SetRightTrackThrottleInput Parms{};

	Parms.InThrottle = InThrottle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWheeledVehicleMovementComponentTank.GetLeftTrackSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQWheeledVehicleMovementComponentTank::GetLeftTrackSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWheeledVehicleMovementComponentTank", "GetLeftTrackSpeed");

	Params::SQWheeledVehicleMovementComponentTank_GetLeftTrackSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQWheeledVehicleMovementComponentTank.GetRightTrackSpeed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQWheeledVehicleMovementComponentTank::GetRightTrackSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWheeledVehicleMovementComponentTank", "GetRightTrackSpeed");

	Params::SQWheeledVehicleMovementComponentTank_GetRightTrackSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQLayerTeamConfig.CanUseFaction
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class USQFactionSetup*                  SQFaction                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQLayerTeamConfig::CanUseFaction(const class USQFactionSetup* SQFaction) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLayerTeamConfig", "CanUseFaction");

	Params::SQLayerTeamConfig_CanUseFaction Parms{};

	Parms.SQFaction = SQFaction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQLayerTeamConfig.EditorOnly_ShouldUseSpecificFaction
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQLayerTeamConfig::EditorOnly_ShouldUseSpecificFaction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLayerTeamConfig", "EditorOnly_ShouldUseSpecificFaction");

	Params::SQLayerTeamConfig_EditorOnly_ShouldUseSpecificFaction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQLayerTeamConfig.GetCompatibleFactionSetups
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USQLayer*                         InOuterLayer                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FName, class USQFactionSetup*>InAvailableFactionSetups                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class USQFactionSetup*>          OutCompatibleFactionSetups                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQLayerTeamConfig::GetCompatibleFactionSetups(const class USQLayer* InOuterLayer, const TMap<class FName, class USQFactionSetup*>& InAvailableFactionSetups, TArray<class USQFactionSetup*>* OutCompatibleFactionSetups) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLayerTeamConfig", "GetCompatibleFactionSetups");

	Params::SQLayerTeamConfig_GetCompatibleFactionSetups Parms{};

	Parms.InOuterLayer = InOuterLayer;
	Parms.InAvailableFactionSetups = std::move(InAvailableFactionSetups);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutCompatibleFactionSetups != nullptr)
		*OutCompatibleFactionSetups = std::move(Parms.OutCompatibleFactionSetups);

	return Parms.ReturnValue;
}


// Function Squad.SQLayerTeamConfig.HasFactionSetupChoice
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USQLayer*                         InOuterLayer                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQFactionSetup*                  OutSpecificFaction                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     Excluded                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQLayerTeamConfig::HasFactionSetupChoice(const class USQLayer* InOuterLayer, class USQFactionSetup** OutSpecificFaction, const TArray<class FName>& Excluded) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLayerTeamConfig", "HasFactionSetupChoice");

	Params::SQLayerTeamConfig_HasFactionSetupChoice Parms{};

	Parms.InOuterLayer = InOuterLayer;
	Parms.Excluded = std::move(Excluded);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSpecificFaction != nullptr)
		*OutSpecificFaction = Parms.OutSpecificFaction;

	return Parms.ReturnValue;
}


// Function Squad.SQLayerTeamConfig.TryGetAvailabilityModifierPct
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USQAvailability*                  InAvailability                                         (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutModifierPct                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQLayerTeamConfig::TryGetAvailabilityModifierPct(const class USQAvailability* InAvailability, int32* OutModifierPct) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLayerTeamConfig", "TryGetAvailabilityModifierPct");

	Params::SQLayerTeamConfig_TryGetAvailabilityModifierPct Parms{};

	Parms.InAvailability = InAvailability;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutModifierPct != nullptr)
		*OutModifierPct = Parms.OutModifierPct;

	return Parms.ReturnValue;
}


// Function Squad.SQLevel.CanFactionOperate
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class USQFactionSetup*                  FactionSetup                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQLayer*                         Layer                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQLevel::CanFactionOperate(class USQFactionSetup* FactionSetup, class USQLayer* Layer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLevel", "CanFactionOperate");

	Params::SQLevel_CanFactionOperate Parms{};

	Parms.FactionSetup = FactionSetup;
	Parms.Layer = Layer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQLevel.GetBiomeId
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName USQLevel::GetBiomeId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLevel", "GetBiomeId");

	Params::SQLevel_GetBiomeId Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Squad.SQLevel.GetMapName
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           OutMapName                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQLevel::GetMapName(class FString* OutMapName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLevel", "GetMapName");

	Params::SQLevel_GetMapName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMapName != nullptr)
		*OutMapName = std::move(Parms.OutMapName);

	return Parms.ReturnValue;
}


// Function Squad.SQLevel.GetMapPath
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           OutMapPath                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQLevel::GetMapPath(class FString* OutMapPath) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLevel", "GetMapPath");

	Params::SQLevel_GetMapPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMapPath != nullptr)
		*OutMapPath = std::move(Parms.OutMapPath);

	return Parms.ReturnValue;
}


// Function Squad.SQLevel.HasMapName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           MapName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQLevel::HasMapName(const class FString& MapName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLevel", "HasMapName");

	Params::SQLevel_HasMapName Parms{};

	Parms.MapName = std::move(MapName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQLevel.HasMapPath
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           MapPath                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQLevel::HasMapPath(const class FString& MapPath) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLevel", "HasMapPath");

	Params::SQLevel_HasMapPath Parms{};

	Parms.MapPath = std::move(MapPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQLevel.TryGetDescription
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FText                             OutDescription                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQLevel::TryGetDescription(class FText* OutDescription) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLevel", "TryGetDescription");

	Params::SQLevel_TryGetDescription Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutDescription != nullptr)
		*OutDescription = std::move(Parms.OutDescription);

	return Parms.ReturnValue;
}


// Function Squad.SQLevel.TryGetDisplayName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FText                             OutDisplayName                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQLevel::TryGetDisplayName(class FText* OutDisplayName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLevel", "TryGetDisplayName");

	Params::SQLevel_TryGetDisplayName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OutDisplayName != nullptr)
		*OutDisplayName = std::move(Parms.OutDisplayName);

	return Parms.ReturnValue;
}


// Function Squad.SQLevel.TryGetLoadingMusic
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USoundBase*                       OutLoadingMusic                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQLevel::TryGetLoadingMusic(class USoundBase** OutLoadingMusic) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLevel", "TryGetLoadingMusic");

	Params::SQLevel_TryGetLoadingMusic Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLoadingMusic != nullptr)
		*OutLoadingMusic = Parms.OutLoadingMusic;

	return Parms.ReturnValue;
}


// Function Squad.SQLevel.TryGetLoadingScreen
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        OutLoadingScreen                                       (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        InViewportSize                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQLevel::TryGetLoadingScreen(TSoftObjectPtr<class UTexture2D>* OutLoadingScreen, const struct FVector2D& InViewportSize) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLevel", "TryGetLoadingScreen");

	Params::SQLevel_TryGetLoadingScreen Parms{};

	Parms.InViewportSize = std::move(InViewportSize);

	UObject::ProcessEvent(Func, &Parms);

	if (OutLoadingScreen != nullptr)
		*OutLoadingScreen = Parms.OutLoadingScreen;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleAmmoBox.DestroyVehicleWeaponAmmo
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void USQVehicleAmmoBox::DestroyVehicleWeaponAmmo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleAmmoBox", "DestroyVehicleWeaponAmmo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleAmmoBox.Detonate
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void USQVehicleAmmoBox::Detonate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleAmmoBox", "Detonate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleAmmoBox.DestroyWeaponAmmo
// (Final, Native, Private, Const)
// Parameters:
// class ASQWeapon*                        Weapon                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TargetAmmoPercentage                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAffectCurrentMag                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVehicleAmmoBox::DestroyWeaponAmmo(class ASQWeapon* Weapon, float TargetAmmoPercentage, bool bAffectCurrentMag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleAmmoBox", "DestroyWeaponAmmo");

	Params::SQVehicleAmmoBox_DestroyWeaponAmmo Parms{};

	Parms.Weapon = Weapon;
	Parms.TargetAmmoPercentage = TargetAmmoPercentage;
	Parms.bAffectCurrentMag = bAffectCurrentMag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQLoginCallbackProxy.GetLoginResult
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSQBlueprintLoginResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQLoginCallbackProxy::GetLoginResult(const struct FSQBlueprintLoginResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQLoginCallbackProxy", "GetLoginResult");

	Params::SQLoginCallbackProxy_GetLoginResult Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQLoginCallbackProxy.Login
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InWorldContextObject                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                InPlayerController                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InLoginName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InPassword                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQLoginCallbackProxy*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQLoginCallbackProxy* USQLoginCallbackProxy::Login(class UObject* InWorldContextObject, class APlayerController* InPlayerController, const class FString& InLoginName, const class FString& InPassword)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQLoginCallbackProxy", "Login");

	Params::SQLoginCallbackProxy_Login Parms{};

	Parms.InWorldContextObject = InWorldContextObject;
	Parms.InPlayerController = InPlayerController;
	Parms.InLoginName = std::move(InLoginName);
	Parms.InPassword = std::move(InPassword);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMagazineGroupWidget.InitWidget
// (Native, Public, BlueprintCallable)

void USQMagazineGroupWidget::InitWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMagazineGroupWidget", "InitWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMainMenuWidget.ToggleGameHUD
// (Final, Native, Public, BlueprintCallable)

void USQMainMenuWidget::ToggleGameHUD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMainMenuWidget", "ToggleGameHUD");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapConversions.MapLocationToGridCoordinateString
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D                        MapLocation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        NumGridLines                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQMapConversions::MapLocationToGridCoordinateString(const struct FVector2D& MapLocation, const struct FVector2D& NumGridLines)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQMapConversions", "MapLocationToGridCoordinateString");

	Params::SQMapConversions_MapLocationToGridCoordinateString Parms{};

	Parms.MapLocation = std::move(MapLocation);
	Parms.NumGridLines = std::move(NumGridLines);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMapConversions.MapLocationToScreenLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D                        OutScreenLocation                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        MapLocation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPanelWidget*                     MapBody                                                (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQMapConversions::MapLocationToScreenLocation(struct FVector2D* OutScreenLocation, const struct FVector2D& MapLocation, const class UPanelWidget* MapBody)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQMapConversions", "MapLocationToScreenLocation");

	Params::SQMapConversions_MapLocationToScreenLocation Parms{};

	Parms.MapLocation = std::move(MapLocation);
	Parms.MapBody = MapBody;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutScreenLocation != nullptr)
		*OutScreenLocation = std::move(Parms.OutScreenLocation);

	return Parms.ReturnValue;
}


// Function Squad.SQMapConversions.MapToMapGridLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D                        OutMapGrid                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        MapLocation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        NumGridLines                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQMapConversions::MapToMapGridLocation(struct FVector2D* OutMapGrid, const struct FVector2D& MapLocation, const struct FVector2D& NumGridLines)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQMapConversions", "MapToMapGridLocation");

	Params::SQMapConversions_MapToMapGridLocation Parms{};

	Parms.MapLocation = std::move(MapLocation);
	Parms.NumGridLines = std::move(NumGridLines);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMapGrid != nullptr)
		*OutMapGrid = std::move(Parms.OutMapGrid);

	return Parms.ReturnValue;
}


// Function Squad.SQMapConversions.ScreenLocationToMapLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D                        OutMapLocation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ScreenLocation                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPanelWidget*                     MapBody                                                (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQMapConversions::ScreenLocationToMapLocation(struct FVector2D* OutMapLocation, const struct FVector2D& ScreenLocation, const class UPanelWidget* MapBody)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQMapConversions", "ScreenLocationToMapLocation");

	Params::SQMapConversions_ScreenLocationToMapLocation Parms{};

	Parms.ScreenLocation = std::move(ScreenLocation);
	Parms.MapBody = MapBody;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMapLocation != nullptr)
		*OutMapLocation = std::move(Parms.OutMapLocation);

	return Parms.ReturnValue;
}


// Function Squad.SQMapConversions.WorldToMapGridLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D                        OutMapGrid                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldVectorZeroBased                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBox2D                           WorldBoundsZeroBased                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector2D                        MapBoundsScale                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        NumGridLines                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQMapConversions::WorldToMapGridLocation(struct FVector2D* OutMapGrid, const struct FVector& WorldVectorZeroBased, const struct FBox2D& WorldBoundsZeroBased, const struct FVector2D& MapBoundsScale, const struct FVector2D& NumGridLines)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQMapConversions", "WorldToMapGridLocation");

	Params::SQMapConversions_WorldToMapGridLocation Parms{};

	Parms.WorldVectorZeroBased = std::move(WorldVectorZeroBased);
	Parms.WorldBoundsZeroBased = std::move(WorldBoundsZeroBased);
	Parms.MapBoundsScale = std::move(MapBoundsScale);
	Parms.NumGridLines = std::move(NumGridLines);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMapGrid != nullptr)
		*OutMapGrid = std::move(Parms.OutMapGrid);

	return Parms.ReturnValue;
}


// Function Squad.SQMapConversions.WorldToMapLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D                        OutMapLocation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldLocationZeroBased                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBox2D                           WorldBoundsZeroBased                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector2D                        MapBoundsScale                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQMapConversions::WorldToMapLocation(struct FVector2D* OutMapLocation, const struct FVector& WorldLocationZeroBased, const struct FBox2D& WorldBoundsZeroBased, const struct FVector2D& MapBoundsScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQMapConversions", "WorldToMapLocation");

	Params::SQMapConversions_WorldToMapLocation Parms{};

	Parms.WorldLocationZeroBased = std::move(WorldLocationZeroBased);
	Parms.WorldBoundsZeroBased = std::move(WorldBoundsZeroBased);
	Parms.MapBoundsScale = std::move(MapBoundsScale);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMapLocation != nullptr)
		*OutMapLocation = std::move(Parms.OutMapLocation);

	return Parms.ReturnValue;
}


// Function Squad.SQMapConversions.WorldToMapVector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D                        OutMapVector                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          WorldVectorZeroBased                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBox2D                           WorldBoundsZeroBased                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector2D                        MapBoundsScale                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQMapConversions::WorldToMapVector(struct FVector2D* OutMapVector, const struct FVector& WorldVectorZeroBased, const struct FBox2D& WorldBoundsZeroBased, const struct FVector2D& MapBoundsScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQMapConversions", "WorldToMapVector");

	Params::SQMapConversions_WorldToMapVector Parms{};

	Parms.WorldVectorZeroBased = std::move(WorldVectorZeroBased);
	Parms.WorldBoundsZeroBased = std::move(WorldBoundsZeroBased);
	Parms.MapBoundsScale = std::move(MapBoundsScale);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMapVector != nullptr)
		*OutMapVector = std::move(Parms.OutMapVector);

	return Parms.ReturnValue;
}


// Function Squad.SQMapGrid.DrawGrid
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class USQMapGrid*                       MapGrid                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPaintContext                    Context                                                (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector2D                        Offset                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        StepSize                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        GridLinesNeeded                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SkipNumber                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQMapGrid::DrawGrid(class USQMapGrid* MapGrid, struct FPaintContext& Context, const struct FVector2D& Offset, const struct FVector2D& StepSize, const struct FVector2D& GridLinesNeeded, const int32 SkipNumber, const struct FLinearColor& Color, const float Width)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQMapGrid", "DrawGrid");

	Params::SQMapGrid_DrawGrid Parms{};

	Parms.MapGrid = MapGrid;
	Parms.Context = std::move(Context);
	Parms.Offset = std::move(Offset);
	Parms.StepSize = std::move(StepSize);
	Parms.GridLinesNeeded = std::move(GridLinesNeeded);
	Parms.SkipNumber = SkipNumber;
	Parms.Color = std::move(Color);
	Parms.Width = Width;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
}


// Function Squad.SQMapGrid.DrawGridMarkers
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class USQMapGrid*                       MapGrid                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPaintContext                    Context                                                (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector2D                        Offset                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        StepSize                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        GridLinesNeeded                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQMapGrid::DrawGridMarkers(class USQMapGrid* MapGrid, struct FPaintContext& Context, const struct FVector2D& Offset, const struct FVector2D& StepSize, const struct FVector2D& GridLinesNeeded, const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQMapGrid", "DrawGridMarkers");

	Params::SQMapGrid_DrawGridMarkers Parms{};

	Parms.MapGrid = MapGrid;
	Parms.Context = std::move(Context);
	Parms.Offset = std::move(Offset);
	Parms.StepSize = std::move(StepSize);
	Parms.GridLinesNeeded = std::move(GridLinesNeeded);
	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
}


// Function Squad.SQMapGrid.DrawLegendLine
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class USQMapGrid*                       MapGrid                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPaintContext                    Context                                                (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector2D                        StepSize                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             LegendText                                             (ConstParm, Parm, NativeAccessSpecifierPublic)
// float                                   YOffset                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQMapGrid::DrawLegendLine(class USQMapGrid* MapGrid, struct FPaintContext& Context, const struct FVector2D& StepSize, const struct FLinearColor& Color, const float Width, const class FText& LegendText, const float YOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQMapGrid", "DrawLegendLine");

	Params::SQMapGrid_DrawLegendLine Parms{};

	Parms.MapGrid = MapGrid;
	Parms.Context = std::move(Context);
	Parms.StepSize = std::move(StepSize);
	Parms.Color = std::move(Color);
	Parms.Width = Width;
	Parms.LegendText = std::move(LegendText);
	Parms.YOffset = YOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
}


// Function Squad.SQMapGrid.DrawWidget
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USQMapGrid*                       MapGrid                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPaintContext                    Context                                                (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USQMapGrid::DrawWidget(class USQMapGrid* MapGrid, struct FPaintContext& Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQMapGrid", "DrawWidget");

	Params::SQMapGrid_DrawWidget Parms{};

	Parms.MapGrid = MapGrid;
	Parms.Context = std::move(Context);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Context = std::move(Parms.Context);
}


// Function Squad.SQMapGrid.InitWidget
// (Native, Public, BlueprintCallable)

void USQMapGrid::InitWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapGrid", "InitWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapMarker.GetMarkerType
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESQMapMarkerType                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESQMapMarkerType ASQMapMarker::GetMarkerType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMarker", "GetMarkerType");

	Params::SQMapMarker_GetMarkerType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMapMarker.OnRep_Squad
// (Native, Public)

void ASQMapMarker::OnRep_Squad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMarker", "OnRep_Squad");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapMarker.SetFireteamId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Param_FireTeamId                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQMapMarker::SetFireteamId(int32 Param_FireTeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMarker", "SetFireteamId");

	Params::SQMapMarker_SetFireteamId Parms{};

	Parms.Param_FireTeamId = Param_FireTeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapMarker.SetMarkerType
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESQMapMarkerType                        MarkerType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQMapMarker::SetMarkerType(ESQMapMarkerType MarkerType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMarker", "SetMarkerType");

	Params::SQMapMarker_SetMarkerType Parms{};

	Parms.MarkerType = MarkerType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapMarker.SetMarkerVisibleTo
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESQMapMarkerVisibleTo                   VisibleTo                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQMapMarker::SetMarkerVisibleTo(ESQMapMarkerVisibleTo VisibleTo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMarker", "SetMarkerVisibleTo");

	Params::SQMapMarker_SetMarkerVisibleTo Parms{};

	Parms.VisibleTo = VisibleTo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapMarker.SetSquad
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Squad                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQMapMarker::SetSquad(int32 Param_Squad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMarker", "SetSquad");

	Params::SQMapMarker_SetSquad Parms{};

	Parms.Param_Squad = Param_Squad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapMarker.GetFireteamId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQMapMarker::GetFireteamId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMarker", "GetFireteamId");

	Params::SQMapMarker_GetFireteamId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMapMarker.GetSquad
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQMapMarker::GetSquad() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMarker", "GetSquad");

	Params::SQMapMarker_GetSquad Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMapMarkerManagerComponent.CreateMapMarker
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSQMapMarkerGameplayData         MarkerGameplayData                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bIsCommanderMarker                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQMapMarkerManagerComponent::CreateMapMarker(const struct FSQMapMarkerGameplayData& MarkerGameplayData, bool bIsCommanderMarker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMarkerManagerComponent", "CreateMapMarker");

	Params::SQMapMarkerManagerComponent_CreateMapMarker Parms{};

	Parms.MarkerGameplayData = std::move(MarkerGameplayData);
	Parms.bIsCommanderMarker = bIsCommanderMarker;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapMarkerManagerComponent.DeleteRelevantMarkers
// (Final, Native, Public, HasOutParams)
// Parameters:
// TArray<int32>                           MapMarkerModifiedIndices                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USQMapMarkerManagerComponent::DeleteRelevantMarkers(const TArray<int32>& MapMarkerModifiedIndices)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMarkerManagerComponent", "DeleteRelevantMarkers");

	Params::SQMapMarkerManagerComponent_DeleteRelevantMarkers Parms{};

	Parms.MapMarkerModifiedIndices = std::move(MapMarkerModifiedIndices);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapMarkerManagerComponent.FindMapMarkersByType
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FSQMapMarkerGameplayData> OutMarkers                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// class USQMapMarkerDataAsset*            MarkerType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQMapMarkerManagerComponent::FindMapMarkersByType(TArray<struct FSQMapMarkerGameplayData>* OutMarkers, class USQMapMarkerDataAsset* MarkerType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMarkerManagerComponent", "FindMapMarkersByType");

	Params::SQMapMarkerManagerComponent_FindMapMarkersByType Parms{};

	Parms.MarkerType = MarkerType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMarkers != nullptr)
		*OutMarkers = std::move(Parms.OutMarkers);
}


// Function Squad.SQMapMarkerManagerComponent.InitializeRelevantMarkers
// (Final, Native, Public, HasOutParams)
// Parameters:
// TArray<int32>                           MapMarkerModifiedIndices                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USQMapMarkerManagerComponent::InitializeRelevantMarkers(const TArray<int32>& MapMarkerModifiedIndices)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMarkerManagerComponent", "InitializeRelevantMarkers");

	Params::SQMapMarkerManagerComponent_InitializeRelevantMarkers Parms{};

	Parms.MapMarkerModifiedIndices = std::move(MapMarkerModifiedIndices);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapMarkerManagerComponent.OnCommanderDemotedEvent
// (Final, Native, Public)
// Parameters:
// class ASQPlayerState*                   OldCommander                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQMapMarkerManagerComponent::OnCommanderDemotedEvent(class ASQPlayerState* OldCommander)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMarkerManagerComponent", "OnCommanderDemotedEvent");

	Params::SQMapMarkerManagerComponent_OnCommanderDemotedEvent Parms{};

	Parms.OldCommander = OldCommander;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapMarkerManagerComponent.OnFireteamDeletedEvent
// (Final, Native, Public)
// Parameters:
// class ASQSquad*                         Squad                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FireTeamId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQMapMarkerManagerComponent::OnFireteamDeletedEvent(class ASQSquad* Squad, int32 FireTeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMarkerManagerComponent", "OnFireteamDeletedEvent");

	Params::SQMapMarkerManagerComponent_OnFireteamDeletedEvent Parms{};

	Parms.Squad = Squad;
	Parms.FireTeamId = FireTeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapMarkerManagerComponent.OnMarkerDeleted
// (Final, Native, Public, HasOutParams)
// Parameters:
// TArray<int32>                           MapMarkerModifiedIndices                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USQMapMarkerManagerComponent::OnMarkerDeleted(const TArray<int32>& MapMarkerModifiedIndices)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMarkerManagerComponent", "OnMarkerDeleted");

	Params::SQMapMarkerManagerComponent_OnMarkerDeleted Parms{};

	Parms.MapMarkerModifiedIndices = std::move(MapMarkerModifiedIndices);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapMarkerManagerComponent.OnMarkerReceived
// (Final, Native, Public, HasOutParams)
// Parameters:
// TArray<int32>                           MapMarkerModifiedIndices                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USQMapMarkerManagerComponent::OnMarkerReceived(const TArray<int32>& MapMarkerModifiedIndices)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMarkerManagerComponent", "OnMarkerReceived");

	Params::SQMapMarkerManagerComponent_OnMarkerReceived Parms{};

	Parms.MapMarkerModifiedIndices = std::move(MapMarkerModifiedIndices);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapMarkerManagerComponent.OnSquadDeletedEvent
// (Final, Native, Public)
// Parameters:
// int32                                   OldSquadId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQMapMarkerManagerComponent::OnSquadDeletedEvent(int32 OldSquadId, int32 TeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMarkerManagerComponent", "OnSquadDeletedEvent");

	Params::SQMapMarkerManagerComponent_OnSquadDeletedEvent Parms{};

	Parms.OldSquadId = OldSquadId;
	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapMarkerManagerComponent.RemoveMapMarker
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHasTimedOut                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQMapMarkerManagerComponent::RemoveMapMarker(uint8 ID, bool bHasTimedOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMarkerManagerComponent", "RemoveMapMarker");

	Params::SQMapMarkerManagerComponent_RemoveMapMarker Parms{};

	Parms.ID = ID;
	Parms.bHasTimedOut = bHasTimedOut;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapMarkerManagerComponent.SetMarkerWidgetScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ScaleValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQMapMarkerManagerComponent::SetMarkerWidgetScale(float ScaleValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMarkerManagerComponent", "SetMarkerWidgetScale");

	Params::SQMapMarkerManagerComponent_SetMarkerWidgetScale Parms{};

	Parms.ScaleValue = ScaleValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapMarkerManagerComponent.SetRootHUD
// (Final, Native, Public)
// Parameters:
// class ASQHUD*                           NewRootHUD                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQMapMarkerManagerComponent::SetRootHUD(class ASQHUD* NewRootHUD)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMarkerManagerComponent", "SetRootHUD");

	Params::SQMapMarkerManagerComponent_SetRootHUD Parms{};

	Parms.NewRootHUD = NewRootHUD;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapMarkerManagerComponent.SetRootWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USQMapWidgetBase*                 NewRootWidget                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQMapMarkerManagerComponent::SetRootWidget(class USQMapWidgetBase* NewRootWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapMarkerManagerComponent", "SetRootWidget");

	Params::SQMapMarkerManagerComponent_SetRootWidget Parms{};

	Parms.NewRootWidget = NewRootWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleEngine.GetCurrentEngineTogglePercentage
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQVehicleEngine::GetCurrentEngineTogglePercentage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleEngine", "GetCurrentEngineTogglePercentage");

	Params::SQVehicleEngine_GetCurrentEngineTogglePercentage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleEngine.GetCurrentEngineToggleRequiredDuration
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQVehicleEngine::GetCurrentEngineToggleRequiredDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleEngine", "GetCurrentEngineToggleRequiredDuration");

	Params::SQVehicleEngine_GetCurrentEngineToggleRequiredDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleEngine.IsEngineActive
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVehicleEngine::IsEngineActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleEngine", "IsEngineActive");

	Params::SQVehicleEngine_IsEngineActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleEngine.IsEngineToggleActive
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVehicleEngine::IsEngineToggleActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleEngine", "IsEngineToggleActive");

	Params::SQVehicleEngine_IsEngineToggleActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleEngineComponent.OnPlayerEnteredVehicleHandler
// (Final, Native, Protected)
// Parameters:
// class ASQVehicle*                       Vehicle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Seat                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVehicleEngineComponent::OnPlayerEnteredVehicleHandler(class ASQVehicle* Vehicle, class APlayerController* Player, int32 Seat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleEngineComponent", "OnPlayerEnteredVehicleHandler");

	Params::SQVehicleEngineComponent_OnPlayerEnteredVehicleHandler Parms{};

	Parms.Vehicle = Vehicle;
	Parms.Player = Player;
	Parms.Seat = Seat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleEngineComponent.OnPlayerExitedVehicleHandler
// (Final, Native, Protected)
// Parameters:
// class ASQVehicle*                       Vehicle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Seat                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVehicleEngineComponent::OnPlayerExitedVehicleHandler(class ASQVehicle* Vehicle, class APlayerController* Player, int32 Seat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleEngineComponent", "OnPlayerExitedVehicleHandler");

	Params::SQVehicleEngineComponent_OnPlayerExitedVehicleHandler Parms{};

	Parms.Vehicle = Vehicle;
	Parms.Player = Player;
	Parms.Seat = Seat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleEngineComponent.OnRep_EngineActive
// (Native, Protected)

void USQVehicleEngineComponent::OnRep_EngineActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleEngineComponent", "OnRep_EngineActive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleEngineComponent.OnRep_EngineToggleActive
// (Native, Protected)

void USQVehicleEngineComponent::OnRep_EngineToggleActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleEngineComponent", "OnRep_EngineToggleActive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleEngineComponent.ServerSetEngineActiveInput
// (Net, NetReliable, Native, Event, Protected, NetServer, BlueprintCallable, NetValidate)
// Parameters:
// bool                                    bNewEngineActive                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVehicleEngineComponent::ServerSetEngineActiveInput(bool bNewEngineActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleEngineComponent", "ServerSetEngineActiveInput");

	Params::SQVehicleEngineComponent_ServerSetEngineActiveInput Parms{};

	Parms.bNewEngineActive = bNewEngineActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleEngineComponent.ServerSetEngineToggleActiveInput
// (Net, NetReliable, Native, Event, Protected, NetServer, BlueprintCallable, NetValidate)
// Parameters:
// bool                                    bInIsEngineToggleActive                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVehicleEngineComponent::ServerSetEngineToggleActiveInput(bool bInIsEngineToggleActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleEngineComponent", "ServerSetEngineToggleActiveInput");

	Params::SQVehicleEngineComponent_ServerSetEngineToggleActiveInput Parms{};

	Parms.bInIsEngineToggleActive = bInIsEngineToggleActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleEngineComponent.StopEngineImmediately
// (Final, Native, Public, BlueprintCallable)

void USQVehicleEngineComponent::StopEngineImmediately()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleEngineComponent", "StopEngineImmediately");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRoleListGroup.InitWidget
// (Final, Native, Public, BlueprintCallable)

void USQRoleListGroup::InitWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRoleListGroup", "InitWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRoleListGroup.GroupAvailabilityText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText USQRoleListGroup::GroupAvailabilityText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRoleListGroup", "GroupAvailabilityText");

	Params::SQRoleListGroup_GroupAvailabilityText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMapWidgetBase.CreateMarkerWidget
// (Event, Public, BlueprintEvent)
// Parameters:
// struct FSQMapMarkerVisualData           MapMarkerVisualData                                    (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// class USQMapMarkerBase*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQMapMarkerBase* USQMapWidgetBase::CreateMarkerWidget(const struct FSQMapMarkerVisualData& MapMarkerVisualData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetBase", "CreateMarkerWidget");

	Params::SQMapWidgetBase_CreateMarkerWidget Parms{};

	Parms.MapMarkerVisualData = std::move(MapMarkerVisualData);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Squad.SQMapWidgetBase.RemoveMarkerWidget
// (Event, Public, BlueprintEvent)
// Parameters:
// class USQMapMarkerBase*                 Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQMapWidgetBase::RemoveMarkerWidget(class USQMapMarkerBase* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetBase", "RemoveMarkerWidget");

	Params::SQMapWidgetBase_RemoveMarkerWidget Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Squad.SQMapWidgetBase.SetMapBody
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPanelWidget*                     NewMapBody                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQMapWidgetBase::SetMapBody(class UPanelWidget* NewMapBody)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetBase", "SetMapBody");

	Params::SQMapWidgetBase_SetMapBody Parms{};

	Parms.NewMapBody = NewMapBody;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapWidgetBase.GetMapBody
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UPanelWidget*                     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPanelWidget* USQMapWidgetBase::GetMapBody() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetBase", "GetMapBody");

	Params::SQMapWidgetBase_GetMapBody Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMapWidgetBase.GetMapBoundsScale
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector2D                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector2D USQMapWidgetBase::GetMapBoundsScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetBase", "GetMapBoundsScale");

	Params::SQMapWidgetBase_GetMapBoundsScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMapWidgetBase.GetNumGridLines
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector2D                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector2D USQMapWidgetBase::GetNumGridLines() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetBase", "GetNumGridLines");

	Params::SQMapWidgetBase_GetNumGridLines Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMapWidgetBase.GetWorldBounds
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FBox2D                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FBox2D USQMapWidgetBase::GetWorldBounds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetBase", "GetWorldBounds");

	Params::SQMapWidgetBase_GetWorldBounds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRotorWashEffectSender.Initialize
// (BlueprintCosmetic, Native, Event, Public, BlueprintEvent)

void USQRotorWashEffectSender::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRotorWashEffectSender", "Initialize");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRotorWashEffectSender.RegisterListener
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// class USQRotorWashEffectListener*       Listener                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQRotorWashEffectSender::RegisterListener(class USQRotorWashEffectListener* Listener)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRotorWashEffectSender", "RegisterListener");

	Params::SQRotorWashEffectSender_RegisterListener Parms{};

	Parms.Listener = Listener;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRotorWashEffectSender.UnregisterListener
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// class USQRotorWashEffectListener*       Listener                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQRotorWashEffectSender::UnregisterListener(class USQRotorWashEffectListener* Listener)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRotorWashEffectSender", "UnregisterListener");

	Params::SQRotorWashEffectSender_UnregisterListener Parms{};

	Parms.Listener = Listener;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapWidgetCaptureZone.OnCapturePercentChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetCaptureZone::OnCapturePercentChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetCaptureZone", "OnCapturePercentChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetCaptureZone.OnCapturePercentDirectionChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetCaptureZone::OnCapturePercentDirectionChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetCaptureZone", "OnCapturePercentDirectionChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetCaptureZone.OnCapturingTeamChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetCaptureZone::OnCapturingTeamChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetCaptureZone", "OnCapturingTeamChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetCaptureZone.OnContestingChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetCaptureZone::OnContestingChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetCaptureZone", "OnContestingChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetCaptureZone.OnFlagNameChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetCaptureZone::OnFlagNameChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetCaptureZone", "OnFlagNameChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetCaptureZone.OnFlagTextureChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetCaptureZone::OnFlagTextureChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetCaptureZone", "OnFlagTextureChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetCaptureZone.OnOwningTeamChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetCaptureZone::OnOwningTeamChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetCaptureZone", "OnOwningTeamChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetCaptureZone.OnTeamKnowledgeChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetCaptureZone::OnTeamKnowledgeChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetCaptureZone", "OnTeamKnowledgeChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetCaptureZone.OnUncappableChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetCaptureZone::OnUncappableChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetCaptureZone", "OnUncappableChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetDeployableExplosive.OnExplosiveTypeChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetDeployableExplosive::OnExplosiveTypeChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetDeployableExplosive", "OnExplosiveTypeChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQScoreboard.InitWidget
// (Native, Public, BlueprintCallable)

void USQScoreboard::InitWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQScoreboard", "InitWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQScoreboard.UpdateState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USQScoreboard::UpdateState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQScoreboard", "UpdateState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRotorBladesComponent.DamageRotor
// (Final, Native, Public, BlueprintCallable)

void USQRotorBladesComponent::DamageRotor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRotorBladesComponent", "DamageRotor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRotorBladesComponent.TakeFatalDamage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRotorBladesComponent::TakeFatalDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRotorBladesComponent", "TakeFatalDamage");

	Params::SQRotorBladesComponent_TakeFatalDamage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRotorBladesComponent.IsHealthy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRotorBladesComponent::IsHealthy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRotorBladesComponent", "IsHealthy");

	Params::SQRotorBladesComponent_IsHealthy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMapWidgetVehicle.OnClaimingSquadIDChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetVehicle::OnClaimingSquadIDChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetVehicle", "OnClaimingSquadIDChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetVehicle.OnHoldsCommanderChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetVehicle::OnHoldsCommanderChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetVehicle", "OnHoldsCommanderChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetVehicle.OnHoldsOccupantChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetVehicle::OnHoldsOccupantChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetVehicle", "OnHoldsOccupantChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetVehicle.OnHoldsSquadLeaderChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetVehicle::OnHoldsSquadLeaderChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetVehicle", "OnHoldsSquadLeaderChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetVehicle.OnIsInClaimingSquadChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetVehicle::OnIsInClaimingSquadChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetVehicle", "OnIsInClaimingSquadChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetVehicle.OnSelfInVehicleSeatChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetVehicle::OnSelfInVehicleSeatChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetVehicle", "OnSelfInVehicleSeatChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetVehicle.OnStaticUIDataChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetVehicle::OnStaticUIDataChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetVehicle", "OnStaticUIDataChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetVehicle.OnVehicleOccupantInfoChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   AtIndex                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQMapWidgetVehicle::OnVehicleOccupantInfoChanged(int32 AtIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetVehicle", "OnVehicleOccupantInfoChanged");

	Params::SQMapWidgetVehicle_OnVehicleOccupantInfoChanged Parms{};

	Parms.AtIndex = AtIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQMapWidgetVehicle.UpdateHoldsCommander
// (Final, Native, Protected, BlueprintCallable)

void USQMapWidgetVehicle::UpdateHoldsCommander()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetVehicle", "UpdateHoldsCommander");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapWidgetVehicle.IsSelfInVehicle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQMapWidgetVehicle::IsSelfInVehicle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetVehicle", "IsSelfInVehicle");

	Params::SQMapWidgetVehicle_IsSelfInVehicle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQMapWidgetEmplacement.OnTeamIDChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetEmplacement::OnTeamIDChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetEmplacement", "OnTeamIDChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQScoreboardTeamScore.InitWidget
// (Native, Public, BlueprintCallable)

void USQScoreboardTeamScore::InitWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQScoreboardTeamScore", "InitWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMapWidgetHAB.OnActivatedTimeStampChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetHAB::OnActivatedTimeStampChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetHAB", "OnActivatedTimeStampChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetHAB.OnSiegedChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetHAB::OnSiegedChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetHAB", "OnSiegedChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMapWidgetHAB.OnSpawningEnabledChanged
// (Event, Protected, BlueprintEvent)

void USQMapWidgetHAB::OnSpawningEnabledChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMapWidgetHAB", "OnSpawningEnabledChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQMedicBag.IncreaseHealth
// (Final, Native, Private)

void ASQMedicBag::IncreaseHealth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMedicBag", "IncreaseHealth");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQScriptCondition.BPInitialize
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           ContextObjectParam                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQScriptCondition::BPInitialize(class AActor* ContextObjectParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQScriptCondition", "BPInitialize");

	Params::SQScriptCondition_BPInitialize Parms{};

	Parms.ContextObjectParam = ContextObjectParam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQScriptCondition.Evaluate
// (Event, Public, BlueprintCallable, BlueprintEvent)

void USQScriptCondition::Evaluate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQScriptCondition", "Evaluate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQScriptCondition.EvaluationResult
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// bool                                    bNewValue                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQScriptCondition::EvaluationResult(const bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQScriptCondition", "EvaluationResult");

	Params::SQScriptCondition_EvaluationResult Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRotorVehicleMovementComponent.AddThrust
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   RotorIdx                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Thrust                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQRotorVehicleMovementComponent::AddThrust(int32 RotorIdx, float Thrust)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRotorVehicleMovementComponent", "AddThrust");

	Params::SQRotorVehicleMovementComponent_AddThrust Parms{};

	Parms.RotorIdx = RotorIdx;
	Parms.Thrust = Thrust;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRotorVehicleMovementComponent.AddThrustByType
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ESQRotorType                            RotorType                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Thrust                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQRotorVehicleMovementComponent::AddThrustByType(const ESQRotorType& RotorType, float Thrust)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRotorVehicleMovementComponent", "AddThrustByType");

	Params::SQRotorVehicleMovementComponent_AddThrustByType Parms{};

	Parms.RotorType = RotorType;
	Parms.Thrust = Thrust;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRotorVehicleMovementComponent.ToggleRotorLockByType
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// ESQRotorType                            RotorType                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQRotorVehicleMovementComponent::ToggleRotorLockByType(const ESQRotorType& RotorType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRotorVehicleMovementComponent", "ToggleRotorLockByType");

	Params::SQRotorVehicleMovementComponent_ToggleRotorLockByType Parms{};

	Parms.RotorType = RotorType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.MeshMergeFunctionLibrary.MergeMeshes
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSkeletalMeshMergeParams         Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class USkeletalMesh*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMesh* UMeshMergeFunctionLibrary::MergeMeshes(const struct FSkeletalMeshMergeParams& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MeshMergeFunctionLibrary", "MergeMeshes");

	Params::MeshMergeFunctionLibrary_MergeMeshes Parms{};

	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQItemSkinCollection.GetUISkinBadges
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FSQSkinUIBadge>           OutBadges                                              (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USQItemSkinCollection::GetUISkinBadges(TArray<struct FSQSkinUIBadge>& OutBadges)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQItemSkinCollection", "GetUISkinBadges");

	Params::SQItemSkinCollection_GetUISkinBadges Parms{};

	Parms.OutBadges = std::move(OutBadges);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	OutBadges = std::move(Parms.OutBadges);
}


// Function Squad.SQMovementComponentManager.RegisterComponent
// (Native, Public, BlueprintCallable)
// Parameters:
// class USQMovementComponentBase*         MovementComponent                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQMovementComponentManager::RegisterComponent(class USQMovementComponentBase* MovementComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMovementComponentManager", "RegisterComponent");

	Params::SQMovementComponentManager_RegisterComponent Parms{};

	Parms.MovementComponent = MovementComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMovementComponentManager.UnRegisterComponent
// (Native, Public, BlueprintCallable)
// Parameters:
// class USQMovementComponentBase*         MovementComponent                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQMovementComponentManager::UnRegisterComponent(class USQMovementComponentBase* MovementComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMovementComponentManager", "UnRegisterComponent");

	Params::SQMovementComponentManager_UnRegisterComponent Parms{};

	Parms.MovementComponent = MovementComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMovementComponentNetworker.Client_ReplicateClientAdjustment
// (Net, Native, Event, Protected, NetClient)
// Parameters:
// TArray<struct FAdjustPositionAndRotationPacket>Payload                                                (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USQMovementComponentNetworker::Client_ReplicateClientAdjustment(const TArray<struct FAdjustPositionAndRotationPacket>& Payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMovementComponentNetworker", "Client_ReplicateClientAdjustment");

	Params::SQMovementComponentNetworker_Client_ReplicateClientAdjustment Parms{};

	Parms.Payload = std::move(Payload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMovementComponentNetworker.Server_ReplicateMoveToServer
// (Net, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// TArray<struct FMovePacket>              Payload                                                (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USQMovementComponentNetworker::Server_ReplicateMoveToServer(const TArray<struct FMovePacket>& Payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMovementComponentNetworker", "Server_ReplicateMoveToServer");

	Params::SQMovementComponentNetworker_Server_ReplicateMoveToServer Parms{};

	Parms.Payload = std::move(Payload);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQMovementComponentPacked.ClientAdjustRotation
// (Net, Native, Event, Protected, HasDefaults, NetClient)
// Parameters:
// float                                   Timestamp                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         InRotation                                             (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          InRotationalVelocity                                   (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQMovementComponentPacked::ClientAdjustRotation(float Timestamp, const struct FRotator& InRotation, const struct FVector& InRotationalVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQMovementComponentPacked", "ClientAdjustRotation");

	Params::SQMovementComponentPacked_ClientAdjustRotation Parms{};

	Parms.Timestamp = Timestamp;
	Parms.InRotation = std::move(InRotation);
	Parms.InRotationalVelocity = std::move(InRotationalVelocity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldierRagdollComponent.OnRep_RagdollState
// (Native, Protected)

void USQSoldierRagdollComponent::OnRep_RagdollState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldierRagdollComponent", "OnRep_RagdollState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldierRagdollComponent.ServerSetRagdollState
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)
// Parameters:
// ESQSoldierRagdollReason                 NewRagdollState                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQSoldierRagdollComponent::ServerSetRagdollState(ESQSoldierRagdollReason NewRagdollState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldierRagdollComponent", "ServerSetRagdollState");

	Params::SQSoldierRagdollComponent_ServerSetRagdollState Parms{};

	Parms.NewRagdollState = NewRagdollState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldierRagdollComponent.SetDragging
// (Final, Native, Public)
// Parameters:
// bool                                    bIsDragging                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQSoldierRagdollComponent::SetDragging(const bool bIsDragging)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldierRagdollComponent", "SetDragging");

	Params::SQSoldierRagdollComponent_SetDragging Parms{};

	Parms.bIsDragging = bIsDragging;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldierRagdollComponent.SetRagdollState
// (Native, Public, BlueprintCallable)
// Parameters:
// ESQSoldierRagdollReason                 NewRagdollState                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQSoldierRagdollComponent::SetRagdollState(ESQSoldierRagdollReason NewRagdollState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldierRagdollComponent", "SetRagdollState");

	Params::SQSoldierRagdollComponent_SetRagdollState Parms{};

	Parms.NewRagdollState = NewRagdollState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldierRagdollComponent.GetRagdollState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESQSoldierRagdollReason                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESQSoldierRagdollReason USQSoldierRagdollComponent::GetRagdollState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldierRagdollComponent", "GetRagdollState");

	Params::SQSoldierRagdollComponent_GetRagdollState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldierRagdollComponent.IsInRagdoll
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSoldierRagdollComponent::IsInRagdoll() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldierRagdollComponent", "IsInRagdoll");

	Params::SQSoldierRagdollComponent_IsInRagdoll Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQNotificationData.GetNotificationLayout
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESQNotificationTypes                    NotificationType                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSQNotificationLayout      ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FSQNotificationLayout USQNotificationData::GetNotificationLayout(ESQNotificationTypes NotificationType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQNotificationData", "GetNotificationLayout");

	Params::SQNotificationData_GetNotificationLayout Parms{};

	Parms.NotificationType = NotificationType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldierWaterDamageComponent.OnWaterDamageBegin
// (Final, Native, Protected)

void USQSoldierWaterDamageComponent::OnWaterDamageBegin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldierWaterDamageComponent", "OnWaterDamageBegin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRestriction_FOBInRange.GetRange
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USQLayer*                         Layer                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQRestriction_FOBInRange::GetRange(const class USQLayer* Layer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_FOBInRange", "GetRange");

	Params::SQRestriction_FOBInRange_GetRange Parms{};

	Parms.Layer = Layer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRestriction_FOBInRange.IsAuthorizedWithFOBInRange
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQForwardBase*                   InFOBInRange                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRestriction_FOBInRange::IsAuthorizedWithFOBInRange(class ASQPlayerController* InPlayer, const class ASQForwardBase* InFOBInRange) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_FOBInRange", "IsAuthorizedWithFOBInRange");

	Params::SQRestriction_FOBInRange_IsAuthorizedWithFOBInRange Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InFOBInRange = InFOBInRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRestriction_FOBInRange.IsRestrictedWithFOBsInRange
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class ASQForwardBase*>           InFOBsInRange                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRestriction_FOBInRange::IsRestrictedWithFOBsInRange(class ASQPlayerController* InPlayer, const TArray<class ASQForwardBase*>& InFOBsInRange) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_FOBInRange", "IsRestrictedWithFOBsInRange");

	Params::SQRestriction_FOBInRange_IsRestrictedWithFOBsInRange Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InFOBsInRange = std::move(InFOBsInRange);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldierMovement.ApplyStaminaBurstLoss
// (Native, Public)
// Parameters:
// float                                   Penalty                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQSoldierMovement::ApplyStaminaBurstLoss(float Penalty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldierMovement", "ApplyStaminaBurstLoss");

	Params::SQSoldierMovement_ApplyStaminaBurstLoss Parms{};

	Parms.Penalty = Penalty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldierMovement.GetJumpVelocity
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQSoldierMovement::GetJumpVelocity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldierMovement", "GetJumpVelocity");

	Params::SQSoldierMovement_GetJumpVelocity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldierMovement.SetIsHurt
// (Final, Native, Public)
// Parameters:
// bool                                    bHurt                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQSoldierMovement::SetIsHurt(bool bHurt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldierMovement", "SetIsHurt");

	Params::SQSoldierMovement_SetIsHurt Parms{};

	Parms.bHurt = bHurt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldierMovement.UpdateStamina
// (Native, Public)

void USQSoldierMovement::UpdateStamina()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldierMovement", "UpdateStamina");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSoldierMovement.CalculateStamina
// (Native, Public, Const)
// Parameters:
// float                                   Penalty                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StanceRegenMultiplier                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQSoldierMovement::CalculateStamina(float Penalty, float StanceRegenMultiplier) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldierMovement", "CalculateStamina");

	Params::SQSoldierMovement_CalculateStamina Parms{};

	Parms.Penalty = Penalty;
	Parms.StanceRegenMultiplier = StanceRegenMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldierMovement.CanCrouchInCurrentState
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSoldierMovement::CanCrouchInCurrentState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldierMovement", "CanCrouchInCurrentState");

	Params::SQSoldierMovement_CanCrouchInCurrentState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldierMovement.CanJump
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSoldierMovement::CanJump() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldierMovement", "CanJump");

	Params::SQSoldierMovement_CanJump Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldierMovement.CanRun
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSoldierMovement::CanRun() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldierMovement", "CanRun");

	Params::SQSoldierMovement_CanRun Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldierMovement.CanSprint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSoldierMovement::CanSprint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldierMovement", "CanSprint");

	Params::SQSoldierMovement_CanSprint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldierMovement.GetCrouchWeight
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQSoldierMovement::GetCrouchWeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldierMovement", "GetCrouchWeight");

	Params::SQSoldierMovement_GetCrouchWeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldierMovement.GetProneWeight
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQSoldierMovement::GetProneWeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldierMovement", "GetProneWeight");

	Params::SQSoldierMovement_GetProneWeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldierMovement.GetWaterDepth
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQSoldierMovement::GetWaterDepth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldierMovement", "GetWaterDepth");

	Params::SQSoldierMovement_GetWaterDepth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldierMovement.GetWaterImmersionPercentage
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQSoldierMovement::GetWaterImmersionPercentage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldierMovement", "GetWaterImmersionPercentage");

	Params::SQSoldierMovement_GetWaterImmersionPercentage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldierMovement.IsAimingDownSights
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSoldierMovement::IsAimingDownSights() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldierMovement", "IsAimingDownSights");

	Params::SQSoldierMovement_IsAimingDownSights Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldierMovement.IsChestImmersed
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSoldierMovement::IsChestImmersed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldierMovement", "IsChestImmersed");

	Params::SQSoldierMovement_IsChestImmersed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldierMovement.IsDragging
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSoldierMovement::IsDragging() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldierMovement", "IsDragging");

	Params::SQSoldierMovement_IsDragging Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldierMovement.IsLeaningLeft
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSoldierMovement::IsLeaningLeft() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldierMovement", "IsLeaningLeft");

	Params::SQSoldierMovement_IsLeaningLeft Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldierMovement.IsLeaningRight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSoldierMovement::IsLeaningRight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldierMovement", "IsLeaningRight");

	Params::SQSoldierMovement_IsLeaningRight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldierMovement.IsProne
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSoldierMovement::IsProne() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldierMovement", "IsProne");

	Params::SQSoldierMovement_IsProne Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldierMovement.IsSprinting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSoldierMovement::IsSprinting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldierMovement", "IsSprinting");

	Params::SQSoldierMovement_IsSprinting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldierMovement.IsSprintPressed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSoldierMovement::IsSprintPressed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldierMovement", "IsSprintPressed");

	Params::SQSoldierMovement_IsSprintPressed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldierMovement.IsStaminaOverThreshold
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSoldierMovement::IsStaminaOverThreshold() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldierMovement", "IsStaminaOverThreshold");

	Params::SQSoldierMovement_IsStaminaOverThreshold Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSoldierMovement.IsWalkPressed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSoldierMovement::IsWalkPressed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSoldierMovement", "IsWalkPressed");

	Params::SQSoldierMovement_IsWalkPressed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQObjective.GetObjectiveMetMessage
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASQGameRuleSet*                   RuleSet                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQTeam                                 InTeam                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText ASQObjective::GetObjectiveMetMessage(class ASQGameRuleSet* RuleSet, ESQTeam InTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQObjective", "GetObjectiveMetMessage");

	Params::SQObjective_GetObjectiveMetMessage Parms{};

	Parms.RuleSet = RuleSet;
	Parms.InTeam = InTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQObjective.GetObjectiveShownMessage
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASQGameRuleSet*                   RuleSet                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQTeam                                 InTeam                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText ASQObjective::GetObjectiveShownMessage(class ASQGameRuleSet* RuleSet, ESQTeam InTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQObjective", "GetObjectiveShownMessage");

	Params::SQObjective_GetObjectiveShownMessage Parms{};

	Parms.RuleSet = RuleSet;
	Parms.InTeam = InTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQObjective.OnMet
// (Event, Public, BlueprintEvent)

void ASQObjective::OnMet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQObjective", "OnMet");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQObjective.OnRep_HasObjectiveBeenMet
// (Final, Native, Protected)

void ASQObjective::OnRep_HasObjectiveBeenMet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQObjective", "OnRep_HasObjectiveBeenMet");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQObjective.SetKnownToEveryone
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInIsKnownToEveryone                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQObjective::SetKnownToEveryone(bool bInIsKnownToEveryone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQObjective", "SetKnownToEveryone");

	Params::SQObjective_SetKnownToEveryone Parms{};

	Parms.bInIsKnownToEveryone = bInIsKnownToEveryone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQObjective.SetObjectiveMet
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bObjectiveMet                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQTeam                                 InTeam                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQObjective::SetObjectiveMet(bool bObjectiveMet, ESQTeam InTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQObjective", "SetObjectiveMet");

	Params::SQObjective_SetObjectiveMet Parms{};

	Parms.bObjectiveMet = bObjectiveMet;
	Parms.InTeam = InTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQObjective.SetWaitingToBeShown
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInIsWaitingToBeShown                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQObjective::SetWaitingToBeShown(bool bInIsWaitingToBeShown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQObjective", "SetWaitingToBeShown");

	Params::SQObjective_SetWaitingToBeShown Parms{};

	Parms.bInIsWaitingToBeShown = bInIsWaitingToBeShown;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQObjective.GetLocationForTeam
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESQTeam                                 InTeam                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ASQObjective::GetLocationForTeam(ESQTeam InTeam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQObjective", "GetLocationForTeam");

	Params::SQObjective_GetLocationForTeam Parms{};

	Parms.InTeam = InTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQObjective.GetObjectiveMetByTeam
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESQTeam                                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESQTeam ASQObjective::GetObjectiveMetByTeam() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQObjective", "GetObjectiveMetByTeam");

	Params::SQObjective_GetObjectiveMetByTeam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQObjective.HasObjectiveBeenMet
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQObjective::HasObjectiveBeenMet() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQObjective", "HasObjectiveBeenMet");

	Params::SQObjective_HasObjectiveBeenMet Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQObjective.IsKnownToEveryone
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQObjective::IsKnownToEveryone() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQObjective", "IsKnownToEveryone");

	Params::SQObjective_IsKnownToEveryone Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQObjective.IsWaitingToBeShown
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQObjective::IsWaitingToBeShown() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQObjective", "IsWaitingToBeShown");

	Params::SQObjective_IsWaitingToBeShown Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQObjective_Destroyable.BPClientObjectiveDestroyed
// (Event, Public, BlueprintEvent)

void ASQObjective_Destroyable::BPClientObjectiveDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQObjective_Destroyable", "BPClientObjectiveDestroyed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQObjective_Destroyable.MulticastPlayDamageEffects
// (Net, Native, Event, NetMulticast, Protected)
// Parameters:
// TSubclassOf<class UDamageType>          DamageTypeClass                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQObjective_Destroyable::MulticastPlayDamageEffects(TSubclassOf<class UDamageType> DamageTypeClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQObjective_Destroyable", "MulticastPlayDamageEffects");

	Params::SQObjective_Destroyable_MulticastPlayDamageEffects Parms{};

	Parms.DamageTypeClass = DamageTypeClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQObjective_Destroyable.ObjectiveDestroyed
// (BlueprintAuthorityOnly, Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDamageEvent                     DamageEvent                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AController*                      EventInstigator                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DamageCauser                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQObjective_Destroyable::ObjectiveDestroyed(float Damage, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQObjective_Destroyable", "ObjectiveDestroyed");

	Params::SQObjective_Destroyable_ObjectiveDestroyed Parms{};

	Parms.Damage = Damage;
	Parms.DamageEvent = std::move(DamageEvent);
	Parms.EventInstigator = EventInstigator;
	Parms.DamageCauser = DamageCauser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQObjective_Destroyable.OnRep_HasBeenDestroyed
// (Final, Native, Protected)

void ASQObjective_Destroyable::OnRep_HasBeenDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQObjective_Destroyable", "OnRep_HasBeenDestroyed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQShockwave.Explode
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ProjectileActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQShockwave::Explode(class UWorld* World, class AActor* ProjectileActor, const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQShockwave", "Explode");

	Params::SQShockwave_Explode Parms{};

	Parms.World = World;
	Parms.ProjectileActor = ProjectileActor;
	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQShockwave.NearbyExplosionEvent
// (Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// class AActor*                           ProjectileActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DistanceFromEffect                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQShockwave::NearbyExplosionEvent(class AActor* ProjectileActor, const struct FVector& Location, float DistanceFromEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQShockwave", "NearbyExplosionEvent");

	Params::SQShockwave_NearbyExplosionEvent Parms{};

	Parms.ProjectileActor = ProjectileActor;
	Parms.Location = std::move(Location);
	Parms.DistanceFromEffect = DistanceFromEffect;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQShockwave.GetShockwaveSetting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FSQShockwaveQualitySetting       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSQShockwaveQualitySetting USQShockwave::GetShockwaveSetting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQShockwave", "GetShockwaveSetting");

	Params::SQShockwave_GetShockwaveSetting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRoleSettings.CanEnterSeat
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USQVehicleSeatComponent*          Seat                                                   (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRoleSettings::CanEnterSeat(class USQVehicleSeatComponent* Seat) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRoleSettings", "CanEnterSeat");

	Params::SQRoleSettings_CanEnterSeat Parms{};

	Parms.Seat = Seat;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Squad.SQRoleSettings.CanPlaceRallyPointWithMinimumTeamMate
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRoleSettings::CanPlaceRallyPointWithMinimumTeamMate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRoleSettings", "CanPlaceRallyPointWithMinimumTeamMate");

	Params::SQRoleSettings_CanPlaceRallyPointWithMinimumTeamMate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Squad.SQRoleSettings.CanSeeHealthStatus
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRoleSettings::CanSeeHealthStatus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRoleSettings", "CanSeeHealthStatus");

	Params::SQRoleSettings_CanSeeHealthStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Squad.SQRoleSettings.GetRoleDisplayName
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FString                           CurrentRoleDisplayName                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQRoleSettings::GetRoleDisplayName(class FString* CurrentRoleDisplayName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRoleSettings", "GetRoleDisplayName");

	Params::SQRoleSettings_GetRoleDisplayName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentRoleDisplayName != nullptr)
		*CurrentRoleDisplayName = std::move(Parms.CurrentRoleDisplayName);
}


// Function Squad.SQRoleSettings.IsMedic
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRoleSettings::IsMedic() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRoleSettings", "IsMedic");

	Params::SQRoleSettings_IsMedic Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Squad.SQRoleSettings.IsSquadLeader
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRoleSettings::IsSquadLeader() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRoleSettings", "IsSquadLeader");

	Params::SQRoleSettings_IsSquadLeader Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Squad.SQRoleSettings.TryGetSoldierWithLayer
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USQLayer*                         InLayer                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             OutSoldier                                             (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRoleSettings::TryGetSoldierWithLayer(const class USQLayer* InLayer, TSoftClassPtr<class UClass>* OutSoldier) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRoleSettings", "TryGetSoldierWithLayer");

	Params::SQRoleSettings_TryGetSoldierWithLayer Parms{};

	Parms.InLayer = InLayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSoldier != nullptr)
		*OutSoldier = Parms.OutSoldier;

	return Parms.ReturnValue;
}


// Function Squad.SQPassDamageInterface.DoesPassDamage
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ISQPassDamageInterface::DoesPassDamage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPassDamageInterface", "DoesPassDamage");

	Params::SQPassDamageInterface_DoesPassDamage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPawnInventoryComponent.AddGroupToInventory
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQPawnInventoryComponent::AddGroupToInventory(int32 Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "AddGroupToInventory");

	Params::SQPawnInventoryComponent_AddGroupToInventory Parms{};

	Parms.Slot = Slot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPawnInventoryComponent.EndLoopAnimationHandler
// (Final, Native, Public)
// Parameters:
// class UAnimMontage*                     WeaponMontage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Soldier1pMontage                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Soldier3pMontage                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQMontageSectionNames           SectionNames                                           (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)

void USQPawnInventoryComponent::EndLoopAnimationHandler(class UAnimMontage* WeaponMontage, class UAnimMontage* Soldier1pMontage, class UAnimMontage* Soldier3pMontage, const struct FSQMontageSectionNames& SectionNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "EndLoopAnimationHandler");

	Params::SQPawnInventoryComponent_EndLoopAnimationHandler Parms{};

	Parms.WeaponMontage = WeaponMontage;
	Parms.Soldier1pMontage = Soldier1pMontage;
	Parms.Soldier3pMontage = Soldier3pMontage;
	Parms.SectionNames = std::move(SectionNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPawnInventoryComponent.FindValidWeaponByClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class ASQEquipableItem>     WeaponClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQEquipableItem*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQEquipableItem* USQPawnInventoryComponent::FindValidWeaponByClass(TSubclassOf<class ASQEquipableItem> WeaponClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "FindValidWeaponByClass");

	Params::SQPawnInventoryComponent_FindValidWeaponByClass Parms{};

	Parms.WeaponClass = WeaponClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPawnInventoryComponent.FindValidWeaponInGroup
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   WeaponSlot                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   WeaponOffset                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQEquipableItem*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQEquipableItem* USQPawnInventoryComponent::FindValidWeaponInGroup(int32 WeaponSlot, int32* WeaponOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "FindValidWeaponInGroup");

	Params::SQPawnInventoryComponent_FindValidWeaponInGroup Parms{};

	Parms.WeaponSlot = WeaponSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (WeaponOffset != nullptr)
		*WeaponOffset = Parms.WeaponOffset;

	return Parms.ReturnValue;
}


// Function Squad.SQPawnInventoryComponent.InsertExistingItemIntoInventory
// (Native, Public, BlueprintCallable)
// Parameters:
// class ASQEquipableItem*                 Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQPawnInventoryComponent::InsertExistingItemIntoInventory(class ASQEquipableItem* Item, int32 Slot, int32 Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "InsertExistingItemIntoInventory");

	Params::SQPawnInventoryComponent_InsertExistingItemIntoInventory Parms{};

	Parms.Item = Item;
	Parms.Slot = Slot;
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPawnInventoryComponent.InsertItemIntoInventory
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQInventoryData                 ItemClass                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSpawnMaxAmmo                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQEquipableItem*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQEquipableItem* USQPawnInventoryComponent::InsertItemIntoInventory(int32 Slot, const struct FSQInventoryData& ItemClass, int32 Offset, bool bSpawnMaxAmmo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "InsertItemIntoInventory");

	Params::SQPawnInventoryComponent_InsertItemIntoInventory Parms{};

	Parms.Slot = Slot;
	Parms.ItemClass = std::move(ItemClass);
	Parms.Offset = Offset;
	Parms.bSpawnMaxAmmo = bSpawnMaxAmmo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPawnInventoryComponent.OnAmmoChanged
// (Final, Native, Public)

void USQPawnInventoryComponent::OnAmmoChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "OnAmmoChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPawnInventoryComponent.OnNextItem
// (Final, Native, Public, BlueprintCallable)

void USQPawnInventoryComponent::OnNextItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "OnNextItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPawnInventoryComponent.OnPendingWeaponPawnOwnerChanged
// (Final, Native, Protected)
// Parameters:
// class APawn*                            NewPawnOwner                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQPawnInventoryComponent::OnPendingWeaponPawnOwnerChanged(class APawn* NewPawnOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "OnPendingWeaponPawnOwnerChanged");

	Params::SQPawnInventoryComponent_OnPendingWeaponPawnOwnerChanged Parms{};

	Parms.NewPawnOwner = NewPawnOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPawnInventoryComponent.OnPrevItem
// (Final, Native, Public, BlueprintCallable)

void USQPawnInventoryComponent::OnPrevItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "OnPrevItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPawnInventoryComponent.OnRep_PendingWeapon
// (Final, Native, Protected)
// Parameters:
// class ASQEquipableItem*                 PreviousPendingWeapon                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQPawnInventoryComponent::OnRep_PendingWeapon(class ASQEquipableItem* PreviousPendingWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "OnRep_PendingWeapon");

	Params::SQPawnInventoryComponent_OnRep_PendingWeapon Parms{};

	Parms.PreviousPendingWeapon = PreviousPendingWeapon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPawnInventoryComponent.OnRep_RepInventory
// (Native, Public)

void USQPawnInventoryComponent::OnRep_RepInventory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "OnRep_RepInventory");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPawnInventoryComponent.PauseAnimationHandler
// (Final, Native, Public)
// Parameters:
// class UAnimMontage*                     WeaponMontage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Soldier1pMontage                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Soldier3pMontage                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQPawnInventoryComponent::PauseAnimationHandler(class UAnimMontage* WeaponMontage, class UAnimMontage* Soldier1pMontage, class UAnimMontage* Soldier3pMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "PauseAnimationHandler");

	Params::SQPawnInventoryComponent_PauseAnimationHandler Parms{};

	Parms.WeaponMontage = WeaponMontage;
	Parms.Soldier1pMontage = Soldier1pMontage;
	Parms.Soldier3pMontage = Soldier3pMontage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPawnInventoryComponent.PlayAnimationHandler
// (Final, Native, Public)
// Parameters:
// class UAnimMontage*                     WeaponMontage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Soldier1pMontage                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Soldier3pMontage                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQPawnInventoryComponent::PlayAnimationHandler(class UAnimMontage* WeaponMontage, class UAnimMontage* Soldier1pMontage, class UAnimMontage* Soldier3pMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "PlayAnimationHandler");

	Params::SQPawnInventoryComponent_PlayAnimationHandler Parms{};

	Parms.WeaponMontage = WeaponMontage;
	Parms.Soldier1pMontage = Soldier1pMontage;
	Parms.Soldier3pMontage = Soldier3pMontage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPawnInventoryComponent.RemoveGroupFromInventory
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQPawnInventoryComponent::RemoveGroupFromInventory(int32 Slot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "RemoveGroupFromInventory");

	Params::SQPawnInventoryComponent_RemoveGroupFromInventory Parms{};

	Parms.Slot = Slot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPawnInventoryComponent.RemoveItemClassFromInventory
// (Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class ASQEquipableItem>     EquipableItemToRemove                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQPawnInventoryComponent::RemoveItemClassFromInventory(TSubclassOf<class ASQEquipableItem> EquipableItemToRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "RemoveItemClassFromInventory");

	Params::SQPawnInventoryComponent_RemoveItemClassFromInventory Parms{};

	Parms.EquipableItemToRemove = EquipableItemToRemove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPawnInventoryComponent.RemoveItemFromInventory
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQPawnInventoryComponent::RemoveItemFromInventory(int32 Slot, int32 Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "RemoveItemFromInventory");

	Params::SQPawnInventoryComponent_RemoveItemFromInventory Parms{};

	Parms.Slot = Slot;
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPawnInventoryComponent.RemoveWithoutDestroyingItem
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQEquipableItem*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQEquipableItem* USQPawnInventoryComponent::RemoveWithoutDestroyingItem(int32 Slot, int32 Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "RemoveWithoutDestroyingItem");

	Params::SQPawnInventoryComponent_RemoveWithoutDestroyingItem Parms{};

	Parms.Slot = Slot;
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPawnInventoryComponent.ReplaceItemInInventory
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Slot                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQInventoryData                 ItemClass                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQPawnInventoryComponent::ReplaceItemInInventory(int32 Slot, const struct FSQInventoryData& ItemClass, int32 Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "ReplaceItemInInventory");

	Params::SQPawnInventoryComponent_ReplaceItemInInventory Parms{};

	Parms.Slot = Slot;
	Parms.ItemClass = std::move(ItemClass);
	Parms.Offset = Offset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPawnInventoryComponent.ResetInventorySwitch
// (Final, Native, Public, BlueprintCallable)

void USQPawnInventoryComponent::ResetInventorySwitch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "ResetInventorySwitch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPawnInventoryComponent.ResumeAnimationHandler
// (Final, Native, Public)
// Parameters:
// class UAnimMontage*                     WeaponMontage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Soldier1pMontage                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Soldier3pMontage                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQPawnInventoryComponent::ResumeAnimationHandler(class UAnimMontage* WeaponMontage, class UAnimMontage* Soldier1pMontage, class UAnimMontage* Soldier3pMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "ResumeAnimationHandler");

	Params::SQPawnInventoryComponent_ResumeAnimationHandler Parms{};

	Parms.WeaponMontage = WeaponMontage;
	Parms.Soldier1pMontage = Soldier1pMontage;
	Parms.Soldier3pMontage = Soldier3pMontage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPawnInventoryComponent.ServerSwitchWeapon
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// int32                                   NewWeaponSlot                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQPawnInventoryComponent::ServerSwitchWeapon(int32 NewWeaponSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "ServerSwitchWeapon");

	Params::SQPawnInventoryComponent_ServerSwitchWeapon Parms{};

	Parms.NewWeaponSlot = NewWeaponSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPawnInventoryComponent.ServerSwitchWeapon2
// (Net, NetReliable, Native, Event, Public, NetServer, BlueprintCallable, NetValidate)
// Parameters:
// class ASQEquipableItem*                 NewWeapon                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQPawnInventoryComponent::ServerSwitchWeapon2(class ASQEquipableItem* NewWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "ServerSwitchWeapon2");

	Params::SQPawnInventoryComponent_ServerSwitchWeapon2 Parms{};

	Parms.NewWeapon = NewWeapon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPawnInventoryComponent.SetAnimationPlayRateHandler
// (Final, Native, Public)
// Parameters:
// class UAnimMontage*                     WeaponMontage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Soldier1pMontage                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Soldier3pMontage                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NewPlayRate                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQPawnInventoryComponent::SetAnimationPlayRateHandler(class UAnimMontage* WeaponMontage, class UAnimMontage* Soldier1pMontage, class UAnimMontage* Soldier3pMontage, const float NewPlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "SetAnimationPlayRateHandler");

	Params::SQPawnInventoryComponent_SetAnimationPlayRateHandler Parms{};

	Parms.WeaponMontage = WeaponMontage;
	Parms.Soldier1pMontage = Soldier1pMontage;
	Parms.Soldier3pMontage = Soldier3pMontage;
	Parms.NewPlayRate = NewPlayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPawnInventoryComponent.SetupStaticInfoBindings
// (Final, Native, Protected)
// Parameters:
// class ASQEquipableItem*                 Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQPawnInventoryComponent::SetupStaticInfoBindings(class ASQEquipableItem* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "SetupStaticInfoBindings");

	Params::SQPawnInventoryComponent_SetupStaticInfoBindings Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPawnInventoryComponent.SpawnEquipableItem
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSQInventoryData                 ItemClass                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bSpawnMaxAmmo                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQPersistedAmmoCount            StartingAmmo                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class ASQEquipableItem*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQEquipableItem* USQPawnInventoryComponent::SpawnEquipableItem(const struct FSQInventoryData& ItemClass, bool bSpawnMaxAmmo, const struct FSQPersistedAmmoCount& StartingAmmo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "SpawnEquipableItem");

	Params::SQPawnInventoryComponent_SpawnEquipableItem Parms{};

	Parms.ItemClass = std::move(ItemClass);
	Parms.bSpawnMaxAmmo = bSpawnMaxAmmo;
	Parms.StartingAmmo = std::move(StartingAmmo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPawnInventoryComponent.StopAnimationHandler
// (Final, Native, Public)
// Parameters:
// class UAnimMontage*                     WeaponMontage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Soldier1pMontage                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Soldier3pMontage                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   blendOutTime                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bStopAllWeaponAnims                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQPawnInventoryComponent::StopAnimationHandler(class UAnimMontage* WeaponMontage, class UAnimMontage* Soldier1pMontage, class UAnimMontage* Soldier3pMontage, const float blendOutTime, const bool bStopAllWeaponAnims)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "StopAnimationHandler");

	Params::SQPawnInventoryComponent_StopAnimationHandler Parms{};

	Parms.WeaponMontage = WeaponMontage;
	Parms.Soldier1pMontage = Soldier1pMontage;
	Parms.Soldier3pMontage = Soldier3pMontage;
	Parms.blendOutTime = blendOutTime;
	Parms.bStopAllWeaponAnims = bStopAllWeaponAnims;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPawnInventoryComponent.SwitchItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ItemSlot                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQPawnInventoryComponent::SwitchItem(int32 ItemSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "SwitchItem");

	Params::SQPawnInventoryComponent_SwitchItem Parms{};

	Parms.ItemSlot = ItemSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPawnInventoryComponent.SwitchWeapon
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewItemSlot                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQPawnInventoryComponent::SwitchWeapon(int32 NewItemSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "SwitchWeapon");

	Params::SQPawnInventoryComponent_SwitchWeapon Parms{};

	Parms.NewItemSlot = NewItemSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPawnInventoryComponent.SwitchWeaponDirectly
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewWeaponSlot                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewWeaponOffset                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInstant                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQPawnInventoryComponent::SwitchWeaponDirectly(int32 NewWeaponSlot, int32 NewWeaponOffset, bool bInstant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "SwitchWeaponDirectly");

	Params::SQPawnInventoryComponent_SwitchWeaponDirectly Parms{};

	Parms.NewWeaponSlot = NewWeaponSlot;
	Parms.NewWeaponOffset = NewWeaponOffset;
	Parms.bInstant = bInstant;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPawnInventoryComponent.UpdateInventorySwitch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewSlot                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewOffset                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInteracting                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQPawnInventoryComponent::UpdateInventorySwitch(int32 NewSlot, int32 NewOffset, bool bInteracting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "UpdateInventorySwitch");

	Params::SQPawnInventoryComponent_UpdateInventorySwitch Parms{};

	Parms.NewSlot = NewSlot;
	Parms.NewOffset = NewOffset;
	Parms.bInteracting = bInteracting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPawnInventoryComponent.UpdateStaticItemInfo
// (Native, Public, BlueprintCallable)
// Parameters:
// class USQItemStaticInfo*                InfoObject                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQPawnInventoryComponent::UpdateStaticItemInfo(class USQItemStaticInfo* InfoObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "UpdateStaticItemInfo");

	Params::SQPawnInventoryComponent_UpdateStaticItemInfo Parms{};

	Parms.InfoObject = InfoObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPawnInventoryComponent.CalculateMissingAmmoCost
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQPawnInventoryComponent::CalculateMissingAmmoCost() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "CalculateMissingAmmoCost");

	Params::SQPawnInventoryComponent_CalculateMissingAmmoCost Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPawnInventoryComponent.CalculateRearmCost
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   OutCost                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class ISQRearmSource>  RearmSource                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// TArray<struct FSQRearmWeaponRequest>    RearmRequest                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQPawnInventoryComponent::CalculateRearmCost(float* OutCost, const TScriptInterface<class ISQRearmSource>& RearmSource, const TArray<struct FSQRearmWeaponRequest>& RearmRequest) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "CalculateRearmCost");

	Params::SQPawnInventoryComponent_CalculateRearmCost Parms{};

	Parms.RearmSource = RearmSource;
	Parms.RearmRequest = std::move(RearmRequest);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutCost != nullptr)
		*OutCost = Parms.OutCost;

	return Parms.ReturnValue;
}


// Function Squad.SQPawnInventoryComponent.GetInventoryItemGroups
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FSQWeaponGroupData> ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FSQWeaponGroupData> USQPawnInventoryComponent::GetInventoryItemGroups() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPawnInventoryComponent", "GetInventoryItemGroups");

	Params::SQPawnInventoryComponent_GetInventoryItemGroups Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPhysicalMaterial.GetDecal
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FSQProjectileImpactEffect        InImpactEffect                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UMaterialInterface*               DefaultDecal                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInterface* USQPhysicalMaterial::GetDecal(const struct FSQProjectileImpactEffect& InImpactEffect, class UMaterialInterface* DefaultDecal) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPhysicalMaterial", "GetDecal");

	Params::SQPhysicalMaterial_GetDecal Parms{};

	Parms.InImpactEffect = std::move(InImpactEffect);
	Parms.DefaultDecal = DefaultDecal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPhysicalMaterial.GetNiagaraParticle
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FSQProjectileImpactEffect        InImpactEffect                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UNiagaraSystem*                   DefaultParticle                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UNiagaraSystem*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UNiagaraSystem* USQPhysicalMaterial::GetNiagaraParticle(const struct FSQProjectileImpactEffect& InImpactEffect, class UNiagaraSystem* DefaultParticle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPhysicalMaterial", "GetNiagaraParticle");

	Params::SQPhysicalMaterial_GetNiagaraParticle Parms{};

	Parms.InImpactEffect = std::move(InImpactEffect);
	Parms.DefaultParticle = DefaultParticle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPhysicalMaterial.GetParticle
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FSQProjectileImpactEffect        InImpactEffect                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UParticleSystem*                  DefaultParticle                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UParticleSystem*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UParticleSystem* USQPhysicalMaterial::GetParticle(const struct FSQProjectileImpactEffect& InImpactEffect, class UParticleSystem* DefaultParticle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPhysicalMaterial", "GetParticle");

	Params::SQPhysicalMaterial_GetParticle Parms{};

	Parms.InImpactEffect = std::move(InImpactEffect);
	Parms.DefaultParticle = DefaultParticle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPhysicalMaterial.GetShockwave
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FSQProjectileImpactEffect        InImpactEffect                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class USQShockwave*                     DefaultShockwave                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQShockwave*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQShockwave* USQPhysicalMaterial::GetShockwave(const struct FSQProjectileImpactEffect& InImpactEffect, class USQShockwave* DefaultShockwave) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPhysicalMaterial", "GetShockwave");

	Params::SQPhysicalMaterial_GetShockwave Parms{};

	Parms.InImpactEffect = std::move(InImpactEffect);
	Parms.DefaultShockwave = DefaultShockwave;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPhysicalMaterialRedirectors.GetRedirector
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQPhysicalMaterial*              Key                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQPhysicalMaterial*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQPhysicalMaterial* USQPhysicalMaterialRedirectors::GetRedirector(const class USQPhysicalMaterial* Key) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPhysicalMaterialRedirectors", "GetRedirector");

	Params::SQPhysicalMaterialRedirectors_GetRedirector Parms{};

	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPhysicalMaterialEffects.GetBlastEffect
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQPhysicalMaterial*              Material                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSQProjectileImpactEffect  ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FSQProjectileImpactEffect USQPhysicalMaterialEffects::GetBlastEffect(class USQPhysicalMaterial* Material) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPhysicalMaterialEffects", "GetBlastEffect");

	Params::SQPhysicalMaterialEffects_GetBlastEffect Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPhysicalMaterialEffects.GetEffect
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQPhysicalMaterial*              Material                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSQEffectsSet              ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FSQEffectsSet USQPhysicalMaterialEffects::GetEffect(class USQPhysicalMaterial* Material) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPhysicalMaterialEffects", "GetEffect");

	Params::SQPhysicalMaterialEffects_GetEffect Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPhysicalMaterialEffects.GetExplosionEffect
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQPhysicalMaterial*              Material                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSQExplosionEffect         ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FSQExplosionEffect USQPhysicalMaterialEffects::GetExplosionEffect(class USQPhysicalMaterial* Material) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPhysicalMaterialEffects", "GetExplosionEffect");

	Params::SQPhysicalMaterialEffects_GetExplosionEffect Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPhysicalMaterialEffects.GetImpactEffect
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQPhysicalMaterial*              Material                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSQProjectileImpactEffect  ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FSQProjectileImpactEffect USQPhysicalMaterialEffects::GetImpactEffect(class USQPhysicalMaterial* Material) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPhysicalMaterialEffects", "GetImpactEffect");

	Params::SQPhysicalMaterialEffects_GetImpactEffect Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPhysicalMaterialEffects.GetThrowableEffect
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQPhysicalMaterial*              Material                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSQProjectileImpactEffect  ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FSQProjectileImpactEffect USQPhysicalMaterialEffects::GetThrowableEffect(class USQPhysicalMaterial* Material) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPhysicalMaterialEffects", "GetThrowableEffect");

	Params::SQPhysicalMaterialEffects_GetThrowableEffect Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPhysicalMaterialVehiclesEffects.GetEffect
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQPhysicalMaterial*              Material                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSQVehicleEffect           ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FSQVehicleEffect USQPhysicalMaterialVehiclesEffects::GetEffect(const class USQPhysicalMaterial* Material) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPhysicalMaterialVehiclesEffects", "GetEffect");

	Params::SQPhysicalMaterialVehiclesEffects_GetEffect Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPhysicalMaterialSoldiersEffects.GetEffect
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQPhysicalMaterial*              Material                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FSQSoldierEffect           ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FSQSoldierEffect USQPhysicalMaterialSoldiersEffects::GetEffect(const class USQPhysicalMaterial* Material) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPhysicalMaterialSoldiersEffects", "GetEffect");

	Params::SQPhysicalMaterialSoldiersEffects_GetEffect Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSquadMemberList.Init
// (Final, Native, Protected, BlueprintCallable)

void USQSquadMemberList::Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadMemberList", "Init");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquadMemberList.OnInviteButtonClicked
// (Final, Native, Protected)

void USQSquadMemberList::OnInviteButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadMemberList", "OnInviteButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquadMemberList.OnLockButtonClicked
// (Final, Native, Protected)

void USQSquadMemberList::OnLockButtonClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadMemberList", "OnLockButtonClicked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquadMemberList.RefreshList
// (Final, Native, Protected, BlueprintCallable)

void USQSquadMemberList::RefreshList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadMemberList", "RefreshList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquadMemberList.RefreshSquadInfo
// (Final, Native, Protected, BlueprintCallable)

void USQSquadMemberList::RefreshSquadInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadMemberList", "RefreshSquadInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPhysicsVolume.BPActorEnteredVolume
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           Other                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPhysicsVolume::BPActorEnteredVolume(class AActor* Other)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPhysicsVolume", "BPActorEnteredVolume");

	Params::SQPhysicsVolume_BPActorEnteredVolume Parms{};

	Parms.Other = Other;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQPhysicsVolume.BPActorLeavingVolume
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           Other                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPhysicsVolume::BPActorLeavingVolume(class AActor* Other)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPhysicsVolume", "BPActorLeavingVolume");

	Params::SQPhysicsVolume_BPActorLeavingVolume Parms{};

	Parms.Other = Other;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQSpawnableItemBase.Sort
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class USQSpawnableItemBase*>     ItemArray                                              (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USQSpawnableItemBase::Sort(TArray<class USQSpawnableItemBase*>& ItemArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSpawnableItemBase", "Sort");

	Params::SQSpawnableItemBase_Sort Parms{};

	Parms.ItemArray = std::move(ItemArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ItemArray = std::move(Parms.ItemArray);
}


// Function Squad.SQSpawnableItemBase.GetSearchableName
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQSpawnableItemBase::GetSearchableName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSpawnableItemBase", "GetSearchableName");

	Params::SQSpawnableItemBase_GetSearchableName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Squad.SQLocalCameraEffectHandler.BP_ApplyCameraEffect
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQSoldier*                       SoldierToApplyTo                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQLocalCameraEffectHandler::BP_ApplyCameraEffect(float DeltaTime, class ASQSoldier* SoldierToApplyTo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLocalCameraEffectHandler", "BP_ApplyCameraEffect");

	Params::SQLocalCameraEffectHandler_BP_ApplyCameraEffect Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.SoldierToApplyTo = SoldierToApplyTo;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQLocalCameraEffectHandler.BP_InitCameraEffect
// (Event, Public, BlueprintEvent)
// Parameters:
// class ASQPlayerController*              InPlayerController                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQLocalCameraEffectHandler::BP_InitCameraEffect(class ASQPlayerController* InPlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLocalCameraEffectHandler", "BP_InitCameraEffect");

	Params::SQLocalCameraEffectHandler_BP_InitCameraEffect Parms{};

	Parms.InPlayerController = InPlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQLocalCameraEffectHandler.BP_SoldierChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// class ASQSoldier*                       NewSoldier                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQLocalCameraEffectHandler::BP_SoldierChanged(class ASQSoldier* NewSoldier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLocalCameraEffectHandler", "BP_SoldierChanged");

	Params::SQLocalCameraEffectHandler_BP_SoldierChanged Parms{};

	Parms.NewSoldier = NewSoldier;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQLocalAudioPlayer.BP_InitAudioEffect
// (Event, Public, BlueprintEvent)
// Parameters:
// class UAudioComponent*                  AudioComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQLocalAudioPlayer::BP_InitAudioEffect(class UAudioComponent* AudioComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLocalAudioPlayer", "BP_InitAudioEffect");

	Params::SQLocalAudioPlayer_BP_InitAudioEffect Parms{};

	Parms.AudioComponent = AudioComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQLocalAudioPlayer.BP_UpdateAudioComponent
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAudioComponent*                  AudioComponent                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQSoldier*                       SoldierToApplyTo                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQLocalAudioPlayer::BP_UpdateAudioComponent(float DeltaTime, class UAudioComponent* AudioComponent, class ASQSoldier* SoldierToApplyTo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQLocalAudioPlayer", "BP_UpdateAudioComponent");

	Params::SQLocalAudioPlayer_BP_UpdateAudioComponent Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.AudioComponent = AudioComponent;
	Parms.SoldierToApplyTo = SoldierToApplyTo;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQSquadRallyPoint.OnRep_SquadState
// (Native, Public)

void ASQSquadRallyPoint::OnRep_SquadState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadRallyPoint", "OnRep_SquadState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.AddPlacedDeployableItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ASQDeployable*                    Deployable                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::AddPlacedDeployableItem(class ASQDeployable* Deployable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "AddPlacedDeployableItem");

	Params::SQPlayerState_AddPlacedDeployableItem Parms{};

	Parms.Deployable = Deployable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.BlueprintSetPlayerName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::BlueprintSetPlayerName(const class FString& Param_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "BlueprintSetPlayerName");

	Params::SQPlayerState_BlueprintSetPlayerName Parms{};

	Parms.Param_Name = std::move(Param_Name);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.BPOnRep_PlayerNamePrefix
// (Event, Public, BlueprintEvent)
// Parameters:
// class FString                           OldPlayerNamePrefix                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NewPlayerNamePrefix                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::BPOnRep_PlayerNamePrefix(const class FString& OldPlayerNamePrefix, const class FString& NewPlayerNamePrefix)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "BPOnRep_PlayerNamePrefix");

	Params::SQPlayerState_BPOnRep_PlayerNamePrefix Parms{};

	Parms.OldPlayerNamePrefix = std::move(OldPlayerNamePrefix);
	Parms.NewPlayerNamePrefix = std::move(NewPlayerNamePrefix);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQPlayerState.GetPlayerOnlineID
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ASQPlayerState::GetPlayerOnlineID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetPlayerOnlineID");

	Params::SQPlayerState_GetPlayerOnlineID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.MulticastOnImpact
// (Net, NetReliable, Native, Event, NetMulticast, Public, HasDefaults)
// Parameters:
// uint64                                  ProjectileId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASQPlayerState::MulticastOnImpact(uint64 ProjectileId, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "MulticastOnImpact");

	Params::SQPlayerState_MulticastOnImpact Parms{};

	Parms.ProjectileId = ProjectileId;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.OnClientGetItemCacheSuccess
// (Native, Protected, HasOutParams)
// Parameters:
// struct FODKBazaarCacheCompletedData     Results                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ASQPlayerState::OnClientGetItemCacheSuccess(const struct FODKBazaarCacheCompletedData& Results)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "OnClientGetItemCacheSuccess");

	Params::SQPlayerState_OnClientGetItemCacheSuccess Parms{};

	Parms.Results = std::move(Results);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.OnRep_CurrentPawn
// (Native, Public)

void ASQPlayerState::OnRep_CurrentPawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "OnRep_CurrentPawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.OnRep_CurrentRole
// (Native, Public)

void ASQPlayerState::OnRep_CurrentRole()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "OnRep_CurrentRole");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.OnRep_CurrentSeat
// (Native, Public)
// Parameters:
// class USQVehicleSeatComponent*          LastSeat                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::OnRep_CurrentSeat(class USQVehicleSeatComponent* LastSeat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "OnRep_CurrentSeat");

	Params::SQPlayerState_OnRep_CurrentSeat Parms{};

	Parms.LastSeat = LastSeat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.OnRep_DeployRole
// (Native, Public)

void ASQPlayerState::OnRep_DeployRole()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "OnRep_DeployRole");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.OnRep_FireTeamIndex
// (Native, Public)

void ASQPlayerState::OnRep_FireTeamIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "OnRep_FireTeamIndex");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.OnRep_FireTeamPosition
// (Native, Public)

void ASQPlayerState::OnRep_FireTeamPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "OnRep_FireTeamPosition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.OnRep_PlayerNamePrefix
// (Native, Public)
// Parameters:
// class FString                           OldPlayerNamePrefix                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::OnRep_PlayerNamePrefix(const class FString& OldPlayerNamePrefix)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "OnRep_PlayerNamePrefix");

	Params::SQPlayerState_OnRep_PlayerNamePrefix Parms{};

	Parms.OldPlayerNamePrefix = std::move(OldPlayerNamePrefix);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.OnRep_SquadState
// (Native, Public)
// Parameters:
// class ASQSquadState*                    OldSquadState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::OnRep_SquadState(class ASQSquadState* OldSquadState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "OnRep_SquadState");

	Params::SQPlayerState_OnRep_SquadState Parms{};

	Parms.OldSquadState = OldSquadState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.OnRep_TeamState
// (Native, Public)
// Parameters:
// class ASQTeamState*                     OldTeamState                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::OnRep_TeamState(class ASQTeamState* OldTeamState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "OnRep_TeamState");

	Params::SQPlayerState_OnRep_TeamState Parms{};

	Parms.OldTeamState = OldTeamState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.OnServerGetItemCacheSuccess
// (Native, Protected, HasOutParams)
// Parameters:
// struct FODKBazaarCacheCompletedData     Results                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ASQPlayerState::OnServerGetItemCacheSuccess(const struct FODKBazaarCacheCompletedData& Results)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "OnServerGetItemCacheSuccess");

	Params::SQPlayerState_OnServerGetItemCacheSuccess Parms{};

	Parms.Results = std::move(Results);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.RemovedPlacedDeployableItemAt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Param_Index                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerState::RemovedPlacedDeployableItemAt(const int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "RemovedPlacedDeployableItemAt");

	Params::SQPlayerState_RemovedPlacedDeployableItemAt Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.ScorePoints
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Points                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Reason                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ScoreGroup                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::ScorePoints(int32 Points, const class FString& Reason, const class FName& ScoreGroup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "ScorePoints");

	Params::SQPlayerState_ScorePoints Parms{};

	Parms.Points = Points;
	Parms.Reason = std::move(Reason);
	Parms.ScoreGroup = ScoreGroup;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.ScorePointsDelayed
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Points                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Reason                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ScoreGroup                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::ScorePointsDelayed(int32 Points, const class FString& Reason, const class FName& ScoreGroup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "ScorePointsDelayed");

	Params::SQPlayerState_ScorePointsDelayed Parms{};

	Parms.Points = Points;
	Parms.Reason = std::move(Reason);
	Parms.ScoreGroup = ScoreGroup;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.SendEquippedSkinsToServer
// (Final, Native, Public)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerState::SendEquippedSkinsToServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "SendEquippedSkinsToServer");

	Params::SQPlayerState_SendEquippedSkinsToServer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.ServerGetSkinItemsCacheSuccess
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FODKBazaarCacheCompletedData     Results                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ASQPlayerState::ServerGetSkinItemsCacheSuccess(const struct FODKBazaarCacheCompletedData& Results)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "ServerGetSkinItemsCacheSuccess");

	Params::SQPlayerState_ServerGetSkinItemsCacheSuccess Parms{};

	Parms.Results = std::move(Results);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.ServerOnImpact
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults, NetValidate)
// Parameters:
// uint64                                  ProjectileId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASQPlayerState::ServerOnImpact(uint64 ProjectileId, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "ServerOnImpact");

	Params::SQPlayerState_ServerOnImpact Parms{};

	Parms.ProjectileId = ProjectileId;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.ServerRequestTeamChange
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// int32                                   NewTeam                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::ServerRequestTeamChange(int32 NewTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "ServerRequestTeamChange");

	Params::SQPlayerState_ServerRequestTeamChange Parms{};

	Parms.NewTeam = NewTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.ServerSendEquippedSkins
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// TArray<class FName>                     ClientEquippedItems                                    (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ASQPlayerState::ServerSendEquippedSkins(const TArray<class FName>& ClientEquippedItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "ServerSendEquippedSkins");

	Params::SQPlayerState_ServerSendEquippedSkins Parms{};

	Parms.ClientEquippedItems = std::move(ClientEquippedItems);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.ServerSendInventoryItems
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// TArray<class FName>                     Items                                                  (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FName>                     ActiveClanMemberItems                                  (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ASQPlayerState::ServerSendInventoryItems(const TArray<class FName>& Items, const TArray<class FName>& ActiveClanMemberItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "ServerSendInventoryItems");

	Params::SQPlayerState_ServerSendInventoryItems Parms{};

	Parms.Items = std::move(Items);
	Parms.ActiveClanMemberItems = std::move(ActiveClanMemberItems);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.ServerSetPlayerNamePrefix
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// class FString                           NewPlayerNamePrefix                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::ServerSetPlayerNamePrefix(const class FString& NewPlayerNamePrefix)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "ServerSetPlayerNamePrefix");

	Params::SQPlayerState_ServerSetPlayerNamePrefix Parms{};

	Parms.NewPlayerNamePrefix = std::move(NewPlayerNamePrefix);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.SetClanPatch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture*                         InClanPatch                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::SetClanPatch(class UTexture* InClanPatch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "SetClanPatch");

	Params::SQPlayerState_SetClanPatch Parms{};

	Parms.InClanPatch = InClanPatch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.SetCurrentPawn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class APawn*                            InPawn                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::SetCurrentPawn(class APawn* InPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "SetCurrentPawn");

	Params::SQPlayerState_SetCurrentPawn Parms{};

	Parms.InPawn = InPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.SetCurrentRole
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USQRoleSettings*                  InCurrentRole                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::SetCurrentRole(class USQRoleSettings* InCurrentRole)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "SetCurrentRole");

	Params::SQPlayerState_SetCurrentRole Parms{};

	Parms.InCurrentRole = InCurrentRole;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.SetCurrentSeat
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USQVehicleSeatComponent*          InCurrentSeat                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::SetCurrentSeat(class USQVehicleSeatComponent* InCurrentSeat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "SetCurrentSeat");

	Params::SQPlayerState_SetCurrentSeat Parms{};

	Parms.InCurrentSeat = InCurrentSeat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.SetDeployRole
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USQRoleSettings*                  InDeployRole                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::SetDeployRole(class USQRoleSettings* InDeployRole)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "SetDeployRole");

	Params::SQPlayerState_SetDeployRole Parms{};

	Parms.InDeployRole = InDeployRole;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.SetHealPoints
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InHealPoints                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::SetHealPoints(const float InHealPoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "SetHealPoints");

	Params::SQPlayerState_SetHealPoints Parms{};

	Parms.InHealPoints = InHealPoints;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.SetIsAdmin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInIsAdmin                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::SetIsAdmin(const bool bInIsAdmin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "SetIsAdmin");

	Params::SQPlayerState_SetIsAdmin Parms{};

	Parms.bInIsAdmin = bInIsAdmin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.SetIsDev
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInIsDev                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::SetIsDev(const bool bInIsDev)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "SetIsDev");

	Params::SQPlayerState_SetIsDev Parms{};

	Parms.bInIsDev = bInIsDev;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.SetIsMember
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInIsMember                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::SetIsMember(const bool bInIsMember)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "SetIsMember");

	Params::SQPlayerState_SetIsMember Parms{};

	Parms.bInIsMember = bInIsMember;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.SetIsQA
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInIsQA                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::SetIsQA(const bool bInIsQA)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "SetIsQA");

	Params::SQPlayerState_SetIsQA Parms{};

	Parms.bInIsQA = bInIsQA;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.SetLives
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InLives                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::SetLives(const int32 InLives)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "SetLives");

	Params::SQPlayerState_SetLives Parms{};

	Parms.InLives = InLives;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.SetNumDeaths
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InNumDeaths                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::SetNumDeaths(const int32 InNumDeaths)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "SetNumDeaths");

	Params::SQPlayerState_SetNumDeaths Parms{};

	Parms.InNumDeaths = InNumDeaths;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.SetNumKills
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InNumKill                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::SetNumKills(const int32 InNumKill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "SetNumKills");

	Params::SQPlayerState_SetNumKills Parms{};

	Parms.InNumKill = InNumKill;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.SetNumTeamKills
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InNumTeamkills                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::SetNumTeamKills(const int32 InNumTeamkills)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "SetNumTeamKills");

	Params::SQPlayerState_SetNumTeamKills Parms{};

	Parms.InNumTeamkills = InNumTeamkills;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.SetNumWounded
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InWounded                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::SetNumWounded(const int32 InWounded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "SetNumWounded");

	Params::SQPlayerState_SetNumWounded Parms{};

	Parms.InWounded = InWounded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.SetNumWounds
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InWounds                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::SetNumWounds(const int32 InWounds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "SetNumWounds");

	Params::SQPlayerState_SetNumWounds Parms{};

	Parms.InWounds = InWounds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.SetObjectiveScore
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InObjectiveScore                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::SetObjectiveScore(const float InObjectiveScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "SetObjectiveScore");

	Params::SQPlayerState_SetObjectiveScore Parms{};

	Parms.InObjectiveScore = InObjectiveScore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.SetPlayerNamePrefix
// (Native, Public, BlueprintCallable)
// Parameters:
// class FString                           NewPlayerNamePrefix                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::SetPlayerNamePrefix(const class FString& NewPlayerNamePrefix)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "SetPlayerNamePrefix");

	Params::SQPlayerState_SetPlayerNamePrefix Parms{};

	Parms.NewPlayerNamePrefix = std::move(NewPlayerNamePrefix);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.SetRevivedPoints
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InRevivedPoints                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::SetRevivedPoints(const float InRevivedPoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "SetRevivedPoints");

	Params::SQPlayerState_SetRevivedPoints Parms{};

	Parms.InRevivedPoints = InRevivedPoints;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.SetSoldier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ASQSoldier*                       InSoldier                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::SetSoldier(class ASQSoldier* InSoldier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "SetSoldier");

	Params::SQPlayerState_SetSoldier Parms{};

	Parms.InSoldier = InSoldier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.SetSquadState
// (Native, Public)
// Parameters:
// class ASQSquadState*                    NewSquadState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::SetSquadState(class ASQSquadState* NewSquadState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "SetSquadState");

	Params::SQPlayerState_SetSquadState Parms{};

	Parms.NewSquadState = NewSquadState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.SetSupporterPatch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture*                         InSupporterPatch                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::SetSupporterPatch(class UTexture* InSupporterPatch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "SetSupporterPatch");

	Params::SQPlayerState_SetSupporterPatch Parms{};

	Parms.InSupporterPatch = InSupporterPatch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.SetTeamState
// (Native, Public, BlueprintCallable)
// Parameters:
// class ASQTeamState*                     NewTeamState                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::SetTeamState(class ASQTeamState* NewTeamState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "SetTeamState");

	Params::SQPlayerState_SetTeamState Parms{};

	Parms.NewTeamState = NewTeamState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.SetTeamWorkScore
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InTeamWorkScore                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::SetTeamWorkScore(const float InTeamWorkScore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "SetTeamWorkScore");

	Params::SQPlayerState_SetTeamWorkScore Parms{};

	Parms.InTeamWorkScore = InTeamWorkScore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.UpdateContextVoiceSettings
// (Final, Native, Public)
// Parameters:
// class ASQSquadState*                    Squad                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQPlayerState*                   Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQPlayerState::UpdateContextVoiceSettings(class ASQSquadState* Squad, class ASQPlayerState* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "UpdateContextVoiceSettings");

	Params::SQPlayerState_UpdateContextVoiceSettings Parms{};

	Parms.Squad = Squad;
	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQPlayerState.GetClanPatch
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* ASQPlayerState::GetClanPatch() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetClanPatch");

	Params::SQPlayerState_GetClanPatch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.GetCurrentPawn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APawn*                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APawn* ASQPlayerState::GetCurrentPawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetCurrentPawn");

	Params::SQPlayerState_GetCurrentPawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.GetCurrentRole
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQRoleSettings*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQRoleSettings* ASQPlayerState::GetCurrentRole() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetCurrentRole");

	Params::SQPlayerState_GetCurrentRole Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.GetCurrentSeat
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQVehicleSeatComponent*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQVehicleSeatComponent* ASQPlayerState::GetCurrentSeat() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetCurrentSeat");

	Params::SQPlayerState_GetCurrentSeat Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.GetCurrentSeatPawn
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQVehicleSeat*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQVehicleSeat* ASQPlayerState::GetCurrentSeatPawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetCurrentSeatPawn");

	Params::SQPlayerState_GetCurrentSeatPawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.GetCurrentVehicle
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQVehicle*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQVehicle* ASQPlayerState::GetCurrentVehicle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetCurrentVehicle");

	Params::SQPlayerState_GetCurrentVehicle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.GetDeployRole
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQRoleSettings*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQRoleSettings* ASQPlayerState::GetDeployRole() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetDeployRole");

	Params::SQPlayerState_GetDeployRole Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.GetFireTeamIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQPlayerState::GetFireTeamIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetFireTeamIndex");

	Params::SQPlayerState_GetFireTeamIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.GetFireTeamPosition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQPlayerState::GetFireTeamPosition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetFireTeamPosition");

	Params::SQPlayerState_GetFireTeamPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.GetFullPlayerName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bReturnUnmodified                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ASQPlayerState::GetFullPlayerName(bool bReturnUnmodified) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetFullPlayerName");

	Params::SQPlayerState_GetFullPlayerName Parms{};

	Parms.bReturnUnmodified = bReturnUnmodified;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.GetHealPoints
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQPlayerState::GetHealPoints() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetHealPoints");

	Params::SQPlayerState_GetHealPoints Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.GetLives
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQPlayerState::GetLives() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetLives");

	Params::SQPlayerState_GetLives Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.GetNumDeaths
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQPlayerState::GetNumDeaths() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetNumDeaths");

	Params::SQPlayerState_GetNumDeaths Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.GetNumKills
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQPlayerState::GetNumKills() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetNumKills");

	Params::SQPlayerState_GetNumKills Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.GetNumTeamKills
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQPlayerState::GetNumTeamKills() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetNumTeamKills");

	Params::SQPlayerState_GetNumTeamKills Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.GetNumWounded
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQPlayerState::GetNumWounded() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetNumWounded");

	Params::SQPlayerState_GetNumWounded Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.GetNumWounds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQPlayerState::GetNumWounds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetNumWounds");

	Params::SQPlayerState_GetNumWounds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.GetObjectiveScore
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQPlayerState::GetObjectiveScore() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetObjectiveScore");

	Params::SQPlayerState_GetObjectiveScore Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.GetOnlyPlayerName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bReturnUnmodified                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ASQPlayerState::GetOnlyPlayerName(bool bReturnUnmodified) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetOnlyPlayerName");

	Params::SQPlayerState_GetOnlyPlayerName Parms{};

	Parms.bReturnUnmodified = bReturnUnmodified;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.GetOnlyPlayerPrefix
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bReturnUnmodified                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ASQPlayerState::GetOnlyPlayerPrefix(bool bReturnUnmodified) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetOnlyPlayerPrefix");

	Params::SQPlayerState_GetOnlyPlayerPrefix Parms{};

	Parms.bReturnUnmodified = bReturnUnmodified;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.GetPlacedDeployableAt
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQDeployable*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQDeployable* ASQPlayerState::GetPlacedDeployableAt(int32 Param_Index) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetPlacedDeployableAt");

	Params::SQPlayerState_GetPlacedDeployableAt Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.GetPlacedDeployableItemsCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQPlayerState::GetPlacedDeployableItemsCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetPlacedDeployableItemsCount");

	Params::SQPlayerState_GetPlacedDeployableItemsCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.GetPlayerNamePrefix
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ASQPlayerState::GetPlayerNamePrefix() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetPlayerNamePrefix");

	Params::SQPlayerState_GetPlayerNamePrefix Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.GetRevivedPoints
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQPlayerState::GetRevivedPoints() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetRevivedPoints");

	Params::SQPlayerState_GetRevivedPoints Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.GetShortPlayerName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ASQPlayerState::GetShortPlayerName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetShortPlayerName");

	Params::SQPlayerState_GetShortPlayerName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.GetSoldier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQSoldier*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQSoldier* ASQPlayerState::GetSoldier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetSoldier");

	Params::SQPlayerState_GetSoldier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.GetSquadState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQSquadState*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQSquadState* ASQPlayerState::GetSquadState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetSquadState");

	Params::SQPlayerState_GetSquadState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.GetSupporterPatch
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* ASQPlayerState::GetSupporterPatch() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetSupporterPatch");

	Params::SQPlayerState_GetSupporterPatch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.GetTeamState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQTeamState*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQTeamState* ASQPlayerState::GetTeamState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetTeamState");

	Params::SQPlayerState_GetTeamState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.GetTeamWorkScore
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQPlayerState::GetTeamWorkScore() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetTeamWorkScore");

	Params::SQPlayerState_GetTeamWorkScore Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.GetUniqueNetID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FUniqueNetIdRepl                 ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FUniqueNetIdRepl ASQPlayerState::GetUniqueNetID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "GetUniqueNetID");

	Params::SQPlayerState_GetUniqueNetID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.IsAdmin
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerState::IsAdmin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "IsAdmin");

	Params::SQPlayerState_IsAdmin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.IsAlive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerState::IsAlive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "IsAlive");

	Params::SQPlayerState_IsAlive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.IsCommander
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerState::IsCommander() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "IsCommander");

	Params::SQPlayerState_IsCommander Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.IsDev
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerState::IsDev() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "IsDev");

	Params::SQPlayerState_IsDev Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.IsFireTeamLeader
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerState::IsFireTeamLeader() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "IsFireTeamLeader");

	Params::SQPlayerState_IsFireTeamLeader Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.IsMember
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerState::IsMember() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "IsMember");

	Params::SQPlayerState_IsMember Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.IsQA
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerState::IsQA() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "IsQA");

	Params::SQPlayerState_IsQA Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQPlayerState.IsSquadLeader
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQPlayerState::IsSquadLeader() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQPlayerState", "IsSquadLeader");

	Params::SQPlayerState_IsSquadLeader Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleExitPointComponent.CanExit
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVehicleExitPointComponent::CanExit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleExitPointComponent", "CanExit");

	Params::SQVehicleExitPointComponent_CanExit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleMovementComponentInterface.SetAllSteeringInputs
// (Native, Public)
// Parameters:
// float                                   Input                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISQVehicleMovementComponentInterface::SetAllSteeringInputs(float Input)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleMovementComponentInterface", "SetAllSteeringInputs");

	Params::SQVehicleMovementComponentInterface_SetAllSteeringInputs Parms{};

	Parms.Input = Input;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleMovementComponentInterface.SetAllThrottleInputs
// (Native, Public)
// Parameters:
// float                                   Input                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxThrottle                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEngineActive                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISQVehicleMovementComponentInterface::SetAllThrottleInputs(float Input, float MaxThrottle, bool bEngineActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleMovementComponentInterface", "SetAllThrottleInputs");

	Params::SQVehicleMovementComponentInterface_SetAllThrottleInputs Parms{};

	Parms.Input = Input;
	Parms.MaxThrottle = MaxThrottle;
	Parms.bEngineActive = bEngineActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleMovementComponentInterface.SetEngineBoostTorqueMultiplier
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InEngineBoostTorqueMultiplier                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISQVehicleMovementComponentInterface::SetEngineBoostTorqueMultiplier(float InEngineBoostTorqueMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleMovementComponentInterface", "SetEngineBoostTorqueMultiplier");

	Params::SQVehicleMovementComponentInterface_SetEngineBoostTorqueMultiplier Parms{};

	Parms.InEngineBoostTorqueMultiplier = InEngineBoostTorqueMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleMovementComponentInterface.SetRawSteeringInput
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   RawInput                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISQVehicleMovementComponentInterface::SetRawSteeringInput(float RawInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleMovementComponentInterface", "SetRawSteeringInput");

	Params::SQVehicleMovementComponentInterface_SetRawSteeringInput Parms{};

	Parms.RawInput = RawInput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleMovementComponentInterface.SetRawThrottleInput
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   RawInput                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISQVehicleMovementComponentInterface::SetRawThrottleInput(float RawInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleMovementComponentInterface", "SetRawThrottleInput");

	Params::SQVehicleMovementComponentInterface_SetRawThrottleInput Parms{};

	Parms.RawInput = RawInput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleMovementComponentInterface.SetShouldSimulate
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InbShouldSimulate                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISQVehicleMovementComponentInterface::SetShouldSimulate(bool InbShouldSimulate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleMovementComponentInterface", "SetShouldSimulate");

	Params::SQVehicleMovementComponentInterface_SetShouldSimulate Parms{};

	Parms.InbShouldSimulate = InbShouldSimulate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleMovementComponentInterface.SetSteeringInput
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   Input                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISQVehicleMovementComponentInterface::SetSteeringInput(float Input)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleMovementComponentInterface", "SetSteeringInput");

	Params::SQVehicleMovementComponentInterface_SetSteeringInput Parms{};

	Parms.Input = Input;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleMovementComponentInterface.SetThrottleInput
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   Input                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISQVehicleMovementComponentInterface::SetThrottleInput(float Input)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleMovementComponentInterface", "SetThrottleInput");

	Params::SQVehicleMovementComponentInterface_SetThrottleInput Parms{};

	Parms.Input = Input;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleMovementComponentInterface.GetBrakeInput
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ISQVehicleMovementComponentInterface::GetBrakeInput() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleMovementComponentInterface", "GetBrakeInput");

	Params::SQVehicleMovementComponentInterface_GetBrakeInput Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleMovementComponentInterface.GetHandbrakeInput
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ISQVehicleMovementComponentInterface::GetHandbrakeInput() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleMovementComponentInterface", "GetHandbrakeInput");

	Params::SQVehicleMovementComponentInterface_GetHandbrakeInput Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleMovementComponentInterface.GetMaxSpringForce
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ISQVehicleMovementComponentInterface::GetMaxSpringForce() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleMovementComponentInterface", "GetMaxSpringForce");

	Params::SQVehicleMovementComponentInterface_GetMaxSpringForce Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleMovementComponentInterface.GetRawSteeringInput
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ISQVehicleMovementComponentInterface::GetRawSteeringInput() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleMovementComponentInterface", "GetRawSteeringInput");

	Params::SQVehicleMovementComponentInterface_GetRawSteeringInput Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleMovementComponentInterface.GetRawThrottleInput
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ISQVehicleMovementComponentInterface::GetRawThrottleInput() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleMovementComponentInterface", "GetRawThrottleInput");

	Params::SQVehicleMovementComponentInterface_GetRawThrottleInput Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleMovementComponentInterface.GetShouldSimulate
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ISQVehicleMovementComponentInterface::GetShouldSimulate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleMovementComponentInterface", "GetShouldSimulate");

	Params::SQVehicleMovementComponentInterface_GetShouldSimulate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleMovementComponentInterface.GetSteeringInput
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ISQVehicleMovementComponentInterface::GetSteeringInput() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleMovementComponentInterface", "GetSteeringInput");

	Params::SQVehicleMovementComponentInterface_GetSteeringInput Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleMovementComponentInterface.GetThrottleInput
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ISQVehicleMovementComponentInterface::GetThrottleInput() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleMovementComponentInterface", "GetThrottleInput");

	Params::SQVehicleMovementComponentInterface_GetThrottleInput Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleMovementComponentInterface.GetTrueEngineMaxRotationSpeed
// (Native, Public, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ISQVehicleMovementComponentInterface::GetTrueEngineMaxRotationSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleMovementComponentInterface", "GetTrueEngineMaxRotationSpeed");

	Params::SQVehicleMovementComponentInterface_GetTrueEngineMaxRotationSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleMovementComponentInterface.GetTrueEngineRotationSpeed
// (Native, Public, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ISQVehicleMovementComponentInterface::GetTrueEngineRotationSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleMovementComponentInterface", "GetTrueEngineRotationSpeed");

	Params::SQVehicleMovementComponentInterface_GetTrueEngineRotationSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleMovementComponentInterface.GetTrueForwardSpeed
// (Native, Public, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ISQVehicleMovementComponentInterface::GetTrueForwardSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleMovementComponentInterface", "GetTrueForwardSpeed");

	Params::SQVehicleMovementComponentInterface_GetTrueForwardSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQProjectileMovement.ConsumeJitterImpulse
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InDeltaTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQProjectileMovement::ConsumeJitterImpulse(float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProjectileMovement", "ConsumeJitterImpulse");

	Params::SQProjectileMovement_ConsumeJitterImpulse Parms{};

	Parms.InDeltaTime = InDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQProjectileMovement.GenerateJitterImpulse
// (Final, Native, Public, BlueprintCallable)

void USQProjectileMovement::GenerateJitterImpulse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProjectileMovement", "GenerateJitterImpulse");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQProjectileMovement.SetUseAdditiveJitter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQProjectileMovement::SetUseAdditiveJitter(bool NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProjectileMovement", "SetUseAdditiveJitter");

	Params::SQProjectileMovement_SetUseAdditiveJitter Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQProjectileMovement.GetCurrentMovementMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQMovementModeDataAsset*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQMovementModeDataAsset* USQProjectileMovement::GetCurrentMovementMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProjectileMovement", "GetCurrentMovementMode");

	Params::SQProjectileMovement_GetCurrentMovementMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleSmokeComponent.SpawnSmokeVolumes
// (Final, Native, Public, BlueprintCallable)

void USQVehicleSmokeComponent::SpawnSmokeVolumes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSmokeComponent", "SpawnSmokeVolumes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquad.GiveSquadLeader
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ASQPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSquad::GiveSquadLeader(class ASQPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquad", "GiveSquadLeader");

	Params::SQSquad_GiveSquadLeader Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction Squad.SQSquad.OnFireteamChangedEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class ASQSquad*                         Squad                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FireTeamId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSquad::OnFireteamChangedEvent__DelegateSignature(class ASQSquad* Squad, int32 FireTeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquad", "OnFireteamChangedEvent__DelegateSignature");

	Params::SQSquad_OnFireteamChangedEvent__DelegateSignature Parms{};

	Parms.Squad = Squad;
	Parms.FireTeamId = FireTeamId;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction Squad.SQSquad.OnPlayerJoinPartSquadEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class ASQSquad*                         Squad                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQPlayerController*              Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSquad::OnPlayerJoinPartSquadEvent__DelegateSignature(class ASQSquad* Squad, class ASQPlayerController* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquad", "OnPlayerJoinPartSquadEvent__DelegateSignature");

	Params::SQSquad_OnPlayerJoinPartSquadEvent__DelegateSignature Parms{};

	Parms.Squad = Squad;
	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQSquad.TryApproveVehicleClaim
// (Final, Native, Public)

void ASQSquad::TryApproveVehicleClaim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquad", "TryApproveVehicleClaim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquad.TryClaimVehicle
// (Final, Native, Public)
// Parameters:
// class ASQVehicle*                       Vehicle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSquad::TryClaimVehicle(class ASQVehicle* Vehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquad", "TryClaimVehicle");

	Params::SQSquad_TryClaimVehicle Parms{};

	Parms.Vehicle = Vehicle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSquad.GetBlockingDirectVehicleClaims
// (Final, Native, Public, Const)
// Parameters:
// TArray<class USQVehicleClaim*>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class USQVehicleClaim*> ASQSquad::GetBlockingDirectVehicleClaims() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquad", "GetBlockingDirectVehicleClaims");

	Params::SQSquad_GetBlockingDirectVehicleClaims Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSquad.GetBlockingPartyVehicleClaims
// (Final, Native, Public, Const)
// Parameters:
// TArray<class USQVehicleClaim*>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class USQVehicleClaim*> ASQSquad::GetBlockingPartyVehicleClaims() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquad", "GetBlockingPartyVehicleClaims");

	Params::SQSquad_GetBlockingPartyVehicleClaims Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQProtectionZone.CheckOverlap
// (Final, Native, Protected)

void ASQProtectionZone::CheckOverlap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProtectionZone", "CheckOverlap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQProtectionZone.OnCompBeginOverlap
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASQProtectionZone::OnCompBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProtectionZone", "OnCompBeginOverlap");

	Params::SQProtectionZone_OnCompBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQProtectionZone.OnCompExit
// (Final, Native, Protected)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQProtectionZone::OnCompExit(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQProtectionZone", "OnCompExit");

	Params::SQProtectionZone_OnCompExit Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQQuickPlaySearch.CancelSearch
// (Final, Native, Public, BlueprintCallable)

void USQQuickPlaySearch::CancelSearch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQQuickPlaySearch", "CancelSearch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQQuickPlaySearch.GetSquadGameInstance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USQGameInstance*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQGameInstance* USQQuickPlaySearch::GetSquadGameInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQQuickPlaySearch", "GetSquadGameInstance");

	Params::SQQuickPlaySearch_GetSquadGameInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQQuickPlaySearch.IsSessionFilteredOut
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FBlueprintSessionResult          Session                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQQuickPlaySearch::IsSessionFilteredOut(const struct FBlueprintSessionResult& Session)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQQuickPlaySearch", "IsSessionFilteredOut");

	Params::SQQuickPlaySearch_IsSessionFilteredOut Parms{};

	Parms.Session = std::move(Session);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQQuickPlaySearch.OnFindSessionsCancelled
// (Final, Native, Private)

void USQQuickPlaySearch::OnFindSessionsCancelled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQQuickPlaySearch", "OnFindSessionsCancelled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQQuickPlaySearch.OnFindSessionsCompleted
// (Final, Native, Private, HasOutParams)
// Parameters:
// TArray<struct FBlueprintSessionResult>  Results                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bSuccess                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQQuickPlaySearch::OnFindSessionsCompleted(const TArray<struct FBlueprintSessionResult>& Results, bool bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQQuickPlaySearch", "OnFindSessionsCompleted");

	Params::SQQuickPlaySearch_OnFindSessionsCompleted Parms{};

	Parms.Results = std::move(Results);
	Parms.bSuccess = bSuccess;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQQuickPlaySearch.OnFindSessionsNewSessionUpdate
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FBlueprintSessionResult          SessionResult                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USQQuickPlaySearch::OnFindSessionsNewSessionUpdate(const struct FBlueprintSessionResult& SessionResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQQuickPlaySearch", "OnFindSessionsNewSessionUpdate");

	Params::SQQuickPlaySearch_OnFindSessionsNewSessionUpdate Parms{};

	Parms.SessionResult = std::move(SessionResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQQuickPlaySearch.PreferencesToJson
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPlayFabJsonObject*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPlayFabJsonObject* USQQuickPlaySearch::PreferencesToJson()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQQuickPlaySearch", "PreferencesToJson");

	Params::SQQuickPlaySearch_PreferencesToJson Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQQuickPlaySearch.RunSearch
// (Final, Native, Public, BlueprintCallable)

void USQQuickPlaySearch::RunSearch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQQuickPlaySearch", "RunSearch");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQQuickPlaySearch.SetShowEmptyServers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQQuickPlaySearch::SetShowEmptyServers(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQQuickPlaySearch", "SetShowEmptyServers");

	Params::SQQuickPlaySearch_SetShowEmptyServers Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQQuickPlaySearch.SetShowFullServers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQQuickPlaySearch::SetShowFullServers(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQQuickPlaySearch", "SetShowFullServers");

	Params::SQQuickPlaySearch_SetShowFullServers Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQQuickPlaySearch.SetShowModdedServers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQQuickPlaySearch::SetShowModdedServers(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQQuickPlaySearch", "SetShowModdedServers");

	Params::SQQuickPlaySearch_SetShowModdedServers Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQQuickPlaySearch.SimplifyFilters
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQQuickPlaySearch::SimplifyFilters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQQuickPlaySearch", "SimplifyFilters");

	Params::SQQuickPlaySearch_SimplifyFilters Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQQuickPlaySearch.SortResults
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   Favorites                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USQQuickPlaySearch::SortResults(const TArray<class FString>& Favorites)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQQuickPlaySearch", "SortResults");

	Params::SQQuickPlaySearch_SortResults Parms{};

	Parms.Favorites = std::move(Favorites);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQQuickPlaySearch.UpdateTags
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     Tags                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQQuickPlaySearch::UpdateTags(const TArray<class FName>& Tags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQQuickPlaySearch", "UpdateTags");

	Params::SQQuickPlaySearch_UpdateTags Parms{};

	Parms.Tags = std::move(Tags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQQuickPlaySearch.IsSearching
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQQuickPlaySearch::IsSearching() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQQuickPlaySearch", "IsSearching");

	Params::SQQuickPlaySearch_IsSearching Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQStagingTimerText.OnFellBelowThreshold
// (Event, Protected, BlueprintEvent)

void USQStagingTimerText::OnFellBelowThreshold()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQStagingTimerText", "OnFellBelowThreshold");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQRadialIconToggleButton.OnToggleChanged
// (Event, Public, BlueprintCallable, BlueprintEvent)

void USQRadialIconToggleButton::OnToggleChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRadialIconToggleButton", "OnToggleChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQRadialIconToggleButton.Toggle
// (Final, Native, Public, BlueprintCallable)

void USQRadialIconToggleButton::Toggle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRadialIconToggleButton", "Toggle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQScoreboardSquad.InitWidget
// (Native, Public, BlueprintCallable)

void USQScoreboardSquad::InitWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQScoreboardSquad", "InitWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQScoreboardSquad.UpdateState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USQScoreboardSquad::UpdateState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQScoreboardSquad", "UpdateState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRandomizer.BPBeginSeededPlay
// (Event, Protected, BlueprintEvent)

void ASQRandomizer::BPBeginSeededPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRandomizer", "BPBeginSeededPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQRandomizer.BPFRandRange
// (Native, Protected, BlueprintCallable)
// Parameters:
// float                                   Min                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Max                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASQRandomizer::BPFRandRange(float Min, float Max)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRandomizer", "BPFRandRange");

	Params::SQRandomizer_BPFRandRange Parms{};

	Parms.Min = Min;
	Parms.Max = Max;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRandomizer.BPRandColor
// (Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor                     BaseColor                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRandomizeRed                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinRed                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxRed                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRandomizeGreen                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinGreen                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxGreen                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRandomizeBlue                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinBlue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxBlue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRandomizeAlpha                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinAlpha                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxAlpha                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor ASQRandomizer::BPRandColor(const struct FLinearColor& BaseColor, bool bRandomizeRed, float MinRed, float MaxRed, bool bRandomizeGreen, float MinGreen, float MaxGreen, bool bRandomizeBlue, float MinBlue, float MaxBlue, bool bRandomizeAlpha, float MinAlpha, float MaxAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRandomizer", "BPRandColor");

	Params::SQRandomizer_BPRandColor Parms{};

	Parms.BaseColor = std::move(BaseColor);
	Parms.bRandomizeRed = bRandomizeRed;
	Parms.MinRed = MinRed;
	Parms.MaxRed = MaxRed;
	Parms.bRandomizeGreen = bRandomizeGreen;
	Parms.MinGreen = MinGreen;
	Parms.MaxGreen = MaxGreen;
	Parms.bRandomizeBlue = bRandomizeBlue;
	Parms.MinBlue = MinBlue;
	Parms.MaxBlue = MaxBlue;
	Parms.bRandomizeAlpha = bRandomizeAlpha;
	Parms.MinAlpha = MinAlpha;
	Parms.MaxAlpha = MaxAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRandomizer.BPRandHSVColor
// (Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor                     BaseColor                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRandomizeHue                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinHue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxHue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRandomizeSaturation                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinSaturation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxSaturation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRandomizeValue                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRandomizeAlpha                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinAlpha                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxAlpha                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor ASQRandomizer::BPRandHSVColor(const struct FLinearColor& BaseColor, bool bRandomizeHue, float MinHue, float MaxHue, bool bRandomizeSaturation, float MinSaturation, float MaxSaturation, bool bRandomizeValue, float MinValue, float MaxValue, bool bRandomizeAlpha, float MinAlpha, float MaxAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRandomizer", "BPRandHSVColor");

	Params::SQRandomizer_BPRandHSVColor Parms{};

	Parms.BaseColor = std::move(BaseColor);
	Parms.bRandomizeHue = bRandomizeHue;
	Parms.MinHue = MinHue;
	Parms.MaxHue = MaxHue;
	Parms.bRandomizeSaturation = bRandomizeSaturation;
	Parms.MinSaturation = MinSaturation;
	Parms.MaxSaturation = MaxSaturation;
	Parms.bRandomizeValue = bRandomizeValue;
	Parms.MinValue = MinValue;
	Parms.MaxValue = MaxValue;
	Parms.bRandomizeAlpha = bRandomizeAlpha;
	Parms.MinAlpha = MinAlpha;
	Parms.MaxAlpha = MaxAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRandomizer.BPRandRange
// (Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   Min                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Max                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQRandomizer::BPRandRange(int32 Min, int32 Max)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRandomizer", "BPRandRange");

	Params::SQRandomizer_BPRandRange Parms{};

	Parms.Min = Min;
	Parms.Max = Max;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRandomizer.OnRep_RandomSeed
// (Native, Protected)

void ASQRandomizer::OnRep_RandomSeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRandomizer", "OnRep_RandomSeed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRandomizer_SceneComponent.DisableAllComponents
// (Native, Public, BlueprintCallable)

void ASQRandomizer_SceneComponent::DisableAllComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRandomizer_SceneComponent", "DisableAllComponents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRandomizer_SceneComponent.ShowRandomComponent
// (Native, Public, BlueprintCallable)

void ASQRandomizer_SceneComponent::ShowRandomComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRandomizer_SceneComponent", "ShowRandomComponent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSteamInventoryUIBlueprintFunctionLibrary.GetSteamInventory
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQSteamInventoryUI*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQSteamInventoryUI* USQSteamInventoryUIBlueprintFunctionLibrary::GetSteamInventory(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSteamInventoryUIBlueprintFunctionLibrary", "GetSteamInventory");

	Params::SQSteamInventoryUIBlueprintFunctionLibrary_GetSteamInventory Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRandomizer_StaticMesh.SetMesh
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQRandomizer_StaticMesh::SetMesh(int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRandomizer_StaticMesh", "SetMesh");

	Params::SQRandomizer_StaticMesh_SetMesh Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRepairTool.ServerStartRepairing
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// class ASQVehicle*                       RepairedVehicle                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQRepairTool::ServerStartRepairing(class ASQVehicle* RepairedVehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRepairTool", "ServerStartRepairing");

	Params::SQRepairTool_ServerStartRepairing Parms{};

	Parms.RepairedVehicle = RepairedVehicle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRepairTool.ServerStopRepairing
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)

void ASQRepairTool::ServerStopRepairing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRepairTool", "ServerStopRepairing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQReplaySubsystem.IsValidReplayPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReplayPath                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQReplaySubsystem::IsValidReplayPath(const class FString& ReplayPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQReplaySubsystem", "IsValidReplayPath");

	Params::SQReplaySubsystem_IsValidReplayPath Parms{};

	Parms.ReplayPath = std::move(ReplayPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQReplaySubsystem.DeleteReplay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReplayPath                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsNamedReplay                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQReplaySubsystem::DeleteReplay(const class FString& ReplayPath, bool bIsNamedReplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQReplaySubsystem", "DeleteReplay");

	Params::SQReplaySubsystem_DeleteReplay Parms{};

	Parms.ReplayPath = std::move(ReplayPath);
	Parms.bIsNamedReplay = bIsNamedReplay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQReplaySubsystem.GetListOfDatedReplays
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   OutReplayPaths                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    bIncludePath                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeExtension                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQReplaySubsystem::GetListOfDatedReplays(TArray<class FString>* OutReplayPaths, bool bIncludePath, bool bIncludeExtension)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQReplaySubsystem", "GetListOfDatedReplays");

	Params::SQReplaySubsystem_GetListOfDatedReplays Parms{};

	Parms.bIncludePath = bIncludePath;
	Parms.bIncludeExtension = bIncludeExtension;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutReplayPaths != nullptr)
		*OutReplayPaths = std::move(Parms.OutReplayPaths);
}


// Function Squad.SQReplaySubsystem.GetListOfNamedReplays
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   OutReplayPaths                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    bIncludePath                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeExtension                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQReplaySubsystem::GetListOfNamedReplays(TArray<class FString>* OutReplayPaths, bool bIncludePath, bool bIncludeExtension)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQReplaySubsystem", "GetListOfNamedReplays");

	Params::SQReplaySubsystem_GetListOfNamedReplays Parms{};

	Parms.bIncludePath = bIncludePath;
	Parms.bIncludeExtension = bIncludeExtension;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutReplayPaths != nullptr)
		*OutReplayPaths = std::move(Parms.OutReplayPaths);
}


// Function Squad.SQReplaySubsystem.NameDatedReplay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReplayName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NewReplayName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQRenameReplayResponse                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESQRenameReplayResponse USQReplaySubsystem::NameDatedReplay(const class FString& ReplayName, const class FString& NewReplayName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQReplaySubsystem", "NameDatedReplay");

	Params::SQReplaySubsystem_NameDatedReplay Parms{};

	Parms.ReplayName = std::move(ReplayName);
	Parms.NewReplayName = std::move(NewReplayName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQReplaySubsystem.PlayExistingReplay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReplayToPlay                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsNamedReplay                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQReplaySubsystem::PlayExistingReplay(const class FString& ReplayToPlay, bool bIsNamedReplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQReplaySubsystem", "PlayExistingReplay");

	Params::SQReplaySubsystem_PlayExistingReplay Parms{};

	Parms.ReplayToPlay = std::move(ReplayToPlay);
	Parms.bIsNamedReplay = bIsNamedReplay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQReplaySubsystem.RenameNamedReplay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReplayName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NewReplayName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQRenameReplayResponse                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESQRenameReplayResponse USQReplaySubsystem::RenameNamedReplay(const class FString& ReplayName, const class FString& NewReplayName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQReplaySubsystem", "RenameNamedReplay");

	Params::SQReplaySubsystem_RenameNamedReplay Parms{};

	Parms.ReplayName = std::move(ReplayName);
	Parms.NewReplayName = std::move(NewReplayName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQReplaySubsystem.StartRecordingDatedReplay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQReplaySubsystem::StartRecordingDatedReplay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQReplaySubsystem", "StartRecordingDatedReplay");

	Params::SQReplaySubsystem_StartRecordingDatedReplay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQReplaySubsystem.StartRecordingNamedReplay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReplayName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQReplaySubsystem::StartRecordingNamedReplay(const class FString& ReplayName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQReplaySubsystem", "StartRecordingNamedReplay");

	Params::SQReplaySubsystem_StartRecordingNamedReplay Parms{};

	Parms.ReplayName = std::move(ReplayName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQReplaySubsystem.StopRecordingReplay
// (Final, Native, Public, BlueprintCallable)

void USQReplaySubsystem::StopRecordingReplay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQReplaySubsystem", "StopRecordingReplay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQReplaySubsystem.UpdateSubsystemSettings
// (Native, Public, BlueprintCallable)

void USQReplaySubsystem::UpdateSubsystemSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQReplaySubsystem", "UpdateSubsystemSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQReplaySubsystem.CanRecordOnServer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQReplaySubsystem::CanRecordOnServer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQReplaySubsystem", "CanRecordOnServer");

	Params::SQReplaySubsystem_CanRecordOnServer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQReplaySubsystem.GetIsRecording
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQReplaySubsystem::GetIsRecording() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQReplaySubsystem", "GetIsRecording");

	Params::SQReplaySubsystem_GetIsRecording Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRestriction_Cost.CanPlayerBuy
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDataTableRowHandle              OutRestrictionReason                                   (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRestriction_Cost::CanPlayerBuy(class ASQPlayerController* InPlayer, struct FDataTableRowHandle* OutRestrictionReason) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_Cost", "CanPlayerBuy");

	Params::SQRestriction_Cost_CanPlayerBuy Parms{};

	Parms.InPlayer = InPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRestrictionReason != nullptr)
		*OutRestrictionReason = std::move(Parms.OutRestrictionReason);

	return Parms.ReturnValue;
}


// Function Squad.SQRestriction_Cost.CanTeamBuy
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQTeam*                          InTeam                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDataTableRowHandle              OutRestrictionReason                                   (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRestriction_Cost::CanTeamBuy(class ASQTeam* InTeam, struct FDataTableRowHandle* OutRestrictionReason) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_Cost", "CanTeamBuy");

	Params::SQRestriction_Cost_CanTeamBuy Parms{};

	Parms.InTeam = InTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRestrictionReason != nullptr)
		*OutRestrictionReason = std::move(Parms.OutRestrictionReason);

	return Parms.ReturnValue;
}


// Function Squad.SQRestriction_Cost.HasPlayerBasedCost
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRestriction_Cost::HasPlayerBasedCost() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_Cost", "HasPlayerBasedCost");

	Params::SQRestriction_Cost_HasPlayerBasedCost Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRestriction_Cost.HasTeamBasedCost
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRestriction_Cost::HasTeamBasedCost() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_Cost", "HasTeamBasedCost");

	Params::SQRestriction_Cost_HasTeamBasedCost Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRestriction_Cost.PayCostForPlayer
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQRestriction_Cost::PayCostForPlayer(class ASQPlayerController* InPlayer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_Cost", "PayCostForPlayer");

	Params::SQRestriction_Cost_PayCostForPlayer Parms{};

	Parms.InPlayer = InPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRestriction_Cost.PayCostForTeam
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class ASQTeam*                          InTeam                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQRestriction_Cost::PayCostForTeam(class ASQTeam* InTeam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_Cost", "PayCostForTeam");

	Params::SQRestriction_Cost_PayCostForTeam Parms{};

	Parms.InTeam = InTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRestriction_Cost.RefundCostForPlayer
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InPercentage                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQRestriction_Cost::RefundCostForPlayer(class ASQPlayerController* InPlayer, int32 InPercentage) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_Cost", "RefundCostForPlayer");

	Params::SQRestriction_Cost_RefundCostForPlayer Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InPercentage = InPercentage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRestriction_Cost.RefundCostForTeam
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class ASQTeam*                          InTeam                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InPercentage                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQRestriction_Cost::RefundCostForTeam(class ASQTeam* InTeam, int32 InPercentage) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_Cost", "RefundCostForTeam");

	Params::SQRestriction_Cost_RefundCostForTeam Parms{};

	Parms.InTeam = InTeam;
	Parms.InPercentage = InPercentage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRestriction_Count.GetAvailabilityForPlayer
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutAvailable                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDataTableRowHandle              OutRestrictionReason                                   (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void USQRestriction_Count::GetAvailabilityForPlayer(class ASQPlayerController* InPlayer, int32* OutAvailable, struct FDataTableRowHandle* OutRestrictionReason) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_Count", "GetAvailabilityForPlayer");

	Params::SQRestriction_Count_GetAvailabilityForPlayer Parms{};

	Parms.InPlayer = InPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAvailable != nullptr)
		*OutAvailable = Parms.OutAvailable;

	if (OutRestrictionReason != nullptr)
		*OutRestrictionReason = std::move(Parms.OutRestrictionReason);
}


// Function Squad.SQRestriction_Count.GetAvailabilityForTeam
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQTeam*                          InTeam                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutAvailable                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDataTableRowHandle              OutRestrictionReason                                   (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void USQRestriction_Count::GetAvailabilityForTeam(class ASQTeam* InTeam, int32* OutAvailable, struct FDataTableRowHandle* OutRestrictionReason) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_Count", "GetAvailabilityForTeam");

	Params::SQRestriction_Count_GetAvailabilityForTeam Parms{};

	Parms.InTeam = InTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAvailable != nullptr)
		*OutAvailable = Parms.OutAvailable;

	if (OutRestrictionReason != nullptr)
		*OutRestrictionReason = std::move(Parms.OutRestrictionReason);
}


// Function Squad.SQRestriction_Count.OnPlayerAddUsage
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutAddedUsage                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQRestriction_Count::OnPlayerAddUsage(class ASQPlayerController* InPlayer, int32* OutAddedUsage) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_Count", "OnPlayerAddUsage");

	Params::SQRestriction_Count_OnPlayerAddUsage Parms{};

	Parms.InPlayer = InPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAddedUsage != nullptr)
		*OutAddedUsage = Parms.OutAddedUsage;
}


// Function Squad.SQRestriction_Count.OnPlayerRemoveUsage
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutRemovedUsage                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQRestriction_Count::OnPlayerRemoveUsage(class ASQPlayerController* InPlayer, int32* OutRemovedUsage) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_Count", "OnPlayerRemoveUsage");

	Params::SQRestriction_Count_OnPlayerRemoveUsage Parms{};

	Parms.InPlayer = InPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRemovedUsage != nullptr)
		*OutRemovedUsage = Parms.OutRemovedUsage;
}


// Function Squad.SQRestriction_Count.OnTeamAddUsage
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQTeam*                          InTeam                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutAddedUsage                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQRestriction_Count::OnTeamAddUsage(class ASQTeam* InTeam, int32* OutAddedUsage) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_Count", "OnTeamAddUsage");

	Params::SQRestriction_Count_OnTeamAddUsage Parms{};

	Parms.InTeam = InTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAddedUsage != nullptr)
		*OutAddedUsage = Parms.OutAddedUsage;
}


// Function Squad.SQRestriction_Count.OnTeamRemoveUsage
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQTeam*                          InTeam                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutRemovedUsage                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQRestriction_Count::OnTeamRemoveUsage(class ASQTeam* InTeam, int32* OutRemovedUsage) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_Count", "OnTeamRemoveUsage");

	Params::SQRestriction_Count_OnTeamRemoveUsage Parms{};

	Parms.InTeam = InTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRemovedUsage != nullptr)
		*OutRemovedUsage = Parms.OutRemovedUsage;
}


// Function Squad.SQRestriction_DeployableInRange.IsAuthorizedWithDeployableInRange
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQDeployable*                    InDeployableInRange                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRestriction_DeployableInRange::IsAuthorizedWithDeployableInRange(class ASQPlayerController* InPlayer, const class ASQDeployable* InDeployableInRange) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_DeployableInRange", "IsAuthorizedWithDeployableInRange");

	Params::SQRestriction_DeployableInRange_IsAuthorizedWithDeployableInRange Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InDeployableInRange = InDeployableInRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRestriction_DeployableInRange.IsRestrictedWithDeployablesInRange
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class ASQDeployable*>            InDeployablesInRange                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRestriction_DeployableInRange::IsRestrictedWithDeployablesInRange(class ASQPlayerController* InPlayer, const TArray<class ASQDeployable*>& InDeployablesInRange) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_DeployableInRange", "IsRestrictedWithDeployablesInRange");

	Params::SQRestriction_DeployableInRange_IsRestrictedWithDeployablesInRange Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InDeployablesInRange = std::move(InDeployablesInRange);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRestriction_PlayerInRange.IsAuthorizedWithPlayerInRange
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQPlayerState*                   InPlayerInRange                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRestriction_PlayerInRange::IsAuthorizedWithPlayerInRange(class ASQPlayerController* InPlayer, const class ASQPlayerState* InPlayerInRange) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_PlayerInRange", "IsAuthorizedWithPlayerInRange");

	Params::SQRestriction_PlayerInRange_IsAuthorizedWithPlayerInRange Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InPlayerInRange = InPlayerInRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRestriction_PlayerInRange.IsRestrictedWithPlayersInRange
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class ASQPlayerState*>           InPlayersInRange                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRestriction_PlayerInRange::IsRestrictedWithPlayersInRange(class ASQPlayerController* InPlayer, const TArray<class ASQPlayerState*>& InPlayersInRange) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_PlayerInRange", "IsRestrictedWithPlayersInRange");

	Params::SQRestriction_PlayerInRange_IsRestrictedWithPlayersInRange Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InPlayersInRange = std::move(InPlayersInRange);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRestriction_VehicleInRange.IsAuthorizedWithVehicleInRange
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQVehicle*                       InVehicleInRange                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRestriction_VehicleInRange::IsAuthorizedWithVehicleInRange(class ASQPlayerController* InPlayer, const class ASQVehicle* InVehicleInRange) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_VehicleInRange", "IsAuthorizedWithVehicleInRange");

	Params::SQRestriction_VehicleInRange_IsAuthorizedWithVehicleInRange Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InVehicleInRange = InVehicleInRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRestriction_VehicleInRange.IsRestrictedWithVehiclesInRange
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class ASQVehicle*>               InVehiclesInRange                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQRestriction_VehicleInRange::IsRestrictedWithVehiclesInRange(class ASQPlayerController* InPlayer, const TArray<class ASQVehicle*>& InVehiclesInRange) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRestriction_VehicleInRange", "IsRestrictedWithVehiclesInRange");

	Params::SQRestriction_VehicleInRange_IsRestrictedWithVehiclesInRange Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InVehiclesInRange = std::move(InVehiclesInRange);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRoleList.DisableAllRoleTicks
// (Final, Native, Public, BlueprintCallable)

void USQRoleList::DisableAllRoleTicks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRoleList", "DisableAllRoleTicks");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRoleList.InitWidget
// (Final, Native, Public, BlueprintCallable)

void USQRoleList::InitWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRoleList", "InitWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRoleListUnit.InitWidget
// (Final, Native, Public, BlueprintCallable)

void USQRoleListUnit::InitWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRoleListUnit", "InitWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRoleListUnit.SelfTick
// (Final, Native, Public, BlueprintCallable)

void USQRoleListUnit::SelfTick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRoleListUnit", "SelfTick");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRotatingMovementComponent.AddRotationInput
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         InRotationInput                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void USQRotatingMovementComponent::AddRotationInput(const struct FRotator& InRotationInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRotatingMovementComponent", "AddRotationInput");

	Params::SQRotatingMovementComponent_AddRotationInput Parms{};

	Parms.InRotationInput = std::move(InRotationInput);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRotatingMovementComponent.OnRep_RotationReplicatedMovement
// (Native, Protected)

void USQRotatingMovementComponent::OnRep_RotationReplicatedMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRotatingMovementComponent", "OnRep_RotationReplicatedMovement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRotatingMovementComponent.GetCurrentRotationVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator USQRotatingMovementComponent::GetCurrentRotationVelocity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRotatingMovementComponent", "GetCurrentRotationVelocity");

	Params::SQRotatingMovementComponent_GetCurrentRotationVelocity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQRotorWashEffectListener.BPEmitterRegistered
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// class USQRotorWashEffectSender*         Emitter                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQRotorWashEffectListener::BPEmitterRegistered(class USQRotorWashEffectSender* Emitter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRotorWashEffectListener", "BPEmitterRegistered");

	Params::SQRotorWashEffectListener_BPEmitterRegistered Parms{};

	Parms.Emitter = Emitter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQRotorWashEffectListener.BPEmitterUnregistered
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// class USQRotorWashEffectSender*         Emitter                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQRotorWashEffectListener::BPEmitterUnregistered(class USQRotorWashEffectSender* Emitter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRotorWashEffectListener", "BPEmitterUnregistered");

	Params::SQRotorWashEffectListener_BPEmitterUnregistered Parms{};

	Parms.Emitter = Emitter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQRotorWashEffectListener.GetEmittersCulled
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class USQRotorWashEffectSender*> OutEmitters                                            (Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USQRotorWashEffectListener::GetEmittersCulled(TArray<class USQRotorWashEffectSender*>& OutEmitters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRotorWashEffectListener", "GetEmittersCulled");

	Params::SQRotorWashEffectListener_GetEmittersCulled Parms{};

	Parms.OutEmitters = std::move(OutEmitters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	OutEmitters = std::move(Parms.OutEmitters);
}


// Function Squad.SQRotorWashEffectListener.RegisterRotorWashEffectEmitter
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// class USQRotorWashEffectSender*         Emitter                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQRotorWashEffectListener::RegisterRotorWashEffectEmitter(class USQRotorWashEffectSender* Emitter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRotorWashEffectListener", "RegisterRotorWashEffectEmitter");

	Params::SQRotorWashEffectListener_RegisterRotorWashEffectEmitter Parms{};

	Parms.Emitter = Emitter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRotorWashEffectListener.SetEmitterCullDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewCullDistance                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQRotorWashEffectListener::SetEmitterCullDistance(float NewCullDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRotorWashEffectListener", "SetEmitterCullDistance");

	Params::SQRotorWashEffectListener_SetEmitterCullDistance Parms{};

	Parms.NewCullDistance = NewCullDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQRotorWashEffectListener.UnregisterRotorWashEffectEmitter
// (Final, BlueprintCosmetic, Native, Public, BlueprintCallable)
// Parameters:
// class USQRotorWashEffectSender*         Emitter                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQRotorWashEffectListener::UnregisterRotorWashEffectEmitter(class USQRotorWashEffectSender* Emitter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQRotorWashEffectListener", "UnregisterRotorWashEffectEmitter");

	Params::SQRotorWashEffectListener_UnregisterRotorWashEffectEmitter Parms{};

	Parms.Emitter = Emitter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSaveGameWrapper.Save
// (Final, Native, Public, BlueprintCallable)

void USQSaveGameWrapper::Save()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSaveGameWrapper", "Save");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSaveGameWrapper.SetSavedGame
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USaveGame*                        NewSaveGame                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQSaveGameWrapper::SetSavedGame(class USaveGame* NewSaveGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSaveGameWrapper", "SetSavedGame");

	Params::SQSaveGameWrapper_SetSavedGame Parms{};

	Parms.NewSaveGame = NewSaveGame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSaveGameWrapper.GetSavedGame
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USaveGame*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USaveGame* USQSaveGameWrapper::GetSavedGame() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSaveGameWrapper", "GetSavedGame");

	Params::SQSaveGameWrapper_GetSavedGame Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQScoreboardPlayer.ChangeVoipColor
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESQVoiceChannel                         Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQScoreboardPlayer::ChangeVoipColor(ESQVoiceChannel Channel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQScoreboardPlayer", "ChangeVoipColor");

	Params::SQScoreboardPlayer_ChangeVoipColor Parms{};

	Parms.Channel = Channel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQScoreboardPlayer.GetRoleIcon
// (Event, Public, BlueprintEvent)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* USQScoreboardPlayer::GetRoleIcon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQScoreboardPlayer", "GetRoleIcon");

	Params::SQScoreboardPlayer_GetRoleIcon Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function Squad.SQScoreboardPlayer.InitWidget
// (Native, Public, BlueprintCallable)

void USQScoreboardPlayer::InitWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQScoreboardPlayer", "InitWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQScoreboardPlayer.OnMutePlayer
// (Final, Native, Protected)
// Parameters:
// int32                                   CurrentState                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQScoreboardPlayer::OnMutePlayer(int32 CurrentState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQScoreboardPlayer", "OnMutePlayer");

	Params::SQScoreboardPlayer_OnMutePlayer Parms{};

	Parms.CurrentState = CurrentState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQScoreboardPlayer.UpdateState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USQScoreboardPlayer::UpdateState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQScoreboardPlayer", "UpdateState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQScoreboardTeam.CleanDataForWidget
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USQScoreboardTeam::CleanDataForWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQScoreboardTeam", "CleanDataForWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQScoreboardTeam.CreateNewPlayer
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASQTeamState*                     Team                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASQPlayerState*                   Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQScoreboardTeam::CreateNewPlayer(class ASQTeamState* Team, class ASQPlayerState* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQScoreboardTeam", "CreateNewPlayer");

	Params::SQScoreboardTeam_CreateNewPlayer Parms{};

	Parms.Team = Team;
	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQScoreboardTeam.CreateNewSquad
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASQSquadState*                    NewSquad                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQScoreboardTeam::CreateNewSquad(class ASQSquadState* NewSquad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQScoreboardTeam", "CreateNewSquad");

	Params::SQScoreboardTeam_CreateNewSquad Parms{};

	Parms.NewSquad = NewSquad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQScoreboardTeam.InitWidget
// (Final, Native, Public, BlueprintCallable)

void USQScoreboardTeam::InitWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQScoreboardTeam", "InitWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQScoreboardTeam.SortSquads
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USQScoreboardTeam::SortSquads()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQScoreboardTeam", "SortSquads");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQScoreboardTeam.ToggleShowAllStats
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USQScoreboardTeam::ToggleShowAllStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQScoreboardTeam", "ToggleShowAllStats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQScoreboardTeam.UpdateAllSpeakers
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FSQRemoteTalkerDisplayInfo>CurrentTalkers                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USQScoreboardTeam::UpdateAllSpeakers(const TArray<struct FSQRemoteTalkerDisplayInfo>& CurrentTalkers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQScoreboardTeam", "UpdateAllSpeakers");

	Params::SQScoreboardTeam_UpdateAllSpeakers Parms{};

	Parms.CurrentTalkers = std::move(CurrentTalkers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQScoreboardTeam.UpdatePlayerJoinedSquad
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASQPlayerState*                   Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQScoreboardTeam::UpdatePlayerJoinedSquad(class ASQPlayerState* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQScoreboardTeam", "UpdatePlayerJoinedSquad");

	Params::SQScoreboardTeam_UpdatePlayerJoinedSquad Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQScoreboardTeam.UpdatePlayers
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USQScoreboardTeam::UpdatePlayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQScoreboardTeam", "UpdatePlayers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQScoreboardTeam.UpdateSquads
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USQScoreboardTeam::UpdateSquads()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQScoreboardTeam", "UpdateSquads");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQScoreboardTeam.UpdateState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void USQScoreboardTeam::UpdateState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQScoreboardTeam", "UpdateState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQScriptAction.BPExecute
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           ContextObject                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQScriptAction::BPExecute(class AActor* ContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQScriptAction", "BPExecute");

	Params::SQScriptAction_BPExecute Parms{};

	Parms.ContextObject = ContextObject;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQScriptAction.Cancel
// (Event, Public, BlueprintEvent)

void USQScriptAction::Cancel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQScriptAction", "Cancel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQScriptAction.Execute
// (Final, Native, Public)
// Parameters:
// class AActor*                           Context                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQScriptAction::Execute(class AActor* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQScriptAction", "Execute");

	Params::SQScriptAction_Execute Parms{};

	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQServerBrowserWidget.GetCurrentSearchString
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQServerBrowserWidget::GetCurrentSearchString()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQServerBrowserWidget", "GetCurrentSearchString");

	Params::SQServerBrowserWidget_GetCurrentSearchString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQServerBrowserWidget.OnFailure
// (Event, Public, BlueprintEvent)

void USQServerBrowserWidget::OnFailure()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQServerBrowserWidget", "OnFailure");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQServerBrowserWidget.OnFindSessionsCancelled
// (Final, Native, Private)

void USQServerBrowserWidget::OnFindSessionsCancelled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQServerBrowserWidget", "OnFindSessionsCancelled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQServerBrowserWidget.OnFindSessionsCompleted
// (Final, Native, Private, HasOutParams)
// Parameters:
// TArray<struct FBlueprintSessionResult>  Results                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bSuccess                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQServerBrowserWidget::OnFindSessionsCompleted(const TArray<struct FBlueprintSessionResult>& Results, bool bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQServerBrowserWidget", "OnFindSessionsCompleted");

	Params::SQServerBrowserWidget_OnFindSessionsCompleted Parms{};

	Parms.Results = std::move(Results);
	Parms.bSuccess = bSuccess;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQServerBrowserWidget.OnFindSessionsNewSessionUpdate
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FBlueprintSessionResult          SessionResult                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USQServerBrowserWidget::OnFindSessionsNewSessionUpdate(const struct FBlueprintSessionResult& SessionResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQServerBrowserWidget", "OnFindSessionsNewSessionUpdate");

	Params::SQServerBrowserWidget_OnFindSessionsNewSessionUpdate Parms{};

	Parms.SessionResult = std::move(SessionResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQServerBrowserWidget.OnSuccess
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintSessionResult>  Results                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USQServerBrowserWidget::OnSuccess(const TArray<struct FBlueprintSessionResult>& Results)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQServerBrowserWidget", "OnSuccess");

	Params::SQServerBrowserWidget_OnSuccess Parms{};

	Parms.Results = std::move(Results);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQServerBrowserWidget.OnUpdateSession
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// TArray<struct FBlueprintSessionResult>  Results                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USQServerBrowserWidget::OnUpdateSession(const TArray<struct FBlueprintSessionResult>& Results)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQServerBrowserWidget", "OnUpdateSession");

	Params::SQServerBrowserWidget_OnUpdateSession Parms{};

	Parms.Results = std::move(Results);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQServerBrowserWidget.ResetSortedState
// (Native, Public, BlueprintCallable)

void USQServerBrowserWidget::ResetSortedState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQServerBrowserWidget", "ResetSortedState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQServerBrowserWidget.SortByName
// (Native, Public, BlueprintCallable)
// Parameters:
// ESQSortLevels                           SortByColumn                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsAscending                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQServerBrowserWidget::SortByName(ESQSortLevels SortByColumn, bool bIsAscending)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQServerBrowserWidget", "SortByName");

	Params::SQServerBrowserWidget_SortByName Parms{};

	Parms.SortByColumn = SortByColumn;
	Parms.bIsAscending = bIsAscending;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQServerBrowserWidget.SortGameMode
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsAscending                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQServerBrowserWidget::SortGameMode(bool bIsAscending)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQServerBrowserWidget", "SortGameMode");

	Params::SQServerBrowserWidget_SortGameMode Parms{};

	Parms.bIsAscending = bIsAscending;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQServerBrowserWidget.SortMapName
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsAscending                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQServerBrowserWidget::SortMapName(bool bIsAscending)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQServerBrowserWidget", "SortMapName");

	Params::SQServerBrowserWidget_SortMapName Parms{};

	Parms.bIsAscending = bIsAscending;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQServerBrowserWidget.SortNumPlayers
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsAscending                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQServerBrowserWidget::SortNumPlayers(bool bIsAscending)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQServerBrowserWidget", "SortNumPlayers");

	Params::SQServerBrowserWidget_SortNumPlayers Parms{};

	Parms.bIsAscending = bIsAscending;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQServerBrowserWidget.SortPing
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsAscending                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQServerBrowserWidget::SortPing(bool bIsAscending)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQServerBrowserWidget", "SortPing");

	Params::SQServerBrowserWidget_SortPing Parms{};

	Parms.bIsAscending = bIsAscending;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQServerBrowserWidget.SortServerName
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsAscending                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQServerBrowserWidget::SortServerName(bool bIsAscending)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQServerBrowserWidget", "SortServerName");

	Params::SQServerBrowserWidget_SortServerName Parms{};

	Parms.bIsAscending = bIsAscending;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQServerBrowserWidget.StartFindSessions
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// bool                                    bWithFilters                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsLicensedServerSearch                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsFavoriteServerSearch                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsRecentServerSearch                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQServerBrowserWidget::StartFindSessions(bool bWithFilters, bool bIsLicensedServerSearch, bool bIsFavoriteServerSearch, bool bIsRecentServerSearch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQServerBrowserWidget", "StartFindSessions");

	Params::SQServerBrowserWidget_StartFindSessions Parms{};

	Parms.bWithFilters = bWithFilters;
	Parms.bIsLicensedServerSearch = bIsLicensedServerSearch;
	Parms.bIsFavoriteServerSearch = bIsFavoriteServerSearch;
	Parms.bIsRecentServerSearch = bIsRecentServerSearch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQServerBrowserWidget.UpdateIndexes
// (Native, Public, BlueprintCallable)

void USQServerBrowserWidget::UpdateIndexes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQServerBrowserWidget", "UpdateIndexes");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQServerBrowserWidget.UpdateSortedState
// (Native, Public, BlueprintCallable)
// Parameters:
// ESQSortLevels                           SortLevel                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQServerBrowserWidget::UpdateSortedState(ESQSortLevels SortLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQServerBrowserWidget", "UpdateSortedState");

	Params::SQServerBrowserWidget_UpdateSortedState Parms{};

	Parms.SortLevel = SortLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSessionInfo.CheckMissingMods
// (Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FSQModLoadProgress>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FSQModLoadProgress> USQSessionInfo::CheckMissingMods()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSessionInfo", "CheckMissingMods");

	Params::SQSessionInfo_CheckMissingMods Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSessionInfo.SetSession
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSessionInfo::SetSession(const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSessionInfo", "SetSession");

	Params::SQSessionInfo_SetSession Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSettingsService.TryGetAvailableFactions
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USQFaction>           FactionClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USQFaction*>               OutAvailableFactions                                   (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSettingsService::TryGetAvailableFactions(const class UObject* WorldContextObject, TSubclassOf<class USQFaction> FactionClass, TArray<class USQFaction*>* OutAvailableFactions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSettingsService", "TryGetAvailableFactions");

	Params::SQSettingsService_TryGetAvailableFactions Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.FactionClass = FactionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAvailableFactions != nullptr)
		*OutAvailableFactions = std::move(Parms.OutAvailableFactions);

	return Parms.ReturnValue;
}


// Function Squad.SQSettingsService.TryGetAvailableFactionSetups
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USQFactionSetup>      FactionSetupClass                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USQFactionSetup*>          OutAvailableFactionSetups                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSettingsService::TryGetAvailableFactionSetups(const class UObject* WorldContextObject, TSubclassOf<class USQFactionSetup> FactionSetupClass, TArray<class USQFactionSetup*>* OutAvailableFactionSetups)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSettingsService", "TryGetAvailableFactionSetups");

	Params::SQSettingsService_TryGetAvailableFactionSetups Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.FactionSetupClass = FactionSetupClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAvailableFactionSetups != nullptr)
		*OutAvailableFactionSetups = std::move(Parms.OutAvailableFactionSetups);

	return Parms.ReturnValue;
}


// Function Squad.SQSettingsService.TryGetAvailableLayers
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USQLayer>             LayerClass                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USQLayer*>                 OutAvailableLayers                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSettingsService::TryGetAvailableLayers(const class UObject* WorldContextObject, TSubclassOf<class USQLayer> LayerClass, TArray<class USQLayer*>* OutAvailableLayers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSettingsService", "TryGetAvailableLayers");

	Params::SQSettingsService_TryGetAvailableLayers Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LayerClass = LayerClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAvailableLayers != nullptr)
		*OutAvailableLayers = std::move(Parms.OutAvailableLayers);

	return Parms.ReturnValue;
}


// Function Squad.SQSettingsService.TryGetAvailableLevels
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USQLevel>             LevelClass                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USQLevel*>                 OutAvailableLevels                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSettingsService::TryGetAvailableLevels(const class UObject* WorldContextObject, TSubclassOf<class USQLevel> LevelClass, TArray<class USQLevel*>* OutAvailableLevels)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSettingsService", "TryGetAvailableLevels");

	Params::SQSettingsService_TryGetAvailableLevels Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LevelClass = LevelClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAvailableLevels != nullptr)
		*OutAvailableLevels = std::move(Parms.OutAvailableLevels);

	return Parms.ReturnValue;
}


// Function Squad.SQSettingsService.TryGetCurrentFaction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USQFaction>           FactionClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQFaction*                       OutFaction                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSettingsService::TryGetCurrentFaction(const class UObject* WorldContextObject, int32 TeamId, TSubclassOf<class USQFaction> FactionClass, class USQFaction** OutFaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSettingsService", "TryGetCurrentFaction");

	Params::SQSettingsService_TryGetCurrentFaction Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.TeamId = TeamId;
	Parms.FactionClass = FactionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFaction != nullptr)
		*OutFaction = Parms.OutFaction;

	return Parms.ReturnValue;
}


// Function Squad.SQSettingsService.TryGetCurrentFactionSetup
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USQFactionSetup>      FactionSetupClass                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQFactionSetup*                  OutFactionSetup                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSettingsService::TryGetCurrentFactionSetup(const class UObject* WorldContextObject, int32 TeamId, TSubclassOf<class USQFactionSetup> FactionSetupClass, class USQFactionSetup** OutFactionSetup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSettingsService", "TryGetCurrentFactionSetup");

	Params::SQSettingsService_TryGetCurrentFactionSetup Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.TeamId = TeamId;
	Parms.FactionSetupClass = FactionSetupClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFactionSetup != nullptr)
		*OutFactionSetup = Parms.OutFactionSetup;

	return Parms.ReturnValue;
}


// Function Squad.SQSettingsService.TryGetCurrentLayer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USQLayer>             LayerClass                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQLayer*                         OutLayer                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSettingsService::TryGetCurrentLayer(const class UObject* WorldContextObject, TSubclassOf<class USQLayer> LayerClass, class USQLayer** OutLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSettingsService", "TryGetCurrentLayer");

	Params::SQSettingsService_TryGetCurrentLayer Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LayerClass = LayerClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLayer != nullptr)
		*OutLayer = Parms.OutLayer;

	return Parms.ReturnValue;
}


// Function Squad.SQSettingsService.TryGetCurrentLevel
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USQLevel>             LevelClass                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQLevel*                         OutLevel                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSettingsService::TryGetCurrentLevel(const class UObject* WorldContextObject, TSubclassOf<class USQLevel> LevelClass, class USQLevel** OutLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSettingsService", "TryGetCurrentLevel");

	Params::SQSettingsService_TryGetCurrentLevel Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LevelClass = LevelClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLevel != nullptr)
		*OutLevel = Parms.OutLevel;

	return Parms.ReturnValue;
}


// Function Squad.SQSettingsService.TryGetFaction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             FactionID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USQFaction>           FactionClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQFaction*                       OutFaction                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSettingsService::TryGetFaction(const class UObject* WorldContextObject, class FName FactionID, TSubclassOf<class USQFaction> FactionClass, class USQFaction** OutFaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSettingsService", "TryGetFaction");

	Params::SQSettingsService_TryGetFaction Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.FactionID = FactionID;
	Parms.FactionClass = FactionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFaction != nullptr)
		*OutFaction = Parms.OutFaction;

	return Parms.ReturnValue;
}


// Function Squad.SQSettingsService.TryGetFactionSetup
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             FactionSetupId                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USQFactionSetup>      FactionSetupClass                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQFactionSetup*                  OutFactionSetup                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSettingsService::TryGetFactionSetup(const class UObject* WorldContextObject, class FName FactionSetupId, TSubclassOf<class USQFactionSetup> FactionSetupClass, class USQFactionSetup** OutFactionSetup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSettingsService", "TryGetFactionSetup");

	Params::SQSettingsService_TryGetFactionSetup Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.FactionSetupId = FactionSetupId;
	Parms.FactionSetupClass = FactionSetupClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFactionSetup != nullptr)
		*OutFactionSetup = Parms.OutFactionSetup;

	return Parms.ReturnValue;
}


// Function Squad.SQSettingsService.TryGetLocalPlayerFaction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USQFaction>           FactionClass                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQFaction*                       OutFaction                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSettingsService::TryGetLocalPlayerFaction(const class UObject* WorldContextObject, TSubclassOf<class USQFaction> FactionClass, class USQFaction** OutFaction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSettingsService", "TryGetLocalPlayerFaction");

	Params::SQSettingsService_TryGetLocalPlayerFaction Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.FactionClass = FactionClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFaction != nullptr)
		*OutFaction = Parms.OutFaction;

	return Parms.ReturnValue;
}


// Function Squad.SQSettingsService.TryGetLocalPlayerFactionSetup
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USQFactionSetup>      FactionSetupClass                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQFactionSetup*                  OutFactionSetup                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSettingsService::TryGetLocalPlayerFactionSetup(const class UObject* WorldContextObject, TSubclassOf<class USQFactionSetup> FactionSetupClass, class USQFactionSetup** OutFactionSetup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSettingsService", "TryGetLocalPlayerFactionSetup");

	Params::SQSettingsService_TryGetLocalPlayerFactionSetup Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.FactionSetupClass = FactionSetupClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFactionSetup != nullptr)
		*OutFactionSetup = Parms.OutFactionSetup;

	return Parms.ReturnValue;
}


// Function Squad.SQSettingsService.TryGetLocalPlayerTeamLayerConfig
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USQLayerTeamConfig>   LayerTeamConfigClass                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQLayerTeamConfig*               OutTeamConfig                                          (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSettingsService::TryGetLocalPlayerTeamLayerConfig(const class UObject* WorldContextObject, TSubclassOf<class USQLayerTeamConfig> LayerTeamConfigClass, class USQLayerTeamConfig** OutTeamConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSettingsService", "TryGetLocalPlayerTeamLayerConfig");

	Params::SQSettingsService_TryGetLocalPlayerTeamLayerConfig Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LayerTeamConfigClass = LayerTeamConfigClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTeamConfig != nullptr)
		*OutTeamConfig = Parms.OutTeamConfig;

	return Parms.ReturnValue;
}


// Function Squad.SQSettingsService.TryGetTeamLayerConfig
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USQLayerTeamConfig>   LayerTeamConfigClass                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQLayerTeamConfig*               OutTeamConfig                                          (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSettingsService::TryGetTeamLayerConfig(const class UObject* WorldContextObject, int32 TeamId, TSubclassOf<class USQLayerTeamConfig> LayerTeamConfigClass, class USQLayerTeamConfig** OutTeamConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSettingsService", "TryGetTeamLayerConfig");

	Params::SQSettingsService_TryGetTeamLayerConfig Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.TeamId = TeamId;
	Parms.LayerTeamConfigClass = LayerTeamConfigClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTeamConfig != nullptr)
		*OutTeamConfig = Parms.OutTeamConfig;

	return Parms.ReturnValue;
}


// Function Squad.SQSimpleMovementComponent.AddMoveInput
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InMoveInput                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQSimpleMovementComponent::AddMoveInput(const struct FVector& InMoveInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSimpleMovementComponent", "AddMoveInput");

	Params::SQSimpleMovementComponent_AddMoveInput Parms{};

	Parms.InMoveInput = std::move(InMoveInput);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSimpleMovementComponent.AddRotationInput
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         InRotationInput                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void USQSimpleMovementComponent::AddRotationInput(const struct FRotator& InRotationInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSimpleMovementComponent", "AddRotationInput");

	Params::SQSimpleMovementComponent_AddRotationInput Parms{};

	Parms.InRotationInput = std::move(InRotationInput);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSmokeGrenadeProjectile.ResetTimeDilation
// (Final, Native, Public)

void ASQSmokeGrenadeProjectile::ResetTimeDilation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSmokeGrenadeProjectile", "ResetTimeDilation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSpawnableGhost.ConfirmPlacement
// (Native, Event, Public, BlueprintEvent)

void ASQSpawnableGhost::ConfirmPlacement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSpawnableGhost", "ConfirmPlacement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSpawnableGhost.ConfirmRequirements
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSpawnableGhost::ConfirmRequirements()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSpawnableGhost", "ConfirmRequirements");

	Params::SQSpawnableGhost_ConfirmRequirements Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSpawnableGhost.IsFullyLoaded
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSpawnableGhost::IsFullyLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSpawnableGhost", "IsFullyLoaded");

	Params::SQSpawnableGhost_IsFullyLoaded Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSpawnableGhost.Spawn
// (Native, Event, Public, BlueprintEvent)

void ASQSpawnableGhost::Spawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSpawnableGhost", "Spawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSpawnableGhost.SpawnIfReady
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQSpawnableGhost::SpawnIfReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSpawnableGhost", "SpawnIfReady");

	Params::SQSpawnableGhost_SpawnIfReady Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSpectatorMan.DrawHUD
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASQHUD*                           SquadHUD                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCanvas*                          Canvas                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSpectatorMan::DrawHUD(class ASQHUD* SquadHUD, class UCanvas* Canvas)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSpectatorMan", "DrawHUD");

	Params::SQSpectatorMan_DrawHUD Parms{};

	Parms.SquadHUD = SquadHUD;
	Parms.Canvas = Canvas;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSpectatorMan.ServerSetDecelerationTarget
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// float                                   InDecelerationTarget                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSpectatorMan::ServerSetDecelerationTarget(float InDecelerationTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSpectatorMan", "ServerSetDecelerationTarget");

	Params::SQSpectatorMan_ServerSetDecelerationTarget Parms{};

	Parms.InDecelerationTarget = InDecelerationTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSpectatorMan.ServerSetFlySpeedTarget
// (Net, NetReliable, Native, Event, Public, NetServer, NetValidate)
// Parameters:
// float                                   InFlySpeedTarget                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSpectatorMan::ServerSetFlySpeedTarget(float InFlySpeedTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSpectatorMan", "ServerSetFlySpeedTarget");

	Params::SQSpectatorMan_ServerSetFlySpeedTarget Parms{};

	Parms.InFlySpeedTarget = InFlySpeedTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquadList.InitWidget
// (Final, Native, Public, BlueprintCallable)

void USQSquadList::InitWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadList", "InitWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquadMemberListItem.BPInitWidgetRefs
// (Event, Public, BlueprintEvent)

void USQSquadMemberListItem::BPInitWidgetRefs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadMemberListItem", "BPInitWidgetRefs");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQSquadMemberListItem.InitEventHandlers
// (Final, Native, Protected, BlueprintCallable)

void USQSquadMemberListItem::InitEventHandlers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadMemberListItem", "InitEventHandlers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquadMemberListItem.OnActionButton
// (Final, Native, Protected)

void USQSquadMemberListItem::OnActionButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadMemberListItem", "OnActionButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquadMemberListItem.OnKick
// (Final, Native, Protected)

void USQSquadMemberListItem::OnKick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadMemberListItem", "OnKick");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquadMemberListItem.OnPromoteToSL
// (Final, Native, Protected)

void USQSquadMemberListItem::OnPromoteToSL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadMemberListItem", "OnPromoteToSL");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquadMemberListItem.OnSLInvite
// (Final, Native, Protected)

void USQSquadMemberListItem::OnSLInvite()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadMemberListItem", "OnSLInvite");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquadMemberListItem.ShowActionMenu
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MenuIdx                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQSquadMemberListItem::ShowActionMenu(int32 MenuIdx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadMemberListItem", "ShowActionMenu");

	Params::SQSquadMemberListItem_ShowActionMenu Parms{};

	Parms.MenuIdx = MenuIdx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquadState.AddPlayerState
// (Native, Public)
// Parameters:
// class ASQPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSquadState::AddPlayerState(class ASQPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadState", "AddPlayerState");

	Params::SQSquadState_AddPlayerState Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquadState.BroadcastLeaderChangeEvent
// (Net, NetReliable, Native, Event, NetMulticast, Public, NetValidate)
// Parameters:
// class ASQPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSquadState::BroadcastLeaderChangeEvent(class ASQPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadState", "BroadcastLeaderChangeEvent");

	Params::SQSquadState_BroadcastLeaderChangeEvent Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquadState.BroadcastPlayerJoinEvent
// (Net, NetReliable, Native, Event, NetMulticast, Public, NetValidate)
// Parameters:
// class ASQPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSquadState::BroadcastPlayerJoinEvent(class ASQPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadState", "BroadcastPlayerJoinEvent");

	Params::SQSquadState_BroadcastPlayerJoinEvent Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquadState.BroadcastPlayerLeaveEvent
// (Net, NetReliable, Native, Event, NetMulticast, Public, NetValidate)
// Parameters:
// class ASQPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSquadState::BroadcastPlayerLeaveEvent(class ASQPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadState", "BroadcastPlayerLeaveEvent");

	Params::SQSquadState_BroadcastPlayerLeaveEvent Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquadState.OnRep_Id
// (Final, Native, Public)

void ASQSquadState::OnRep_Id()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadState", "OnRep_Id");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquadState.OnRep_IsLocked
// (Final, Native, Public)

void ASQSquadState::OnRep_IsLocked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadState", "OnRep_IsLocked");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquadState.OnRep_LeaderState
// (Final, Native, Public)
// Parameters:
// class ASQPlayerState*                   LastLeaderState                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSquadState::OnRep_LeaderState(class ASQPlayerState* LastLeaderState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadState", "OnRep_LeaderState");

	Params::SQSquadState_OnRep_LeaderState Parms{};

	Parms.LastLeaderState = LastLeaderState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquadState.OnRep_Name
// (Final, Native, Public)

void ASQSquadState::OnRep_Name()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadState", "OnRep_Name");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquadState.OnRep_PlayerStates
// (Final, Native, Public)

void ASQSquadState::OnRep_PlayerStates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadState", "OnRep_PlayerStates");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquadState.OnRep_TeamId
// (Final, Native, Public)

void ASQSquadState::OnRep_TeamId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadState", "OnRep_TeamId");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquadState.RemovePlayerState
// (Native, Public)
// Parameters:
// class ASQPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSquadState::RemovePlayerState(class ASQPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadState", "RemovePlayerState");

	Params::SQSquadState_RemovePlayerState Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquadState.ScorePoints
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Points                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Reason                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ScoreGroup                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSquadState::ScorePoints(int32 Points, const class FString& Reason, const class FName& ScoreGroup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadState", "ScorePoints");

	Params::SQSquadState_ScorePoints Parms{};

	Parms.Points = Points;
	Parms.Reason = std::move(Reason);
	Parms.ScoreGroup = ScoreGroup;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquadState.ScorePointsDelayed
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Points                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Reason                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ScoreGroup                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQSquadState::ScorePointsDelayed(int32 Points, const class FString& Reason, const class FName& ScoreGroup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadState", "ScorePointsDelayed");

	Params::SQSquadState_ScorePointsDelayed Parms{};

	Parms.Points = Points;
	Parms.Reason = std::move(Reason);
	Parms.ScoreGroup = ScoreGroup;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSquadState.GetPlayerCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQSquadState::GetPlayerCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadState", "GetPlayerCount");

	Params::SQSquadState_GetPlayerCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSquadStateDataHABInterface.GetGameSpawn
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASQGameSpawn*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQGameSpawn* ISQSquadStateDataHABInterface::GetGameSpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadStateDataHABInterface", "GetGameSpawn");

	Params::SQSquadStateDataHABInterface_GetGameSpawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSquadStateDataPlayerState.GetPlayerName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQSquadStateDataPlayerState::GetPlayerName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSquadStateDataPlayerState", "GetPlayerName");

	Params::SQSquadStateDataPlayerState_GetPlayerName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQStatefulButton.ChangeImage
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ImageIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQStatefulButton::ChangeImage(int32 ImageIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQStatefulButton", "ChangeImage");

	Params::SQStatefulButton_ChangeImage Parms{};

	Parms.ImageIndex = ImageIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQStatefulButton.GetCurrentState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQStatefulButton::GetCurrentState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQStatefulButton", "GetCurrentState");

	Params::SQStatefulButton_GetCurrentState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQStatefulButton.OnPressed
// (Event, Protected, BlueprintEvent)

void USQStatefulButton::OnPressed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQStatefulButton", "OnPressed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQSteamInventoryUI.CacheSteamItems
// (Final, Native, Public, BlueprintCallable)

void USQSteamInventoryUI::CacheSteamItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSteamInventoryUI", "CacheSteamItems");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSteamInventoryUI.GetFirstIncompatibleItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USQSteamItem*                     ItemToCheckFor                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnabledOnly                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQSteamItem*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQSteamItem* USQSteamInventoryUI::GetFirstIncompatibleItem(const class USQSteamItem* ItemToCheckFor, bool bEnabledOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSteamInventoryUI", "GetFirstIncompatibleItem");

	Params::SQSteamInventoryUI_GetFirstIncompatibleItem Parms{};

	Parms.ItemToCheckFor = ItemToCheckFor;
	Parms.bEnabledOnly = bEnabledOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSteamInventoryUI.GetIncompatibleItems
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USQSteamItem*                     ItemToCheckFor                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnabledOnly                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USQSteamItem*>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class USQSteamItem*> USQSteamInventoryUI::GetIncompatibleItems(const class USQSteamItem* ItemToCheckFor, bool bEnabledOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSteamInventoryUI", "GetIncompatibleItems");

	Params::SQSteamInventoryUI_GetIncompatibleItems Parms{};

	Parms.ItemToCheckFor = ItemToCheckFor;
	Parms.bEnabledOnly = bEnabledOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSteamInventoryUI.GetItemsOfClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class USQSteamItem>         ItemClass                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USQSteamItem*>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class USQSteamItem*> USQSteamInventoryUI::GetItemsOfClass(const TSubclassOf<class USQSteamItem> ItemClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSteamInventoryUI", "GetItemsOfClass");

	Params::SQSteamInventoryUI_GetItemsOfClass Parms{};

	Parms.ItemClass = ItemClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSteamInventoryUI.OnGetCacheSuccess
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FODKBazaarCacheCompletedData     Results                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USQSteamInventoryUI::OnGetCacheSuccess(const struct FODKBazaarCacheCompletedData& Results)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSteamInventoryUI", "OnGetCacheSuccess");

	Params::SQSteamInventoryUI_OnGetCacheSuccess Parms{};

	Parms.Results = std::move(Results);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQSteamItem.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewEnable                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOverrideIncompatibles                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSteamItem::SetEnabled(bool bNewEnable, bool bOverrideIncompatibles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSteamItem", "SetEnabled");

	Params::SQSteamItem_SetEnabled Parms{};

	Parms.bNewEnable = bNewEnable;
	Parms.bOverrideIncompatibles = bOverrideIncompatibles;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSteamItem.IsCompatibleWith
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQSteamItem*                     OtherItem                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSteamItem::IsCompatibleWith(const class USQSteamItem* OtherItem) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQSteamItem", "IsCompatibleWith");

	Params::SQSteamItem_IsCompatibleWith Parms{};

	Parms.OtherItem = OtherItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQTeamInterface.OnTeamChange
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PreviousTeam                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISQTeamInterface::OnTeamChange(int32 PreviousTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamInterface", "OnTeamChange");

	Params::SQTeamInterface_OnTeamChange Parms{};

	Parms.PreviousTeam = PreviousTeam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTeamInterface.GetTeamId
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ISQTeamInterface::GetTeamId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamInterface", "GetTeamId");

	Params::SQTeamInterface_GetTeamId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQTeamState.AddPlayerState
// (Native, Public)
// Parameters:
// class ASQPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQTeamState::AddPlayerState(class ASQPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "AddPlayerState");

	Params::SQTeamState_AddPlayerState Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTeamState.AdjustTickets
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InDelta                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQTeamState::AdjustTickets(int32 InDelta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "AdjustTickets");

	Params::SQTeamState_AdjustTickets Parms{};

	Parms.InDelta = InDelta;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTeamState.GetFirstAvailableSquadId
// (Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQTeamState::GetFirstAvailableSquadId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "GetFirstAvailableSquadId");

	Params::SQTeamState_GetFirstAvailableSquadId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQTeamState.OnRep_ActionsAvailabilities
// (Final, Native, Private)

void ASQTeamState::OnRep_ActionsAvailabilities()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "OnRep_ActionsAvailabilities");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTeamState.OnRep_DeployableAvailabilities
// (Final, Native, Private)

void ASQTeamState::OnRep_DeployableAvailabilities()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "OnRep_DeployableAvailabilities");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTeamState.OnRep_FactionSetup
// (Final, Native, Private)

void ASQTeamState::OnRep_FactionSetup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "OnRep_FactionSetup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTeamState.OnRep_IndexedSquadStates
// (Native, Public)

void ASQTeamState::OnRep_IndexedSquadStates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "OnRep_IndexedSquadStates");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTeamState.OnRep_RoleAvailabilities
// (Final, Native, Private)

void ASQTeamState::OnRep_RoleAvailabilities()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "OnRep_RoleAvailabilities");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTeamState.OnRep_VehicleAvailabilities
// (Final, Native, Private)

void ASQTeamState::OnRep_VehicleAvailabilities()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "OnRep_VehicleAvailabilities");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTeamState.RefreshSquadStates
// (Native, Public)

void ASQTeamState::RefreshSquadStates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "RefreshSquadStates");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTeamState.RemovePlayerState
// (Native, Public)
// Parameters:
// class ASQPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQTeamState::RemovePlayerState(class ASQPlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "RemovePlayerState");

	Params::SQTeamState_RemovePlayerState Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTeamState.ScorePoints
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Points                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Reason                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ScoreGroup                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQTeamState::ScorePoints(int32 Points, const class FString& Reason, const class FName& ScoreGroup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "ScorePoints");

	Params::SQTeamState_ScorePoints Parms{};

	Parms.Points = Points;
	Parms.Reason = std::move(Reason);
	Parms.ScoreGroup = ScoreGroup;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTeamState.ScorePointsDelayed
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Points                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Reason                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ScoreGroup                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQTeamState::ScorePointsDelayed(int32 Points, const class FString& Reason, const class FName& ScoreGroup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "ScorePointsDelayed");

	Params::SQTeamState_ScorePointsDelayed Parms{};

	Parms.Points = Points;
	Parms.Reason = std::move(Reason);
	Parms.ScoreGroup = ScoreGroup;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTeamState.SetTickets
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InTickets                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQTeamState::SetTickets(int32 InTickets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "SetTickets");

	Params::SQTeamState_SetTickets Parms{};

	Parms.InTickets = InTickets;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTeamState.GetActions
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSQAvailabilityState_Action>OutActions                                             (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASQTeamState::GetActions(class ASQPlayerController* InPlayer, TArray<struct FSQAvailabilityState_Action>* OutActions) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "GetActions");

	Params::SQTeamState_GetActions Parms{};

	Parms.InPlayer = InPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutActions != nullptr)
		*OutActions = std::move(Parms.OutActions);
}


// Function Squad.SQTeamState.GetDefaultRole
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQRoleSettings*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQRoleSettings* ASQTeamState::GetDefaultRole() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "GetDefaultRole");

	Params::SQTeamState_GetDefaultRole Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQTeamState.GetDefaultSquadLeaderRole
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQRoleSettings*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQRoleSettings* ASQTeamState::GetDefaultSquadLeaderRole() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "GetDefaultSquadLeaderRole");

	Params::SQTeamState_GetDefaultSquadLeaderRole Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQTeamState.GetDeployables
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSQAvailabilityState_Deployable>OutDeployables                                         (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASQTeamState::GetDeployables(class ASQPlayerController* InPlayer, TArray<struct FSQAvailabilityState_Deployable>* OutDeployables) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "GetDeployables");

	Params::SQTeamState_GetDeployables Parms{};

	Parms.InPlayer = InPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDeployables != nullptr)
		*OutDeployables = std::move(Parms.OutDeployables);
}


// Function Squad.SQTeamState.GetDeployablesForTeam
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FSQAvailabilityState_Deployable>OutDeployables                                         (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASQTeamState::GetDeployablesForTeam(TArray<struct FSQAvailabilityState_Deployable>* OutDeployables) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "GetDeployablesForTeam");

	Params::SQTeamState_GetDeployablesForTeam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDeployables != nullptr)
		*OutDeployables = std::move(Parms.OutDeployables);
}


// Function Squad.SQTeamState.GetFaction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQFaction*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQFaction* ASQTeamState::GetFaction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "GetFaction");

	Params::SQTeamState_GetFaction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQTeamState.GetFactionDisplayName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ASQTeamState::GetFactionDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "GetFactionDisplayName");

	Params::SQTeamState_GetFactionDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQTeamState.GetFactionId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName ASQTeamState::GetFactionId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "GetFactionId");

	Params::SQTeamState_GetFactionId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQTeamState.GetFactionSetupDisplayName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ASQTeamState::GetFactionSetupDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "GetFactionSetupDisplayName");

	Params::SQTeamState_GetFactionSetupDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQTeamState.GetLeaveSquadRole
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQRoleSettings*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQRoleSettings* ASQTeamState::GetLeaveSquadRole() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "GetLeaveSquadRole");

	Params::SQTeamState_GetLeaveSquadRole Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQTeamState.GetPlayerCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQTeamState::GetPlayerCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "GetPlayerCount");

	Params::SQTeamState_GetPlayerCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQTeamState.GetRoles
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSQAvailabilityState_Role>OutRoles                                               (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASQTeamState::GetRoles(class ASQPlayerController* InPlayer, TArray<struct FSQAvailabilityState_Role>* OutRoles) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "GetRoles");

	Params::SQTeamState_GetRoles Parms{};

	Parms.InPlayer = InPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRoles != nullptr)
		*OutRoles = std::move(Parms.OutRoles);
}


// Function Squad.SQTeamState.GetRolesForRearm
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class ISQRearmSource>  InRearmSource                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// TArray<struct FSQAvailabilityState_Role>OutRoles                                               (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASQTeamState::GetRolesForRearm(class ASQPlayerController* InPlayer, const TScriptInterface<class ISQRearmSource>& InRearmSource, TArray<struct FSQAvailabilityState_Role>* OutRoles) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "GetRolesForRearm");

	Params::SQTeamState_GetRolesForRearm Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InRearmSource = InRearmSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRoles != nullptr)
		*OutRoles = std::move(Parms.OutRoles);
}


// Function Squad.SQTeamState.GetTickets
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQTeamState::GetTickets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "GetTickets");

	Params::SQTeamState_GetTickets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQTeamState.GetVehicles
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSQAvailabilityState_Vehicle>OutVehicles                                            (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASQTeamState::GetVehicles(class ASQPlayerController* InPlayer, TArray<struct FSQAvailabilityState_Vehicle>* OutVehicles) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "GetVehicles");

	Params::SQTeamState_GetVehicles Parms{};

	Parms.InPlayer = InPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutVehicles != nullptr)
		*OutVehicles = std::move(Parms.OutVehicles);
}


// Function Squad.SQTeamState.GetVehiclesForTeam
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FSQAvailabilityState_Vehicle>OutVehicles                                            (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ASQTeamState::GetVehiclesForTeam(TArray<struct FSQAvailabilityState_Vehicle>* OutVehicles) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "GetVehiclesForTeam");

	Params::SQTeamState_GetVehiclesForTeam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutVehicles != nullptr)
		*OutVehicles = std::move(Parms.OutVehicles);
}


// Function Squad.SQTeamState.IsConfigured
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQTeamState::IsConfigured() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "IsConfigured");

	Params::SQTeamState_IsConfigured Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQTeamState.TryGetActionAvailability
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQActionSettings*                InActionSetting                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState_Action      OutUpdatedActionState                                  (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQTeamState::TryGetActionAvailability(class ASQPlayerController* InPlayer, const class USQActionSettings* InActionSetting, struct FSQAvailabilityState_Action* OutUpdatedActionState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "TryGetActionAvailability");

	Params::SQTeamState_TryGetActionAvailability Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InActionSetting = InActionSetting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutUpdatedActionState != nullptr)
		*OutUpdatedActionState = std::move(Parms.OutUpdatedActionState);

	return Parms.ReturnValue;
}


// Function Squad.SQTeamState.TryGetActiveRoleAvailability
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState_Role        OutActiveRoleState                                     (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQTeamState::TryGetActiveRoleAvailability(class ASQPlayerController* InPlayer, struct FSQAvailabilityState_Role* OutActiveRoleState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "TryGetActiveRoleAvailability");

	Params::SQTeamState_TryGetActiveRoleAvailability Parms{};

	Parms.InPlayer = InPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutActiveRoleState != nullptr)
		*OutActiveRoleState = std::move(Parms.OutActiveRoleState);

	return Parms.ReturnValue;
}


// Function Squad.SQTeamState.TryGetDeployableAvailability
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQDeployableSettings*            InDeployableSetting                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState_Deployable  OutUpdatedDeployableState                              (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQTeamState::TryGetDeployableAvailability(class ASQPlayerController* InPlayer, const class USQDeployableSettings* InDeployableSetting, struct FSQAvailabilityState_Deployable* OutUpdatedDeployableState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "TryGetDeployableAvailability");

	Params::SQTeamState_TryGetDeployableAvailability Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InDeployableSetting = InDeployableSetting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutUpdatedDeployableState != nullptr)
		*OutUpdatedDeployableState = std::move(Parms.OutUpdatedDeployableState);

	return Parms.ReturnValue;
}


// Function Squad.SQTeamState.TryGetFactionDisplayName
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             OutDisplayName                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQTeamState::TryGetFactionDisplayName(class FText* OutDisplayName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "TryGetFactionDisplayName");

	Params::SQTeamState_TryGetFactionDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDisplayName != nullptr)
		*OutDisplayName = std::move(Parms.OutDisplayName);

	return Parms.ReturnValue;
}


// Function Squad.SQTeamState.TryGetFactionSetupDisplayName
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             OutDisplayName                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQTeamState::TryGetFactionSetupDisplayName(class FText* OutDisplayName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "TryGetFactionSetupDisplayName");

	Params::SQTeamState_TryGetFactionSetupDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDisplayName != nullptr)
		*OutDisplayName = std::move(Parms.OutDisplayName);

	return Parms.ReturnValue;
}


// Function Squad.SQTeamState.TryGetFactionShortName
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             OutShortName                                           (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQTeamState::TryGetFactionShortName(class FText* OutShortName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "TryGetFactionShortName");

	Params::SQTeamState_TryGetFactionShortName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutShortName != nullptr)
		*OutShortName = std::move(Parms.OutShortName);

	return Parms.ReturnValue;
}


// Function Squad.SQTeamState.TryGetRoleAvailability
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQRoleSettings*                  InRoleSetting                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState_Role        OutUpdatedRoleState                                    (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQTeamState::TryGetRoleAvailability(class ASQPlayerController* InPlayer, const class USQRoleSettings* InRoleSetting, struct FSQAvailabilityState_Role* OutUpdatedRoleState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "TryGetRoleAvailability");

	Params::SQTeamState_TryGetRoleAvailability Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InRoleSetting = InRoleSetting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutUpdatedRoleState != nullptr)
		*OutUpdatedRoleState = std::move(Parms.OutUpdatedRoleState);

	return Parms.ReturnValue;
}


// Function Squad.SQTeamState.TryGetRoleRearmAvailability
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class ISQRearmSource>  InRearmSource                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
// class USQRoleSettings*                  InRoleSetting                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState_Role        OutUpdatedRoleState                                    (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   OutCost                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQTeamState::TryGetRoleRearmAvailability(class ASQPlayerController* InPlayer, const TScriptInterface<class ISQRearmSource>& InRearmSource, const class USQRoleSettings* InRoleSetting, struct FSQAvailabilityState_Role* OutUpdatedRoleState, float* OutCost) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "TryGetRoleRearmAvailability");

	Params::SQTeamState_TryGetRoleRearmAvailability Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InRearmSource = InRearmSource;
	Parms.InRoleSetting = InRoleSetting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutUpdatedRoleState != nullptr)
		*OutUpdatedRoleState = std::move(Parms.OutUpdatedRoleState);

	if (OutCost != nullptr)
		*OutCost = Parms.OutCost;

	return Parms.ReturnValue;
}


// Function Squad.SQTeamState.TryGetVehicleAvailability
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQPlayerController*              InPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQVehicleSettings*               InVehicleSetting                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState_Vehicle     OutUpdatedVehicleState                                 (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQTeamState::TryGetVehicleAvailability(class ASQPlayerController* InPlayer, const class USQVehicleSettings* InVehicleSetting, struct FSQAvailabilityState_Vehicle* OutUpdatedVehicleState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTeamState", "TryGetVehicleAvailability");

	Params::SQTeamState_TryGetVehicleAvailability Parms{};

	Parms.InPlayer = InPlayer;
	Parms.InVehicleSetting = InVehicleSetting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutUpdatedVehicleState != nullptr)
		*OutUpdatedVehicleState = std::move(Parms.OutUpdatedVehicleState);

	return Parms.ReturnValue;
}


// Function Squad.SQTemperatureComponent.AdjustTemperature
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DegressOfAdjustment                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      TempChanger                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQTemperatureComponent::AdjustTemperature(float DegressOfAdjustment, class AController* TempChanger)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTemperatureComponent", "AdjustTemperature");

	Params::SQTemperatureComponent_AdjustTemperature Parms{};

	Parms.DegressOfAdjustment = DegressOfAdjustment;
	Parms.TempChanger = TempChanger;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQTemperatureComponent.OnRep_CurrentTemperature
// (Final, Native, Public)
// Parameters:
// float                                   PreviousTemperature                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQTemperatureComponent::OnRep_CurrentTemperature(float PreviousTemperature)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTemperatureComponent", "OnRep_CurrentTemperature");

	Params::SQTemperatureComponent_OnRep_CurrentTemperature Parms{};

	Parms.PreviousTemperature = PreviousTemperature;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQToastWidget.SetLifetime
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InLifetime                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQToastWidget::SetLifetime(float InLifetime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQToastWidget", "SetLifetime");

	Params::SQToastWidget_SetLifetime Parms{};

	Parms.InLifetime = InLifetime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQToastWidget.SetToastText
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             InToastText                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USQToastWidget::SetToastText(const class FText& InToastText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQToastWidget", "SetToastText");

	Params::SQToastWidget_SetToastText Parms{};

	Parms.InToastText = std::move(InToastText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction Squad.SQToastWidget.ToastTextUpdatedEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class FText                             Param_ToastText                                        (Parm, NativeAccessSpecifierPublic)

void USQToastWidget::ToastTextUpdatedEvent__DelegateSignature(const class FText& Param_ToastText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQToastWidget", "ToastTextUpdatedEvent__DelegateSignature");

	Params::SQToastWidget_ToastTextUpdatedEvent__DelegateSignature Parms{};

	Parms.Param_ToastText = std::move(Param_ToastText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQToastWidget.GetToastText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText USQToastWidget::GetToastText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQToastWidget", "GetToastText");

	Params::SQToastWidget_GetToastText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQTournamentModeRulesetState.OnRep_Restrictions
// (Final, Native, Public)

void ASQTournamentModeRulesetState::OnRep_Restrictions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQTournamentModeRulesetState", "OnRep_Restrictions");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVelocityRotatingMovementComponent.AddRotationInput
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         InRotationInput                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void USQVelocityRotatingMovementComponent::AddRotationInput(const struct FRotator& InRotationInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVelocityRotatingMovementComponent", "AddRotationInput");

	Params::SQVelocityRotatingMovementComponent_AddRotationInput Parms{};

	Parms.InRotationInput = std::move(InRotationInput);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVelocityRotatingMovementComponent.ClientSetStabilizationTargetHeading
// (Net, NetReliable, Native, Event, Protected, HasDefaults, NetClient)
// Parameters:
// struct FRotator                         InTargetHeading                                        (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void USQVelocityRotatingMovementComponent::ClientSetStabilizationTargetHeading(const struct FRotator& InTargetHeading)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVelocityRotatingMovementComponent", "ClientSetStabilizationTargetHeading");

	Params::SQVelocityRotatingMovementComponent_ClientSetStabilizationTargetHeading Parms{};

	Parms.InTargetHeading = std::move(InTargetHeading);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVelocityRotatingMovementComponent.OnRep_RotationReplicatedMovement
// (Native, Protected)

void USQVelocityRotatingMovementComponent::OnRep_RotationReplicatedMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVelocityRotatingMovementComponent", "OnRep_RotationReplicatedMovement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVelocityRotatingMovementComponent.ServerSetStabilizationTargetHeading
// (Net, NetReliable, Native, Event, Protected, NetServer, HasDefaults, NetValidate)
// Parameters:
// struct FRotator                         InTargetHeading                                        (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void USQVelocityRotatingMovementComponent::ServerSetStabilizationTargetHeading(const struct FRotator& InTargetHeading)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVelocityRotatingMovementComponent", "ServerSetStabilizationTargetHeading");

	Params::SQVelocityRotatingMovementComponent_ServerSetStabilizationTargetHeading Parms{};

	Parms.InTargetHeading = std::move(InTargetHeading);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVelocityRotatingMovementComponent.SetStabilizationEnabled
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInIsStabilizationEnabled                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVelocityRotatingMovementComponent::SetStabilizationEnabled(bool bInIsStabilizationEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVelocityRotatingMovementComponent", "SetStabilizationEnabled");

	Params::SQVelocityRotatingMovementComponent_SetStabilizationEnabled Parms{};

	Parms.bInIsStabilizationEnabled = bInIsStabilizationEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVelocityRotatingMovementComponent.SetStabilizationTargetHeading
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         InTargetHeading                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void USQVelocityRotatingMovementComponent::SetStabilizationTargetHeading(const struct FRotator& InTargetHeading)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVelocityRotatingMovementComponent", "SetStabilizationTargetHeading");

	Params::SQVelocityRotatingMovementComponent_SetStabilizationTargetHeading Parms{};

	Parms.InTargetHeading = std::move(InTargetHeading);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVelocityRotatingMovementComponent.ToggleStabilization
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVelocityRotatingMovementComponent::ToggleStabilization()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVelocityRotatingMovementComponent", "ToggleStabilization");

	Params::SQVelocityRotatingMovementComponent_ToggleStabilization Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVelocityRotatingMovementComponent.GetCurrentLocation
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USQVelocityRotatingMovementComponent::GetCurrentLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVelocityRotatingMovementComponent", "GetCurrentLocation");

	Params::SQVelocityRotatingMovementComponent_GetCurrentLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVelocityRotatingMovementComponent.GetCurrentRotation
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator USQVelocityRotatingMovementComponent::GetCurrentRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVelocityRotatingMovementComponent", "GetCurrentRotation");

	Params::SQVelocityRotatingMovementComponent_GetCurrentRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVelocityRotatingMovementComponent.GetWorldRotation
// (Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FQuat                            ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FQuat USQVelocityRotatingMovementComponent::GetWorldRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVelocityRotatingMovementComponent", "GetWorldRotation");

	Params::SQVelocityRotatingMovementComponent_GetWorldRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVelocityRotatingMovementComponent.IsStabilizationEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVelocityRotatingMovementComponent::IsStabilizationEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVelocityRotatingMovementComponent", "IsStabilizationEnabled");

	Params::SQVelocityRotatingMovementComponent_IsStabilizationEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQUpdateSessionsCallbackProxy.GetAnticheatProtected
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQUpdateSessionsCallbackProxy::GetAnticheatProtected(const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQUpdateSessionsCallbackProxy", "GetAnticheatProtected");

	Params::SQUpdateSessionsCallbackProxy_GetAnticheatProtected Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQUpdateSessionsCallbackProxy.GetCurrentPlayers
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQUpdateSessionsCallbackProxy::GetCurrentPlayers(const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQUpdateSessionsCallbackProxy", "GetCurrentPlayers");

	Params::SQUpdateSessionsCallbackProxy_GetCurrentPlayers Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQUpdateSessionsCallbackProxy.GetGameMode
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQUpdateSessionsCallbackProxy::GetGameMode(const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQUpdateSessionsCallbackProxy", "GetGameMode");

	Params::SQUpdateSessionsCallbackProxy_GetGameMode Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQUpdateSessionsCallbackProxy.GetGameVersion
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQUpdateSessionsCallbackProxy::GetGameVersion(const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQUpdateSessionsCallbackProxy", "GetGameVersion");

	Params::SQUpdateSessionsCallbackProxy_GetGameVersion Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQUpdateSessionsCallbackProxy.GetLicensedServer
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          Param_WorldContextObject                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQUpdateSessionsCallbackProxy::GetLicensedServer(class UObject* Param_WorldContextObject, const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQUpdateSessionsCallbackProxy", "GetLicensedServer");

	Params::SQUpdateSessionsCallbackProxy_GetLicensedServer Parms{};

	Parms.Param_WorldContextObject = Param_WorldContextObject;
	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQUpdateSessionsCallbackProxy.GetMapName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQUpdateSessionsCallbackProxy::GetMapName(const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQUpdateSessionsCallbackProxy", "GetMapName");

	Params::SQUpdateSessionsCallbackProxy_GetMapName Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQUpdateSessionsCallbackProxy.GetMatchTimeout
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQUpdateSessionsCallbackProxy::GetMatchTimeout(const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQUpdateSessionsCallbackProxy", "GetMatchTimeout");

	Params::SQUpdateSessionsCallbackProxy_GetMatchTimeout Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQUpdateSessionsCallbackProxy.GetMaxPlayers
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQUpdateSessionsCallbackProxy::GetMaxPlayers(const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQUpdateSessionsCallbackProxy", "GetMaxPlayers");

	Params::SQUpdateSessionsCallbackProxy_GetMaxPlayers Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQUpdateSessionsCallbackProxy.GetPasswordProtected
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQUpdateSessionsCallbackProxy::GetPasswordProtected(const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQUpdateSessionsCallbackProxy", "GetPasswordProtected");

	Params::SQUpdateSessionsCallbackProxy_GetPasswordProtected Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQUpdateSessionsCallbackProxy.GetPingInMs
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQUpdateSessionsCallbackProxy::GetPingInMs(const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQUpdateSessionsCallbackProxy", "GetPingInMs");

	Params::SQUpdateSessionsCallbackProxy_GetPingInMs Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQUpdateSessionsCallbackProxy.GetSearchKeywords
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQUpdateSessionsCallbackProxy::GetSearchKeywords(const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQUpdateSessionsCallbackProxy", "GetSearchKeywords");

	Params::SQUpdateSessionsCallbackProxy_GetSearchKeywords Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQUpdateSessionsCallbackProxy.GetServerName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USQUpdateSessionsCallbackProxy::GetServerName(const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQUpdateSessionsCallbackProxy", "GetServerName");

	Params::SQUpdateSessionsCallbackProxy_GetServerName Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQUpdateSessionsCallbackProxy.GetSessionFlagStruct
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FBlueprintSessionResult          Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSQSessionFlagStruct             ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FSQSessionFlagStruct USQUpdateSessionsCallbackProxy::GetSessionFlagStruct(const struct FBlueprintSessionResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQUpdateSessionsCallbackProxy", "GetSessionFlagStruct");

	Params::SQUpdateSessionsCallbackProxy_GetSessionFlagStruct Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQUpdateSessionsCallbackProxy.UpdateSession
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Param_WorldContextObject                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SessionName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQUpdateSessionsCallbackProxy*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQUpdateSessionsCallbackProxy* USQUpdateSessionsCallbackProxy::UpdateSession(class UObject* Param_WorldContextObject, class APlayerController* PlayerController, class FName SessionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQUpdateSessionsCallbackProxy", "UpdateSession");

	Params::SQUpdateSessionsCallbackProxy_UpdateSession Parms{};

	Parms.Param_WorldContextObject = Param_WorldContextObject;
	Parms.PlayerController = PlayerController;
	Parms.SessionName = SessionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQUsable.BPDisplayPrompt
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      User                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISQUsable::BPDisplayPrompt(class AController* User)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQUsable", "BPDisplayPrompt");

	Params::SQUsable_BPDisplayPrompt Parms{};

	Parms.User = User;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQUsable.BPHidePrompt
// (Event, Public, BlueprintEvent)

void ISQUsable::BPHidePrompt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQUsable", "BPHidePrompt");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQUsable.BPOnUsed
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      User                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISQUsable::BPOnUsed(class AController* User)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQUsable", "BPOnUsed");

	Params::SQUsable_BPOnUsed Parms{};

	Parms.User = User;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQUsable.BPStopUsed
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      User                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISQUsable::BPStopUsed(class AController* User)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQUsable", "BPStopUsed");

	Params::SQUsable_BPStopUsed Parms{};

	Parms.User = User;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQUsable.GetInterfaceTeam
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ISQUsable::GetInterfaceTeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQUsable", "GetInterfaceTeam");

	Params::SQUsable_GetInterfaceTeam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQUsable.GetUsableData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSQUsableData                    ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSQUsableData ISQUsable::GetUsableData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQUsable", "GetUsableData");

	Params::SQUsable_GetUsableData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQUsable.ServerOnUsed
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      User                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISQUsable::ServerOnUsed(class AController* User)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQUsable", "ServerOnUsed");

	Params::SQUsable_ServerOnUsed Parms{};

	Parms.User = User;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQUsable.ServerStopUsed
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      User                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISQUsable::ServerStopUsed(class AController* User)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQUsable", "ServerStopUsed");

	Params::SQUsable_ServerStopUsed Parms{};

	Parms.User = User;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQUsable.ShouldDisplayPrompt
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      User                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ISQUsable::ShouldDisplayPrompt(class AController* User)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQUsable", "ShouldDisplayPrompt");

	Params::SQUsable_ShouldDisplayPrompt Parms{};

	Parms.User = User;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQUserWidget_StoreCard.OnClick
// (Final, Native, Protected)

void USQUserWidget_StoreCard::OnClick()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQUserWidget_StoreCard", "OnClick");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQUserWidget_StoreScreen.OnPurchaseCompleted
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FODKBazaarPurchaseCompletedData  PurchaseCompletedData                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USQUserWidget_StoreScreen::OnPurchaseCompleted(const struct FODKBazaarPurchaseCompletedData& PurchaseCompletedData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQUserWidget_StoreScreen", "OnPurchaseCompleted");

	Params::SQUserWidget_StoreScreen_OnPurchaseCompleted Parms{};

	Parms.PurchaseCompletedData = std::move(PurchaseCompletedData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQUserWidget_StoreScreen.PreviewBundleScreen
// (Event, Public, BlueprintEvent)
// Parameters:
// class UODKBazaarBundle*                 BazaarBundle                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQUserWidget_StoreScreen::PreviewBundleScreen(const class UODKBazaarBundle* BazaarBundle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQUserWidget_StoreScreen", "PreviewBundleScreen");

	Params::SQUserWidget_StoreScreen_PreviewBundleScreen Parms{};

	Parms.BazaarBundle = BazaarBundle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQUserWidget_StoreScreen.RefreshStoreLoadout
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EBundleCategory                         CategoryToDisplay                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQUserWidget_StoreScreen::RefreshStoreLoadout(EBundleCategory CategoryToDisplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQUserWidget_StoreScreen", "RefreshStoreLoadout");

	Params::SQUserWidget_StoreScreen_RefreshStoreLoadout Parms{};

	Parms.CategoryToDisplay = CategoryToDisplay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQUserWidget_StoreScreen.SetupWidget
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FTitleData                       TitleData                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USQUserWidget_StoreScreen::SetupWidget(const struct FTitleData& TitleData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQUserWidget_StoreScreen", "SetupWidget");

	Params::SQUserWidget_StoreScreen_SetupWidget Parms{};

	Parms.TitleData = std::move(TitleData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQUserWidget_StoreScreen.ToggleShowOwnedBundles
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewShowOwnedBundles                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQUserWidget_StoreScreen::ToggleShowOwnedBundles(bool bNewShowOwnedBundles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQUserWidget_StoreScreen", "ToggleShowOwnedBundles");

	Params::SQUserWidget_StoreScreen_ToggleShowOwnedBundles Parms{};

	Parms.bNewShowOwnedBundles = bNewShowOwnedBundles;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQUserWidget_StoreScreen.TryGotoPurchaseForBundle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UODKBazaarBundle*                 BazaarBundle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQUserWidget_StoreScreen::TryGotoPurchaseForBundle(class UODKBazaarBundle* BazaarBundle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQUserWidget_StoreScreen", "TryGotoPurchaseForBundle");

	Params::SQUserWidget_StoreScreen_TryGotoPurchaseForBundle Parms{};

	Parms.BazaarBundle = BazaarBundle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleBuoyancyComponent.ResetToDefaults
// (Final, Native, Public, BlueprintCallable)

void USQVehicleBuoyancyComponent::ResetToDefaults()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleBuoyancyComponent", "ResetToDefaults");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleCenterOfMassFXComponent.OnCenterOfMassFXComponentBeginOverlap
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USQVehicleCenterOfMassFXComponent::OnCenterOfMassFXComponentBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleCenterOfMassFXComponent", "OnCenterOfMassFXComponentBeginOverlap");

	Params::SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleCenterOfMassFXComponent.OnCenterOfMassFXComponentEndOverlap
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVehicleCenterOfMassFXComponent::OnCenterOfMassFXComponentEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleCenterOfMassFXComponent", "OnCenterOfMassFXComponentEndOverlap");

	Params::SQVehicleCenterOfMassFXComponent_OnCenterOfMassFXComponentEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleClaim.GetClaimingSquad
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQSquad*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQSquad* USQVehicleClaim::GetClaimingSquad() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleClaim", "GetClaimingSquad");

	Params::SQVehicleClaim_GetClaimingSquad Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleClaim.GetStatus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESQVehicleClaimStatus                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESQVehicleClaimStatus USQVehicleClaim::GetStatus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleClaim", "GetStatus");

	Params::SQVehicleClaim_GetStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleClaim.GetTimeOfClaim
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQVehicleClaim::GetTimeOfClaim() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleClaim", "GetTimeOfClaim");

	Params::SQVehicleClaim_GetTimeOfClaim Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleClaim.GetTimeUntilExpiration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQVehicleClaim::GetTimeUntilExpiration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleClaim", "GetTimeUntilExpiration");

	Params::SQVehicleClaim_GetTimeUntilExpiration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleClaim.GetVehicleClaimed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQVehicle*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQVehicle* USQVehicleClaim::GetVehicleClaimed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleClaim", "GetVehicleClaimed");

	Params::SQVehicleClaim_GetVehicleClaimed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEmergencyRecoverySettings.EmergencyRecoveryCustom
// (BlueprintAuthorityOnly, Native, Event, Public, BlueprintEvent)
// Parameters:
// class ASQVehicle*                       Vehicle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Instigator                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQEmergencyRecoverySettings::EmergencyRecoveryCustom(class ASQVehicle* Vehicle, class AActor* Instigator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEmergencyRecoverySettings", "EmergencyRecoveryCustom");

	Params::SQEmergencyRecoverySettings_EmergencyRecoveryCustom Parms{};

	Parms.Vehicle = Vehicle;
	Parms.Instigator = Instigator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQEmergencyRecoverySettings.CanUseEmergencyRecovery
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class USQVehicleEmergencyRecoveryComponent*RecoveryComponent                                      (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQVehicleRecoveryMethod                RecoveryMethod                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQEmergencyRecoverySettings::CanUseEmergencyRecovery(const class USQVehicleEmergencyRecoveryComponent* RecoveryComponent, ESQVehicleRecoveryMethod RecoveryMethod) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQEmergencyRecoverySettings", "CanUseEmergencyRecovery");

	Params::SQEmergencyRecoverySettings_CanUseEmergencyRecovery Parms{};

	Parms.RecoveryComponent = RecoveryComponent;
	Parms.RecoveryMethod = RecoveryMethod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleResourceWeaponInventoryComponent.OnRep_ResourcesChanged
// (Final, Native, Protected)

void USQVehicleResourceWeaponInventoryComponent::OnRep_ResourcesChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleResourceWeaponInventoryComponent", "OnRep_ResourcesChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleResourceWeaponInventoryComponent.SetStaticMeshResourcesAmmo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class UStaticMeshComponent*>     InStaticMeshResources                                  (ConstParm, Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USQVehicleResourceWeaponInventoryComponent::SetStaticMeshResourcesAmmo(const TArray<class UStaticMeshComponent*>& InStaticMeshResources)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleResourceWeaponInventoryComponent", "SetStaticMeshResourcesAmmo");

	Params::SQVehicleResourceWeaponInventoryComponent_SetStaticMeshResourcesAmmo Parms{};

	Parms.InStaticMeshResources = std::move(InStaticMeshResources);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleResourceWeaponInventoryComponent.SetStaticMeshResourcesConstruction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class UStaticMeshComponent*>     InStaticMeshResources                                  (ConstParm, Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USQVehicleResourceWeaponInventoryComponent::SetStaticMeshResourcesConstruction(const TArray<class UStaticMeshComponent*>& InStaticMeshResources)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleResourceWeaponInventoryComponent", "SetStaticMeshResourcesConstruction");

	Params::SQVehicleResourceWeaponInventoryComponent_SetStaticMeshResourcesConstruction Parms{};

	Parms.InStaticMeshResources = std::move(InStaticMeshResources);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleResourceWeaponInventoryComponent.UpdateVisibilities
// (Final, Native, Public, BlueprintCallable)

void USQVehicleResourceWeaponInventoryComponent::UpdateVisibilities()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleResourceWeaponInventoryComponent", "UpdateVisibilities");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleResourceWeaponInventoryComponent.FindAmmoWeapon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQVehicleResource*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQVehicleResource* USQVehicleResourceWeaponInventoryComponent::FindAmmoWeapon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleResourceWeaponInventoryComponent", "FindAmmoWeapon");

	Params::SQVehicleResourceWeaponInventoryComponent_FindAmmoWeapon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleResourceWeaponInventoryComponent.FindConstructionWeapon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQVehicleResource*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQVehicleResource* USQVehicleResourceWeaponInventoryComponent::FindConstructionWeapon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleResourceWeaponInventoryComponent", "FindConstructionWeapon");

	Params::SQVehicleResourceWeaponInventoryComponent_FindConstructionWeapon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleResourceWeaponInventoryComponent.GetAmmoPoints
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQVehicleResourceWeaponInventoryComponent::GetAmmoPoints() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleResourceWeaponInventoryComponent", "GetAmmoPoints");

	Params::SQVehicleResourceWeaponInventoryComponent_GetAmmoPoints Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleResourceWeaponInventoryComponent.GetCurrentSharedResourceAmount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQVehicleResourceWeaponInventoryComponent::GetCurrentSharedResourceAmount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleResourceWeaponInventoryComponent", "GetCurrentSharedResourceAmount");

	Params::SQVehicleResourceWeaponInventoryComponent_GetCurrentSharedResourceAmount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleResourceWeaponInventoryComponent.GetTotalSharedResourceAmount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQVehicleResourceWeaponInventoryComponent::GetTotalSharedResourceAmount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleResourceWeaponInventoryComponent", "GetTotalSharedResourceAmount");

	Params::SQVehicleResourceWeaponInventoryComponent_GetTotalSharedResourceAmount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleResourceWeaponInventoryComponent.HasConstructionWeapon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVehicleResourceWeaponInventoryComponent::HasConstructionWeapon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleResourceWeaponInventoryComponent", "HasConstructionWeapon");

	Params::SQVehicleResourceWeaponInventoryComponent_HasConstructionWeapon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleSeatComponent.CanSeatBeRepaired
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// ESQRepairSource                         RepairSource                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVehicleSeatComponent::CanSeatBeRepaired(ESQRepairSource RepairSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeatComponent", "CanSeatBeRepaired");

	Params::SQVehicleSeatComponent_CanSeatBeRepaired Parms{};

	Parms.RepairSource = RepairSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleSeatComponent.ChangeSeatState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   StateIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVehicleSeatComponent::ChangeSeatState(int32 StateIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeatComponent", "ChangeSeatState");

	Params::SQVehicleSeatComponent_ChangeSeatState Parms{};

	Parms.StateIndex = StateIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleSeatComponent.OnRep_AnimationSeatState
// (Final, Native, Public)

void USQVehicleSeatComponent::OnRep_AnimationSeatState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeatComponent", "OnRep_AnimationSeatState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleSeatComponent.OnRep_SeatPawn
// (Native, Public)

void USQVehicleSeatComponent::OnRep_SeatPawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeatComponent", "OnRep_SeatPawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleSeatComponent.GetSeatPawn
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQVehicleSeat*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQVehicleSeat* USQVehicleSeatComponent::GetSeatPawn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeatComponent", "GetSeatPawn");

	Params::SQVehicleSeatComponent_GetSeatPawn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleSeatComponent.GetSeatPawnEquipableItem
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASQEquipableItem*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASQEquipableItem* USQVehicleSeatComponent::GetSeatPawnEquipableItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeatComponent", "GetSeatPawnEquipableItem");

	Params::SQVehicleSeatComponent_GetSeatPawnEquipableItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleSeatComponent.GetSeatPawnInventory
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USQVehicleInventoryComponent*     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQVehicleInventoryComponent* USQVehicleSeatComponent::GetSeatPawnInventory() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeatComponent", "GetSeatPawnInventory");

	Params::SQVehicleSeatComponent_GetSeatPawnInventory Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleSeatComponent.GetSoldierSeatState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESQSoldierSeatState                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESQSoldierSeatState USQVehicleSeatComponent::GetSoldierSeatState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeatComponent", "GetSoldierSeatState");

	Params::SQVehicleSeatComponent_GetSoldierSeatState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleSeatComponent.TransitionComplete
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVehicleSeatComponent::TransitionComplete() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSeatComponent", "TransitionComplete");

	Params::SQVehicleSeatComponent_TransitionComplete Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleSpawner.InitializeSpecificVehicleSetting
// (Native, Protected, BlueprintCallable)

void ASQVehicleSpawner::InitializeSpecificVehicleSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSpawner", "InitializeSpecificVehicleSetting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleSpawner.OnVehicleLoaded
// (Final, Native, Protected)
// Parameters:
// TSoftClassPtr<class UClass>             InVehicleReference                                     (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQVehicleSettingEntry           InVehicleSetting                                       (Parm, NoDestructor, NativeAccessSpecifierPublic)

void ASQVehicleSpawner::OnVehicleLoaded(TSoftClassPtr<class UClass> InVehicleReference, const struct FSQVehicleSettingEntry& InVehicleSetting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSpawner", "OnVehicleLoaded");

	Params::SQVehicleSpawner_OnVehicleLoaded Parms{};

	Parms.InVehicleReference = InVehicleReference;
	Parms.InVehicleSetting = std::move(InVehicleSetting);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleSpawner.OnVehicleSpawned
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ASQVehicle*                       OutVehicle                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQVehicleSpawner::OnVehicleSpawned(class ASQVehicle* OutVehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSpawner", "OnVehicleSpawned");

	Params::SQVehicleSpawner_OnVehicleSpawned Parms{};

	Parms.OutVehicle = OutVehicle;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQVehicleSpawner.StartLoadAndSpawnVehicle
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSQVehicleSettingEntry           InVehicleSettings                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ASQVehicleSpawner::StartLoadAndSpawnVehicle(const struct FSQVehicleSettingEntry& InVehicleSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSpawner", "StartLoadAndSpawnVehicle");

	Params::SQVehicleSpawner_StartLoadAndSpawnVehicle Parms{};

	Parms.InVehicleSettings = std::move(InVehicleSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVehicleSpawner.CanSpawnVehicle
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USQVehicleSettings*               InAvailableVehicle                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQVehicleSpawner::CanSpawnVehicle(const class USQVehicleSettings* InAvailableVehicle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSpawner", "CanSpawnVehicle");

	Params::SQVehicleSpawner_CanSpawnVehicle Parms{};

	Parms.InAvailableVehicle = InAvailableVehicle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleSpawner.GetVehiclePriority
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FSQAvailabilityState_Vehicle     InAvailableVehicle                                     (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASQVehicleSpawner::GetVehiclePriority(const struct FSQAvailabilityState_Vehicle& InAvailableVehicle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSpawner", "GetVehiclePriority");

	Params::SQVehicleSpawner_GetVehiclePriority Parms{};

	Parms.InAvailableVehicle = std::move(InAvailableVehicle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleSpawner.GetVehicleReference
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USQVehicleSettings*               InVehicleSettings                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             OutVehicleReference                                    (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQVehicleSpawner::GetVehicleReference(class USQVehicleSettings* InVehicleSettings, TSoftClassPtr<class UClass>* OutVehicleReference) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSpawner", "GetVehicleReference");

	Params::SQVehicleSpawner_GetVehicleReference Parms{};

	Parms.InVehicleSettings = InVehicleSettings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutVehicleReference != nullptr)
		*OutVehicleReference = Parms.OutVehicleReference;
}


// Function Squad.SQVehicleSpawner.GetVehicleToSpawn
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TArray<struct FSQAvailabilityState_Vehicle>InVehicleAvailabilityStates                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState_Vehicle     OutSelectedVehicle                                     (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// int32                                   OutSelectedIndex                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQVehicleSpawner::GetVehicleToSpawn(const TArray<struct FSQAvailabilityState_Vehicle>& InVehicleAvailabilityStates, struct FSQAvailabilityState_Vehicle* OutSelectedVehicle, int32* OutSelectedIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSpawner", "GetVehicleToSpawn");

	Params::SQVehicleSpawner_GetVehicleToSpawn Parms{};

	Parms.InVehicleAvailabilityStates = std::move(InVehicleAvailabilityStates);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSelectedVehicle != nullptr)
		*OutSelectedVehicle = std::move(Parms.OutSelectedVehicle);

	if (OutSelectedIndex != nullptr)
		*OutSelectedIndex = Parms.OutSelectedIndex;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleSpawnerSettings.IsVehicleMatching
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USQVehicleSettings*               InAvailableVehicle                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVehicleSpawnerSettings::IsVehicleMatching(const class USQVehicleSettings* InAvailableVehicle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSpawnerSettings", "IsVehicleMatching");

	Params::SQVehicleSpawnerSettings_IsVehicleMatching Parms{};

	Parms.InAvailableVehicle = InAvailableVehicle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleSpawnerSettings.SelectVehicleToSpawn
// (Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FSQAvailabilityState_Vehicle>InVehicles                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FSQAvailabilityState_Vehicle     OutSelectVehicle                                       (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVehicleSpawnerSettings::SelectVehicleToSpawn(const TArray<struct FSQAvailabilityState_Vehicle>& InVehicles, struct FSQAvailabilityState_Vehicle* OutSelectVehicle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleSpawnerSettings", "SelectVehicleToSpawn");

	Params::SQVehicleSpawnerSettings_SelectVehicleToSpawn Parms{};

	Parms.InVehicles = std::move(InVehicles);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSelectVehicle != nullptr)
		*OutSelectVehicle = std::move(Parms.OutSelectVehicle);

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleTurretClosedTop.BP_OnVehicleZoom
// (Event, Protected, BlueprintEvent)

void ASQVehicleTurretClosedTop::BP_OnVehicleZoom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleTurretClosedTop", "BP_OnVehicleZoom");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQVehicleTurretClosedTop.ResetZoom
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void ASQVehicleTurretClosedTop::ResetZoom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleTurretClosedTop", "ResetZoom");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQVehicleTurretClosedTop.IsStabilizationEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQVehicleTurretClosedTop::IsStabilizationEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleTurretClosedTop", "IsStabilizationEnabled");

	Params::SQVehicleTurretClosedTop_IsStabilizationEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleTurretOpenTop.GotoBaseMagnification
// (Event, Public, BlueprintEvent)

void ASQVehicleTurretOpenTop::GotoBaseMagnification()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleTurretOpenTop", "GotoBaseMagnification");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQVehicleTurretOpenTop.ResetZoomParent
// (Event, Public, BlueprintEvent)

void ASQVehicleTurretOpenTop::ResetZoomParent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleTurretOpenTop", "ResetZoomParent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Squad.SQVehicleWheel.GetBoneName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName USQVehicleWheel::GetBoneName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleWheel", "GetBoneName");

	Params::SQVehicleWheel_GetBoneName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVoteSessionAuthority.AddVote
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             ChoiceId                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQVotingComponent*               Voter                                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVoteSessionAuthority::AddVote(const class FName& ChoiceId, const class USQVotingComponent* Voter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVoteSessionAuthority", "AddVote");

	Params::SQVoteSessionAuthority_AddVote Parms{};

	Parms.ChoiceId = ChoiceId;
	Parms.Voter = Voter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVoteSessionAuthority.AddVoter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USQVotingComponent*               Voter                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    NotifyVoter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVoteSessionAuthority::AddVoter(class USQVotingComponent* Voter, bool NotifyVoter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVoteSessionAuthority", "AddVoter");

	Params::SQVoteSessionAuthority_AddVoter Parms{};

	Parms.Voter = Voter;
	Parms.NotifyVoter = NotifyVoter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVoteSessionAuthority.BP_Tick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVoteSessionAuthority::BP_Tick(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVoteSessionAuthority", "BP_Tick");

	Params::SQVoteSessionAuthority_BP_Tick Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQVoteSessionAuthority.Cancel
// (Final, Native, Public, BlueprintCallable)

void USQVoteSessionAuthority::Cancel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVoteSessionAuthority", "Cancel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVoteSessionAuthority.EndPresentation
// (Final, Native, Public, BlueprintCallable)

void USQVoteSessionAuthority::EndPresentation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVoteSessionAuthority", "EndPresentation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVoteSessionAuthority.Finalize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName USQVoteSessionAuthority::Finalize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVoteSessionAuthority", "Finalize");

	Params::SQVoteSessionAuthority_Finalize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVoteSessionAuthority.OnAddVote
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             ChoiceId                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQVotingComponent*               Voter                                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AddedVotes                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVoteSessionAuthority::OnAddVote(const class FName& ChoiceId, const class USQVotingComponent* Voter, int32* AddedVotes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVoteSessionAuthority", "OnAddVote");

	Params::SQVoteSessionAuthority_OnAddVote Parms{};

	Parms.ChoiceId = ChoiceId;
	Parms.Voter = Voter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AddedVotes != nullptr)
		*AddedVotes = Parms.AddedVotes;

	return Parms.ReturnValue;
}


// Function Squad.SQVoteSessionAuthority.OnAddVoter
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class USQVotingComponent*               Voter                                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutAddVotesCount                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVoteSessionAuthority::OnAddVoter(const class USQVotingComponent* Voter, int32* OutAddVotesCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVoteSessionAuthority", "OnAddVoter");

	Params::SQVoteSessionAuthority_OnAddVoter Parms{};

	Parms.Voter = Voter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAddVotesCount != nullptr)
		*OutAddVotesCount = Parms.OutAddVotesCount;

	return Parms.ReturnValue;
}


// Function Squad.SQVoteSessionAuthority.OnRemoveVote
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FName                             ChoiceId                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQVotingComponent*               Voter                                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQVoteSessionAuthority::OnRemoveVote(const class FName& ChoiceId, const class USQVotingComponent* Voter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVoteSessionAuthority", "OnRemoveVote");

	Params::SQVoteSessionAuthority_OnRemoveVote Parms{};

	Parms.ChoiceId = ChoiceId;
	Parms.Voter = Voter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVoteSessionAuthority.OnRemoveVoter
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class USQVotingComponent*               Voter                                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQVoteSessionAuthority::OnRemoveVoter(const class USQVotingComponent* Voter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVoteSessionAuthority", "OnRemoveVoter");

	Params::SQVoteSessionAuthority_OnRemoveVoter Parms{};

	Parms.Voter = Voter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVoteSessionAuthority.OnRemoveVotesFrom
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class USQVotingComponent*               Voter                                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USQVoteSessionAuthority::OnRemoveVotesFrom(const class USQVotingComponent* Voter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVoteSessionAuthority", "OnRemoveVotesFrom");

	Params::SQVoteSessionAuthority_OnRemoveVotesFrom Parms{};

	Parms.Voter = Voter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVoteSessionAuthority.PropagateChanges
// (Final, Native, Public, BlueprintCallable)

void USQVoteSessionAuthority::PropagateChanges()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVoteSessionAuthority", "PropagateChanges");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVoteSessionAuthority.RemoveVote
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             ChoiceId                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQVotingComponent*               Voter                                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVoteSessionAuthority::RemoveVote(const class FName& ChoiceId, const class USQVotingComponent* Voter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVoteSessionAuthority", "RemoveVote");

	Params::SQVoteSessionAuthority_RemoveVote Parms{};

	Parms.ChoiceId = ChoiceId;
	Parms.Voter = Voter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVoteSessionAuthority.RemoveVoter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USQVotingComponent*               Voter                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVoteSessionAuthority::RemoveVoter(class USQVotingComponent* Voter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVoteSessionAuthority", "RemoveVoter");

	Params::SQVoteSessionAuthority_RemoveVoter Parms{};

	Parms.Voter = Voter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVoteSessionAuthority.Start
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQVote                          VoteTemplate                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class USQVotingComponent*>       InitialVoters                                          (Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USQVoteSessionAuthority::Start(const class UObject* WorldContextObject, const struct FSQVote& VoteTemplate, const TArray<class USQVotingComponent*>& InitialVoters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVoteSessionAuthority", "Start");

	Params::SQVoteSessionAuthority_Start Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.VoteTemplate = std::move(VoteTemplate);
	Parms.InitialVoters = std::move(InitialVoters);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVoteSessionAuthority.AreAllVoteRecieved
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVoteSessionAuthority::AreAllVoteRecieved() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVoteSessionAuthority", "AreAllVoteRecieved");

	Params::SQVoteSessionAuthority_AreAllVoteRecieved Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVoteSessionAuthority.GetWorld
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UWorld*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWorld* USQVoteSessionAuthority::GetWorld() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVoteSessionAuthority", "GetWorld");

	Params::SQVoteSessionAuthority_GetWorld Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVoteSessionAuthority.ShouldFinalize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVoteSessionAuthority::ShouldFinalize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVoteSessionAuthority", "ShouldFinalize");

	Params::SQVoteSessionAuthority_ShouldFinalize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVotingComponent.AddVoteByIds
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             VoteId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ChoiceId                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVotingComponent::AddVoteByIds(const class FName& VoteId, const class FName& ChoiceId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVotingComponent", "AddVoteByIds");

	Params::SQVotingComponent_AddVoteByIds Parms{};

	Parms.VoteId = VoteId;
	Parms.ChoiceId = ChoiceId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVotingComponent.OnVoteEnded
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQVoteSessionClient*             VoteSession                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQChoice                        Winner                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USQVotingComponent::OnVoteEnded(class USQVoteSessionClient* VoteSession, const struct FSQChoice& Winner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVotingComponent", "OnVoteEnded");

	Params::SQVotingComponent_OnVoteEnded Parms{};

	Parms.VoteSession = VoteSession;
	Parms.Winner = std::move(Winner);

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQVotingComponent.OnVoteInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ChoiceIndex                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVotingComponent::OnVoteInput(const int32 ChoiceIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVotingComponent", "OnVoteInput");

	Params::SQVotingComponent_OnVoteInput Parms{};

	Parms.ChoiceIndex = ChoiceIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVotingComponent.OnVoteStarted
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQVoteSessionClient*             VoteSession                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWithVoteAccess                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVotingComponent::OnVoteStarted(class USQVoteSessionClient* VoteSession, bool bWithVoteAccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVotingComponent", "OnVoteStarted");

	Params::SQVotingComponent_OnVoteStarted Parms{};

	Parms.VoteSession = VoteSession;
	Parms.bWithVoteAccess = bWithVoteAccess;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQVotingComponent.OnVoteUpdated
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQVoteSessionClient*             VoteSession                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVotingComponent::OnVoteUpdated(class USQVoteSessionClient* VoteSession)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVotingComponent", "OnVoteUpdated");

	Params::SQVotingComponent_OnVoteUpdated Parms{};

	Parms.VoteSession = VoteSession;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Squad.SQVotingComponent.RemoveVoteByIds
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             VoteId                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ChoiceId                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVotingComponent::RemoveVoteByIds(const class FName& VoteId, const class FName& ChoiceId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVotingComponent", "RemoveVoteByIds");

	Params::SQVotingComponent_RemoveVoteByIds Parms{};

	Parms.VoteId = VoteId;
	Parms.ChoiceId = ChoiceId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVotingComponent.Server_AddVoteByIds
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// class FName                             VoteId                                                 (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ChoiceId                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVotingComponent::Server_AddVoteByIds(const class FName& VoteId, const class FName& ChoiceId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVotingComponent", "Server_AddVoteByIds");

	Params::SQVotingComponent_Server_AddVoteByIds Parms{};

	Parms.VoteId = VoteId;
	Parms.ChoiceId = ChoiceId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVotingComponent.Server_RemoveVoteByIds
// (Net, NetReliable, Native, Event, Protected, NetServer, NetValidate)
// Parameters:
// class FName                             VoteId                                                 (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ChoiceId                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVotingComponent::Server_RemoveVoteByIds(const class FName& VoteId, const class FName& ChoiceId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVotingComponent", "Server_RemoveVoteByIds");

	Params::SQVotingComponent_Server_RemoveVoteByIds Parms{};

	Parms.VoteId = VoteId;
	Parms.ChoiceId = ChoiceId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVotingComponent.CanVoteInCurrentPhase
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVotingComponent::CanVoteInCurrentPhase() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVotingComponent", "CanVoteInCurrentPhase");

	Params::SQVotingComponent_CanVoteInCurrentPhase Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVotingComponent.GetPlayerIdentifier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName USQVotingComponent::GetPlayerIdentifier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVotingComponent", "GetPlayerIdentifier");

	Params::SQVotingComponent_GetPlayerIdentifier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVotingComponent.HasVoteInProgress
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVotingComponent::HasVoteInProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVotingComponent", "HasVoteInProgress");

	Params::SQVotingComponent_HasVoteInProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVotingService.GetLocalVotingComponent
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USQVotingComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USQVotingComponent* USQVotingService::GetLocalVotingComponent(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQVotingService", "GetLocalVotingComponent");

	Params::SQVotingService_GetLocalVotingComponent Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVotingService.IsAnyFactionVoteInProgress
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVotingService::IsAnyFactionVoteInProgress(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQVotingService", "IsAnyFactionVoteInProgress");

	Params::SQVotingService_IsAnyFactionVoteInProgress Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVotingService.IsAnyVoteInProgress
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVotingService::IsAnyVoteInProgress(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQVotingService", "IsAnyVoteInProgress");

	Params::SQVotingService_IsAnyVoteInProgress Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVotingService.IsEndMatchVoteInProgress
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVotingService::IsEndMatchVoteInProgress(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQVotingService", "IsEndMatchVoteInProgress");

	Params::SQVotingService_IsEndMatchVoteInProgress Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVotingService.IsFactionVoteId
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             InVoteId                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutTeamId                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVotingService::IsFactionVoteId(const class FName& InVoteId, int32* OutTeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQVotingService", "IsFactionVoteId");

	Params::SQVotingService_IsFactionVoteId Parms{};

	Parms.InVoteId = InVoteId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTeamId != nullptr)
		*OutTeamId = Parms.OutTeamId;

	return Parms.ReturnValue;
}


// Function Squad.SQVotingService.IsFactionVoteInProgress
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamId                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVotingService::IsFactionVoteInProgress(const class UObject* WorldContextObject, const int32 TeamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQVotingService", "IsFactionVoteInProgress");

	Params::SQVotingService_IsFactionVoteInProgress Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.TeamId = TeamId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVotingService.IsGenericVoteInProgress
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVotingService::IsGenericVoteInProgress(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQVotingService", "IsGenericVoteInProgress");

	Params::SQVotingService_IsGenericVoteInProgress Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVotingService.IsLayerVoteId
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             InVoteId                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVotingService::IsLayerVoteId(const class FName& InVoteId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQVotingService", "IsLayerVoteId");

	Params::SQVotingService_IsLayerVoteId Parms{};

	Parms.InVoteId = InVoteId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVotingService.IsLayerVoteInProgress
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVotingService::IsLayerVoteInProgress(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQVotingService", "IsLayerVoteInProgress");

	Params::SQVotingService_IsLayerVoteInProgress Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVotingService.IsLevelVoteId
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             InVoteId                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVotingService::IsLevelVoteId(const class FName& InVoteId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQVotingService", "IsLevelVoteId");

	Params::SQVotingService_IsLevelVoteId Parms{};

	Parms.InVoteId = InVoteId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVotingService.IsLevelVoteInProgress
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVotingService::IsLevelVoteInProgress(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQVotingService", "IsLevelVoteInProgress");

	Params::SQVotingService_IsLevelVoteInProgress Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVotingService.IsUsingFactionVote
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVotingService::IsUsingFactionVote(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQVotingService", "IsUsingFactionVote");

	Params::SQVotingService_IsUsingFactionVote Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVotingService.IsUsingLayerVote
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVotingService::IsUsingLayerVote(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQVotingService", "IsUsingLayerVote");

	Params::SQVotingService_IsUsingLayerVote Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVotingService.IsUsingLevelVote
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVotingService::IsUsingLevelVote(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQVotingService", "IsUsingLevelVote");

	Params::SQVotingService_IsUsingLevelVote Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVotingService.JoinPlayerToCurrentVotes
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                NewPlayer                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVotingService::JoinPlayerToCurrentVotes(const class UObject* WorldContextObject, class APlayerController* NewPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQVotingService", "JoinPlayerToCurrentVotes");

	Params::SQVotingService_JoinPlayerToCurrentVotes Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.NewPlayer = NewPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVotingService.RemovePlayerFromCurrentVotes
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                LeavingPlayer                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVotingService::RemovePlayerFromCurrentVotes(const class UObject* WorldContextObject, class APlayerController* LeavingPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQVotingService", "RemovePlayerFromCurrentVotes");

	Params::SQVotingService_RemovePlayerFromCurrentVotes Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LeavingPlayer = LeavingPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVotingService.StartVote_FactionSetup
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TeamId                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USQFactionSetup*>          InFactionsSetups                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class USQVoteSessionAuthority*          OutAuthoritySession                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVotingService::StartVote_FactionSetup(const class UObject* WorldContextObject, const int32 TeamId, const TArray<class USQFactionSetup*>& InFactionsSetups, class USQVoteSessionAuthority** OutAuthoritySession)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQVotingService", "StartVote_FactionSetup");

	Params::SQVotingService_StartVote_FactionSetup Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.TeamId = TeamId;
	Parms.InFactionsSetups = std::move(InFactionsSetups);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAuthoritySession != nullptr)
		*OutAuthoritySession = Parms.OutAuthoritySession;

	return Parms.ReturnValue;
}


// Function Squad.SQVotingService.StartVote_FullSequence
// (Final, BlueprintAuthorityOnly, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVotingService::StartVote_FullSequence(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQVotingService", "StartVote_FullSequence");

	Params::SQVotingService_StartVote_FullSequence Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVotingService.StartVote_Generic
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQVoteConfig                    InVoteConfig                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FSQChoice>                InChoices                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class USQVoteSessionAuthority*          OutAuthoritySession                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVotingService::StartVote_Generic(const class UObject* WorldContextObject, const struct FSQVoteConfig& InVoteConfig, const TArray<struct FSQChoice>& InChoices, class USQVoteSessionAuthority** OutAuthoritySession)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQVotingService", "StartVote_Generic");

	Params::SQVotingService_StartVote_Generic Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InVoteConfig = std::move(InVoteConfig);
	Parms.InChoices = std::move(InChoices);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAuthoritySession != nullptr)
		*OutAuthoritySession = Parms.OutAuthoritySession;

	return Parms.ReturnValue;
}


// Function Squad.SQVotingService.StartVote_Layer
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USQLayer*>                 InLayers                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class USQVoteSessionAuthority*          OutAuthoritySession                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVotingService::StartVote_Layer(const class UObject* WorldContextObject, const TArray<class USQLayer*>& InLayers, class USQVoteSessionAuthority** OutAuthoritySession)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQVotingService", "StartVote_Layer");

	Params::SQVotingService_StartVote_Layer Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InLayers = std::move(InLayers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAuthoritySession != nullptr)
		*OutAuthoritySession = Parms.OutAuthoritySession;

	return Parms.ReturnValue;
}


// Function Squad.SQVotingService.StartVote_Level
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USQLevel*>                 InLevels                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class USQVoteSessionAuthority*          OutAuthoritySession                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVotingService::StartVote_Level(const class UObject* WorldContextObject, const TArray<class USQLevel*>& InLevels, class USQVoteSessionAuthority** OutAuthoritySession)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQVotingService", "StartVote_Level");

	Params::SQVotingService_StartVote_Level Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InLevels = std::move(InLevels);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAuthoritySession != nullptr)
		*OutAuthoritySession = Parms.OutAuthoritySession;

	return Parms.ReturnValue;
}


// Function Squad.SQVotingState.ApplySlomoFactor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   TimeDilationFactor                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVotingState::ApplySlomoFactor(float TimeDilationFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVotingState", "ApplySlomoFactor");

	Params::SQVotingState_ApplySlomoFactor Parms{};

	Parms.TimeDilationFactor = TimeDilationFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVotingState.HandleSequenceResult
// (Final, Native, Public, HasOutParams)
// Parameters:
// class USQVoteSession*                   VoteSession                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQChoice                        Winner                                                 (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USQVotingState::HandleSequenceResult(class USQVoteSession* VoteSession, const struct FSQChoice& Winner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVotingState", "HandleSequenceResult");

	Params::SQVotingState_HandleSequenceResult Parms{};

	Parms.VoteSession = VoteSession;
	Parms.Winner = std::move(Winner);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVotingState.JoinPlayerToCurrentVotes
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                NewPlayer                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVotingState::JoinPlayerToCurrentVotes(class APlayerController* NewPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVotingState", "JoinPlayerToCurrentVotes");

	Params::SQVotingState_JoinPlayerToCurrentVotes Parms{};

	Parms.NewPlayer = NewPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVotingState.LoadConfigSettings
// (Final, Native, Private)

void USQVotingState::LoadConfigSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVotingState", "LoadConfigSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVotingState.OnRep_LayerResult
// (Final, Native, Public)

void USQVotingState::OnRep_LayerResult()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVotingState", "OnRep_LayerResult");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVotingState.PlayCurrentSequenceIndex
// (Final, Native, Public)

void USQVotingState::PlayCurrentSequenceIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVotingState", "PlayCurrentSequenceIndex");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVotingState.RemovePlayerFromCurrentVotes
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                LeavingPlayer                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVotingState::RemovePlayerFromCurrentVotes(class APlayerController* LeavingPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVotingState", "RemovePlayerFromCurrentVotes");

	Params::SQVotingState_RemovePlayerFromCurrentVotes Parms{};

	Parms.LeavingPlayer = LeavingPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVotingState.StartFullSequenceVote
// (Final, Native, Public, BlueprintCallable)

void USQVotingState::StartFullSequenceVote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVotingState", "StartFullSequenceVote");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQVotingState.StartVote_FactionSetup
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   TeamId                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class USQFactionSetup*>          InFactionsSetups                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class USQVoteSessionAuthority*          OutAuthoritySession                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     OverrideIDs                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVotingState::StartVote_FactionSetup(const int32 TeamId, const TArray<class USQFactionSetup*>& InFactionsSetups, class USQVoteSessionAuthority** OutAuthoritySession, const TArray<class FName>& OverrideIDs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVotingState", "StartVote_FactionSetup");

	Params::SQVotingState_StartVote_FactionSetup Parms{};

	Parms.TeamId = TeamId;
	Parms.InFactionsSetups = std::move(InFactionsSetups);
	Parms.OverrideIDs = std::move(OverrideIDs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAuthoritySession != nullptr)
		*OutAuthoritySession = Parms.OutAuthoritySession;

	return Parms.ReturnValue;
}


// Function Squad.SQVotingState.StartVote_Generic
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSQVoteConfig                    InVoteConfig                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FSQChoice>                InChoices                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class USQVoteSessionAuthority*          OutAuthoritySession                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVotingState::StartVote_Generic(const struct FSQVoteConfig& InVoteConfig, const TArray<struct FSQChoice>& InChoices, class USQVoteSessionAuthority** OutAuthoritySession)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVotingState", "StartVote_Generic");

	Params::SQVotingState_StartVote_Generic Parms{};

	Parms.InVoteConfig = std::move(InVoteConfig);
	Parms.InChoices = std::move(InChoices);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAuthoritySession != nullptr)
		*OutAuthoritySession = Parms.OutAuthoritySession;

	return Parms.ReturnValue;
}


// Function Squad.SQVotingState.StartVote_Layer
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class USQLayer*>                 InLayers                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class USQVoteSessionAuthority*          OutAuthoritySession                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     OverrideIDs                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVotingState::StartVote_Layer(const TArray<class USQLayer*>& InLayers, class USQVoteSessionAuthority** OutAuthoritySession, const TArray<class FName>& OverrideIDs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVotingState", "StartVote_Layer");

	Params::SQVotingState_StartVote_Layer Parms{};

	Parms.InLayers = std::move(InLayers);
	Parms.OverrideIDs = std::move(OverrideIDs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAuthoritySession != nullptr)
		*OutAuthoritySession = Parms.OutAuthoritySession;

	return Parms.ReturnValue;
}


// Function Squad.SQVotingState.StartVote_Level
// (Final, BlueprintAuthorityOnly, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class USQLevel*>                 InLevels                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class USQVoteSessionAuthority*          OutAuthoritySession                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVotingState::StartVote_Level(const TArray<class USQLevel*>& InLevels, class USQVoteSessionAuthority** OutAuthoritySession)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVotingState", "StartVote_Level");

	Params::SQVotingState_StartVote_Level Parms{};

	Parms.InLevels = std::move(InLevels);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAuthoritySession != nullptr)
		*OutAuthoritySession = Parms.OutAuthoritySession;

	return Parms.ReturnValue;
}


// Function Squad.SQVotingState.GetLayersVotingPool
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// TArray<struct FSQLayerSettingsPair>     OutLayers                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   PoolSize                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQVotingState::GetLayersVotingPool(TArray<struct FSQLayerSettingsPair>* OutLayers, int32* PoolSize) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVotingState", "GetLayersVotingPool");

	Params::SQVotingState_GetLayersVotingPool Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutLayers != nullptr)
		*OutLayers = std::move(Parms.OutLayers);

	if (PoolSize != nullptr)
		*PoolSize = Parms.PoolSize;
}


// Function Squad.SQVotingState.HasAnyVoteInProgress
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQVotingState::HasAnyVoteInProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVotingState", "HasAnyVoteInProgress");

	Params::SQVotingState_HasAnyVoteInProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQWeaponAttachment_Scope.HideADSMesh
// (Final, Native, Public, BlueprintCallable)

void USQWeaponAttachment_Scope::HideADSMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeaponAttachment_Scope", "HideADSMesh");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeaponAttachment_Scope.SetMeshTransitionSetting
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSQMeshTransitionSettings        MeshTransitionSetting                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USQWeaponAttachment_Scope::SetMeshTransitionSetting(const struct FSQMeshTransitionSettings& MeshTransitionSetting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeaponAttachment_Scope", "SetMeshTransitionSetting");

	Params::SQWeaponAttachment_Scope_SetMeshTransitionSetting Parms{};

	Parms.MeshTransitionSetting = std::move(MeshTransitionSetting);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeaponAttachment_Scope.ShowADSMesh
// (Final, Native, Public, BlueprintCallable)

void USQWeaponAttachment_Scope::ShowADSMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeaponAttachment_Scope", "ShowADSMesh");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQItemSkinRestrictions.IsValidForCurrentConditions
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FSQItemSkinRestrictionParameters Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQItemSkinRestrictions::IsValidForCurrentConditions(const struct FSQItemSkinRestrictionParameters& Params_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQItemSkinRestrictions", "IsValidForCurrentConditions");

	Params::SQItemSkinRestrictions_IsValidForCurrentConditions Parms{};

	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQItemSkinRestrictions.OverrideConflictingSkins
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FSQItemSkinRestrictionParameters Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USQItemSkinRestrictions::OverrideConflictingSkins(const struct FSQItemSkinRestrictionParameters& Params_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQItemSkinRestrictions", "OverrideConflictingSkins");

	Params::SQItemSkinRestrictions_OverrideConflictingSkins Parms{};

	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQItemSkinSubsystem.GetFallbackRestrictionsObject
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class USQItemSkinRestrictions>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class USQItemSkinRestrictions> USQItemSkinSubsystem::GetFallbackRestrictionsObject() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQItemSkinSubsystem", "GetFallbackRestrictionsObject");

	Params::SQItemSkinSubsystem_GetFallbackRestrictionsObject Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQItemSkinSubsystem.GetSkinCollectionsForBundle
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class USQItemSkinCollection*>    OutputArray                                            (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class UODKBazaarItem*                   Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQItemSkinSubsystem::GetSkinCollectionsForBundle(TArray<class USQItemSkinCollection*>& OutputArray, class UODKBazaarItem* Item) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQItemSkinSubsystem", "GetSkinCollectionsForBundle");

	Params::SQItemSkinSubsystem_GetSkinCollectionsForBundle Parms{};

	Parms.OutputArray = std::move(OutputArray);
	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	OutputArray = std::move(Parms.OutputArray);

	return Parms.ReturnValue;
}


// Function Squad.SQItemSkinSubsystem.GetSkinDisplayClassForBundle
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UClass*                           OutputPtr                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UODKBazaarItem*                   Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQItemSkinSubsystem::GetSkinDisplayClassForBundle(class UClass** OutputPtr, class UODKBazaarItem* Item) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQItemSkinSubsystem", "GetSkinDisplayClassForBundle");

	Params::SQItemSkinSubsystem_GetSkinDisplayClassForBundle Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutputPtr != nullptr)
		*OutputPtr = Parms.OutputPtr;

	return Parms.ReturnValue;
}


// Function Squad.SQItemSkinSubsystem.GetSkinUIBadgeForKey
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Key                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCustomBadge                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSQSkinUIBadge                   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSQSkinUIBadge USQItemSkinSubsystem::GetSkinUIBadgeForKey(const class FName& Key, bool bCustomBadge) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQItemSkinSubsystem", "GetSkinUIBadgeForKey");

	Params::SQItemSkinSubsystem_GetSkinUIBadgeForKey Parms{};

	Parms.Key = Key;
	Parms.bCustomBadge = bCustomBadge;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQItemSkinSubsystem.GetSkinUIBadgesForKeys
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FName>                     Keys                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bCustomBadges                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FSQSkinUIBadge>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FSQSkinUIBadge> USQItemSkinSubsystem::GetSkinUIBadgesForKeys(const TArray<class FName>& Keys, bool bCustomBadges) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQItemSkinSubsystem", "GetSkinUIBadgesForKeys");

	Params::SQItemSkinSubsystem_GetSkinUIBadgesForKeys Parms{};

	Parms.Keys = std::move(Keys);
	Parms.bCustomBadges = bCustomBadges;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSkinBlueprintLibrary.AreAllSkinsOwned
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ASQPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     SkinNames                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSkinBlueprintLibrary::AreAllSkinsOwned(class ASQPlayerState* PlayerState, const TArray<class FName>& SkinNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSkinBlueprintLibrary", "AreAllSkinsOwned");

	Params::SQSkinBlueprintLibrary_AreAllSkinsOwned Parms{};

	Parms.PlayerState = PlayerState;
	Parms.SkinNames = std::move(SkinNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSkinBlueprintLibrary.AreAllSkinsUsableInContext
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ASQPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     SkinNames                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSkinBlueprintLibrary::AreAllSkinsUsableInContext(class ASQPlayerState* PlayerState, const TArray<class FName>& SkinNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSkinBlueprintLibrary", "AreAllSkinsUsableInContext");

	Params::SQSkinBlueprintLibrary_AreAllSkinsUsableInContext Parms{};

	Parms.PlayerState = PlayerState;
	Parms.SkinNames = std::move(SkinNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSkinBlueprintLibrary.AreSkinsUsingSameSkinSlot
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             Skin1                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Skin2                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSkinBlueprintLibrary::AreSkinsUsingSameSkinSlot(const class FName& Skin1, const class FName& Skin2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSkinBlueprintLibrary", "AreSkinsUsingSameSkinSlot");

	Params::SQSkinBlueprintLibrary_AreSkinsUsingSameSkinSlot Parms{};

	Parms.Skin1 = Skin1;
	Parms.Skin2 = Skin2;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSkinBlueprintLibrary.FilterSkinsOwned
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ASQPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     SkinNames                                              (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USQSkinBlueprintLibrary::FilterSkinsOwned(class ASQPlayerState* PlayerState, TArray<class FName>& SkinNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSkinBlueprintLibrary", "FilterSkinsOwned");

	Params::SQSkinBlueprintLibrary_FilterSkinsOwned Parms{};

	Parms.PlayerState = PlayerState;
	Parms.SkinNames = std::move(SkinNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SkinNames = std::move(Parms.SkinNames);
}


// Function Squad.SQSkinBlueprintLibrary.FilterSkinsUnowned
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ASQPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     SkinNames                                              (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USQSkinBlueprintLibrary::FilterSkinsUnowned(class ASQPlayerState* PlayerState, TArray<class FName>& SkinNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSkinBlueprintLibrary", "FilterSkinsUnowned");

	Params::SQSkinBlueprintLibrary_FilterSkinsUnowned Parms{};

	Parms.PlayerState = PlayerState;
	Parms.SkinNames = std::move(SkinNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SkinNames = std::move(Parms.SkinNames);
}


// Function Squad.SQSkinBlueprintLibrary.FilterSkinsUsableInContext
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ASQPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     SkinNames                                              (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USQSkinBlueprintLibrary::FilterSkinsUsableInContext(class ASQPlayerState* PlayerState, TArray<class FName>& SkinNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSkinBlueprintLibrary", "FilterSkinsUsableInContext");

	Params::SQSkinBlueprintLibrary_FilterSkinsUsableInContext Parms{};

	Parms.PlayerState = PlayerState;
	Parms.SkinNames = std::move(SkinNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SkinNames = std::move(Parms.SkinNames);
}


// Function Squad.SQSkinBlueprintLibrary.FilterSkinsUsingSameSkinSlots
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     SkinNames                                              (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USQSkinBlueprintLibrary::FilterSkinsUsingSameSkinSlots(TArray<class FName>& SkinNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSkinBlueprintLibrary", "FilterSkinsUsingSameSkinSlots");

	Params::SQSkinBlueprintLibrary_FilterSkinsUsingSameSkinSlots Parms{};

	Parms.SkinNames = std::move(SkinNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SkinNames = std::move(Parms.SkinNames);
}


// Function Squad.SQSkinBlueprintLibrary.FindSkin
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             SkinName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class USQItemSkinCollection*      ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class USQItemSkinCollection* USQSkinBlueprintLibrary::FindSkin(const class FName& SkinName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSkinBlueprintLibrary", "FindSkin");

	Params::SQSkinBlueprintLibrary_FindSkin Parms{};

	Parms.SkinName = SkinName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSkinBlueprintLibrary.GetAllSkinNames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> USQSkinBlueprintLibrary::GetAllSkinNames()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSkinBlueprintLibrary", "GetAllSkinNames");

	Params::SQSkinBlueprintLibrary_GetAllSkinNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSkinBlueprintLibrary.GetAllSkinsForFaction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WCO                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             FactionName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeIfNoFactions                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> USQSkinBlueprintLibrary::GetAllSkinsForFaction(class UObject* WCO, const class FName& FactionName, bool bIncludeIfNoFactions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSkinBlueprintLibrary", "GetAllSkinsForFaction");

	Params::SQSkinBlueprintLibrary_GetAllSkinsForFaction Parms{};

	Parms.WCO = WCO;
	Parms.FactionName = FactionName;
	Parms.bIncludeIfNoFactions = bIncludeIfNoFactions;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSkinBlueprintLibrary.GetIsSkinEnabledForFaction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             Faction                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SkinName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSkinBlueprintLibrary::GetIsSkinEnabledForFaction(const class FName& Faction, const class FName& SkinName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSkinBlueprintLibrary", "GetIsSkinEnabledForFaction");

	Params::SQSkinBlueprintLibrary_GetIsSkinEnabledForFaction Parms{};

	Parms.Faction = Faction;
	Parms.SkinName = SkinName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSkinBlueprintLibrary.GetSkinDataTable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UDataTable*                 ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UDataTable* USQSkinBlueprintLibrary::GetSkinDataTable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSkinBlueprintLibrary", "GetSkinDataTable");

	Params::SQSkinBlueprintLibrary_GetSkinDataTable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSkinBlueprintLibrary.GetUserInterfacePreviewWeapon
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSQItemSkinSlot                  SkinSlot                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftClassPtr<class UClass> USQSkinBlueprintLibrary::GetUserInterfacePreviewWeapon(const struct FSQItemSkinSlot& SkinSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSkinBlueprintLibrary", "GetUserInterfacePreviewWeapon");

	Params::SQSkinBlueprintLibrary_GetUserInterfacePreviewWeapon Parms{};

	Parms.SkinSlot = std::move(SkinSlot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSkinBlueprintLibrary.IsSkinOwned
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ASQPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SkinName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSkinBlueprintLibrary::IsSkinOwned(class ASQPlayerState* PlayerState, const class FName& SkinName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSkinBlueprintLibrary", "IsSkinOwned");

	Params::SQSkinBlueprintLibrary_IsSkinOwned Parms{};

	Parms.PlayerState = PlayerState;
	Parms.SkinName = SkinName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSkinBlueprintLibrary.IsSkinUsableInContext
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ASQPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SkinName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQSkinBlueprintLibrary::IsSkinUsableInContext(class ASQPlayerState* PlayerState, const class FName& SkinName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSkinBlueprintLibrary", "IsSkinUsableInContext");

	Params::SQSkinBlueprintLibrary_IsSkinUsableInContext Parms{};

	Parms.PlayerState = PlayerState;
	Parms.SkinName = SkinName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQSkinBlueprintLibrary.SetSkinEnabledForFaction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ASQPlayerState*                   PlayerState                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Faction                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SkinName                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRemoveNonUniqueSkinGroups                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESQSkinEnableResult                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESQSkinEnableResult USQSkinBlueprintLibrary::SetSkinEnabledForFaction(class ASQPlayerState* PlayerState, const class FName& Faction, const class FName& SkinName, bool bEnable, bool bRemoveNonUniqueSkinGroups)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SQSkinBlueprintLibrary", "SetSkinEnabledForFaction");

	Params::SQSkinBlueprintLibrary_SetSkinEnabledForFaction Parms{};

	Parms.PlayerState = PlayerState;
	Parms.Faction = Faction;
	Parms.SkinName = SkinName;
	Parms.bEnable = bEnable;
	Parms.bRemoveNonUniqueSkinGroups = bRemoveNonUniqueSkinGroups;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQWeaponSkinWidget.OnHover
// (Final, Native, Public, BlueprintCallable)

void USQWeaponSkinWidget::OnHover()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeaponSkinWidget", "OnHover");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWeaponSkinWidget.IsNew
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQWeaponSkinWidget::IsNew() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeaponSkinWidget", "IsNew");

	Params::SQWeaponSkinWidget_IsNew Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQWeaponSkinWidget.IsOwned
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USQWeaponSkinWidget::IsOwned() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWeaponSkinWidget", "IsOwned");

	Params::SQWeaponSkinWidget_IsOwned Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQWidget_RadialWheel.GetCurrentSection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   CurrentAngle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQWidget_RadialWheel::GetCurrentSection(float CurrentAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWidget_RadialWheel", "GetCurrentSection");

	Params::SQWidget_RadialWheel_GetCurrentSection Parms{};

	Parms.CurrentAngle = CurrentAngle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQWidget_RadialWheel.GetSectionBounds
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InSectionCount                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USQWidget_RadialWheel::GetSectionBounds(int32 InSectionCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWidget_RadialWheel", "GetSectionBounds");

	Params::SQWidget_RadialWheel_GetSectionBounds Parms{};

	Parms.InSectionCount = InSectionCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWidget_RadialWheel.GetProperRotation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USQWidget_RadialWheel::GetProperRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWidget_RadialWheel", "GetProperRotation");

	Params::SQWidget_RadialWheel_GetProperRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQWorldSettings.SetMapTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture*                         Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASQWorldSettings::SetMapTexture(class UTexture* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWorldSettings", "SetMapTexture");

	Params::SQWorldSettings_SetMapTexture Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Squad.SQWorldSettings.CanSwitchTo3rdPerson
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASQWorldSettings::CanSwitchTo3rdPerson() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQWorldSettings", "CanSwitchTo3rdPerson");

	Params::SQWorldSettings_CanSwitchTo3rdPerson Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Squad.SQVehicleWreckTurretAmmocook.BlastTurret
// (Native, Public, BlueprintCallable)

void USQVehicleWreckTurretAmmocook::BlastTurret()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SQVehicleWreckTurretAmmocook", "BlastTurret");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

