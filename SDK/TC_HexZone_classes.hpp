#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TC_HexZone

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Squad_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass TC_HexZone.TC_HexZone_C
// 0x00A8 (0x02D0 - 0x0228)
class ATC_HexZone_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0228(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTextRenderComponent*                   TextRender;                                        // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USQCaptureZoneTCComponent*              SQCaptureZoneTC;                                   // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Hex;                                               // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MI_Hex;                                            // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Hex_Num;                                           // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F6A[0x4];                                     // 0x025C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             Flag_Info_Changed;                                 // 0x0260(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class ATC_HexZone_C*>                  Neighbour_Hexes;                                   // 0x0270(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	class ATC_HexGraph_C*                         TC_Graph;                                          // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UMaterialInterface*                     Material;                                          // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 Nearby_Zone_Team_Counts;                           // 0x0290(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	int32                                         Nearby_Hexes_Required_to_Cap;                      // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Locked;                                            // 0x02A4(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F6B[0x3];                                     // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  Touching_Anchor;                                   // 0x02A8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	bool                                          Is_Anchor;                                         // 0x02B8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          Protected;                                         // 0x02B9(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F6C[0x6];                                     // 0x02BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Protecting_Actor;                                  // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Protect_Neighbours;                            // 0x02C8(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void Flag_Info_Changed__DelegateSignature();
	void ExecuteUbergraph_TC_HexZone(int32 EntryPoint);
	void State_Changed_Notify(uint8 Team);
	void Protector_Destroyed(class AActor* Protector);
	void Make_Team_Neutral();
	void Make_Team_Two();
	void Make_Team_One();
	void State_Changed(class USQCaptureZoneComponent* CaptureZone, uint8 Team);
	void ReceiveTick(float DeltaSeconds);
	void Debug();
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void Refresh_Zone_Debug();
	void Init_Data();
	void Cache_Local_Hexes();
	void Refresh_Can_Cap();
	void Refresh_Local_Zones();
	void Calculate_Can_Capture(int32 Nearby_Zones, int32 Team, bool* Can_Capture);
	void Set_ID(int32 Param_Hex_Num);
	void Get_Protected_By_Neighbours(bool* Param_Protected);
	void Refresh_Protection();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TC_HexZone_C">();
	}
	static class ATC_HexZone_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATC_HexZone_C>();
	}
};
static_assert(alignof(ATC_HexZone_C) == 0x000008, "Wrong alignment on ATC_HexZone_C");
static_assert(sizeof(ATC_HexZone_C) == 0x0002D0, "Wrong size on ATC_HexZone_C");
static_assert(offsetof(ATC_HexZone_C, UberGraphFrame) == 0x000228, "Member 'ATC_HexZone_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ATC_HexZone_C, TextRender) == 0x000230, "Member 'ATC_HexZone_C::TextRender' has a wrong offset!");
static_assert(offsetof(ATC_HexZone_C, SQCaptureZoneTC) == 0x000238, "Member 'ATC_HexZone_C::SQCaptureZoneTC' has a wrong offset!");
static_assert(offsetof(ATC_HexZone_C, Arrow) == 0x000240, "Member 'ATC_HexZone_C::Arrow' has a wrong offset!");
static_assert(offsetof(ATC_HexZone_C, Hex) == 0x000248, "Member 'ATC_HexZone_C::Hex' has a wrong offset!");
static_assert(offsetof(ATC_HexZone_C, MI_Hex) == 0x000250, "Member 'ATC_HexZone_C::MI_Hex' has a wrong offset!");
static_assert(offsetof(ATC_HexZone_C, Hex_Num) == 0x000258, "Member 'ATC_HexZone_C::Hex_Num' has a wrong offset!");
static_assert(offsetof(ATC_HexZone_C, Flag_Info_Changed) == 0x000260, "Member 'ATC_HexZone_C::Flag_Info_Changed' has a wrong offset!");
static_assert(offsetof(ATC_HexZone_C, Neighbour_Hexes) == 0x000270, "Member 'ATC_HexZone_C::Neighbour_Hexes' has a wrong offset!");
static_assert(offsetof(ATC_HexZone_C, TC_Graph) == 0x000280, "Member 'ATC_HexZone_C::TC_Graph' has a wrong offset!");
static_assert(offsetof(ATC_HexZone_C, Material) == 0x000288, "Member 'ATC_HexZone_C::Material' has a wrong offset!");
static_assert(offsetof(ATC_HexZone_C, Nearby_Zone_Team_Counts) == 0x000290, "Member 'ATC_HexZone_C::Nearby_Zone_Team_Counts' has a wrong offset!");
static_assert(offsetof(ATC_HexZone_C, Nearby_Hexes_Required_to_Cap) == 0x0002A0, "Member 'ATC_HexZone_C::Nearby_Hexes_Required_to_Cap' has a wrong offset!");
static_assert(offsetof(ATC_HexZone_C, Locked) == 0x0002A4, "Member 'ATC_HexZone_C::Locked' has a wrong offset!");
static_assert(offsetof(ATC_HexZone_C, Touching_Anchor) == 0x0002A8, "Member 'ATC_HexZone_C::Touching_Anchor' has a wrong offset!");
static_assert(offsetof(ATC_HexZone_C, Is_Anchor) == 0x0002B8, "Member 'ATC_HexZone_C::Is_Anchor' has a wrong offset!");
static_assert(offsetof(ATC_HexZone_C, Protected) == 0x0002B9, "Member 'ATC_HexZone_C::Protected' has a wrong offset!");
static_assert(offsetof(ATC_HexZone_C, Protecting_Actor) == 0x0002C0, "Member 'ATC_HexZone_C::Protecting_Actor' has a wrong offset!");
static_assert(offsetof(ATC_HexZone_C, Can_Protect_Neighbours) == 0x0002C8, "Member 'ATC_HexZone_C::Can_Protect_Neighbours' has a wrong offset!");

}

