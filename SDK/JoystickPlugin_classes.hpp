#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: JoystickPlugin

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "JoystickPlugin_structs.hpp"


namespace SDK
{

// Class JoystickPlugin.JoystickFunctions
// 0x0000 (0x0028 - 0x0028)
class UJoystickFunctions final : public UObject
{
public:
	static struct FJoystickInfo GetJoystick(int32 DeviceID);
	static struct FJoystickState GetJoystickState(int32 DeviceID);
	static struct FJoystickState GetPreviousJoystickState(int32 DeviceID);
	static void IgnoreGameControllers(bool bIgnore);
	static int32 JoystickCount();
	static void MapJoystickDeviceToPlayer(int32 DeviceID, int32 Player);
	static struct FVector2D POVAxis(EJoystickPOVDirection Direction);
	static void RegisterForJoystickEvents(class UObject* Listener);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JoystickFunctions">();
	}
	static class UJoystickFunctions* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJoystickFunctions>();
	}
};
static_assert(alignof(UJoystickFunctions) == 0x000008, "Wrong alignment on UJoystickFunctions");
static_assert(sizeof(UJoystickFunctions) == 0x000028, "Wrong size on UJoystickFunctions");

// Class JoystickPlugin.JoystickInterface
// 0x0000 (0x0028 - 0x0028)
class IJoystickInterface final : public IInterface
{
public:
	void JoystickAxisChanged(int32 Axis, float Value, float ValuePrev, const struct FJoystickState& State, const struct FJoystickState& Prev);
	void JoystickBallMoved(int32 Ball, const struct FVector2D& Delta, const struct FJoystickState& State);
	void JoystickButtonPressed(int32 Button, const struct FJoystickState& State);
	void JoystickButtonReleased(int32 Button, const struct FJoystickState& State);
	void JoystickHatChanged(int32 Hat, EJoystickPOVDirection Value, const struct FJoystickState& State);
	void JoystickPluggedIn(int32 DeviceID);
	void JoystickUnplugged(int32 DeviceID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JoystickInterface">();
	}
	static class IJoystickInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IJoystickInterface>();
	}
};
static_assert(alignof(IJoystickInterface) == 0x000008, "Wrong alignment on IJoystickInterface");
static_assert(sizeof(IJoystickInterface) == 0x000028, "Wrong size on IJoystickInterface");

}

