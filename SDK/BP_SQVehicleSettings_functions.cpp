#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SQVehicleSettings

#include "Basic.hpp"

#include "BP_SQVehicleSettings_classes.hpp"
#include "BP_SQVehicleSettings_parameters.hpp"


namespace SDK
{

// Function BP_SQVehicleSettings.BP_SQVehicleSettings_C.TryGetVehicleWithBiome
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// ESQBiome                                Biome                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSoftClassPtr<class UClass>             OutVehicle                                             (Parm, OutParm, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_SQVehicleSettings_C::TryGetVehicleWithBiome(ESQBiome Biome, TSoftClassPtr<class UClass>* OutVehicle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQVehicleSettings_C", "TryGetVehicleWithBiome");

	Params::BP_SQVehicleSettings_C_TryGetVehicleWithBiome Parms{};

	Parms.Biome = Biome;

	UObject::ProcessEvent(Func, &Parms);

	if (OutVehicle != nullptr)
		*OutVehicle = Parms.OutVehicle;

	return Parms.ReturnValue;
}


// Function BP_SQVehicleSettings.BP_SQVehicleSettings_C.GetVehicleEntry
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FSQVehicleEntry                  VehicleEntry                                           (Parm, OutParm, HasGetValueTypeHash)

void UBP_SQVehicleSettings_C::GetVehicleEntry(bool* Success, struct FSQVehicleEntry* VehicleEntry) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQVehicleSettings_C", "GetVehicleEntry");

	Params::BP_SQVehicleSettings_C_GetVehicleEntry Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (VehicleEntry != nullptr)
		*VehicleEntry = std::move(Parms.VehicleEntry);
}


// Function BP_SQVehicleSettings.BP_SQVehicleSettings_C.TryGetVehicleWithLayer
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class USQLayer*                         InLayer                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TSoftClassPtr<class UClass>             OutVehicle                                             (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_SQVehicleSettings_C::TryGetVehicleWithLayer(const class USQLayer* InLayer, TSoftClassPtr<class UClass>* OutVehicle) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQVehicleSettings_C", "TryGetVehicleWithLayer");

	Params::BP_SQVehicleSettings_C_TryGetVehicleWithLayer Parms{};

	Parms.InLayer = InLayer;

	UObject::ProcessEvent(Func, &Parms);

	if (OutVehicle != nullptr)
		*OutVehicle = Parms.OutVehicle;

	return Parms.ReturnValue;
}


// Function BP_SQVehicleSettings.BP_SQVehicleSettings_C.HasTag
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// ESQVehicleTag                           InTag                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Out_HasTag                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_SQVehicleSettings_C::HasTag(ESQVehicleTag InTag, bool* Out_HasTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQVehicleSettings_C", "HasTag");

	Params::BP_SQVehicleSettings_C_HasTag Parms{};

	Parms.InTag = InTag;

	UObject::ProcessEvent(Func, &Parms);

	if (Out_HasTag != nullptr)
		*Out_HasTag = Parms.Out_HasTag;
}


// Function BP_SQVehicleSettings.BP_SQVehicleSettings_C.HasTags
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TArray<ESQVehicleTag>                   InTags                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    InAll                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Out_HasTag                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_SQVehicleSettings_C::HasTags(TArray<ESQVehicleTag>& InTags, bool InAll, bool* Out_HasTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQVehicleSettings_C", "HasTags");

	Params::BP_SQVehicleSettings_C_HasTags Parms{};

	Parms.InTags = std::move(InTags);
	Parms.InAll = InAll;

	UObject::ProcessEvent(Func, &Parms);

	InTags = std::move(Parms.InTags);

	if (Out_HasTag != nullptr)
		*Out_HasTag = Parms.Out_HasTag;
}


// Function BP_SQVehicleSettings.BP_SQVehicleSettings_C.ShouldCauseSieged
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ASQGameSpawn*                     Spawn                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool UBP_SQVehicleSettings_C::ShouldCauseSieged(const class ASQGameSpawn* Spawn) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SQVehicleSettings_C", "ShouldCauseSieged");

	Params::BP_SQVehicleSettings_C_ShouldCauseSieged Parms{};

	Parms.Spawn = Spawn;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

