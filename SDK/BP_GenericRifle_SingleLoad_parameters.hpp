#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GenericRifle_SingleLoad

#include "Basic.hpp"

#include "Squad_structs.hpp"
#include "BP_WeaponSoldier1p3pMontages_structs.hpp"


namespace SDK::Params
{

// Function BP_GenericRifle_SingleLoad.BP_GenericRifle_SingleLoad_C.ExecuteUbergraph_BP_GenericRifle_SingleLoad
// 0x0008 (0x0008 - 0x0000)
struct BP_GenericRifle_SingleLoad_C_ExecuteUbergraph_BP_GenericRifle_SingleLoad final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GenericRifle_SingleLoad_C_ExecuteUbergraph_BP_GenericRifle_SingleLoad) == 0x000004, "Wrong alignment on BP_GenericRifle_SingleLoad_C_ExecuteUbergraph_BP_GenericRifle_SingleLoad");
static_assert(sizeof(BP_GenericRifle_SingleLoad_C_ExecuteUbergraph_BP_GenericRifle_SingleLoad) == 0x000008, "Wrong size on BP_GenericRifle_SingleLoad_C_ExecuteUbergraph_BP_GenericRifle_SingleLoad");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_ExecuteUbergraph_BP_GenericRifle_SingleLoad, EntryPoint) == 0x000000, "Member 'BP_GenericRifle_SingleLoad_C_ExecuteUbergraph_BP_GenericRifle_SingleLoad::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_ExecuteUbergraph_BP_GenericRifle_SingleLoad, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'BP_GenericRifle_SingleLoad_C_ExecuteUbergraph_BP_GenericRifle_SingleLoad::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function BP_GenericRifle_SingleLoad.BP_GenericRifle_SingleLoad_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_GenericRifle_SingleLoad_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GenericRifle_SingleLoad_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_GenericRifle_SingleLoad_C_ReceiveTick");
static_assert(sizeof(BP_GenericRifle_SingleLoad_C_ReceiveTick) == 0x000004, "Wrong size on BP_GenericRifle_SingleLoad_C_ReceiveTick");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_GenericRifle_SingleLoad_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_GenericRifle_SingleLoad.BP_GenericRifle_SingleLoad_C.BP_UpdateSingleRoundReloadAnimation
// 0x00E0 (0x00E0 - 0x0000)
struct BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation final
{
public:
	bool                                          BP_bLoadingFullMag;                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C70[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BP_RoundsToFill;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BP_CachedRoundsLeftOnSoldier;                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C71[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C72[0x2];                                     // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQMagazineData                        CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(NoDestructor)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C73[0x2];                                     // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Min_ReturnValue;                          // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_BoolToInt_ReturnValue;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C74[0x3];                                     // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQMagazineData                        CallFunc_Array_Get_Item_1;                         // 0x0038(0x0008)(NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C75[0x3];                                     // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C76[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Min_ReturnValue_1;                        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default;                             // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_MagazineHasAmmo_ReturnValue;              // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C77[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQMagazineData                        CallFunc_Array_Get_Item_2;                         // 0x0064(0x0008)(NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C78[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C79[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C7A[0x6];                                     // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USQItemStaticInfo*                      CallFunc_GetItemStaticInfo_ReturnValue;            // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C7B[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GenericWeapon_SingleLoad_StaticInfo_C* K2Node_DynamicCast_AsBP_Generic_Weapon_Single_Load_Static_Info; // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C7C[0x6];                                     // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBP_WeaponSoldier1p3pMontages          CallFunc_Array_Get_Item_3;                         // 0x00A8(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation) == 0x000008, "Wrong alignment on BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation");
static_assert(sizeof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation) == 0x0000E0, "Wrong size on BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, BP_bLoadingFullMag) == 0x000000, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::BP_bLoadingFullMag' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, BP_RoundsToFill) == 0x000004, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::BP_RoundsToFill' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, BP_CachedRoundsLeftOnSoldier) == 0x000008, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::BP_CachedRoundsLeftOnSoldier' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, Temp_bool_True_if_break_was_hit_Variable) == 0x00000C, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, Temp_int_Array_Index_Variable) == 0x000010, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, CallFunc_Greater_IntInt_ReturnValue) == 0x000014, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, CallFunc_Not_PreBool_ReturnValue) == 0x000015, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000024, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, CallFunc_BooleanAND_ReturnValue) == 0x000025, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, CallFunc_Min_ReturnValue) == 0x00002C, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::CallFunc_Min_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, CallFunc_Conv_BoolToInt_ReturnValue) == 0x000030, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::CallFunc_Conv_BoolToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000034, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, CallFunc_Array_Get_Item_1) == 0x000038, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, CallFunc_BooleanOR_ReturnValue) == 0x000040, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, CallFunc_Add_IntInt_ReturnValue_1) == 0x000044, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, Temp_int_Variable) == 0x000048, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, CallFunc_Subtract_IntInt_ReturnValue) == 0x00004C, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000050, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, Temp_bool_Variable) == 0x000054, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, CallFunc_Min_ReturnValue_1) == 0x000058, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::CallFunc_Min_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, K2Node_Select_Default) == 0x00005C, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, CallFunc_MagazineHasAmmo_ReturnValue) == 0x000060, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::CallFunc_MagazineHasAmmo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, CallFunc_Array_Get_Item_2) == 0x000064, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, CallFunc_Array_Length_ReturnValue) == 0x00006C, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, CallFunc_Less_IntInt_ReturnValue) == 0x000070, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, CallFunc_Add_IntInt_ReturnValue_2) == 0x000074, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, CallFunc_BooleanAND_ReturnValue_1) == 0x000078, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x00007C, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000080, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x000081, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, CallFunc_GetItemStaticInfo_ReturnValue) == 0x000088, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::CallFunc_GetItemStaticInfo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, CallFunc_BooleanAND_ReturnValue_2) == 0x000090, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, K2Node_DynamicCast_AsBP_Generic_Weapon_Single_Load_Static_Info) == 0x000098, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::K2Node_DynamicCast_AsBP_Generic_Weapon_Single_Load_Static_Info' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, K2Node_DynamicCast_bSuccess) == 0x0000A0, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0000A1, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation, CallFunc_Array_Get_Item_3) == 0x0000A8, "Member 'BP_GenericRifle_SingleLoad_C_BP_UpdateSingleRoundReloadAnimation::CallFunc_Array_Get_Item_3' has a wrong offset!");

}

