#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_RadialTimer

#include "Basic.hpp"

#include "W_RadialTimer_classes.hpp"
#include "W_RadialTimer_parameters.hpp"


namespace SDK
{

// Function W_RadialTimer.W_RadialTimer_C.ExecuteUbergraph_W_RadialTimer
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_RadialTimer_C::ExecuteUbergraph_W_RadialTimer(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RadialTimer_C", "ExecuteUbergraph_W_RadialTimer");

	Params::W_RadialTimer_C_ExecuteUbergraph_W_RadialTimer Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_RadialTimer.W_RadialTimer_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UW_RadialTimer_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RadialTimer_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_RadialTimer.W_RadialTimer_C.BPOnTimerCanceled
// (Event, Public, BlueprintEvent)

void UW_RadialTimer_C::BPOnTimerCanceled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RadialTimer_C", "BPOnTimerCanceled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_RadialTimer.W_RadialTimer_C.BPOnTimerProgress
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   RemainingPct                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_RadialTimer_C::BPOnTimerProgress(float RemainingPct)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RadialTimer_C", "BPOnTimerProgress");

	Params::W_RadialTimer_C_BPOnTimerProgress Parms{};

	Parms.RemainingPct = RemainingPct;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_RadialTimer.W_RadialTimer_C.BPOnTimerStarted
// (Event, Public, BlueprintEvent)

void UW_RadialTimer_C::BPOnTimerStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RadialTimer_C", "BPOnTimerStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_RadialTimer.W_RadialTimer_C.SetProgress
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ProgressPct                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_RadialTimer_C::SetProgress(float ProgressPct)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_RadialTimer_C", "SetProgress");

	Params::W_RadialTimer_C_SetProgress Parms{};

	Parms.ProgressPct = ProgressPct;

	UObject::ProcessEvent(Func, &Parms);
}

}

