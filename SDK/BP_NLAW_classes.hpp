#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NLAW

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_GenericRocketLauncher_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_NLAW.BP_NLAW_C
// 0x0070 (0x0A60 - 0x09F0)
class ABP_NLAW_C final : public ABP_GenericRocketLauncher_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_NLAW_C;                          // 0x09E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_Pip_C*                              BP_Pip;                                            // 0x09F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   LensMesh;                                          // 0x09F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          InertiaTrackerActive;                              // 0x0A00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3001[0x7];                                     // 0x0A01(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 DirectionDeltasDegrees;                            // 0x0A08(0x0010)(Edit, BlueprintVisible)
	int32                                         MaxDeltasCount;                                    // 0x0A18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PreviousDirection;                                 // 0x0A1C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                New_Aim_Direction;                                 // 0x0A28(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3002[0x4];                                     // 0x0A34(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TurnrateSamplingTimer;                             // 0x0A38(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentIndex;                                      // 0x0A40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeviationPercentForStability;                      // 0x0A44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           StabilityCheckTimer;                               // 0x0A48(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLockedOnTarget;                                  // 0x0A50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3003[0x3];                                     // 0x0A51(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastAverageSpeed;                                  // 0x0A54(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         DeviationFromLastSpeed;                            // 0x0A58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_NLAW(int32 EntryPoint);
	void Abort();
	void UpdateInertiaTrackerStateOnServer(bool NewState);
	void StopModifyZeroing();
	void BlueprintOnZoom(bool bNewZoom);
	void TurnRateSampling();
	void LockOnTargetEvaluation();
	void GetNewAimDirection(struct FVector* Param_New_Aim_Direction, struct FVector* Aim_Point);
	void GetAverageRotationAnglePerSecond(float* Angle);
	void LogDirectionDeltaAngle(float Angle);
	void EstimateStability(bool* IsStable, float* DeviationPercent);
	void OnRep_LastAverageSpeed();
	void IsSoldierValid(bool* Result);
	void GetGuidanceEnabled(bool* bEnabled);
	void GetTargetAngularSpeedDegrees(float* Target_Angular_Speed);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_NLAW_C">();
	}
	static class ABP_NLAW_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_NLAW_C>();
	}
};
static_assert(alignof(ABP_NLAW_C) == 0x000010, "Wrong alignment on ABP_NLAW_C");
static_assert(sizeof(ABP_NLAW_C) == 0x000A60, "Wrong size on ABP_NLAW_C");
static_assert(offsetof(ABP_NLAW_C, UberGraphFrame_BP_NLAW_C) == 0x0009E8, "Member 'ABP_NLAW_C::UberGraphFrame_BP_NLAW_C' has a wrong offset!");
static_assert(offsetof(ABP_NLAW_C, BP_Pip) == 0x0009F0, "Member 'ABP_NLAW_C::BP_Pip' has a wrong offset!");
static_assert(offsetof(ABP_NLAW_C, LensMesh) == 0x0009F8, "Member 'ABP_NLAW_C::LensMesh' has a wrong offset!");
static_assert(offsetof(ABP_NLAW_C, InertiaTrackerActive) == 0x000A00, "Member 'ABP_NLAW_C::InertiaTrackerActive' has a wrong offset!");
static_assert(offsetof(ABP_NLAW_C, DirectionDeltasDegrees) == 0x000A08, "Member 'ABP_NLAW_C::DirectionDeltasDegrees' has a wrong offset!");
static_assert(offsetof(ABP_NLAW_C, MaxDeltasCount) == 0x000A18, "Member 'ABP_NLAW_C::MaxDeltasCount' has a wrong offset!");
static_assert(offsetof(ABP_NLAW_C, PreviousDirection) == 0x000A1C, "Member 'ABP_NLAW_C::PreviousDirection' has a wrong offset!");
static_assert(offsetof(ABP_NLAW_C, New_Aim_Direction) == 0x000A28, "Member 'ABP_NLAW_C::New_Aim_Direction' has a wrong offset!");
static_assert(offsetof(ABP_NLAW_C, TurnrateSamplingTimer) == 0x000A38, "Member 'ABP_NLAW_C::TurnrateSamplingTimer' has a wrong offset!");
static_assert(offsetof(ABP_NLAW_C, CurrentIndex) == 0x000A40, "Member 'ABP_NLAW_C::CurrentIndex' has a wrong offset!");
static_assert(offsetof(ABP_NLAW_C, DeviationPercentForStability) == 0x000A44, "Member 'ABP_NLAW_C::DeviationPercentForStability' has a wrong offset!");
static_assert(offsetof(ABP_NLAW_C, StabilityCheckTimer) == 0x000A48, "Member 'ABP_NLAW_C::StabilityCheckTimer' has a wrong offset!");
static_assert(offsetof(ABP_NLAW_C, IsLockedOnTarget) == 0x000A50, "Member 'ABP_NLAW_C::IsLockedOnTarget' has a wrong offset!");
static_assert(offsetof(ABP_NLAW_C, LastAverageSpeed) == 0x000A54, "Member 'ABP_NLAW_C::LastAverageSpeed' has a wrong offset!");
static_assert(offsetof(ABP_NLAW_C, DeviationFromLastSpeed) == 0x000A58, "Member 'ABP_NLAW_C::DeviationFromLastSpeed' has a wrong offset!");

}

