#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UMG_VoteBase

#include "Basic.hpp"

#include "Squad_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function UMG_VoteBase.UMG_VoteBase_C.ExecuteUbergraph_UMG_VoteBase
// 0x0078 (0x0078 - 0x0000)
struct UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41AE[0x2];                                     // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class USQVoteSessionClient*                   K2Node_Event_VoteSession_2;                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_VotePossible;                         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41AF[0x7];                                     // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQVoteSessionClient*                   K2Node_Event_VoteSession_1;                        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_PlayerCurrentVoteCount;               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41B0[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQVoteSessionClient*                   K2Node_Event_VoteSession;                          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSQChoice                              K2Node_Event_Winner;                               // 0x0030(0x0018)(NoDestructor)
	class FName                                   K2Node_Event_ChoiceID;                             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Activated;                            // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41B1[0x7];                                     // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USQVotingComponent*                     CallFunc_GetComponentByClass_ReturnValue;          // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41B2[0x1];                                     // 0x006B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetPlayerIdentifier_ReturnValue;          // 0x006C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase) == 0x000008, "Wrong alignment on UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase");
static_assert(sizeof(UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase) == 0x000078, "Wrong size on UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase");
static_assert(offsetof(UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase, EntryPoint) == 0x000000, "Member 'UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase, Temp_bool_Variable) == 0x000004, "Member 'UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase, Temp_byte_Variable) == 0x000005, "Member 'UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase, K2Node_Event_VoteSession_2) == 0x000008, "Member 'UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase::K2Node_Event_VoteSession_2' has a wrong offset!");
static_assert(offsetof(UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase, K2Node_Event_VotePossible) == 0x000010, "Member 'UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase::K2Node_Event_VotePossible' has a wrong offset!");
static_assert(offsetof(UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase, K2Node_Event_VoteSession_1) == 0x000018, "Member 'UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase::K2Node_Event_VoteSession_1' has a wrong offset!");
static_assert(offsetof(UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase, K2Node_Event_PlayerCurrentVoteCount) == 0x000020, "Member 'UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase::K2Node_Event_PlayerCurrentVoteCount' has a wrong offset!");
static_assert(offsetof(UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase, K2Node_Event_VoteSession) == 0x000028, "Member 'UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase::K2Node_Event_VoteSession' has a wrong offset!");
static_assert(offsetof(UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase, K2Node_Event_Winner) == 0x000030, "Member 'UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase::K2Node_Event_Winner' has a wrong offset!");
static_assert(offsetof(UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase, K2Node_Event_ChoiceID) == 0x000048, "Member 'UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase::K2Node_Event_ChoiceID' has a wrong offset!");
static_assert(offsetof(UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase, K2Node_Event_Activated) == 0x000050, "Member 'UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase::K2Node_Event_Activated' has a wrong offset!");
static_assert(offsetof(UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase, CallFunc_GetOwningPlayer_ReturnValue) == 0x000058, "Member 'UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase, CallFunc_GetComponentByClass_ReturnValue) == 0x000060, "Member 'UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase, Temp_byte_Variable_1) == 0x000068, "Member 'UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase, CallFunc_IsValid_ReturnValue) == 0x000069, "Member 'UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase, K2Node_Select_Default) == 0x00006A, "Member 'UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase, CallFunc_GetPlayerIdentifier_ReturnValue) == 0x00006C, "Member 'UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase::CallFunc_GetPlayerIdentifier_ReturnValue' has a wrong offset!");
static_assert(offsetof(UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase, CallFunc_NotEqual_NameName_ReturnValue) == 0x000074, "Member 'UMG_VoteBase_C_ExecuteUbergraph_UMG_VoteBase::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");

// Function UMG_VoteBase.UMG_VoteBase_C.SetVoteScreenActive
// 0x0001 (0x0001 - 0x0000)
struct UMG_VoteBase_C_SetVoteScreenActive final
{
public:
	bool                                          Activated;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UMG_VoteBase_C_SetVoteScreenActive) == 0x000001, "Wrong alignment on UMG_VoteBase_C_SetVoteScreenActive");
static_assert(sizeof(UMG_VoteBase_C_SetVoteScreenActive) == 0x000001, "Wrong size on UMG_VoteBase_C_SetVoteScreenActive");
static_assert(offsetof(UMG_VoteBase_C_SetVoteScreenActive, Activated) == 0x000000, "Member 'UMG_VoteBase_C_SetVoteScreenActive::Activated' has a wrong offset!");

// Function UMG_VoteBase.UMG_VoteBase_C.OnVoteUpdatedByID
// 0x0008 (0x0008 - 0x0000)
struct UMG_VoteBase_C_OnVoteUpdatedByID final
{
public:
	class FName                                   ChoiceId;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_VoteBase_C_OnVoteUpdatedByID) == 0x000004, "Wrong alignment on UMG_VoteBase_C_OnVoteUpdatedByID");
static_assert(sizeof(UMG_VoteBase_C_OnVoteUpdatedByID) == 0x000008, "Wrong size on UMG_VoteBase_C_OnVoteUpdatedByID");
static_assert(offsetof(UMG_VoteBase_C_OnVoteUpdatedByID, ChoiceId) == 0x000000, "Member 'UMG_VoteBase_C_OnVoteUpdatedByID::ChoiceId' has a wrong offset!");

// Function UMG_VoteBase.UMG_VoteBase_C.OnVoteEnded
// 0x0020 (0x0020 - 0x0000)
struct UMG_VoteBase_C_OnVoteEnded final
{
public:
	class USQVoteSessionClient*                   VoteSession;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSQChoice                              Winner;                                            // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(UMG_VoteBase_C_OnVoteEnded) == 0x000008, "Wrong alignment on UMG_VoteBase_C_OnVoteEnded");
static_assert(sizeof(UMG_VoteBase_C_OnVoteEnded) == 0x000020, "Wrong size on UMG_VoteBase_C_OnVoteEnded");
static_assert(offsetof(UMG_VoteBase_C_OnVoteEnded, VoteSession) == 0x000000, "Member 'UMG_VoteBase_C_OnVoteEnded::VoteSession' has a wrong offset!");
static_assert(offsetof(UMG_VoteBase_C_OnVoteEnded, Winner) == 0x000008, "Member 'UMG_VoteBase_C_OnVoteEnded::Winner' has a wrong offset!");

// Function UMG_VoteBase.UMG_VoteBase_C.OnVoteUpdated
// 0x0010 (0x0010 - 0x0000)
struct UMG_VoteBase_C_OnVoteUpdated final
{
public:
	class USQVoteSessionClient*                   VoteSession;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PlayerCurrentVoteCount;                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(UMG_VoteBase_C_OnVoteUpdated) == 0x000008, "Wrong alignment on UMG_VoteBase_C_OnVoteUpdated");
static_assert(sizeof(UMG_VoteBase_C_OnVoteUpdated) == 0x000010, "Wrong size on UMG_VoteBase_C_OnVoteUpdated");
static_assert(offsetof(UMG_VoteBase_C_OnVoteUpdated, VoteSession) == 0x000000, "Member 'UMG_VoteBase_C_OnVoteUpdated::VoteSession' has a wrong offset!");
static_assert(offsetof(UMG_VoteBase_C_OnVoteUpdated, PlayerCurrentVoteCount) == 0x000008, "Member 'UMG_VoteBase_C_OnVoteUpdated::PlayerCurrentVoteCount' has a wrong offset!");

// Function UMG_VoteBase.UMG_VoteBase_C.OnVoteStarted
// 0x0010 (0x0010 - 0x0000)
struct UMG_VoteBase_C_OnVoteStarted final
{
public:
	class USQVoteSessionClient*                   VoteSession;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VotePossible;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(UMG_VoteBase_C_OnVoteStarted) == 0x000008, "Wrong alignment on UMG_VoteBase_C_OnVoteStarted");
static_assert(sizeof(UMG_VoteBase_C_OnVoteStarted) == 0x000010, "Wrong size on UMG_VoteBase_C_OnVoteStarted");
static_assert(offsetof(UMG_VoteBase_C_OnVoteStarted, VoteSession) == 0x000000, "Member 'UMG_VoteBase_C_OnVoteStarted::VoteSession' has a wrong offset!");
static_assert(offsetof(UMG_VoteBase_C_OnVoteStarted, VotePossible) == 0x000008, "Member 'UMG_VoteBase_C_OnVoteStarted::VotePossible' has a wrong offset!");

}

