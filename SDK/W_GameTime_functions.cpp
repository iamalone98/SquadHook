#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_GameTime

#include "Basic.hpp"

#include "W_GameTime_classes.hpp"
#include "W_GameTime_parameters.hpp"


namespace SDK
{

// Function W_GameTime.W_GameTime_C.ExecuteUbergraph_W_GameTime
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_GameTime_C::ExecuteUbergraph_W_GameTime(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_GameTime_C", "ExecuteUbergraph_W_GameTime");

	Params::W_GameTime_C_ExecuteUbergraph_W_GameTime Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_GameTime.W_GameTime_C.Get Player State
// (BlueprintCallable, BlueprintEvent)

void UW_GameTime_C::Get_Player_State()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_GameTime_C", "Get Player State");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_GameTime.W_GameTime_C.OnTeamStateChangedEvent_Event_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ASQTeamState*                     OldTeam                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ASQTeamState*                     NewTeam                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UW_GameTime_C::OnTeamStateChangedEvent_Event_0(class ASQTeamState* OldTeam, class ASQTeamState* NewTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_GameTime_C", "OnTeamStateChangedEvent_Event_0");

	Params::W_GameTime_C_OnTeamStateChangedEvent_Event_0 Parms{};

	Parms.OldTeam = OldTeam;
	Parms.NewTeam = NewTeam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function W_GameTime.W_GameTime_C.Construct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)

void UW_GameTime_C::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_GameTime_C", "Construct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_GameTime.W_GameTime_C.Set Staging Text Prefix
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UW_GameTime_C::Set_Staging_Text_Prefix()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_GameTime_C", "Set Staging Text Prefix");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_GameTime.W_GameTime_C.Get Prep Zone
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UW_GameTime_C::Get_Prep_Zone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_GameTime_C", "Get Prep Zone");

	UObject::ProcessEvent(Func, nullptr);
}


// Function W_GameTime.W_GameTime_C.GetSeedingTextPrefix
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_GameStateSquad_Seed_C*        GameState                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             Stage                                                  (Parm, OutParm)
// class FText                             RemainingTime                                          (Parm, OutParm)

void UW_GameTime_C::GetSeedingTextPrefix(class ABP_GameStateSquad_Seed_C* GameState, class FText* Stage, class FText* RemainingTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("W_GameTime_C", "GetSeedingTextPrefix");

	Params::W_GameTime_C_GetSeedingTextPrefix Parms{};

	Parms.GameState = GameState;

	UObject::ProcessEvent(Func, &Parms);

	if (Stage != nullptr)
		*Stage = std::move(Parms.Stage);

	if (RemainingTime != nullptr)
		*RemainingTime = std::move(Parms.RemainingTime);
}

}

