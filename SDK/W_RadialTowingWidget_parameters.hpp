#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_RadialTowingWidget

#include "Basic.hpp"

#include "Squad_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function W_RadialTowingWidget.W_RadialTowingWidget_C.ExecuteUbergraph_W_RadialTowingWidget
// 0x0058 (0x0058 - 0x0000)
struct W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36D0[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQPlayerController*                    CallFunc_GetSquadPlayerController_Return_Value;    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUD*                                   CallFunc_GetHUD_ReturnValue;                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_HUD_C>            K2Node_DynamicCast_AsBPI_HUD;                      // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36D1[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBaseRadialMenu_C*                      CallFunc_Get_Radial_Menu_Radial_Menu;              // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CollectSoldierReference_Success;          // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36D2[0x2];                                     // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_Degrees;                        // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTeleportationValid_IsValid;             // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Is_Recovery_Method_Valid_ReturnValue;     // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CollectVehicleReference_Success;          // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36D3[0x2];                                     // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0048(0x0010)(ZeroConstructor, NoDestructor)
};
static_assert(alignof(W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget) == 0x000008, "Wrong alignment on W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget");
static_assert(sizeof(W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget) == 0x000058, "Wrong size on W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget");
static_assert(offsetof(W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget, EntryPoint) == 0x000000, "Member 'W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget, CallFunc_GetSquadPlayerController_Return_Value) == 0x000008, "Member 'W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget::CallFunc_GetSquadPlayerController_Return_Value' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget, CallFunc_GetHUD_ReturnValue) == 0x000010, "Member 'W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget::CallFunc_GetHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget, K2Node_DynamicCast_AsBPI_HUD) == 0x000018, "Member 'W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget::K2Node_DynamicCast_AsBPI_HUD' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget, CallFunc_Get_Radial_Menu_Radial_Menu) == 0x000030, "Member 'W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget::CallFunc_Get_Radial_Menu_Radial_Menu' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget, CallFunc_CollectSoldierReference_Success) == 0x000039, "Member 'W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget::CallFunc_CollectSoldierReference_Success' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget, K2Node_CustomEvent_Degrees) == 0x00003C, "Member 'W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget::K2Node_CustomEvent_Degrees' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget, CallFunc_IsTeleportationValid_IsValid) == 0x000040, "Member 'W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget::CallFunc_IsTeleportationValid_IsValid' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget, CallFunc_Not_PreBool_ReturnValue) == 0x000041, "Member 'W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget, CallFunc_IsValid_ReturnValue_1) == 0x000042, "Member 'W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget, CallFunc_Is_Recovery_Method_Valid_ReturnValue) == 0x000043, "Member 'W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget::CallFunc_Is_Recovery_Method_Valid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget, CallFunc_BooleanAND_ReturnValue) == 0x000044, "Member 'W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget, CallFunc_CollectVehicleReference_Success) == 0x000045, "Member 'W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget::CallFunc_CollectVehicleReference_Success' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget, K2Node_CreateDelegate_OutputDelegate) == 0x000048, "Member 'W_RadialTowingWidget_C_ExecuteUbergraph_W_RadialTowingWidget::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function W_RadialTowingWidget.W_RadialTowingWidget_C.AddEmergencyYaw
// 0x0004 (0x0004 - 0x0000)
struct W_RadialTowingWidget_C_AddEmergencyYaw final
{
public:
	float                                         Degrees;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RadialTowingWidget_C_AddEmergencyYaw) == 0x000004, "Wrong alignment on W_RadialTowingWidget_C_AddEmergencyYaw");
static_assert(sizeof(W_RadialTowingWidget_C_AddEmergencyYaw) == 0x000004, "Wrong size on W_RadialTowingWidget_C_AddEmergencyYaw");
static_assert(offsetof(W_RadialTowingWidget_C_AddEmergencyYaw, Degrees) == 0x000000, "Member 'W_RadialTowingWidget_C_AddEmergencyYaw::Degrees' has a wrong offset!");

// Function W_RadialTowingWidget.W_RadialTowingWidget_C.ComputeEmergencyYaw
// 0x000C (0x000C - 0x0000)
struct W_RadialTowingWidget_C_ComputeEmergencyYaw final
{
public:
	float                                         Degress;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RadialTowingWidget_C_ComputeEmergencyYaw) == 0x000004, "Wrong alignment on W_RadialTowingWidget_C_ComputeEmergencyYaw");
static_assert(sizeof(W_RadialTowingWidget_C_ComputeEmergencyYaw) == 0x00000C, "Wrong size on W_RadialTowingWidget_C_ComputeEmergencyYaw");
static_assert(offsetof(W_RadialTowingWidget_C_ComputeEmergencyYaw, Degress) == 0x000000, "Member 'W_RadialTowingWidget_C_ComputeEmergencyYaw::Degress' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_ComputeEmergencyYaw, CallFunc_Add_FloatFloat_ReturnValue) == 0x000004, "Member 'W_RadialTowingWidget_C_ComputeEmergencyYaw::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_ComputeEmergencyYaw, CallFunc_FClamp_ReturnValue) == 0x000008, "Member 'W_RadialTowingWidget_C_ComputeEmergencyYaw::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function W_RadialTowingWidget.W_RadialTowingWidget_C.CollectVehicleReference
// 0x0018 (0x0018 - 0x0000)
struct W_RadialTowingWidget_C_CollectVehicleReference final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36D4[0x5];                                     // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQVehicle*                             K2Node_DynamicCast_AsSQVehicle;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_RadialTowingWidget_C_CollectVehicleReference) == 0x000008, "Wrong alignment on W_RadialTowingWidget_C_CollectVehicleReference");
static_assert(sizeof(W_RadialTowingWidget_C_CollectVehicleReference) == 0x000018, "Wrong size on W_RadialTowingWidget_C_CollectVehicleReference");
static_assert(offsetof(W_RadialTowingWidget_C_CollectVehicleReference, Success) == 0x000000, "Member 'W_RadialTowingWidget_C_CollectVehicleReference::Success' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_CollectVehicleReference, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'W_RadialTowingWidget_C_CollectVehicleReference::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_CollectVehicleReference, CallFunc_IsValid_ReturnValue_1) == 0x000002, "Member 'W_RadialTowingWidget_C_CollectVehicleReference::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_CollectVehicleReference, K2Node_DynamicCast_AsSQVehicle) == 0x000008, "Member 'W_RadialTowingWidget_C_CollectVehicleReference::K2Node_DynamicCast_AsSQVehicle' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_CollectVehicleReference, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'W_RadialTowingWidget_C_CollectVehicleReference::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function W_RadialTowingWidget.W_RadialTowingWidget_C.CollectSoldierReference
// 0x0020 (0x0020 - 0x0000)
struct W_RadialTowingWidget_C_CollectSoldierReference final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36D5[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASQPlayerController*                    K2Node_DynamicCast_AsSQPlayer_Controller;          // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_RadialTowingWidget_C_CollectSoldierReference) == 0x000008, "Wrong alignment on W_RadialTowingWidget_C_CollectSoldierReference");
static_assert(sizeof(W_RadialTowingWidget_C_CollectSoldierReference) == 0x000020, "Wrong size on W_RadialTowingWidget_C_CollectSoldierReference");
static_assert(offsetof(W_RadialTowingWidget_C_CollectSoldierReference, Success) == 0x000000, "Member 'W_RadialTowingWidget_C_CollectSoldierReference::Success' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_CollectSoldierReference, CallFunc_GetOwningPlayer_ReturnValue) == 0x000008, "Member 'W_RadialTowingWidget_C_CollectSoldierReference::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_CollectSoldierReference, K2Node_DynamicCast_AsSQPlayer_Controller) == 0x000010, "Member 'W_RadialTowingWidget_C_CollectSoldierReference::K2Node_DynamicCast_AsSQPlayer_Controller' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_CollectSoldierReference, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'W_RadialTowingWidget_C_CollectSoldierReference::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function W_RadialTowingWidget.W_RadialTowingWidget_C.IsTeleportationValid
// 0x0005 (0x0005 - 0x0000)
struct W_RadialTowingWidget_C_IsTeleportationValid final
{
public:
	bool                                          IsValid;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_RadialTowingWidget_C_IsTeleportationValid) == 0x000001, "Wrong alignment on W_RadialTowingWidget_C_IsTeleportationValid");
static_assert(sizeof(W_RadialTowingWidget_C_IsTeleportationValid) == 0x000005, "Wrong size on W_RadialTowingWidget_C_IsTeleportationValid");
static_assert(offsetof(W_RadialTowingWidget_C_IsTeleportationValid, IsValid) == 0x000000, "Member 'W_RadialTowingWidget_C_IsTeleportationValid::IsValid' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_IsTeleportationValid, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'W_RadialTowingWidget_C_IsTeleportationValid::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_IsTeleportationValid, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000002, "Member 'W_RadialTowingWidget_C_IsTeleportationValid::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_IsTeleportationValid, CallFunc_BooleanOR_ReturnValue) == 0x000003, "Member 'W_RadialTowingWidget_C_IsTeleportationValid::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_IsTeleportationValid, CallFunc_BooleanOR_ReturnValue_1) == 0x000004, "Member 'W_RadialTowingWidget_C_IsTeleportationValid::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function W_RadialTowingWidget.W_RadialTowingWidget_C.SetupWaitDuration
// 0x0030 (0x0030 - 0x0000)
struct W_RadialTowingWidget_C_SetupWaitDuration final
{
public:
	class ASQGameState*                           CallFunc_GetSquadGameState_Return_Value;           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36D6[0x3];                                     // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetServerWorldTimeSeconds_ReturnValue;    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36D7[0x2];                                     // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue;                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RadialTowingWidget_C_SetupWaitDuration) == 0x000008, "Wrong alignment on W_RadialTowingWidget_C_SetupWaitDuration");
static_assert(sizeof(W_RadialTowingWidget_C_SetupWaitDuration) == 0x000030, "Wrong size on W_RadialTowingWidget_C_SetupWaitDuration");
static_assert(offsetof(W_RadialTowingWidget_C_SetupWaitDuration, CallFunc_GetSquadGameState_Return_Value) == 0x000000, "Member 'W_RadialTowingWidget_C_SetupWaitDuration::CallFunc_GetSquadGameState_Return_Value' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_SetupWaitDuration, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'W_RadialTowingWidget_C_SetupWaitDuration::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_SetupWaitDuration, CallFunc_GetServerWorldTimeSeconds_ReturnValue) == 0x00000C, "Member 'W_RadialTowingWidget_C_SetupWaitDuration::CallFunc_GetServerWorldTimeSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_SetupWaitDuration, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000010, "Member 'W_RadialTowingWidget_C_SetupWaitDuration::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_SetupWaitDuration, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000014, "Member 'W_RadialTowingWidget_C_SetupWaitDuration::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_SetupWaitDuration, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000018, "Member 'W_RadialTowingWidget_C_SetupWaitDuration::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_SetupWaitDuration, K2Node_SwitchEnum_CmpSuccess) == 0x000019, "Member 'W_RadialTowingWidget_C_SetupWaitDuration::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_SetupWaitDuration, CallFunc_Abs_ReturnValue) == 0x00001C, "Member 'W_RadialTowingWidget_C_SetupWaitDuration::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_SetupWaitDuration, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000020, "Member 'W_RadialTowingWidget_C_SetupWaitDuration::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_SetupWaitDuration, CallFunc_Add_FloatFloat_ReturnValue) == 0x000024, "Member 'W_RadialTowingWidget_C_SetupWaitDuration::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_SetupWaitDuration, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000028, "Member 'W_RadialTowingWidget_C_SetupWaitDuration::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");

// Function W_RadialTowingWidget.W_RadialTowingWidget_C.UpdateText
// 0x0078 (0x0078 - 0x0000)
struct W_RadialTowingWidget_C_UpdateText final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36D8[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_FloatToString_ReturnValue;           // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36D9[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0030(0x0018)()
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36DA[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x0060(0x0018)()
};
static_assert(alignof(W_RadialTowingWidget_C_UpdateText) == 0x000008, "Wrong alignment on W_RadialTowingWidget_C_UpdateText");
static_assert(sizeof(W_RadialTowingWidget_C_UpdateText) == 0x000078, "Wrong size on W_RadialTowingWidget_C_UpdateText");
static_assert(offsetof(W_RadialTowingWidget_C_UpdateText, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'W_RadialTowingWidget_C_UpdateText::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_UpdateText, CallFunc_Abs_ReturnValue) == 0x000004, "Member 'W_RadialTowingWidget_C_UpdateText::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_UpdateText, CallFunc_Conv_FloatToString_ReturnValue) == 0x000008, "Member 'W_RadialTowingWidget_C_UpdateText::CallFunc_Conv_FloatToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_UpdateText, CallFunc_Less_FloatFloat_ReturnValue) == 0x000018, "Member 'W_RadialTowingWidget_C_UpdateText::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_UpdateText, CallFunc_Concat_StrStr_ReturnValue) == 0x000020, "Member 'W_RadialTowingWidget_C_UpdateText::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_UpdateText, CallFunc_Conv_StringToText_ReturnValue) == 0x000030, "Member 'W_RadialTowingWidget_C_UpdateText::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_UpdateText, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000048, "Member 'W_RadialTowingWidget_C_UpdateText::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_UpdateText, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000058, "Member 'W_RadialTowingWidget_C_UpdateText::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_UpdateText, CallFunc_Conv_StringToText_ReturnValue_1) == 0x000060, "Member 'W_RadialTowingWidget_C_UpdateText::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");

// Function W_RadialTowingWidget.W_RadialTowingWidget_C.UpdateCentralButton
// 0x0024 (0x0024 - 0x0000)
struct W_RadialTowingWidget_C_UpdateCentralButton final
{
public:
	bool                                          CallFunc_IsTeleportationValid_IsValid;             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36DB[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue_1;                // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_RadialTowingWidget_C_UpdateCentralButton) == 0x000004, "Wrong alignment on W_RadialTowingWidget_C_UpdateCentralButton");
static_assert(sizeof(W_RadialTowingWidget_C_UpdateCentralButton) == 0x000024, "Wrong size on W_RadialTowingWidget_C_UpdateCentralButton");
static_assert(offsetof(W_RadialTowingWidget_C_UpdateCentralButton, CallFunc_IsTeleportationValid_IsValid) == 0x000000, "Member 'W_RadialTowingWidget_C_UpdateCentralButton::CallFunc_IsTeleportationValid_IsValid' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_UpdateCentralButton, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'W_RadialTowingWidget_C_UpdateCentralButton::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_UpdateCentralButton, CallFunc_SelectColor_ReturnValue) == 0x000004, "Member 'W_RadialTowingWidget_C_UpdateCentralButton::CallFunc_SelectColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_UpdateCentralButton, CallFunc_SelectColor_ReturnValue_1) == 0x000014, "Member 'W_RadialTowingWidget_C_UpdateCentralButton::CallFunc_SelectColor_ReturnValue_1' has a wrong offset!");

// Function W_RadialTowingWidget.W_RadialTowingWidget_C.Is Recovery Method Valid
// 0x0020 (0x0020 - 0x0000)
struct W_RadialTowingWidget_C_Is_Recovery_Method_Valid final
{
public:
	class ASQVehicle*                             Vehicle;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESQVehicleRecoveryMethod                      Method;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36DC[0x6];                                     // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USQVehicleEmergencyRecoveryComponent*   CallFunc_GetEmergencyRecoveryComponent_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Set_Contains_ReturnValue;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Set_Contains_ReturnValue_1;               // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(W_RadialTowingWidget_C_Is_Recovery_Method_Valid) == 0x000008, "Wrong alignment on W_RadialTowingWidget_C_Is_Recovery_Method_Valid");
static_assert(sizeof(W_RadialTowingWidget_C_Is_Recovery_Method_Valid) == 0x000020, "Wrong size on W_RadialTowingWidget_C_Is_Recovery_Method_Valid");
static_assert(offsetof(W_RadialTowingWidget_C_Is_Recovery_Method_Valid, Vehicle) == 0x000000, "Member 'W_RadialTowingWidget_C_Is_Recovery_Method_Valid::Vehicle' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_Is_Recovery_Method_Valid, Method) == 0x000008, "Member 'W_RadialTowingWidget_C_Is_Recovery_Method_Valid::Method' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_Is_Recovery_Method_Valid, ReturnValue) == 0x000009, "Member 'W_RadialTowingWidget_C_Is_Recovery_Method_Valid::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_Is_Recovery_Method_Valid, CallFunc_GetEmergencyRecoveryComponent_ReturnValue) == 0x000010, "Member 'W_RadialTowingWidget_C_Is_Recovery_Method_Valid::CallFunc_GetEmergencyRecoveryComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_Is_Recovery_Method_Valid, CallFunc_Set_Contains_ReturnValue) == 0x000018, "Member 'W_RadialTowingWidget_C_Is_Recovery_Method_Valid::CallFunc_Set_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_Is_Recovery_Method_Valid, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'W_RadialTowingWidget_C_Is_Recovery_Method_Valid::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_RadialTowingWidget_C_Is_Recovery_Method_Valid, CallFunc_Set_Contains_ReturnValue_1) == 0x00001A, "Member 'W_RadialTowingWidget_C_Is_Recovery_Method_Valid::CallFunc_Set_Contains_ReturnValue_1' has a wrong offset!");

}

