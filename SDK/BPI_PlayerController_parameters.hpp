#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_PlayerController

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Squad_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BPI_PlayerController.BPI_PlayerController_C.Trace Marker
// 0x0030 (0x0030 - 0x0000)
struct BPI_PlayerController_C_Trace_Marker final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USQMapMarkerDataAsset*                  Marker;                                            // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hotkey;                                            // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Emote;                                             // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46B3[0x6];                                     // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 MarkerClass;                                       // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerController_C_Trace_Marker) == 0x000008, "Wrong alignment on BPI_PlayerController_C_Trace_Marker");
static_assert(sizeof(BPI_PlayerController_C_Trace_Marker) == 0x000030, "Wrong size on BPI_PlayerController_C_Trace_Marker");
static_assert(offsetof(BPI_PlayerController_C_Trace_Marker, Start) == 0x000000, "Member 'BPI_PlayerController_C_Trace_Marker::Start' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_Trace_Marker, End) == 0x00000C, "Member 'BPI_PlayerController_C_Trace_Marker::End' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_Trace_Marker, Marker) == 0x000018, "Member 'BPI_PlayerController_C_Trace_Marker::Marker' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_Trace_Marker, Hotkey) == 0x000020, "Member 'BPI_PlayerController_C_Trace_Marker::Hotkey' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_Trace_Marker, Emote) == 0x000021, "Member 'BPI_PlayerController_C_Trace_Marker::Emote' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_Trace_Marker, MarkerClass) == 0x000028, "Member 'BPI_PlayerController_C_Trace_Marker::MarkerClass' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.Set Selected Marker
// 0x0008 (0x0008 - 0x0000)
struct BPI_PlayerController_C_Set_Selected_Marker final
{
public:
	class USQMapWidgetMapMarkerSelectable*        Marker_Ref;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerController_C_Set_Selected_Marker) == 0x000008, "Wrong alignment on BPI_PlayerController_C_Set_Selected_Marker");
static_assert(sizeof(BPI_PlayerController_C_Set_Selected_Marker) == 0x000008, "Wrong size on BPI_PlayerController_C_Set_Selected_Marker");
static_assert(offsetof(BPI_PlayerController_C_Set_Selected_Marker, Marker_Ref) == 0x000000, "Member 'BPI_PlayerController_C_Set_Selected_Marker::Marker_Ref' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.bCan Place Marker
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerController_C_bCan_Place_Marker final
{
public:
	bool                                          Can_Place;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerController_C_bCan_Place_Marker) == 0x000001, "Wrong alignment on BPI_PlayerController_C_bCan_Place_Marker");
static_assert(sizeof(BPI_PlayerController_C_bCan_Place_Marker) == 0x000001, "Wrong size on BPI_PlayerController_C_bCan_Place_Marker");
static_assert(offsetof(BPI_PlayerController_C_bCan_Place_Marker, Can_Place) == 0x000000, "Member 'BPI_PlayerController_C_bCan_Place_Marker::Can_Place' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.bCan Remove Marker
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerController_C_bCan_Remove_Marker final
{
public:
	bool                                          Can_Remove;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerController_C_bCan_Remove_Marker) == 0x000001, "Wrong alignment on BPI_PlayerController_C_bCan_Remove_Marker");
static_assert(sizeof(BPI_PlayerController_C_bCan_Remove_Marker) == 0x000001, "Wrong size on BPI_PlayerController_C_bCan_Remove_Marker");
static_assert(offsetof(BPI_PlayerController_C_bCan_Remove_Marker, Can_Remove) == 0x000000, "Member 'BPI_PlayerController_C_bCan_Remove_Marker::Can_Remove' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.SetAllowAdminCam
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerController_C_SetAllowAdminCam final
{
public:
	bool                                          bAllowAdminCam;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerController_C_SetAllowAdminCam) == 0x000001, "Wrong alignment on BPI_PlayerController_C_SetAllowAdminCam");
static_assert(sizeof(BPI_PlayerController_C_SetAllowAdminCam) == 0x000001, "Wrong size on BPI_PlayerController_C_SetAllowAdminCam");
static_assert(offsetof(BPI_PlayerController_C_SetAllowAdminCam, bAllowAdminCam) == 0x000000, "Member 'BPI_PlayerController_C_SetAllowAdminCam::bAllowAdminCam' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.Play Emote
// 0x000C (0x000C - 0x0000)
struct BPI_PlayerController_C_Play_Emote final
{
public:
	ESQEmotes                                     Emote;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46B4[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Param_Name;                                        // 0x0004(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerController_C_Play_Emote) == 0x000004, "Wrong alignment on BPI_PlayerController_C_Play_Emote");
static_assert(sizeof(BPI_PlayerController_C_Play_Emote) == 0x00000C, "Wrong size on BPI_PlayerController_C_Play_Emote");
static_assert(offsetof(BPI_PlayerController_C_Play_Emote, Emote) == 0x000000, "Member 'BPI_PlayerController_C_Play_Emote::Emote' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_Play_Emote, Param_Name) == 0x000004, "Member 'BPI_PlayerController_C_Play_Emote::Param_Name' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.Request Map Marker
// 0x0030 (0x0030 - 0x0000)
struct BPI_PlayerController_C_Request_Map_Marker final
{
public:
	int32                                         Squad_ID;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESQTeam                                       Team_ID;                                           // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46B5[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Fire_Team_ID;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector_NetQuantize                    Location;                                          // 0x000C(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	struct FVector_NetQuantize                    DistanceRotation;                                  // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46B6[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQMapMarkerDataAsset*                  Map_Marker_Data;                                   // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerController_C_Request_Map_Marker) == 0x000008, "Wrong alignment on BPI_PlayerController_C_Request_Map_Marker");
static_assert(sizeof(BPI_PlayerController_C_Request_Map_Marker) == 0x000030, "Wrong size on BPI_PlayerController_C_Request_Map_Marker");
static_assert(offsetof(BPI_PlayerController_C_Request_Map_Marker, Squad_ID) == 0x000000, "Member 'BPI_PlayerController_C_Request_Map_Marker::Squad_ID' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_Request_Map_Marker, Team_ID) == 0x000004, "Member 'BPI_PlayerController_C_Request_Map_Marker::Team_ID' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_Request_Map_Marker, Fire_Team_ID) == 0x000008, "Member 'BPI_PlayerController_C_Request_Map_Marker::Fire_Team_ID' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_Request_Map_Marker, Location) == 0x00000C, "Member 'BPI_PlayerController_C_Request_Map_Marker::Location' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_Request_Map_Marker, DistanceRotation) == 0x000018, "Member 'BPI_PlayerController_C_Request_Map_Marker::DistanceRotation' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_Request_Map_Marker, Map_Marker_Data) == 0x000028, "Member 'BPI_PlayerController_C_Request_Map_Marker::Map_Marker_Data' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.Request Marker
// 0x0020 (0x0020 - 0x0000)
struct BPI_PlayerController_C_Request_Marker final
{
public:
	class UClass*                                 Marker_Class;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Fire_Team_ID;                                      // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Emote;                                             // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerController_C_Request_Marker) == 0x000008, "Wrong alignment on BPI_PlayerController_C_Request_Marker");
static_assert(sizeof(BPI_PlayerController_C_Request_Marker) == 0x000020, "Wrong size on BPI_PlayerController_C_Request_Marker");
static_assert(offsetof(BPI_PlayerController_C_Request_Marker, Marker_Class) == 0x000000, "Member 'BPI_PlayerController_C_Request_Marker::Marker_Class' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_Request_Marker, Location) == 0x000008, "Member 'BPI_PlayerController_C_Request_Marker::Location' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_Request_Marker, Fire_Team_ID) == 0x000014, "Member 'BPI_PlayerController_C_Request_Marker::Fire_Team_ID' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_Request_Marker, Emote) == 0x000018, "Member 'BPI_PlayerController_C_Request_Marker::Emote' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.Remove Map Marker New
// 0x0001 (0x0001 - 0x0000)
struct BPI_PlayerController_C_Remove_Map_Marker_New final
{
public:
	uint8                                         MapMarkerID;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerController_C_Remove_Map_Marker_New) == 0x000001, "Wrong alignment on BPI_PlayerController_C_Remove_Map_Marker_New");
static_assert(sizeof(BPI_PlayerController_C_Remove_Map_Marker_New) == 0x000001, "Wrong size on BPI_PlayerController_C_Remove_Map_Marker_New");
static_assert(offsetof(BPI_PlayerController_C_Remove_Map_Marker_New, MapMarkerID) == 0x000000, "Member 'BPI_PlayerController_C_Remove_Map_Marker_New::MapMarkerID' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.Request Director Marker
// 0x0038 (0x0038 - 0x0000)
struct BPI_PlayerController_C_Request_Director_Marker final
{
public:
	class UClass*                                 Director_Marker;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0008(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                Scale;                                             // 0x0020(0x000C)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Distance;                                          // 0x002C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Squad_ID;                                          // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerController_C_Request_Director_Marker) == 0x000008, "Wrong alignment on BPI_PlayerController_C_Request_Director_Marker");
static_assert(sizeof(BPI_PlayerController_C_Request_Director_Marker) == 0x000038, "Wrong size on BPI_PlayerController_C_Request_Director_Marker");
static_assert(offsetof(BPI_PlayerController_C_Request_Director_Marker, Director_Marker) == 0x000000, "Member 'BPI_PlayerController_C_Request_Director_Marker::Director_Marker' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_Request_Director_Marker, Location) == 0x000008, "Member 'BPI_PlayerController_C_Request_Director_Marker::Location' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_Request_Director_Marker, Rotation) == 0x000014, "Member 'BPI_PlayerController_C_Request_Director_Marker::Rotation' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_Request_Director_Marker, Scale) == 0x000020, "Member 'BPI_PlayerController_C_Request_Director_Marker::Scale' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_Request_Director_Marker, Distance) == 0x00002C, "Member 'BPI_PlayerController_C_Request_Director_Marker::Distance' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_Request_Director_Marker, Squad_ID) == 0x000030, "Member 'BPI_PlayerController_C_Request_Director_Marker::Squad_ID' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.Request Command Marker
// 0x0050 (0x0050 - 0x0000)
struct BPI_PlayerController_C_Request_Command_Marker final
{
public:
	class UClass*                                 Command_Marker;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46B7[0x8];                                     // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         Distance;                                          // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerController_C_Request_Command_Marker) == 0x000010, "Wrong alignment on BPI_PlayerController_C_Request_Command_Marker");
static_assert(sizeof(BPI_PlayerController_C_Request_Command_Marker) == 0x000050, "Wrong size on BPI_PlayerController_C_Request_Command_Marker");
static_assert(offsetof(BPI_PlayerController_C_Request_Command_Marker, Command_Marker) == 0x000000, "Member 'BPI_PlayerController_C_Request_Command_Marker::Command_Marker' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_Request_Command_Marker, Transform) == 0x000010, "Member 'BPI_PlayerController_C_Request_Command_Marker::Transform' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_Request_Command_Marker, Distance) == 0x000040, "Member 'BPI_PlayerController_C_Request_Command_Marker::Distance' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.Get Last Selected Marker
// 0x0008 (0x0008 - 0x0000)
struct BPI_PlayerController_C_Get_Last_Selected_Marker final
{
public:
	class USQMapWidgetMapMarkerSelectable*        Marker;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerController_C_Get_Last_Selected_Marker) == 0x000008, "Wrong alignment on BPI_PlayerController_C_Get_Last_Selected_Marker");
static_assert(sizeof(BPI_PlayerController_C_Get_Last_Selected_Marker) == 0x000008, "Wrong size on BPI_PlayerController_C_Get_Last_Selected_Marker");
static_assert(offsetof(BPI_PlayerController_C_Get_Last_Selected_Marker, Marker) == 0x000000, "Member 'BPI_PlayerController_C_Get_Last_Selected_Marker::Marker' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.Get Command Action Condition
// 0x0008 (0x0008 - 0x0000)
struct BPI_PlayerController_C_Get_Command_Action_Condition final
{
public:
	class UClass*                                 Condition_Class;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerController_C_Get_Command_Action_Condition) == 0x000008, "Wrong alignment on BPI_PlayerController_C_Get_Command_Action_Condition");
static_assert(sizeof(BPI_PlayerController_C_Get_Command_Action_Condition) == 0x000008, "Wrong size on BPI_PlayerController_C_Get_Command_Action_Condition");
static_assert(offsetof(BPI_PlayerController_C_Get_Command_Action_Condition, Condition_Class) == 0x000000, "Member 'BPI_PlayerController_C_Get_Command_Action_Condition::Condition_Class' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.Accept Deny Command Request
// 0x0010 (0x0010 - 0x0000)
struct BPI_PlayerController_C_Accept_Deny_Command_Request final
{
public:
	class ABP_MapMarker_Command_Request_C*        Marker;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Accepted;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerController_C_Accept_Deny_Command_Request) == 0x000008, "Wrong alignment on BPI_PlayerController_C_Accept_Deny_Command_Request");
static_assert(sizeof(BPI_PlayerController_C_Accept_Deny_Command_Request) == 0x000010, "Wrong size on BPI_PlayerController_C_Accept_Deny_Command_Request");
static_assert(offsetof(BPI_PlayerController_C_Accept_Deny_Command_Request, Marker) == 0x000000, "Member 'BPI_PlayerController_C_Accept_Deny_Command_Request::Marker' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_Accept_Deny_Command_Request, Accepted) == 0x000008, "Member 'BPI_PlayerController_C_Accept_Deny_Command_Request::Accepted' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.Get Command Request Available
// 0x0008 (0x0008 - 0x0000)
struct BPI_PlayerController_C_Get_Command_Request_Available final
{
public:
	bool                                          Available;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46B8[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Remaining_Time;                                    // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_PlayerController_C_Get_Command_Request_Available) == 0x000004, "Wrong alignment on BPI_PlayerController_C_Get_Command_Request_Available");
static_assert(sizeof(BPI_PlayerController_C_Get_Command_Request_Available) == 0x000008, "Wrong size on BPI_PlayerController_C_Get_Command_Request_Available");
static_assert(offsetof(BPI_PlayerController_C_Get_Command_Request_Available, Available) == 0x000000, "Member 'BPI_PlayerController_C_Get_Command_Request_Available::Available' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_Get_Command_Request_Available, Remaining_Time) == 0x000004, "Member 'BPI_PlayerController_C_Get_Command_Request_Available::Remaining_Time' has a wrong offset!");

// Function BPI_PlayerController.BPI_PlayerController_C.bCanRemoveMapMarkerNew
// 0x0010 (0x0010 - 0x0000)
struct BPI_PlayerController_C_bCanRemoveMapMarkerNew final
{
public:
	class UBP_MapMarker_Selectable_C*             Map_Marker;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Remove;                                        // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_PlayerController_C_bCanRemoveMapMarkerNew) == 0x000008, "Wrong alignment on BPI_PlayerController_C_bCanRemoveMapMarkerNew");
static_assert(sizeof(BPI_PlayerController_C_bCanRemoveMapMarkerNew) == 0x000010, "Wrong size on BPI_PlayerController_C_bCanRemoveMapMarkerNew");
static_assert(offsetof(BPI_PlayerController_C_bCanRemoveMapMarkerNew, Map_Marker) == 0x000000, "Member 'BPI_PlayerController_C_bCanRemoveMapMarkerNew::Map_Marker' has a wrong offset!");
static_assert(offsetof(BPI_PlayerController_C_bCanRemoveMapMarkerNew, Can_Remove) == 0x000008, "Member 'BPI_PlayerController_C_bCanRemoveMapMarkerNew::Can_Remove' has a wrong offset!");

}

