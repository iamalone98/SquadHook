#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NLAW_Proj

#include "Basic.hpp"

#include "BP_NLAW_Proj_classes.hpp"
#include "BP_NLAW_Proj_parameters.hpp"


namespace SDK
{

// Function BP_NLAW_Proj.BP_NLAW_Proj_C.ExecuteUbergraph_BP_NLAW_Proj
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NLAW_Proj_C::ExecuteUbergraph_BP_NLAW_Proj(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NLAW_Proj_C", "ExecuteUbergraph_BP_NLAW_Proj");

	Params::BP_NLAW_Proj_C_ExecuteUbergraph_BP_NLAW_Proj Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NLAW_Proj.BP_NLAW_Proj_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   Param_DeltaSeconds                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NLAW_Proj_C::ReceiveTick(float Param_DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NLAW_Proj_C", "ReceiveTick");

	Params::BP_NLAW_Proj_C_ReceiveTick Parms{};

	Parms.Param_DeltaSeconds = Param_DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NLAW_Proj.BP_NLAW_Proj_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_NLAW_Proj_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NLAW_Proj_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NLAW_Proj.BP_NLAW_Proj_C.OnImpact
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           SelfActor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_NLAW_Proj_C::OnImpact(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NLAW_Proj_C", "OnImpact");

	Params::BP_NLAW_Proj_C_OnImpact Parms{};

	Parms.SelfActor = SelfActor;
	Parms.OtherActor = OtherActor;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NLAW_Proj.BP_NLAW_Proj_C.UpdateIgnoreGravity
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_NLAW_Proj_C::UpdateIgnoreGravity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NLAW_Proj_C", "UpdateIgnoreGravity");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NLAW_Proj.BP_NLAW_Proj_C.AdjustVelocityDirection
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_NLAW_Proj_C::AdjustVelocityDirection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NLAW_Proj_C", "AdjustVelocityDirection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NLAW_Proj.BP_NLAW_Proj_C.GetCurrentKinematics
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Distance_From_Start_Point                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Angular_Speed_Degrees                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Total_Speed                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Linear_Speed                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Tangential_Speed                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Velocity_Angle_From_Start_Direction_Degrees            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_NLAW_Proj_C::GetCurrentKinematics(float* Distance_From_Start_Point, float* Angular_Speed_Degrees, float* Total_Speed, float* Linear_Speed, float* Tangential_Speed, float* Velocity_Angle_From_Start_Direction_Degrees)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NLAW_Proj_C", "GetCurrentKinematics");

	Params::BP_NLAW_Proj_C_GetCurrentKinematics Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Distance_From_Start_Point != nullptr)
		*Distance_From_Start_Point = Parms.Distance_From_Start_Point;

	if (Angular_Speed_Degrees != nullptr)
		*Angular_Speed_Degrees = Parms.Angular_Speed_Degrees;

	if (Total_Speed != nullptr)
		*Total_Speed = Parms.Total_Speed;

	if (Linear_Speed != nullptr)
		*Linear_Speed = Parms.Linear_Speed;

	if (Tangential_Speed != nullptr)
		*Tangential_Speed = Parms.Tangential_Speed;

	if (Velocity_Angle_From_Start_Direction_Degrees != nullptr)
		*Velocity_Angle_From_Start_Direction_Degrees = Parms.Velocity_Angle_From_Start_Direction_Degrees;
}

}

