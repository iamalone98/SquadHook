#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RadialCenterVehicle

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function RadialCenterVehicle.RadialCenterVehicle_C.ExecuteUbergraph_RadialCenterVehicle
// 0x0150 (0x0150 - 0x0000)
struct RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_369C[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_K2_GetTimerElapsedTimeHandle_ReturnValue; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_369D[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0014(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AHUD*                                   CallFunc_GetHUD_ReturnValue;                       // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue;              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASQHUD*                                 K2Node_DynamicCast_AsSQHUD;                        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_369E[0x3];                                     // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetActionKeyName_Name;                    // 0x0074(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_369F[0x4];                                     // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_NameToText_ReturnValue;              // 0x0080(0x0018)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0098(0x0040)(HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36A0[0x7];                                     // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00E0(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00F0(0x0018)()
	class UUMG_SeatProgress_C*                    K2Node_DynamicCast_AsUMG_Seat_Progress;            // 0x0108(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36A1[0x7];                                     // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue_1;            // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UComp_ResourceControl_C*                CallFunc_GetComponentByClass_ReturnValue;          // 0x0120(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36A2[0x7];                                     // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQRadialButton*                        CallFunc_GetHoverWidget_HoverWidget;               // 0x0138(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_SupplyRadialEntry_C*                 K2Node_DynamicCast_AsW_Supply_Radial_Entry;        // 0x0140(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle) == 0x000008, "Wrong alignment on RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle");
static_assert(sizeof(RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle) == 0x000150, "Wrong size on RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle");
static_assert(offsetof(RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle, EntryPoint) == 0x000000, "Member 'RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle::EntryPoint' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle, CallFunc_K2_GetTimerElapsedTimeHandle_ReturnValue) == 0x000008, "Member 'RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle::CallFunc_K2_GetTimerElapsedTimeHandle_ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00000C, "Member 'RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000010, "Member 'RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle, K2Node_Event_MyGeometry) == 0x000014, "Member 'RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle, K2Node_Event_InDeltaTime) == 0x00004C, "Member 'RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle, CallFunc_GetOwningPlayer_ReturnValue) == 0x000050, "Member 'RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle, CallFunc_GetHUD_ReturnValue) == 0x000058, "Member 'RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle::CallFunc_GetHUD_ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle, CallFunc_MakeLiteralName_ReturnValue) == 0x000060, "Member 'RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle::CallFunc_MakeLiteralName_ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle, K2Node_DynamicCast_AsSQHUD) == 0x000068, "Member 'RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle::K2Node_DynamicCast_AsSQHUD' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle, CallFunc_GetActionKeyName_Name) == 0x000074, "Member 'RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle::CallFunc_GetActionKeyName_Name' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle, CallFunc_Conv_NameToText_ReturnValue) == 0x000080, "Member 'RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle::CallFunc_Conv_NameToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle, K2Node_MakeStruct_FormatArgumentData) == 0x000098, "Member 'RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle, CallFunc_IsValid_ReturnValue_1) == 0x0000D8, "Member 'RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle, K2Node_MakeArray_Array) == 0x0000E0, "Member 'RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle, CallFunc_Format_ReturnValue) == 0x0000F0, "Member 'RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle, K2Node_DynamicCast_AsUMG_Seat_Progress) == 0x000108, "Member 'RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle::K2Node_DynamicCast_AsUMG_Seat_Progress' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle, K2Node_DynamicCast_bSuccess_1) == 0x000110, "Member 'RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle, CallFunc_GetOwningPlayer_ReturnValue_1) == 0x000118, "Member 'RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle::CallFunc_GetOwningPlayer_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle, CallFunc_GetComponentByClass_ReturnValue) == 0x000120, "Member 'RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000128, "Member 'RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle, CallFunc_IsValid_ReturnValue_2) == 0x000130, "Member 'RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle, CallFunc_GetHoverWidget_HoverWidget) == 0x000138, "Member 'RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle::CallFunc_GetHoverWidget_HoverWidget' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle, K2Node_DynamicCast_AsW_Supply_Radial_Entry) == 0x000140, "Member 'RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle::K2Node_DynamicCast_AsW_Supply_Radial_Entry' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle, K2Node_DynamicCast_bSuccess_2) == 0x000148, "Member 'RadialCenterVehicle_C_ExecuteUbergraph_RadialCenterVehicle::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");

// Function RadialCenterVehicle.RadialCenterVehicle_C.Tick
// 0x003C (0x003C - 0x0000)
struct RadialCenterVehicle_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RadialCenterVehicle_C_Tick) == 0x000004, "Wrong alignment on RadialCenterVehicle_C_Tick");
static_assert(sizeof(RadialCenterVehicle_C_Tick) == 0x00003C, "Wrong size on RadialCenterVehicle_C_Tick");
static_assert(offsetof(RadialCenterVehicle_C_Tick, MyGeometry) == 0x000000, "Member 'RadialCenterVehicle_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Tick, InDeltaTime) == 0x000038, "Member 'RadialCenterVehicle_C_Tick::InDeltaTime' has a wrong offset!");

// Function RadialCenterVehicle.RadialCenterVehicle_C.Get_Background_ColorAndOpacity_0
// 0x0020 (0x0020 - 0x0000)
struct RadialCenterVehicle_C_Get_Background_ColorAndOpacity_0 final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RadialCenterVehicle_C_Get_Background_ColorAndOpacity_0) == 0x000004, "Wrong alignment on RadialCenterVehicle_C_Get_Background_ColorAndOpacity_0");
static_assert(sizeof(RadialCenterVehicle_C_Get_Background_ColorAndOpacity_0) == 0x000020, "Wrong size on RadialCenterVehicle_C_Get_Background_ColorAndOpacity_0");
static_assert(offsetof(RadialCenterVehicle_C_Get_Background_ColorAndOpacity_0, ReturnValue) == 0x000000, "Member 'RadialCenterVehicle_C_Get_Background_ColorAndOpacity_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Background_ColorAndOpacity_0, CallFunc_SelectColor_ReturnValue) == 0x000010, "Member 'RadialCenterVehicle_C_Get_Background_ColorAndOpacity_0::CallFunc_SelectColor_ReturnValue' has a wrong offset!");

// Function RadialCenterVehicle.RadialCenterVehicle_C.SetTimerProgress
// 0x0010 (0x0010 - 0x0000)
struct RadialCenterVehicle_C_SetTimerProgress final
{
public:
	float                                         RemainingTimePct;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RadialCenterVehicle_C_SetTimerProgress) == 0x000008, "Wrong alignment on RadialCenterVehicle_C_SetTimerProgress");
static_assert(sizeof(RadialCenterVehicle_C_SetTimerProgress) == 0x000010, "Wrong size on RadialCenterVehicle_C_SetTimerProgress");
static_assert(offsetof(RadialCenterVehicle_C_SetTimerProgress, RemainingTimePct) == 0x000000, "Member 'RadialCenterVehicle_C_SetTimerProgress::RemainingTimePct' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_SetTimerProgress, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000004, "Member 'RadialCenterVehicle_C_SetTimerProgress::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_SetTimerProgress, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000008, "Member 'RadialCenterVehicle_C_SetTimerProgress::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function RadialCenterVehicle.RadialCenterVehicle_C.SetTimerActivation
// 0x0024 (0x0024 - 0x0000)
struct RadialCenterVehicle_C_SetTimerActivation final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36A3[0x2];                                     // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue;                  // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_SelectColor_ReturnValue_1;                // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RadialCenterVehicle_C_SetTimerActivation) == 0x000004, "Wrong alignment on RadialCenterVehicle_C_SetTimerActivation");
static_assert(sizeof(RadialCenterVehicle_C_SetTimerActivation) == 0x000024, "Wrong size on RadialCenterVehicle_C_SetTimerActivation");
static_assert(offsetof(RadialCenterVehicle_C_SetTimerActivation, Active) == 0x000000, "Member 'RadialCenterVehicle_C_SetTimerActivation::Active' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_SetTimerActivation, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'RadialCenterVehicle_C_SetTimerActivation::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_SetTimerActivation, CallFunc_SelectColor_ReturnValue) == 0x000004, "Member 'RadialCenterVehicle_C_SetTimerActivation::CallFunc_SelectColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_SetTimerActivation, CallFunc_SelectColor_ReturnValue_1) == 0x000014, "Member 'RadialCenterVehicle_C_SetTimerActivation::CallFunc_SelectColor_ReturnValue_1' has a wrong offset!");

// Function RadialCenterVehicle.RadialCenterVehicle_C.Get_Text_SupplyStatus
// 0x0290 (0x0290 - 0x0000)
struct RadialCenterVehicle_C_Get_Text_SupplyStatus final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	bool                                          Temp_bool_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36A4[0x7];                                     // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0020(0x0018)()
	bool                                          Temp_bool_Variable_1;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36A5[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_1;                              // 0x0040(0x0018)()
	bool                                          Temp_bool_Variable_2;                              // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36A6[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_2;                              // 0x0060(0x0018)()
	class FText                                   Temp_text_Variable_3;                              // 0x0078(0x0018)()
	bool                                          Temp_bool_Variable_3;                              // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36A7[0x6];                                     // 0x0092(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_4;                              // 0x0098(0x0018)()
	bool                                          Temp_bool_Variable_4;                              // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_5;                              // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36A8[0x6];                                     // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_5;                              // 0x00B8(0x0018)()
	bool                                          Temp_bool_Variable_6;                              // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36A9[0x7];                                     // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_6;                              // 0x00D8(0x0018)()
	bool                                          Temp_bool_Variable_7;                              // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36AA[0x7];                                     // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_7;                              // 0x00F8(0x0018)()
	bool                                          Temp_bool_Variable_8;                              // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable_9;                              // 0x0111(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36AB[0x6];                                     // 0x0112(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_8;                              // 0x0118(0x0018)()
	bool                                          Temp_bool_Variable_10;                             // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36AC[0x7];                                     // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable_9;                              // 0x0138(0x0018)()
	bool                                          CallFunc_Is_Soldier_Alive_Alive;                   // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_HelicopterAltitudeCheck_AltitudeValid;    // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36AD[0x6];                                     // 0x0152(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Get_Action_Text_ReturnValue;              // 0x0158(0x0018)()
	bool                                          CallFunc_Vehicle_Speed_Check_Speed_Is_Valid;       // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Validate_Transaction_Valid;               // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Validate_Transaction_Con_Valid;           // 0x0172(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Validate_Transaction_Ammo_Valid;          // 0x0173(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Validate_Transaction_Is_Loading;          // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Validate_Transaction_Zone_has_Points;     // 0x0175(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36AE[0x2];                                     // 0x0176(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0178(0x0018)()
	class FText                                   K2Node_Select_Default_1;                           // 0x0190(0x0018)()
	bool                                          CallFunc_Vehicle_Denied_ReturnValue;               // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36AF[0x7];                                     // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_2;                           // 0x01B0(0x0018)()
	bool                                          CallFunc_Is_Action_Ammo_Is_Ammo_Action;            // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Validate_Transaction_Valid_1;             // 0x01C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Validate_Transaction_Con_Valid_1;         // 0x01CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Validate_Transaction_Ammo_Valid_1;        // 0x01CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Validate_Transaction_Is_Loading_1;        // 0x01CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Validate_Transaction_Zone_has_Points_1;   // 0x01CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Validate_FOB_Valid;                       // 0x01CE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36B0[0x1];                                     // 0x01CF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default_3;                           // 0x01D0(0x0018)()
	class FText                                   K2Node_Select_Default_4;                           // 0x01E8(0x0018)()
	class FText                                   K2Node_Select_Default_5;                           // 0x0200(0x0018)()
	class FText                                   K2Node_Select_Default_6;                           // 0x0218(0x0018)()
	class FText                                   K2Node_Select_Default_7;                           // 0x0230(0x0018)()
	class FText                                   K2Node_Select_Default_8;                           // 0x0248(0x0018)()
	class FText                                   K2Node_Select_Default_9;                           // 0x0260(0x0018)()
	class FText                                   K2Node_Select_Default_10;                          // 0x0278(0x0018)()
};
static_assert(alignof(RadialCenterVehicle_C_Get_Text_SupplyStatus) == 0x000008, "Wrong alignment on RadialCenterVehicle_C_Get_Text_SupplyStatus");
static_assert(sizeof(RadialCenterVehicle_C_Get_Text_SupplyStatus) == 0x000290, "Wrong size on RadialCenterVehicle_C_Get_Text_SupplyStatus");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, ReturnValue) == 0x000000, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, Temp_bool_Variable) == 0x000018, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, Temp_text_Variable) == 0x000020, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, Temp_bool_Variable_1) == 0x000038, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, Temp_text_Variable_1) == 0x000040, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, Temp_bool_Variable_2) == 0x000058, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, Temp_text_Variable_2) == 0x000060, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::Temp_text_Variable_2' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, Temp_text_Variable_3) == 0x000078, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::Temp_text_Variable_3' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, Temp_bool_Variable_3) == 0x000090, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, CallFunc_IsValid_ReturnValue) == 0x000091, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, Temp_text_Variable_4) == 0x000098, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::Temp_text_Variable_4' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, Temp_bool_Variable_4) == 0x0000B0, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, Temp_bool_Variable_5) == 0x0000B1, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, Temp_text_Variable_5) == 0x0000B8, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::Temp_text_Variable_5' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, Temp_bool_Variable_6) == 0x0000D0, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, Temp_text_Variable_6) == 0x0000D8, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::Temp_text_Variable_6' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, Temp_bool_Variable_7) == 0x0000F0, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, Temp_text_Variable_7) == 0x0000F8, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::Temp_text_Variable_7' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, Temp_bool_Variable_8) == 0x000110, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, Temp_bool_Variable_9) == 0x000111, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::Temp_bool_Variable_9' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, Temp_text_Variable_8) == 0x000118, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::Temp_text_Variable_8' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, Temp_bool_Variable_10) == 0x000130, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::Temp_bool_Variable_10' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, Temp_text_Variable_9) == 0x000138, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::Temp_text_Variable_9' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, CallFunc_Is_Soldier_Alive_Alive) == 0x000150, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::CallFunc_Is_Soldier_Alive_Alive' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, CallFunc_HelicopterAltitudeCheck_AltitudeValid) == 0x000151, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::CallFunc_HelicopterAltitudeCheck_AltitudeValid' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, CallFunc_Get_Action_Text_ReturnValue) == 0x000158, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::CallFunc_Get_Action_Text_ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, CallFunc_Vehicle_Speed_Check_Speed_Is_Valid) == 0x000170, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::CallFunc_Vehicle_Speed_Check_Speed_Is_Valid' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, CallFunc_Validate_Transaction_Valid) == 0x000171, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::CallFunc_Validate_Transaction_Valid' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, CallFunc_Validate_Transaction_Con_Valid) == 0x000172, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::CallFunc_Validate_Transaction_Con_Valid' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, CallFunc_Validate_Transaction_Ammo_Valid) == 0x000173, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::CallFunc_Validate_Transaction_Ammo_Valid' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, CallFunc_Validate_Transaction_Is_Loading) == 0x000174, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::CallFunc_Validate_Transaction_Is_Loading' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, CallFunc_Validate_Transaction_Zone_has_Points) == 0x000175, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::CallFunc_Validate_Transaction_Zone_has_Points' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, K2Node_Select_Default) == 0x000178, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, K2Node_Select_Default_1) == 0x000190, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, CallFunc_Vehicle_Denied_ReturnValue) == 0x0001A8, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::CallFunc_Vehicle_Denied_ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, K2Node_Select_Default_2) == 0x0001B0, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, CallFunc_Is_Action_Ammo_Is_Ammo_Action) == 0x0001C8, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::CallFunc_Is_Action_Ammo_Is_Ammo_Action' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, CallFunc_Validate_Transaction_Valid_1) == 0x0001C9, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::CallFunc_Validate_Transaction_Valid_1' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, CallFunc_Validate_Transaction_Con_Valid_1) == 0x0001CA, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::CallFunc_Validate_Transaction_Con_Valid_1' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, CallFunc_Validate_Transaction_Ammo_Valid_1) == 0x0001CB, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::CallFunc_Validate_Transaction_Ammo_Valid_1' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, CallFunc_Validate_Transaction_Is_Loading_1) == 0x0001CC, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::CallFunc_Validate_Transaction_Is_Loading_1' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, CallFunc_Validate_Transaction_Zone_has_Points_1) == 0x0001CD, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::CallFunc_Validate_Transaction_Zone_has_Points_1' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, CallFunc_Validate_FOB_Valid) == 0x0001CE, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::CallFunc_Validate_FOB_Valid' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, K2Node_Select_Default_3) == 0x0001D0, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, K2Node_Select_Default_4) == 0x0001E8, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, K2Node_Select_Default_5) == 0x000200, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, K2Node_Select_Default_6) == 0x000218, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, K2Node_Select_Default_7) == 0x000230, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, K2Node_Select_Default_8) == 0x000248, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::K2Node_Select_Default_8' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, K2Node_Select_Default_9) == 0x000260, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::K2Node_Select_Default_9' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Text_SupplyStatus, K2Node_Select_Default_10) == 0x000278, "Member 'RadialCenterVehicle_C_Get_Text_SupplyStatus::K2Node_Select_Default_10' has a wrong offset!");

// Function RadialCenterVehicle.RadialCenterVehicle_C.Vehicle Speed Check
// 0x0028 (0x0028 - 0x0000)
struct RadialCenterVehicle_C_Vehicle_Speed_Check final
{
public:
	bool                                          Speed_Is_Valid;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36B1[0x6];                                     // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQVehicle*                             K2Node_DynamicCast_AsSQVehicle;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36B2[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RadialCenterVehicle_C_Vehicle_Speed_Check) == 0x000008, "Wrong alignment on RadialCenterVehicle_C_Vehicle_Speed_Check");
static_assert(sizeof(RadialCenterVehicle_C_Vehicle_Speed_Check) == 0x000028, "Wrong size on RadialCenterVehicle_C_Vehicle_Speed_Check");
static_assert(offsetof(RadialCenterVehicle_C_Vehicle_Speed_Check, Speed_Is_Valid) == 0x000000, "Member 'RadialCenterVehicle_C_Vehicle_Speed_Check::Speed_Is_Valid' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Vehicle_Speed_Check, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'RadialCenterVehicle_C_Vehicle_Speed_Check::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Vehicle_Speed_Check, K2Node_DynamicCast_AsSQVehicle) == 0x000008, "Member 'RadialCenterVehicle_C_Vehicle_Speed_Check::K2Node_DynamicCast_AsSQVehicle' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Vehicle_Speed_Check, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'RadialCenterVehicle_C_Vehicle_Speed_Check::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Vehicle_Speed_Check, CallFunc_GetVelocity_ReturnValue) == 0x000014, "Member 'RadialCenterVehicle_C_Vehicle_Speed_Check::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Vehicle_Speed_Check, CallFunc_VSize_ReturnValue) == 0x000020, "Member 'RadialCenterVehicle_C_Vehicle_Speed_Check::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Vehicle_Speed_Check, CallFunc_Less_FloatFloat_ReturnValue) == 0x000024, "Member 'RadialCenterVehicle_C_Vehicle_Speed_Check::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");

// Function RadialCenterVehicle.RadialCenterVehicle_C.Vehicle Denied
// 0x0020 (0x0020 - 0x0000)
struct RadialCenterVehicle_C_Vehicle_Denied final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36B3[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQPlayerController*                    CallFunc_GetSquadPlayerController_Return_Value;    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_RadialActionModel_ControlSupplies_C* K2Node_DynamicCast_AsBP_Radial_Action_Model_Control_Supplies; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsInVehicle_ReturnValue;                  // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RadialCenterVehicle_C_Vehicle_Denied) == 0x000008, "Wrong alignment on RadialCenterVehicle_C_Vehicle_Denied");
static_assert(sizeof(RadialCenterVehicle_C_Vehicle_Denied) == 0x000020, "Wrong size on RadialCenterVehicle_C_Vehicle_Denied");
static_assert(offsetof(RadialCenterVehicle_C_Vehicle_Denied, ReturnValue) == 0x000000, "Member 'RadialCenterVehicle_C_Vehicle_Denied::ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Vehicle_Denied, CallFunc_GetSquadPlayerController_Return_Value) == 0x000008, "Member 'RadialCenterVehicle_C_Vehicle_Denied::CallFunc_GetSquadPlayerController_Return_Value' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Vehicle_Denied, K2Node_DynamicCast_AsBP_Radial_Action_Model_Control_Supplies) == 0x000010, "Member 'RadialCenterVehicle_C_Vehicle_Denied::K2Node_DynamicCast_AsBP_Radial_Action_Model_Control_Supplies' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Vehicle_Denied, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'RadialCenterVehicle_C_Vehicle_Denied::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Vehicle_Denied, CallFunc_IsInVehicle_ReturnValue) == 0x000019, "Member 'RadialCenterVehicle_C_Vehicle_Denied::CallFunc_IsInVehicle_ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Vehicle_Denied, CallFunc_BooleanAND_ReturnValue) == 0x00001A, "Member 'RadialCenterVehicle_C_Vehicle_Denied::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function RadialCenterVehicle.RadialCenterVehicle_C.Is Action Ammo
// 0x0030 (0x0030 - 0x0000)
struct RadialCenterVehicle_C_Is_Action_Ammo final
{
public:
	bool                                          Is_Ammo_Action;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36B4[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQRadialButton*                        CallFunc_GetHoverWidget_HoverWidget;               // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_SupplyRadialEntry_C*                 K2Node_DynamicCast_AsW_Supply_Radial_Entry;        // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36B5[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_RadialActionModel_ControlSupplies_C* K2Node_DynamicCast_AsBP_Radial_Action_Model_Control_Supplies; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RadialCenterVehicle_C_Is_Action_Ammo) == 0x000008, "Wrong alignment on RadialCenterVehicle_C_Is_Action_Ammo");
static_assert(sizeof(RadialCenterVehicle_C_Is_Action_Ammo) == 0x000030, "Wrong size on RadialCenterVehicle_C_Is_Action_Ammo");
static_assert(offsetof(RadialCenterVehicle_C_Is_Action_Ammo, Is_Ammo_Action) == 0x000000, "Member 'RadialCenterVehicle_C_Is_Action_Ammo::Is_Ammo_Action' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Is_Action_Ammo, CallFunc_GetHoverWidget_HoverWidget) == 0x000008, "Member 'RadialCenterVehicle_C_Is_Action_Ammo::CallFunc_GetHoverWidget_HoverWidget' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Is_Action_Ammo, K2Node_DynamicCast_AsW_Supply_Radial_Entry) == 0x000010, "Member 'RadialCenterVehicle_C_Is_Action_Ammo::K2Node_DynamicCast_AsW_Supply_Radial_Entry' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Is_Action_Ammo, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'RadialCenterVehicle_C_Is_Action_Ammo::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Is_Action_Ammo, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'RadialCenterVehicle_C_Is_Action_Ammo::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Is_Action_Ammo, K2Node_DynamicCast_AsBP_Radial_Action_Model_Control_Supplies) == 0x000020, "Member 'RadialCenterVehicle_C_Is_Action_Ammo::K2Node_DynamicCast_AsBP_Radial_Action_Model_Control_Supplies' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Is_Action_Ammo, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'RadialCenterVehicle_C_Is_Action_Ammo::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function RadialCenterVehicle.RadialCenterVehicle_C.Validate Transaction
// 0x0040 (0x0040 - 0x0000)
struct RadialCenterVehicle_C_Validate_Transaction final
{
public:
	bool                                          Valid;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Con_Valid;                                         // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Ammo_Valid;                                        // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Is_Loading;                                        // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Zone_has_Points;                                   // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36B6[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USQRadialButton*                        CallFunc_GetHoverWidget_HoverWidget;               // 0x0008(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_SupplyRadialEntry_C*                 K2Node_DynamicCast_AsW_Supply_Radial_Entry;        // 0x0010(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36B7[0x6];                                     // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_RadialActionModel_ControlSupplies_C* K2Node_DynamicCast_AsBP_Radial_Action_Model_Control_Supplies; // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36B8[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQVehicle*                             K2Node_DynamicCast_AsSQVehicle;                    // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Validate_Transaction_Valid_Transaction;   // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Validate_Transaction_Has_Con_Weapon;      // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Validate_Transaction_Has_Ammo_Weapon;     // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Validate_Transaction_Is_Loading;          // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Validate_Transaction_Zone_has_Points;     // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RadialCenterVehicle_C_Validate_Transaction) == 0x000008, "Wrong alignment on RadialCenterVehicle_C_Validate_Transaction");
static_assert(sizeof(RadialCenterVehicle_C_Validate_Transaction) == 0x000040, "Wrong size on RadialCenterVehicle_C_Validate_Transaction");
static_assert(offsetof(RadialCenterVehicle_C_Validate_Transaction, Valid) == 0x000000, "Member 'RadialCenterVehicle_C_Validate_Transaction::Valid' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Validate_Transaction, Con_Valid) == 0x000001, "Member 'RadialCenterVehicle_C_Validate_Transaction::Con_Valid' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Validate_Transaction, Ammo_Valid) == 0x000002, "Member 'RadialCenterVehicle_C_Validate_Transaction::Ammo_Valid' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Validate_Transaction, Is_Loading) == 0x000003, "Member 'RadialCenterVehicle_C_Validate_Transaction::Is_Loading' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Validate_Transaction, Zone_has_Points) == 0x000004, "Member 'RadialCenterVehicle_C_Validate_Transaction::Zone_has_Points' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Validate_Transaction, CallFunc_GetHoverWidget_HoverWidget) == 0x000008, "Member 'RadialCenterVehicle_C_Validate_Transaction::CallFunc_GetHoverWidget_HoverWidget' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Validate_Transaction, K2Node_DynamicCast_AsW_Supply_Radial_Entry) == 0x000010, "Member 'RadialCenterVehicle_C_Validate_Transaction::K2Node_DynamicCast_AsW_Supply_Radial_Entry' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Validate_Transaction, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'RadialCenterVehicle_C_Validate_Transaction::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Validate_Transaction, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'RadialCenterVehicle_C_Validate_Transaction::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Validate_Transaction, K2Node_DynamicCast_AsBP_Radial_Action_Model_Control_Supplies) == 0x000020, "Member 'RadialCenterVehicle_C_Validate_Transaction::K2Node_DynamicCast_AsBP_Radial_Action_Model_Control_Supplies' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Validate_Transaction, K2Node_DynamicCast_bSuccess_1) == 0x000028, "Member 'RadialCenterVehicle_C_Validate_Transaction::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Validate_Transaction, K2Node_DynamicCast_AsSQVehicle) == 0x000030, "Member 'RadialCenterVehicle_C_Validate_Transaction::K2Node_DynamicCast_AsSQVehicle' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Validate_Transaction, K2Node_DynamicCast_bSuccess_2) == 0x000038, "Member 'RadialCenterVehicle_C_Validate_Transaction::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Validate_Transaction, CallFunc_Validate_Transaction_Valid_Transaction) == 0x000039, "Member 'RadialCenterVehicle_C_Validate_Transaction::CallFunc_Validate_Transaction_Valid_Transaction' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Validate_Transaction, CallFunc_Validate_Transaction_Has_Con_Weapon) == 0x00003A, "Member 'RadialCenterVehicle_C_Validate_Transaction::CallFunc_Validate_Transaction_Has_Con_Weapon' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Validate_Transaction, CallFunc_Validate_Transaction_Has_Ammo_Weapon) == 0x00003B, "Member 'RadialCenterVehicle_C_Validate_Transaction::CallFunc_Validate_Transaction_Has_Ammo_Weapon' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Validate_Transaction, CallFunc_Validate_Transaction_Is_Loading) == 0x00003C, "Member 'RadialCenterVehicle_C_Validate_Transaction::CallFunc_Validate_Transaction_Is_Loading' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Validate_Transaction, CallFunc_Validate_Transaction_Zone_has_Points) == 0x00003D, "Member 'RadialCenterVehicle_C_Validate_Transaction::CallFunc_Validate_Transaction_Zone_has_Points' has a wrong offset!");

// Function RadialCenterVehicle.RadialCenterVehicle_C.Validate FOB
// 0x0028 (0x0028 - 0x0000)
struct RadialCenterVehicle_C_Validate_FOB final
{
public:
	bool                                          Valid;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36B9[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQVehicle*                             K2Node_DynamicCast_AsSQVehicle;                    // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Validate_Resource_Point_Valid;            // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36BA[0x6];                                     // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQForwardBase*                         CallFunc_Validate_Resource_Point_Fob;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_Validate_Resource_Point_CapZone;          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(RadialCenterVehicle_C_Validate_FOB) == 0x000008, "Wrong alignment on RadialCenterVehicle_C_Validate_FOB");
static_assert(sizeof(RadialCenterVehicle_C_Validate_FOB) == 0x000028, "Wrong size on RadialCenterVehicle_C_Validate_FOB");
static_assert(offsetof(RadialCenterVehicle_C_Validate_FOB, Valid) == 0x000000, "Member 'RadialCenterVehicle_C_Validate_FOB::Valid' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Validate_FOB, K2Node_DynamicCast_AsSQVehicle) == 0x000008, "Member 'RadialCenterVehicle_C_Validate_FOB::K2Node_DynamicCast_AsSQVehicle' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Validate_FOB, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'RadialCenterVehicle_C_Validate_FOB::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Validate_FOB, CallFunc_Validate_Resource_Point_Valid) == 0x000011, "Member 'RadialCenterVehicle_C_Validate_FOB::CallFunc_Validate_Resource_Point_Valid' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Validate_FOB, CallFunc_Validate_Resource_Point_Fob) == 0x000018, "Member 'RadialCenterVehicle_C_Validate_FOB::CallFunc_Validate_Resource_Point_Fob' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Validate_FOB, CallFunc_Validate_Resource_Point_CapZone) == 0x000020, "Member 'RadialCenterVehicle_C_Validate_FOB::CallFunc_Validate_Resource_Point_CapZone' has a wrong offset!");

// Function RadialCenterVehicle.RadialCenterVehicle_C.Get Action Text
// 0x0040 (0x0040 - 0x0000)
struct RadialCenterVehicle_C_Get_Action_Text final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	class USQRadialButton*                        CallFunc_GetHoverWidget_HoverWidget;               // 0x0018(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36BB[0x7];                                     // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Get_Widget_Text_DisplayText;              // 0x0028(0x0018)()
};
static_assert(alignof(RadialCenterVehicle_C_Get_Action_Text) == 0x000008, "Wrong alignment on RadialCenterVehicle_C_Get_Action_Text");
static_assert(sizeof(RadialCenterVehicle_C_Get_Action_Text) == 0x000040, "Wrong size on RadialCenterVehicle_C_Get_Action_Text");
static_assert(offsetof(RadialCenterVehicle_C_Get_Action_Text, ReturnValue) == 0x000000, "Member 'RadialCenterVehicle_C_Get_Action_Text::ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Action_Text, CallFunc_GetHoverWidget_HoverWidget) == 0x000018, "Member 'RadialCenterVehicle_C_Get_Action_Text::CallFunc_GetHoverWidget_HoverWidget' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Action_Text, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'RadialCenterVehicle_C_Get_Action_Text::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Action_Text, CallFunc_Get_Widget_Text_DisplayText) == 0x000028, "Member 'RadialCenterVehicle_C_Get_Action_Text::CallFunc_Get_Widget_Text_DisplayText' has a wrong offset!");

// Function RadialCenterVehicle.RadialCenterVehicle_C.Get Widget Text
// 0x0080 (0x0080 - 0x0000)
struct RadialCenterVehicle_C_Get_Widget_Text final
{
public:
	class USQRadialButton*                        Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   DisplayText;                                       // 0x0008(0x0018)(Parm, OutParm)
	class UMarkerRadialEntry_C*                   K2Node_DynamicCast_AsMarker_Radial_Entry;          // 0x0020(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36BC[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UIconRadialGotoEntry_C*                 K2Node_DynamicCast_AsIcon_Radial_Goto_Entry;       // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36BD[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PlaceMarkerActionModel_C*           K2Node_DynamicCast_AsBP_Place_Marker_Action_Model; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36BE[0x7];                                     // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GotoMenuActionModel_C*              K2Node_DynamicCast_AsBP_Goto_Menu_Action_Model;    // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36BF[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class URadialItem_Deployable_C*               K2Node_DynamicCast_AsRadial_Item_Deployable;       // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36C0[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UIconRadialEntry_C*                     K2Node_DynamicCast_AsIcon_Radial_Entry;            // 0x0070(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RadialCenterVehicle_C_Get_Widget_Text) == 0x000008, "Wrong alignment on RadialCenterVehicle_C_Get_Widget_Text");
static_assert(sizeof(RadialCenterVehicle_C_Get_Widget_Text) == 0x000080, "Wrong size on RadialCenterVehicle_C_Get_Widget_Text");
static_assert(offsetof(RadialCenterVehicle_C_Get_Widget_Text, Button) == 0x000000, "Member 'RadialCenterVehicle_C_Get_Widget_Text::Button' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Widget_Text, DisplayText) == 0x000008, "Member 'RadialCenterVehicle_C_Get_Widget_Text::DisplayText' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Widget_Text, K2Node_DynamicCast_AsMarker_Radial_Entry) == 0x000020, "Member 'RadialCenterVehicle_C_Get_Widget_Text::K2Node_DynamicCast_AsMarker_Radial_Entry' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Widget_Text, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'RadialCenterVehicle_C_Get_Widget_Text::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Widget_Text, K2Node_DynamicCast_AsIcon_Radial_Goto_Entry) == 0x000030, "Member 'RadialCenterVehicle_C_Get_Widget_Text::K2Node_DynamicCast_AsIcon_Radial_Goto_Entry' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Widget_Text, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'RadialCenterVehicle_C_Get_Widget_Text::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Widget_Text, K2Node_DynamicCast_AsBP_Place_Marker_Action_Model) == 0x000040, "Member 'RadialCenterVehicle_C_Get_Widget_Text::K2Node_DynamicCast_AsBP_Place_Marker_Action_Model' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Widget_Text, K2Node_DynamicCast_bSuccess_2) == 0x000048, "Member 'RadialCenterVehicle_C_Get_Widget_Text::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Widget_Text, K2Node_DynamicCast_AsBP_Goto_Menu_Action_Model) == 0x000050, "Member 'RadialCenterVehicle_C_Get_Widget_Text::K2Node_DynamicCast_AsBP_Goto_Menu_Action_Model' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Widget_Text, K2Node_DynamicCast_bSuccess_3) == 0x000058, "Member 'RadialCenterVehicle_C_Get_Widget_Text::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Widget_Text, K2Node_DynamicCast_AsRadial_Item_Deployable) == 0x000060, "Member 'RadialCenterVehicle_C_Get_Widget_Text::K2Node_DynamicCast_AsRadial_Item_Deployable' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Widget_Text, K2Node_DynamicCast_bSuccess_4) == 0x000068, "Member 'RadialCenterVehicle_C_Get_Widget_Text::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Widget_Text, K2Node_DynamicCast_AsIcon_Radial_Entry) == 0x000070, "Member 'RadialCenterVehicle_C_Get_Widget_Text::K2Node_DynamicCast_AsIcon_Radial_Entry' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Get_Widget_Text, K2Node_DynamicCast_bSuccess_5) == 0x000078, "Member 'RadialCenterVehicle_C_Get_Widget_Text::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");

// Function RadialCenterVehicle.RadialCenterVehicle_C.Is Soldier Alive
// 0x0020 (0x0020 - 0x0000)
struct RadialCenterVehicle_C_Is_Soldier_Alive final
{
public:
	bool                                          Alive;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36C1[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASQPlayerState*                         K2Node_DynamicCast_AsSQPlayer_State;               // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsAlive_ReturnValue;                      // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RadialCenterVehicle_C_Is_Soldier_Alive) == 0x000008, "Wrong alignment on RadialCenterVehicle_C_Is_Soldier_Alive");
static_assert(sizeof(RadialCenterVehicle_C_Is_Soldier_Alive) == 0x000020, "Wrong size on RadialCenterVehicle_C_Is_Soldier_Alive");
static_assert(offsetof(RadialCenterVehicle_C_Is_Soldier_Alive, Alive) == 0x000000, "Member 'RadialCenterVehicle_C_Is_Soldier_Alive::Alive' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Is_Soldier_Alive, CallFunc_GetOwningPlayer_ReturnValue) == 0x000008, "Member 'RadialCenterVehicle_C_Is_Soldier_Alive::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Is_Soldier_Alive, K2Node_DynamicCast_AsSQPlayer_State) == 0x000010, "Member 'RadialCenterVehicle_C_Is_Soldier_Alive::K2Node_DynamicCast_AsSQPlayer_State' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Is_Soldier_Alive, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'RadialCenterVehicle_C_Is_Soldier_Alive::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Is_Soldier_Alive, CallFunc_IsValid_ReturnValue) == 0x000019, "Member 'RadialCenterVehicle_C_Is_Soldier_Alive::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Is_Soldier_Alive, CallFunc_IsValid_ReturnValue_1) == 0x00001A, "Member 'RadialCenterVehicle_C_Is_Soldier_Alive::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Is_Soldier_Alive, CallFunc_IsAlive_ReturnValue) == 0x00001B, "Member 'RadialCenterVehicle_C_Is_Soldier_Alive::CallFunc_IsAlive_ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Is_Soldier_Alive, CallFunc_Not_PreBool_ReturnValue) == 0x00001C, "Member 'RadialCenterVehicle_C_Is_Soldier_Alive::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_Is_Soldier_Alive, CallFunc_BooleanAND_ReturnValue) == 0x00001D, "Member 'RadialCenterVehicle_C_Is_Soldier_Alive::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function RadialCenterVehicle.RadialCenterVehicle_C.HelicopterAltitudeCheck
// 0x0018 (0x0018 - 0x0000)
struct RadialCenterVehicle_C_HelicopterAltitudeCheck final
{
public:
	bool                                          AltitudeValid;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_36C2[0x7];                                     // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Generic_Helicopter_C*               K2Node_DynamicCast_AsBP_Generic_Helicopter;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(RadialCenterVehicle_C_HelicopterAltitudeCheck) == 0x000008, "Wrong alignment on RadialCenterVehicle_C_HelicopterAltitudeCheck");
static_assert(sizeof(RadialCenterVehicle_C_HelicopterAltitudeCheck) == 0x000018, "Wrong size on RadialCenterVehicle_C_HelicopterAltitudeCheck");
static_assert(offsetof(RadialCenterVehicle_C_HelicopterAltitudeCheck, AltitudeValid) == 0x000000, "Member 'RadialCenterVehicle_C_HelicopterAltitudeCheck::AltitudeValid' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_HelicopterAltitudeCheck, K2Node_DynamicCast_AsBP_Generic_Helicopter) == 0x000008, "Member 'RadialCenterVehicle_C_HelicopterAltitudeCheck::K2Node_DynamicCast_AsBP_Generic_Helicopter' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_HelicopterAltitudeCheck, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'RadialCenterVehicle_C_HelicopterAltitudeCheck::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_HelicopterAltitudeCheck, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'RadialCenterVehicle_C_HelicopterAltitudeCheck::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(RadialCenterVehicle_C_HelicopterAltitudeCheck, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000012, "Member 'RadialCenterVehicle_C_HelicopterAltitudeCheck::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

}

