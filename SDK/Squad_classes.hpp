#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Squad

#include "Basic.hpp"

#include "SquadVoice_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "PhysXVehicles_classes.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "PhysicsCore_structs.hpp"
#include "PhysicsCore_classes.hpp"
#include "Squad_structs.hpp"
#include "SlateCore_structs.hpp"
#include "SlateCore_classes.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "DeveloperSettings_classes.hpp"
#include "ODKBazaar_structs.hpp"
#include "OnlineSubsystemUtils_structs.hpp"
#include "OnlineSubsystemUtils_classes.hpp"
#include "ReplicationGraph_structs.hpp"
#include "ReplicationGraph_classes.hpp"
#include "ModdingRuntime_structs.hpp"
#include "StreamlineBlueprint_structs.hpp"
#include "DLSSBlueprint_structs.hpp"
#include "Slate_structs.hpp"
#include "SignificanceManager_classes.hpp"
#include "SQWater_classes.hpp"


namespace SDK
{

// Class Squad.SQProjectileSpawnerComponent
// 0x00D0 (0x02D0 - 0x0200)
class USQProjectileSpawnerComponent final : public USceneComponent
{
public:
	TSoftClassPtr<class UClass>                   ProjectileClass;                                   // 0x01F8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   TracerProjectileClass;                             // 0x0220(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SuppressionInfoClassOverride;                      // 0x0248(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MuzzleVelocity;                                    // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDamageToApply;                                  // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreatedOnServerForDamage;                         // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D3F[0x3];                                      // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeBetweenShots;                                  // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoundsBetweenTracer;                               // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShotDeviation;                                     // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShotCounter;                                       // 0x0288(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFiring;                                         // 0x028C(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D40[0x3];                                      // 0x028D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnFired;                                           // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnStartFiring;                                     // 0x02A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnStopFiring;                                      // 0x02B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_D41[0x10];                                     // 0x02C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnFireEvent__DelegateSignature();
	void OnProjectileImpact(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnProjectileOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnRep_IsFiring(bool OldValue);
	void StartFiring();
	void StopFiring();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQProjectileSpawnerComponent">();
	}
	static class USQProjectileSpawnerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQProjectileSpawnerComponent>();
	}
};
static_assert(alignof(USQProjectileSpawnerComponent) == 0x000010, "Wrong alignment on USQProjectileSpawnerComponent");
static_assert(sizeof(USQProjectileSpawnerComponent) == 0x0002D0, "Wrong size on USQProjectileSpawnerComponent");
static_assert(offsetof(USQProjectileSpawnerComponent, ProjectileClass) == 0x0001F8, "Member 'USQProjectileSpawnerComponent::ProjectileClass' has a wrong offset!");
static_assert(offsetof(USQProjectileSpawnerComponent, TracerProjectileClass) == 0x000220, "Member 'USQProjectileSpawnerComponent::TracerProjectileClass' has a wrong offset!");
static_assert(offsetof(USQProjectileSpawnerComponent, SuppressionInfoClassOverride) == 0x000248, "Member 'USQProjectileSpawnerComponent::SuppressionInfoClassOverride' has a wrong offset!");
static_assert(offsetof(USQProjectileSpawnerComponent, MuzzleVelocity) == 0x000270, "Member 'USQProjectileSpawnerComponent::MuzzleVelocity' has a wrong offset!");
static_assert(offsetof(USQProjectileSpawnerComponent, MaxDamageToApply) == 0x000274, "Member 'USQProjectileSpawnerComponent::MaxDamageToApply' has a wrong offset!");
static_assert(offsetof(USQProjectileSpawnerComponent, bCreatedOnServerForDamage) == 0x000278, "Member 'USQProjectileSpawnerComponent::bCreatedOnServerForDamage' has a wrong offset!");
static_assert(offsetof(USQProjectileSpawnerComponent, TimeBetweenShots) == 0x00027C, "Member 'USQProjectileSpawnerComponent::TimeBetweenShots' has a wrong offset!");
static_assert(offsetof(USQProjectileSpawnerComponent, RoundsBetweenTracer) == 0x000280, "Member 'USQProjectileSpawnerComponent::RoundsBetweenTracer' has a wrong offset!");
static_assert(offsetof(USQProjectileSpawnerComponent, ShotDeviation) == 0x000284, "Member 'USQProjectileSpawnerComponent::ShotDeviation' has a wrong offset!");
static_assert(offsetof(USQProjectileSpawnerComponent, ShotCounter) == 0x000288, "Member 'USQProjectileSpawnerComponent::ShotCounter' has a wrong offset!");
static_assert(offsetof(USQProjectileSpawnerComponent, bIsFiring) == 0x00028C, "Member 'USQProjectileSpawnerComponent::bIsFiring' has a wrong offset!");
static_assert(offsetof(USQProjectileSpawnerComponent, OnFired) == 0x000290, "Member 'USQProjectileSpawnerComponent::OnFired' has a wrong offset!");
static_assert(offsetof(USQProjectileSpawnerComponent, OnStartFiring) == 0x0002A0, "Member 'USQProjectileSpawnerComponent::OnStartFiring' has a wrong offset!");
static_assert(offsetof(USQProjectileSpawnerComponent, OnStopFiring) == 0x0002B0, "Member 'USQProjectileSpawnerComponent::OnStopFiring' has a wrong offset!");

// Class Squad.SQAvailability
// 0x0028 (0x0050 - 0x0028)
class USQAvailability : public UObject
{
public:
	class USQRestriction_Delay_Base*              Delay;                                             // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQRestriction_Cost*                    Cost;                                              // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQRestriction_Count*                   LimitedCount;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class USQRestriction_Boolean*>         OtherRestrictions;                                 // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void GetAvailabilityForPlayer(class ASQPlayerController* InPlayer, const struct FSQAvailabilityState& InTeamStatus, struct FSQAvailabilityState* OutPlayerStatus) const;
	int32 GetLimitedCount() const;
	bool HasCost() const;
	bool HasDelay() const;
	bool HasLimitedCount() const;
	bool HasPlayerBasedCost() const;
	bool HasTeamBasedCost() const;
	void InitializeTeamAvailability(class ASQTeam* InTeam, class USQLayer* InActiveLayer, struct FSQAvailabilityState* OutTeamStatus) const;
	bool IsRestrictedForPlayer(class ASQPlayerController* InPlayer, struct FDataTableRowHandle* OutRestrictionReason) const;
	bool IsRestrictedForTeam(class ASQTeam* InTeam, struct FDataTableRowHandle* OutRestrictionReason) const;
	void OnPlayerAddUsage(class ASQPlayerController* InPlayer, struct FSQAvailabilityState* Status) const;
	void OnPlayerRemoveUsage(class ASQPlayerController* InPlayer, struct FSQAvailabilityState* Status) const;
	void OnTeamAddUsage(class ASQTeam* InTeam, struct FSQAvailabilityState* Status) const;
	void OnTeamRemoveUsage(class ASQTeam* InTeam, struct FSQAvailabilityState* Status) const;
	void UpdateTeamAvailability(class ASQTeam* InTeam, struct FSQAvailabilityState* OutTeamStatus) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAvailability">();
	}
	static class USQAvailability* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQAvailability>();
	}
};
static_assert(alignof(USQAvailability) == 0x000008, "Wrong alignment on USQAvailability");
static_assert(sizeof(USQAvailability) == 0x000050, "Wrong size on USQAvailability");
static_assert(offsetof(USQAvailability, Delay) == 0x000028, "Member 'USQAvailability::Delay' has a wrong offset!");
static_assert(offsetof(USQAvailability, Cost) == 0x000030, "Member 'USQAvailability::Cost' has a wrong offset!");
static_assert(offsetof(USQAvailability, LimitedCount) == 0x000038, "Member 'USQAvailability::LimitedCount' has a wrong offset!");
static_assert(offsetof(USQAvailability, OtherRestrictions) == 0x000040, "Member 'USQAvailability::OtherRestrictions' has a wrong offset!");

// Class Squad.SQAvailability_Vehicle
// 0x0008 (0x0058 - 0x0050)
class USQAvailability_Vehicle : public USQAvailability
{
public:
	class USQVehicleSettings*                     Setting;                                           // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAvailability_Vehicle">();
	}
	static class USQAvailability_Vehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQAvailability_Vehicle>();
	}
};
static_assert(alignof(USQAvailability_Vehicle) == 0x000008, "Wrong alignment on USQAvailability_Vehicle");
static_assert(sizeof(USQAvailability_Vehicle) == 0x000058, "Wrong size on USQAvailability_Vehicle");
static_assert(offsetof(USQAvailability_Vehicle, Setting) == 0x000050, "Member 'USQAvailability_Vehicle::Setting' has a wrong offset!");

// Class Squad.SQMenuWidgetStyle
// 0x0200 (0x0230 - 0x0030)
class USQMenuWidgetStyle final : public USlateWidgetStyleContainerBase
{
public:
	struct FSQMenuStyle                           MenuStyle;                                         // 0x0030(0x0200)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMenuWidgetStyle">();
	}
	static class USQMenuWidgetStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMenuWidgetStyle>();
	}
};
static_assert(alignof(USQMenuWidgetStyle) == 0x000008, "Wrong alignment on USQMenuWidgetStyle");
static_assert(sizeof(USQMenuWidgetStyle) == 0x000230, "Wrong size on USQMenuWidgetStyle");
static_assert(offsetof(USQMenuWidgetStyle, MenuStyle) == 0x000030, "Member 'USQMenuWidgetStyle::MenuStyle' has a wrong offset!");

// Class Squad.RelativeCanvasPanel
// 0x0000 (0x0130 - 0x0130)
class URelativeCanvasPanel final : public UCanvasPanel
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RelativeCanvasPanel">();
	}
	static class URelativeCanvasPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<URelativeCanvasPanel>();
	}
};
static_assert(alignof(URelativeCanvasPanel) == 0x000008, "Wrong alignment on URelativeCanvasPanel");
static_assert(sizeof(URelativeCanvasPanel) == 0x000130, "Wrong size on URelativeCanvasPanel");

// Class Squad.SQCoreStateWidget
// 0x0028 (0x0288 - 0x0260)
class USQCoreStateWidget : public UUserWidget
{
public:
	ESlateVisibility                              UnconfiguredVisibility;                            // 0x0260(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D46[0x7];                                      // 0x0261(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQCoreStateWidgetFactory*              SourceComponent;                                   // 0x0268(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESQSelectionState                             SelectionState;                                    // 0x0270(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D47[0x7];                                      // 0x0271(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                SelectionInstigator;                               // 0x0278(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D48[0x8];                                      // 0x0280(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AnnounceSelectionState(ESQSelectionState InSelectionState);
	void OnScaleChanged(float UniformScale);
	void OnSelectionStateChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCoreStateWidget">();
	}
	static class USQCoreStateWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCoreStateWidget>();
	}
};
static_assert(alignof(USQCoreStateWidget) == 0x000008, "Wrong alignment on USQCoreStateWidget");
static_assert(sizeof(USQCoreStateWidget) == 0x000288, "Wrong size on USQCoreStateWidget");
static_assert(offsetof(USQCoreStateWidget, UnconfiguredVisibility) == 0x000260, "Member 'USQCoreStateWidget::UnconfiguredVisibility' has a wrong offset!");
static_assert(offsetof(USQCoreStateWidget, SourceComponent) == 0x000268, "Member 'USQCoreStateWidget::SourceComponent' has a wrong offset!");
static_assert(offsetof(USQCoreStateWidget, SelectionState) == 0x000270, "Member 'USQCoreStateWidget::SelectionState' has a wrong offset!");
static_assert(offsetof(USQCoreStateWidget, SelectionInstigator) == 0x000278, "Member 'USQCoreStateWidget::SelectionInstigator' has a wrong offset!");

// Class Squad.SQCoreStateMapWidget
// 0x0018 (0x02A0 - 0x0288)
class USQCoreStateMapWidget : public USQCoreStateWidget
{
public:
	float                                         ZOrder;                                            // 0x0288(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAutoSize;                                         // 0x028C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D49[0x3];                                      // 0x028D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Alignment;                                         // 0x0290(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQCoreStateMapComponent*               MapComponent;                                      // 0x0298(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCoreStateMapWidget">();
	}
	static class USQCoreStateMapWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCoreStateMapWidget>();
	}
};
static_assert(alignof(USQCoreStateMapWidget) == 0x000008, "Wrong alignment on USQCoreStateMapWidget");
static_assert(sizeof(USQCoreStateMapWidget) == 0x0002A0, "Wrong size on USQCoreStateMapWidget");
static_assert(offsetof(USQCoreStateMapWidget, ZOrder) == 0x000288, "Member 'USQCoreStateMapWidget::ZOrder' has a wrong offset!");
static_assert(offsetof(USQCoreStateMapWidget, bAutoSize) == 0x00028C, "Member 'USQCoreStateMapWidget::bAutoSize' has a wrong offset!");
static_assert(offsetof(USQCoreStateMapWidget, Alignment) == 0x000290, "Member 'USQCoreStateMapWidget::Alignment' has a wrong offset!");
static_assert(offsetof(USQCoreStateMapWidget, MapComponent) == 0x000298, "Member 'USQCoreStateMapWidget::MapComponent' has a wrong offset!");

// Class Squad.SQMapWidget
// 0x0038 (0x02D8 - 0x02A0)
class USQMapWidget : public USQCoreStateMapWidget
{
public:
	float                                         Angle;                                             // 0x02A0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D4A[0x4];                                      // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQColorsDataAsset*                     ColorsDataAsset;                                   // 0x02A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseAngleEvent;                                    // 0x02B0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D4B[0x3];                                      // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AngleTolerance;                                    // 0x02B4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LocationTolerance;                                 // 0x02B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D4C[0x1C];                                     // 0x02BC(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAngleChanged();
	void OnTintValueChanged();

	struct FLinearColor GetTintColor() const;
	ESQMapWidgetTint GetTintValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapWidget">();
	}
	static class USQMapWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapWidget>();
	}
};
static_assert(alignof(USQMapWidget) == 0x000008, "Wrong alignment on USQMapWidget");
static_assert(sizeof(USQMapWidget) == 0x0002D8, "Wrong size on USQMapWidget");
static_assert(offsetof(USQMapWidget, Angle) == 0x0002A0, "Member 'USQMapWidget::Angle' has a wrong offset!");
static_assert(offsetof(USQMapWidget, ColorsDataAsset) == 0x0002A8, "Member 'USQMapWidget::ColorsDataAsset' has a wrong offset!");
static_assert(offsetof(USQMapWidget, bUseAngleEvent) == 0x0002B0, "Member 'USQMapWidget::bUseAngleEvent' has a wrong offset!");
static_assert(offsetof(USQMapWidget, AngleTolerance) == 0x0002B4, "Member 'USQMapWidget::AngleTolerance' has a wrong offset!");
static_assert(offsetof(USQMapWidget, LocationTolerance) == 0x0002B8, "Member 'USQMapWidget::LocationTolerance' has a wrong offset!");

// Class Squad.SQMapWidgetSpawnPoint
// 0x0020 (0x02F8 - 0x02D8)
class USQMapWidgetSpawnPoint : public USQMapWidget
{
public:
	bool                                          bSpawnOnSingleClick;                               // 0x02D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSpawnOnDoubleClick;                               // 0x02D9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D4D[0x2];                                      // 0x02DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bIsSelected : 1;                                   // 0x02DC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bSieged : 1;                                       // 0x02DC(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bSpawningEnabled : 1;                              // 0x02DC(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_D4E[0x3];                                      // 0x02DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActivatedTimeStamp;                                // 0x02E0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESQSpawnPointType                             SpawnPointType;                                    // 0x02E4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D4F[0x3];                                      // 0x02E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQGameSpawn*                           OwningGameSpawn;                                   // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D50[0x8];                                      // 0x02F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnActivatedTimeStampChanged();
	void OnIsSelectedChanged();
	void OnSiegedChanged();
	void OnSpawningEnabledChanged();
	void OnSpawnPointTypeChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapWidgetSpawnPoint">();
	}
	static class USQMapWidgetSpawnPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapWidgetSpawnPoint>();
	}
};
static_assert(alignof(USQMapWidgetSpawnPoint) == 0x000008, "Wrong alignment on USQMapWidgetSpawnPoint");
static_assert(sizeof(USQMapWidgetSpawnPoint) == 0x0002F8, "Wrong size on USQMapWidgetSpawnPoint");
static_assert(offsetof(USQMapWidgetSpawnPoint, bSpawnOnSingleClick) == 0x0002D8, "Member 'USQMapWidgetSpawnPoint::bSpawnOnSingleClick' has a wrong offset!");
static_assert(offsetof(USQMapWidgetSpawnPoint, bSpawnOnDoubleClick) == 0x0002D9, "Member 'USQMapWidgetSpawnPoint::bSpawnOnDoubleClick' has a wrong offset!");
static_assert(offsetof(USQMapWidgetSpawnPoint, ActivatedTimeStamp) == 0x0002E0, "Member 'USQMapWidgetSpawnPoint::ActivatedTimeStamp' has a wrong offset!");
static_assert(offsetof(USQMapWidgetSpawnPoint, SpawnPointType) == 0x0002E4, "Member 'USQMapWidgetSpawnPoint::SpawnPointType' has a wrong offset!");
static_assert(offsetof(USQMapWidgetSpawnPoint, OwningGameSpawn) == 0x0002E8, "Member 'USQMapWidgetSpawnPoint::OwningGameSpawn' has a wrong offset!");

// Class Squad.SQMapWidgetRallyPoint
// 0x0018 (0x0310 - 0x02F8)
class USQMapWidgetRallyPoint : public USQMapWidgetSpawnPoint
{
public:
	int32                                         NumberOfSpawns;                                    // 0x02F8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SquadId;                                           // 0x02FC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bIsInSelfSquad : 1;                                // 0x0300(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_D51[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQSquadState*                          SquadState;                                        // 0x0308(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnEventSquadStateChanged(class ASQSquadState* NewSquad, class ASQSquadState* OldSquad, class ASQPlayerState* Player);
	void OnIsInSelfSquadChanged();
	void OnNumberOfSpawnsChanged();
	void OnSquadIdChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapWidgetRallyPoint">();
	}
	static class USQMapWidgetRallyPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapWidgetRallyPoint>();
	}
};
static_assert(alignof(USQMapWidgetRallyPoint) == 0x000008, "Wrong alignment on USQMapWidgetRallyPoint");
static_assert(sizeof(USQMapWidgetRallyPoint) == 0x000310, "Wrong size on USQMapWidgetRallyPoint");
static_assert(offsetof(USQMapWidgetRallyPoint, NumberOfSpawns) == 0x0002F8, "Member 'USQMapWidgetRallyPoint::NumberOfSpawns' has a wrong offset!");
static_assert(offsetof(USQMapWidgetRallyPoint, SquadId) == 0x0002FC, "Member 'USQMapWidgetRallyPoint::SquadId' has a wrong offset!");
static_assert(offsetof(USQMapWidgetRallyPoint, SquadState) == 0x000308, "Member 'USQMapWidgetRallyPoint::SquadState' has a wrong offset!");

// Class Squad.SQCloudAnalyticsGathererSubsystem
// 0x0038 (0x0068 - 0x0030)
class USQCloudAnalyticsGathererSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_D52[0x38];                                     // 0x0030(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCloudAnalyticsGathererSubsystem">();
	}
	static class USQCloudAnalyticsGathererSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCloudAnalyticsGathererSubsystem>();
	}
};
static_assert(alignof(USQCloudAnalyticsGathererSubsystem) == 0x000008, "Wrong alignment on USQCloudAnalyticsGathererSubsystem");
static_assert(sizeof(USQCloudAnalyticsGathererSubsystem) == 0x000068, "Wrong size on USQCloudAnalyticsGathererSubsystem");

// Class Squad.SQLocalAudioEffectHandler
// 0x0000 (0x0028 - 0x0028)
class USQLocalAudioEffectHandler : public UObject
{
public:
	void BP_SoldierChanged(class ASQSoldier* NewSoldier);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQLocalAudioEffectHandler">();
	}
	static class USQLocalAudioEffectHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQLocalAudioEffectHandler>();
	}
};
static_assert(alignof(USQLocalAudioEffectHandler) == 0x000008, "Wrong alignment on USQLocalAudioEffectHandler");
static_assert(sizeof(USQLocalAudioEffectHandler) == 0x000028, "Wrong size on USQLocalAudioEffectHandler");

// Class Squad.SQLocalAudioMix
// 0x0008 (0x0030 - 0x0028)
class USQLocalAudioMix : public USQLocalAudioEffectHandler
{
public:
	class USoundMix*                              AudioEffect;                                       // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void BP_InitAudioEffect(class ASQPlayerCameraManager* CameraManager);
	bool BP_UpdateAudioMixing(float DeltaTime, class ASQSoldier* SoldierToApplyTo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQLocalAudioMix">();
	}
	static class USQLocalAudioMix* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQLocalAudioMix>();
	}
};
static_assert(alignof(USQLocalAudioMix) == 0x000008, "Wrong alignment on USQLocalAudioMix");
static_assert(sizeof(USQLocalAudioMix) == 0x000030, "Wrong size on USQLocalAudioMix");
static_assert(offsetof(USQLocalAudioMix, AudioEffect) == 0x000028, "Member 'USQLocalAudioMix::AudioEffect' has a wrong offset!");

// Class Squad.SQAnimNotify_MontagePause
// 0x0000 (0x0038 - 0x0038)
class USQAnimNotify_MontagePause final : public UAnimNotify
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAnimNotify_MontagePause">();
	}
	static class USQAnimNotify_MontagePause* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQAnimNotify_MontagePause>();
	}
};
static_assert(alignof(USQAnimNotify_MontagePause) == 0x000008, "Wrong alignment on USQAnimNotify_MontagePause");
static_assert(sizeof(USQAnimNotify_MontagePause) == 0x000038, "Wrong size on USQAnimNotify_MontagePause");

// Class Squad.SQMapWidgetDeployable
// 0x0008 (0x02E0 - 0x02D8)
class USQMapWidgetDeployable : public USQMapWidget
{
public:
	ESQBuildState                                 BuildState;                                        // 0x02D8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D55[0x7];                                      // 0x02D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBuildStateChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapWidgetDeployable">();
	}
	static class USQMapWidgetDeployable* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapWidgetDeployable>();
	}
};
static_assert(alignof(USQMapWidgetDeployable) == 0x000008, "Wrong alignment on USQMapWidgetDeployable");
static_assert(sizeof(USQMapWidgetDeployable) == 0x0002E0, "Wrong size on USQMapWidgetDeployable");
static_assert(offsetof(USQMapWidgetDeployable, BuildState) == 0x0002D8, "Member 'USQMapWidgetDeployable::BuildState' has a wrong offset!");

// Class Squad.SQMapWidgetForwardBase
// 0x0018 (0x02F8 - 0x02E0)
class USQMapWidgetForwardBase : public USQMapWidgetDeployable
{
public:
	uint8                                         bCanSpawn : 1;                                     // 0x02E0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bSieged : 1;                                       // 0x02E0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bIsBleeding : 1;                                   // 0x02E0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_D56[0x3];                                      // 0x02E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinActivatedTimeStamp;                             // 0x02E4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ExclusionRadius;                                   // 0x02E8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ConstructionRadius;                                // 0x02EC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AmmoPoints;                                        // 0x02F0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ConstructionPoints;                                // 0x02F4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnAmmoPointsChanged();
	void OnCanSpawnChanged();
	void OnConstructionPointsChanged();
	void OnConstructionRadiusChanged();
	void OnExclusionRadiusChanged();
	void OnIsBleedingChanged();
	void OnMinActivatedTimeStampChanged();
	void OnSiegedChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapWidgetForwardBase">();
	}
	static class USQMapWidgetForwardBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapWidgetForwardBase>();
	}
};
static_assert(alignof(USQMapWidgetForwardBase) == 0x000008, "Wrong alignment on USQMapWidgetForwardBase");
static_assert(sizeof(USQMapWidgetForwardBase) == 0x0002F8, "Wrong size on USQMapWidgetForwardBase");
static_assert(offsetof(USQMapWidgetForwardBase, MinActivatedTimeStamp) == 0x0002E4, "Member 'USQMapWidgetForwardBase::MinActivatedTimeStamp' has a wrong offset!");
static_assert(offsetof(USQMapWidgetForwardBase, ExclusionRadius) == 0x0002E8, "Member 'USQMapWidgetForwardBase::ExclusionRadius' has a wrong offset!");
static_assert(offsetof(USQMapWidgetForwardBase, ConstructionRadius) == 0x0002EC, "Member 'USQMapWidgetForwardBase::ConstructionRadius' has a wrong offset!");
static_assert(offsetof(USQMapWidgetForwardBase, AmmoPoints) == 0x0002F0, "Member 'USQMapWidgetForwardBase::AmmoPoints' has a wrong offset!");
static_assert(offsetof(USQMapWidgetForwardBase, ConstructionPoints) == 0x0002F4, "Member 'USQMapWidgetForwardBase::ConstructionPoints' has a wrong offset!");

// Class Squad.CoreGetAllItemsCallbackProxy
// 0x0058 (0x0088 - 0x0030)
class UCoreGetAllItemsCallbackProxy final : public UOnlineBlueprintCallProxyBase
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFailure;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_D57[0x38];                                     // 0x0050(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UCoreGetAllItemsCallbackProxy* GetAllItems(class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreGetAllItemsCallbackProxy">();
	}
	static class UCoreGetAllItemsCallbackProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreGetAllItemsCallbackProxy>();
	}
};
static_assert(alignof(UCoreGetAllItemsCallbackProxy) == 0x000008, "Wrong alignment on UCoreGetAllItemsCallbackProxy");
static_assert(sizeof(UCoreGetAllItemsCallbackProxy) == 0x000088, "Wrong size on UCoreGetAllItemsCallbackProxy");
static_assert(offsetof(UCoreGetAllItemsCallbackProxy, OnSuccess) == 0x000030, "Member 'UCoreGetAllItemsCallbackProxy::OnSuccess' has a wrong offset!");
static_assert(offsetof(UCoreGetAllItemsCallbackProxy, OnFailure) == 0x000040, "Member 'UCoreGetAllItemsCallbackProxy::OnFailure' has a wrong offset!");

// Class Squad.SQUserWidget
// 0x0008 (0x0268 - 0x0260)
class USQUserWidget : public UUserWidget
{
public:
	ESlateVisibility                              PreviousVisibility;                                // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D58[0x7];                                      // 0x0261(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BPInit();
	void SelfRemove();
	void ToggleUIVisibility(bool bIsVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQUserWidget">();
	}
	static class USQUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQUserWidget>();
	}
};
static_assert(alignof(USQUserWidget) == 0x000008, "Wrong alignment on USQUserWidget");
static_assert(sizeof(USQUserWidget) == 0x000268, "Wrong size on USQUserWidget");
static_assert(offsetof(USQUserWidget, PreviousVisibility) == 0x000260, "Member 'USQUserWidget::PreviousVisibility' has a wrong offset!");

// Class Squad.SQVehicleViewWidget
// 0x0038 (0x02A0 - 0x0268)
class USQVehicleViewWidget : public USQUserWidget
{
public:
	TArray<class UImage*>                         ZoomImages;                                        // 0x0268(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         CurrentZoomIndex;                                  // 0x0278(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanRegainGuidance;                                // 0x027C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGuidingProjectile;                                // 0x027D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D59[0x2];                                      // 0x027E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQProjectile*                          SpawnedProjectile;                                 // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UCameraShakeBase>>   IgnoredShakeClasses;                               // 0x0288(0x0010)(BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5A[0x8];                                      // 0x0298(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeZoomReticleImage(const int32 NewZoomReticleIndex);
	void InitWidget();
	void Unzoom();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleViewWidget">();
	}
	static class USQVehicleViewWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleViewWidget>();
	}
};
static_assert(alignof(USQVehicleViewWidget) == 0x000008, "Wrong alignment on USQVehicleViewWidget");
static_assert(sizeof(USQVehicleViewWidget) == 0x0002A0, "Wrong size on USQVehicleViewWidget");
static_assert(offsetof(USQVehicleViewWidget, ZoomImages) == 0x000268, "Member 'USQVehicleViewWidget::ZoomImages' has a wrong offset!");
static_assert(offsetof(USQVehicleViewWidget, CurrentZoomIndex) == 0x000278, "Member 'USQVehicleViewWidget::CurrentZoomIndex' has a wrong offset!");
static_assert(offsetof(USQVehicleViewWidget, bCanRegainGuidance) == 0x00027C, "Member 'USQVehicleViewWidget::bCanRegainGuidance' has a wrong offset!");
static_assert(offsetof(USQVehicleViewWidget, bGuidingProjectile) == 0x00027D, "Member 'USQVehicleViewWidget::bGuidingProjectile' has a wrong offset!");
static_assert(offsetof(USQVehicleViewWidget, SpawnedProjectile) == 0x000280, "Member 'USQVehicleViewWidget::SpawnedProjectile' has a wrong offset!");
static_assert(offsetof(USQVehicleViewWidget, IgnoredShakeClasses) == 0x000288, "Member 'USQVehicleViewWidget::IgnoredShakeClasses' has a wrong offset!");

// Class Squad.ODKAnalyticsSubsystemInterface
// 0x0000 (0x0028 - 0x0028)
class IODKAnalyticsSubsystemInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ODKAnalyticsSubsystemInterface">();
	}
	static class IODKAnalyticsSubsystemInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IODKAnalyticsSubsystemInterface>();
	}
};
static_assert(alignof(IODKAnalyticsSubsystemInterface) == 0x000008, "Wrong alignment on IODKAnalyticsSubsystemInterface");
static_assert(sizeof(IODKAnalyticsSubsystemInterface) == 0x000028, "Wrong size on IODKAnalyticsSubsystemInterface");

// Class Squad.SQProjectileHitValidator
// 0x0000 (0x0028 - 0x0028)
class ISQProjectileHitValidator final : public IInterface
{
public:
	float GetActorImmersionDepth(const class AActor* QueryingActor);

	bool HasValidProjectileHit(const class AActor* ProjectileOwner, const struct FHitResult& InHit) const;
	bool HasValidProjectileOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQProjectileHitValidator">();
	}
	static class ISQProjectileHitValidator* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISQProjectileHitValidator>();
	}
};
static_assert(alignof(ISQProjectileHitValidator) == 0x000008, "Wrong alignment on ISQProjectileHitValidator");
static_assert(sizeof(ISQProjectileHitValidator) == 0x000028, "Wrong size on ISQProjectileHitValidator");

// Class Squad.SQApprovalEntryWidget
// 0x0018 (0x0280 - 0x0268)
class USQApprovalEntryWidget : public USQUserWidget
{
public:
	class UTextBlock*                             TextBlockCPP;                                      // 0x0268(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 IconImageCPP;                                      // 0x0270(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             DescriptionTextCPP;                                // 0x0278(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQApprovalEntryWidget">();
	}
	static class USQApprovalEntryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQApprovalEntryWidget>();
	}
};
static_assert(alignof(USQApprovalEntryWidget) == 0x000008, "Wrong alignment on USQApprovalEntryWidget");
static_assert(sizeof(USQApprovalEntryWidget) == 0x000280, "Wrong size on USQApprovalEntryWidget");
static_assert(offsetof(USQApprovalEntryWidget, TextBlockCPP) == 0x000268, "Member 'USQApprovalEntryWidget::TextBlockCPP' has a wrong offset!");
static_assert(offsetof(USQApprovalEntryWidget, IconImageCPP) == 0x000270, "Member 'USQApprovalEntryWidget::IconImageCPP' has a wrong offset!");
static_assert(offsetof(USQApprovalEntryWidget, DescriptionTextCPP) == 0x000278, "Member 'USQApprovalEntryWidget::DescriptionTextCPP' has a wrong offset!");

// Class Squad.SQMapWidgetPawn
// 0x0010 (0x02E8 - 0x02D8)
class USQMapWidgetPawn : public USQMapWidget
{
public:
	uint8                                         bIsOwned : 1;                                      // 0x02D8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bIsOwnedBySelf : 1;                                // 0x02D8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bIsInSelfTeam : 1;                                 // 0x02D8(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bIsInSelfSquad : 1;                                // 0x02D8(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_D5F[0x3];                                      // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FireTeamIndex;                                     // 0x02DC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CameraRotationYaw;                                 // 0x02E0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         IsSelfZOrder;                                      // 0x02E4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnCameraRotationYawChanged();
	void OnFireTeamIndexChanged();
	void OnIsInSelfSquad();
	void OnIsInSelfTeam();
	void OnIsOwnedBySelfChanged();
	void OnIsOwnedChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapWidgetPawn">();
	}
	static class USQMapWidgetPawn* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapWidgetPawn>();
	}
};
static_assert(alignof(USQMapWidgetPawn) == 0x000008, "Wrong alignment on USQMapWidgetPawn");
static_assert(sizeof(USQMapWidgetPawn) == 0x0002E8, "Wrong size on USQMapWidgetPawn");
static_assert(offsetof(USQMapWidgetPawn, FireTeamIndex) == 0x0002DC, "Member 'USQMapWidgetPawn::FireTeamIndex' has a wrong offset!");
static_assert(offsetof(USQMapWidgetPawn, CameraRotationYaw) == 0x0002E0, "Member 'USQMapWidgetPawn::CameraRotationYaw' has a wrong offset!");
static_assert(offsetof(USQMapWidgetPawn, IsSelfZOrder) == 0x0002E4, "Member 'USQMapWidgetPawn::IsSelfZOrder' has a wrong offset!");

// Class Squad.SQMapWidgetSoldier
// 0x0068 (0x0350 - 0x02E8)
class USQMapWidgetSoldier : public USQMapWidgetPawn
{
public:
	uint8                                         bIsWounded : 1;                                    // 0x02E8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bIsBleeding : 1;                                   // 0x02E8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bIsAlive : 1;                                      // 0x02E8(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bIsInVehicle : 1;                                  // 0x02E8(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bIsUsingFreeLook : 1;                              // 0x02E8(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_D60[0x3];                                      // 0x02E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ESQAuthorityTypes                             LeaderState;                                       // 0x02EC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D61[0x3];                                      // 0x02ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SquadId;                                           // 0x02F0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         FireTeamId;                                        // 0x02F4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bIsMedic : 1;                                      // 0x02F8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bIsWithinCanSelfSeeHealthSatusRange : 1;           // 0x02F8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bCanSelfSeeHealthStatus : 1;                       // 0x02F8(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_D62[0x3];                                      // 0x02F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HealthStatusRange;                                 // 0x02FC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                SoldierLocation;                                   // 0x0300(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D63[0x4];                                      // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQRoleSettings*                        CurrentRole;                                       // 0x0310(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSQSoldierInfo                         SoldierInfo;                                       // 0x0318(0x0028)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	float                                         SquadLeaderZOrder;                                 // 0x0340(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MedicZOrder;                                       // 0x0344(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VehicleViewConeZOrder;                             // 0x0348(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D64[0x4];                                      // 0x034C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCanSelfSeeHealthStatusChanged();
	void OnCurrentRoleChanged();
	void OnFireteamIdChanged();
	void OnHealthStatusRangeChanged();
	void OnIsAliveChanged();
	void OnIsBleedingChanged();
	void OnIsInVehicleChanged();
	void OnIsMedicChanged();
	void OnIsUsingFreeLookChanged();
	void OnIsWithinCanSelfSeeHealthSatusRangeChanged();
	void OnIsWoundedChanged();
	void OnLeaderStateChanged();
	void OnPlayerChangedRole(class USQRoleSettings* NewRole);
	void OnShowBleedingChanged();
	void OnShowIncapChanged();
	void OnSoldierInfoChanged();
	void OnSoldierLocationChanged();
	void OnSquadIdChanged();

	bool GetShowBleeding() const;
	bool GetShowIncap() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapWidgetSoldier">();
	}
	static class USQMapWidgetSoldier* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapWidgetSoldier>();
	}
};
static_assert(alignof(USQMapWidgetSoldier) == 0x000008, "Wrong alignment on USQMapWidgetSoldier");
static_assert(sizeof(USQMapWidgetSoldier) == 0x000350, "Wrong size on USQMapWidgetSoldier");
static_assert(offsetof(USQMapWidgetSoldier, LeaderState) == 0x0002EC, "Member 'USQMapWidgetSoldier::LeaderState' has a wrong offset!");
static_assert(offsetof(USQMapWidgetSoldier, SquadId) == 0x0002F0, "Member 'USQMapWidgetSoldier::SquadId' has a wrong offset!");
static_assert(offsetof(USQMapWidgetSoldier, FireTeamId) == 0x0002F4, "Member 'USQMapWidgetSoldier::FireTeamId' has a wrong offset!");
static_assert(offsetof(USQMapWidgetSoldier, HealthStatusRange) == 0x0002FC, "Member 'USQMapWidgetSoldier::HealthStatusRange' has a wrong offset!");
static_assert(offsetof(USQMapWidgetSoldier, SoldierLocation) == 0x000300, "Member 'USQMapWidgetSoldier::SoldierLocation' has a wrong offset!");
static_assert(offsetof(USQMapWidgetSoldier, CurrentRole) == 0x000310, "Member 'USQMapWidgetSoldier::CurrentRole' has a wrong offset!");
static_assert(offsetof(USQMapWidgetSoldier, SoldierInfo) == 0x000318, "Member 'USQMapWidgetSoldier::SoldierInfo' has a wrong offset!");
static_assert(offsetof(USQMapWidgetSoldier, SquadLeaderZOrder) == 0x000340, "Member 'USQMapWidgetSoldier::SquadLeaderZOrder' has a wrong offset!");
static_assert(offsetof(USQMapWidgetSoldier, MedicZOrder) == 0x000344, "Member 'USQMapWidgetSoldier::MedicZOrder' has a wrong offset!");
static_assert(offsetof(USQMapWidgetSoldier, VehicleViewConeZOrder) == 0x000348, "Member 'USQMapWidgetSoldier::VehicleViewConeZOrder' has a wrong offset!");

// Class Squad.CoreInventoryBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UCoreInventoryBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static int32 GetItemCount(const struct FBlueprintOnlineItem& Result);
	static int32 GetItemId(const struct FBlueprintOnlineItem& Result);
	static class FString GetItemName(const struct FBlueprintOnlineItem& Result);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreInventoryBlueprintLibrary">();
	}
	static class UCoreInventoryBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreInventoryBlueprintLibrary>();
	}
};
static_assert(alignof(UCoreInventoryBlueprintLibrary) == 0x000008, "Wrong alignment on UCoreInventoryBlueprintLibrary");
static_assert(sizeof(UCoreInventoryBlueprintLibrary) == 0x000028, "Wrong size on UCoreInventoryBlueprintLibrary");

// Class Squad.SQApprovalQueueWidget
// 0x0070 (0x02D8 - 0x0268)
class USQApprovalQueueWidget : public USQUserWidget
{
public:
	TSubclassOf<class USQApprovalEntryWidget>     ApprovalEntry;                                     // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollBox*                             ScrollBoxCPP;                                      // 0x0270(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<uint32, class USQApprovalEntryWidget*>   EntryWidgets;                                      // 0x0278(0x0050)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UTextBlock*                             ApprovalKeyTextCPP;                                // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             DisapprovalKeyTextCPP;                             // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Init();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQApprovalQueueWidget">();
	}
	static class USQApprovalQueueWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQApprovalQueueWidget>();
	}
};
static_assert(alignof(USQApprovalQueueWidget) == 0x000008, "Wrong alignment on USQApprovalQueueWidget");
static_assert(sizeof(USQApprovalQueueWidget) == 0x0002D8, "Wrong size on USQApprovalQueueWidget");
static_assert(offsetof(USQApprovalQueueWidget, ApprovalEntry) == 0x000268, "Member 'USQApprovalQueueWidget::ApprovalEntry' has a wrong offset!");
static_assert(offsetof(USQApprovalQueueWidget, ScrollBoxCPP) == 0x000270, "Member 'USQApprovalQueueWidget::ScrollBoxCPP' has a wrong offset!");
static_assert(offsetof(USQApprovalQueueWidget, EntryWidgets) == 0x000278, "Member 'USQApprovalQueueWidget::EntryWidgets' has a wrong offset!");
static_assert(offsetof(USQApprovalQueueWidget, ApprovalKeyTextCPP) == 0x0002C8, "Member 'USQApprovalQueueWidget::ApprovalKeyTextCPP' has a wrong offset!");
static_assert(offsetof(USQApprovalQueueWidget, DisapprovalKeyTextCPP) == 0x0002D0, "Member 'USQApprovalQueueWidget::DisapprovalKeyTextCPP' has a wrong offset!");

// Class Squad.CoreSerializeItemSetCallbackProxy
// 0x0068 (0x0098 - 0x0030)
class UCoreSerializeItemSetCallbackProxy final : public UOnlineBlueprintCallProxyBase
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFailure;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_D67[0x48];                                     // 0x0050(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UCoreSerializeItemSetCallbackProxy* SerializeItemSet(class UObject* WorldContextObject, const TArray<struct FBlueprintOnlineItem>& Items);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CoreSerializeItemSetCallbackProxy">();
	}
	static class UCoreSerializeItemSetCallbackProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCoreSerializeItemSetCallbackProxy>();
	}
};
static_assert(alignof(UCoreSerializeItemSetCallbackProxy) == 0x000008, "Wrong alignment on UCoreSerializeItemSetCallbackProxy");
static_assert(sizeof(UCoreSerializeItemSetCallbackProxy) == 0x000098, "Wrong size on UCoreSerializeItemSetCallbackProxy");
static_assert(offsetof(UCoreSerializeItemSetCallbackProxy, OnSuccess) == 0x000030, "Member 'UCoreSerializeItemSetCallbackProxy::OnSuccess' has a wrong offset!");
static_assert(offsetof(UCoreSerializeItemSetCallbackProxy, OnFailure) == 0x000040, "Member 'UCoreSerializeItemSetCallbackProxy::OnFailure' has a wrong offset!");

// Class Squad.SQMapWidgetMapMarker
// 0x0020 (0x02F8 - 0x02D8)
class USQMapWidgetMapMarker : public USQMapWidget
{
public:
	class UTexture2D*                             Texture;                                           // 0x02D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           Tint;                                              // 0x02E0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SquadId;                                           // 0x02F0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         FireTeamId;                                        // 0x02F4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnFireteamIdChanged();
	void OnSquadIdChanged();
	void OnTextureChanged();
	void OnTintChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapWidgetMapMarker">();
	}
	static class USQMapWidgetMapMarker* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapWidgetMapMarker>();
	}
};
static_assert(alignof(USQMapWidgetMapMarker) == 0x000008, "Wrong alignment on USQMapWidgetMapMarker");
static_assert(sizeof(USQMapWidgetMapMarker) == 0x0002F8, "Wrong size on USQMapWidgetMapMarker");
static_assert(offsetof(USQMapWidgetMapMarker, Texture) == 0x0002D8, "Member 'USQMapWidgetMapMarker::Texture' has a wrong offset!");
static_assert(offsetof(USQMapWidgetMapMarker, Tint) == 0x0002E0, "Member 'USQMapWidgetMapMarker::Tint' has a wrong offset!");
static_assert(offsetof(USQMapWidgetMapMarker, SquadId) == 0x0002F0, "Member 'USQMapWidgetMapMarker::SquadId' has a wrong offset!");
static_assert(offsetof(USQMapWidgetMapMarker, FireTeamId) == 0x0002F4, "Member 'USQMapWidgetMapMarker::FireTeamId' has a wrong offset!");

// Class Squad.SQMapWidgetMapMarkerSelectable
// 0x0008 (0x0300 - 0x02F8)
class USQMapWidgetMapMarkerSelectable : public USQMapWidgetMapMarker
{
public:
	class USQMapIconComponent*                    MapIcon;                                           // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnRightClicked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapWidgetMapMarkerSelectable">();
	}
	static class USQMapWidgetMapMarkerSelectable* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapWidgetMapMarkerSelectable>();
	}
};
static_assert(alignof(USQMapWidgetMapMarkerSelectable) == 0x000008, "Wrong alignment on USQMapWidgetMapMarkerSelectable");
static_assert(sizeof(USQMapWidgetMapMarkerSelectable) == 0x000300, "Wrong size on USQMapWidgetMapMarkerSelectable");
static_assert(offsetof(USQMapWidgetMapMarkerSelectable, MapIcon) == 0x0002F8, "Member 'USQMapWidgetMapMarkerSelectable::MapIcon' has a wrong offset!");

// Class Squad.HeatMapRecorder
// 0x00B8 (0x00E0 - 0x0028)
class UHeatMapRecorder final : public UObject
{
public:
	uint8                                         Pad_D68[0xB8];                                     // 0x0028(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeatMapRecorder">();
	}
	static class UHeatMapRecorder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHeatMapRecorder>();
	}
};
static_assert(alignof(UHeatMapRecorder) == 0x000008, "Wrong alignment on UHeatMapRecorder");
static_assert(sizeof(UHeatMapRecorder) == 0x0000E0, "Wrong size on UHeatMapRecorder");

// Class Squad.SQAvailabilityHelper
// 0x0000 (0x0028 - 0x0028)
class USQAvailabilityHelper final : public UBlueprintFunctionLibrary
{
public:
	static void AddUsage(const struct FSQAvailabilityState& InState, struct FSQAvailabilityState* OutState, int32 AddedUsage);
	static void ClearNextAvailabilityTime(const struct FSQAvailabilityState& InState, struct FSQAvailabilityState* OutState);
	static void EnQueueNextAvailabilityTime(const struct FSQAvailabilityState& InState, struct FSQAvailabilityState* OutState, struct FDateTime* InNextAvailabilityTime, const struct FDataTableRowHandle& InUnavailabilityReason);
	static int32 GetAvailabilityCount(const struct FSQAvailabilityState& InState);
	static struct FTimespan GetAvailabilityDelay(const struct FSQAvailabilityState& InState);
	static float GetAvailabilityPercentDelay(const struct FSQAvailabilityState& InState, float TotalDelay);
	static bool HasActionActiveTimer(const struct FSQAvailabilityState_Action& InState);
	static bool HasActiveTimer(const struct FSQAvailabilityState& InState);
	static bool HasDeployableActiveTimer(const struct FSQAvailabilityState_Deployable& InState);
	static bool HasRoleActiveTimer(const struct FSQAvailabilityState_Role& InState);
	static bool HasVehicleActiveTimer(const struct FSQAvailabilityState_Vehicle& InState);
	static bool IsActionAvailableForPlayer(const struct FSQAvailabilityState_Action& InTeamState, class ASQPlayerController* InPlayer, struct FSQAvailabilityState* OutPlayerState);
	static bool IsActionAvailableForTeam(const struct FSQAvailabilityState_Action& InTeamState);
	static bool IsAvailable(const struct FSQAvailabilityState& InState);
	static bool IsDeployableAvailableForPlayer(const struct FSQAvailabilityState_Deployable& InTeamState, class ASQPlayerController* InPlayer, struct FSQAvailabilityState* OutPlayerState);
	static bool IsDeployableAvailableForTeam(const struct FSQAvailabilityState_Deployable& InTeamState);
	static bool IsInfiniteAvailability(const struct FSQAvailabilityState& InState);
	static bool IsOverCapacity(const struct FSQAvailabilityState& InState);
	static bool IsRoleAvailableForPlayer(const struct FSQAvailabilityState_Role& InTeamState, class ASQPlayerController* InPlayer, struct FSQAvailabilityState* OutPlayerState);
	static bool IsRoleAvailableForTeam(const struct FSQAvailabilityState_Role& InTeamState);
	static bool IsVehicleAvailableForPlayer(const struct FSQAvailabilityState_Vehicle& InTeamState, class ASQPlayerController* InPlayer, struct FSQAvailabilityState* OutPlayerState);
	static bool IsVehicleAvailableForTeam(const struct FSQAvailabilityState_Vehicle& InTeamState);
	static void RemoveUsage(const struct FSQAvailabilityState& InState, struct FSQAvailabilityState* OutState, int32 RemovedUsage);
	static void SetAvailable(const struct FSQAvailabilityState& InState, struct FSQAvailabilityState* OutState, int32 InAvailable);
	static void SetForceAvailable(const struct FSQAvailabilityState& InState, struct FSQAvailabilityState* OutState, bool Force);
	static void SetModifierPct(const struct FSQAvailabilityState& InState, struct FSQAvailabilityState* OutState, int32 ModifierPercentage);
	static void SetUnavailable(const struct FSQAvailabilityState& InState, struct FSQAvailabilityState* OutState, const struct FDataTableRowHandle& InUnavailabilityReason);
	static void SetUsage(const struct FSQAvailabilityState& InState, struct FSQAvailabilityState* OutState, int32 Usage);
	static void UpdateNextAvailabilityTime(const struct FSQAvailabilityState& InState, struct FSQAvailabilityState* OutState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAvailabilityHelper">();
	}
	static class USQAvailabilityHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQAvailabilityHelper>();
	}
};
static_assert(alignof(USQAvailabilityHelper) == 0x000008, "Wrong alignment on USQAvailabilityHelper");
static_assert(sizeof(USQAvailabilityHelper) == 0x000028, "Wrong size on USQAvailabilityHelper");

// Class Squad.SQ_HexMenu_BaseAction
// 0x0000 (0x0028 - 0x0028)
class USQ_HexMenu_BaseAction final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQ_HexMenu_BaseAction">();
	}
	static class USQ_HexMenu_BaseAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQ_HexMenu_BaseAction>();
	}
};
static_assert(alignof(USQ_HexMenu_BaseAction) == 0x000008, "Wrong alignment on USQ_HexMenu_BaseAction");
static_assert(sizeof(USQ_HexMenu_BaseAction) == 0x000028, "Wrong size on USQ_HexMenu_BaseAction");

// Class Squad.SQCloudProvider
// 0x0108 (0x0130 - 0x0028)
class USQCloudProvider : public UObject
{
public:
	uint8                                         Pad_D80[0x108];                                    // 0x0028(0x0108)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCloudProvider">();
	}
	static class USQCloudProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCloudProvider>();
	}
};
static_assert(alignof(USQCloudProvider) == 0x000008, "Wrong alignment on USQCloudProvider");
static_assert(sizeof(USQCloudProvider) == 0x000130, "Wrong size on USQCloudProvider");

// Class Squad.SQAwsProvider
// 0x0070 (0x01A0 - 0x0130)
class USQAwsProvider final : public USQCloudProvider
{
public:
	class FString                                 CdnURL;                                            // 0x0130(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 Announcement;                                      // 0x0140(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D81[0x50];                                     // 0x0150(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAwsProvider">();
	}
	static class USQAwsProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQAwsProvider>();
	}
};
static_assert(alignof(USQAwsProvider) == 0x000008, "Wrong alignment on USQAwsProvider");
static_assert(sizeof(USQAwsProvider) == 0x0001A0, "Wrong size on USQAwsProvider");
static_assert(offsetof(USQAwsProvider, CdnURL) == 0x000130, "Member 'USQAwsProvider::CdnURL' has a wrong offset!");
static_assert(offsetof(USQAwsProvider, Announcement) == 0x000140, "Member 'USQAwsProvider::Announcement' has a wrong offset!");

// Class Squad.SQUndirectedGraph
// 0x0038 (0x0260 - 0x0228)
class ASQUndirectedGraph : public AActor
{
public:
	class USceneComponent*                        Root;                                              // 0x0228(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnLatticeUpdated;                                  // 0x0230(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class USQGraphNodeComponent*>          Nodes;                                             // 0x0240(0x0010)(ExportObject, Net, ZeroConstructor, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<struct FSQGraphLink>                   Links;                                             // 0x0250(0x0010)(Net, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void AddLink(const struct FSQGraphLink& Link);
	void AddNode(class USQGraphNodeComponent* Node);
	void ClearNodesAndLinks();
	void GetLinks(TArray<struct FSQGraphLink>& InOutLinks);
	void OnRep_Nodes();
	void RemoveLink(const struct FSQGraphLink& Link);
	void RemoveNode(class USQGraphNodeComponent* Node);

	void GetNodes(TArray<class USQGraphNodeComponent*>& InOutNodes) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQUndirectedGraph">();
	}
	static class ASQUndirectedGraph* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQUndirectedGraph>();
	}
};
static_assert(alignof(ASQUndirectedGraph) == 0x000008, "Wrong alignment on ASQUndirectedGraph");
static_assert(sizeof(ASQUndirectedGraph) == 0x000260, "Wrong size on ASQUndirectedGraph");
static_assert(offsetof(ASQUndirectedGraph, Root) == 0x000228, "Member 'ASQUndirectedGraph::Root' has a wrong offset!");
static_assert(offsetof(ASQUndirectedGraph, OnLatticeUpdated) == 0x000230, "Member 'ASQUndirectedGraph::OnLatticeUpdated' has a wrong offset!");
static_assert(offsetof(ASQUndirectedGraph, Nodes) == 0x000240, "Member 'ASQUndirectedGraph::Nodes' has a wrong offset!");
static_assert(offsetof(ASQUndirectedGraph, Links) == 0x000250, "Member 'ASQUndirectedGraph::Links' has a wrong offset!");

// Class Squad.SQBaseButton
// 0x00B8 (0x0320 - 0x0268)
class USQBaseButton : public USQUserWidget
{
public:
	bool                                          bIsHovering;                                       // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsActive;                                         // 0x0269(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D82[0x2];                                      // 0x026A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HoveringColorBlend;                                // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HoverColorBlendSpeed;                              // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPressing;                                       // 0x0274(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D83[0x3];                                      // 0x0275(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PressColorBlend;                                   // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PressColorBlendSpeed;                              // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 ButtonImage;                                       // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBorder*                                ButtonBorder;                                      // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             ButtonTextBlock;                                   // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQButtonStyle                         SQButtonStyle;                                     // 0x0298(0x0080)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D84[0x4];                                      // 0x031C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitWidget();
	void UpdateActiveState();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQBaseButton">();
	}
	static class USQBaseButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQBaseButton>();
	}
};
static_assert(alignof(USQBaseButton) == 0x000008, "Wrong alignment on USQBaseButton");
static_assert(sizeof(USQBaseButton) == 0x000320, "Wrong size on USQBaseButton");
static_assert(offsetof(USQBaseButton, bIsHovering) == 0x000268, "Member 'USQBaseButton::bIsHovering' has a wrong offset!");
static_assert(offsetof(USQBaseButton, bIsActive) == 0x000269, "Member 'USQBaseButton::bIsActive' has a wrong offset!");
static_assert(offsetof(USQBaseButton, HoveringColorBlend) == 0x00026C, "Member 'USQBaseButton::HoveringColorBlend' has a wrong offset!");
static_assert(offsetof(USQBaseButton, HoverColorBlendSpeed) == 0x000270, "Member 'USQBaseButton::HoverColorBlendSpeed' has a wrong offset!");
static_assert(offsetof(USQBaseButton, bIsPressing) == 0x000274, "Member 'USQBaseButton::bIsPressing' has a wrong offset!");
static_assert(offsetof(USQBaseButton, PressColorBlend) == 0x000278, "Member 'USQBaseButton::PressColorBlend' has a wrong offset!");
static_assert(offsetof(USQBaseButton, PressColorBlendSpeed) == 0x00027C, "Member 'USQBaseButton::PressColorBlendSpeed' has a wrong offset!");
static_assert(offsetof(USQBaseButton, ButtonImage) == 0x000280, "Member 'USQBaseButton::ButtonImage' has a wrong offset!");
static_assert(offsetof(USQBaseButton, ButtonBorder) == 0x000288, "Member 'USQBaseButton::ButtonBorder' has a wrong offset!");
static_assert(offsetof(USQBaseButton, ButtonTextBlock) == 0x000290, "Member 'USQBaseButton::ButtonTextBlock' has a wrong offset!");
static_assert(offsetof(USQBaseButton, SQButtonStyle) == 0x000298, "Member 'USQBaseButton::SQButtonStyle' has a wrong offset!");
static_assert(offsetof(USQBaseButton, Alpha) == 0x000318, "Member 'USQBaseButton::Alpha' has a wrong offset!");

// Class Squad.SQRadialButton
// 0x0010 (0x0330 - 0x0320)
class USQRadialButton : public USQBaseButton
{
public:
	ESQRadialWidgetSizeEnum                       RadialWidgetSize;                                  // 0x0320(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D85[0x3];                                      // 0x0321(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RadialWidgetAngle;                                 // 0x0324(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              MouseEnterSoundCue;                                // 0x0328(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnHoverBegin();
	void OnHoverEnd();
	void UpdateRadialAngle(float UpdatedAngle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRadialButton">();
	}
	static class USQRadialButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRadialButton>();
	}
};
static_assert(alignof(USQRadialButton) == 0x000008, "Wrong alignment on USQRadialButton");
static_assert(sizeof(USQRadialButton) == 0x000330, "Wrong size on USQRadialButton");
static_assert(offsetof(USQRadialButton, RadialWidgetSize) == 0x000320, "Member 'USQRadialButton::RadialWidgetSize' has a wrong offset!");
static_assert(offsetof(USQRadialButton, RadialWidgetAngle) == 0x000324, "Member 'USQRadialButton::RadialWidgetAngle' has a wrong offset!");
static_assert(offsetof(USQRadialButton, MouseEnterSoundCue) == 0x000328, "Member 'USQRadialButton::MouseEnterSoundCue' has a wrong offset!");

// Class Squad.SQRadialIconButton
// 0x0118 (0x0448 - 0x0330)
class USQRadialIconButton : public USQRadialButton
{
public:
	struct FVector2D                              SmallOuterRimDistOffset;                           // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MediumOuterRimDistOffset;                          // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LargeOuterRimDistOffset;                           // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SmallIconDistOffset;                               // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MediumIconDistOffset;                              // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LargeIconDistOffset;                               // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 InnerHoverImage;                                   // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 IconImage;                                         // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 OuterRimImage;                                     // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             IconImageTexture;                                  // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           IconImageActiveColor;                              // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           IconImageInactiveColor;                            // 0x0390(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           IconImageHoveredColor;                             // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           IconImagePressedColor;                             // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             InnerHoverSmallImageTexture;                       // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             InnerHoverMediumImageTexture;                      // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             InnerHoverLargeImageTexture;                       // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InnerHoverInactiveColor;                           // 0x03D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InnerHoverHoveredColor;                            // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InnerHoverPressedColor;                            // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             OuterRimSmallImageTexture;                         // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             OuterRimMediumImageTexture;                        // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             OuterRimLargeImageTexture;                         // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OuterRimActiveColor;                               // 0x0420(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OuterRimInactiveColor;                             // 0x0430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IconSize;                                          // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D86[0x4];                                      // 0x0444(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UpdateIconImage();
	void UpdateInnerHoverImage();
	void UpdateOuterRimImage();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRadialIconButton">();
	}
	static class USQRadialIconButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRadialIconButton>();
	}
};
static_assert(alignof(USQRadialIconButton) == 0x000008, "Wrong alignment on USQRadialIconButton");
static_assert(sizeof(USQRadialIconButton) == 0x000448, "Wrong size on USQRadialIconButton");
static_assert(offsetof(USQRadialIconButton, SmallOuterRimDistOffset) == 0x000330, "Member 'USQRadialIconButton::SmallOuterRimDistOffset' has a wrong offset!");
static_assert(offsetof(USQRadialIconButton, MediumOuterRimDistOffset) == 0x000338, "Member 'USQRadialIconButton::MediumOuterRimDistOffset' has a wrong offset!");
static_assert(offsetof(USQRadialIconButton, LargeOuterRimDistOffset) == 0x000340, "Member 'USQRadialIconButton::LargeOuterRimDistOffset' has a wrong offset!");
static_assert(offsetof(USQRadialIconButton, SmallIconDistOffset) == 0x000348, "Member 'USQRadialIconButton::SmallIconDistOffset' has a wrong offset!");
static_assert(offsetof(USQRadialIconButton, MediumIconDistOffset) == 0x000350, "Member 'USQRadialIconButton::MediumIconDistOffset' has a wrong offset!");
static_assert(offsetof(USQRadialIconButton, LargeIconDistOffset) == 0x000358, "Member 'USQRadialIconButton::LargeIconDistOffset' has a wrong offset!");
static_assert(offsetof(USQRadialIconButton, InnerHoverImage) == 0x000360, "Member 'USQRadialIconButton::InnerHoverImage' has a wrong offset!");
static_assert(offsetof(USQRadialIconButton, IconImage) == 0x000368, "Member 'USQRadialIconButton::IconImage' has a wrong offset!");
static_assert(offsetof(USQRadialIconButton, OuterRimImage) == 0x000370, "Member 'USQRadialIconButton::OuterRimImage' has a wrong offset!");
static_assert(offsetof(USQRadialIconButton, IconImageTexture) == 0x000378, "Member 'USQRadialIconButton::IconImageTexture' has a wrong offset!");
static_assert(offsetof(USQRadialIconButton, IconImageActiveColor) == 0x000380, "Member 'USQRadialIconButton::IconImageActiveColor' has a wrong offset!");
static_assert(offsetof(USQRadialIconButton, IconImageInactiveColor) == 0x000390, "Member 'USQRadialIconButton::IconImageInactiveColor' has a wrong offset!");
static_assert(offsetof(USQRadialIconButton, IconImageHoveredColor) == 0x0003A0, "Member 'USQRadialIconButton::IconImageHoveredColor' has a wrong offset!");
static_assert(offsetof(USQRadialIconButton, IconImagePressedColor) == 0x0003B0, "Member 'USQRadialIconButton::IconImagePressedColor' has a wrong offset!");
static_assert(offsetof(USQRadialIconButton, InnerHoverSmallImageTexture) == 0x0003C0, "Member 'USQRadialIconButton::InnerHoverSmallImageTexture' has a wrong offset!");
static_assert(offsetof(USQRadialIconButton, InnerHoverMediumImageTexture) == 0x0003C8, "Member 'USQRadialIconButton::InnerHoverMediumImageTexture' has a wrong offset!");
static_assert(offsetof(USQRadialIconButton, InnerHoverLargeImageTexture) == 0x0003D0, "Member 'USQRadialIconButton::InnerHoverLargeImageTexture' has a wrong offset!");
static_assert(offsetof(USQRadialIconButton, InnerHoverInactiveColor) == 0x0003D8, "Member 'USQRadialIconButton::InnerHoverInactiveColor' has a wrong offset!");
static_assert(offsetof(USQRadialIconButton, InnerHoverHoveredColor) == 0x0003E8, "Member 'USQRadialIconButton::InnerHoverHoveredColor' has a wrong offset!");
static_assert(offsetof(USQRadialIconButton, InnerHoverPressedColor) == 0x0003F8, "Member 'USQRadialIconButton::InnerHoverPressedColor' has a wrong offset!");
static_assert(offsetof(USQRadialIconButton, OuterRimSmallImageTexture) == 0x000408, "Member 'USQRadialIconButton::OuterRimSmallImageTexture' has a wrong offset!");
static_assert(offsetof(USQRadialIconButton, OuterRimMediumImageTexture) == 0x000410, "Member 'USQRadialIconButton::OuterRimMediumImageTexture' has a wrong offset!");
static_assert(offsetof(USQRadialIconButton, OuterRimLargeImageTexture) == 0x000418, "Member 'USQRadialIconButton::OuterRimLargeImageTexture' has a wrong offset!");
static_assert(offsetof(USQRadialIconButton, OuterRimActiveColor) == 0x000420, "Member 'USQRadialIconButton::OuterRimActiveColor' has a wrong offset!");
static_assert(offsetof(USQRadialIconButton, OuterRimInactiveColor) == 0x000430, "Member 'USQRadialIconButton::OuterRimInactiveColor' has a wrong offset!");
static_assert(offsetof(USQRadialIconButton, IconSize) == 0x000440, "Member 'USQRadialIconButton::IconSize' has a wrong offset!");

// Class Squad.SQAASGraph
// 0x0018 (0x0278 - 0x0260)
class ASQAASGraph : public ASQUndirectedGraph
{
public:
	bool                                          bNodesHaveReplicated;                              // 0x0260(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D87[0x17];                                     // 0x0261(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddSourceNode(class USQGraphNodeComponent* Node);
	void PostNodeOwnerChanged(class USQCaptureZoneComponent* CaptureZone, uint8 Team);
	void RemoveSourceNode(class USQGraphNodeComponent* Node);

	void GetSourceNodes(TArray<class USQGraphNodeComponent*>& InOutNodes) const;
	void GetTeamSourceNodes(uint8 Team, TArray<class USQGraphNodeComponent*>& InOutNodes) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAASGraph">();
	}
	static class ASQAASGraph* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQAASGraph>();
	}
};
static_assert(alignof(ASQAASGraph) == 0x000008, "Wrong alignment on ASQAASGraph");
static_assert(sizeof(ASQAASGraph) == 0x000278, "Wrong size on ASQAASGraph");
static_assert(offsetof(ASQAASGraph, bNodesHaveReplicated) == 0x000260, "Member 'ASQAASGraph::bNodesHaveReplicated' has a wrong offset!");

// Class Squad.SQBaseHudWidget
// 0x0060 (0x02C8 - 0x0268)
class USQBaseHudWidget : public USQUserWidget
{
public:
	class UUserWidget*                            StateIndicators;                                   // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQAmmoWidget*                          AmmoWidget;                                        // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            SightRangeWidget;                                  // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQCompassMK2*                          CompassWidget;                                     // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            CaptureZoneWidget;                                 // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            FOBStatusWidget;                                   // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            StaminaWidget;                                     // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            VehicleHealthWidget;                               // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQApprovalQueueWidget*                 ApprovalQueueWidget;                               // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQSeatProgressWidget*                  SeatProgressWidget;                                // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQStagingTimerText*                    StagingTimerText;                                  // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            CenterDotWidget;                                   // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void InitWidget();
	void UpdateActiveState();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQBaseHudWidget">();
	}
	static class USQBaseHudWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQBaseHudWidget>();
	}
};
static_assert(alignof(USQBaseHudWidget) == 0x000008, "Wrong alignment on USQBaseHudWidget");
static_assert(sizeof(USQBaseHudWidget) == 0x0002C8, "Wrong size on USQBaseHudWidget");
static_assert(offsetof(USQBaseHudWidget, StateIndicators) == 0x000268, "Member 'USQBaseHudWidget::StateIndicators' has a wrong offset!");
static_assert(offsetof(USQBaseHudWidget, AmmoWidget) == 0x000270, "Member 'USQBaseHudWidget::AmmoWidget' has a wrong offset!");
static_assert(offsetof(USQBaseHudWidget, SightRangeWidget) == 0x000278, "Member 'USQBaseHudWidget::SightRangeWidget' has a wrong offset!");
static_assert(offsetof(USQBaseHudWidget, CompassWidget) == 0x000280, "Member 'USQBaseHudWidget::CompassWidget' has a wrong offset!");
static_assert(offsetof(USQBaseHudWidget, CaptureZoneWidget) == 0x000288, "Member 'USQBaseHudWidget::CaptureZoneWidget' has a wrong offset!");
static_assert(offsetof(USQBaseHudWidget, FOBStatusWidget) == 0x000290, "Member 'USQBaseHudWidget::FOBStatusWidget' has a wrong offset!");
static_assert(offsetof(USQBaseHudWidget, StaminaWidget) == 0x000298, "Member 'USQBaseHudWidget::StaminaWidget' has a wrong offset!");
static_assert(offsetof(USQBaseHudWidget, VehicleHealthWidget) == 0x0002A0, "Member 'USQBaseHudWidget::VehicleHealthWidget' has a wrong offset!");
static_assert(offsetof(USQBaseHudWidget, ApprovalQueueWidget) == 0x0002A8, "Member 'USQBaseHudWidget::ApprovalQueueWidget' has a wrong offset!");
static_assert(offsetof(USQBaseHudWidget, SeatProgressWidget) == 0x0002B0, "Member 'USQBaseHudWidget::SeatProgressWidget' has a wrong offset!");
static_assert(offsetof(USQBaseHudWidget, StagingTimerText) == 0x0002B8, "Member 'USQBaseHudWidget::StagingTimerText' has a wrong offset!");
static_assert(offsetof(USQBaseHudWidget, CenterDotWidget) == 0x0002C0, "Member 'USQBaseHudWidget::CenterDotWidget' has a wrong offset!");

// Class Squad.SQMenuItemWidgetStyle
// 0x01A0 (0x01D0 - 0x0030)
class USQMenuItemWidgetStyle final : public USlateWidgetStyleContainerBase
{
public:
	struct FSQMenuItemStyle                       MenuItemStyle;                                     // 0x0030(0x01A0)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMenuItemWidgetStyle">();
	}
	static class USQMenuItemWidgetStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMenuItemWidgetStyle>();
	}
};
static_assert(alignof(USQMenuItemWidgetStyle) == 0x000008, "Wrong alignment on USQMenuItemWidgetStyle");
static_assert(sizeof(USQMenuItemWidgetStyle) == 0x0001D0, "Wrong size on USQMenuItemWidgetStyle");
static_assert(offsetof(USQMenuItemWidgetStyle, MenuItemStyle) == 0x000030, "Member 'USQMenuItemWidgetStyle::MenuItemStyle' has a wrong offset!");

// Class Squad.SQMapLattice
// 0x0020 (0x0288 - 0x0268)
class USQMapLattice : public USQUserWidget
{
public:
	TArray<struct FSQLatticeLine>                 LatticeLines;                                      // 0x0268(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class USQCoreStateMapComponent*               MapComponent;                                      // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D8A[0x8];                                      // 0x0280(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DrawWidget(const struct FPaintContext& Context) const;
	const struct FVector2D WorldLocationToDrawLocation(const struct FVector& Location, const class USQMapWidgetBase* MapWidget) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapLattice">();
	}
	static class USQMapLattice* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapLattice>();
	}
};
static_assert(alignof(USQMapLattice) == 0x000008, "Wrong alignment on USQMapLattice");
static_assert(sizeof(USQMapLattice) == 0x000288, "Wrong size on USQMapLattice");
static_assert(offsetof(USQMapLattice, LatticeLines) == 0x000268, "Member 'USQMapLattice::LatticeLines' has a wrong offset!");
static_assert(offsetof(USQMapLattice, MapComponent) == 0x000278, "Member 'USQMapLattice::MapComponent' has a wrong offset!");

// Class Squad.SQRadialRoleIconButton
// 0x0070 (0x04B8 - 0x0448)
class USQRadialRoleIconButton : public USQRadialIconButton
{
public:
	bool                                          bIsUnavailable;                                    // 0x0448(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8C[0x3];                                      // 0x0449(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Cost;                                              // 0x044C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             CostBlock;                                         // 0x0450(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RimAvailableColor;                                 // 0x0458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RimUnAvailableColor;                               // 0x0468(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           IconUnavailableColor;                              // 0x0478(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InnerHoverUnavailableColor;                        // 0x0488(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQRoleSettings*                        ReferenceRole;                                     // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ISQRearmSource>        RearmSource;                                       // 0x04A0(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, UObjectWrapper, NativeAccessSpecifierPublic)
	class ASQPlayerController*                    OwnerPlayerController;                             // 0x04B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void UpdateLimit();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRadialRoleIconButton">();
	}
	static class USQRadialRoleIconButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRadialRoleIconButton>();
	}
};
static_assert(alignof(USQRadialRoleIconButton) == 0x000008, "Wrong alignment on USQRadialRoleIconButton");
static_assert(sizeof(USQRadialRoleIconButton) == 0x0004B8, "Wrong size on USQRadialRoleIconButton");
static_assert(offsetof(USQRadialRoleIconButton, bIsUnavailable) == 0x000448, "Member 'USQRadialRoleIconButton::bIsUnavailable' has a wrong offset!");
static_assert(offsetof(USQRadialRoleIconButton, Cost) == 0x00044C, "Member 'USQRadialRoleIconButton::Cost' has a wrong offset!");
static_assert(offsetof(USQRadialRoleIconButton, CostBlock) == 0x000450, "Member 'USQRadialRoleIconButton::CostBlock' has a wrong offset!");
static_assert(offsetof(USQRadialRoleIconButton, RimAvailableColor) == 0x000458, "Member 'USQRadialRoleIconButton::RimAvailableColor' has a wrong offset!");
static_assert(offsetof(USQRadialRoleIconButton, RimUnAvailableColor) == 0x000468, "Member 'USQRadialRoleIconButton::RimUnAvailableColor' has a wrong offset!");
static_assert(offsetof(USQRadialRoleIconButton, IconUnavailableColor) == 0x000478, "Member 'USQRadialRoleIconButton::IconUnavailableColor' has a wrong offset!");
static_assert(offsetof(USQRadialRoleIconButton, InnerHoverUnavailableColor) == 0x000488, "Member 'USQRadialRoleIconButton::InnerHoverUnavailableColor' has a wrong offset!");
static_assert(offsetof(USQRadialRoleIconButton, ReferenceRole) == 0x000498, "Member 'USQRadialRoleIconButton::ReferenceRole' has a wrong offset!");
static_assert(offsetof(USQRadialRoleIconButton, RearmSource) == 0x0004A0, "Member 'USQRadialRoleIconButton::RearmSource' has a wrong offset!");
static_assert(offsetof(USQRadialRoleIconButton, OwnerPlayerController) == 0x0004B0, "Member 'USQRadialRoleIconButton::OwnerPlayerController' has a wrong offset!");

// Class Squad.SQAASGraphLattice
// 0x0040 (0x02C8 - 0x0288)
class USQAASGraphLattice : public USQMapLattice
{
public:
	bool                                          bHidesUncapLinks;                                  // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8D[0x3];                                      // 0x0289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           LatticeNeutralColor;                               // 0x028C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LatticeEnemyColor;                                 // 0x029C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LatticeFriendlyColor;                              // 0x02AC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineThickness;                                     // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQAASGraph*                            Lattice;                                           // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAASGraphLattice">();
	}
	static class USQAASGraphLattice* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQAASGraphLattice>();
	}
};
static_assert(alignof(USQAASGraphLattice) == 0x000008, "Wrong alignment on USQAASGraphLattice");
static_assert(sizeof(USQAASGraphLattice) == 0x0002C8, "Wrong size on USQAASGraphLattice");
static_assert(offsetof(USQAASGraphLattice, bHidesUncapLinks) == 0x000288, "Member 'USQAASGraphLattice::bHidesUncapLinks' has a wrong offset!");
static_assert(offsetof(USQAASGraphLattice, LatticeNeutralColor) == 0x00028C, "Member 'USQAASGraphLattice::LatticeNeutralColor' has a wrong offset!");
static_assert(offsetof(USQAASGraphLattice, LatticeEnemyColor) == 0x00029C, "Member 'USQAASGraphLattice::LatticeEnemyColor' has a wrong offset!");
static_assert(offsetof(USQAASGraphLattice, LatticeFriendlyColor) == 0x0002AC, "Member 'USQAASGraphLattice::LatticeFriendlyColor' has a wrong offset!");
static_assert(offsetof(USQAASGraphLattice, LineThickness) == 0x0002BC, "Member 'USQAASGraphLattice::LineThickness' has a wrong offset!");
static_assert(offsetof(USQAASGraphLattice, Lattice) == 0x0002C0, "Member 'USQAASGraphLattice::Lattice' has a wrong offset!");

// Class Squad.SQGameRuleSet
// 0x0030 (0x0258 - 0x0228)
class ASQGameRuleSet : public AActor
{
public:
	TSubclassOf<class ASQRulesetState>            RulesetStateClass;                                 // 0x0228(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQRulesetState*                        RulesetState;                                      // 0x0230(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTickets;                                       // 0x0238(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8E[0x3];                                      // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RoundTimeOverride;                                 // 0x023C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 DisplayName;                                       // 0x0240(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRulesetEnabled;                                   // 0x0250(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D8F[0x7];                                      // 0x0251(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BPRulesetDisabled();
	void BPRulesetEnabled();
	void LogisticsDropOff(class AActor* VehicleActor, float AmmoDroppedOff, float ConstructionDroppedOff);
	void MatchIsWaitingToStart();
	void MatchStarted();
	void ModifySoldierInventory(class ASQSoldier* Soldier, ESQSpawnInventoryReason Reason);
	void NotifyPlayer(class ASQPlayerController* Player, const class FString& Message, ESQNotificationTypes NotificationType, const class FString& StreamerModeVariantMessage);
	void NotifyPlayerOnScoreEvent(class ASQPlayerController* Player, const struct FSQScoreEvent& ScoreEvent);
	void PlayerBandaged(class ASQPlayerController* Bandager, class ASQPlayerController* BandagedPlayer);
	void PlayerDied(class ASQPlayerController* Victim);
	void PlayerHealed(class ASQPlayerController* Healer, class ASQPlayerController* HealedPlayer);
	void PlayerJoined(class ASQPlayerController* NewPlayer);
	void PlayerJoinedTeam(class ASQPlayerController* Player, int32 TeamIndex);
	void PlayerKilled(class ASQPlayerController* Killer, class ASQPlayerController* Victim);
	void PlayerRevived(class ASQPlayerController* Reviver, class ASQPlayerController* RevivedPlayer);
	void PlayerSelfBandaged(class ASQPlayerController* Bandager);
	void PlayerSelfHealed(class ASQPlayerController* Healer);
	void PlayerSelfWound(class ASQPlayerController* Victim);
	void PlayerSpawned(class ASQPlayerController* NewPlayer);
	void PlayerSuicide(class ASQPlayerController* Victim);
	void PlayerTeamKilled(class ASQPlayerController* Killer, class ASQPlayerController* Victim);
	void PlayerTeamWounded(class ASQPlayerController* Killer, class ASQPlayerController* Victim);
	void PlayerWound(class ASQPlayerController* Victim);
	void PlayerWounded(class ASQPlayerController* Killer, class ASQPlayerController* Victim);
	void PostPlayerLogin(class APlayerController* Controller);
	void PostPlayerLogout(class AController* Controller);
	void PostPlayerSpawn(class ASQSoldier* SpawningSoldier);
	void RegisterActor(class AActor* Actor);
	void SecondPassed();
	void SendChatMessage(ESQChat ChatType, const class FString& Message, ESQTeam Team, int32 Squad, bool bBroadcastToAdmin, const class FString& StreamerModeVariantMessage);
	void SetRoundTimeOverride(int32 InRoundTimeOverride);
	void SetRulesetEnabled(const bool Value);
	void UnregisterActor(class AActor* Actor);
	void VehicleDestroyed(class ASQPlayerController* Killer, class ASQPlayerController* Victim, class ASQVehicle* DestroyedVehicle);

	class FString GetDisplayName() const;
	class ASQGameMode* GetGameMode() const;
	int32 GetRoundTimeOverride() const;
	int32 GetRoundTimeRemaining() const;
	bool GetRulesetEnabled() const;
	ESQReadyToEndMatch ReadyToEndMatch() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGameRuleSet">();
	}
	static class ASQGameRuleSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQGameRuleSet>();
	}
};
static_assert(alignof(ASQGameRuleSet) == 0x000008, "Wrong alignment on ASQGameRuleSet");
static_assert(sizeof(ASQGameRuleSet) == 0x000258, "Wrong size on ASQGameRuleSet");
static_assert(offsetof(ASQGameRuleSet, RulesetStateClass) == 0x000228, "Member 'ASQGameRuleSet::RulesetStateClass' has a wrong offset!");
static_assert(offsetof(ASQGameRuleSet, RulesetState) == 0x000230, "Member 'ASQGameRuleSet::RulesetState' has a wrong offset!");
static_assert(offsetof(ASQGameRuleSet, bUseTickets) == 0x000238, "Member 'ASQGameRuleSet::bUseTickets' has a wrong offset!");
static_assert(offsetof(ASQGameRuleSet, RoundTimeOverride) == 0x00023C, "Member 'ASQGameRuleSet::RoundTimeOverride' has a wrong offset!");
static_assert(offsetof(ASQGameRuleSet, DisplayName) == 0x000240, "Member 'ASQGameRuleSet::DisplayName' has a wrong offset!");
static_assert(offsetof(ASQGameRuleSet, bRulesetEnabled) == 0x000250, "Member 'ASQGameRuleSet::bRulesetEnabled' has a wrong offset!");

// Class Squad.SQReplayObject
// 0x0058 (0x0080 - 0x0028)
class USQReplayObject : public UObject
{
public:
	FMulticastInlineDelegateProperty_             RequestFullReload;                                 // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             RequestWidgetReload;                               // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 ReplayPath;                                        // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReplayName;                                        // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsNamedReplay;                                    // 0x0068(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D96[0x7];                                      // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              DateCreated;                                       // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         SizeInBytes;                                       // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void DeleteReplay();
	void PlayReplay();
	bool SetupReplayObject(const class FString& ReplayFullPath, bool bCreateAsNamedReplay);
	ESQRenameReplayResponse TryRenameReplay(const class FString& NewName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQReplayObject">();
	}
	static class USQReplayObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQReplayObject>();
	}
};
static_assert(alignof(USQReplayObject) == 0x000008, "Wrong alignment on USQReplayObject");
static_assert(sizeof(USQReplayObject) == 0x000080, "Wrong size on USQReplayObject");
static_assert(offsetof(USQReplayObject, RequestFullReload) == 0x000028, "Member 'USQReplayObject::RequestFullReload' has a wrong offset!");
static_assert(offsetof(USQReplayObject, RequestWidgetReload) == 0x000038, "Member 'USQReplayObject::RequestWidgetReload' has a wrong offset!");
static_assert(offsetof(USQReplayObject, ReplayPath) == 0x000048, "Member 'USQReplayObject::ReplayPath' has a wrong offset!");
static_assert(offsetof(USQReplayObject, ReplayName) == 0x000058, "Member 'USQReplayObject::ReplayName' has a wrong offset!");
static_assert(offsetof(USQReplayObject, bIsNamedReplay) == 0x000068, "Member 'USQReplayObject::bIsNamedReplay' has a wrong offset!");
static_assert(offsetof(USQReplayObject, DateCreated) == 0x000070, "Member 'USQReplayObject::DateCreated' has a wrong offset!");
static_assert(offsetof(USQReplayObject, SizeInBytes) == 0x000078, "Member 'USQReplayObject::SizeInBytes' has a wrong offset!");

// Class Squad.SQPawnMovementComponent
// 0x0068 (0x01A0 - 0x0138)
class alignas(0x10) USQPawnMovementComponent : public UPawnMovementComponent
{
public:
	struct FSQMovePostPhysicsTickFunction         PostPhysicsTickFunction;                           // 0x0138(0x0030)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_D99[0x28];                                     // 0x0168(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bJustTeleported : 1;                               // 0x0190(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIgnoreBaseRotation : 1;                           // 0x0190(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseControllerDesiredRotation : 1;                 // 0x0190(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOrientRotationToMovement : 1;                     // 0x0190(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFastAttachedMove : 1;                             // 0x0190(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRunPhysicsWithNoController : 1;                   // 0x0190(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D9A[0xF];                                      // 0x0191(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UPrimitiveComponent* GetMovementBase() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQPawnMovementComponent">();
	}
	static class USQPawnMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQPawnMovementComponent>();
	}
};
static_assert(alignof(USQPawnMovementComponent) == 0x000010, "Wrong alignment on USQPawnMovementComponent");
static_assert(sizeof(USQPawnMovementComponent) == 0x0001A0, "Wrong size on USQPawnMovementComponent");
static_assert(offsetof(USQPawnMovementComponent, PostPhysicsTickFunction) == 0x000138, "Member 'USQPawnMovementComponent::PostPhysicsTickFunction' has a wrong offset!");

// Class Squad.SQGameModeRuleset
// 0x0038 (0x0290 - 0x0258)
class ASQGameModeRuleset : public ASQGameRuleSet
{
public:
	TArray<struct FSQInventoryMod>                InventoryModifications;                            // 0x0258(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   PlayerJoinedMessageToPlayer;                       // 0x0268(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FSQGameModeRules>               RulesToBeShownWhenPlayersJoinATeam;                // 0x0280(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	void SendMessageToPlayer(class ASQPlayerController* Player, const class FString& Message, const struct FLinearColor& Color, float MessageLifetime);

	void SetWinningTeam(class ASQTeam* Team) const;
	void SetWinningTeamFromEnum(ESQTeam Team) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGameModeRuleset">();
	}
	static class ASQGameModeRuleset* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQGameModeRuleset>();
	}
};
static_assert(alignof(ASQGameModeRuleset) == 0x000008, "Wrong alignment on ASQGameModeRuleset");
static_assert(sizeof(ASQGameModeRuleset) == 0x000290, "Wrong size on ASQGameModeRuleset");
static_assert(offsetof(ASQGameModeRuleset, InventoryModifications) == 0x000258, "Member 'ASQGameModeRuleset::InventoryModifications' has a wrong offset!");
static_assert(offsetof(ASQGameModeRuleset, PlayerJoinedMessageToPlayer) == 0x000268, "Member 'ASQGameModeRuleset::PlayerJoinedMessageToPlayer' has a wrong offset!");
static_assert(offsetof(ASQGameModeRuleset, RulesToBeShownWhenPlayersJoinATeam) == 0x000280, "Member 'ASQGameModeRuleset::RulesToBeShownWhenPlayersJoinATeam' has a wrong offset!");

// Class Squad.SQNetMoveComponent
// 0x0060 (0x0200 - 0x01A0)
class USQNetMoveComponent : public USQPawnMovementComponent
{
public:
	bool                                          bPerformMoveOnServer;                              // 0x01A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9C[0x3];                                      // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxPendingMoveDelay;                               // 0x01A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxStartLocationDifference;                        // 0x01A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveTimestampQuantum;                              // 0x01AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldInterpolate;                                // 0x01B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9D[0x3];                                      // 0x01B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinTimeBetweenTimeStampResets;                     // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSmoothNetUpdateDist;                            // 0x01B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoSmoothNetUpdateDist;                             // 0x01BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9E[0x8];                                      // 0x01C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 LatestPackedMove;                                  // 0x01C8(0x0010)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9F[0x28];                                     // 0x01D8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_LatestPackedMove();
	void SendClientCorrection(const TArray<uint8>& PackedMove);
	void SendPackedMoveRPC(const TArray<uint8>& PackedMove);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQNetMoveComponent">();
	}
	static class USQNetMoveComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQNetMoveComponent>();
	}
};
static_assert(alignof(USQNetMoveComponent) == 0x000010, "Wrong alignment on USQNetMoveComponent");
static_assert(sizeof(USQNetMoveComponent) == 0x000200, "Wrong size on USQNetMoveComponent");
static_assert(offsetof(USQNetMoveComponent, bPerformMoveOnServer) == 0x0001A0, "Member 'USQNetMoveComponent::bPerformMoveOnServer' has a wrong offset!");
static_assert(offsetof(USQNetMoveComponent, MaxPendingMoveDelay) == 0x0001A4, "Member 'USQNetMoveComponent::MaxPendingMoveDelay' has a wrong offset!");
static_assert(offsetof(USQNetMoveComponent, MaxStartLocationDifference) == 0x0001A8, "Member 'USQNetMoveComponent::MaxStartLocationDifference' has a wrong offset!");
static_assert(offsetof(USQNetMoveComponent, MoveTimestampQuantum) == 0x0001AC, "Member 'USQNetMoveComponent::MoveTimestampQuantum' has a wrong offset!");
static_assert(offsetof(USQNetMoveComponent, bShouldInterpolate) == 0x0001B0, "Member 'USQNetMoveComponent::bShouldInterpolate' has a wrong offset!");
static_assert(offsetof(USQNetMoveComponent, MinTimeBetweenTimeStampResets) == 0x0001B4, "Member 'USQNetMoveComponent::MinTimeBetweenTimeStampResets' has a wrong offset!");
static_assert(offsetof(USQNetMoveComponent, MaxSmoothNetUpdateDist) == 0x0001B8, "Member 'USQNetMoveComponent::MaxSmoothNetUpdateDist' has a wrong offset!");
static_assert(offsetof(USQNetMoveComponent, NoSmoothNetUpdateDist) == 0x0001BC, "Member 'USQNetMoveComponent::NoSmoothNetUpdateDist' has a wrong offset!");
static_assert(offsetof(USQNetMoveComponent, LatestPackedMove) == 0x0001C8, "Member 'USQNetMoveComponent::LatestPackedMove' has a wrong offset!");

// Class Squad.SQAASRuleset
// 0x0008 (0x0298 - 0x0290)
class ASQAASRuleset : public ASQGameModeRuleset
{
public:
	class ASQAASGraph*                            GraphActor;                                        // 0x0290(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void LatticeUpdated();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAASRuleset">();
	}
	static class ASQAASRuleset* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQAASRuleset>();
	}
};
static_assert(alignof(ASQAASRuleset) == 0x000008, "Wrong alignment on ASQAASRuleset");
static_assert(sizeof(ASQAASRuleset) == 0x000298, "Wrong size on ASQAASRuleset");
static_assert(offsetof(ASQAASRuleset, GraphActor) == 0x000290, "Member 'ASQAASRuleset::GraphActor' has a wrong offset!");

// Class Squad.SQRearmSource
// 0x0000 (0x0028 - 0x0028)
class ISQRearmSource final : public IInterface
{
public:
	bool BindEventToAmmoUpdated(const TDelegate<void()>& Delegate);
	bool ConsumeAmmo(float AmmoRequired);
	class FString GetRearmNoAmmoString();
	class FString GetRearmSuccessString();
	bool UnbindEventToAmmoUpdated(const TDelegate<void()>& Delegate);

	bool CanRearmPawn(const class APawn* Rearmer) const;
	bool CanRearmWeapon(const class ASQEquipableItem* Weapon) const;
	float GetAmmo() const;
	ESQRearmType GetRearmType() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRearmSource">();
	}
	static class ISQRearmSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISQRearmSource>();
	}
};
static_assert(alignof(ISQRearmSource) == 0x000008, "Wrong alignment on ISQRearmSource");
static_assert(sizeof(ISQRearmSource) == 0x000028, "Wrong size on ISQRearmSource");

// Class Squad.SQBasicMoveComponent
// 0x0010 (0x0210 - 0x0200)
class USQBasicMoveComponent final : public USQNetMoveComponent
{
public:
	float                                         MovementSpeed;                                     // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA5[0xC];                                      // 0x0204(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQBasicMoveComponent">();
	}
	static class USQBasicMoveComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQBasicMoveComponent>();
	}
};
static_assert(alignof(USQBasicMoveComponent) == 0x000010, "Wrong alignment on USQBasicMoveComponent");
static_assert(sizeof(USQBasicMoveComponent) == 0x000210, "Wrong size on USQBasicMoveComponent");
static_assert(offsetof(USQBasicMoveComponent, MovementSpeed) == 0x000200, "Member 'USQBasicMoveComponent::MovementSpeed' has a wrong offset!");

// Class Squad.SQAction
// 0x0058 (0x0280 - 0x0228)
class ASQAction final : public AActor
{
public:
	class USQActionSettings*                      Setting;                                           // 0x0228(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQActionParameters                    Parameters;                                        // 0x0230(0x0040)(Edit, BlueprintVisible, Net, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Team;                                              // 0x0270(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AController>             DamageInstigatorController;                        // 0x0274(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_DA6[0x4];                                      // 0x027C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAction">();
	}
	static class ASQAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQAction>();
	}
};
static_assert(alignof(ASQAction) == 0x000010, "Wrong alignment on ASQAction");
static_assert(sizeof(ASQAction) == 0x000280, "Wrong size on ASQAction");
static_assert(offsetof(ASQAction, Setting) == 0x000228, "Member 'ASQAction::Setting' has a wrong offset!");
static_assert(offsetof(ASQAction, Parameters) == 0x000230, "Member 'ASQAction::Parameters' has a wrong offset!");
static_assert(offsetof(ASQAction, Team) == 0x000270, "Member 'ASQAction::Team' has a wrong offset!");
static_assert(offsetof(ASQAction, DamageInstigatorController) == 0x000274, "Member 'ASQAction::DamageInstigatorController' has a wrong offset!");

// Class Squad.SQRadialDeployableButton
// 0x00B0 (0x04F8 - 0x0448)
class USQRadialDeployableButton : public USQRadialIconButton
{
public:
	struct FLinearColor                           TextUnAvailableColor;                              // 0x0448(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TextAvailableColor;                                // 0x0458(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RimAvailableColor;                                 // 0x0468(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RimUnAvailableColor;                               // 0x0478(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           IconUnavailableColor;                              // 0x0488(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InnerHoverUnavailableColor;                        // 0x0498(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQAvailabilityState_Deployable        RelatedDeployableState;                            // 0x04A8(0x0050)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void UpdateDetailText();

	void GetDetailText(class FText* DetailText) const;
	bool IsAvailable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRadialDeployableButton">();
	}
	static class USQRadialDeployableButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRadialDeployableButton>();
	}
};
static_assert(alignof(USQRadialDeployableButton) == 0x000008, "Wrong alignment on USQRadialDeployableButton");
static_assert(sizeof(USQRadialDeployableButton) == 0x0004F8, "Wrong size on USQRadialDeployableButton");
static_assert(offsetof(USQRadialDeployableButton, TextUnAvailableColor) == 0x000448, "Member 'USQRadialDeployableButton::TextUnAvailableColor' has a wrong offset!");
static_assert(offsetof(USQRadialDeployableButton, TextAvailableColor) == 0x000458, "Member 'USQRadialDeployableButton::TextAvailableColor' has a wrong offset!");
static_assert(offsetof(USQRadialDeployableButton, RimAvailableColor) == 0x000468, "Member 'USQRadialDeployableButton::RimAvailableColor' has a wrong offset!");
static_assert(offsetof(USQRadialDeployableButton, RimUnAvailableColor) == 0x000478, "Member 'USQRadialDeployableButton::RimUnAvailableColor' has a wrong offset!");
static_assert(offsetof(USQRadialDeployableButton, IconUnavailableColor) == 0x000488, "Member 'USQRadialDeployableButton::IconUnavailableColor' has a wrong offset!");
static_assert(offsetof(USQRadialDeployableButton, InnerHoverUnavailableColor) == 0x000498, "Member 'USQRadialDeployableButton::InnerHoverUnavailableColor' has a wrong offset!");
static_assert(offsetof(USQRadialDeployableButton, RelatedDeployableState) == 0x0004A8, "Member 'USQRadialDeployableButton::RelatedDeployableState' has a wrong offset!");

// Class Squad.SQBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class USQBlueprintLibrary : public UBlueprintFunctionLibrary
{
public:
	static void ActivateReverbEffectFixed(class UObject* WorldContextObject, class UReverbEffect* ReverbEffect, const class FName& TagName, float Priority, float Volume, float FadeTime);
	static struct FVector2D AdjustPositionForTextAlignment(const struct FVector2D& OriginalRenderPosition, const struct FVector2D& TextSize, ESQTextHorizontalAlignment HorizontalAlignment, ESQTextVerticalAlignment VerticalAlignment);
	static void ApplyAcceleration(float TimeToMid, float Midpoint, float Position, float Velocity, float Acceleration, float DeltaTime, float* NewPosition, float* NewVelocity, float* TimeLeft);
	static void ApplyDeceleration(float Position, float Velocity, float Acceleration, float TimeLeft, float* NewPosition, float* NewVelocity);
	static struct FDateTime ApplyGlobalTimeDilationOnDateTime(const class UObject* WorldContextObject, const struct FDateTime& InTime);
	static struct FTimespan ApplyGlobalTimeDilationOnTimeSpan(const class UObject* WorldContextObject, const struct FTimespan& InDelay);
	static bool ApplyHitResultRadialDamageWithFalloff(const class UObject* WorldContextObject, const struct FHitResult& HitResult, float BaseDamage, float MinimumDamage, const struct FVector& Origin, float KillZoneRadius, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, TSubclassOf<class UDamageType> DamageTypeClass, const TArray<class AActor*>& IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, bool bOnlyDamageMeshes, ECollisionChannel DamagePreventionChannel);
	static void ApplyOppositeAcceleration(float Target, float Position, float Velocity, float OppositeAcceleration, float DeltaTime, float* NewPosition, float* NewVelocity, float* TimeLeft);
	static bool ApplyRadialDamageWithFalloff(const class UObject* WorldContextObject, float BaseDamage, float MinimumDamage, const struct FVector& Origin, float KillZoneRadius, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, TSubclassOf<class UDamageType> DamageTypeClass, const TArray<class AActor*>& IgnoreActors, class AActor* DamageCauser, class AController* InstigatedByController, bool bOnlyDamageMeshes, ECollisionChannel DamagePreventionChannel);
	static struct FDateTime ApplyTimeDilationFactorOnDateTime(const struct FDateTime& InTime, float InTimeDilationFactor);
	static struct FTimespan ApplyTimeDilationFactorOnTimeSpan(const struct FTimespan& InDelay, float InTimeDilationFactor);
	static TArray<struct FAudioComponentParam> AssembleSoldierAudioParameters(const class ASQSoldier* Soldier, bool bSetSpeedParameter, bool bSetFloorPhysMatParameter, bool bSetWaterDepthParameter);
	static void AsyncLoadClass(TSoftClassPtr<class UClass> Param_Class, TDelegate<void(TSoftClassPtr<class UClass> Class)> OnLoad);
	static void AsyncLoadClasses(const TArray<TSoftClassPtr<class UClass>>& Classes, TDelegate<void(TArray<TSoftClassPtr<class UClass>>& Classes)> OnLoad);
	static void BreakFullHitResult(const struct FHitResult& Hit, struct FVector* Location, struct FVector* Normal, struct FVector* ImpactPoint, struct FVector* ImpactNormal, struct FVector* TraceStart, struct FVector* TraceEnd, bool* bBlockingHit, bool* bStartPenetrating, float* PenetrationDepth, float* Time, class UPhysicalMaterial** PhysMat, class AActor** HitActor, class UPrimitiveComponent** HitComponent, class FName* HitBoneName, int32* HitItem, int32* HitFaceIndex);
	static void BreakInputActionKeyMapping(const struct FInputActionKeyMapping& KeyMapping, class FName* ActionName, struct FKey* Key, bool* bShift, bool* bCtrl, bool* bAlt, bool* bCmd);
	static void BreakInputAxisKeyMapping(const struct FInputAxisKeyMapping& KeyMapping, class FName* ActionName, struct FKey* Key, float* Scale);
	static void CalcMidpoint(float Target, float Position, float Velocity, float Acceleration, float* Midpoint);
	static void CalcTimeToMid(float Midpoint, float Position, float Velocity, float Acceleration, float* TimeToMid);
	static float CalculateAmmoCostToSwapRole(const class USQRoleSettings* NewRole);
	static void CaptureComponent2D_DeProject(class USceneCaptureComponent2D* Target, const struct FVector2D& ScreenPos, struct FVector* OutWorldOrigin, struct FVector* OutWorldDirection);
	static bool CaptureComponent2D_Project(class USceneCaptureComponent2D* Target, const struct FVector& Location, struct FVector2D* OutPixelLocation);
	static void CenterMousePosition(const class UObject* WorldContextObject);
	static float ClampDelta(float InDelta, float Current, float Min, float Max);
	static float ClampDeltaAngle(float InDeltaAngle, float CurrentAngle, float MinAngle, float MaxAngle);
	static void ClampVector(struct FVector& Vector, const struct FVector& Min, const struct FVector& Max);
	static bool ClassIsChildOfSoft(const TSubclassOf<class UObject> TestClass, const TSoftClassPtr<class UClass> SoftParentClass);
	static struct FVector ClosestPointOnLine(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FVector& Point);
	static bool ComponentIsDamageableFrom(class UPrimitiveComponent* VictimComp, const struct FVector& Origin, class AActor* IgnoredActor, const TArray<class AActor*>& IgnoreActors, struct FHitResult* OutHitResult);
	static int32 ConvertByteTo(int32 A, ESQByteUnit From, ESQByteUnit To, int32* Remaining);
	static int64 ConvertByteTo_I64(int64 A, ESQByteUnit From, ESQByteUnit To, int64* Remaining);
	static void ConvertNumberToGridLetter(class FString* OutResult, int32 Value);
	static class UTextureRenderTargetCube* CreateRenderTargetCube(class UObject* WorldContextObject, int32 Size, EPixelFormat Format, const struct FLinearColor& ClearColor, bool bHDR, bool bForceLinearGamma);
	static bool DoesCustomServerSettingExist(const class FString& PropertyName);
	static bool DoesStringContainDeveloperString(const class FString& InString);
	static void DrawCircle(const class UObject* WorldContextObject, const struct FVector& Location, const struct FVector& Direction, float Radius, int32 NumSides, const struct FColor& Color, uint8 DepthPriority, float Lifetime, float Thickness);
	static void DrawTextFormattedWithFontInfo(struct FPaintContext& Context, const class FText& Text, const struct FVector2D& Position, struct FSlateFontInfo* FontInfo, const struct FLinearColor& Tint);
	static void DumpStaticMeshDrawListStats(class UObject* WorldContextObject);
	static bool FileLoadString(const class FString& Filename, class FString* OutText);
	static bool FileSaveString(const class FString& Filename, const class FString& InText);
	static TArray<class UActorComponent*> FindDefaultComponentsByClass(const TSubclassOf<class AActor> InActorClass, const TSubclassOf<class UActorComponent> InComponentClass);
	static class ASQPlayerController* FindPlayerByNameOrId(class UWorld* World, const class FString& NameOrId);
	static class ASQPlayerController* FindPlayerByPlayerId(class UWorld* World, int32 PlayerId);
	static class FText FormatTextActionKeys(const class FText& FormatText, const TArray<class FName>& ActionKeys);
	static TArray<class UMaterialInstanceDynamic*> GenerateOrRetrieveDynamicMaterial(class UMeshComponent* Mesh);
	static struct FKey GetAcceptKey();
	static void GetActionKeyName(const class FName& ActionName, class FName* Param_Name);
	static float GetActorHalfHeight(const class AActor* TestActor);
	static void GetAllClassesInheritingFrom(class UClass* BaseClass, TArray<struct FSoftClassPath>* OutSubClasses);
	static void GetAllComponentsOfClass(class AActor* WorldContextObject, TSubclassOf<class UActorComponent> Param_Class, TArray<class UObject*>* Components);
	static void GetAllKeybindsBackups(TArray<class FString>* Backups);
	static void GetAllKeyMappings(TArray<struct FInputActionKeyMapping>* KeyMappings);
	static class FString GetAlphabetLetterString(int32 Param_Index);
	static struct FVector GetAttachParentVelocity(const class AActor* Actor, int32 MaxIterations);
	static struct FAudioComponentParam GetAudioComponentParamFromPhysMat(class UPhysicalMaterial* PhysMat);
	static TArray<struct FAudioComponentParam> GetAudioComponentParamsArrayFromPhysMat(class UPhysicalMaterial* PhysMat);
	static struct FKey GetCancelKey();
	static void GetCanvasSize(class UCanvas* Canvas, int32* SizeX, int32* SizeY);
	static void GetComponentTransform(class USceneComponent* Component, struct FTransform* OutTransform);
	static class FString GetCurrentMapName(class UObject* WorldContextObject);
	static void GetCustomServerSetting(const class FString& PropertyName, const class FString& DefaultValue, class FString* OutResult);
	static bool GetCustomServerSettingAsBool(const class FString& PropertyName, const bool DefaultValue);
	static float GetCustomServerSettingAsFloat(const class FString& PropertyName, const float DefaultValue);
	static int32 GetCustomServerSettingAsInt(const class FString& PropertyName, const int32 DefaultValue);
	static class UObject* GetDefaultObjectFor(class UClass* Param_Class);
	static float GetDLSSScaleMultiplier();
	static float GetDynamicEasingPosition(const struct FSQDynamicEasingStruct& Easing);
	static TSoftObjectPtr<class UTexture2D> GetFallbackLoadingBackground();
	static float GetFsrScaleMultiplier(const float FSR2AdditionalMultiplier);
	static class FString GetGameVersion();
	static void GetGameVersionInfo(class FString* Variant, int32* Major, int32* Minor, int32* Build, int32* Revision);
	static int32 GetIntFromFName(const class FName& Param_Name);
	static int32 GetIntFromPhysMat(class UPhysicalMaterial* PhysMat);
	static void GetKeyDisplayName(const struct FKey& Key, class FText* OutDisplayName);
	static int32 GetKeyFromValue(const TMap<int32, int32>& Map, int32 Value);
	static void GetKeyName(const struct FKey& Key, class FName* OutName);
	static void GetKeysMapedToAxis(const class FName& AxisName, bool Negative, TArray<struct FInputAxisKeyMapping>* Keys);
	static void GetKeysMappedToAction(const class FName& ActionName, TArray<struct FKey>* Keys);
	static class FText GetKeysMappedToActionText(const class FName& ActionName);
	static float GetLastRenderTime(class UPrimitiveComponent* Component);
	static class FString GetMajorMinorVersion(const class FString& RawVersion);
	static float GetMicrophoneVolume();
	static class FString GetNatoPhoneticString(int32 Param_Index);
	static class FString GetNetMode();
	static int32 GetNumSections(class UStaticMesh* StaticMesh, int32 LOD);
	static int32 GetNumTexCoords(class UStaticMesh* StaticMesh, int32 LOD);
	static int32 GetNumTriangles(class UStaticMesh* StaticMesh, int32 LOD);
	static int32 GetNumVertices(class UStaticMesh* StaticMesh, int32 LOD);
	static TArray<struct FHitResult> GetOverlapHitInfos(class UPrimitiveComponent* Target);
	static void GetPiPLensMeshCornersWorldPos(const class USQPipScopeCaptureComponent* PiPComponent, struct FVector* OutBotLeft, struct FVector* OutTopRight, struct FVector* OutTopLeft, struct FVector* OutBotRight);
	static int32 GetPreviousLODLevel_DEPRECATED(class UStaticMeshComponent* Component);
	static void GetPrimaryDisplaySize(int32* Width, int32* Height);
	static void GetScreenSize(class USceneComponent* PrimComp, const struct FVector& CameraOrigin, float* OutScreenSize, float* OutDistance);
	static float GetScreenSizeFromBounds(float BoundsRadius, float FOV, float Distance);
	static struct FSlateColor GetServerHealthSlateColor(class UObject* WorldContextObject, int32 ServerHealth);
	static void GetServerHealthValues(float* ServerHealthLow, float* ServerHealthHigh);
	static class USQServerTagManager* GetServerTagManager(class UObject* WorldContextObject);
	static struct FVector GetSpringPos3D(const struct FSQSpringInterpStruct3D& Spring);
	static class USQGameInstance* GetSquadGameInstance(class UObject* WorldContextObject);
	static class ASQGameSession* GetSquadGameSession(class UObject* WorldContextObject);
	static class USQGameUserSettings* GetSquadGameUserSettings();
	static void GetSquadPhysMat(class UPhysicalMaterial* PhysMat, class USQPhysicalMaterial** SquadPhysMat);
	static struct FVector2D GetTextSize(const struct FSlateFontInfo& FontInfo, const class FText& Text, const float ScaleUI);
	static struct FSQTextureMemoryStats GetTextureMemoryStats();
	static float GetUpscalerMultiplier();
	static class AWorldSettings* GetWorldSettings(class UObject* WorldContextObject);
	static float GetXeSSScaleMultiplier();
	static float GetZoomedFOV(float MagnificationDesired, float DefaultFOV);
	static bool InMainMenu(class UObject* WorldContextObject);
	static bool IsActorWithinDistanceToLocalPlayer(ESQReturnBool* Branches, const class AActor* OtherActor, const float DistanceInMeters);
	static bool IsDataTableRowOfStruct(const class UDataTable* Table, const class FName RowStructName);
	static bool IsGamepadKey(const struct FKey& Key);
	static bool IsLocationWithinDistanceToLocalPlayer(ESQReturnBool* Branches, const struct FVector& OtherLocation, const float DistanceInMeters);
	static bool IsMicrophoneAbleToCapture(class FString* OutErrorMessage);
	static bool IsNearlyEqualOrLess(float A, float B, float Tolerance);
	static bool IsPlayingInEditor();
	static bool IsQueueEnabled();
	static bool IsShippingBuild();
	static bool IsSimulatingInEditor();
	static bool IsStandalone();
	static bool IsStandaloneOrListenServer();
	static bool IsUltraWideResolution();
	static bool IsUnderTerrain(const class UObject* WorldContextObject, const struct FVector& StartTrace, const class AActor* InIgnoreActor, const float TraceDistance, const bool bTraceMustImpactAboveToBeUnderTerrain);
	static bool IsValidKey(const struct FKey& Key);
	static void LoadCredits(TArray<struct FSQCreditsList>* OutCreditsList);
	static void LogError(const class FString& Contents);
	static void LogMapMarkerError(const class FString& Contents, const int32 SquadId, const int32 TeamId, const int32 FireTeamId, const struct FVector_NetQuantize& Location, const class USQMapMarkerDataAsset* MapMarkerDataAsset);
	static void LogUnusedProperties(class UObject* Object);
	static bool MapIconEnabledDefined();
	static bool MapIconVisibleDefined();
	static bool MapMarkersEnabledDefined();
	static bool MarkAssetPackageDirty(class UObject* Asset);
	static bool MatchInProgress(class UObject* WorldContextObject);
	static bool MatchWaitingAfterCompletion(class UObject* WorldContextObject);
	static bool MatchWaitingToStart(class UObject* WorldContextObject);
	static bool ModdedServersOnTop();
	static bool NameLexicalLess(const class FName& A, const class FName& B);
	static float NormalizeAngle(float InAngle);
	static void OffsetSpring3D(struct FSQSpringInterpStruct3D& Spring, const struct FVector& PosOffset);
	static bool OWICoreStateEnabledDefined();
	static bool OWICoreStateVisibleDefined();
	static void PlaySoldierMovementFoleySound(const class ASQSoldier* Soldier, class USoundBase* Sound, bool bSetSpeedParameter, bool bSetPhysMatParameter, bool bSetWaterDepthParameter, const struct FVector& LocationOffset, float VolumeMultiplier, float PitchMultiplier, float StartTime, const class USoundAttenuation* AttenuationSettings, const class USoundConcurrency* ConcurrencySettings, EAttachLocation LocationType);
	static void PlaySound2DWithParameters(class UObject* WorldContextObject, class USoundBase* Sound, const TArray<struct FAudioComponentParam>& AudioParameters, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundConcurrency* ConcurrencySettings);
	static void PlaySoundAtLocationWithParameters(class UObject* WorldContextObject, class USoundBase* Sound, const struct FVector& Location, const TArray<struct FAudioComponentParam>& AudioParameters, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings);
	static void PrintHitResult(const struct FHitResult& Hit);
	static void PrintShotInfo(const struct FSQShotInfo& Shot);
	static struct FTransform RebaseTransformLocalOriginOntoZero(class UObject* WorldContextObject, const struct FTransform& LocalTransform);
	static struct FTransform RebaseTransformZeroOriginOntoLocal(class UObject* WorldContextObject, const struct FTransform& ZeroTransform);
	static void RebindAxisKey(const struct FInputAxisKeyMapping& Mapping, const struct FKey& NewKey);
	static void RebindKey(const class FName& ActionName, const struct FKey& NewKey, int32 OccuranceIndex);
	static void SaveAndForceRebuildingKeyMaps(const bool bRestoreDefaults);
	static bool ServerHealthEnabled();
	static bool ServerLicensingNoticeNeeded();
	static void SetActorCollisionInGame(class AActor* ActorToAffect, bool bNewCollisionEnabled, bool bPropagateToAttachedChildren);
	static void SetActorComponentStablyNamed(class UActorComponent* ActorComponent);
	static void SetActorHiddenInGame(class AActor* ActorToAffect, bool bNewHidden, bool bPropagateToAttachedChildren);
	static void SetActorTickGroup(class AActor* Target, ETickingGroup NewTickGroup);
	static void SetComponentTickGroup(class UActorComponent* Target, ETickingGroup NewTickGroup);
	static void SetDynamicEasingTarget(struct FSQDynamicEasingStruct& Easing, float NewTarget);
	static void SetMasterPoseComponent(class USkeletalMeshComponent* Target, class USkeletalMeshComponent* Master);
	static bool SetMicrophoneForceAutoGain(bool bInValue);
	static void SetMobility(class USceneComponent* Target, EComponentMobility NewMobility);
	static void SetMousePosition(const class UObject* WorldContextObject, int32 X, int32 Y);
	static void SetSkeletalMeshCanTick(class AActor* Actor, bool bEnable, const TSet<class USkeletalMeshComponent*>& Exclude);
	static void SetSkeletalMeshMaxTickrate(class AActor* Actor, float Tickrate, const TSet<class USkeletalMeshComponent*>& Exclude);
	static void SetSkeletalPhysMaterialOverride(class USkeletalMeshComponent* Component, class UPhysicalMaterial* NewPhysMaterial);
	static void SetTextureRenderTarget2DSize(class UTextureRenderTarget2D* Texture, int32 SizeX, int32 SizeY);
	static TArray<class FName> SortNameArray(const TArray<class FName>& Array);
	static class ASQLastingEffect* SpawnLastingEffect(class UObject* WorldContextObject, const TSubclassOf<class ASQLastingEffect>& LastingEffect, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, ESpawnActorCollisionHandlingMethod CollisionHandlingMethod);
	static class UAudioComponent* SpawnSoundAttachedWithParameters(class USoundBase* Sound, class USceneComponent* AttachToComponent, const TArray<struct FAudioComponentParam>& AudioParameters, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings);
	static void SQLogMessage(const class FText& Message, EBPLogSeverity MessageType);
	static void SQLogOutputAndMessage(const class UObject* Target, const EBPLogSeverity Severity, const class FString& Message);
	static struct FVector TransformPiPScopeUVToWorldPos(const class USQPipScopeCaptureComponent* PiPComponent, const struct FVector2D& UV);
	static struct FVector TransformPointToNewFOV(const struct FVector& WorldPos, const struct FMatrix& ViewMatrix, float PlayerFOV, float SeparateWeaponFOV);
	static struct FVector TransformWorldPosToPiPScopeWorldPos(class USQPipScopeCaptureComponent* PiPComponent, const struct FVector& WorldPos, struct FVector2D* OutUVPoint);
	static struct FVector TransformWorldVectorToTangent(const struct FVector& WorldVector, const struct FVector& WorldTangentX, const struct FVector& WorldTangentY, const struct FVector& WorldTangentNormal);
	static bool TryGetDefaultObjectFor(TSubclassOf<class UObject> Param_Class, class UObject** OutDefaultObject);
	static void UpdateDynamicEasing(struct FSQDynamicEasingStruct& Easing, float DeltaTime);
	static void UpdateSpring3D(struct FSQSpringInterpStruct3D& Spring, float DeltaTime);
	static void UpdateTextureOnImage(class UImage* Image, class UTexture2DDynamic* Texture);

	void AsyncLoadAssetCompleted__DelegateSignature(TSoftClassPtr<class UClass> Param_Class);
	void AsyncLoadAssetsCompleted__DelegateSignature(const TArray<TSoftClassPtr<class UClass>>& Classes);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQBlueprintLibrary">();
	}
	static class USQBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQBlueprintLibrary>();
	}
};
static_assert(alignof(USQBlueprintLibrary) == 0x000008, "Wrong alignment on USQBlueprintLibrary");
static_assert(sizeof(USQBlueprintLibrary) == 0x000028, "Wrong size on USQBlueprintLibrary");

// Class Squad.SQMovementAdjustmentComponent
// 0x0000 (0x0480 - 0x0480)
class USQMovementAdjustmentComponent final : public UBoxComponent
{
public:
	float                                         SoldierMovementSpeedMultiplayer;                   // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF8[0x4];                                      // 0x047C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMovementAdjustmentComponent">();
	}
	static class USQMovementAdjustmentComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMovementAdjustmentComponent>();
	}
};
static_assert(alignof(USQMovementAdjustmentComponent) == 0x000010, "Wrong alignment on USQMovementAdjustmentComponent");
static_assert(sizeof(USQMovementAdjustmentComponent) == 0x000480, "Wrong size on USQMovementAdjustmentComponent");
static_assert(offsetof(USQMovementAdjustmentComponent, SoldierMovementSpeedMultiplayer) == 0x000478, "Member 'USQMovementAdjustmentComponent::SoldierMovementSpeedMultiplayer' has a wrong offset!");

// Class Squad.SQSettings
// 0x0030 (0x0060 - 0x0030)
class USQSettings : public UDataAsset
{
public:
	class FName                                   ID;                                                // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_DFB[0x18];                                     // 0x0038(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    Data;                                              // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	class FString GetLogId();
	class FString GetModID();

	bool GetDisplayName(class FText* OutDisplayName) const;
	class FName GetId() const;
	class FString GetIdAsString() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSettings">();
	}
	static class USQSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSettings>();
	}
};
static_assert(alignof(USQSettings) == 0x000008, "Wrong alignment on USQSettings");
static_assert(sizeof(USQSettings) == 0x000060, "Wrong size on USQSettings");
static_assert(offsetof(USQSettings, ID) == 0x000030, "Member 'USQSettings::ID' has a wrong offset!");
static_assert(offsetof(USQSettings, Data) == 0x000050, "Member 'USQSettings::Data' has a wrong offset!");

// Class Squad.SQMultithreadObject
// 0x0008 (0x0030 - 0x0028)
class USQMultithreadObject final : public UObject
{
public:
	uint8                                         Pad_DFD[0x8];                                      // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DoMultiThreadedWork();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMultithreadObject">();
	}
	static class USQMultithreadObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMultithreadObject>();
	}
};
static_assert(alignof(USQMultithreadObject) == 0x000008, "Wrong alignment on USQMultithreadObject");
static_assert(sizeof(USQMultithreadObject) == 0x000030, "Wrong size on USQMultithreadObject");

// Class Squad.SQActionSettings
// 0x0008 (0x0068 - 0x0060)
class USQActionSettings : public USQSettings
{
public:
	bool                                          CreateMapMarker;                                   // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DFE[0x7];                                      // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQActionSettings">();
	}
	static class USQActionSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQActionSettings>();
	}
};
static_assert(alignof(USQActionSettings) == 0x000008, "Wrong alignment on USQActionSettings");
static_assert(sizeof(USQActionSettings) == 0x000068, "Wrong size on USQActionSettings");
static_assert(offsetof(USQActionSettings, CreateMapMarker) == 0x000060, "Member 'USQActionSettings::CreateMapMarker' has a wrong offset!");

// Class Squad.SQPawn
// 0x0098 (0x0320 - 0x0288)
class ASQPawn : public APawn
{
public:
	uint8                                         Pad_DFF[0x8];                                      // 0x0288(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bClientUpdating : 1;                               // 0x0290(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_E00[0x3];                                      // 0x0291(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUseEngineActorReplication;                        // 0x0294(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUsingNewMovementComponent;                      // 0x0295(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTeam                                       Team;                                              // 0x0296(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, RepNotify, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E01[0x1];                                      // 0x0297(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQBasedMovementInfo                   BasedMovement;                                     // 0x0298(0x0030)(NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class USQCoreStateComponent*                  StateObject;                                       // 0x02C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                BaseTranslationOffset;                             // 0x02D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E02[0x4];                                      // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  BaseRotationOffset;                                // 0x02E0(0x0010)(IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bInBaseReplication;                                // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E03[0x7];                                      // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnPawnPossessedEvent;                              // 0x02F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPawnUnPossessedEvent;                            // 0x0308(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_E04[0x8];                                      // 0x0318(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BlueprintCalcCamera(float DeltaTime, const struct FVector& InLocation, const struct FRotator& InRotation, float InFOV, struct FVector* OutLocation, struct FRotator* OutRotation, float* OutFOV);
	void OnPossessionChanged__DelegateSignature();
	void OnRep_Team();
	void SetTeam(ESQTeam Param_Team);

	ESQTeam GetTeam() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQPawn">();
	}
	static class ASQPawn* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQPawn>();
	}
};
static_assert(alignof(ASQPawn) == 0x000010, "Wrong alignment on ASQPawn");
static_assert(sizeof(ASQPawn) == 0x000320, "Wrong size on ASQPawn");
static_assert(offsetof(ASQPawn, bUseEngineActorReplication) == 0x000294, "Member 'ASQPawn::bUseEngineActorReplication' has a wrong offset!");
static_assert(offsetof(ASQPawn, bIsUsingNewMovementComponent) == 0x000295, "Member 'ASQPawn::bIsUsingNewMovementComponent' has a wrong offset!");
static_assert(offsetof(ASQPawn, Team) == 0x000296, "Member 'ASQPawn::Team' has a wrong offset!");
static_assert(offsetof(ASQPawn, BasedMovement) == 0x000298, "Member 'ASQPawn::BasedMovement' has a wrong offset!");
static_assert(offsetof(ASQPawn, StateObject) == 0x0002C8, "Member 'ASQPawn::StateObject' has a wrong offset!");
static_assert(offsetof(ASQPawn, BaseTranslationOffset) == 0x0002D0, "Member 'ASQPawn::BaseTranslationOffset' has a wrong offset!");
static_assert(offsetof(ASQPawn, BaseRotationOffset) == 0x0002E0, "Member 'ASQPawn::BaseRotationOffset' has a wrong offset!");
static_assert(offsetof(ASQPawn, bInBaseReplication) == 0x0002F0, "Member 'ASQPawn::bInBaseReplication' has a wrong offset!");
static_assert(offsetof(ASQPawn, OnPawnPossessedEvent) == 0x0002F8, "Member 'ASQPawn::OnPawnPossessedEvent' has a wrong offset!");
static_assert(offsetof(ASQPawn, OnPawnUnPossessedEvent) == 0x000308, "Member 'ASQPawn::OnPawnUnPossessedEvent' has a wrong offset!");

// Class Squad.SQVehicleSeat
// 0x00B0 (0x03D0 - 0x0320)
class ASQVehicleSeat : public ASQPawn
{
public:
	uint8                                         Pad_E05[0x20];                                     // 0x0320(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           ADSCameraLocationCurve;                            // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           DefaultCameraLocationCurve;                        // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ADSSpeed;                                          // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchLimit;                                        // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPitchLimit;                                     // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawLimit;                                          // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinYawLimit;                                       // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E06[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQVehicleSeatComponent*                ParentSeatComponent;                               // 0x0368(0x0008)(ExportObject, Net, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQListenerType                               ListenerType;                                      // 0x0370(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E07[0x3];                                      // 0x0371(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CameraLocationOrigin;                              // 0x0374(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCameraInitialized;                              // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldSendClientSideCameraUpdate;                 // 0x0381(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E08[0x6];                                      // 0x0382(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USQVehicleComponent*>            VehicleComponents;                                 // 0x0388(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class USQVehicleComponent*                    CachedVehicleEngine;                               // 0x0398(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTurnOut;                                          // 0x03A0(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E09[0x7];                                      // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQVehicleInventoryComponent*           CachedVehicleInventory;                            // 0x03A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCameraComponent*                       CachedCameraComponent;                             // 0x03B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SeatHealth;                                        // 0x03B8(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E0A[0x4];                                      // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQFreeLookComponent*                   FreeLookComponent;                                 // 0x03C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQMovementComponentManager*            MovementComponentManager;                          // 0x03C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class USQVehicleComponent* GetVehicleEngine();
	void OnNextItem();
	void OnPrevItem();
	void OnRep_SeatHealth(float PreviousHealth);
	void OnRep_TurnOut();
	void OverlayUnzoom();
	void OverlayZoom();
	void RequestChangeSeat(class ASQPlayerController* Player, int32 RequestedSeat);
	void ServerCancelPlayerExit(class ASQPlayerController* SPC);
	void ServerOnInteract();
	void ServerSetTurnOut(bool bEnabled);
	void SetTurnOut(bool bEnabled);

	class USceneComponent* Get1PAttachComponent() const;
	class USceneComponent* Get3PAttachComponent() const;
	class USceneComponent* GetADSCameraLocationComponent() const;
	class UCameraComponent* GetCameraComponent() const;
	class USceneComponent* GetDefaultCameraLocationComponent() const;
	class USkinnedMeshComponent* GetMasterPoseComponent() const;
	float GetNormalizedSeatHealth() const;
	float GetSeatHealth() const;
	class USceneComponent* GetSoldierAttachComponent() const;
	class ASQVehicle* GetVehicle() const;
	class USQVehicleInventoryComponent* GetVehicleInventory() const;
	class USQVehicleResourceWeaponInventoryComponent* GetVehicleResourceInventory() const;
	class USQVehicleSeatComponent* GetVehicleSeatComponent() const;
	class USceneComponent* GetWeaponAttachComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleSeat">();
	}
	static class ASQVehicleSeat* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQVehicleSeat>();
	}
};
static_assert(alignof(ASQVehicleSeat) == 0x000010, "Wrong alignment on ASQVehicleSeat");
static_assert(sizeof(ASQVehicleSeat) == 0x0003D0, "Wrong size on ASQVehicleSeat");
static_assert(offsetof(ASQVehicleSeat, ADSCameraLocationCurve) == 0x000340, "Member 'ASQVehicleSeat::ADSCameraLocationCurve' has a wrong offset!");
static_assert(offsetof(ASQVehicleSeat, DefaultCameraLocationCurve) == 0x000348, "Member 'ASQVehicleSeat::DefaultCameraLocationCurve' has a wrong offset!");
static_assert(offsetof(ASQVehicleSeat, ADSSpeed) == 0x000350, "Member 'ASQVehicleSeat::ADSSpeed' has a wrong offset!");
static_assert(offsetof(ASQVehicleSeat, PitchLimit) == 0x000354, "Member 'ASQVehicleSeat::PitchLimit' has a wrong offset!");
static_assert(offsetof(ASQVehicleSeat, MinPitchLimit) == 0x000358, "Member 'ASQVehicleSeat::MinPitchLimit' has a wrong offset!");
static_assert(offsetof(ASQVehicleSeat, YawLimit) == 0x00035C, "Member 'ASQVehicleSeat::YawLimit' has a wrong offset!");
static_assert(offsetof(ASQVehicleSeat, MinYawLimit) == 0x000360, "Member 'ASQVehicleSeat::MinYawLimit' has a wrong offset!");
static_assert(offsetof(ASQVehicleSeat, ParentSeatComponent) == 0x000368, "Member 'ASQVehicleSeat::ParentSeatComponent' has a wrong offset!");
static_assert(offsetof(ASQVehicleSeat, ListenerType) == 0x000370, "Member 'ASQVehicleSeat::ListenerType' has a wrong offset!");
static_assert(offsetof(ASQVehicleSeat, CameraLocationOrigin) == 0x000374, "Member 'ASQVehicleSeat::CameraLocationOrigin' has a wrong offset!");
static_assert(offsetof(ASQVehicleSeat, bIsCameraInitialized) == 0x000380, "Member 'ASQVehicleSeat::bIsCameraInitialized' has a wrong offset!");
static_assert(offsetof(ASQVehicleSeat, bShouldSendClientSideCameraUpdate) == 0x000381, "Member 'ASQVehicleSeat::bShouldSendClientSideCameraUpdate' has a wrong offset!");
static_assert(offsetof(ASQVehicleSeat, VehicleComponents) == 0x000388, "Member 'ASQVehicleSeat::VehicleComponents' has a wrong offset!");
static_assert(offsetof(ASQVehicleSeat, CachedVehicleEngine) == 0x000398, "Member 'ASQVehicleSeat::CachedVehicleEngine' has a wrong offset!");
static_assert(offsetof(ASQVehicleSeat, bTurnOut) == 0x0003A0, "Member 'ASQVehicleSeat::bTurnOut' has a wrong offset!");
static_assert(offsetof(ASQVehicleSeat, CachedVehicleInventory) == 0x0003A8, "Member 'ASQVehicleSeat::CachedVehicleInventory' has a wrong offset!");
static_assert(offsetof(ASQVehicleSeat, CachedCameraComponent) == 0x0003B0, "Member 'ASQVehicleSeat::CachedCameraComponent' has a wrong offset!");
static_assert(offsetof(ASQVehicleSeat, SeatHealth) == 0x0003B8, "Member 'ASQVehicleSeat::SeatHealth' has a wrong offset!");
static_assert(offsetof(ASQVehicleSeat, FreeLookComponent) == 0x0003C0, "Member 'ASQVehicleSeat::FreeLookComponent' has a wrong offset!");
static_assert(offsetof(ASQVehicleSeat, MovementComponentManager) == 0x0003C8, "Member 'ASQVehicleSeat::MovementComponentManager' has a wrong offset!");

// Class Squad.SQVehicle
// 0x0540 (0x0910 - 0x03D0)
#pragma pack(push, 0x1)
class alignas(0x10) ASQVehicle : public ASQVehicleSeat
{
public:
	uint8                                         Pad_E0C[0x10];                                     // 0x03D0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQUsableData                          UsableData;                                        // 0x03E0(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class AActor*                                 AmmoIconActor;                                     // 0x0420(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQDestroyedVehicle>        DefaultDestroyedVehicleActorClass;                 // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSQVehicleDestroyedConfig>      DestroyedVehicleConfig;                            // 0x0430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQLastingEffect>           TemperatureLastingEffectClass;                     // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TemperatureLastingEffectAttachSocket;              // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQLastingEffect*                       TemperatureLastingEffect;                          // 0x0450(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQVehicleBurningComponent*             BurningComponent;                                  // 0x0458(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraShakeBase>           ImpactCameraShake;                                 // 0x0460(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpactEffectNormalForceThreshold;                  // 0x0468(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0D[0x4];                                      // 0x046C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              LightImpactSound;                                  // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        LightImpactEffect;                                 // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NiagaraLightImpactEffect;                          // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              ImpactSound;                                       // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        ImpactEffect;                                      // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NiagaraImpactEffect;                               // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoParticlesUseRotation;                           // 0x04A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0E[0x7];                                      // 0x04A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USQPhysicalMaterialVehiclesEffects> PhysMatEffectsClass;                               // 0x04A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*               MistPSC;                                           // 0x04B0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      MistNPSC;                                          // 0x04B8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*               PropellerMistPSC;                                  // 0x04C0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      PropellerMistNPSC;                                 // 0x04C8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        MistAC;                                            // 0x04D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        PropellerMistAC;                                   // 0x04D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0F[0x8];                                      // 0x04E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MistACFadeOutTime;                                 // 0x04E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PropellerMistACFadeOutTime;                        // 0x04EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           MistTimerHandle;                                   // 0x04F0(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MistDepthUpdateInterval;                           // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E10[0x4];                                      // 0x04FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQVehicleCenterOfMassFXComponent*      CenterOfMassFXComponent;                           // 0x0500(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnVehicleRepairEvent;                              // 0x0508(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class ASQDestroyedVehicle*                    DestroyedVehicleActor;                             // 0x0518(0x0008)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQVehicleClaim*                        ClaimInfo;                                         // 0x0520(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQSquadState*                          ClaimedBySquad;                                    // 0x0528(0x0008)(BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClaimable;                                        // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnterableWithoutClaim;                            // 0x0531(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrivableWithoutClaim;                             // 0x0532(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNonSquadMembersMayEnterWhenClaimed;               // 0x0533(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E11[0x4];                                      // 0x0534(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   NotClaimedCantEnterErrorMessage;                   // 0x0538(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   FullVehicleCantEnterErrorMessage;                  // 0x0550(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   EnemyVehicleCantEnterErrorMessage;                 // 0x0568(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   NotClaimedNeedsApprovalErrorMessage;               // 0x0580(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   NotClaimedNotInSquadErrorMessage;                  // 0x0598(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   WrongRoleForClaimErrorMessage;                     // 0x05B0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   WrongRoleForSeatErrorMessage;                      // 0x05C8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   FullVehicleOrWrongRoleCantEnterErrorMessage;       // 0x05E0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   SeatFilledErrorMessage;                            // 0x05F8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   SeatBeingEnteredErrorMessage;                      // 0x0610(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ClaimedByAnotherSquadCantEnterErrorMessage;        // 0x0628(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   CrewmanRole;                                       // 0x0640(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   PilotRole;                                         // 0x0658(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UCurveFloat*                            VelocityVsCollisionDamageCurve;                    // 0x0670(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionDamageThesholdGs;                         // 0x0678(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionsDamageVelocityThreshold;                 // 0x067C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VehicleToOccupantCollisionDamageScaler;            // 0x0680(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E12[0x4];                                      // 0x0684(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        DriverCamPosition;                                 // 0x0688(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraComponent*                       FirstPersonDriverCamera;                           // 0x0690(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpringArmComponent*                    FirstPersonDriverSpringArm;                        // 0x0698(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraComponent*                       ThirdPersonCamera;                                 // 0x06A0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpringArmComponent*                    ThirdPersonSpringArm;                              // 0x06A8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArmLengthScrollDistance;                           // 0x06B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E13[0x4];                                      // 0x06B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQBoundaryListener*                    BoundaryListener;                                  // 0x06B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQCollisionDamage*                     CollisionDamage;                                   // 0x06C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQVehicleBuoyancyComponent*            BuoyancyComponent;                                 // 0x06C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E14[0x8];                                      // 0x06D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	ESQVehicleType                                VehicleType;                                       // 0x06D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E15[0x7];                                      // 0x06D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               VehicleIconTexture;                                // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VehicleIconColor;                                  // 0x06E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              VehicleIconOffset;                                 // 0x06F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              VehicleIconSize;                                   // 0x0700(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastRepairedTime;                                  // 0x0708(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentDriverGetsForKill;                          // 0x070C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastSeatEventTime;                                 // 0x0710(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreventVehicleEntrance;                           // 0x0714(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E16[0x3];                                      // 0x0715(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxVehicleEntryDistance;                           // 0x0718(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E17[0x4];                                      // 0x071C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQVehicleSeatConfig                   DriverSeatConfig;                                  // 0x0720(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FSQVehicleSeatConfig>           AdditionalSeatsConfig;                             // 0x0778(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class USQVehicleSeatComponent*>        VehicleSeats;                                      // 0x0788(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 VehicleMesh;                                       // 0x0798(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsVehicleDamagedByRadialExplosions;               // 0x07A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUsesSkeletalSignificanceManagement;               // 0x07A1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E18[0x6];                                      // 0x07A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnVehicleDestroyed;                                // 0x07A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnVehicleDamaged;                                  // 0x07B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayerEntered;                                   // 0x07C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayerExited;                                    // 0x07D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayerSwitchedSeats;                             // 0x07E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AmmoUpdatedEvent;                                  // 0x07F8(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	class USoundCue*                              OnVehicleEnterSound;                               // 0x0808(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              OnVehicleExitSound;                                // 0x0810(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              OnSeatSwitchSound;                                 // 0x0818(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExitSpeedOffset;                                   // 0x0820(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E19[0x4];                                      // 0x0824(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQBuffManager*                         Buffs;                                             // 0x0828(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Health;                                            // 0x0830(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxHealth;                                         // 0x0834(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UDamageType>                LastDamageTypeClass;                               // 0x0838(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AController*                            LastDamageInstigator;                              // 0x0840(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanStackRepairers;                                // 0x0848(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseDelayBeforeWreck;                              // 0x0849(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E1A[0x2];                                      // 0x084A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WreckDelay;                                        // 0x084C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxRepairToolLimit;                                // 0x0850(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastDamageInstigatorTimeoutThreshold;              // 0x0854(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E1B[0x8];                                      // 0x0858(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FlipPitchThreshold;                                // 0x0860(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FlipRollThreshold;                                 // 0x0864(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FlipSpeedThreshold;                                // 0x0868(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E1C[0x4];                                      // 0x086C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FlipRotationExceededTimeThreshold;                 // 0x0870(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DestroyTime;                                       // 0x0874(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasBeenDestroyed;                                 // 0x0878(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E1D[0x7];                                      // 0x0879(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQDamageModifier>              AllowableDamageTypes;                              // 0x0880(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FSQDamageTypeEffects                   DamageEffects;                                     // 0x0890(0x0028)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class USQVehicleUIStaticDataAsset*            StaticUIData;                                      // 0x08B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxThrottle;                                       // 0x08C0(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E1E[0x4];                                      // 0x08C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQVehicleEmergencyRecoveryComponent*   EmergencyRecoveryComponent;                        // 0x08C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FSQVehicleQueueEntry>           PlayerSeatPairInfoArray;                           // 0x08D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E1F[0x8];                                      // 0x08E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CurrentRepairers;                                  // 0x08E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FSQVehicleSettingEntry                 Setting;                                           // 0x08F8(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, Transient, NoDestructor, NativeAccessSpecifierPublic)

public:
	void ActivateMistOnCenterOfMassEntry();
	void AmmoUpdated();
	void BPClientDestroyed();
	void BurnVehicle(float VehicleBurnAmount, float SoldierBurnAmount, class AController* BurnCauser);
	bool CanActAsRearmSource();
	void DeactivateMistOnCenterOfMassEntry();
	void DebugVehicleFullHealth();
	void DrivetrainComponentDestroyed(class USQDriveTrainComponent* DriveTrainComponent);
	void DrivetrainComponentRepaired(class USQDriveTrainComponent* DriveTrainComponent);
	void EjectAllPlayers();
	void EjectPlayerFromSeat(int32 Seat);
	void EnteredVehicle(class ASQSoldier* Soldier, class USQVehicleSeatComponent* NewSeat);
	void EnterTurnOut(class USQVehicleSeatComponent* Seat);
	void ExitTurnOut(class USQVehicleSeatComponent* Seat);
	int32 FindFirstAvailableSeat(class ASQPlayerController* SPC, bool bIncludeDriverSeat);
	void GetExitPoints(TArray<class USQVehicleExitPointComponent*>* OutExitPoints);
	void LeftVehicle(class ASQSoldier* Soldier, class USQVehicleSeatComponent* PreviousSeat);
	void MulticastPlayDamageEffects(TSubclassOf<class UDamageType> DamageTypeClass, const struct FVector& ImpactLocationZeroBased);
	void OnCenterOfMassEnterWaterBody();
	void OnCenterOfMassExitWaterBody();
	void OnEnterBoundary(class USQBoundaryListener* Listener, class ASQBoundary* Boundary);
	void OnExitBoundary(class USQBoundaryListener* Listener, class ASQBoundary* Boundary);
	void OnRep_DestroyedState();
	void OnRep_HasBeenDestroyed();
	void OnRep_HealthChanged();
	void OnVehicleRepaired();
	void OnWaterBodyEntered();
	void OnWaterBodyExited();
	void OutOfBoundsKillCallback();
	void PlayerRequestLeaveSeat(class ASQPlayerController* Player);
	void RepairVehicle(const class AActor* SourceRepairer, ESQRepairSource RepairSource, float RepairAmount, float SoldierHealAmount);
	void ResetLastSeatEventTime();
	void ServerDebugVehicleFullHealth();
	void SwitchedSeat(class ASQSoldier* Soldier, class USQVehicleSeatComponent* PreviousSeat, class USQVehicleSeatComponent* NewSeat);
	void ToggleMistParticleSystemsDepthCalculation(bool bActivate);
	void UpdateMistParticleSystemsDepthCalculations();

	class USQVehicleSeatComponent* GetDriverSeat() const;
	class USQVehicleEmergencyRecoveryComponent* GetEmergencyRecoveryComponent() const;
	int32 GetInventoryAmmoPoints() const;
	int32 GetNumOccupants() const;
	int32 GetPlayersSeat(const class ASQPlayerController* Player) const;
	TArray<class USQVehicleSeatComponent*> GetSeats() const;
	bool HasResourceInventory() const;
	bool IsOutOfMapBounds() const;
	bool IsSeatHeldByClaimingSquad(int32 Seat) const;
	bool IsValidSeat(int32 Seat) const;
	bool IsVehicleEmpty() const;
	bool IsVehicleFull() const;
	void SetEffectPhysmatParams(class UParticleSystemComponent* ParticleSystem, class USQPhysicalMaterial* SQPhysMat) const;
	void SetFXSystemPhysmatParams(class UFXSystemComponent* FXSystemComponent, class USQPhysicalMaterial* SQPhysMat) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicle">();
	}
	static class ASQVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQVehicle>();
	}
};
#pragma pack(pop)
static_assert(alignof(ASQVehicle) == 0x000010, "Wrong alignment on ASQVehicle");
static_assert(sizeof(ASQVehicle) == 0x000910, "Wrong size on ASQVehicle");
static_assert(offsetof(ASQVehicle, UsableData) == 0x0003E0, "Member 'ASQVehicle::UsableData' has a wrong offset!");
static_assert(offsetof(ASQVehicle, AmmoIconActor) == 0x000420, "Member 'ASQVehicle::AmmoIconActor' has a wrong offset!");
static_assert(offsetof(ASQVehicle, DefaultDestroyedVehicleActorClass) == 0x000428, "Member 'ASQVehicle::DefaultDestroyedVehicleActorClass' has a wrong offset!");
static_assert(offsetof(ASQVehicle, DestroyedVehicleConfig) == 0x000430, "Member 'ASQVehicle::DestroyedVehicleConfig' has a wrong offset!");
static_assert(offsetof(ASQVehicle, TemperatureLastingEffectClass) == 0x000440, "Member 'ASQVehicle::TemperatureLastingEffectClass' has a wrong offset!");
static_assert(offsetof(ASQVehicle, TemperatureLastingEffectAttachSocket) == 0x000448, "Member 'ASQVehicle::TemperatureLastingEffectAttachSocket' has a wrong offset!");
static_assert(offsetof(ASQVehicle, TemperatureLastingEffect) == 0x000450, "Member 'ASQVehicle::TemperatureLastingEffect' has a wrong offset!");
static_assert(offsetof(ASQVehicle, BurningComponent) == 0x000458, "Member 'ASQVehicle::BurningComponent' has a wrong offset!");
static_assert(offsetof(ASQVehicle, ImpactCameraShake) == 0x000460, "Member 'ASQVehicle::ImpactCameraShake' has a wrong offset!");
static_assert(offsetof(ASQVehicle, ImpactEffectNormalForceThreshold) == 0x000468, "Member 'ASQVehicle::ImpactEffectNormalForceThreshold' has a wrong offset!");
static_assert(offsetof(ASQVehicle, LightImpactSound) == 0x000470, "Member 'ASQVehicle::LightImpactSound' has a wrong offset!");
static_assert(offsetof(ASQVehicle, LightImpactEffect) == 0x000478, "Member 'ASQVehicle::LightImpactEffect' has a wrong offset!");
static_assert(offsetof(ASQVehicle, NiagaraLightImpactEffect) == 0x000480, "Member 'ASQVehicle::NiagaraLightImpactEffect' has a wrong offset!");
static_assert(offsetof(ASQVehicle, ImpactSound) == 0x000488, "Member 'ASQVehicle::ImpactSound' has a wrong offset!");
static_assert(offsetof(ASQVehicle, ImpactEffect) == 0x000490, "Member 'ASQVehicle::ImpactEffect' has a wrong offset!");
static_assert(offsetof(ASQVehicle, NiagaraImpactEffect) == 0x000498, "Member 'ASQVehicle::NiagaraImpactEffect' has a wrong offset!");
static_assert(offsetof(ASQVehicle, bDoParticlesUseRotation) == 0x0004A0, "Member 'ASQVehicle::bDoParticlesUseRotation' has a wrong offset!");
static_assert(offsetof(ASQVehicle, PhysMatEffectsClass) == 0x0004A8, "Member 'ASQVehicle::PhysMatEffectsClass' has a wrong offset!");
static_assert(offsetof(ASQVehicle, MistPSC) == 0x0004B0, "Member 'ASQVehicle::MistPSC' has a wrong offset!");
static_assert(offsetof(ASQVehicle, MistNPSC) == 0x0004B8, "Member 'ASQVehicle::MistNPSC' has a wrong offset!");
static_assert(offsetof(ASQVehicle, PropellerMistPSC) == 0x0004C0, "Member 'ASQVehicle::PropellerMistPSC' has a wrong offset!");
static_assert(offsetof(ASQVehicle, PropellerMistNPSC) == 0x0004C8, "Member 'ASQVehicle::PropellerMistNPSC' has a wrong offset!");
static_assert(offsetof(ASQVehicle, MistAC) == 0x0004D0, "Member 'ASQVehicle::MistAC' has a wrong offset!");
static_assert(offsetof(ASQVehicle, PropellerMistAC) == 0x0004D8, "Member 'ASQVehicle::PropellerMistAC' has a wrong offset!");
static_assert(offsetof(ASQVehicle, MistACFadeOutTime) == 0x0004E8, "Member 'ASQVehicle::MistACFadeOutTime' has a wrong offset!");
static_assert(offsetof(ASQVehicle, PropellerMistACFadeOutTime) == 0x0004EC, "Member 'ASQVehicle::PropellerMistACFadeOutTime' has a wrong offset!");
static_assert(offsetof(ASQVehicle, MistTimerHandle) == 0x0004F0, "Member 'ASQVehicle::MistTimerHandle' has a wrong offset!");
static_assert(offsetof(ASQVehicle, MistDepthUpdateInterval) == 0x0004F8, "Member 'ASQVehicle::MistDepthUpdateInterval' has a wrong offset!");
static_assert(offsetof(ASQVehicle, CenterOfMassFXComponent) == 0x000500, "Member 'ASQVehicle::CenterOfMassFXComponent' has a wrong offset!");
static_assert(offsetof(ASQVehicle, OnVehicleRepairEvent) == 0x000508, "Member 'ASQVehicle::OnVehicleRepairEvent' has a wrong offset!");
static_assert(offsetof(ASQVehicle, DestroyedVehicleActor) == 0x000518, "Member 'ASQVehicle::DestroyedVehicleActor' has a wrong offset!");
static_assert(offsetof(ASQVehicle, ClaimInfo) == 0x000520, "Member 'ASQVehicle::ClaimInfo' has a wrong offset!");
static_assert(offsetof(ASQVehicle, ClaimedBySquad) == 0x000528, "Member 'ASQVehicle::ClaimedBySquad' has a wrong offset!");
static_assert(offsetof(ASQVehicle, bClaimable) == 0x000530, "Member 'ASQVehicle::bClaimable' has a wrong offset!");
static_assert(offsetof(ASQVehicle, bEnterableWithoutClaim) == 0x000531, "Member 'ASQVehicle::bEnterableWithoutClaim' has a wrong offset!");
static_assert(offsetof(ASQVehicle, bDrivableWithoutClaim) == 0x000532, "Member 'ASQVehicle::bDrivableWithoutClaim' has a wrong offset!");
static_assert(offsetof(ASQVehicle, bNonSquadMembersMayEnterWhenClaimed) == 0x000533, "Member 'ASQVehicle::bNonSquadMembersMayEnterWhenClaimed' has a wrong offset!");
static_assert(offsetof(ASQVehicle, NotClaimedCantEnterErrorMessage) == 0x000538, "Member 'ASQVehicle::NotClaimedCantEnterErrorMessage' has a wrong offset!");
static_assert(offsetof(ASQVehicle, FullVehicleCantEnterErrorMessage) == 0x000550, "Member 'ASQVehicle::FullVehicleCantEnterErrorMessage' has a wrong offset!");
static_assert(offsetof(ASQVehicle, EnemyVehicleCantEnterErrorMessage) == 0x000568, "Member 'ASQVehicle::EnemyVehicleCantEnterErrorMessage' has a wrong offset!");
static_assert(offsetof(ASQVehicle, NotClaimedNeedsApprovalErrorMessage) == 0x000580, "Member 'ASQVehicle::NotClaimedNeedsApprovalErrorMessage' has a wrong offset!");
static_assert(offsetof(ASQVehicle, NotClaimedNotInSquadErrorMessage) == 0x000598, "Member 'ASQVehicle::NotClaimedNotInSquadErrorMessage' has a wrong offset!");
static_assert(offsetof(ASQVehicle, WrongRoleForClaimErrorMessage) == 0x0005B0, "Member 'ASQVehicle::WrongRoleForClaimErrorMessage' has a wrong offset!");
static_assert(offsetof(ASQVehicle, WrongRoleForSeatErrorMessage) == 0x0005C8, "Member 'ASQVehicle::WrongRoleForSeatErrorMessage' has a wrong offset!");
static_assert(offsetof(ASQVehicle, FullVehicleOrWrongRoleCantEnterErrorMessage) == 0x0005E0, "Member 'ASQVehicle::FullVehicleOrWrongRoleCantEnterErrorMessage' has a wrong offset!");
static_assert(offsetof(ASQVehicle, SeatFilledErrorMessage) == 0x0005F8, "Member 'ASQVehicle::SeatFilledErrorMessage' has a wrong offset!");
static_assert(offsetof(ASQVehicle, SeatBeingEnteredErrorMessage) == 0x000610, "Member 'ASQVehicle::SeatBeingEnteredErrorMessage' has a wrong offset!");
static_assert(offsetof(ASQVehicle, ClaimedByAnotherSquadCantEnterErrorMessage) == 0x000628, "Member 'ASQVehicle::ClaimedByAnotherSquadCantEnterErrorMessage' has a wrong offset!");
static_assert(offsetof(ASQVehicle, CrewmanRole) == 0x000640, "Member 'ASQVehicle::CrewmanRole' has a wrong offset!");
static_assert(offsetof(ASQVehicle, PilotRole) == 0x000658, "Member 'ASQVehicle::PilotRole' has a wrong offset!");
static_assert(offsetof(ASQVehicle, VelocityVsCollisionDamageCurve) == 0x000670, "Member 'ASQVehicle::VelocityVsCollisionDamageCurve' has a wrong offset!");
static_assert(offsetof(ASQVehicle, CollisionDamageThesholdGs) == 0x000678, "Member 'ASQVehicle::CollisionDamageThesholdGs' has a wrong offset!");
static_assert(offsetof(ASQVehicle, CollisionsDamageVelocityThreshold) == 0x00067C, "Member 'ASQVehicle::CollisionsDamageVelocityThreshold' has a wrong offset!");
static_assert(offsetof(ASQVehicle, VehicleToOccupantCollisionDamageScaler) == 0x000680, "Member 'ASQVehicle::VehicleToOccupantCollisionDamageScaler' has a wrong offset!");
static_assert(offsetof(ASQVehicle, DriverCamPosition) == 0x000688, "Member 'ASQVehicle::DriverCamPosition' has a wrong offset!");
static_assert(offsetof(ASQVehicle, FirstPersonDriverCamera) == 0x000690, "Member 'ASQVehicle::FirstPersonDriverCamera' has a wrong offset!");
static_assert(offsetof(ASQVehicle, FirstPersonDriverSpringArm) == 0x000698, "Member 'ASQVehicle::FirstPersonDriverSpringArm' has a wrong offset!");
static_assert(offsetof(ASQVehicle, ThirdPersonCamera) == 0x0006A0, "Member 'ASQVehicle::ThirdPersonCamera' has a wrong offset!");
static_assert(offsetof(ASQVehicle, ThirdPersonSpringArm) == 0x0006A8, "Member 'ASQVehicle::ThirdPersonSpringArm' has a wrong offset!");
static_assert(offsetof(ASQVehicle, ArmLengthScrollDistance) == 0x0006B0, "Member 'ASQVehicle::ArmLengthScrollDistance' has a wrong offset!");
static_assert(offsetof(ASQVehicle, BoundaryListener) == 0x0006B8, "Member 'ASQVehicle::BoundaryListener' has a wrong offset!");
static_assert(offsetof(ASQVehicle, CollisionDamage) == 0x0006C0, "Member 'ASQVehicle::CollisionDamage' has a wrong offset!");
static_assert(offsetof(ASQVehicle, BuoyancyComponent) == 0x0006C8, "Member 'ASQVehicle::BuoyancyComponent' has a wrong offset!");
static_assert(offsetof(ASQVehicle, VehicleType) == 0x0006D8, "Member 'ASQVehicle::VehicleType' has a wrong offset!");
static_assert(offsetof(ASQVehicle, VehicleIconTexture) == 0x0006E0, "Member 'ASQVehicle::VehicleIconTexture' has a wrong offset!");
static_assert(offsetof(ASQVehicle, VehicleIconColor) == 0x0006E8, "Member 'ASQVehicle::VehicleIconColor' has a wrong offset!");
static_assert(offsetof(ASQVehicle, VehicleIconOffset) == 0x0006F8, "Member 'ASQVehicle::VehicleIconOffset' has a wrong offset!");
static_assert(offsetof(ASQVehicle, VehicleIconSize) == 0x000700, "Member 'ASQVehicle::VehicleIconSize' has a wrong offset!");
static_assert(offsetof(ASQVehicle, LastRepairedTime) == 0x000708, "Member 'ASQVehicle::LastRepairedTime' has a wrong offset!");
static_assert(offsetof(ASQVehicle, PercentDriverGetsForKill) == 0x00070C, "Member 'ASQVehicle::PercentDriverGetsForKill' has a wrong offset!");
static_assert(offsetof(ASQVehicle, LastSeatEventTime) == 0x000710, "Member 'ASQVehicle::LastSeatEventTime' has a wrong offset!");
static_assert(offsetof(ASQVehicle, bPreventVehicleEntrance) == 0x000714, "Member 'ASQVehicle::bPreventVehicleEntrance' has a wrong offset!");
static_assert(offsetof(ASQVehicle, MaxVehicleEntryDistance) == 0x000718, "Member 'ASQVehicle::MaxVehicleEntryDistance' has a wrong offset!");
static_assert(offsetof(ASQVehicle, DriverSeatConfig) == 0x000720, "Member 'ASQVehicle::DriverSeatConfig' has a wrong offset!");
static_assert(offsetof(ASQVehicle, AdditionalSeatsConfig) == 0x000778, "Member 'ASQVehicle::AdditionalSeatsConfig' has a wrong offset!");
static_assert(offsetof(ASQVehicle, VehicleSeats) == 0x000788, "Member 'ASQVehicle::VehicleSeats' has a wrong offset!");
static_assert(offsetof(ASQVehicle, VehicleMesh) == 0x000798, "Member 'ASQVehicle::VehicleMesh' has a wrong offset!");
static_assert(offsetof(ASQVehicle, bIsVehicleDamagedByRadialExplosions) == 0x0007A0, "Member 'ASQVehicle::bIsVehicleDamagedByRadialExplosions' has a wrong offset!");
static_assert(offsetof(ASQVehicle, bUsesSkeletalSignificanceManagement) == 0x0007A1, "Member 'ASQVehicle::bUsesSkeletalSignificanceManagement' has a wrong offset!");
static_assert(offsetof(ASQVehicle, OnVehicleDestroyed) == 0x0007A8, "Member 'ASQVehicle::OnVehicleDestroyed' has a wrong offset!");
static_assert(offsetof(ASQVehicle, OnVehicleDamaged) == 0x0007B8, "Member 'ASQVehicle::OnVehicleDamaged' has a wrong offset!");
static_assert(offsetof(ASQVehicle, OnPlayerEntered) == 0x0007C8, "Member 'ASQVehicle::OnPlayerEntered' has a wrong offset!");
static_assert(offsetof(ASQVehicle, OnPlayerExited) == 0x0007D8, "Member 'ASQVehicle::OnPlayerExited' has a wrong offset!");
static_assert(offsetof(ASQVehicle, OnPlayerSwitchedSeats) == 0x0007E8, "Member 'ASQVehicle::OnPlayerSwitchedSeats' has a wrong offset!");
static_assert(offsetof(ASQVehicle, AmmoUpdatedEvent) == 0x0007F8, "Member 'ASQVehicle::AmmoUpdatedEvent' has a wrong offset!");
static_assert(offsetof(ASQVehicle, OnVehicleEnterSound) == 0x000808, "Member 'ASQVehicle::OnVehicleEnterSound' has a wrong offset!");
static_assert(offsetof(ASQVehicle, OnVehicleExitSound) == 0x000810, "Member 'ASQVehicle::OnVehicleExitSound' has a wrong offset!");
static_assert(offsetof(ASQVehicle, OnSeatSwitchSound) == 0x000818, "Member 'ASQVehicle::OnSeatSwitchSound' has a wrong offset!");
static_assert(offsetof(ASQVehicle, ExitSpeedOffset) == 0x000820, "Member 'ASQVehicle::ExitSpeedOffset' has a wrong offset!");
static_assert(offsetof(ASQVehicle, Buffs) == 0x000828, "Member 'ASQVehicle::Buffs' has a wrong offset!");
static_assert(offsetof(ASQVehicle, Health) == 0x000830, "Member 'ASQVehicle::Health' has a wrong offset!");
static_assert(offsetof(ASQVehicle, MaxHealth) == 0x000834, "Member 'ASQVehicle::MaxHealth' has a wrong offset!");
static_assert(offsetof(ASQVehicle, LastDamageTypeClass) == 0x000838, "Member 'ASQVehicle::LastDamageTypeClass' has a wrong offset!");
static_assert(offsetof(ASQVehicle, LastDamageInstigator) == 0x000840, "Member 'ASQVehicle::LastDamageInstigator' has a wrong offset!");
static_assert(offsetof(ASQVehicle, bCanStackRepairers) == 0x000848, "Member 'ASQVehicle::bCanStackRepairers' has a wrong offset!");
static_assert(offsetof(ASQVehicle, bUseDelayBeforeWreck) == 0x000849, "Member 'ASQVehicle::bUseDelayBeforeWreck' has a wrong offset!");
static_assert(offsetof(ASQVehicle, WreckDelay) == 0x00084C, "Member 'ASQVehicle::WreckDelay' has a wrong offset!");
static_assert(offsetof(ASQVehicle, MaxRepairToolLimit) == 0x000850, "Member 'ASQVehicle::MaxRepairToolLimit' has a wrong offset!");
static_assert(offsetof(ASQVehicle, LastDamageInstigatorTimeoutThreshold) == 0x000854, "Member 'ASQVehicle::LastDamageInstigatorTimeoutThreshold' has a wrong offset!");
static_assert(offsetof(ASQVehicle, FlipPitchThreshold) == 0x000860, "Member 'ASQVehicle::FlipPitchThreshold' has a wrong offset!");
static_assert(offsetof(ASQVehicle, FlipRollThreshold) == 0x000864, "Member 'ASQVehicle::FlipRollThreshold' has a wrong offset!");
static_assert(offsetof(ASQVehicle, FlipSpeedThreshold) == 0x000868, "Member 'ASQVehicle::FlipSpeedThreshold' has a wrong offset!");
static_assert(offsetof(ASQVehicle, FlipRotationExceededTimeThreshold) == 0x000870, "Member 'ASQVehicle::FlipRotationExceededTimeThreshold' has a wrong offset!");
static_assert(offsetof(ASQVehicle, DestroyTime) == 0x000874, "Member 'ASQVehicle::DestroyTime' has a wrong offset!");
static_assert(offsetof(ASQVehicle, bHasBeenDestroyed) == 0x000878, "Member 'ASQVehicle::bHasBeenDestroyed' has a wrong offset!");
static_assert(offsetof(ASQVehicle, AllowableDamageTypes) == 0x000880, "Member 'ASQVehicle::AllowableDamageTypes' has a wrong offset!");
static_assert(offsetof(ASQVehicle, DamageEffects) == 0x000890, "Member 'ASQVehicle::DamageEffects' has a wrong offset!");
static_assert(offsetof(ASQVehicle, StaticUIData) == 0x0008B8, "Member 'ASQVehicle::StaticUIData' has a wrong offset!");
static_assert(offsetof(ASQVehicle, MaxThrottle) == 0x0008C0, "Member 'ASQVehicle::MaxThrottle' has a wrong offset!");
static_assert(offsetof(ASQVehicle, EmergencyRecoveryComponent) == 0x0008C8, "Member 'ASQVehicle::EmergencyRecoveryComponent' has a wrong offset!");
static_assert(offsetof(ASQVehicle, PlayerSeatPairInfoArray) == 0x0008D0, "Member 'ASQVehicle::PlayerSeatPairInfoArray' has a wrong offset!");
static_assert(offsetof(ASQVehicle, CurrentRepairers) == 0x0008E8, "Member 'ASQVehicle::CurrentRepairers' has a wrong offset!");
static_assert(offsetof(ASQVehicle, Setting) == 0x0008F8, "Member 'ASQVehicle::Setting' has a wrong offset!");

// Class Squad.SQGroundVehicle
// 0x0250 (0x0B60 - 0x0910)
#pragma pack(push, 0x1)
class alignas(0x10) ASQGroundVehicle : public ASQVehicle
{
public:
	TArray<struct FSQVehicleEffectsQualitySetting> VehicleEffectsQualitySettings;                     // 0x0908(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQVehicleEffectConfig>         VehicleEffectsConfig;                              // 0x0918(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector2D                              WheelFXSound_RPMRate;                              // 0x0928(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WheelFXSound_LongSlipRate;                         // 0x0930(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WheelFXSound_LatSlipRate;                          // 0x0938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           WheelUnderwaterTimer;                              // 0x0940(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WheelUnderwaterUpdateInterval;                     // 0x0948(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEjectOpenSeatsOnHardLanding;                      // 0x094C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawDebugTraces;                                  // 0x094D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E27[0x2];                                      // 0x094E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           HardLandingCheckTimer;                             // 0x0950(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           IsFlyingTimer;                                     // 0x0958(0x0008)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IsFlyingUpdateInterval;                            // 0x0960(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IsHardLandingUpdateInterval;                       // 0x0964(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           LandingTraceSockets;                               // 0x0968(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         LandingTraceLenght;                                // 0x0978(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFlying;                                         // 0x097C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E28[0x3];                                      // 0x097D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastFlyingZVelocity;                               // 0x0980(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EjectZVelocityThreshold;                           // 0x0984(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         LandingCheckActorsToIgnore;                        // 0x0988(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class USQVehicleCleanupComponent*             VehicleCleanupComponent;                           // 0x0998(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnEngineStateChanged;                              // 0x09A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bShouldSimulate;                                   // 0x09B0(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E29[0x7];                                      // 0x09B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              EngineRPMSound;                                    // 0x09B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioComponent*                        EngineRPMAC;                                       // 0x09C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundCue*                              EngineExhaustSound;                                // 0x09C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioComponent*                        EngineExhaustStartAC;                              // 0x09D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioComponent*                        EngineExhaustAC;                                   // 0x09D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioComponent*                        EngineExhaustStopAC;                               // 0x09E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundCue*                              EngineStartSound;                                  // 0x09E8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioComponent*                        EngineCompletedStartAC;                            // 0x09F0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundCue*                              EngineCompletedStartSound;                         // 0x09F8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioComponent*                        EngineFailedStartAC;                               // 0x0A00(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundCue*                              EngineFailedStartSound;                            // 0x0A08(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioComponent*                        EngineStartAC;                                     // 0x0A10(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundCue*                              EngineStopSound;                                   // 0x0A18(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundCue*                              MistSound;                                         // 0x0A20(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundCue*                              PropellerMistSound;                                // 0x0A28(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioComponent*                        EngineStopAC;                                      // 0x0A30(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioComponent*                        EngineSpeedAC;                                     // 0x0A38(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioComponent*                        WheelFXAC;                                         // 0x0A40(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundCue*                              LandingSound;                                      // 0x0A48(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EngineIdleFadeInAfterEngineStartTime;              // 0x0A50(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EngineIdleFadeOutAfterEngineStopTime;              // 0x0A54(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpringCompressionLandingThreshold;                 // 0x0A58(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SkidThresholdVelocity;                             // 0x0A5C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LongSlipSkidThreshold;                             // 0x0A60(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LateralSlipSkidThreshold;                          // 0x0A64(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystemComponent*               ExhaustPSC;                                        // 0x0A68(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      ExhaustNPSC;                                       // 0x0A70(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTiresTouchingGround;                              // 0x0A78(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHandbrakeActive;                                  // 0x0A79(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsEngineActive;                                   // 0x0A7A(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsEngineToggleActive;                             // 0x0A7B(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowEngineBoosting;                              // 0x0A7C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E2A[0x3];                                      // 0x0A7D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EngineBoostTorqueMultiplier;                       // 0x0A80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasEngineBoostBeenPressed;                        // 0x0A84(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E2B[0x3];                                      // 0x0A85(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQEngineMovementSoundObject>   EngineMovementSounds;                              // 0x0A88(0x0010)(Edit, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	float                                         ActivateEngineDelay;                               // 0x0A98(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DeActivateEngineDelay;                             // 0x0A9C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E2C[0x14];                                     // 0x0AA0(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GearChangingAlphaLerpSpeed;                        // 0x0AB4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWheeledVehicleMovementComponent*       VehicleMovement;                                   // 0x0AB8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBoxComponent*                          VehicleRagdollOverlap;                             // 0x0AC0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RagollOverlapTriggerSpeed;                         // 0x0AC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CollisionKillSpeedKPH;                             // 0x0ACC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCollisionsKillSoldiers;                           // 0x0AD0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E2D[0x3];                                      // 0x0AD1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WheelInflationRate;                                // 0x0AD4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class USQDriveTrainComponent*>         DriveTrainComponents;                              // 0x0AD8(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_E2E[0x50];                                     // 0x0AE8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class USQWaterDamageComponent*                WaterDamageComp;                                   // 0x0B38(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQWaterSeatEjectionComponent*          SeatEjectionComp;                                  // 0x0B40(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQWaterDampeningComponent*             WaterDampeningComp;                                // 0x0B48(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E2F[0x8];                                      // 0x0B50(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool DoesVehicleHaveWheels();
	void EjectAllExposedSeatPlayers();
	void OnRagdollBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnRep_EngineActive();
	void OnRep_EngineToggleActive();
	void OnRep_ShouldSimulate();
	void ServerSetEngineActiveInput(bool bNewEngineActive);
	void ServerSetEngineBoostPressed(bool bInHasEngineBoostBeenPressed);
	void ServerSetEngineToggleActiveInput(bool bInIsEngineToggleActive);
	void ToggleWheelUnderwaterTimer(bool bActivated);
	void UpdateIsFlying();
	void UpdateIsHardLanding();
	void UpdateWheelUnderwaterDepth();

	float GetCurrentEngineToggleElapsedTime() const;
	float GetCurrentEngineTogglePercentage() const;
	float GetCurrentEngineToggleRequiredDuration() const;
	float GetEngineLoad() const;
	float GetEngineMaxRPM() const;
	float GetEngineRPM() const;
	float GetForwardSpeed() const;
	bool IsEngineActive() const;
	bool IsEngineToggleActive() const;
	bool IsHandbrakeActive() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGroundVehicle">();
	}
	static class ASQGroundVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQGroundVehicle>();
	}
};
#pragma pack(pop)
static_assert(alignof(ASQGroundVehicle) == 0x000010, "Wrong alignment on ASQGroundVehicle");
static_assert(sizeof(ASQGroundVehicle) == 0x000B60, "Wrong size on ASQGroundVehicle");
static_assert(offsetof(ASQGroundVehicle, VehicleEffectsQualitySettings) == 0x000908, "Member 'ASQGroundVehicle::VehicleEffectsQualitySettings' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, VehicleEffectsConfig) == 0x000918, "Member 'ASQGroundVehicle::VehicleEffectsConfig' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, WheelFXSound_RPMRate) == 0x000928, "Member 'ASQGroundVehicle::WheelFXSound_RPMRate' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, WheelFXSound_LongSlipRate) == 0x000930, "Member 'ASQGroundVehicle::WheelFXSound_LongSlipRate' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, WheelFXSound_LatSlipRate) == 0x000938, "Member 'ASQGroundVehicle::WheelFXSound_LatSlipRate' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, WheelUnderwaterTimer) == 0x000940, "Member 'ASQGroundVehicle::WheelUnderwaterTimer' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, WheelUnderwaterUpdateInterval) == 0x000948, "Member 'ASQGroundVehicle::WheelUnderwaterUpdateInterval' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, bEjectOpenSeatsOnHardLanding) == 0x00094C, "Member 'ASQGroundVehicle::bEjectOpenSeatsOnHardLanding' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, bDrawDebugTraces) == 0x00094D, "Member 'ASQGroundVehicle::bDrawDebugTraces' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, HardLandingCheckTimer) == 0x000950, "Member 'ASQGroundVehicle::HardLandingCheckTimer' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, IsFlyingTimer) == 0x000958, "Member 'ASQGroundVehicle::IsFlyingTimer' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, IsFlyingUpdateInterval) == 0x000960, "Member 'ASQGroundVehicle::IsFlyingUpdateInterval' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, IsHardLandingUpdateInterval) == 0x000964, "Member 'ASQGroundVehicle::IsHardLandingUpdateInterval' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, LandingTraceSockets) == 0x000968, "Member 'ASQGroundVehicle::LandingTraceSockets' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, LandingTraceLenght) == 0x000978, "Member 'ASQGroundVehicle::LandingTraceLenght' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, bIsFlying) == 0x00097C, "Member 'ASQGroundVehicle::bIsFlying' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, LastFlyingZVelocity) == 0x000980, "Member 'ASQGroundVehicle::LastFlyingZVelocity' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, EjectZVelocityThreshold) == 0x000984, "Member 'ASQGroundVehicle::EjectZVelocityThreshold' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, LandingCheckActorsToIgnore) == 0x000988, "Member 'ASQGroundVehicle::LandingCheckActorsToIgnore' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, VehicleCleanupComponent) == 0x000998, "Member 'ASQGroundVehicle::VehicleCleanupComponent' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, OnEngineStateChanged) == 0x0009A0, "Member 'ASQGroundVehicle::OnEngineStateChanged' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, bShouldSimulate) == 0x0009B0, "Member 'ASQGroundVehicle::bShouldSimulate' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, EngineRPMSound) == 0x0009B8, "Member 'ASQGroundVehicle::EngineRPMSound' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, EngineRPMAC) == 0x0009C0, "Member 'ASQGroundVehicle::EngineRPMAC' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, EngineExhaustSound) == 0x0009C8, "Member 'ASQGroundVehicle::EngineExhaustSound' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, EngineExhaustStartAC) == 0x0009D0, "Member 'ASQGroundVehicle::EngineExhaustStartAC' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, EngineExhaustAC) == 0x0009D8, "Member 'ASQGroundVehicle::EngineExhaustAC' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, EngineExhaustStopAC) == 0x0009E0, "Member 'ASQGroundVehicle::EngineExhaustStopAC' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, EngineStartSound) == 0x0009E8, "Member 'ASQGroundVehicle::EngineStartSound' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, EngineCompletedStartAC) == 0x0009F0, "Member 'ASQGroundVehicle::EngineCompletedStartAC' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, EngineCompletedStartSound) == 0x0009F8, "Member 'ASQGroundVehicle::EngineCompletedStartSound' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, EngineFailedStartAC) == 0x000A00, "Member 'ASQGroundVehicle::EngineFailedStartAC' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, EngineFailedStartSound) == 0x000A08, "Member 'ASQGroundVehicle::EngineFailedStartSound' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, EngineStartAC) == 0x000A10, "Member 'ASQGroundVehicle::EngineStartAC' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, EngineStopSound) == 0x000A18, "Member 'ASQGroundVehicle::EngineStopSound' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, MistSound) == 0x000A20, "Member 'ASQGroundVehicle::MistSound' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, PropellerMistSound) == 0x000A28, "Member 'ASQGroundVehicle::PropellerMistSound' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, EngineStopAC) == 0x000A30, "Member 'ASQGroundVehicle::EngineStopAC' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, EngineSpeedAC) == 0x000A38, "Member 'ASQGroundVehicle::EngineSpeedAC' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, WheelFXAC) == 0x000A40, "Member 'ASQGroundVehicle::WheelFXAC' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, LandingSound) == 0x000A48, "Member 'ASQGroundVehicle::LandingSound' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, EngineIdleFadeInAfterEngineStartTime) == 0x000A50, "Member 'ASQGroundVehicle::EngineIdleFadeInAfterEngineStartTime' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, EngineIdleFadeOutAfterEngineStopTime) == 0x000A54, "Member 'ASQGroundVehicle::EngineIdleFadeOutAfterEngineStopTime' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, SpringCompressionLandingThreshold) == 0x000A58, "Member 'ASQGroundVehicle::SpringCompressionLandingThreshold' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, SkidThresholdVelocity) == 0x000A5C, "Member 'ASQGroundVehicle::SkidThresholdVelocity' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, LongSlipSkidThreshold) == 0x000A60, "Member 'ASQGroundVehicle::LongSlipSkidThreshold' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, LateralSlipSkidThreshold) == 0x000A64, "Member 'ASQGroundVehicle::LateralSlipSkidThreshold' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, ExhaustPSC) == 0x000A68, "Member 'ASQGroundVehicle::ExhaustPSC' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, ExhaustNPSC) == 0x000A70, "Member 'ASQGroundVehicle::ExhaustNPSC' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, bTiresTouchingGround) == 0x000A78, "Member 'ASQGroundVehicle::bTiresTouchingGround' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, bHandbrakeActive) == 0x000A79, "Member 'ASQGroundVehicle::bHandbrakeActive' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, bIsEngineActive) == 0x000A7A, "Member 'ASQGroundVehicle::bIsEngineActive' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, bIsEngineToggleActive) == 0x000A7B, "Member 'ASQGroundVehicle::bIsEngineToggleActive' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, bAllowEngineBoosting) == 0x000A7C, "Member 'ASQGroundVehicle::bAllowEngineBoosting' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, EngineBoostTorqueMultiplier) == 0x000A80, "Member 'ASQGroundVehicle::EngineBoostTorqueMultiplier' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, bHasEngineBoostBeenPressed) == 0x000A84, "Member 'ASQGroundVehicle::bHasEngineBoostBeenPressed' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, EngineMovementSounds) == 0x000A88, "Member 'ASQGroundVehicle::EngineMovementSounds' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, ActivateEngineDelay) == 0x000A98, "Member 'ASQGroundVehicle::ActivateEngineDelay' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, DeActivateEngineDelay) == 0x000A9C, "Member 'ASQGroundVehicle::DeActivateEngineDelay' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, GearChangingAlphaLerpSpeed) == 0x000AB4, "Member 'ASQGroundVehicle::GearChangingAlphaLerpSpeed' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, VehicleMovement) == 0x000AB8, "Member 'ASQGroundVehicle::VehicleMovement' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, VehicleRagdollOverlap) == 0x000AC0, "Member 'ASQGroundVehicle::VehicleRagdollOverlap' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, RagollOverlapTriggerSpeed) == 0x000AC8, "Member 'ASQGroundVehicle::RagollOverlapTriggerSpeed' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, CollisionKillSpeedKPH) == 0x000ACC, "Member 'ASQGroundVehicle::CollisionKillSpeedKPH' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, bCollisionsKillSoldiers) == 0x000AD0, "Member 'ASQGroundVehicle::bCollisionsKillSoldiers' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, WheelInflationRate) == 0x000AD4, "Member 'ASQGroundVehicle::WheelInflationRate' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, DriveTrainComponents) == 0x000AD8, "Member 'ASQGroundVehicle::DriveTrainComponents' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, WaterDamageComp) == 0x000B38, "Member 'ASQGroundVehicle::WaterDamageComp' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, SeatEjectionComp) == 0x000B40, "Member 'ASQGroundVehicle::SeatEjectionComp' has a wrong offset!");
static_assert(offsetof(ASQGroundVehicle, WaterDampeningComp) == 0x000B48, "Member 'ASQGroundVehicle::WaterDampeningComp' has a wrong offset!");

// Class Squad.SQWheeledVehicleBase
// 0x0000 (0x0B60 - 0x0B60)
class ASQWheeledVehicleBase : public ASQGroundVehicle
{
public:
	float                                         DamagedDampingRateMultiplier;                      // 0x0B58(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DampingRateMultiplier;                             // 0x0B5C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void DestroyWheel(class USQDriveTrainComponent* DriveTrainComponent, bool bReverseDamage);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQWheeledVehicleBase">();
	}
	static class ASQWheeledVehicleBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQWheeledVehicleBase>();
	}
};
static_assert(alignof(ASQWheeledVehicleBase) == 0x000010, "Wrong alignment on ASQWheeledVehicleBase");
static_assert(sizeof(ASQWheeledVehicleBase) == 0x000B60, "Wrong size on ASQWheeledVehicleBase");
static_assert(offsetof(ASQWheeledVehicleBase, DamagedDampingRateMultiplier) == 0x000B58, "Member 'ASQWheeledVehicleBase::DamagedDampingRateMultiplier' has a wrong offset!");
static_assert(offsetof(ASQWheeledVehicleBase, DampingRateMultiplier) == 0x000B5C, "Member 'ASQWheeledVehicleBase::DampingRateMultiplier' has a wrong offset!");

// Class Squad.SQAdminPanel
// 0x0000 (0x0260 - 0x0260)
class USQAdminPanel final : public UUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAdminPanel">();
	}
	static class USQAdminPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQAdminPanel>();
	}
};
static_assert(alignof(USQAdminPanel) == 0x000008, "Wrong alignment on USQAdminPanel");
static_assert(sizeof(USQAdminPanel) == 0x000260, "Wrong size on USQAdminPanel");

// Class Squad.SQMultiThreadedFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USQMultiThreadedFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void QueueBlueprintMultithreadTask(class USQMultithreadObject* MultithreadObject, TDelegate<void(class USQMultithreadObject* CompletedObject)> OnCompleted);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMultiThreadedFunctionLibrary">();
	}
	static class USQMultiThreadedFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMultiThreadedFunctionLibrary>();
	}
};
static_assert(alignof(USQMultiThreadedFunctionLibrary) == 0x000008, "Wrong alignment on USQMultiThreadedFunctionLibrary");
static_assert(sizeof(USQMultiThreadedFunctionLibrary) == 0x000028, "Wrong size on USQMultiThreadedFunctionLibrary");

// Class Squad.SQPlayerController
// 0x0588 (0x0B00 - 0x0578)
class alignas(0x10) ASQPlayerController : public APlayerController
{
public:
	uint8                                         Pad_E32[0x10];                                     // 0x0578(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQTeam*                                AuthorityTeam;                                     // 0x0588(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQTeamState*                           TeamState;                                         // 0x0590(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQTeamStatePrivate*                    PrivateTeamState;                                  // 0x0598(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQSquad*                               AuthoritySquad;                                    // 0x05A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQSquadState*                          SquadState;                                        // 0x05A8(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQSquadStatePrivateToTeam*             TeamPrivateSquadState;                             // 0x05B0(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQCoreStateConnection*                 StateConnection;                                   // 0x05B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnMenuPopupDelay;                               // 0x05C0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E33[0x4];                                      // 0x05C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQSoldier*                             LastSpawnedSoldier;                                // 0x05C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E34[0x1];                                      // 0x05D0(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          AreCommunicationButtonsAllowed;                    // 0x05D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWinner;                                          // 0x05D2(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDidSeamlessTravel;                                // 0x05D3(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeBecameIncapacitated;                           // 0x05D4(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnDelayPenalties;                               // 0x05D8(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpawnDelay;                                     // 0x05DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasInVehicle;                                     // 0x05E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E35[0x3];                                      // 0x05E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQBitFlag                             AccessLevel;                                       // 0x05E4(0x0004)(Net, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E36[0x18];                                     // 0x05E8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnPlayerEnterVehicleEvent;                         // 0x0600(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayerExitVehicleEvent;                          // 0x0610(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class USQEmotesData*                          LastPlayedEmote;                                   // 0x0620(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnRallyCreated;                                    // 0x0628(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_E37[0x3];                                      // 0x0638(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ESQVoiceChannel                               RecentVoiceChannel;                                // 0x063B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E38[0xC];                                      // 0x063C(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnServerVoiceChannelChanged;                       // 0x0648(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChatStarted;                                     // 0x0658(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class USQToastWidget>             ToastWidgetClass;                                  // 0x0668(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ChangeRoleNoAmmoText;                              // 0x0670(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   AmmoBagNoAmmoText;                                 // 0x0688(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   MaxAmmoBagText;                                    // 0x06A0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   RearmFromAmmoBagText;                              // 0x06B8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   RoleCannotPickupAmmoBagText;                       // 0x06D0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   RearmFromVehicleNoAmmoText;                        // 0x06E8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   RearmFromVehicleConfirmationText;                  // 0x0700(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   RearmFromVehiclePromptText;                        // 0x0718(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   CannotStartVehicleInStagingPhaseText;              // 0x0730(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         WalkingOriginRebaseThreshold;                      // 0x0748(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RidingOriginRebaseThreshold;                       // 0x074C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlyingOriginRebaseThreshold;                       // 0x0750(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeaveVehicleOriginRebaseThreshold;                 // 0x0754(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OriginRebaseFrequency;                             // 0x0758(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E39[0x4];                                      // 0x075C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class ASQMapMarker>>       MapMarkerArray;                                    // 0x0760(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class USQMapMarkerInputComponent*             MapMarkerInputComponent;                           // 0x0770(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnNewMarkerCreatedEvent;                           // 0x0778(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	class USQAdminStats*                          AdminStats;                                        // 0x0788(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AActor>>             SpawnableActors;                                   // 0x0790(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UDataTable*                             ApprovalMessages;                                  // 0x07A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQVehicleSeatComponent*                CurrentSeat;                                       // 0x07A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E3A[0x134];                                    // 0x07B0(0x0134)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SensitivityInterpSpeed;                            // 0x08E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E3B[0x4];                                      // 0x08E8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AlwaysRenderPawnsDistance;                         // 0x08EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E3C[0x30];                                     // 0x08F0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        MusicAC;                                           // 0x0920(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundBase*                             MusicSound;                                        // 0x0928(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FSQSystemHUDMessage>            QueuedSystemMessages;                              // 0x0930(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class APawn>>              RefreshTypes;                                      // 0x0940(0x0010)(Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class USQDataGatheringComponent*              DataGatheringComponent;                            // 0x0950(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQCommanderInputComponent*             CommanderInputComponent;                           // 0x0958(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQBoundaryListener*                    BoundaryListener;                                  // 0x0960(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OutOfMapBoundsKillTimestamp;                       // 0x0968(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PendingDeathKillTimestamp;                         // 0x096C(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APawn*                                  LastRefreshedPawn;                                 // 0x0970(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ASQGameSpawn*                           SelectedSpawn;                                     // 0x0978(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E3D[0x8];                                      // 0x0980(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<uint32, struct FSQApprovalEntryRequest>  ApprovalEntries;                                   // 0x0988(0x0050)(NativeAccessSpecifierPrivate)
	TMap<uint32, struct FSQApprovalEntryClientDesc> ApprovalEntriesOnClient;                           // 0x09D8(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_E3E[0x20];                                     // 0x0A28(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PawnRenderDistance;                                // 0x0A48(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E3F[0x34];                                     // 0x0A4C(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FUniqueNetIdRepl, class ASQPlayerState*> CachedPlayersToMute;                               // 0x0A80(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_E40[0x8];                                      // 0x0AD0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USQMovementComponentNetworker*          Networker;                                         // 0x0AD8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQDeployable*                          ActiveGhost;                                       // 0x0AE0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDeployingItem;                                   // 0x0AE8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E41[0x7];                                      // 0x0AE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USQVotingComponent>         VotingComponentClass;                              // 0x0AF0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQVotingComponent*                     VotingComponent;                                   // 0x0AF8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ApprovalEntryExpireOnClient(uint32 Param_Index);
	void ApprovalEntryExpireOnServer(uint32 Param_Index);
	void ApproveQueue();
	void ApproveVehicleClaim();
	void BlueprintOnMatchEnded(int32 WinningTeam, int32 LosingTeam, int32 WinnerTickets, int32 LoserTickets);
	void BlueprintOnMatchStarted();
	void BlueprintPlayerDied();
	void BlueprintPlayerSpawned();
	void BP_ExposeUnavailabilityReason(const struct FDataTableRowHandle& InReason);
	void BP_FailPlaceDeployableFromEquippable(class ASQEquipableItem* Equippable);
	void BP_InitializeDeployableFromEquippable(class ASQDeployableItem* DeployableItem, class ASQEquipableItem* Equippable);
	bool BPHasAccessLevel(ESQAdminAccessLevels RequestedLevel);
	void BPServerRearmWeapons(const TScriptInterface<class ISQRearmSource>& RearmSource, const TArray<struct FSQRearmWeaponRequest>& RearmRequest);
	void BPTraceMarkerLocation(TSubclassOf<class ASQMapMarker> MarkerClass, const struct FVector& Start, const struct FVector& End);
	void CancelEmote(const class USQEmotesData* EmoteData);
	void CancelPendingDeployable();
	void ChangeRole(class USQRoleSettings* NewRole, bool bGivePartialAmmo, bool bLeavingSquad);
	void ChangeRoleFromDeployable(class USQRoleSettings* NewRole, class ASQDeployable* Deployable);
	void ChangeTeams();
	void ChangeTeamsWithId(int32 NewTeam);
	void Chat(const class FString& Msg, const ESQChat ChatType);
	void ChatToAll(const class FString& Msg);
	void ChatToSquad(const class FString& Msg);
	void ChatToTeam(const class FString& Msg);
	void CheckForAdmin();
	void ClientCloseAmmoBag(class ASQDeployableAmmoBag* Ammobag);
	void ClientCloseDeployableInteractableMenu(class ASQDeployableInteractable* DeployableInteractable);
	void ClientCreateVehicleOverlayWidget(TSubclassOf<class USQVehicleViewWidget> WidgetClass);
	void ClientDrawSphere(const struct FVector& ZeroLocation, float Radius, int32 Segments, const struct FColor& Color, bool RebaseOntoLocal, bool bPersistentLines, float Lifetime, const class FString& LogLabel, uint8 DepthPriority, float Thickness);
	void ClientEndHealing();
	void ClientEndOnlineGame();
	void ClientExposeUnavailabilityReason(const struct FDataTableRowHandle& InReason);
	void ClientGameStarted();
	void ClientHideVehicleRadial();
	void ClientIgnoreWeaponInput(bool bIgnore);
	void ClientOnPlayerToggleVoice_Editor(const struct FUniqueNetIdRepl& TalkingPlayerId, ESQVoiceChannel VoiceChannel);
	void ClientOpenAmmoBag(class ASQDeployableAmmoBag* Ammobag);
	void ClientOpenDeployableInteractableMenu(class ASQDeployableInteractable* DeployableInteractable);
	void ClientPushApprovalMessage(uint32 Key, const struct FSQApprovalEntryRequest& ApprovalEntry, const class ASQPlayerState* Requester);
	void ClientRemoveVehicleOverlayWidget();
	void ClientReportServerTime(const struct FDateTime& InRequestClientUTCTime, const struct FDateTime& InServerUTCTime, float WaterTimeSeconds);
	void ClientResetInventoryWeaponIndex();
	void ClientSendLineToConsole(const class FString& Line);
	void ClientSendRoundEndEvent(int32 WinningTeam, int32 LosingTeam, int32 WinnerTickets, int32 LoserTickets);
	void ClientSetSpectatorCamera(const struct FVector& CameraLocation, const struct FRotator& CameraRotation);
	void ClientShowToast(const class FText& ToastText, float Lifetime);
	void ClientShowVehicleInventory(class ASQVehicle* Vehicle, ESeatProgressMenuMode MenuMode);
	void ClientStartingNewPlayer();
	void ClientStartOnlineGame();
	void ClientStartSeatProgressBar(float Timer, class ASQVehicle* Vehicle, ESeatProgressMenuMode MenuMode);
	void ClientSystemMessage(const class FString& Message, const struct FLinearColor& Color, const float MessageLifetime, ESQNotificationTypes NotificationType);
	void ClientWasKickedFromSquad(const class FText& KickReason, int32 SquadId, float DurationOfBan);
	void CloseConsole();
	void CommitSpawn();
	void CoreStateRefreshVisibility();
	void CreateMarker(int32 TeamId, int32 ClientId, class UTexture2D* IconTexture, const struct FVector2D& MapPosition, float LifeT, class AActor* MyOwner);
	void CreateRallyPoint();
	void CreateSquad(const class FString& Param_Name, bool Locked);
	void DebugAssignSteamTestItem(int32 ID, int32 Amount);
	void DebugBugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);
	void DebugEndMatch();
	void DebugForceOriginRebase();
	void DebugPlayEmote(const class FString& EmoteDataName);
	void DebugRemoveSteamTestItem(int32 ID, int32 Amount);
	void DebugSetServerSecondsNonSeamlessForced(float Seconds);
	void DebugSetServerTickRate(float NewTickRate);
	void DebugSkipStaging();
	void DebugToggleCenterDot();
	void DebugToggleEditorBlastCones(bool Value);
	void DebugToggleForceAllowCommanderActions(bool Value);
	void DebugToggleForceNoCommanderCooldowns(bool Value);
	void DebugToggleInfiniteMags(bool Value);
	void DebugToggleNoStaminaDrain(bool Value);
	void DebugToggleShowHitreg(bool Value);
	void DebugToggleShowRebase(bool Value);
	void DebugToggleShowVehicleDamageReceived(bool Value);
	void DebugToggleVehicleGodMode(bool Value);
	void DisapproveQueue();
	void DisbandFireTeam(int32 FireTeamIndex);
	void DisbandSquad();
	void FinalizePendingDeployable(bool* OutSuccess);
	void FinalizePendingDeployableItem(bool* OutSuccess);
	float GetLastDeathTime();
	void GiveFireTeamLeader(class ASQPlayerState* NewLeader, int32 FireTeamIndex);
	void GiveSquadLeader(class ASQPlayerState* NewLeader);
	void GiveUp();
	bool IsEntryMap();
	bool IsInactive();
	bool IsInVehicle();
	bool IsPlayer();
	bool IsShowingSpawnMenu();
	void JoinSquadWithId(int32 ID);
	void JoinSquadWithName(const class FString& Param_Name);
	void KickPlayerFromSquad(class ASQPlayerState* ToKick);
	void LeaveSquad();
	void MovePlayerToFireTeam(class ASQPlayerState* TargetPlayerState, int32 FireTeamIndex, int32 Position);
	void MuteAllPlayersExceptSquad();
	void MuteSquad(class ASQSquadState* MuteSquadState);
	bool OnAltFireWeaponOverride();
	void OnDelayedSpawnCallback();
	void OnEnterBoundary(class USQBoundaryListener* Listener, class ASQBoundary* Boundary);
	void OnExitBoundary(class USQBoundaryListener* Listener, class ASQBoundary* Boundary);
	bool OnFireWeaponOverride();
	void OnOutOfMapBoundsChanged(float KillTimestamp, bool bIsOutOfBounds);
	void OnPendingDeathChanged(float KillTimestamp, bool bDeathIsPending);
	void OnRep_CurrentSeat();
	void OnRep_OutOfMapBoundsKillTimestamp();
	void OnRep_PendingDeathKillTimestamp();
	void OnRep_SquadState(class ASQSquadState* OldSquadState);
	void OnRep_TeamState();
	void OnSelectedSpawnActivatedTimeStampChangedSignal(class ASQGameSpawn* SpawnPoint);
	void OnSelectedSpawnerDestroyed(class AActor* Actor);
	void OnSelectedSpawnSiegedStateChanged(class ASQGameSpawn* SpawnPoint);
	void OnSpawningEnabledStateChanged(class ASQGameSpawn* SpawnPoint);
	void OnWorldOriginLocationChangedEventHandler(const struct FVector& WorldOrigin);
	void PlayEmote(const class USQEmotesData* EmoteData);
	void PlayEmoteAnim(ESQEmotes Emote, const class FName CustomName);
	void PlayMusic();
	void PrintWeaponHashes();
	void ProcessApprovalEntry(uint8 Mode);
	void RandomizeOriginOffset();
	bool RequestRole(const class USQRoleSettings* InRoleSettings);
	bool RequestRoleRearm(const class USQRoleSettings* InRoleSettings, const TScriptInterface<class ISQRearmSource>& InRearmSource);
	void Respawn();
	void Say(const class FString& Msg);
	void SelectSpawn(class ASQGameSpawn* Spawn);
	void ServerAddApprovalEntry(const struct FSQApprovalEntryRequest& Entry, EApprovalRequestChannels Filter);
	void ServerCancelEmote(const class FName& EmoteDataName);
	void ServerCancelRestartPlayer();
	void ServerChangeSquadLock(class ASQSquadState* Squad);
	void ServerChat(const class FString& Msg, const ESQChat ChatType);
	void ServerCreateRallyPoint();
	void ServerCreateSquad(const class FString& Param_Name, bool Locked);
	void ServerCreateVehicleOverlayWidget(TSubclassOf<class USQVehicleViewWidget> WidgetClass);
	void ServerDebugAssignSteamTestItem(int32 ID, int32 Amount);
	void ServerDebugBugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);
	void ServerDebugEndMatch();
	void ServerDebugRemoveSteamTestItem(int32 ID, int32 Amount);
	void ServerDebugSetServerSecondsNonSeamlessForced(float Seconds);
	void ServerDebugSetServerTickRate(float NewTickRate);
	void ServerDebugSkipStaging();
	void ServerDebugToggleForceAllowCommanderActions(bool Value);
	void ServerDebugToggleForceNoCommanderCooldowns(bool Value);
	void ServerDebugToggleInfiniteMags(bool Value);
	void ServerDebugToggleNoStaminaDrain(bool Value);
	void ServerDebugToggleShowHitreg(bool Value);
	void ServerDebugToggleShowRebase(bool Value);
	void ServerDebugToggleShowVehicleDamageReceived(bool Value);
	void ServerDebugToggleVehicleGodMode(bool Value);
	void ServerDisbandFireTeam(int32 FireTeamIndex);
	void ServerDisbandSquad();
	void ServerEmergencyTeleport(class ASQVehicle* Vehicle, ESQVehicleRecoveryMethod RecoveryMethod, float DesiredYawRotation);
	void ServerEndHealing();
	void ServerFinishSeatProgress(class ASQVehicle* Vehicle);
	void ServerGameCommandFromRemotePlayer(const class FString& Cmd);
	void ServerGameplayMutePlayer(const struct FUniqueNetIdRepl& MutePlayerId);
	void ServerGameplayUnmutePlayer(const struct FUniqueNetIdRepl& MutePlayerId);
	void ServerGiveFireTeamLeader(class ASQPlayerState* NewLeader, int32 FireTeamIndex);
	void ServerGiveSquadLeader(class ASQPlayerState* NewLeader);
	void ServerGiveUp();
	void ServerJoinSquad(class ASQSquadStatePrivateToTeam* ToJoin);
	void ServerKickPlayerFromSquad(class ASQPlayerState* ToKick);
	void ServerLeaveSquad();
	void ServerMovePlayerToFireTeam(class ASQPlayerState* TargetPlayerState, int32 FireTeamIndex, int32 Position);
	void ServerMuteSquad(class ASQSquadState* MuteSquadState);
	void ServerNotifyExplosiveHit(const struct FSQShotInfo& ShotInfoZeroBased, const TArray<struct FSQPenetrationTrace>& TargetsZeroBased, const struct FHitResult& HitResult, const struct FArmorPenetration& CachedPenetration, const struct FSQWeaponData& WeaponConfig);
	void ServerOnPlayerToggleVoice_Editor(const struct FUniqueNetIdRepl& TalkingPlayerId, ESQVoiceChannel VoiceChannel);
	void ServerPlayCustomEmote(const class FName& CustomName);
	void ServerPlayEmote(const class FName& EmoteDataName);
	void ServerPlayEmoteAnim(ESQEmotes Emote);
	void ServerProcessApprovalEntry(uint8 Mode, uint32 VerifyKey);
	void ServerRearmWeapons(class UObject* RearmObject, const TArray<struct FSQRearmWeaponRequest>& RearmRequest);
	void ServerRemoveVehicleOverlayWidget();
	void ServerReportSteamSessionTicket(const class FString& PlayerSteamId, const class FString& SessionTicket);
	void ServerRequestDeployRole(class USQRoleSettings* NewRole);
	void ServerRequestPlaceDeployable(const class FName& InDeployableId, const struct FTransform& InPosition);
	void ServerRequestPlaceDeployableItem(const class FName& InDeployableItemId, const struct FTransform& InPosition);
	void ServerRequestRestartPlayer(class ASQGameSpawn* Spawn);
	void ServerRequestRole(const class FName& InRoleId);
	void ServerRequestRoleRearm(const class FName& InRoleId, class UObject* InRearmSource);
	void ServerRequestServerTime(const struct FDateTime& InClientUTCTime);
	void ServerSay(const class FString& Msg);
	void ServerSetMuteAllPlayersExceptSquad(bool bMute);
	void ServerSetVoipHandAnim(ESQVoiceChannel VoiceChannel);
	void ServerShareRallyPoint(int32 SquadId);
	void ServerSLInviteMember(class ASQPlayerState* PlayerToInvite);
	void ServerStartHealing(class ASQSoldier* HealedSoldier);
	void ServerSuicide(bool bLeavingServer);
	void ServerSwitchSeat(int32 Param_Index);
	void ServerTryApproveVehicleClaim();
	void ServerTryClaimVehicle(class ASQVehicle* VehicleToClaim);
	void ServerUnmuteSquad(class ASQSquadState* MuteSquadState);
	void ServerUnpossessAdminCam();
	void SetCurrentRole(class USQRoleSettings* NewRoleSettings, ESQSpawnInventoryReason SpawnInventoryReason);
	void SetIgnoreWeaponInput(bool bNewClickInput);
	void SetOutOfMapBoundsKillTimestamp(float Timestamp);
	void SetPendingDeathKillTimestamp(float Timestamp);
	void SetRoamingMapOpen(bool bOpen);
	void SetSelectionMode(bool bEnabled);
	void ShareRallyPoint(int32 SquadId);
	void ShowToast(const class FText& ToastText, float Lifetime, bool bForceSlate);
	void SimulateInputKey(const struct FKey& Key, bool bPressed);
	void SpawnGhost(TSoftClassPtr<class UClass> InDeployableReference, class USQDeployableSettings* InDeployableSettings);
	void SQBugit(const class FString& ScreenShotDescription);
	void SQSM_InsertDistanceFactorThesholds(int32 Param_Index, float Value);
	void SQSM_PrintDistanceFactorThesholds();
	void SQSM_RemoveDistanceFactorThesholds(int32 SrcIndex, int32 Count);
	void SQSM_SetDistanceFactorThesholds(int32 Param_Index, float Value);
	void SQSM_SetNonRenderedUpdateRate(float Value);
	void SQSM_SetServerUpdateRate(float Value);
	void StartPlaceDeployable(class USQDeployableSettings* InDeployableSettings, bool InIsItem);
	void StopMusic();
	float TimeUntilCanSpawn();
	void ToggleMutePlayer(class ASQPlayerState* MutePlayerState);
	void ToggleShowRebase(bool Value);
	bool TryClaimVehicle(class ASQVehicle* Vehicle);
	void UnmuteAllPlayersExceptSquad();
	void UnmuteSquad(class ASQSquadState* MuteSquadState);
	void UnpossessAdminCam();

	void ClientShowPopup(class ASQPlayerState* Speaker, const class FText& Message, ESQChat Channel, ESQNotificationTypes NotificationType, const class FString& StreamerModeVariantMessage) const;
	void DebugToggleShowMapBoundary(bool bShowMapBoundary) const;
	void DebugToggleShowVehicleSpawners(bool Value) const;
	bool EnemyPlayerCanHearLocalVoice(const class ASQPlayerController* EnemyPlayer) const;
	class USQRoleSettings* GetCurrentRole() const;
	class USQVehicleSeatComponent* GetCurrentSeat() const;
	class ASQVehicleSeat* GetCurrentSeatPawn() const;
	class ASQVehicle* GetCurrentVehicle() const;
	void GetDeployableReference(class USQDeployableSettings* InDeployableSettings, TSoftClassPtr<class UClass>* OutDeployableReference) const;
	class USQRoleSettings* GetDeployRole() const;
	float GetOutOfMapBoundsKillTimestamp() const;
	float GetPendingDeathKillTimestamp() const;
	float GetPitchInputScale() const;
	class ASQGameSpawn* GetSelectedSpawn() const;
	class ASQSoldier* GetSoldier() const;
	class ASQPlayerState* GetSquadPlayerState() const;
	int32 GetTeam() const;
	float GetYawInputScale() const;
	bool IsAdmin() const;
	bool IsAdminCamera() const;
	bool IsAlive() const;
	bool IsCameraMan() const;
	bool IsCommander() const;
	bool IsDeathPending() const;
	bool IsDeployRoleAvailable() const;
	bool IsDev() const;
	bool IsFireTeamLeader() const;
	bool IsMember() const;
	bool IsOutOfMapBounds() const;
	bool IsQA() const;
	bool IsRoamingMapOpen() const;
	bool IsSquadLeader() const;
	bool IsUsingFreeLook() const;
	bool IsWeaponInputIgnored() const;
	bool IsWounded() const;
	void OnReceiveChat(class ASQPlayerState* Speaker, const class FString& Message, ESQChat Channel, ESQNotificationTypes NotificationType, const class FString& StreamerModeVariantMessage) const;
	void SetDeployRole(class USQRoleSettings* NewRoleSettings) const;
	void SetWorldOrigin(const struct FIntVector& NewOrigin) const;
	bool ShouldSkipPassword() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQPlayerController">();
	}
	static class ASQPlayerController* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQPlayerController>();
	}
};
static_assert(alignof(ASQPlayerController) == 0x000010, "Wrong alignment on ASQPlayerController");
static_assert(sizeof(ASQPlayerController) == 0x000B00, "Wrong size on ASQPlayerController");
static_assert(offsetof(ASQPlayerController, AuthorityTeam) == 0x000588, "Member 'ASQPlayerController::AuthorityTeam' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, TeamState) == 0x000590, "Member 'ASQPlayerController::TeamState' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, PrivateTeamState) == 0x000598, "Member 'ASQPlayerController::PrivateTeamState' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, AuthoritySquad) == 0x0005A0, "Member 'ASQPlayerController::AuthoritySquad' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, SquadState) == 0x0005A8, "Member 'ASQPlayerController::SquadState' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, TeamPrivateSquadState) == 0x0005B0, "Member 'ASQPlayerController::TeamPrivateSquadState' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, StateConnection) == 0x0005B8, "Member 'ASQPlayerController::StateConnection' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, SpawnMenuPopupDelay) == 0x0005C0, "Member 'ASQPlayerController::SpawnMenuPopupDelay' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, LastSpawnedSoldier) == 0x0005C8, "Member 'ASQPlayerController::LastSpawnedSoldier' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, AreCommunicationButtonsAllowed) == 0x0005D1, "Member 'ASQPlayerController::AreCommunicationButtonsAllowed' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, IsWinner) == 0x0005D2, "Member 'ASQPlayerController::IsWinner' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, bDidSeamlessTravel) == 0x0005D3, "Member 'ASQPlayerController::bDidSeamlessTravel' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, TimeBecameIncapacitated) == 0x0005D4, "Member 'ASQPlayerController::TimeBecameIncapacitated' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, SpawnDelayPenalties) == 0x0005D8, "Member 'ASQPlayerController::SpawnDelayPenalties' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, MaxSpawnDelay) == 0x0005DC, "Member 'ASQPlayerController::MaxSpawnDelay' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, bWasInVehicle) == 0x0005E0, "Member 'ASQPlayerController::bWasInVehicle' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, AccessLevel) == 0x0005E4, "Member 'ASQPlayerController::AccessLevel' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, OnPlayerEnterVehicleEvent) == 0x000600, "Member 'ASQPlayerController::OnPlayerEnterVehicleEvent' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, OnPlayerExitVehicleEvent) == 0x000610, "Member 'ASQPlayerController::OnPlayerExitVehicleEvent' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, LastPlayedEmote) == 0x000620, "Member 'ASQPlayerController::LastPlayedEmote' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, OnRallyCreated) == 0x000628, "Member 'ASQPlayerController::OnRallyCreated' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, RecentVoiceChannel) == 0x00063B, "Member 'ASQPlayerController::RecentVoiceChannel' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, OnServerVoiceChannelChanged) == 0x000648, "Member 'ASQPlayerController::OnServerVoiceChannelChanged' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, OnChatStarted) == 0x000658, "Member 'ASQPlayerController::OnChatStarted' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, ToastWidgetClass) == 0x000668, "Member 'ASQPlayerController::ToastWidgetClass' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, ChangeRoleNoAmmoText) == 0x000670, "Member 'ASQPlayerController::ChangeRoleNoAmmoText' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, AmmoBagNoAmmoText) == 0x000688, "Member 'ASQPlayerController::AmmoBagNoAmmoText' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, MaxAmmoBagText) == 0x0006A0, "Member 'ASQPlayerController::MaxAmmoBagText' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, RearmFromAmmoBagText) == 0x0006B8, "Member 'ASQPlayerController::RearmFromAmmoBagText' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, RoleCannotPickupAmmoBagText) == 0x0006D0, "Member 'ASQPlayerController::RoleCannotPickupAmmoBagText' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, RearmFromVehicleNoAmmoText) == 0x0006E8, "Member 'ASQPlayerController::RearmFromVehicleNoAmmoText' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, RearmFromVehicleConfirmationText) == 0x000700, "Member 'ASQPlayerController::RearmFromVehicleConfirmationText' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, RearmFromVehiclePromptText) == 0x000718, "Member 'ASQPlayerController::RearmFromVehiclePromptText' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, CannotStartVehicleInStagingPhaseText) == 0x000730, "Member 'ASQPlayerController::CannotStartVehicleInStagingPhaseText' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, WalkingOriginRebaseThreshold) == 0x000748, "Member 'ASQPlayerController::WalkingOriginRebaseThreshold' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, RidingOriginRebaseThreshold) == 0x00074C, "Member 'ASQPlayerController::RidingOriginRebaseThreshold' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, FlyingOriginRebaseThreshold) == 0x000750, "Member 'ASQPlayerController::FlyingOriginRebaseThreshold' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, LeaveVehicleOriginRebaseThreshold) == 0x000754, "Member 'ASQPlayerController::LeaveVehicleOriginRebaseThreshold' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, OriginRebaseFrequency) == 0x000758, "Member 'ASQPlayerController::OriginRebaseFrequency' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, MapMarkerArray) == 0x000760, "Member 'ASQPlayerController::MapMarkerArray' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, MapMarkerInputComponent) == 0x000770, "Member 'ASQPlayerController::MapMarkerInputComponent' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, OnNewMarkerCreatedEvent) == 0x000778, "Member 'ASQPlayerController::OnNewMarkerCreatedEvent' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, AdminStats) == 0x000788, "Member 'ASQPlayerController::AdminStats' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, SpawnableActors) == 0x000790, "Member 'ASQPlayerController::SpawnableActors' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, ApprovalMessages) == 0x0007A0, "Member 'ASQPlayerController::ApprovalMessages' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, CurrentSeat) == 0x0007A8, "Member 'ASQPlayerController::CurrentSeat' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, SensitivityInterpSpeed) == 0x0008E4, "Member 'ASQPlayerController::SensitivityInterpSpeed' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, AlwaysRenderPawnsDistance) == 0x0008EC, "Member 'ASQPlayerController::AlwaysRenderPawnsDistance' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, MusicAC) == 0x000920, "Member 'ASQPlayerController::MusicAC' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, MusicSound) == 0x000928, "Member 'ASQPlayerController::MusicSound' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, QueuedSystemMessages) == 0x000930, "Member 'ASQPlayerController::QueuedSystemMessages' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, RefreshTypes) == 0x000940, "Member 'ASQPlayerController::RefreshTypes' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, DataGatheringComponent) == 0x000950, "Member 'ASQPlayerController::DataGatheringComponent' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, CommanderInputComponent) == 0x000958, "Member 'ASQPlayerController::CommanderInputComponent' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, BoundaryListener) == 0x000960, "Member 'ASQPlayerController::BoundaryListener' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, OutOfMapBoundsKillTimestamp) == 0x000968, "Member 'ASQPlayerController::OutOfMapBoundsKillTimestamp' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, PendingDeathKillTimestamp) == 0x00096C, "Member 'ASQPlayerController::PendingDeathKillTimestamp' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, LastRefreshedPawn) == 0x000970, "Member 'ASQPlayerController::LastRefreshedPawn' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, SelectedSpawn) == 0x000978, "Member 'ASQPlayerController::SelectedSpawn' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, ApprovalEntries) == 0x000988, "Member 'ASQPlayerController::ApprovalEntries' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, ApprovalEntriesOnClient) == 0x0009D8, "Member 'ASQPlayerController::ApprovalEntriesOnClient' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, PawnRenderDistance) == 0x000A48, "Member 'ASQPlayerController::PawnRenderDistance' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, CachedPlayersToMute) == 0x000A80, "Member 'ASQPlayerController::CachedPlayersToMute' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, Networker) == 0x000AD8, "Member 'ASQPlayerController::Networker' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, ActiveGhost) == 0x000AE0, "Member 'ASQPlayerController::ActiveGhost' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, IsDeployingItem) == 0x000AE8, "Member 'ASQPlayerController::IsDeployingItem' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, VotingComponentClass) == 0x000AF0, "Member 'ASQPlayerController::VotingComponentClass' has a wrong offset!");
static_assert(offsetof(ASQPlayerController, VotingComponent) == 0x000AF8, "Member 'ASQPlayerController::VotingComponent' has a wrong offset!");

// Class Squad.SQAdminStats
// 0x0018 (0x00C8 - 0x00B0)
class USQAdminStats final : public UActorComponent
{
public:
	uint8                                         Pad_E68[0x18];                                     // 0x00B0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAdminStats">();
	}
	static class USQAdminStats* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQAdminStats>();
	}
};
static_assert(alignof(USQAdminStats) == 0x000008, "Wrong alignment on USQAdminStats");
static_assert(sizeof(USQAdminStats) == 0x0000C8, "Wrong size on USQAdminStats");

// Class Squad.SQOnlineHelpers
// 0x0000 (0x0028 - 0x0028)
class USQOnlineHelpers final : public UObject
{
public:
	static TArray<struct FSQBlueprintFriend> GetUsersInSession(const TArray<struct FSQBlueprintFriend>& Results, const struct FBlueprintSessionResult& Session);
	static int32 GetUsersSessionIndex(const struct FSQBlueprintFriend& User, const TArray<struct FBlueprintSessionResult>& Sessions);
	static bool IsUserInSession(const struct FSQBlueprintFriend& User, const struct FBlueprintSessionResult& Session);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQOnlineHelpers">();
	}
	static class USQOnlineHelpers* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQOnlineHelpers>();
	}
};
static_assert(alignof(USQOnlineHelpers) == 0x000008, "Wrong alignment on USQOnlineHelpers");
static_assert(sizeof(USQOnlineHelpers) == 0x000028, "Wrong size on USQOnlineHelpers");

// Class Squad.SQAIController
// 0x0020 (0x0350 - 0x0330)
class ASQAIController final : public AAIController
{
public:
	class UBlackboardComponent*                   BlackboardComp;                                    // 0x0330(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBehaviorTreeComponent*                 BehaviorComp;                                      // 0x0338(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E6B[0x10];                                     // 0x0340(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void SpawnBots(int32 NumberOfBotsToSpawn);

	void FindClosestEnemy();
	bool FindClosestEnemyWithLOS(class ASQSoldier* ExcludeEnemy);
	void SetCurrentRole(class USQRoleSettings* NewRoleSettings, ESQSpawnInventoryReason SpawnInventoryReason);
	void ShootEnemy();

	class ASQSoldier* GetSoldier() const;
	class ASQPlayerState* GetSquadPlayerState() const;
	bool IsEnemy(class ASQSoldier* Soldier) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAIController">();
	}
	static class ASQAIController* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQAIController>();
	}
};
static_assert(alignof(ASQAIController) == 0x000008, "Wrong alignment on ASQAIController");
static_assert(sizeof(ASQAIController) == 0x000350, "Wrong size on ASQAIController");
static_assert(offsetof(ASQAIController, BlackboardComp) == 0x000330, "Member 'ASQAIController::BlackboardComp' has a wrong offset!");
static_assert(offsetof(ASQAIController, BehaviorComp) == 0x000338, "Member 'ASQAIController::BehaviorComp' has a wrong offset!");

// Class Squad.SQAmbientAndReverbComponent
// 0x0040 (0x0240 - 0x0200)
class USQAmbientAndReverbComponent final : public USceneComponent
{
public:
	FMulticastSparseDelegateProperty_             OnComponentBeginOverlap;                           // 0x01F8(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	FMulticastSparseDelegateProperty_             OnComponentEndOverlap;                             // 0x01F9(0x0001)(InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E6F[0x6];                                      // 0x01FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQReverbVolumeEffect                  ReverbEffectSettings;                              // 0x0200(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UAudioComponent*                        SoundComponent;                                    // 0x0220(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             SoundEffect;                                       // 0x0228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbientFadeInTime;                                 // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbientFadeOutTime;                                // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E70[0x8];                                      // 0x0238(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAmbientAndReverbComponent">();
	}
	static class USQAmbientAndReverbComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQAmbientAndReverbComponent>();
	}
};
static_assert(alignof(USQAmbientAndReverbComponent) == 0x000010, "Wrong alignment on USQAmbientAndReverbComponent");
static_assert(sizeof(USQAmbientAndReverbComponent) == 0x000240, "Wrong size on USQAmbientAndReverbComponent");
static_assert(offsetof(USQAmbientAndReverbComponent, OnComponentBeginOverlap) == 0x0001F8, "Member 'USQAmbientAndReverbComponent::OnComponentBeginOverlap' has a wrong offset!");
static_assert(offsetof(USQAmbientAndReverbComponent, OnComponentEndOverlap) == 0x0001F9, "Member 'USQAmbientAndReverbComponent::OnComponentEndOverlap' has a wrong offset!");
static_assert(offsetof(USQAmbientAndReverbComponent, ReverbEffectSettings) == 0x000200, "Member 'USQAmbientAndReverbComponent::ReverbEffectSettings' has a wrong offset!");
static_assert(offsetof(USQAmbientAndReverbComponent, SoundComponent) == 0x000220, "Member 'USQAmbientAndReverbComponent::SoundComponent' has a wrong offset!");
static_assert(offsetof(USQAmbientAndReverbComponent, SoundEffect) == 0x000228, "Member 'USQAmbientAndReverbComponent::SoundEffect' has a wrong offset!");
static_assert(offsetof(USQAmbientAndReverbComponent, AmbientFadeInTime) == 0x000230, "Member 'USQAmbientAndReverbComponent::AmbientFadeInTime' has a wrong offset!");
static_assert(offsetof(USQAmbientAndReverbComponent, AmbientFadeOutTime) == 0x000234, "Member 'USQAmbientAndReverbComponent::AmbientFadeOutTime' has a wrong offset!");

// Class Squad.SQVehicleResource
// 0x0038 (0x0260 - 0x0228)
class ASQVehicleResource : public AActor
{
public:
	float                                         ResourceDropQuantity;                              // 0x0228(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResourceDropRate;                                  // 0x022C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerResourceRate;                                // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E73[0x4];                                      // 0x0234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQForwardBase*                         CurrentFob;                                        // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 CurrentCaptureZone;                                // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQVehicleResourceWeaponInventoryComponent* ParentInventory;                                   // 0x0248(0x0008)(BlueprintVisible, ExportObject, Net, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E74[0x8];                                      // 0x0250(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxResources;                                      // 0x0258(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Resources;                                         // 0x025C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void BeginResourceDropOff();
	bool FindValidDropOffs(class ASQForwardBase** Fob, class AActor** Zone);
	void ModifyResource(float Amount);
	void ServerBeginResourceDropOff(class ASQForwardBase* Fob, class AActor* Zone, const float DropRate);
	void ServerEndResourceDropOff();
	void UseResource(float ModifyAmount);

	bool AtValidResourcePoint() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleResource">();
	}
	static class ASQVehicleResource* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQVehicleResource>();
	}
};
static_assert(alignof(ASQVehicleResource) == 0x000008, "Wrong alignment on ASQVehicleResource");
static_assert(sizeof(ASQVehicleResource) == 0x000260, "Wrong size on ASQVehicleResource");
static_assert(offsetof(ASQVehicleResource, ResourceDropQuantity) == 0x000228, "Member 'ASQVehicleResource::ResourceDropQuantity' has a wrong offset!");
static_assert(offsetof(ASQVehicleResource, ResourceDropRate) == 0x00022C, "Member 'ASQVehicleResource::ResourceDropRate' has a wrong offset!");
static_assert(offsetof(ASQVehicleResource, ServerResourceRate) == 0x000230, "Member 'ASQVehicleResource::ServerResourceRate' has a wrong offset!");
static_assert(offsetof(ASQVehicleResource, CurrentFob) == 0x000238, "Member 'ASQVehicleResource::CurrentFob' has a wrong offset!");
static_assert(offsetof(ASQVehicleResource, CurrentCaptureZone) == 0x000240, "Member 'ASQVehicleResource::CurrentCaptureZone' has a wrong offset!");
static_assert(offsetof(ASQVehicleResource, ParentInventory) == 0x000248, "Member 'ASQVehicleResource::ParentInventory' has a wrong offset!");
static_assert(offsetof(ASQVehicleResource, MaxResources) == 0x000258, "Member 'ASQVehicleResource::MaxResources' has a wrong offset!");
static_assert(offsetof(ASQVehicleResource, Resources) == 0x00025C, "Member 'ASQVehicleResource::Resources' has a wrong offset!");

// Class Squad.SQPainCausingVolumeComponent
// 0x0020 (0x04A0 - 0x0480)
class USQPainCausingVolumeComponent final : public UBoxComponent
{
public:
	uint8                                         bPainCausing : 1;                                  // 0x0478(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_E77[0x3];                                      // 0x0479(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DamagePerSec;                                      // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                DamageType;                                        // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PainInterval;                                      // 0x0488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEntryPain : 1;                                    // 0x048C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_E78[0x3];                                      // 0x048D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            DamageInstigator;                                  // 0x0490(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E79[0x8];                                      // 0x0498(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQPainCausingVolumeComponent">();
	}
	static class USQPainCausingVolumeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQPainCausingVolumeComponent>();
	}
};
static_assert(alignof(USQPainCausingVolumeComponent) == 0x000010, "Wrong alignment on USQPainCausingVolumeComponent");
static_assert(sizeof(USQPainCausingVolumeComponent) == 0x0004A0, "Wrong size on USQPainCausingVolumeComponent");
static_assert(offsetof(USQPainCausingVolumeComponent, DamagePerSec) == 0x00047C, "Member 'USQPainCausingVolumeComponent::DamagePerSec' has a wrong offset!");
static_assert(offsetof(USQPainCausingVolumeComponent, DamageType) == 0x000480, "Member 'USQPainCausingVolumeComponent::DamageType' has a wrong offset!");
static_assert(offsetof(USQPainCausingVolumeComponent, PainInterval) == 0x000488, "Member 'USQPainCausingVolumeComponent::PainInterval' has a wrong offset!");
static_assert(offsetof(USQPainCausingVolumeComponent, DamageInstigator) == 0x000490, "Member 'USQPainCausingVolumeComponent::DamageInstigator' has a wrong offset!");

// Class Squad.SQAmmoResource
// 0x0000 (0x0260 - 0x0260)
class ASQAmmoResource : public ASQVehicleResource
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAmmoResource">();
	}
	static class ASQAmmoResource* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQAmmoResource>();
	}
};
static_assert(alignof(ASQAmmoResource) == 0x000008, "Wrong alignment on ASQAmmoResource");
static_assert(sizeof(ASQAmmoResource) == 0x000260, "Wrong size on ASQAmmoResource");

// Class Squad.SQAmmoWidget
// 0x0118 (0x0380 - 0x0268)
class USQAmmoWidget : public USQUserWidget
{
public:
	TArray<class USQMagazineGroupWidget*>         MagazineGroupWidgets;                              // 0x0268(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UTexture2D*                             DefaultItemCountIconTexture;                       // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanel*                           HighestLevelCanvas;                                // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             FiremodeTextBlock;                                 // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             AmmoCountTextBlock;                                // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             ZeroingTextBlock;                                  // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 RoundInChamberImage;                               // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowFireSelectorInfo;                             // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowAmmoInMag;                                    // 0x02A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E7B[0x6];                                      // 0x02AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQPlayerController*                    PlayerController;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerState*                         PlayerState;                                       // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RefillableMagazineColor;                           // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FullMagazineColor;                                 // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NearlyFullMagazineColor;                           // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HalfMagazineColor;                                 // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EmptyMagazineColor;                                // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   FireModeAutoText;                                  // 0x0310(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   SightRangeText;                                    // 0x0328(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   FireModeSingleText;                                // 0x0340(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   FireModeBurstText;                                 // 0x0358(0x0018)(Edit, NativeAccessSpecifierPublic)
	class ASQEquipableItem*                       CachedCurrentWeapon;                               // 0x0370(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E7C[0x8];                                      // 0x0378(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitWidget();
	void OnCurrentWeaponChanged();
	void OnShowCurrentWeapon();
	void OnShowResourceAmounts();
	void UpdateCurrentWeapon();
	void UpdateFiremode(class ASQEquipableItem* CurrentItem);
	void UpdateMags(class ASQEquipableItem* CurrentItem);
	bool UpdateShowingStatus();
	void UpdateState();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAmmoWidget">();
	}
	static class USQAmmoWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQAmmoWidget>();
	}
};
static_assert(alignof(USQAmmoWidget) == 0x000008, "Wrong alignment on USQAmmoWidget");
static_assert(sizeof(USQAmmoWidget) == 0x000380, "Wrong size on USQAmmoWidget");
static_assert(offsetof(USQAmmoWidget, MagazineGroupWidgets) == 0x000268, "Member 'USQAmmoWidget::MagazineGroupWidgets' has a wrong offset!");
static_assert(offsetof(USQAmmoWidget, DefaultItemCountIconTexture) == 0x000278, "Member 'USQAmmoWidget::DefaultItemCountIconTexture' has a wrong offset!");
static_assert(offsetof(USQAmmoWidget, HighestLevelCanvas) == 0x000280, "Member 'USQAmmoWidget::HighestLevelCanvas' has a wrong offset!");
static_assert(offsetof(USQAmmoWidget, FiremodeTextBlock) == 0x000288, "Member 'USQAmmoWidget::FiremodeTextBlock' has a wrong offset!");
static_assert(offsetof(USQAmmoWidget, AmmoCountTextBlock) == 0x000290, "Member 'USQAmmoWidget::AmmoCountTextBlock' has a wrong offset!");
static_assert(offsetof(USQAmmoWidget, ZeroingTextBlock) == 0x000298, "Member 'USQAmmoWidget::ZeroingTextBlock' has a wrong offset!");
static_assert(offsetof(USQAmmoWidget, RoundInChamberImage) == 0x0002A0, "Member 'USQAmmoWidget::RoundInChamberImage' has a wrong offset!");
static_assert(offsetof(USQAmmoWidget, bShowFireSelectorInfo) == 0x0002A8, "Member 'USQAmmoWidget::bShowFireSelectorInfo' has a wrong offset!");
static_assert(offsetof(USQAmmoWidget, bShowAmmoInMag) == 0x0002A9, "Member 'USQAmmoWidget::bShowAmmoInMag' has a wrong offset!");
static_assert(offsetof(USQAmmoWidget, PlayerController) == 0x0002B0, "Member 'USQAmmoWidget::PlayerController' has a wrong offset!");
static_assert(offsetof(USQAmmoWidget, PlayerState) == 0x0002B8, "Member 'USQAmmoWidget::PlayerState' has a wrong offset!");
static_assert(offsetof(USQAmmoWidget, RefillableMagazineColor) == 0x0002C0, "Member 'USQAmmoWidget::RefillableMagazineColor' has a wrong offset!");
static_assert(offsetof(USQAmmoWidget, FullMagazineColor) == 0x0002D0, "Member 'USQAmmoWidget::FullMagazineColor' has a wrong offset!");
static_assert(offsetof(USQAmmoWidget, NearlyFullMagazineColor) == 0x0002E0, "Member 'USQAmmoWidget::NearlyFullMagazineColor' has a wrong offset!");
static_assert(offsetof(USQAmmoWidget, HalfMagazineColor) == 0x0002F0, "Member 'USQAmmoWidget::HalfMagazineColor' has a wrong offset!");
static_assert(offsetof(USQAmmoWidget, EmptyMagazineColor) == 0x000300, "Member 'USQAmmoWidget::EmptyMagazineColor' has a wrong offset!");
static_assert(offsetof(USQAmmoWidget, FireModeAutoText) == 0x000310, "Member 'USQAmmoWidget::FireModeAutoText' has a wrong offset!");
static_assert(offsetof(USQAmmoWidget, SightRangeText) == 0x000328, "Member 'USQAmmoWidget::SightRangeText' has a wrong offset!");
static_assert(offsetof(USQAmmoWidget, FireModeSingleText) == 0x000340, "Member 'USQAmmoWidget::FireModeSingleText' has a wrong offset!");
static_assert(offsetof(USQAmmoWidget, FireModeBurstText) == 0x000358, "Member 'USQAmmoWidget::FireModeBurstText' has a wrong offset!");
static_assert(offsetof(USQAmmoWidget, CachedCurrentWeapon) == 0x000370, "Member 'USQAmmoWidget::CachedCurrentWeapon' has a wrong offset!");

// Class Squad.SQVehicleAnimInstance
// 0x0050 (0x0AB0 - 0x0A60)
class USQVehicleAnimInstance : public UVehicleAnimInstance
{
public:
	class ASQGroundVehicle*                       Vehicle;                                           // 0x0A58(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEngineActive;                                   // 0x0A60(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E7D[0x3];                                      // 0x0A61(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               SteeringWheelRotation;                             // 0x0A64(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<float>                                 GearRatios;                                        // 0x0A70(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FRotator                               DriveshaftSpeedRotator;                            // 0x0A80(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReverseRatio;                                      // 0x0A8C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentGear;                                       // 0x0A90(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasDriveshaftAnimations;                          // 0x0A94(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E7E[0x3];                                      // 0x0A95(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               FanRotator;                                        // 0x0A98(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         FanSpeed;                                          // 0x0AA4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFanSpeed;                                       // 0x0AA8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasCabinFan;                                      // 0x0AAC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E7F[0x3];                                      // 0x0AAD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleAnimInstance">();
	}
	static class USQVehicleAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleAnimInstance>();
	}
};
static_assert(alignof(USQVehicleAnimInstance) == 0x000010, "Wrong alignment on USQVehicleAnimInstance");
static_assert(sizeof(USQVehicleAnimInstance) == 0x000AB0, "Wrong size on USQVehicleAnimInstance");
static_assert(offsetof(USQVehicleAnimInstance, Vehicle) == 0x000A58, "Member 'USQVehicleAnimInstance::Vehicle' has a wrong offset!");
static_assert(offsetof(USQVehicleAnimInstance, bIsEngineActive) == 0x000A60, "Member 'USQVehicleAnimInstance::bIsEngineActive' has a wrong offset!");
static_assert(offsetof(USQVehicleAnimInstance, SteeringWheelRotation) == 0x000A64, "Member 'USQVehicleAnimInstance::SteeringWheelRotation' has a wrong offset!");
static_assert(offsetof(USQVehicleAnimInstance, GearRatios) == 0x000A70, "Member 'USQVehicleAnimInstance::GearRatios' has a wrong offset!");
static_assert(offsetof(USQVehicleAnimInstance, DriveshaftSpeedRotator) == 0x000A80, "Member 'USQVehicleAnimInstance::DriveshaftSpeedRotator' has a wrong offset!");
static_assert(offsetof(USQVehicleAnimInstance, ReverseRatio) == 0x000A8C, "Member 'USQVehicleAnimInstance::ReverseRatio' has a wrong offset!");
static_assert(offsetof(USQVehicleAnimInstance, CurrentGear) == 0x000A90, "Member 'USQVehicleAnimInstance::CurrentGear' has a wrong offset!");
static_assert(offsetof(USQVehicleAnimInstance, bHasDriveshaftAnimations) == 0x000A94, "Member 'USQVehicleAnimInstance::bHasDriveshaftAnimations' has a wrong offset!");
static_assert(offsetof(USQVehicleAnimInstance, FanRotator) == 0x000A98, "Member 'USQVehicleAnimInstance::FanRotator' has a wrong offset!");
static_assert(offsetof(USQVehicleAnimInstance, FanSpeed) == 0x000AA4, "Member 'USQVehicleAnimInstance::FanSpeed' has a wrong offset!");
static_assert(offsetof(USQVehicleAnimInstance, MaxFanSpeed) == 0x000AA8, "Member 'USQVehicleAnimInstance::MaxFanSpeed' has a wrong offset!");
static_assert(offsetof(USQVehicleAnimInstance, bHasCabinFan) == 0x000AAC, "Member 'USQVehicleAnimInstance::bHasCabinFan' has a wrong offset!");

// Class Squad.SQPatchInventory
// 0x00E0 (0x0110 - 0x0030)
class USQPatchInventory final : public UGameInstanceSubsystem
{
public:
	TSoftObjectPtr<class UDataTable>              SupporterPatchesTable;                             // 0x0030(0x0028)(Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftObjectPtr<class UDataTable>              ClanPacksTable;                                    // 0x0058(0x0028)(Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 DefaultOWIClanPatchID;                             // 0x0080(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 DefaultClanFounderPatchID;                         // 0x0090(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 DefaultClanFounderTagID;                           // 0x00A0(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDataTable*                             SupporterPatches;                                  // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDataTable*                             ClanPacks;                                         // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E80[0x50];                                     // 0x00C0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQPatchInventory">();
	}
	static class USQPatchInventory* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQPatchInventory>();
	}
};
static_assert(alignof(USQPatchInventory) == 0x000008, "Wrong alignment on USQPatchInventory");
static_assert(sizeof(USQPatchInventory) == 0x000110, "Wrong size on USQPatchInventory");
static_assert(offsetof(USQPatchInventory, SupporterPatchesTable) == 0x000030, "Member 'USQPatchInventory::SupporterPatchesTable' has a wrong offset!");
static_assert(offsetof(USQPatchInventory, ClanPacksTable) == 0x000058, "Member 'USQPatchInventory::ClanPacksTable' has a wrong offset!");
static_assert(offsetof(USQPatchInventory, DefaultOWIClanPatchID) == 0x000080, "Member 'USQPatchInventory::DefaultOWIClanPatchID' has a wrong offset!");
static_assert(offsetof(USQPatchInventory, DefaultClanFounderPatchID) == 0x000090, "Member 'USQPatchInventory::DefaultClanFounderPatchID' has a wrong offset!");
static_assert(offsetof(USQPatchInventory, DefaultClanFounderTagID) == 0x0000A0, "Member 'USQPatchInventory::DefaultClanFounderTagID' has a wrong offset!");
static_assert(offsetof(USQPatchInventory, SupporterPatches) == 0x0000B0, "Member 'USQPatchInventory::SupporterPatches' has a wrong offset!");
static_assert(offsetof(USQPatchInventory, ClanPacks) == 0x0000B8, "Member 'USQPatchInventory::ClanPacks' has a wrong offset!");

// Class Squad.SQAmphibiousVehicleAnimInstance
// 0x0030 (0x0AE0 - 0x0AB0)
class USQAmphibiousVehicleAnimInstance : public USQVehicleAnimInstance
{
public:
	struct FRotator                               PropellerRotator;                                  // 0x0AB0(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PropellerSpeed;                                    // 0x0ABC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPropellerSpeed;                                 // 0x0AC0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaterBowAlpha;                                     // 0x0AC4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaterBowAlphaPositive;                             // 0x0AC8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WaterBowAlphaNegative;                             // 0x0ACC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasPropeller;                                     // 0x0AD0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E81[0xF];                                      // 0x0AD1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAmphibiousVehicleAnimInstance">();
	}
	static class USQAmphibiousVehicleAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQAmphibiousVehicleAnimInstance>();
	}
};
static_assert(alignof(USQAmphibiousVehicleAnimInstance) == 0x000010, "Wrong alignment on USQAmphibiousVehicleAnimInstance");
static_assert(sizeof(USQAmphibiousVehicleAnimInstance) == 0x000AE0, "Wrong size on USQAmphibiousVehicleAnimInstance");
static_assert(offsetof(USQAmphibiousVehicleAnimInstance, PropellerRotator) == 0x000AB0, "Member 'USQAmphibiousVehicleAnimInstance::PropellerRotator' has a wrong offset!");
static_assert(offsetof(USQAmphibiousVehicleAnimInstance, PropellerSpeed) == 0x000ABC, "Member 'USQAmphibiousVehicleAnimInstance::PropellerSpeed' has a wrong offset!");
static_assert(offsetof(USQAmphibiousVehicleAnimInstance, MaxPropellerSpeed) == 0x000AC0, "Member 'USQAmphibiousVehicleAnimInstance::MaxPropellerSpeed' has a wrong offset!");
static_assert(offsetof(USQAmphibiousVehicleAnimInstance, WaterBowAlpha) == 0x000AC4, "Member 'USQAmphibiousVehicleAnimInstance::WaterBowAlpha' has a wrong offset!");
static_assert(offsetof(USQAmphibiousVehicleAnimInstance, WaterBowAlphaPositive) == 0x000AC8, "Member 'USQAmphibiousVehicleAnimInstance::WaterBowAlphaPositive' has a wrong offset!");
static_assert(offsetof(USQAmphibiousVehicleAnimInstance, WaterBowAlphaNegative) == 0x000ACC, "Member 'USQAmphibiousVehicleAnimInstance::WaterBowAlphaNegative' has a wrong offset!");
static_assert(offsetof(USQAmphibiousVehicleAnimInstance, bHasPropeller) == 0x000AD0, "Member 'USQAmphibiousVehicleAnimInstance::bHasPropeller' has a wrong offset!");

// Class Squad.SQAnalyticsBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class USQAnalyticsBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void SendAnalyticEvent(const class FString& EventName, const class FString& EventDataKey, const class FString& EventData);
	static void SendAnalyticEventArray(const class FString& EventName, const TArray<struct FAnalyticKeyValue>& EventData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAnalyticsBlueprintLibrary">();
	}
	static class USQAnalyticsBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQAnalyticsBlueprintLibrary>();
	}
};
static_assert(alignof(USQAnalyticsBlueprintLibrary) == 0x000008, "Wrong alignment on USQAnalyticsBlueprintLibrary");
static_assert(sizeof(USQAnalyticsBlueprintLibrary) == 0x000028, "Wrong size on USQAnalyticsBlueprintLibrary");

// Class Squad.SQAnalyticsSubsystem
// 0x0018 (0x0048 - 0x0030)
class USQAnalyticsSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_E82[0x18];                                     // 0x0030(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAnalyticsSubsystem">();
	}
	static class USQAnalyticsSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQAnalyticsSubsystem>();
	}
};
static_assert(alignof(USQAnalyticsSubsystem) == 0x000008, "Wrong alignment on USQAnalyticsSubsystem");
static_assert(sizeof(USQAnalyticsSubsystem) == 0x000048, "Wrong size on USQAnalyticsSubsystem");

// Class Squad.SQAnimDataEmotes
// 0x01E0 (0x0210 - 0x0030)
class USQAnimDataEmotes final : public UDataAsset
{
public:
	struct FSQEmoteAnims                          EmoteAnims[0xA];                                   // 0x0030(0x0028)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FSQEmoteAnims>       CustomEmotes;                                      // 0x01C0(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAnimDataEmotes">();
	}
	static class USQAnimDataEmotes* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQAnimDataEmotes>();
	}
};
static_assert(alignof(USQAnimDataEmotes) == 0x000008, "Wrong alignment on USQAnimDataEmotes");
static_assert(sizeof(USQAnimDataEmotes) == 0x000210, "Wrong size on USQAnimDataEmotes");
static_assert(offsetof(USQAnimDataEmotes, EmoteAnims) == 0x000030, "Member 'USQAnimDataEmotes::EmoteAnims' has a wrong offset!");
static_assert(offsetof(USQAnimDataEmotes, CustomEmotes) == 0x0001C0, "Member 'USQAnimDataEmotes::CustomEmotes' has a wrong offset!");

// Class Squad.SQPlayerCameraManager
// 0x00C0 (0x28E0 - 0x2820)
class ASQPlayerCameraManager : public APlayerCameraManager
{
public:
	TArray<TSubclassOf<class UCameraShakeBase>>   IgnoredShakeClasses;                               // 0x2820(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bDrawStencils;                                     // 0x2830(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreInactiveEffects;                            // 0x2831(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E83[0x6];                                      // 0x2832(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     StencilPostProcessMaterial;                        // 0x2838(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class USQLocalCameraEffectHandler>> CameraEffectTypes;                                 // 0x2840(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class USQLocalCameraEffectHandler*>    CameraEffects;                                     // 0x2850(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class USQLocalAudioEffectHandler>> AudioEffectTypes;                                  // 0x2860(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class USQLocalAudioEffectHandler*>     AudioEffects;                                      // 0x2870(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class ASQSoldier*                             CurrentSoldier;                                    // 0x2880(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E84[0x58];                                     // 0x2888(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetAdjustedFOV();
	void ModifyNearClipPlane(float NearClipPlaneDistance);

	void CalcScreenCenterRay(float Range, struct FVector* OutStart, struct FVector* OutEnd) const;
	float GetLastNearClipPlane() const;
	float GetNearClipPlane() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQPlayerCameraManager">();
	}
	static class ASQPlayerCameraManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQPlayerCameraManager>();
	}
};
static_assert(alignof(ASQPlayerCameraManager) == 0x000010, "Wrong alignment on ASQPlayerCameraManager");
static_assert(sizeof(ASQPlayerCameraManager) == 0x0028E0, "Wrong size on ASQPlayerCameraManager");
static_assert(offsetof(ASQPlayerCameraManager, IgnoredShakeClasses) == 0x002820, "Member 'ASQPlayerCameraManager::IgnoredShakeClasses' has a wrong offset!");
static_assert(offsetof(ASQPlayerCameraManager, bDrawStencils) == 0x002830, "Member 'ASQPlayerCameraManager::bDrawStencils' has a wrong offset!");
static_assert(offsetof(ASQPlayerCameraManager, bIgnoreInactiveEffects) == 0x002831, "Member 'ASQPlayerCameraManager::bIgnoreInactiveEffects' has a wrong offset!");
static_assert(offsetof(ASQPlayerCameraManager, StencilPostProcessMaterial) == 0x002838, "Member 'ASQPlayerCameraManager::StencilPostProcessMaterial' has a wrong offset!");
static_assert(offsetof(ASQPlayerCameraManager, CameraEffectTypes) == 0x002840, "Member 'ASQPlayerCameraManager::CameraEffectTypes' has a wrong offset!");
static_assert(offsetof(ASQPlayerCameraManager, CameraEffects) == 0x002850, "Member 'ASQPlayerCameraManager::CameraEffects' has a wrong offset!");
static_assert(offsetof(ASQPlayerCameraManager, AudioEffectTypes) == 0x002860, "Member 'ASQPlayerCameraManager::AudioEffectTypes' has a wrong offset!");
static_assert(offsetof(ASQPlayerCameraManager, AudioEffects) == 0x002870, "Member 'ASQPlayerCameraManager::AudioEffects' has a wrong offset!");
static_assert(offsetof(ASQPlayerCameraManager, CurrentSoldier) == 0x002880, "Member 'ASQPlayerCameraManager::CurrentSoldier' has a wrong offset!");

// Class Squad.SQAnimInstance
// 0x0020 (0x02E0 - 0x02C0)
#pragma pack(push, 0x1)
class alignas(0x10) USQAnimInstance : public UAnimInstance
{
public:
	int32                                         LastBoredMontagePlayedIndex;                       // 0x02B8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BoredTargetTime;                                   // 0x02BC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsAds;                                            // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsUsingItemOrIsAdsOrIsClimbing;                   // 0x02C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E85[0x6];                                      // 0x02C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USQItemStaticInfo*                      CurrentItemStaticInfo;                             // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASQSoldier*                             Soldier;                                           // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void EndLoopAnimationHandler(class UAnimMontage* WeaponMontage, class UAnimMontage* Soldier1pMontage, class UAnimMontage* Soldier3pMontage, const struct FSQMontageSectionNames& SectionNames);
	void PauseAnimationHandler(class UAnimMontage* WeaponMontage, class UAnimMontage* Soldier1pMontage, class UAnimMontage* Soldier3pMontage);
	void PlayAnimationHandler(class UAnimMontage* WeaponMontage, class UAnimMontage* Soldier1pMontage, class UAnimMontage* Soldier3pMontage);
	void ResumeAnimationHandler(class UAnimMontage* WeaponMontage, class UAnimMontage* Soldier1pMontage, class UAnimMontage* Soldier3pMontage);
	void SetAnimationPlayRateHandler(class UAnimMontage* WeaponMontage, class UAnimMontage* Soldier1pMontage, class UAnimMontage* Soldier3pMontage, const float NewPlayRate);
	void StopAnimationHandler(class UAnimMontage* WeaponMontage, class UAnimMontage* Soldier1pMontage, class UAnimMontage* Soldier3pMontage, const float blendOutTime, const bool bStopAllWeaponAnims);
	void UpdateBoredMontage();
	void UpdateStaticItemInfo(class USQItemStaticInfo* InfoObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAnimInstance">();
	}
	static class USQAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQAnimInstance>();
	}
};
#pragma pack(pop)
static_assert(alignof(USQAnimInstance) == 0x000010, "Wrong alignment on USQAnimInstance");
static_assert(sizeof(USQAnimInstance) == 0x0002E0, "Wrong size on USQAnimInstance");
static_assert(offsetof(USQAnimInstance, LastBoredMontagePlayedIndex) == 0x0002B8, "Member 'USQAnimInstance::LastBoredMontagePlayedIndex' has a wrong offset!");
static_assert(offsetof(USQAnimInstance, BoredTargetTime) == 0x0002BC, "Member 'USQAnimInstance::BoredTargetTime' has a wrong offset!");
static_assert(offsetof(USQAnimInstance, bIsAds) == 0x0002C0, "Member 'USQAnimInstance::bIsAds' has a wrong offset!");
static_assert(offsetof(USQAnimInstance, bIsUsingItemOrIsAdsOrIsClimbing) == 0x0002C1, "Member 'USQAnimInstance::bIsUsingItemOrIsAdsOrIsClimbing' has a wrong offset!");
static_assert(offsetof(USQAnimInstance, CurrentItemStaticInfo) == 0x0002C8, "Member 'USQAnimInstance::CurrentItemStaticInfo' has a wrong offset!");
static_assert(offsetof(USQAnimInstance, Soldier) == 0x0002D0, "Member 'USQAnimInstance::Soldier' has a wrong offset!");

// Class Squad.SQAnimInstanceSoldier
// 0x0190 (0x0470 - 0x02E0)
#pragma pack(push, 0x1)
class alignas(0x10) USQAnimInstanceSoldier : public USQAnimInstance
{
public:
	bool                                          bDrawDebugSpheres;                                 // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSoldierAlive;                                   // 0x02D9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSoldierRagdolled;                               // 0x02DA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E88[0x1];                                      // 0x02DB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LeftHandIKLocation;                                // 0x02DC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LeftHandIKRotation;                                // 0x02E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         LeftHandIKAlpha;                                   // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RightHandIKLocation;                               // 0x02F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RightHandIKRotation;                               // 0x0304(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RightHandIKAlpha;                                  // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDragging;                                       // 0x0314(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E89[0x3];                                      // 0x0315(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               DraggingLeftArmRotation;                           // 0x0318(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         YawDeltaRaw;                                       // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AddRotShot;                                        // 0x0328(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               AddRotCameraShot;                                  // 0x0334(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               AddAdsRotCameraShot;                               // 0x0340(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bLeanConditions;                                   // 0x034C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8A[0x3];                                      // 0x034D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BipodLength;                                       // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BipodHeight;                                       // 0x0354(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoLowered;                                      // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8B[0x3];                                      // 0x0361(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               OffsetLineOfFire;                                  // 0x0364(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         LastVelocityWhenIsInAir;                           // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftHandWeaponIkAlpha;                             // 0x0374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightHand3pWeaponIkAlpha;                          // 0x0378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustAdsSightItemAnimPos;                         // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVelocityProneTransAnim;                           // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8C[0x3];                                      // 0x0381(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Direction;                                         // 0x0384(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanSprintToProne;                                 // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCrouched;                                       // 0x0389(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsProne;                                          // 0x038A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsJumping;                                        // 0x038B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsFalling;                                        // 0x038C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E8D[0x3];                                      // 0x038D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x0390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                Velocity;                                          // 0x0394(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PitchDeltaRaw;                                     // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFirstPersonVisibility;                            // 0x03A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E8E[0x3];                                      // 0x03A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ClimbWeaponSocketLoc;                              // 0x03A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               ClimbWeaponSocketRot;                              // 0x03B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               VaultClimbAo;                                      // 0x03C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               FreeLookRot;                                       // 0x03CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bSprintToProneTransAnim;                           // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLeanRight;                                        // 0x03D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLeanLeft;                                         // 0x03DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         LeaningDirection;                                  // 0x03DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBipodIsDeployed;                                  // 0x03DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E8F[0x3];                                      // 0x03DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BipodTransitionAlpha;                              // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShot;                                             // 0x03E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E90[0x3];                                      // 0x03E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SprintSpeedMultiplier;                             // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxWalkSpeedCrouched;                              // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxWalkSpeedProne;                                 // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxWalkSpeed;                                      // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsInVehicle;                                      // 0x03F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E91[0x3];                                      // 0x03F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VehiclePitch;                                      // 0x03FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VehicleYaw;                                        // 0x0400(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E92[0x4];                                      // 0x0404(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          VehicleBaseAnim;                                   // 0x0408(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBlendSpace*                            VehicleAimOffsets;                                 // 0x0410(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseWheelBlendSpace1D;                             // 0x0418(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E93[0x7];                                      // 0x0419(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace1D*                          VehicleWheelBlendSpace1D;                          // 0x0420(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VehicleWheel;                                      // 0x0428(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CustomVehicleWheel1;                               // 0x042C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InterpSpeed;                                       // 0x0430(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CustomSteeringWheelAnimExplTime;                   // 0x0434(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHandIKAlphaEnabled;                               // 0x0438(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E94[0x3];                                      // 0x0439(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SteeringWheelAnimExplTime;                         // 0x043C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RightHandAlpha;                                    // 0x0440(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LeftHandAlpha;                                     // 0x0444(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastVehicleWheelAbs;                               // 0x0448(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VehicleWheelAbsRate;                               // 0x044C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          SteeringWheelSingleFrameAnimSequence;              // 0x0450(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Time;                                              // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_LeanLeftAndLeanConditions;                   // 0x045C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_NotLeanLeftOrNotLeanConditions;              // 0x045D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_LeanRightAndLeanConditions;                  // 0x045E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_NotLeanRightOrNotLeanConditions;             // 0x045F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsPullingTriggerAndMagazineHasAmmo;               // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E95[0x7];                                      // 0x0461(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FRotator AlignWithGround(const struct FVector& FloorNormal);
	void OnVaultClimbStop();
	void UpdateDragging();
	void UpdateFastPathTransitionVariables(const float DeltaSeconds);
	void UpdateLean();
	void UpdateSteeringWheelVariables(const float DeltaSeconds);
	void UpdateVehicle(const float DeltaSeconds);
	void UpdateVehicleAim(const float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAnimInstanceSoldier">();
	}
	static class USQAnimInstanceSoldier* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQAnimInstanceSoldier>();
	}
};
#pragma pack(pop)
static_assert(alignof(USQAnimInstanceSoldier) == 0x000010, "Wrong alignment on USQAnimInstanceSoldier");
static_assert(sizeof(USQAnimInstanceSoldier) == 0x000470, "Wrong size on USQAnimInstanceSoldier");
static_assert(offsetof(USQAnimInstanceSoldier, bDrawDebugSpheres) == 0x0002D8, "Member 'USQAnimInstanceSoldier::bDrawDebugSpheres' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, bIsSoldierAlive) == 0x0002D9, "Member 'USQAnimInstanceSoldier::bIsSoldierAlive' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, bIsSoldierRagdolled) == 0x0002DA, "Member 'USQAnimInstanceSoldier::bIsSoldierRagdolled' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, LeftHandIKLocation) == 0x0002DC, "Member 'USQAnimInstanceSoldier::LeftHandIKLocation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, LeftHandIKRotation) == 0x0002E8, "Member 'USQAnimInstanceSoldier::LeftHandIKRotation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, LeftHandIKAlpha) == 0x0002F4, "Member 'USQAnimInstanceSoldier::LeftHandIKAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, RightHandIKLocation) == 0x0002F8, "Member 'USQAnimInstanceSoldier::RightHandIKLocation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, RightHandIKRotation) == 0x000304, "Member 'USQAnimInstanceSoldier::RightHandIKRotation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, RightHandIKAlpha) == 0x000310, "Member 'USQAnimInstanceSoldier::RightHandIKAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, bIsDragging) == 0x000314, "Member 'USQAnimInstanceSoldier::bIsDragging' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, DraggingLeftArmRotation) == 0x000318, "Member 'USQAnimInstanceSoldier::DraggingLeftArmRotation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, YawDeltaRaw) == 0x000324, "Member 'USQAnimInstanceSoldier::YawDeltaRaw' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, AddRotShot) == 0x000328, "Member 'USQAnimInstanceSoldier::AddRotShot' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, AddRotCameraShot) == 0x000334, "Member 'USQAnimInstanceSoldier::AddRotCameraShot' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, AddAdsRotCameraShot) == 0x000340, "Member 'USQAnimInstanceSoldier::AddAdsRotCameraShot' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, bLeanConditions) == 0x00034C, "Member 'USQAnimInstanceSoldier::bLeanConditions' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, BipodLength) == 0x000350, "Member 'USQAnimInstanceSoldier::BipodLength' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, BipodHeight) == 0x000354, "Member 'USQAnimInstanceSoldier::BipodHeight' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, bAutoLowered) == 0x000360, "Member 'USQAnimInstanceSoldier::bAutoLowered' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, OffsetLineOfFire) == 0x000364, "Member 'USQAnimInstanceSoldier::OffsetLineOfFire' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, LastVelocityWhenIsInAir) == 0x000370, "Member 'USQAnimInstanceSoldier::LastVelocityWhenIsInAir' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, LeftHandWeaponIkAlpha) == 0x000374, "Member 'USQAnimInstanceSoldier::LeftHandWeaponIkAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, RightHand3pWeaponIkAlpha) == 0x000378, "Member 'USQAnimInstanceSoldier::RightHand3pWeaponIkAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, AdjustAdsSightItemAnimPos) == 0x00037C, "Member 'USQAnimInstanceSoldier::AdjustAdsSightItemAnimPos' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, bVelocityProneTransAnim) == 0x000380, "Member 'USQAnimInstanceSoldier::bVelocityProneTransAnim' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, Direction) == 0x000384, "Member 'USQAnimInstanceSoldier::Direction' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, bCanSprintToProne) == 0x000388, "Member 'USQAnimInstanceSoldier::bCanSprintToProne' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, bIsCrouched) == 0x000389, "Member 'USQAnimInstanceSoldier::bIsCrouched' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, bIsProne) == 0x00038A, "Member 'USQAnimInstanceSoldier::bIsProne' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, bIsJumping) == 0x00038B, "Member 'USQAnimInstanceSoldier::bIsJumping' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, bIsFalling) == 0x00038C, "Member 'USQAnimInstanceSoldier::bIsFalling' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, Speed) == 0x000390, "Member 'USQAnimInstanceSoldier::Speed' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, Velocity) == 0x000394, "Member 'USQAnimInstanceSoldier::Velocity' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, PitchDeltaRaw) == 0x0003A0, "Member 'USQAnimInstanceSoldier::PitchDeltaRaw' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, bFirstPersonVisibility) == 0x0003A4, "Member 'USQAnimInstanceSoldier::bFirstPersonVisibility' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, ClimbWeaponSocketLoc) == 0x0003A8, "Member 'USQAnimInstanceSoldier::ClimbWeaponSocketLoc' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, ClimbWeaponSocketRot) == 0x0003B4, "Member 'USQAnimInstanceSoldier::ClimbWeaponSocketRot' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, VaultClimbAo) == 0x0003C0, "Member 'USQAnimInstanceSoldier::VaultClimbAo' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, FreeLookRot) == 0x0003CC, "Member 'USQAnimInstanceSoldier::FreeLookRot' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, bSprintToProneTransAnim) == 0x0003D8, "Member 'USQAnimInstanceSoldier::bSprintToProneTransAnim' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, bLeanRight) == 0x0003D9, "Member 'USQAnimInstanceSoldier::bLeanRight' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, bLeanLeft) == 0x0003DA, "Member 'USQAnimInstanceSoldier::bLeanLeft' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, LeaningDirection) == 0x0003DB, "Member 'USQAnimInstanceSoldier::LeaningDirection' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, bBipodIsDeployed) == 0x0003DC, "Member 'USQAnimInstanceSoldier::bBipodIsDeployed' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, BipodTransitionAlpha) == 0x0003E0, "Member 'USQAnimInstanceSoldier::BipodTransitionAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, bShot) == 0x0003E4, "Member 'USQAnimInstanceSoldier::bShot' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, SprintSpeedMultiplier) == 0x0003E8, "Member 'USQAnimInstanceSoldier::SprintSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, MaxWalkSpeedCrouched) == 0x0003EC, "Member 'USQAnimInstanceSoldier::MaxWalkSpeedCrouched' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, MaxWalkSpeedProne) == 0x0003F0, "Member 'USQAnimInstanceSoldier::MaxWalkSpeedProne' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, MaxWalkSpeed) == 0x0003F4, "Member 'USQAnimInstanceSoldier::MaxWalkSpeed' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, bIsInVehicle) == 0x0003F8, "Member 'USQAnimInstanceSoldier::bIsInVehicle' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, VehiclePitch) == 0x0003FC, "Member 'USQAnimInstanceSoldier::VehiclePitch' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, VehicleYaw) == 0x000400, "Member 'USQAnimInstanceSoldier::VehicleYaw' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, VehicleBaseAnim) == 0x000408, "Member 'USQAnimInstanceSoldier::VehicleBaseAnim' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, VehicleAimOffsets) == 0x000410, "Member 'USQAnimInstanceSoldier::VehicleAimOffsets' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, bUseWheelBlendSpace1D) == 0x000418, "Member 'USQAnimInstanceSoldier::bUseWheelBlendSpace1D' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, VehicleWheelBlendSpace1D) == 0x000420, "Member 'USQAnimInstanceSoldier::VehicleWheelBlendSpace1D' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, VehicleWheel) == 0x000428, "Member 'USQAnimInstanceSoldier::VehicleWheel' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, CustomVehicleWheel1) == 0x00042C, "Member 'USQAnimInstanceSoldier::CustomVehicleWheel1' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, InterpSpeed) == 0x000430, "Member 'USQAnimInstanceSoldier::InterpSpeed' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, CustomSteeringWheelAnimExplTime) == 0x000434, "Member 'USQAnimInstanceSoldier::CustomSteeringWheelAnimExplTime' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, bHandIKAlphaEnabled) == 0x000438, "Member 'USQAnimInstanceSoldier::bHandIKAlphaEnabled' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, SteeringWheelAnimExplTime) == 0x00043C, "Member 'USQAnimInstanceSoldier::SteeringWheelAnimExplTime' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, RightHandAlpha) == 0x000440, "Member 'USQAnimInstanceSoldier::RightHandAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, LeftHandAlpha) == 0x000444, "Member 'USQAnimInstanceSoldier::LeftHandAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, LastVehicleWheelAbs) == 0x000448, "Member 'USQAnimInstanceSoldier::LastVehicleWheelAbs' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, VehicleWheelAbsRate) == 0x00044C, "Member 'USQAnimInstanceSoldier::VehicleWheelAbsRate' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, SteeringWheelSingleFrameAnimSequence) == 0x000450, "Member 'USQAnimInstanceSoldier::SteeringWheelSingleFrameAnimSequence' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, Time) == 0x000458, "Member 'USQAnimInstanceSoldier::Time' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, bFP_T_LeanLeftAndLeanConditions) == 0x00045C, "Member 'USQAnimInstanceSoldier::bFP_T_LeanLeftAndLeanConditions' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, bFP_T_NotLeanLeftOrNotLeanConditions) == 0x00045D, "Member 'USQAnimInstanceSoldier::bFP_T_NotLeanLeftOrNotLeanConditions' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, bFP_T_LeanRightAndLeanConditions) == 0x00045E, "Member 'USQAnimInstanceSoldier::bFP_T_LeanRightAndLeanConditions' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, bFP_T_NotLeanRightOrNotLeanConditions) == 0x00045F, "Member 'USQAnimInstanceSoldier::bFP_T_NotLeanRightOrNotLeanConditions' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier, bIsPullingTriggerAndMagazineHasAmmo) == 0x000460, "Member 'USQAnimInstanceSoldier::bIsPullingTriggerAndMagazineHasAmmo' has a wrong offset!");

// Class Squad.SQPipScopeCaptureComponent
// 0x0130 (0x09F0 - 0x08C0)
class USQPipScopeCaptureComponent : public USceneCaptureComponent2D
{
public:
	struct FComponentReference                    PIPScopeMesh;                                      // 0x08B8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     PIPMaterialTemplate;                               // 0x08E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MaterialTextureParameterName;                      // 0x08E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MaterialReticleScaleParameterName;                 // 0x08F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MaterialGlowEnableParameterName;                   // 0x08F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 MagnificationLevels;                               // 0x0900(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<float, int32>                            MagnificationMap;                                  // 0x0910(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         CurrentMagnificationLevel;                         // 0x0960(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E96[0x4];                                      // 0x0964(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             MagnificationLevelChangedEvent;                    // 0x0968(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<float>                                 ReticleGlowLevels;                                 // 0x0978(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         CurrentReticleGlowLevel;                           // 0x0988(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E97[0x14];                                     // 0x098C(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   PIPStaticMeshRef;                                  // 0x09A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQGameUserSettings*                    GameUserSettings;                                  // 0x09A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      OwningController;                                  // 0x09B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQWeapon*                              OwningWeapon;                                      // 0x09B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQSoldier*                             OwningSoldier;                                     // 0x09C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 PIPTexture;                                        // 0x09C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               PIPDynamicMaterialInstance;                        // 0x09D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E98[0x18];                                     // 0x09D8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BPPostCaptureScene();
	void CycleMagnificationLevel(int32 OverrideLevel);
	void CycleReticleGlowLevel(int32 OverrideLevel);
	float GetReticleScale();
	void OnAdsPressedEvent(bool bAdsState);
	void OnAdsTransitionCompleteEvent(bool bAdsState);
	void OnCycleMagnification__DelegateSignature(float NewFOV, int32 NewMagnification);
	void OnPawnOwnerChanged(class APawn* NewPawnOwner);
	void OnPlayerDowned();
	void PrioritizeScopeClarity(const bool bIsPrioritizingScopeClarity);
	void WeaponUnEquipped(class ASQEquipableItem* EquipableItem);

	float GetRenderTargetSizeMultiplier() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQPipScopeCaptureComponent">();
	}
	static class USQPipScopeCaptureComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQPipScopeCaptureComponent>();
	}
};
static_assert(alignof(USQPipScopeCaptureComponent) == 0x000010, "Wrong alignment on USQPipScopeCaptureComponent");
static_assert(sizeof(USQPipScopeCaptureComponent) == 0x0009F0, "Wrong size on USQPipScopeCaptureComponent");
static_assert(offsetof(USQPipScopeCaptureComponent, PIPScopeMesh) == 0x0008B8, "Member 'USQPipScopeCaptureComponent::PIPScopeMesh' has a wrong offset!");
static_assert(offsetof(USQPipScopeCaptureComponent, PIPMaterialTemplate) == 0x0008E0, "Member 'USQPipScopeCaptureComponent::PIPMaterialTemplate' has a wrong offset!");
static_assert(offsetof(USQPipScopeCaptureComponent, MaterialTextureParameterName) == 0x0008E8, "Member 'USQPipScopeCaptureComponent::MaterialTextureParameterName' has a wrong offset!");
static_assert(offsetof(USQPipScopeCaptureComponent, MaterialReticleScaleParameterName) == 0x0008F0, "Member 'USQPipScopeCaptureComponent::MaterialReticleScaleParameterName' has a wrong offset!");
static_assert(offsetof(USQPipScopeCaptureComponent, MaterialGlowEnableParameterName) == 0x0008F8, "Member 'USQPipScopeCaptureComponent::MaterialGlowEnableParameterName' has a wrong offset!");
static_assert(offsetof(USQPipScopeCaptureComponent, MagnificationLevels) == 0x000900, "Member 'USQPipScopeCaptureComponent::MagnificationLevels' has a wrong offset!");
static_assert(offsetof(USQPipScopeCaptureComponent, MagnificationMap) == 0x000910, "Member 'USQPipScopeCaptureComponent::MagnificationMap' has a wrong offset!");
static_assert(offsetof(USQPipScopeCaptureComponent, CurrentMagnificationLevel) == 0x000960, "Member 'USQPipScopeCaptureComponent::CurrentMagnificationLevel' has a wrong offset!");
static_assert(offsetof(USQPipScopeCaptureComponent, MagnificationLevelChangedEvent) == 0x000968, "Member 'USQPipScopeCaptureComponent::MagnificationLevelChangedEvent' has a wrong offset!");
static_assert(offsetof(USQPipScopeCaptureComponent, ReticleGlowLevels) == 0x000978, "Member 'USQPipScopeCaptureComponent::ReticleGlowLevels' has a wrong offset!");
static_assert(offsetof(USQPipScopeCaptureComponent, CurrentReticleGlowLevel) == 0x000988, "Member 'USQPipScopeCaptureComponent::CurrentReticleGlowLevel' has a wrong offset!");
static_assert(offsetof(USQPipScopeCaptureComponent, PIPStaticMeshRef) == 0x0009A0, "Member 'USQPipScopeCaptureComponent::PIPStaticMeshRef' has a wrong offset!");
static_assert(offsetof(USQPipScopeCaptureComponent, GameUserSettings) == 0x0009A8, "Member 'USQPipScopeCaptureComponent::GameUserSettings' has a wrong offset!");
static_assert(offsetof(USQPipScopeCaptureComponent, OwningController) == 0x0009B0, "Member 'USQPipScopeCaptureComponent::OwningController' has a wrong offset!");
static_assert(offsetof(USQPipScopeCaptureComponent, OwningWeapon) == 0x0009B8, "Member 'USQPipScopeCaptureComponent::OwningWeapon' has a wrong offset!");
static_assert(offsetof(USQPipScopeCaptureComponent, OwningSoldier) == 0x0009C0, "Member 'USQPipScopeCaptureComponent::OwningSoldier' has a wrong offset!");
static_assert(offsetof(USQPipScopeCaptureComponent, PIPTexture) == 0x0009C8, "Member 'USQPipScopeCaptureComponent::PIPTexture' has a wrong offset!");
static_assert(offsetof(USQPipScopeCaptureComponent, PIPDynamicMaterialInstance) == 0x0009D0, "Member 'USQPipScopeCaptureComponent::PIPDynamicMaterialInstance' has a wrong offset!");

// Class Squad.SQAnimInstanceSoldier1P
// 0x0960 (0x0DD0 - 0x0470)
class USQAnimInstanceSoldier1P : public USQAnimInstanceSoldier
{
public:
	bool                                          bRelevantAnimTimeRemaining__LTEPtTwo__WeaponBobbing1P__St2P; // 0x0468(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelevantAnimTimeRemaining__LTEPtTwo__WeaponBobbing1P__P2St; // 0x0469(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelevantAnimTimeRemaining__LTEPtTwo__WeaponBobbing1P__Sp2P; // 0x046A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E99[0xE1];                                     // 0x046B(0x00E1)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bStateWeight__GTEOne__ProneStates__ProneMove;      // 0x054C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelevantAnimTimeRemaining__LTEPtTwo__ProneStates__OutProneMove; // 0x054D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9A[0x72];                                     // 0x054E(0x0072)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bCurrentTime__GTEPtThree__Jump1P__JumpStart__rifle_1ptop_jumpstart; // 0x05C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTimeRemaining__LTEPtTwo__Jump1P__JumpEnd__rifle_1ptop_jumpend; // 0x05C1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTimeRemaining__LTEPtTwo__Jump1P__JumpStart__rifle_1ptop_jumpstart; // 0x05C2(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9B[0x79];                                     // 0x05C3(0x0079)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Zeroing;                                           // 0x063C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UBlendSpaceBase*                        ProneMoveType;                                     // 0x0648(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ProneMoveTypeAdditiveReference;                    // 0x0650(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          OutProneMoveType;                                  // 0x0658(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          OutProneMoveTypeNonadditive;                       // 0x0660(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AdjustableAdsSightItemAnim;                        // 0x0668(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HasAdjustableSightAlpha;                           // 0x0670(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StandLoc;                                          // 0x0674(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CrouchLoc;                                         // 0x0680(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ProneLoc;                                          // 0x068C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BipodLoc;                                          // 0x0698(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandLocBlendTime;                                 // 0x06A4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NegFpvTorsoCameraOffset;                           // 0x06A8(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DeviationVisuFb;                                   // 0x06B4(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                StrafeVector;                                      // 0x06C0(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               StrafeRotator;                                     // 0x06CC(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               AdsStrafeRotator;                                  // 0x06D8(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         BaseAimPitchPct;                                   // 0x06E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                WeapRecoilRelLoc;                                  // 0x06E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               GlobalDeltaRotDeltaSpring;                         // 0x06F4(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               GlobalDeltaRotDeltaSpringRoll;                     // 0x0700(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                                GlobalDeltaLocDeltaSpringWeaponMesh;               // 0x070C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LeftHandIKSpringAlpha;                             // 0x0718(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                Aim1pWeaponMeshPosition;                           // 0x071C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                Aim1pWeaponMeshRescale;                            // 0x0728(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                StandLeanLeftRootOffset;                           // 0x0734(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               StandLeanLeftWeaponRotation;                       // 0x0740(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               StandLeanLeftCameraRotation;                       // 0x074C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                                StandLeanRightRootOffset;                          // 0x0758(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               StandLeanRightWeaponRotation;                      // 0x0764(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               StandLeanRightCameraRotation;                      // 0x0770(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                                CrouchLeanLeftRootOffset;                          // 0x077C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               CrouchLeanLeftWeaponRotation;                      // 0x0788(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               CrouchLeanLeftCameraRotation;                      // 0x0794(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                                CrouchLeanRightRootOffset;                         // 0x07A0(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               CrouchLeanRightWeaponRotation;                     // 0x07AC(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               CrouchLeanRightCameraRotation;                     // 0x07B8(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                                ProneLeanLeftRootOffset;                           // 0x07C4(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               ProneLeanLeftWeaponRotation;                       // 0x07D0(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               ProneLeanLeftCameraRotation;                       // 0x07DC(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                                ProneLeanRightRootOffset;                          // 0x07E8(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               ProneLeanRightWeaponRotation;                      // 0x07F4(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               ProneLeanRightCameraRotation;                      // 0x0800(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         FP_JumpStartLoopAlpha;                             // 0x080C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_JumpEndBobbingBlendAlpha;                       // 0x0810(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_JumpEndBobbingAdditiveAlpha;                    // 0x0814(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_JumpEndCameraRootMotionAlphaBlend;              // 0x0818(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_IsFallingAndNotJumping;                        // 0x081C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E9C[0x3];                                      // 0x081D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FP_St2P_RootMotionBlendAlpha;                      // 0x0820(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_P2St_RootMotionBlendAlpha;                      // 0x0824(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_IsProneAndIsSprintingAndCanSprintToProne;      // 0x0828(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_SwitchedProneAndNotIsProne;                    // 0x0829(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_SwitchedProneAndIsProne;                       // 0x082A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E9D[0x1];                                      // 0x082B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               FP_ProneMoveIkWeaponHandRootRotFromGroundAngle;    // 0x082C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               FP_ProneMoveIkWeaponHandRootRotFromActorPitch;     // 0x0838(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bFP_ProneMoveWeaponAligningConditions;             // 0x0844(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E9E[0x3];                                      // 0x0845(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               FP_ProneMoveIkWeaponRightClavicleRot;              // 0x0848(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         FP_ProneMoveBobPlayRate;                           // 0x0854(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_SpeedHigherThanZeroAndNotIsProneTransition;    // 0x0858(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_SpeedHigherThanZero;                           // 0x0859(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_HvdXorClAndClOrHvdXorVaAndVaOrBipod;           // 0x085A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_ClimbAnimNotEqual1;                            // 0x085B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_ClimbAndClimbAnim1;                            // 0x085C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E9F[0x3];                                      // 0x085D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               FP_ClimbAndClimbAnim1_AimRotator;                  // 0x0860(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bFP_1pLeftHandIkConditions;                        // 0x086C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EA0[0x3];                                      // 0x086D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FP_1pLeftHandIKConditionsAlpha;                    // 0x0870(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_IsUsingItemAlpha;                               // 0x0874(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_IsProneAlpha;                                   // 0x0878(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_ProneStatesProneMoveToOutProneMove;          // 0x087C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_Jump1pJumpStartToJumpEnd;                    // 0x087D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_ToADS_Hipfire;                               // 0x087E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCachedIsPullingTriggerAndMagazineHasAmmo;         // 0x087F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ToADS_Hipfire_RemainingTIme;                       // 0x0880(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Steady1pHipFireDuration;                           // 0x0884(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_StandToADS_Grenade;                          // 0x0888(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_WeaponBobbing1P_ADSToStand;                  // 0x0889(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_WeaponBobbing1P_ADSToProne;                  // 0x088A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_WeaponBobbing1P_ProneToADS;                  // 0x088B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_CustomIsCrouchedAlpha;                          // 0x088C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_HasAdjustableSightAlphaTimesIsAdsAlpha;         // 0x0890(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bProneMoveBobbing;                                 // 0x0894(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLeftHandIkOut1P;                                  // 0x0895(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSwitchedProne;                                    // 0x0896(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLastProneStance;                                  // 0x0897(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveDeviationFactor;                               // 0x0898(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShotDeviationFactor;                               // 0x089C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               FinalDeviation;                                    // 0x08A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DeviationVisuFbZY;                                 // 0x08B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AddRotGoingShot;                                   // 0x08B8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RecoilReleaseInterpSpeed;                          // 0x08C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilWeaponLimit;                                 // 0x08C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveRecoilFactor;                                  // 0x08CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilCanRelease;                                  // 0x08D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FinalRecoilSigma;                                  // 0x08D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FinalRecoilMean;                                   // 0x08E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrafeSpringFactor;                                // 0x08EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LastKnownRot1;                                     // 0x08F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                CtrlRotVectorDeltaSpring;                          // 0x08FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LastKnownRot2;                                     // 0x0908(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CtrlRotDeltaSpringLerpAlpha;                       // 0x0914(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponSpringTurnSpeedToFullIntensity;              // 0x0918(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               StrafeSpringRotator;                               // 0x091C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                StrafeSpringVector;                                // 0x0928(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AdsStrafeSpringRotator;                            // 0x0934(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CustomNotIsAds;                                    // 0x0940(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA1[0x4];                                      // 0x0944(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCameraShakeBase>           FireShake;                                         // 0x0948(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeaponSpringSide;                                  // 0x0950(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponSpringStiffness;                             // 0x0954(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponSpringCriticalDampingFactor;                 // 0x0958(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponSpringMass;                                  // 0x095C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponSpringFactor;                                // 0x0960(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponMeshSpringLocDelayFactor;                    // 0x0964(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponSpringClamp;                                 // 0x0968(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponMeshSpringRotDelayFactor;                    // 0x096C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddMoveDeviation;                                  // 0x0970(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveDeviationFactorRelease;                        // 0x0974(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxMoveDeviationFactor;                            // 0x0978(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinMoveDeviationFactor;                            // 0x097C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FullStaminaDeviationFactor;                        // 0x0980(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowStaminaDeviationFactor;                         // 0x0984(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddShotDeviationFactor;                            // 0x0988(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddShotDeviationFactorAds;                         // 0x098C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShotDeviationFactorRelease;                        // 0x0990(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinShotDeviationFactor;                            // 0x0994(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxShotDeviationFactor;                            // 0x0998(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeviationVisuFbInterpSpeed_YZ;                     // 0x099C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeviationVisuFbMax;                                // 0x09A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeviationVisuFbInterpSpeed_Final;                  // 0x09A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinBipodAdsDeviation;                              // 0x09A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinBipodDeviation;                                 // 0x09AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinProneAdsDeviation;                              // 0x09B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinProneDeviation;                                 // 0x09B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinCrouchAdsDeviation;                             // 0x09B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinCrouchDeviation;                                // 0x09BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinStandAdsDeviation;                              // 0x09C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinStandDeviation;                                 // 0x09C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinProneTransitionDeviation;                       // 0x09C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxMoveRecoilFactor;                               // 0x09CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddMoveRecoil;                                     // 0x09D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinMoveRecoilFactor;                               // 0x09D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveRecoilFactorRelease;                           // 0x09D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FullStaminaRecoilFactor;                           // 0x09DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowStaminaRecoilFactor;                            // 0x09E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilCameraOffsetFactor;                          // 0x09E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilLofCameraOffsetLimit;                        // 0x09E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilLofAttackInterpSpeed;                        // 0x09EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilCanReleaseInterpSpeed;                       // 0x09F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilCameraOffsetInterpSpeed;                     // 0x09F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilLofReleaseInterpSpeed;                       // 0x09F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeapRecoilRelLocFactor;                            // 0x09FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilCameraShotInterpSpeed;                       // 0x0A00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilAdsCameraShotInterpSpeed;                    // 0x0A04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ProneAdsRecoilMean;                                // 0x0A08(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ProneAdsRecoilSigma;                               // 0x0A14(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ProneRecoilMean;                                   // 0x0A20(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ProneRecoilSigma;                                  // 0x0A2C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CrouchAdsRecoilMean;                               // 0x0A38(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CrouchAdsRecoilSigma;                              // 0x0A44(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CrouchRecoilMean;                                  // 0x0A50(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CrouchRecoilSigma;                                 // 0x0A5C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StandAdsRecoilMean;                                // 0x0A68(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StandAdsRecoilSigma;                               // 0x0A74(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StandRecoilMean;                                   // 0x0A80(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StandRecoilSigma;                                  // 0x0A8C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ProneTransitionRecoilMean;                         // 0x0A98(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ProneTransitionRecoilSigma;                        // 0x0AA4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BipodAdsRecoilMean;                                // 0x0AB0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BipodAdsRecoilSigma;                               // 0x0ABC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BipodRecoilMean;                                   // 0x0AC8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BipodRecoilSigma;                                  // 0x0AD4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQSwayData                            SwayData;                                          // 0x0AE0(0x0094)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQSwayData                            SwayAlignmentData;                                 // 0x0B74(0x0094)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bSplitRandomization;                               // 0x0C08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA2[0x3];                                      // 0x0C09(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveSwayFactorMultiplier;                          // 0x0C0C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuppressSwayFactorMultiplier;                      // 0x0C10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               WeaponPunchSwayCombinedRotator;                    // 0x0C14(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               WeaponPunchSwayClearSightsCombinedRotator;         // 0x0C20(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ClearSightWeaponPunchSwayLocationOffset;           // 0x0C2C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               WeaponPunchSwayAlignmentCombinedRotator;           // 0x0C38(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               WeaponPunch;                                       // 0x0C44(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               WeaponPunchAlignment;                              // 0x0C50(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                WeaponPunchLocation;                               // 0x0C5C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ClearSightsRotation;                               // 0x0C68(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ClearSightsLocation;                               // 0x0C74(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomSpeed;                                       // 0x0C80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandTime;                                         // 0x0C84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrouchTime;                                        // 0x0C88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProneTime;                                         // 0x0C8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BipodTime;                                         // 0x0C90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnclampedTotalSway;                                // 0x0C94(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnclampedTotalSwayAlignment;                       // 0x0C98(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA3[0x4];                                      // 0x0C9C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USQSuppressionInfo>         LastSuppressionInfoClass;                          // 0x0CA0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA4[0x3C];                                     // 0x0CA8(0x003C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               SmoothFinalLofSuppressRotation;                    // 0x0CE4(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         LofSuppressRotationAlpha;                          // 0x0CF0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA5[0x10];                                     // 0x0CF4(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bWasCrouchedBeforeProne;                           // 0x0D04(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA6[0x3];                                      // 0x0D05(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CustomCurrentFloorNormal1;                         // 0x0D08(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FP_SprintBlendAlpha;                               // 0x0D14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSprint1pLoopSection;                            // 0x0D18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA7[0x7];                                      // 0x0D19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          SprintStaticPose;                                  // 0x0D20(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               FreeAimOffset;                                     // 0x0D28(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ADSWeaponSpringMultiplierRotation;                 // 0x0D34(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ADSWeaponSpringMultiplierTranslation;              // 0x0D40(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ScaleWeaponSpringADSTransform;                     // 0x0D4C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ScaleWeaponSpringADSRotation;                      // 0x0D58(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RecoilAlignmentNewGripAlignment;                   // 0x0D64(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RecoilAlignmentNewShoulderAlignment;               // 0x0D70(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA8[0x1C];                                     // 0x0D7C(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           BobbingMove1pMontage;                              // 0x0D98(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           BobbingSprint1pMontage;                            // 0x0DA0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA9[0x28];                                     // 0x0DA8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetWeaponSpringBipodEventDefaults(const bool bBipodState);
	void SetWeaponSpringParameters(const bool bAdsState);
	void Update1pCurrentFloor();
	void UpdateAccuracyParameters();
	void UpdateBobbingsPlayrate(const float DeltaSeconds);
	void UpdateDeviation();
	void UpdateDeviationVisuFb();
	void UpdateFastPath();
	void UpdateGameplayParameters();
	void UpdateIsFallingPlayRate(const float DeltaSeconds);
	void UpdateLofSuppression(const float DeltaSeconds);
	void UpdatePitch();
	void UpdateRecoilAndFire();
	void UpdateSprintSpeedBlend();
	void UpdateStrafeSpring();
	void UpdateSwitchedProne();
	void UpdateTurnSpring();
	void UpdateWasCrouchedBeforeProne();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAnimInstanceSoldier1P">();
	}
	static class USQAnimInstanceSoldier1P* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQAnimInstanceSoldier1P>();
	}
};
static_assert(alignof(USQAnimInstanceSoldier1P) == 0x000010, "Wrong alignment on USQAnimInstanceSoldier1P");
static_assert(sizeof(USQAnimInstanceSoldier1P) == 0x000DD0, "Wrong size on USQAnimInstanceSoldier1P");
static_assert(offsetof(USQAnimInstanceSoldier1P, bRelevantAnimTimeRemaining__LTEPtTwo__WeaponBobbing1P__St2P) == 0x000468, "Member 'USQAnimInstanceSoldier1P::bRelevantAnimTimeRemaining__LTEPtTwo__WeaponBobbing1P__St2P' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bRelevantAnimTimeRemaining__LTEPtTwo__WeaponBobbing1P__P2St) == 0x000469, "Member 'USQAnimInstanceSoldier1P::bRelevantAnimTimeRemaining__LTEPtTwo__WeaponBobbing1P__P2St' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bRelevantAnimTimeRemaining__LTEPtTwo__WeaponBobbing1P__Sp2P) == 0x00046A, "Member 'USQAnimInstanceSoldier1P::bRelevantAnimTimeRemaining__LTEPtTwo__WeaponBobbing1P__Sp2P' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bStateWeight__GTEOne__ProneStates__ProneMove) == 0x00054C, "Member 'USQAnimInstanceSoldier1P::bStateWeight__GTEOne__ProneStates__ProneMove' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bRelevantAnimTimeRemaining__LTEPtTwo__ProneStates__OutProneMove) == 0x00054D, "Member 'USQAnimInstanceSoldier1P::bRelevantAnimTimeRemaining__LTEPtTwo__ProneStates__OutProneMove' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bCurrentTime__GTEPtThree__Jump1P__JumpStart__rifle_1ptop_jumpstart) == 0x0005C0, "Member 'USQAnimInstanceSoldier1P::bCurrentTime__GTEPtThree__Jump1P__JumpStart__rifle_1ptop_jumpstart' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bTimeRemaining__LTEPtTwo__Jump1P__JumpEnd__rifle_1ptop_jumpend) == 0x0005C1, "Member 'USQAnimInstanceSoldier1P::bTimeRemaining__LTEPtTwo__Jump1P__JumpEnd__rifle_1ptop_jumpend' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bTimeRemaining__LTEPtTwo__Jump1P__JumpStart__rifle_1ptop_jumpstart) == 0x0005C2, "Member 'USQAnimInstanceSoldier1P::bTimeRemaining__LTEPtTwo__Jump1P__JumpStart__rifle_1ptop_jumpstart' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, Zeroing) == 0x00063C, "Member 'USQAnimInstanceSoldier1P::Zeroing' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, ProneMoveType) == 0x000648, "Member 'USQAnimInstanceSoldier1P::ProneMoveType' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, ProneMoveTypeAdditiveReference) == 0x000650, "Member 'USQAnimInstanceSoldier1P::ProneMoveTypeAdditiveReference' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, OutProneMoveType) == 0x000658, "Member 'USQAnimInstanceSoldier1P::OutProneMoveType' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, OutProneMoveTypeNonadditive) == 0x000660, "Member 'USQAnimInstanceSoldier1P::OutProneMoveTypeNonadditive' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, AdjustableAdsSightItemAnim) == 0x000668, "Member 'USQAnimInstanceSoldier1P::AdjustableAdsSightItemAnim' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, HasAdjustableSightAlpha) == 0x000670, "Member 'USQAnimInstanceSoldier1P::HasAdjustableSightAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, StandLoc) == 0x000674, "Member 'USQAnimInstanceSoldier1P::StandLoc' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, CrouchLoc) == 0x000680, "Member 'USQAnimInstanceSoldier1P::CrouchLoc' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, ProneLoc) == 0x00068C, "Member 'USQAnimInstanceSoldier1P::ProneLoc' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, BipodLoc) == 0x000698, "Member 'USQAnimInstanceSoldier1P::BipodLoc' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, StandLocBlendTime) == 0x0006A4, "Member 'USQAnimInstanceSoldier1P::StandLocBlendTime' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, NegFpvTorsoCameraOffset) == 0x0006A8, "Member 'USQAnimInstanceSoldier1P::NegFpvTorsoCameraOffset' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, DeviationVisuFb) == 0x0006B4, "Member 'USQAnimInstanceSoldier1P::DeviationVisuFb' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, StrafeVector) == 0x0006C0, "Member 'USQAnimInstanceSoldier1P::StrafeVector' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, StrafeRotator) == 0x0006CC, "Member 'USQAnimInstanceSoldier1P::StrafeRotator' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, AdsStrafeRotator) == 0x0006D8, "Member 'USQAnimInstanceSoldier1P::AdsStrafeRotator' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, BaseAimPitchPct) == 0x0006E4, "Member 'USQAnimInstanceSoldier1P::BaseAimPitchPct' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, WeapRecoilRelLoc) == 0x0006E8, "Member 'USQAnimInstanceSoldier1P::WeapRecoilRelLoc' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, GlobalDeltaRotDeltaSpring) == 0x0006F4, "Member 'USQAnimInstanceSoldier1P::GlobalDeltaRotDeltaSpring' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, GlobalDeltaRotDeltaSpringRoll) == 0x000700, "Member 'USQAnimInstanceSoldier1P::GlobalDeltaRotDeltaSpringRoll' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, GlobalDeltaLocDeltaSpringWeaponMesh) == 0x00070C, "Member 'USQAnimInstanceSoldier1P::GlobalDeltaLocDeltaSpringWeaponMesh' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, LeftHandIKSpringAlpha) == 0x000718, "Member 'USQAnimInstanceSoldier1P::LeftHandIKSpringAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, Aim1pWeaponMeshPosition) == 0x00071C, "Member 'USQAnimInstanceSoldier1P::Aim1pWeaponMeshPosition' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, Aim1pWeaponMeshRescale) == 0x000728, "Member 'USQAnimInstanceSoldier1P::Aim1pWeaponMeshRescale' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, StandLeanLeftRootOffset) == 0x000734, "Member 'USQAnimInstanceSoldier1P::StandLeanLeftRootOffset' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, StandLeanLeftWeaponRotation) == 0x000740, "Member 'USQAnimInstanceSoldier1P::StandLeanLeftWeaponRotation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, StandLeanLeftCameraRotation) == 0x00074C, "Member 'USQAnimInstanceSoldier1P::StandLeanLeftCameraRotation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, StandLeanRightRootOffset) == 0x000758, "Member 'USQAnimInstanceSoldier1P::StandLeanRightRootOffset' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, StandLeanRightWeaponRotation) == 0x000764, "Member 'USQAnimInstanceSoldier1P::StandLeanRightWeaponRotation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, StandLeanRightCameraRotation) == 0x000770, "Member 'USQAnimInstanceSoldier1P::StandLeanRightCameraRotation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, CrouchLeanLeftRootOffset) == 0x00077C, "Member 'USQAnimInstanceSoldier1P::CrouchLeanLeftRootOffset' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, CrouchLeanLeftWeaponRotation) == 0x000788, "Member 'USQAnimInstanceSoldier1P::CrouchLeanLeftWeaponRotation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, CrouchLeanLeftCameraRotation) == 0x000794, "Member 'USQAnimInstanceSoldier1P::CrouchLeanLeftCameraRotation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, CrouchLeanRightRootOffset) == 0x0007A0, "Member 'USQAnimInstanceSoldier1P::CrouchLeanRightRootOffset' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, CrouchLeanRightWeaponRotation) == 0x0007AC, "Member 'USQAnimInstanceSoldier1P::CrouchLeanRightWeaponRotation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, CrouchLeanRightCameraRotation) == 0x0007B8, "Member 'USQAnimInstanceSoldier1P::CrouchLeanRightCameraRotation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, ProneLeanLeftRootOffset) == 0x0007C4, "Member 'USQAnimInstanceSoldier1P::ProneLeanLeftRootOffset' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, ProneLeanLeftWeaponRotation) == 0x0007D0, "Member 'USQAnimInstanceSoldier1P::ProneLeanLeftWeaponRotation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, ProneLeanLeftCameraRotation) == 0x0007DC, "Member 'USQAnimInstanceSoldier1P::ProneLeanLeftCameraRotation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, ProneLeanRightRootOffset) == 0x0007E8, "Member 'USQAnimInstanceSoldier1P::ProneLeanRightRootOffset' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, ProneLeanRightWeaponRotation) == 0x0007F4, "Member 'USQAnimInstanceSoldier1P::ProneLeanRightWeaponRotation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, ProneLeanRightCameraRotation) == 0x000800, "Member 'USQAnimInstanceSoldier1P::ProneLeanRightCameraRotation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, FP_JumpStartLoopAlpha) == 0x00080C, "Member 'USQAnimInstanceSoldier1P::FP_JumpStartLoopAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, FP_JumpEndBobbingBlendAlpha) == 0x000810, "Member 'USQAnimInstanceSoldier1P::FP_JumpEndBobbingBlendAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, FP_JumpEndBobbingAdditiveAlpha) == 0x000814, "Member 'USQAnimInstanceSoldier1P::FP_JumpEndBobbingAdditiveAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, FP_JumpEndCameraRootMotionAlphaBlend) == 0x000818, "Member 'USQAnimInstanceSoldier1P::FP_JumpEndCameraRootMotionAlphaBlend' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bFP_IsFallingAndNotJumping) == 0x00081C, "Member 'USQAnimInstanceSoldier1P::bFP_IsFallingAndNotJumping' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, FP_St2P_RootMotionBlendAlpha) == 0x000820, "Member 'USQAnimInstanceSoldier1P::FP_St2P_RootMotionBlendAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, FP_P2St_RootMotionBlendAlpha) == 0x000824, "Member 'USQAnimInstanceSoldier1P::FP_P2St_RootMotionBlendAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bFP_IsProneAndIsSprintingAndCanSprintToProne) == 0x000828, "Member 'USQAnimInstanceSoldier1P::bFP_IsProneAndIsSprintingAndCanSprintToProne' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bFP_SwitchedProneAndNotIsProne) == 0x000829, "Member 'USQAnimInstanceSoldier1P::bFP_SwitchedProneAndNotIsProne' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bFP_SwitchedProneAndIsProne) == 0x00082A, "Member 'USQAnimInstanceSoldier1P::bFP_SwitchedProneAndIsProne' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, FP_ProneMoveIkWeaponHandRootRotFromGroundAngle) == 0x00082C, "Member 'USQAnimInstanceSoldier1P::FP_ProneMoveIkWeaponHandRootRotFromGroundAngle' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, FP_ProneMoveIkWeaponHandRootRotFromActorPitch) == 0x000838, "Member 'USQAnimInstanceSoldier1P::FP_ProneMoveIkWeaponHandRootRotFromActorPitch' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bFP_ProneMoveWeaponAligningConditions) == 0x000844, "Member 'USQAnimInstanceSoldier1P::bFP_ProneMoveWeaponAligningConditions' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, FP_ProneMoveIkWeaponRightClavicleRot) == 0x000848, "Member 'USQAnimInstanceSoldier1P::FP_ProneMoveIkWeaponRightClavicleRot' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, FP_ProneMoveBobPlayRate) == 0x000854, "Member 'USQAnimInstanceSoldier1P::FP_ProneMoveBobPlayRate' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bFP_SpeedHigherThanZeroAndNotIsProneTransition) == 0x000858, "Member 'USQAnimInstanceSoldier1P::bFP_SpeedHigherThanZeroAndNotIsProneTransition' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bFP_SpeedHigherThanZero) == 0x000859, "Member 'USQAnimInstanceSoldier1P::bFP_SpeedHigherThanZero' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bFP_HvdXorClAndClOrHvdXorVaAndVaOrBipod) == 0x00085A, "Member 'USQAnimInstanceSoldier1P::bFP_HvdXorClAndClOrHvdXorVaAndVaOrBipod' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bFP_ClimbAnimNotEqual1) == 0x00085B, "Member 'USQAnimInstanceSoldier1P::bFP_ClimbAnimNotEqual1' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bFP_ClimbAndClimbAnim1) == 0x00085C, "Member 'USQAnimInstanceSoldier1P::bFP_ClimbAndClimbAnim1' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, FP_ClimbAndClimbAnim1_AimRotator) == 0x000860, "Member 'USQAnimInstanceSoldier1P::FP_ClimbAndClimbAnim1_AimRotator' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bFP_1pLeftHandIkConditions) == 0x00086C, "Member 'USQAnimInstanceSoldier1P::bFP_1pLeftHandIkConditions' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, FP_1pLeftHandIKConditionsAlpha) == 0x000870, "Member 'USQAnimInstanceSoldier1P::FP_1pLeftHandIKConditionsAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, FP_IsUsingItemAlpha) == 0x000874, "Member 'USQAnimInstanceSoldier1P::FP_IsUsingItemAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, FP_IsProneAlpha) == 0x000878, "Member 'USQAnimInstanceSoldier1P::FP_IsProneAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bFP_T_ProneStatesProneMoveToOutProneMove) == 0x00087C, "Member 'USQAnimInstanceSoldier1P::bFP_T_ProneStatesProneMoveToOutProneMove' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bFP_T_Jump1pJumpStartToJumpEnd) == 0x00087D, "Member 'USQAnimInstanceSoldier1P::bFP_T_Jump1pJumpStartToJumpEnd' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bFP_T_ToADS_Hipfire) == 0x00087E, "Member 'USQAnimInstanceSoldier1P::bFP_T_ToADS_Hipfire' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bCachedIsPullingTriggerAndMagazineHasAmmo) == 0x00087F, "Member 'USQAnimInstanceSoldier1P::bCachedIsPullingTriggerAndMagazineHasAmmo' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, ToADS_Hipfire_RemainingTIme) == 0x000880, "Member 'USQAnimInstanceSoldier1P::ToADS_Hipfire_RemainingTIme' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, Steady1pHipFireDuration) == 0x000884, "Member 'USQAnimInstanceSoldier1P::Steady1pHipFireDuration' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bFP_T_StandToADS_Grenade) == 0x000888, "Member 'USQAnimInstanceSoldier1P::bFP_T_StandToADS_Grenade' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bFP_T_WeaponBobbing1P_ADSToStand) == 0x000889, "Member 'USQAnimInstanceSoldier1P::bFP_T_WeaponBobbing1P_ADSToStand' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bFP_T_WeaponBobbing1P_ADSToProne) == 0x00088A, "Member 'USQAnimInstanceSoldier1P::bFP_T_WeaponBobbing1P_ADSToProne' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bFP_T_WeaponBobbing1P_ProneToADS) == 0x00088B, "Member 'USQAnimInstanceSoldier1P::bFP_T_WeaponBobbing1P_ProneToADS' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, FP_CustomIsCrouchedAlpha) == 0x00088C, "Member 'USQAnimInstanceSoldier1P::FP_CustomIsCrouchedAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, FP_HasAdjustableSightAlphaTimesIsAdsAlpha) == 0x000890, "Member 'USQAnimInstanceSoldier1P::FP_HasAdjustableSightAlphaTimesIsAdsAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bProneMoveBobbing) == 0x000894, "Member 'USQAnimInstanceSoldier1P::bProneMoveBobbing' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bLeftHandIkOut1P) == 0x000895, "Member 'USQAnimInstanceSoldier1P::bLeftHandIkOut1P' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bSwitchedProne) == 0x000896, "Member 'USQAnimInstanceSoldier1P::bSwitchedProne' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bLastProneStance) == 0x000897, "Member 'USQAnimInstanceSoldier1P::bLastProneStance' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, MoveDeviationFactor) == 0x000898, "Member 'USQAnimInstanceSoldier1P::MoveDeviationFactor' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, ShotDeviationFactor) == 0x00089C, "Member 'USQAnimInstanceSoldier1P::ShotDeviationFactor' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, FinalDeviation) == 0x0008A0, "Member 'USQAnimInstanceSoldier1P::FinalDeviation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, DeviationVisuFbZY) == 0x0008B0, "Member 'USQAnimInstanceSoldier1P::DeviationVisuFbZY' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, AddRotGoingShot) == 0x0008B8, "Member 'USQAnimInstanceSoldier1P::AddRotGoingShot' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, RecoilReleaseInterpSpeed) == 0x0008C4, "Member 'USQAnimInstanceSoldier1P::RecoilReleaseInterpSpeed' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, RecoilWeaponLimit) == 0x0008C8, "Member 'USQAnimInstanceSoldier1P::RecoilWeaponLimit' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, MoveRecoilFactor) == 0x0008CC, "Member 'USQAnimInstanceSoldier1P::MoveRecoilFactor' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, RecoilCanRelease) == 0x0008D0, "Member 'USQAnimInstanceSoldier1P::RecoilCanRelease' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, FinalRecoilSigma) == 0x0008D4, "Member 'USQAnimInstanceSoldier1P::FinalRecoilSigma' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, FinalRecoilMean) == 0x0008E0, "Member 'USQAnimInstanceSoldier1P::FinalRecoilMean' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, StrafeSpringFactor) == 0x0008EC, "Member 'USQAnimInstanceSoldier1P::StrafeSpringFactor' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, LastKnownRot1) == 0x0008F0, "Member 'USQAnimInstanceSoldier1P::LastKnownRot1' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, CtrlRotVectorDeltaSpring) == 0x0008FC, "Member 'USQAnimInstanceSoldier1P::CtrlRotVectorDeltaSpring' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, LastKnownRot2) == 0x000908, "Member 'USQAnimInstanceSoldier1P::LastKnownRot2' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, CtrlRotDeltaSpringLerpAlpha) == 0x000914, "Member 'USQAnimInstanceSoldier1P::CtrlRotDeltaSpringLerpAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, WeaponSpringTurnSpeedToFullIntensity) == 0x000918, "Member 'USQAnimInstanceSoldier1P::WeaponSpringTurnSpeedToFullIntensity' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, StrafeSpringRotator) == 0x00091C, "Member 'USQAnimInstanceSoldier1P::StrafeSpringRotator' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, StrafeSpringVector) == 0x000928, "Member 'USQAnimInstanceSoldier1P::StrafeSpringVector' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, AdsStrafeSpringRotator) == 0x000934, "Member 'USQAnimInstanceSoldier1P::AdsStrafeSpringRotator' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, CustomNotIsAds) == 0x000940, "Member 'USQAnimInstanceSoldier1P::CustomNotIsAds' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, FireShake) == 0x000948, "Member 'USQAnimInstanceSoldier1P::FireShake' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, WeaponSpringSide) == 0x000950, "Member 'USQAnimInstanceSoldier1P::WeaponSpringSide' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, WeaponSpringStiffness) == 0x000954, "Member 'USQAnimInstanceSoldier1P::WeaponSpringStiffness' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, WeaponSpringCriticalDampingFactor) == 0x000958, "Member 'USQAnimInstanceSoldier1P::WeaponSpringCriticalDampingFactor' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, WeaponSpringMass) == 0x00095C, "Member 'USQAnimInstanceSoldier1P::WeaponSpringMass' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, WeaponSpringFactor) == 0x000960, "Member 'USQAnimInstanceSoldier1P::WeaponSpringFactor' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, WeaponMeshSpringLocDelayFactor) == 0x000964, "Member 'USQAnimInstanceSoldier1P::WeaponMeshSpringLocDelayFactor' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, WeaponSpringClamp) == 0x000968, "Member 'USQAnimInstanceSoldier1P::WeaponSpringClamp' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, WeaponMeshSpringRotDelayFactor) == 0x00096C, "Member 'USQAnimInstanceSoldier1P::WeaponMeshSpringRotDelayFactor' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, AddMoveDeviation) == 0x000970, "Member 'USQAnimInstanceSoldier1P::AddMoveDeviation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, MoveDeviationFactorRelease) == 0x000974, "Member 'USQAnimInstanceSoldier1P::MoveDeviationFactorRelease' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, MaxMoveDeviationFactor) == 0x000978, "Member 'USQAnimInstanceSoldier1P::MaxMoveDeviationFactor' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, MinMoveDeviationFactor) == 0x00097C, "Member 'USQAnimInstanceSoldier1P::MinMoveDeviationFactor' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, FullStaminaDeviationFactor) == 0x000980, "Member 'USQAnimInstanceSoldier1P::FullStaminaDeviationFactor' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, LowStaminaDeviationFactor) == 0x000984, "Member 'USQAnimInstanceSoldier1P::LowStaminaDeviationFactor' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, AddShotDeviationFactor) == 0x000988, "Member 'USQAnimInstanceSoldier1P::AddShotDeviationFactor' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, AddShotDeviationFactorAds) == 0x00098C, "Member 'USQAnimInstanceSoldier1P::AddShotDeviationFactorAds' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, ShotDeviationFactorRelease) == 0x000990, "Member 'USQAnimInstanceSoldier1P::ShotDeviationFactorRelease' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, MinShotDeviationFactor) == 0x000994, "Member 'USQAnimInstanceSoldier1P::MinShotDeviationFactor' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, MaxShotDeviationFactor) == 0x000998, "Member 'USQAnimInstanceSoldier1P::MaxShotDeviationFactor' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, DeviationVisuFbInterpSpeed_YZ) == 0x00099C, "Member 'USQAnimInstanceSoldier1P::DeviationVisuFbInterpSpeed_YZ' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, DeviationVisuFbMax) == 0x0009A0, "Member 'USQAnimInstanceSoldier1P::DeviationVisuFbMax' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, DeviationVisuFbInterpSpeed_Final) == 0x0009A4, "Member 'USQAnimInstanceSoldier1P::DeviationVisuFbInterpSpeed_Final' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, MinBipodAdsDeviation) == 0x0009A8, "Member 'USQAnimInstanceSoldier1P::MinBipodAdsDeviation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, MinBipodDeviation) == 0x0009AC, "Member 'USQAnimInstanceSoldier1P::MinBipodDeviation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, MinProneAdsDeviation) == 0x0009B0, "Member 'USQAnimInstanceSoldier1P::MinProneAdsDeviation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, MinProneDeviation) == 0x0009B4, "Member 'USQAnimInstanceSoldier1P::MinProneDeviation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, MinCrouchAdsDeviation) == 0x0009B8, "Member 'USQAnimInstanceSoldier1P::MinCrouchAdsDeviation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, MinCrouchDeviation) == 0x0009BC, "Member 'USQAnimInstanceSoldier1P::MinCrouchDeviation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, MinStandAdsDeviation) == 0x0009C0, "Member 'USQAnimInstanceSoldier1P::MinStandAdsDeviation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, MinStandDeviation) == 0x0009C4, "Member 'USQAnimInstanceSoldier1P::MinStandDeviation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, MinProneTransitionDeviation) == 0x0009C8, "Member 'USQAnimInstanceSoldier1P::MinProneTransitionDeviation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, MaxMoveRecoilFactor) == 0x0009CC, "Member 'USQAnimInstanceSoldier1P::MaxMoveRecoilFactor' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, AddMoveRecoil) == 0x0009D0, "Member 'USQAnimInstanceSoldier1P::AddMoveRecoil' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, MinMoveRecoilFactor) == 0x0009D4, "Member 'USQAnimInstanceSoldier1P::MinMoveRecoilFactor' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, MoveRecoilFactorRelease) == 0x0009D8, "Member 'USQAnimInstanceSoldier1P::MoveRecoilFactorRelease' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, FullStaminaRecoilFactor) == 0x0009DC, "Member 'USQAnimInstanceSoldier1P::FullStaminaRecoilFactor' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, LowStaminaRecoilFactor) == 0x0009E0, "Member 'USQAnimInstanceSoldier1P::LowStaminaRecoilFactor' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, RecoilCameraOffsetFactor) == 0x0009E4, "Member 'USQAnimInstanceSoldier1P::RecoilCameraOffsetFactor' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, RecoilLofCameraOffsetLimit) == 0x0009E8, "Member 'USQAnimInstanceSoldier1P::RecoilLofCameraOffsetLimit' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, RecoilLofAttackInterpSpeed) == 0x0009EC, "Member 'USQAnimInstanceSoldier1P::RecoilLofAttackInterpSpeed' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, RecoilCanReleaseInterpSpeed) == 0x0009F0, "Member 'USQAnimInstanceSoldier1P::RecoilCanReleaseInterpSpeed' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, RecoilCameraOffsetInterpSpeed) == 0x0009F4, "Member 'USQAnimInstanceSoldier1P::RecoilCameraOffsetInterpSpeed' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, RecoilLofReleaseInterpSpeed) == 0x0009F8, "Member 'USQAnimInstanceSoldier1P::RecoilLofReleaseInterpSpeed' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, WeapRecoilRelLocFactor) == 0x0009FC, "Member 'USQAnimInstanceSoldier1P::WeapRecoilRelLocFactor' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, RecoilCameraShotInterpSpeed) == 0x000A00, "Member 'USQAnimInstanceSoldier1P::RecoilCameraShotInterpSpeed' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, RecoilAdsCameraShotInterpSpeed) == 0x000A04, "Member 'USQAnimInstanceSoldier1P::RecoilAdsCameraShotInterpSpeed' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, ProneAdsRecoilMean) == 0x000A08, "Member 'USQAnimInstanceSoldier1P::ProneAdsRecoilMean' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, ProneAdsRecoilSigma) == 0x000A14, "Member 'USQAnimInstanceSoldier1P::ProneAdsRecoilSigma' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, ProneRecoilMean) == 0x000A20, "Member 'USQAnimInstanceSoldier1P::ProneRecoilMean' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, ProneRecoilSigma) == 0x000A2C, "Member 'USQAnimInstanceSoldier1P::ProneRecoilSigma' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, CrouchAdsRecoilMean) == 0x000A38, "Member 'USQAnimInstanceSoldier1P::CrouchAdsRecoilMean' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, CrouchAdsRecoilSigma) == 0x000A44, "Member 'USQAnimInstanceSoldier1P::CrouchAdsRecoilSigma' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, CrouchRecoilMean) == 0x000A50, "Member 'USQAnimInstanceSoldier1P::CrouchRecoilMean' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, CrouchRecoilSigma) == 0x000A5C, "Member 'USQAnimInstanceSoldier1P::CrouchRecoilSigma' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, StandAdsRecoilMean) == 0x000A68, "Member 'USQAnimInstanceSoldier1P::StandAdsRecoilMean' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, StandAdsRecoilSigma) == 0x000A74, "Member 'USQAnimInstanceSoldier1P::StandAdsRecoilSigma' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, StandRecoilMean) == 0x000A80, "Member 'USQAnimInstanceSoldier1P::StandRecoilMean' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, StandRecoilSigma) == 0x000A8C, "Member 'USQAnimInstanceSoldier1P::StandRecoilSigma' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, ProneTransitionRecoilMean) == 0x000A98, "Member 'USQAnimInstanceSoldier1P::ProneTransitionRecoilMean' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, ProneTransitionRecoilSigma) == 0x000AA4, "Member 'USQAnimInstanceSoldier1P::ProneTransitionRecoilSigma' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, BipodAdsRecoilMean) == 0x000AB0, "Member 'USQAnimInstanceSoldier1P::BipodAdsRecoilMean' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, BipodAdsRecoilSigma) == 0x000ABC, "Member 'USQAnimInstanceSoldier1P::BipodAdsRecoilSigma' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, BipodRecoilMean) == 0x000AC8, "Member 'USQAnimInstanceSoldier1P::BipodRecoilMean' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, BipodRecoilSigma) == 0x000AD4, "Member 'USQAnimInstanceSoldier1P::BipodRecoilSigma' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, SwayData) == 0x000AE0, "Member 'USQAnimInstanceSoldier1P::SwayData' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, SwayAlignmentData) == 0x000B74, "Member 'USQAnimInstanceSoldier1P::SwayAlignmentData' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bSplitRandomization) == 0x000C08, "Member 'USQAnimInstanceSoldier1P::bSplitRandomization' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, MoveSwayFactorMultiplier) == 0x000C0C, "Member 'USQAnimInstanceSoldier1P::MoveSwayFactorMultiplier' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, SuppressSwayFactorMultiplier) == 0x000C10, "Member 'USQAnimInstanceSoldier1P::SuppressSwayFactorMultiplier' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, WeaponPunchSwayCombinedRotator) == 0x000C14, "Member 'USQAnimInstanceSoldier1P::WeaponPunchSwayCombinedRotator' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, WeaponPunchSwayClearSightsCombinedRotator) == 0x000C20, "Member 'USQAnimInstanceSoldier1P::WeaponPunchSwayClearSightsCombinedRotator' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, ClearSightWeaponPunchSwayLocationOffset) == 0x000C2C, "Member 'USQAnimInstanceSoldier1P::ClearSightWeaponPunchSwayLocationOffset' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, WeaponPunchSwayAlignmentCombinedRotator) == 0x000C38, "Member 'USQAnimInstanceSoldier1P::WeaponPunchSwayAlignmentCombinedRotator' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, WeaponPunch) == 0x000C44, "Member 'USQAnimInstanceSoldier1P::WeaponPunch' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, WeaponPunchAlignment) == 0x000C50, "Member 'USQAnimInstanceSoldier1P::WeaponPunchAlignment' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, WeaponPunchLocation) == 0x000C5C, "Member 'USQAnimInstanceSoldier1P::WeaponPunchLocation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, ClearSightsRotation) == 0x000C68, "Member 'USQAnimInstanceSoldier1P::ClearSightsRotation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, ClearSightsLocation) == 0x000C74, "Member 'USQAnimInstanceSoldier1P::ClearSightsLocation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, CustomSpeed) == 0x000C80, "Member 'USQAnimInstanceSoldier1P::CustomSpeed' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, StandTime) == 0x000C84, "Member 'USQAnimInstanceSoldier1P::StandTime' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, CrouchTime) == 0x000C88, "Member 'USQAnimInstanceSoldier1P::CrouchTime' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, ProneTime) == 0x000C8C, "Member 'USQAnimInstanceSoldier1P::ProneTime' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, BipodTime) == 0x000C90, "Member 'USQAnimInstanceSoldier1P::BipodTime' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, UnclampedTotalSway) == 0x000C94, "Member 'USQAnimInstanceSoldier1P::UnclampedTotalSway' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, UnclampedTotalSwayAlignment) == 0x000C98, "Member 'USQAnimInstanceSoldier1P::UnclampedTotalSwayAlignment' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, LastSuppressionInfoClass) == 0x000CA0, "Member 'USQAnimInstanceSoldier1P::LastSuppressionInfoClass' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, SmoothFinalLofSuppressRotation) == 0x000CE4, "Member 'USQAnimInstanceSoldier1P::SmoothFinalLofSuppressRotation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, LofSuppressRotationAlpha) == 0x000CF0, "Member 'USQAnimInstanceSoldier1P::LofSuppressRotationAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bWasCrouchedBeforeProne) == 0x000D04, "Member 'USQAnimInstanceSoldier1P::bWasCrouchedBeforeProne' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, CustomCurrentFloorNormal1) == 0x000D08, "Member 'USQAnimInstanceSoldier1P::CustomCurrentFloorNormal1' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, FP_SprintBlendAlpha) == 0x000D14, "Member 'USQAnimInstanceSoldier1P::FP_SprintBlendAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, bIsSprint1pLoopSection) == 0x000D18, "Member 'USQAnimInstanceSoldier1P::bIsSprint1pLoopSection' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, SprintStaticPose) == 0x000D20, "Member 'USQAnimInstanceSoldier1P::SprintStaticPose' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, FreeAimOffset) == 0x000D28, "Member 'USQAnimInstanceSoldier1P::FreeAimOffset' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, ADSWeaponSpringMultiplierRotation) == 0x000D34, "Member 'USQAnimInstanceSoldier1P::ADSWeaponSpringMultiplierRotation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, ADSWeaponSpringMultiplierTranslation) == 0x000D40, "Member 'USQAnimInstanceSoldier1P::ADSWeaponSpringMultiplierTranslation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, ScaleWeaponSpringADSTransform) == 0x000D4C, "Member 'USQAnimInstanceSoldier1P::ScaleWeaponSpringADSTransform' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, ScaleWeaponSpringADSRotation) == 0x000D58, "Member 'USQAnimInstanceSoldier1P::ScaleWeaponSpringADSRotation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, RecoilAlignmentNewGripAlignment) == 0x000D64, "Member 'USQAnimInstanceSoldier1P::RecoilAlignmentNewGripAlignment' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, RecoilAlignmentNewShoulderAlignment) == 0x000D70, "Member 'USQAnimInstanceSoldier1P::RecoilAlignmentNewShoulderAlignment' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, BobbingMove1pMontage) == 0x000D98, "Member 'USQAnimInstanceSoldier1P::BobbingMove1pMontage' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier1P, BobbingSprint1pMontage) == 0x000DA0, "Member 'USQAnimInstanceSoldier1P::BobbingSprint1pMontage' has a wrong offset!");

// Class Squad.SQAnimInstanceSoldier3P
// 0x08B0 (0x0D20 - 0x0470)
class USQAnimInstanceSoldier3P : public USQAnimInstanceSoldier
{
public:
	bool                                          bVaulting;                                         // 0x0468(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClimbing;                                         // 0x0469(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAssetPlayerTimeFromEnd__LTEPtOne__Jump_3P__JumpEnd__rifle_stand_jumpendOrIsProne; // 0x046A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAssetPlayerTimeFromEnd__LTEPtOne__Jump_3P__JumpStart__rifle_stand_jumpstart; // 0x046B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAssetPlayerTime__GTEPtOne__Jump_3P__JumpStart__rifle_stand_jumpstart; // 0x046C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EAA[0x7B];                                     // 0x046D(0x007B)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bStateWeight__GTEOne__Stand3P__Jog;                // 0x04E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EAB[0x3];                                      // 0x04E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StateWeight__Stand3P__Jog;                         // 0x04EC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStateWeight__GTEOne__Stand3P__Sprint;             // 0x04F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EAC[0x3];                                      // 0x04F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StateWeight__Stand3P__Sprint;                      // 0x04F4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StateWeight__Stand3P__SprintStop;                  // 0x04F8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelevantAnimTimeRemaining__LTEOne__Stand3P__SprintStop; // 0x04FC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EAD[0x77];                                     // 0x04FD(0x0077)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bStateWeight__GTEOne__Stand_NeutralStates__Neutral; // 0x0574(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStateWeight__GTEOne__Stand_NeutralStates__TurnLeft_90; // 0x0575(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStateWeight__GTEOne__Stand_NeutralStates__TurnRight_90; // 0x0576(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelevantAnimTimeRemaining__LTEZero__Stand_NeutralStates__TurnLeft_90; // 0x0577(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelevantAnimTimeRemaining__LTEZero__Stand_NeutralStates__TurnRight_90; // 0x0578(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EAE[0x93];                                     // 0x0579(0x0093)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StateWeight__Crouch3P__Sprint;                     // 0x060C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StateWeight__Crouch3P__Walk;                       // 0x0610(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EAF[0x3A];                                     // 0x0614(0x003A)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bStateWeight__GTEOne__Crouch_NeutralStates__Neutral; // 0x064E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStateWeight__GTEOne__Crouch_NeutralStates__TurnLeft_90; // 0x064F(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStateWeight__GTEOne__Crouch_NeutralStates__TurnRight_90; // 0x0650(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EB0[0x77];                                     // 0x0651(0x0077)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StateWeight__Prone3P__ProneMove;                   // 0x06C8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EB1[0x1D];                                     // 0x06CC(0x001D)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bStateWeight__GTEOne__Prone_NeutralStates__Neutral; // 0x06E9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStateWeight__GTEOne__Prone_NeutralStates__TurnLeft_45; // 0x06EA(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStateWeight__GTEOne__Prone_NeutralStates__TurnRight_45; // 0x06EB(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EB2[0x57];                                     // 0x06EC(0x0057)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bStateWeight__GTEOne__SoldierMovements__Stand;     // 0x0743(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStateWeight__GTEOne__SoldierMovements__Crouch;    // 0x0744(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStateWeight__GTEOne__SoldierMovements__Stand2Crouch; // 0x0745(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EB3[0x2];                                      // 0x0746(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StateWeight__SoldierMovements__Stand2Prone;        // 0x0748(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StateWeight__SoldierMovements__Sprint2Prone;       // 0x074C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StateWeight__SoldierMovements__Prone2Stand;        // 0x0750(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StateWeight__SoldierMovements__Crouch2Prone;       // 0x0754(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StateWeight__SoldierMovements__Prone2Crouch;       // 0x0758(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAssetPlayerTimeFromEnd__LTEPtFour__SoldierMovements__Stand2Prone__rifle_stand2prone; // 0x075C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAssetPlayerTimeFromEnd__LTEPtTwo__SoldierMovements__Sprint2Prone__rifle_sprint2prone; // 0x075D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAssetPlayerTimeFromEnd__LTEPtFour__SoldierMovements__Prone2Stand__rifle_prone2stand; // 0x075E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAssetPlayerTimeFromEnd__LTEPtFour__SoldierMovements__Crouch2Prone__rifle_crouch2prone; // 0x075F(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAssetPlayerTimeFromEnd__LTEPtFour__SoldierMovements__Prone2Crouch__rifle_prone2crouch; // 0x0760(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAssetPlayerTimeFromEnd__LTEPtOne__SoldierMovements__Stand2Crouch__Stand2Crouch; // 0x0761(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAssetPlayerTimeFromEnd__LTEPtOne__SoldierMovements__Crouch2Stand__Crouch2Stand; // 0x0762(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EB4[0x1E2];                                    // 0x0763(0x01E2)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsSprinting;                                      // 0x0945(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EB5[0x2];                                      // 0x0946(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomNotIsFallingAlpha;                           // 0x0948(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EB6[0x4];                                      // 0x094C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace1D*                          BS1D_3pStandSprintType;                            // 0x0950(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          SprintStop3p;                                      // 0x0958(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBlendSpace1D*                          BS1D_3pCrouchSprintType;                           // 0x0960(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBlendSpace*                            BS_3pStandJogType;                                 // 0x0968(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBlendSpace*                            BS_3pStandWalkType;                                // 0x0970(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBlendSpace*                            BS_3pCrouchWalkType;                               // 0x0978(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBlendSpace1D*                          BS1D_3pProneCrawlType;                             // 0x0980(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          StandStopMove;                                     // 0x0988(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          CrouchStopMove;                                    // 0x0990(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          StandLeanLeftShuffle;                              // 0x0998(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          StandLeanRightShuffle;                             // 0x09A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          CrouchLeanLeftShuffle;                             // 0x09A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          CrouchLeanRightShuffle;                            // 0x09B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBlendSpace1D*                          AO1D_StandPitch;                                   // 0x09B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBlendSpace1D*                          AO1D_CrouchPitch;                                  // 0x09C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBlendSpace1D*                          AO1D_PronePitch;                                   // 0x09C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBlendSpace*                            AO_BipodStandCrouchPitch;                          // 0x09D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          AO1D_StandYawSF;                                   // 0x09D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          AO1D_CrouchYawSF;                                  // 0x09E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          AO1D_ProneYawSF;                                   // 0x09E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          StandTurnRight;                                    // 0x09F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          StandTurnLeft;                                     // 0x09F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          CrouchTurnLeft;                                    // 0x0A00(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          CrouchTurnRight;                                   // 0x0A08(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          ProneTurnRight;                                    // 0x0A10(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          ProneTurnLeft;                                     // 0x0A18(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          SprintToProne3p;                                   // 0x0A20(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          StandToProne3p;                                    // 0x0A28(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          ProneToStand3p;                                    // 0x0A30(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          CrouchToProne3p;                                   // 0x0A38(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          ProneToCrouch3p;                                   // 0x0A40(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                FpvLowerRootBoneOffset;                            // 0x0A48(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CustomSpeedMin40;                                  // 0x0A54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ProneStopMoveAlpha;                                // 0x0A58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CrouchStopMoveAlpha;                               // 0x0A5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_HighestClimbAnim;                              // 0x0A60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_Jump_3PJumpStartToJumpEnd;                   // 0x0A61(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_Stand3PSprintStopToJog;                      // 0x0A62(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_Stand3PSprintToSprintStop;                   // 0x0A63(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_Stand3PJogToSprint;                          // 0x0A64(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_Stand_NeutralStatesTurnRight_90ToTurnLeft_90; // 0x0A65(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_Stand_NeutralStatesTurnLeft_90ToTurnRight_90; // 0x0A66(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_Stand_NeutralStatesNeutralToTurnLeft_90;     // 0x0A67(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_Stand_NeutralStatesNeutralToTurnRight_90;    // 0x0A68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_Crouch_NeutralStatesTurnRight_90ToNeutral;   // 0x0A69(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_Crouch_NeutralStatesTurnRight_90ToTurnLeft_90; // 0x0A6A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_Crouch_NeutralStatesTurnLeft_90ToNeutral;    // 0x0A6B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_Crouch_NeutralStatesTurnLeft_90ToTurnRight_90; // 0x0A6C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_Crouch_NeutralStatesNeutralToTurnLeft_90;    // 0x0A6D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_Crouch_NeutralStatesNeutralToTurnRight_90;   // 0x0A6E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_Prone_NeutralStatesTurnLeft_45ToNeutral;     // 0x0A6F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_Prone_NeutralStatesTurnLeft_45ToTurnRight_45; // 0x0A70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_Prone_NeutralStatesTurnRight_45ToNeutral;    // 0x0A71(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_Prone_NeutralStatesTurnRight_45ToTurnLeft_45; // 0x0A72(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_Prone_NeutralStatesNeutralToTurnLeft_45;     // 0x0A73(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_Prone_NeutralStatesNeutralToTurnRight_45;    // 0x0A74(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_SoldierMovementsCrouch2StandToStand;         // 0x0A75(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_SoldierMovementsStand2CrouchToCrouch2Prone;  // 0x0A76(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_SoldierMovementsStand2CrouchToCrouch;        // 0x0A77(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_SoldierMovementsCrouchToCrouch2Prone;        // 0x0A78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_SoldierMovements_StandToCrouch;              // 0x0A79(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_SoldierMovementsStandToStand2Prone;          // 0x0A7A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_SoldierMovementsStandToStand2Crouch;         // 0x0A7B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_T_SoldierMovementsStandToSprint2Prone;         // 0x0A7C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EB7[0x3];                                      // 0x0A7D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               FP_FloorAlignedRotationRightFoot;                  // 0x0A80(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               FP_FloorAlignedRotationLeftFoot;                   // 0x0A8C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               FP_FloorAlignedRotationFeetRoot;                   // 0x0A98(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               FP_FloorAlignedRotationFeetRootReverse;            // 0x0AA4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                                FP_IKFeetRootTranslation;                          // 0x0AB0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_IsNotFirstPersonVisibilityAlpha;                // 0x0ABC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_StandIdleAlpha;                                 // 0x0AC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_CrouchProneIdleAlpha;                           // 0x0AC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_IsStanding;                                    // 0x0AC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_IsStandingStill;                               // 0x0AC9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_CanCrouchToStandingStill;                      // 0x0ACA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_CanCrouchToStandMoving;                        // 0x0ACB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_IsCrouchedInPlace;                             // 0x0ACC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EB8[0x3];                                      // 0x0ACD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FP_AimOffsetProneYawFrameTime;                     // 0x0AD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_AimOffsetYawNegative;                           // 0x0AD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_AimOffsetProneTurnRightYawFrameTime;            // 0x0AD8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_AimOffsetTurnRightYawNegative;                  // 0x0ADC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_AimOffsetProneTurnLeftYawFrameTime;             // 0x0AE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_AimOffsetTurnLeftYawNegative;                   // 0x0AE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_ProneWalkPlayRate;                              // 0x0AE8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_IsMoving;                                      // 0x0AEC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_IsNotMoving;                                   // 0x0AED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EB9[0x2];                                      // 0x0AEE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               FP_FloorAlignedRotationBody;                       // 0x0AF0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               FP_FloorAlignedRotationBodyReverse;                // 0x0AFC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         FP_CustomSpeedMin40NormalizedToRange;              // 0x0B08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_IsProneAndNotDeployBipod;                      // 0x0B0C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_IsClimbingOrVaulting;                          // 0x0B0D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EBA[0x2];                                      // 0x0B0E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               FP_FreeLook3PHeadRotation;                         // 0x0B10(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         FP_BipodCrouchStanceAlpha;                         // 0x0B1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_BipodStandCrouchAimPitchAlpha;                  // 0x0B20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EBB[0x4];                                      // 0x0B24(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FP_BipodProneStanceAlpha;                          // 0x0B28(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_BipodAimOffsetAlpha;                            // 0x0B2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_BipodWeaponPosCoveredPoseAlphaDependingOnSkelMeshOffset; // 0x0B30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_BipodCoveredPoseBlendAlpha;                     // 0x0B34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                FP_BipodHighPitchCoveredPoseWeaponPositionOffset;  // 0x0B38(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                FP_BipodDynamicBodyOffset;                         // 0x0B44(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_AimOffsetCrouchYawFrameTime;                    // 0x0B50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_AimOffsetTurnLeftYawPlayRate;                   // 0x0B54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_AimOffsetTurnLeftProneYawPlayRate;              // 0x0B58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_AimOffsetTurnLeftYawFrameTime;                  // 0x0B5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_AimOffsetTurnRightYawPlayRate;                  // 0x0B60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_AimOffsetTurnRightProneYawPlayRate;             // 0x0B64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_AimOffsetTurnRightYawFrameTime;                 // 0x0B68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_StandStopMoveAlpha;                             // 0x0B6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_AimYawFrameTime2;                               // 0x0B70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_CrouchWalkPlayRate;                             // 0x0B74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_AimYawJogFrameTime;                             // 0x0B78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_AimPitchJogAlpha;                               // 0x0B7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_JogPlayRate;                                    // 0x0B80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_SprintStopAlpha;                                // 0x0B84(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_Stand3PNeutralToJogRule;                       // 0x0B88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_Stand3PJogToNeutralRule;                       // 0x0B89(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_Stand3PSprintToNeutralRule;                    // 0x0B8A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EBC[0x1];                                      // 0x0B8B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FP_AimOffsetStandYawFrameTime;                     // 0x0B8C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_JumpEndAlpha;                                   // 0x0B90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_IsFallingAndNotJumping;                        // 0x0B94(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EBD[0x3];                                      // 0x0B95(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FP_Final3PLeftHandIKOutAlpha;                      // 0x0B98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_AOStandToConduit;                              // 0x0B9C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_AOStandSprintJog;                              // 0x0B9D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_AOCrouchToConduit;                             // 0x0B9E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_AOProneToConduit;                              // 0x0B9F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_AOConduitToCrouch;                             // 0x0BA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EBE[0x3];                                      // 0x0BA1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FP_BS_StandSprintSpeed;                            // 0x0BA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               FP_SprintHeadDirection;                            // 0x0BA8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         FP_SprintRootDirection;                            // 0x0BB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_BS_CrouchSprintSpeed;                           // 0x0BB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFP_LeanHeadWhenADSAndADS;                         // 0x0BBC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFinal3pLeftHandIkOut;                             // 0x0BBD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EBF[0x2];                                      // 0x0BBE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomWeapActionsAndIsAds;                         // 0x0BC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_WalkPlayRate;                                   // 0x0BC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_IsNotMovingAlpha;                               // 0x0BC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_LeanYawOffsetFrameTime;                         // 0x0BCC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FP_AlphaAbsIkFeetRootPitch;                        // 0x0BD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               RawActorRotation;                                  // 0x0BD4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               SmoothedControlRotation;                           // 0x0BE0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bTurnNeutAoDisabled;                               // 0x0BEC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EC0[0x3];                                      // 0x0BED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CachedActorYaw;                                    // 0x0BF0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bLeftHandIkOut;                                    // 0x0BFC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bJumpEndBobbing3P;                                 // 0x0BFD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EC1[0x2];                                      // 0x0BFE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomIsSprinting;                                 // 0x0C00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CustomIsAdsOrBipod;                                // 0x0C04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                SmoothVelocity;                                    // 0x0C08(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AccelRateClamp;                                    // 0x0C14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               SmoothWorldDirection;                              // 0x0C18(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               AimRotation_3P;                                    // 0x0C24(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               AimRotation2_3P;                                   // 0x0C30(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bTurnLeftAnim;                                     // 0x0C3C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFullMoveAnim;                                     // 0x0C3D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTurnRightAnim;                                    // 0x0C3E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTurnLeft;                                         // 0x0C3F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTurnRight;                                        // 0x0C40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTurnLeftProne;                                    // 0x0C41(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTurnRightProne;                                   // 0x0C42(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EC2[0x1];                                      // 0x0C43(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               YawOffset;                                         // 0x0C44(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               YawOffsetDuringTurnLeft;                           // 0x0C50(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               YawOffsetDuringTurnRight;                          // 0x0C5C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bFullSprintAnim;                                   // 0x0C68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EC3[0x3];                                      // 0x0C69(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastSpeed;                                         // 0x0C6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SprintStopCachedSpeed;                             // 0x0C70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCachedIsProne;                                    // 0x0C74(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EC4[0x3];                                      // 0x0C75(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StandStopMoveAlpha;                                // 0x0C78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCachedIsCrouched;                                 // 0x0C7C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCachedIsStand;                                    // 0x0C7D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bProneTransAnim;                                   // 0x0C7E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EC5[0x1];                                      // 0x0C7F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PmCachedCapsuleWorldLoc1;                          // 0x0C80(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                EndSprintToProneCapsuleLoc;                        // 0x0C8C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Alpha;                                             // 0x0C98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastKnownHeight;                                   // 0x0C9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeightVelocity;                                    // 0x0CA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastKnownHeightVelocity;                           // 0x0CA4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BipodAimUpLimit3P;                                 // 0x0CA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BipodAimDownLimit3P;                               // 0x0CAC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CustomNotVaultingAlpha;                            // 0x0CB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CustomNotClimbingAlpha;                            // 0x0CB4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                CurrentFloorNormalBody;                            // 0x0CB8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                CurrentFloorNormalFeet;                            // 0x0CC4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               IkFeetRootRelRot;                                  // 0x0CD0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                                LeftFootFloorNormal;                               // 0x0CDC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                RightFootFloorNormal;                              // 0x0CE8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CustomIsLoweredAndNotProne;                        // 0x0CF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               MeshRotationOffset;                                // 0x0CF8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               CachedActorRotationNoLean;                         // 0x0D04(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         CachedLeanYawOffset;                               // 0x0D10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EC6[0x4];                                      // 0x0D14(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bLeanHeadWhenAds;                                  // 0x0D18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC7[0x7];                                      // 0x0D19(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Update3pCurrentFloor();
	void UpdateAimOffset();
	void UpdateAimRotation();
	void UpdateDirection();
	void UpdateFastPathVariables();
	void UpdateIkFeetRootRelRot();
	void UpdateIkFootOrientation();
	void UpdateLandingVel();
	void UpdateLeanYawOffset();
	void UpdateSmoothVelocity();
	void UpdateSprintStopCachedSpeed();
	void UpdateStopMoveAlpha();
	void UpdateTurnChar();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAnimInstanceSoldier3P">();
	}
	static class USQAnimInstanceSoldier3P* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQAnimInstanceSoldier3P>();
	}
};
static_assert(alignof(USQAnimInstanceSoldier3P) == 0x000010, "Wrong alignment on USQAnimInstanceSoldier3P");
static_assert(sizeof(USQAnimInstanceSoldier3P) == 0x000D20, "Wrong size on USQAnimInstanceSoldier3P");
static_assert(offsetof(USQAnimInstanceSoldier3P, bVaulting) == 0x000468, "Member 'USQAnimInstanceSoldier3P::bVaulting' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bClimbing) == 0x000469, "Member 'USQAnimInstanceSoldier3P::bClimbing' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bAssetPlayerTimeFromEnd__LTEPtOne__Jump_3P__JumpEnd__rifle_stand_jumpendOrIsProne) == 0x00046A, "Member 'USQAnimInstanceSoldier3P::bAssetPlayerTimeFromEnd__LTEPtOne__Jump_3P__JumpEnd__rifle_stand_jumpendOrIsProne' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bAssetPlayerTimeFromEnd__LTEPtOne__Jump_3P__JumpStart__rifle_stand_jumpstart) == 0x00046B, "Member 'USQAnimInstanceSoldier3P::bAssetPlayerTimeFromEnd__LTEPtOne__Jump_3P__JumpStart__rifle_stand_jumpstart' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bAssetPlayerTime__GTEPtOne__Jump_3P__JumpStart__rifle_stand_jumpstart) == 0x00046C, "Member 'USQAnimInstanceSoldier3P::bAssetPlayerTime__GTEPtOne__Jump_3P__JumpStart__rifle_stand_jumpstart' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bStateWeight__GTEOne__Stand3P__Jog) == 0x0004E8, "Member 'USQAnimInstanceSoldier3P::bStateWeight__GTEOne__Stand3P__Jog' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, StateWeight__Stand3P__Jog) == 0x0004EC, "Member 'USQAnimInstanceSoldier3P::StateWeight__Stand3P__Jog' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bStateWeight__GTEOne__Stand3P__Sprint) == 0x0004F0, "Member 'USQAnimInstanceSoldier3P::bStateWeight__GTEOne__Stand3P__Sprint' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, StateWeight__Stand3P__Sprint) == 0x0004F4, "Member 'USQAnimInstanceSoldier3P::StateWeight__Stand3P__Sprint' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, StateWeight__Stand3P__SprintStop) == 0x0004F8, "Member 'USQAnimInstanceSoldier3P::StateWeight__Stand3P__SprintStop' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bRelevantAnimTimeRemaining__LTEOne__Stand3P__SprintStop) == 0x0004FC, "Member 'USQAnimInstanceSoldier3P::bRelevantAnimTimeRemaining__LTEOne__Stand3P__SprintStop' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bStateWeight__GTEOne__Stand_NeutralStates__Neutral) == 0x000574, "Member 'USQAnimInstanceSoldier3P::bStateWeight__GTEOne__Stand_NeutralStates__Neutral' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bStateWeight__GTEOne__Stand_NeutralStates__TurnLeft_90) == 0x000575, "Member 'USQAnimInstanceSoldier3P::bStateWeight__GTEOne__Stand_NeutralStates__TurnLeft_90' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bStateWeight__GTEOne__Stand_NeutralStates__TurnRight_90) == 0x000576, "Member 'USQAnimInstanceSoldier3P::bStateWeight__GTEOne__Stand_NeutralStates__TurnRight_90' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bRelevantAnimTimeRemaining__LTEZero__Stand_NeutralStates__TurnLeft_90) == 0x000577, "Member 'USQAnimInstanceSoldier3P::bRelevantAnimTimeRemaining__LTEZero__Stand_NeutralStates__TurnLeft_90' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bRelevantAnimTimeRemaining__LTEZero__Stand_NeutralStates__TurnRight_90) == 0x000578, "Member 'USQAnimInstanceSoldier3P::bRelevantAnimTimeRemaining__LTEZero__Stand_NeutralStates__TurnRight_90' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, StateWeight__Crouch3P__Sprint) == 0x00060C, "Member 'USQAnimInstanceSoldier3P::StateWeight__Crouch3P__Sprint' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, StateWeight__Crouch3P__Walk) == 0x000610, "Member 'USQAnimInstanceSoldier3P::StateWeight__Crouch3P__Walk' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bStateWeight__GTEOne__Crouch_NeutralStates__Neutral) == 0x00064E, "Member 'USQAnimInstanceSoldier3P::bStateWeight__GTEOne__Crouch_NeutralStates__Neutral' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bStateWeight__GTEOne__Crouch_NeutralStates__TurnLeft_90) == 0x00064F, "Member 'USQAnimInstanceSoldier3P::bStateWeight__GTEOne__Crouch_NeutralStates__TurnLeft_90' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bStateWeight__GTEOne__Crouch_NeutralStates__TurnRight_90) == 0x000650, "Member 'USQAnimInstanceSoldier3P::bStateWeight__GTEOne__Crouch_NeutralStates__TurnRight_90' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, StateWeight__Prone3P__ProneMove) == 0x0006C8, "Member 'USQAnimInstanceSoldier3P::StateWeight__Prone3P__ProneMove' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bStateWeight__GTEOne__Prone_NeutralStates__Neutral) == 0x0006E9, "Member 'USQAnimInstanceSoldier3P::bStateWeight__GTEOne__Prone_NeutralStates__Neutral' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bStateWeight__GTEOne__Prone_NeutralStates__TurnLeft_45) == 0x0006EA, "Member 'USQAnimInstanceSoldier3P::bStateWeight__GTEOne__Prone_NeutralStates__TurnLeft_45' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bStateWeight__GTEOne__Prone_NeutralStates__TurnRight_45) == 0x0006EB, "Member 'USQAnimInstanceSoldier3P::bStateWeight__GTEOne__Prone_NeutralStates__TurnRight_45' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bStateWeight__GTEOne__SoldierMovements__Stand) == 0x000743, "Member 'USQAnimInstanceSoldier3P::bStateWeight__GTEOne__SoldierMovements__Stand' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bStateWeight__GTEOne__SoldierMovements__Crouch) == 0x000744, "Member 'USQAnimInstanceSoldier3P::bStateWeight__GTEOne__SoldierMovements__Crouch' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bStateWeight__GTEOne__SoldierMovements__Stand2Crouch) == 0x000745, "Member 'USQAnimInstanceSoldier3P::bStateWeight__GTEOne__SoldierMovements__Stand2Crouch' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, StateWeight__SoldierMovements__Stand2Prone) == 0x000748, "Member 'USQAnimInstanceSoldier3P::StateWeight__SoldierMovements__Stand2Prone' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, StateWeight__SoldierMovements__Sprint2Prone) == 0x00074C, "Member 'USQAnimInstanceSoldier3P::StateWeight__SoldierMovements__Sprint2Prone' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, StateWeight__SoldierMovements__Prone2Stand) == 0x000750, "Member 'USQAnimInstanceSoldier3P::StateWeight__SoldierMovements__Prone2Stand' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, StateWeight__SoldierMovements__Crouch2Prone) == 0x000754, "Member 'USQAnimInstanceSoldier3P::StateWeight__SoldierMovements__Crouch2Prone' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, StateWeight__SoldierMovements__Prone2Crouch) == 0x000758, "Member 'USQAnimInstanceSoldier3P::StateWeight__SoldierMovements__Prone2Crouch' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bAssetPlayerTimeFromEnd__LTEPtFour__SoldierMovements__Stand2Prone__rifle_stand2prone) == 0x00075C, "Member 'USQAnimInstanceSoldier3P::bAssetPlayerTimeFromEnd__LTEPtFour__SoldierMovements__Stand2Prone__rifle_stand2prone' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bAssetPlayerTimeFromEnd__LTEPtTwo__SoldierMovements__Sprint2Prone__rifle_sprint2prone) == 0x00075D, "Member 'USQAnimInstanceSoldier3P::bAssetPlayerTimeFromEnd__LTEPtTwo__SoldierMovements__Sprint2Prone__rifle_sprint2prone' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bAssetPlayerTimeFromEnd__LTEPtFour__SoldierMovements__Prone2Stand__rifle_prone2stand) == 0x00075E, "Member 'USQAnimInstanceSoldier3P::bAssetPlayerTimeFromEnd__LTEPtFour__SoldierMovements__Prone2Stand__rifle_prone2stand' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bAssetPlayerTimeFromEnd__LTEPtFour__SoldierMovements__Crouch2Prone__rifle_crouch2prone) == 0x00075F, "Member 'USQAnimInstanceSoldier3P::bAssetPlayerTimeFromEnd__LTEPtFour__SoldierMovements__Crouch2Prone__rifle_crouch2prone' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bAssetPlayerTimeFromEnd__LTEPtFour__SoldierMovements__Prone2Crouch__rifle_prone2crouch) == 0x000760, "Member 'USQAnimInstanceSoldier3P::bAssetPlayerTimeFromEnd__LTEPtFour__SoldierMovements__Prone2Crouch__rifle_prone2crouch' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bAssetPlayerTimeFromEnd__LTEPtOne__SoldierMovements__Stand2Crouch__Stand2Crouch) == 0x000761, "Member 'USQAnimInstanceSoldier3P::bAssetPlayerTimeFromEnd__LTEPtOne__SoldierMovements__Stand2Crouch__Stand2Crouch' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bAssetPlayerTimeFromEnd__LTEPtOne__SoldierMovements__Crouch2Stand__Crouch2Stand) == 0x000762, "Member 'USQAnimInstanceSoldier3P::bAssetPlayerTimeFromEnd__LTEPtOne__SoldierMovements__Crouch2Stand__Crouch2Stand' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bIsSprinting) == 0x000945, "Member 'USQAnimInstanceSoldier3P::bIsSprinting' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, CustomNotIsFallingAlpha) == 0x000948, "Member 'USQAnimInstanceSoldier3P::CustomNotIsFallingAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, BS1D_3pStandSprintType) == 0x000950, "Member 'USQAnimInstanceSoldier3P::BS1D_3pStandSprintType' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, SprintStop3p) == 0x000958, "Member 'USQAnimInstanceSoldier3P::SprintStop3p' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, BS1D_3pCrouchSprintType) == 0x000960, "Member 'USQAnimInstanceSoldier3P::BS1D_3pCrouchSprintType' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, BS_3pStandJogType) == 0x000968, "Member 'USQAnimInstanceSoldier3P::BS_3pStandJogType' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, BS_3pStandWalkType) == 0x000970, "Member 'USQAnimInstanceSoldier3P::BS_3pStandWalkType' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, BS_3pCrouchWalkType) == 0x000978, "Member 'USQAnimInstanceSoldier3P::BS_3pCrouchWalkType' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, BS1D_3pProneCrawlType) == 0x000980, "Member 'USQAnimInstanceSoldier3P::BS1D_3pProneCrawlType' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, StandStopMove) == 0x000988, "Member 'USQAnimInstanceSoldier3P::StandStopMove' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, CrouchStopMove) == 0x000990, "Member 'USQAnimInstanceSoldier3P::CrouchStopMove' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, StandLeanLeftShuffle) == 0x000998, "Member 'USQAnimInstanceSoldier3P::StandLeanLeftShuffle' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, StandLeanRightShuffle) == 0x0009A0, "Member 'USQAnimInstanceSoldier3P::StandLeanRightShuffle' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, CrouchLeanLeftShuffle) == 0x0009A8, "Member 'USQAnimInstanceSoldier3P::CrouchLeanLeftShuffle' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, CrouchLeanRightShuffle) == 0x0009B0, "Member 'USQAnimInstanceSoldier3P::CrouchLeanRightShuffle' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, AO1D_StandPitch) == 0x0009B8, "Member 'USQAnimInstanceSoldier3P::AO1D_StandPitch' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, AO1D_CrouchPitch) == 0x0009C0, "Member 'USQAnimInstanceSoldier3P::AO1D_CrouchPitch' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, AO1D_PronePitch) == 0x0009C8, "Member 'USQAnimInstanceSoldier3P::AO1D_PronePitch' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, AO_BipodStandCrouchPitch) == 0x0009D0, "Member 'USQAnimInstanceSoldier3P::AO_BipodStandCrouchPitch' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, AO1D_StandYawSF) == 0x0009D8, "Member 'USQAnimInstanceSoldier3P::AO1D_StandYawSF' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, AO1D_CrouchYawSF) == 0x0009E0, "Member 'USQAnimInstanceSoldier3P::AO1D_CrouchYawSF' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, AO1D_ProneYawSF) == 0x0009E8, "Member 'USQAnimInstanceSoldier3P::AO1D_ProneYawSF' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, StandTurnRight) == 0x0009F0, "Member 'USQAnimInstanceSoldier3P::StandTurnRight' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, StandTurnLeft) == 0x0009F8, "Member 'USQAnimInstanceSoldier3P::StandTurnLeft' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, CrouchTurnLeft) == 0x000A00, "Member 'USQAnimInstanceSoldier3P::CrouchTurnLeft' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, CrouchTurnRight) == 0x000A08, "Member 'USQAnimInstanceSoldier3P::CrouchTurnRight' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, ProneTurnRight) == 0x000A10, "Member 'USQAnimInstanceSoldier3P::ProneTurnRight' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, ProneTurnLeft) == 0x000A18, "Member 'USQAnimInstanceSoldier3P::ProneTurnLeft' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, SprintToProne3p) == 0x000A20, "Member 'USQAnimInstanceSoldier3P::SprintToProne3p' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, StandToProne3p) == 0x000A28, "Member 'USQAnimInstanceSoldier3P::StandToProne3p' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, ProneToStand3p) == 0x000A30, "Member 'USQAnimInstanceSoldier3P::ProneToStand3p' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, CrouchToProne3p) == 0x000A38, "Member 'USQAnimInstanceSoldier3P::CrouchToProne3p' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, ProneToCrouch3p) == 0x000A40, "Member 'USQAnimInstanceSoldier3P::ProneToCrouch3p' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FpvLowerRootBoneOffset) == 0x000A48, "Member 'USQAnimInstanceSoldier3P::FpvLowerRootBoneOffset' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, CustomSpeedMin40) == 0x000A54, "Member 'USQAnimInstanceSoldier3P::CustomSpeedMin40' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, ProneStopMoveAlpha) == 0x000A58, "Member 'USQAnimInstanceSoldier3P::ProneStopMoveAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, CrouchStopMoveAlpha) == 0x000A5C, "Member 'USQAnimInstanceSoldier3P::CrouchStopMoveAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_HighestClimbAnim) == 0x000A60, "Member 'USQAnimInstanceSoldier3P::bFP_HighestClimbAnim' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_T_Jump_3PJumpStartToJumpEnd) == 0x000A61, "Member 'USQAnimInstanceSoldier3P::bFP_T_Jump_3PJumpStartToJumpEnd' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_T_Stand3PSprintStopToJog) == 0x000A62, "Member 'USQAnimInstanceSoldier3P::bFP_T_Stand3PSprintStopToJog' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_T_Stand3PSprintToSprintStop) == 0x000A63, "Member 'USQAnimInstanceSoldier3P::bFP_T_Stand3PSprintToSprintStop' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_T_Stand3PJogToSprint) == 0x000A64, "Member 'USQAnimInstanceSoldier3P::bFP_T_Stand3PJogToSprint' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_T_Stand_NeutralStatesTurnRight_90ToTurnLeft_90) == 0x000A65, "Member 'USQAnimInstanceSoldier3P::bFP_T_Stand_NeutralStatesTurnRight_90ToTurnLeft_90' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_T_Stand_NeutralStatesTurnLeft_90ToTurnRight_90) == 0x000A66, "Member 'USQAnimInstanceSoldier3P::bFP_T_Stand_NeutralStatesTurnLeft_90ToTurnRight_90' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_T_Stand_NeutralStatesNeutralToTurnLeft_90) == 0x000A67, "Member 'USQAnimInstanceSoldier3P::bFP_T_Stand_NeutralStatesNeutralToTurnLeft_90' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_T_Stand_NeutralStatesNeutralToTurnRight_90) == 0x000A68, "Member 'USQAnimInstanceSoldier3P::bFP_T_Stand_NeutralStatesNeutralToTurnRight_90' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_T_Crouch_NeutralStatesTurnRight_90ToNeutral) == 0x000A69, "Member 'USQAnimInstanceSoldier3P::bFP_T_Crouch_NeutralStatesTurnRight_90ToNeutral' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_T_Crouch_NeutralStatesTurnRight_90ToTurnLeft_90) == 0x000A6A, "Member 'USQAnimInstanceSoldier3P::bFP_T_Crouch_NeutralStatesTurnRight_90ToTurnLeft_90' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_T_Crouch_NeutralStatesTurnLeft_90ToNeutral) == 0x000A6B, "Member 'USQAnimInstanceSoldier3P::bFP_T_Crouch_NeutralStatesTurnLeft_90ToNeutral' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_T_Crouch_NeutralStatesTurnLeft_90ToTurnRight_90) == 0x000A6C, "Member 'USQAnimInstanceSoldier3P::bFP_T_Crouch_NeutralStatesTurnLeft_90ToTurnRight_90' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_T_Crouch_NeutralStatesNeutralToTurnLeft_90) == 0x000A6D, "Member 'USQAnimInstanceSoldier3P::bFP_T_Crouch_NeutralStatesNeutralToTurnLeft_90' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_T_Crouch_NeutralStatesNeutralToTurnRight_90) == 0x000A6E, "Member 'USQAnimInstanceSoldier3P::bFP_T_Crouch_NeutralStatesNeutralToTurnRight_90' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_T_Prone_NeutralStatesTurnLeft_45ToNeutral) == 0x000A6F, "Member 'USQAnimInstanceSoldier3P::bFP_T_Prone_NeutralStatesTurnLeft_45ToNeutral' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_T_Prone_NeutralStatesTurnLeft_45ToTurnRight_45) == 0x000A70, "Member 'USQAnimInstanceSoldier3P::bFP_T_Prone_NeutralStatesTurnLeft_45ToTurnRight_45' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_T_Prone_NeutralStatesTurnRight_45ToNeutral) == 0x000A71, "Member 'USQAnimInstanceSoldier3P::bFP_T_Prone_NeutralStatesTurnRight_45ToNeutral' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_T_Prone_NeutralStatesTurnRight_45ToTurnLeft_45) == 0x000A72, "Member 'USQAnimInstanceSoldier3P::bFP_T_Prone_NeutralStatesTurnRight_45ToTurnLeft_45' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_T_Prone_NeutralStatesNeutralToTurnLeft_45) == 0x000A73, "Member 'USQAnimInstanceSoldier3P::bFP_T_Prone_NeutralStatesNeutralToTurnLeft_45' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_T_Prone_NeutralStatesNeutralToTurnRight_45) == 0x000A74, "Member 'USQAnimInstanceSoldier3P::bFP_T_Prone_NeutralStatesNeutralToTurnRight_45' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_T_SoldierMovementsCrouch2StandToStand) == 0x000A75, "Member 'USQAnimInstanceSoldier3P::bFP_T_SoldierMovementsCrouch2StandToStand' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_T_SoldierMovementsStand2CrouchToCrouch2Prone) == 0x000A76, "Member 'USQAnimInstanceSoldier3P::bFP_T_SoldierMovementsStand2CrouchToCrouch2Prone' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_T_SoldierMovementsStand2CrouchToCrouch) == 0x000A77, "Member 'USQAnimInstanceSoldier3P::bFP_T_SoldierMovementsStand2CrouchToCrouch' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_T_SoldierMovementsCrouchToCrouch2Prone) == 0x000A78, "Member 'USQAnimInstanceSoldier3P::bFP_T_SoldierMovementsCrouchToCrouch2Prone' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_T_SoldierMovements_StandToCrouch) == 0x000A79, "Member 'USQAnimInstanceSoldier3P::bFP_T_SoldierMovements_StandToCrouch' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_T_SoldierMovementsStandToStand2Prone) == 0x000A7A, "Member 'USQAnimInstanceSoldier3P::bFP_T_SoldierMovementsStandToStand2Prone' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_T_SoldierMovementsStandToStand2Crouch) == 0x000A7B, "Member 'USQAnimInstanceSoldier3P::bFP_T_SoldierMovementsStandToStand2Crouch' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_T_SoldierMovementsStandToSprint2Prone) == 0x000A7C, "Member 'USQAnimInstanceSoldier3P::bFP_T_SoldierMovementsStandToSprint2Prone' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_FloorAlignedRotationRightFoot) == 0x000A80, "Member 'USQAnimInstanceSoldier3P::FP_FloorAlignedRotationRightFoot' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_FloorAlignedRotationLeftFoot) == 0x000A8C, "Member 'USQAnimInstanceSoldier3P::FP_FloorAlignedRotationLeftFoot' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_FloorAlignedRotationFeetRoot) == 0x000A98, "Member 'USQAnimInstanceSoldier3P::FP_FloorAlignedRotationFeetRoot' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_FloorAlignedRotationFeetRootReverse) == 0x000AA4, "Member 'USQAnimInstanceSoldier3P::FP_FloorAlignedRotationFeetRootReverse' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_IKFeetRootTranslation) == 0x000AB0, "Member 'USQAnimInstanceSoldier3P::FP_IKFeetRootTranslation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_IsNotFirstPersonVisibilityAlpha) == 0x000ABC, "Member 'USQAnimInstanceSoldier3P::FP_IsNotFirstPersonVisibilityAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_StandIdleAlpha) == 0x000AC0, "Member 'USQAnimInstanceSoldier3P::FP_StandIdleAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_CrouchProneIdleAlpha) == 0x000AC4, "Member 'USQAnimInstanceSoldier3P::FP_CrouchProneIdleAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_IsStanding) == 0x000AC8, "Member 'USQAnimInstanceSoldier3P::bFP_IsStanding' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_IsStandingStill) == 0x000AC9, "Member 'USQAnimInstanceSoldier3P::bFP_IsStandingStill' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_CanCrouchToStandingStill) == 0x000ACA, "Member 'USQAnimInstanceSoldier3P::bFP_CanCrouchToStandingStill' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_CanCrouchToStandMoving) == 0x000ACB, "Member 'USQAnimInstanceSoldier3P::bFP_CanCrouchToStandMoving' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_IsCrouchedInPlace) == 0x000ACC, "Member 'USQAnimInstanceSoldier3P::bFP_IsCrouchedInPlace' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_AimOffsetProneYawFrameTime) == 0x000AD0, "Member 'USQAnimInstanceSoldier3P::FP_AimOffsetProneYawFrameTime' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_AimOffsetYawNegative) == 0x000AD4, "Member 'USQAnimInstanceSoldier3P::FP_AimOffsetYawNegative' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_AimOffsetProneTurnRightYawFrameTime) == 0x000AD8, "Member 'USQAnimInstanceSoldier3P::FP_AimOffsetProneTurnRightYawFrameTime' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_AimOffsetTurnRightYawNegative) == 0x000ADC, "Member 'USQAnimInstanceSoldier3P::FP_AimOffsetTurnRightYawNegative' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_AimOffsetProneTurnLeftYawFrameTime) == 0x000AE0, "Member 'USQAnimInstanceSoldier3P::FP_AimOffsetProneTurnLeftYawFrameTime' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_AimOffsetTurnLeftYawNegative) == 0x000AE4, "Member 'USQAnimInstanceSoldier3P::FP_AimOffsetTurnLeftYawNegative' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_ProneWalkPlayRate) == 0x000AE8, "Member 'USQAnimInstanceSoldier3P::FP_ProneWalkPlayRate' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_IsMoving) == 0x000AEC, "Member 'USQAnimInstanceSoldier3P::bFP_IsMoving' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_IsNotMoving) == 0x000AED, "Member 'USQAnimInstanceSoldier3P::bFP_IsNotMoving' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_FloorAlignedRotationBody) == 0x000AF0, "Member 'USQAnimInstanceSoldier3P::FP_FloorAlignedRotationBody' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_FloorAlignedRotationBodyReverse) == 0x000AFC, "Member 'USQAnimInstanceSoldier3P::FP_FloorAlignedRotationBodyReverse' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_CustomSpeedMin40NormalizedToRange) == 0x000B08, "Member 'USQAnimInstanceSoldier3P::FP_CustomSpeedMin40NormalizedToRange' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_IsProneAndNotDeployBipod) == 0x000B0C, "Member 'USQAnimInstanceSoldier3P::bFP_IsProneAndNotDeployBipod' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_IsClimbingOrVaulting) == 0x000B0D, "Member 'USQAnimInstanceSoldier3P::bFP_IsClimbingOrVaulting' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_FreeLook3PHeadRotation) == 0x000B10, "Member 'USQAnimInstanceSoldier3P::FP_FreeLook3PHeadRotation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_BipodCrouchStanceAlpha) == 0x000B1C, "Member 'USQAnimInstanceSoldier3P::FP_BipodCrouchStanceAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_BipodStandCrouchAimPitchAlpha) == 0x000B20, "Member 'USQAnimInstanceSoldier3P::FP_BipodStandCrouchAimPitchAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_BipodProneStanceAlpha) == 0x000B28, "Member 'USQAnimInstanceSoldier3P::FP_BipodProneStanceAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_BipodAimOffsetAlpha) == 0x000B2C, "Member 'USQAnimInstanceSoldier3P::FP_BipodAimOffsetAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_BipodWeaponPosCoveredPoseAlphaDependingOnSkelMeshOffset) == 0x000B30, "Member 'USQAnimInstanceSoldier3P::FP_BipodWeaponPosCoveredPoseAlphaDependingOnSkelMeshOffset' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_BipodCoveredPoseBlendAlpha) == 0x000B34, "Member 'USQAnimInstanceSoldier3P::FP_BipodCoveredPoseBlendAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_BipodHighPitchCoveredPoseWeaponPositionOffset) == 0x000B38, "Member 'USQAnimInstanceSoldier3P::FP_BipodHighPitchCoveredPoseWeaponPositionOffset' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_BipodDynamicBodyOffset) == 0x000B44, "Member 'USQAnimInstanceSoldier3P::FP_BipodDynamicBodyOffset' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_AimOffsetCrouchYawFrameTime) == 0x000B50, "Member 'USQAnimInstanceSoldier3P::FP_AimOffsetCrouchYawFrameTime' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_AimOffsetTurnLeftYawPlayRate) == 0x000B54, "Member 'USQAnimInstanceSoldier3P::FP_AimOffsetTurnLeftYawPlayRate' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_AimOffsetTurnLeftProneYawPlayRate) == 0x000B58, "Member 'USQAnimInstanceSoldier3P::FP_AimOffsetTurnLeftProneYawPlayRate' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_AimOffsetTurnLeftYawFrameTime) == 0x000B5C, "Member 'USQAnimInstanceSoldier3P::FP_AimOffsetTurnLeftYawFrameTime' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_AimOffsetTurnRightYawPlayRate) == 0x000B60, "Member 'USQAnimInstanceSoldier3P::FP_AimOffsetTurnRightYawPlayRate' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_AimOffsetTurnRightProneYawPlayRate) == 0x000B64, "Member 'USQAnimInstanceSoldier3P::FP_AimOffsetTurnRightProneYawPlayRate' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_AimOffsetTurnRightYawFrameTime) == 0x000B68, "Member 'USQAnimInstanceSoldier3P::FP_AimOffsetTurnRightYawFrameTime' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_StandStopMoveAlpha) == 0x000B6C, "Member 'USQAnimInstanceSoldier3P::FP_StandStopMoveAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_AimYawFrameTime2) == 0x000B70, "Member 'USQAnimInstanceSoldier3P::FP_AimYawFrameTime2' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_CrouchWalkPlayRate) == 0x000B74, "Member 'USQAnimInstanceSoldier3P::FP_CrouchWalkPlayRate' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_AimYawJogFrameTime) == 0x000B78, "Member 'USQAnimInstanceSoldier3P::FP_AimYawJogFrameTime' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_AimPitchJogAlpha) == 0x000B7C, "Member 'USQAnimInstanceSoldier3P::FP_AimPitchJogAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_JogPlayRate) == 0x000B80, "Member 'USQAnimInstanceSoldier3P::FP_JogPlayRate' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_SprintStopAlpha) == 0x000B84, "Member 'USQAnimInstanceSoldier3P::FP_SprintStopAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_Stand3PNeutralToJogRule) == 0x000B88, "Member 'USQAnimInstanceSoldier3P::bFP_Stand3PNeutralToJogRule' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_Stand3PJogToNeutralRule) == 0x000B89, "Member 'USQAnimInstanceSoldier3P::bFP_Stand3PJogToNeutralRule' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_Stand3PSprintToNeutralRule) == 0x000B8A, "Member 'USQAnimInstanceSoldier3P::bFP_Stand3PSprintToNeutralRule' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_AimOffsetStandYawFrameTime) == 0x000B8C, "Member 'USQAnimInstanceSoldier3P::FP_AimOffsetStandYawFrameTime' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_JumpEndAlpha) == 0x000B90, "Member 'USQAnimInstanceSoldier3P::FP_JumpEndAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_IsFallingAndNotJumping) == 0x000B94, "Member 'USQAnimInstanceSoldier3P::bFP_IsFallingAndNotJumping' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_Final3PLeftHandIKOutAlpha) == 0x000B98, "Member 'USQAnimInstanceSoldier3P::FP_Final3PLeftHandIKOutAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_AOStandToConduit) == 0x000B9C, "Member 'USQAnimInstanceSoldier3P::bFP_AOStandToConduit' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_AOStandSprintJog) == 0x000B9D, "Member 'USQAnimInstanceSoldier3P::bFP_AOStandSprintJog' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_AOCrouchToConduit) == 0x000B9E, "Member 'USQAnimInstanceSoldier3P::bFP_AOCrouchToConduit' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_AOProneToConduit) == 0x000B9F, "Member 'USQAnimInstanceSoldier3P::bFP_AOProneToConduit' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_AOConduitToCrouch) == 0x000BA0, "Member 'USQAnimInstanceSoldier3P::bFP_AOConduitToCrouch' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_BS_StandSprintSpeed) == 0x000BA4, "Member 'USQAnimInstanceSoldier3P::FP_BS_StandSprintSpeed' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_SprintHeadDirection) == 0x000BA8, "Member 'USQAnimInstanceSoldier3P::FP_SprintHeadDirection' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_SprintRootDirection) == 0x000BB4, "Member 'USQAnimInstanceSoldier3P::FP_SprintRootDirection' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_BS_CrouchSprintSpeed) == 0x000BB8, "Member 'USQAnimInstanceSoldier3P::FP_BS_CrouchSprintSpeed' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFP_LeanHeadWhenADSAndADS) == 0x000BBC, "Member 'USQAnimInstanceSoldier3P::bFP_LeanHeadWhenADSAndADS' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFinal3pLeftHandIkOut) == 0x000BBD, "Member 'USQAnimInstanceSoldier3P::bFinal3pLeftHandIkOut' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, CustomWeapActionsAndIsAds) == 0x000BC0, "Member 'USQAnimInstanceSoldier3P::CustomWeapActionsAndIsAds' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_WalkPlayRate) == 0x000BC4, "Member 'USQAnimInstanceSoldier3P::FP_WalkPlayRate' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_IsNotMovingAlpha) == 0x000BC8, "Member 'USQAnimInstanceSoldier3P::FP_IsNotMovingAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_LeanYawOffsetFrameTime) == 0x000BCC, "Member 'USQAnimInstanceSoldier3P::FP_LeanYawOffsetFrameTime' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, FP_AlphaAbsIkFeetRootPitch) == 0x000BD0, "Member 'USQAnimInstanceSoldier3P::FP_AlphaAbsIkFeetRootPitch' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, RawActorRotation) == 0x000BD4, "Member 'USQAnimInstanceSoldier3P::RawActorRotation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, SmoothedControlRotation) == 0x000BE0, "Member 'USQAnimInstanceSoldier3P::SmoothedControlRotation' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bTurnNeutAoDisabled) == 0x000BEC, "Member 'USQAnimInstanceSoldier3P::bTurnNeutAoDisabled' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, CachedActorYaw) == 0x000BF0, "Member 'USQAnimInstanceSoldier3P::CachedActorYaw' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bLeftHandIkOut) == 0x000BFC, "Member 'USQAnimInstanceSoldier3P::bLeftHandIkOut' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bJumpEndBobbing3P) == 0x000BFD, "Member 'USQAnimInstanceSoldier3P::bJumpEndBobbing3P' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, CustomIsSprinting) == 0x000C00, "Member 'USQAnimInstanceSoldier3P::CustomIsSprinting' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, CustomIsAdsOrBipod) == 0x000C04, "Member 'USQAnimInstanceSoldier3P::CustomIsAdsOrBipod' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, SmoothVelocity) == 0x000C08, "Member 'USQAnimInstanceSoldier3P::SmoothVelocity' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, AccelRateClamp) == 0x000C14, "Member 'USQAnimInstanceSoldier3P::AccelRateClamp' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, SmoothWorldDirection) == 0x000C18, "Member 'USQAnimInstanceSoldier3P::SmoothWorldDirection' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, AimRotation_3P) == 0x000C24, "Member 'USQAnimInstanceSoldier3P::AimRotation_3P' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, AimRotation2_3P) == 0x000C30, "Member 'USQAnimInstanceSoldier3P::AimRotation2_3P' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bTurnLeftAnim) == 0x000C3C, "Member 'USQAnimInstanceSoldier3P::bTurnLeftAnim' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFullMoveAnim) == 0x000C3D, "Member 'USQAnimInstanceSoldier3P::bFullMoveAnim' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bTurnRightAnim) == 0x000C3E, "Member 'USQAnimInstanceSoldier3P::bTurnRightAnim' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bTurnLeft) == 0x000C3F, "Member 'USQAnimInstanceSoldier3P::bTurnLeft' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bTurnRight) == 0x000C40, "Member 'USQAnimInstanceSoldier3P::bTurnRight' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bTurnLeftProne) == 0x000C41, "Member 'USQAnimInstanceSoldier3P::bTurnLeftProne' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bTurnRightProne) == 0x000C42, "Member 'USQAnimInstanceSoldier3P::bTurnRightProne' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, YawOffset) == 0x000C44, "Member 'USQAnimInstanceSoldier3P::YawOffset' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, YawOffsetDuringTurnLeft) == 0x000C50, "Member 'USQAnimInstanceSoldier3P::YawOffsetDuringTurnLeft' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, YawOffsetDuringTurnRight) == 0x000C5C, "Member 'USQAnimInstanceSoldier3P::YawOffsetDuringTurnRight' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bFullSprintAnim) == 0x000C68, "Member 'USQAnimInstanceSoldier3P::bFullSprintAnim' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, LastSpeed) == 0x000C6C, "Member 'USQAnimInstanceSoldier3P::LastSpeed' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, SprintStopCachedSpeed) == 0x000C70, "Member 'USQAnimInstanceSoldier3P::SprintStopCachedSpeed' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bCachedIsProne) == 0x000C74, "Member 'USQAnimInstanceSoldier3P::bCachedIsProne' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, StandStopMoveAlpha) == 0x000C78, "Member 'USQAnimInstanceSoldier3P::StandStopMoveAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bCachedIsCrouched) == 0x000C7C, "Member 'USQAnimInstanceSoldier3P::bCachedIsCrouched' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bCachedIsStand) == 0x000C7D, "Member 'USQAnimInstanceSoldier3P::bCachedIsStand' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bProneTransAnim) == 0x000C7E, "Member 'USQAnimInstanceSoldier3P::bProneTransAnim' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, PmCachedCapsuleWorldLoc1) == 0x000C80, "Member 'USQAnimInstanceSoldier3P::PmCachedCapsuleWorldLoc1' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, EndSprintToProneCapsuleLoc) == 0x000C8C, "Member 'USQAnimInstanceSoldier3P::EndSprintToProneCapsuleLoc' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, Alpha) == 0x000C98, "Member 'USQAnimInstanceSoldier3P::Alpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, LastKnownHeight) == 0x000C9C, "Member 'USQAnimInstanceSoldier3P::LastKnownHeight' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, HeightVelocity) == 0x000CA0, "Member 'USQAnimInstanceSoldier3P::HeightVelocity' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, LastKnownHeightVelocity) == 0x000CA4, "Member 'USQAnimInstanceSoldier3P::LastKnownHeightVelocity' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, BipodAimUpLimit3P) == 0x000CA8, "Member 'USQAnimInstanceSoldier3P::BipodAimUpLimit3P' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, BipodAimDownLimit3P) == 0x000CAC, "Member 'USQAnimInstanceSoldier3P::BipodAimDownLimit3P' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, CustomNotVaultingAlpha) == 0x000CB0, "Member 'USQAnimInstanceSoldier3P::CustomNotVaultingAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, CustomNotClimbingAlpha) == 0x000CB4, "Member 'USQAnimInstanceSoldier3P::CustomNotClimbingAlpha' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, CurrentFloorNormalBody) == 0x000CB8, "Member 'USQAnimInstanceSoldier3P::CurrentFloorNormalBody' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, CurrentFloorNormalFeet) == 0x000CC4, "Member 'USQAnimInstanceSoldier3P::CurrentFloorNormalFeet' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, IkFeetRootRelRot) == 0x000CD0, "Member 'USQAnimInstanceSoldier3P::IkFeetRootRelRot' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, LeftFootFloorNormal) == 0x000CDC, "Member 'USQAnimInstanceSoldier3P::LeftFootFloorNormal' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, RightFootFloorNormal) == 0x000CE8, "Member 'USQAnimInstanceSoldier3P::RightFootFloorNormal' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, CustomIsLoweredAndNotProne) == 0x000CF4, "Member 'USQAnimInstanceSoldier3P::CustomIsLoweredAndNotProne' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, MeshRotationOffset) == 0x000CF8, "Member 'USQAnimInstanceSoldier3P::MeshRotationOffset' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, CachedActorRotationNoLean) == 0x000D04, "Member 'USQAnimInstanceSoldier3P::CachedActorRotationNoLean' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, CachedLeanYawOffset) == 0x000D10, "Member 'USQAnimInstanceSoldier3P::CachedLeanYawOffset' has a wrong offset!");
static_assert(offsetof(USQAnimInstanceSoldier3P, bLeanHeadWhenAds) == 0x000D18, "Member 'USQAnimInstanceSoldier3P::bLeanHeadWhenAds' has a wrong offset!");

// Class Squad.SQAnimNotify_EnterSeatState
// 0x0008 (0x0040 - 0x0038)
class USQAnimNotify_EnterSeatState final : public UAnimNotify
{
public:
	int32                                         SeatIndex;                                         // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC8[0x4];                                      // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAnimNotify_EnterSeatState">();
	}
	static class USQAnimNotify_EnterSeatState* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQAnimNotify_EnterSeatState>();
	}
};
static_assert(alignof(USQAnimNotify_EnterSeatState) == 0x000008, "Wrong alignment on USQAnimNotify_EnterSeatState");
static_assert(sizeof(USQAnimNotify_EnterSeatState) == 0x000040, "Wrong size on USQAnimNotify_EnterSeatState");
static_assert(offsetof(USQAnimNotify_EnterSeatState, SeatIndex) == 0x000038, "Member 'USQAnimNotify_EnterSeatState::SeatIndex' has a wrong offset!");

// Class Squad.SQAnnouncementNotifier
// 0x0000 (0x0260 - 0x0260)
class USQAnnouncementNotifier : public UUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAnnouncementNotifier">();
	}
	static class USQAnnouncementNotifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQAnnouncementNotifier>();
	}
};
static_assert(alignof(USQAnnouncementNotifier) == 0x000008, "Wrong alignment on USQAnnouncementNotifier");
static_assert(sizeof(USQAnnouncementNotifier) == 0x000260, "Wrong size on USQAnnouncementNotifier");

// Class Squad.SQArmorMeshComponent
// 0x0010 (0x04F0 - 0x04E0)
class USQArmorMeshComponent final : public UStaticMeshComponent
{
public:
	TArray<struct FSQArmorInfo>                   ArmorInfo;                                         // 0x04E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	float GetArmorThicknessAtHit(const struct FHitResult& InHit);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQArmorMeshComponent">();
	}
	static class USQArmorMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQArmorMeshComponent>();
	}
};
static_assert(alignof(USQArmorMeshComponent) == 0x000010, "Wrong alignment on USQArmorMeshComponent");
static_assert(sizeof(USQArmorMeshComponent) == 0x0004F0, "Wrong size on USQArmorMeshComponent");
static_assert(offsetof(USQArmorMeshComponent, ArmorInfo) == 0x0004E0, "Member 'USQArmorMeshComponent::ArmorInfo' has a wrong offset!");

// Class Squad.SQAssetManager
// 0x0148 (0x05C0 - 0x0478)
class USQAssetManager final : public UAssetManager
{
public:
	uint8                                         Pad_EC9[0x148];                                    // 0x0478(0x0148)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAssetManager">();
	}
	static class USQAssetManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQAssetManager>();
	}
};
static_assert(alignof(USQAssetManager) == 0x000008, "Wrong alignment on USQAssetManager");
static_assert(sizeof(USQAssetManager) == 0x0005C0, "Wrong size on USQAssetManager");

// Class Squad.SQAudioVolume
// 0x0008 (0x02E0 - 0x02D8)
class ASQAudioVolume final : public AAudioVolume
{
public:
	ESQAudioVolumeType                            SquadAudioVolumeType;                              // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ECA[0x7];                                      // 0x02D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAudioVolume">();
	}
	static class ASQAudioVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQAudioVolume>();
	}
};
static_assert(alignof(ASQAudioVolume) == 0x000008, "Wrong alignment on ASQAudioVolume");
static_assert(sizeof(ASQAudioVolume) == 0x0002E0, "Wrong size on ASQAudioVolume");
static_assert(offsetof(ASQAudioVolume, SquadAudioVolumeType) == 0x0002D8, "Member 'ASQAudioVolume::SquadAudioVolumeType' has a wrong offset!");

// Class Squad.SQAvailability_Action
// 0x0008 (0x0058 - 0x0050)
class USQAvailability_Action : public USQAvailability
{
public:
	class USQActionSettings*                      Setting;                                           // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAvailability_Action">();
	}
	static class USQAvailability_Action* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQAvailability_Action>();
	}
};
static_assert(alignof(USQAvailability_Action) == 0x000008, "Wrong alignment on USQAvailability_Action");
static_assert(sizeof(USQAvailability_Action) == 0x000058, "Wrong size on USQAvailability_Action");
static_assert(offsetof(USQAvailability_Action, Setting) == 0x000050, "Member 'USQAvailability_Action::Setting' has a wrong offset!");

// Class Squad.SQPlayFabProvider
// 0x0070 (0x01A0 - 0x0130)
class USQPlayFabProvider : public USQCloudProvider
{
public:
	uint8                                         Pad_ECB[0x10];                                     // 0x0130(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EditorTitleId;                                     // 0x0140(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 DefaultAvatarUrl;                                  // 0x0150(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_ECC[0x40];                                     // 0x0160(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQPlayFabProvider">();
	}
	static class USQPlayFabProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQPlayFabProvider>();
	}
};
static_assert(alignof(USQPlayFabProvider) == 0x000008, "Wrong alignment on USQPlayFabProvider");
static_assert(sizeof(USQPlayFabProvider) == 0x0001A0, "Wrong size on USQPlayFabProvider");
static_assert(offsetof(USQPlayFabProvider, EditorTitleId) == 0x000140, "Member 'USQPlayFabProvider::EditorTitleId' has a wrong offset!");
static_assert(offsetof(USQPlayFabProvider, DefaultAvatarUrl) == 0x000150, "Member 'USQPlayFabProvider::DefaultAvatarUrl' has a wrong offset!");

// Class Squad.SQAvailability_Deployable
// 0x0008 (0x0058 - 0x0050)
class USQAvailability_Deployable : public USQAvailability
{
public:
	class USQDeployableSettings*                  Setting;                                           // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	int32 GetRefundPercentage() const;
	void ProcessRefund(class ASQPlayerController* InPlayer, class ASQTeam* InTeam, const class ASQDeployable* InDeployable) const;
	bool ShouldRefund(class ASQPlayerController* InPlayer, class ASQTeam* InTeam, const class ASQDeployable* InDeployable) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAvailability_Deployable">();
	}
	static class USQAvailability_Deployable* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQAvailability_Deployable>();
	}
};
static_assert(alignof(USQAvailability_Deployable) == 0x000008, "Wrong alignment on USQAvailability_Deployable");
static_assert(sizeof(USQAvailability_Deployable) == 0x000058, "Wrong size on USQAvailability_Deployable");
static_assert(offsetof(USQAvailability_Deployable, Setting) == 0x000050, "Member 'USQAvailability_Deployable::Setting' has a wrong offset!");

// Class Squad.SQAvailability_Role
// 0x0008 (0x0058 - 0x0050)
class USQAvailability_Role : public USQAvailability
{
public:
	class USQRoleSettings*                        Setting;                                           // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool CanRearm(class ASQPlayerController* InPlayer, const TScriptInterface<class ISQRearmSource>& InRearmSource, float* OutCost, struct FDataTableRowHandle* OutRestrictionReason) const;
	void GetAvailabilityForPlayerRearm(class ASQPlayerController* InPlayer, const TScriptInterface<class ISQRearmSource>& InRearmSource, struct FSQAvailabilityState_Role* InOutRearmStatus, float* OutCost) const;
	struct FDataTableRowHandle GetInsufficientAmmoReamFailureReason() const;
	float GetRearmOperationCost(class ASQPlayerController* InPlayer, const TScriptInterface<class ISQRearmSource>& InRearmSource) const;
	int32 GetRearmRefundPercentage() const;
	bool HasSameCountLimit(const class USQAvailability_Role* Other) const;
	void ProcessRearmCost(class ASQPlayerController* InPlayer, const TScriptInterface<class ISQRearmSource>& InRearmSource) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAvailability_Role">();
	}
	static class USQAvailability_Role* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQAvailability_Role>();
	}
};
static_assert(alignof(USQAvailability_Role) == 0x000008, "Wrong alignment on USQAvailability_Role");
static_assert(sizeof(USQAvailability_Role) == 0x000058, "Wrong size on USQAvailability_Role");
static_assert(offsetof(USQAvailability_Role, Setting) == 0x000050, "Member 'USQAvailability_Role::Setting' has a wrong offset!");

// Class Squad.SQBaseGameSubsystem
// 0x0018 (0x0040 - 0x0028)
class USQBaseGameSubsystem final : public UObject
{
public:
	uint8                                         Pad_ED3[0x10];                                     // 0x0028(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class USQGameInstance*                        SQGameInstance;                                    // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void TickSubsystem(float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQBaseGameSubsystem">();
	}
	static class USQBaseGameSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQBaseGameSubsystem>();
	}
};
static_assert(alignof(USQBaseGameSubsystem) == 0x000008, "Wrong alignment on USQBaseGameSubsystem");
static_assert(sizeof(USQBaseGameSubsystem) == 0x000040, "Wrong size on USQBaseGameSubsystem");
static_assert(offsetof(USQBaseGameSubsystem, SQGameInstance) == 0x000038, "Member 'USQBaseGameSubsystem::SQGameInstance' has a wrong offset!");

// Class Squad.SQBlastComponent
// 0x0030 (0x0230 - 0x0200)
class USQBlastComponent final : public USceneComponent
{
public:
	float                                         ConeLength;                                        // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConeAngle;                                         // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlockBlastTraceOriginOffset;                       // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDamage;                                         // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDrawDebugEnabled;                               // 0x0208(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ED4[0x7];                                      // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDamageType>                DamageType;                                        // 0x0210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectsConeLength;                                 // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectsConeHalfAngle;                              // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQShockwave>               BlastShockwave;                                    // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ED5[0x8];                                      // 0x0228(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FireBlast();
	void ServerFireBlast(const struct FVector& BlastLocationZeroBased, const struct FVector& BlastAimVector);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQBlastComponent">();
	}
	static class USQBlastComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQBlastComponent>();
	}
};
static_assert(alignof(USQBlastComponent) == 0x000010, "Wrong alignment on USQBlastComponent");
static_assert(sizeof(USQBlastComponent) == 0x000230, "Wrong size on USQBlastComponent");
static_assert(offsetof(USQBlastComponent, ConeLength) == 0x0001F8, "Member 'USQBlastComponent::ConeLength' has a wrong offset!");
static_assert(offsetof(USQBlastComponent, ConeAngle) == 0x0001FC, "Member 'USQBlastComponent::ConeAngle' has a wrong offset!");
static_assert(offsetof(USQBlastComponent, BlockBlastTraceOriginOffset) == 0x000200, "Member 'USQBlastComponent::BlockBlastTraceOriginOffset' has a wrong offset!");
static_assert(offsetof(USQBlastComponent, MaxDamage) == 0x000204, "Member 'USQBlastComponent::MaxDamage' has a wrong offset!");
static_assert(offsetof(USQBlastComponent, bIsDrawDebugEnabled) == 0x000208, "Member 'USQBlastComponent::bIsDrawDebugEnabled' has a wrong offset!");
static_assert(offsetof(USQBlastComponent, DamageType) == 0x000210, "Member 'USQBlastComponent::DamageType' has a wrong offset!");
static_assert(offsetof(USQBlastComponent, EffectsConeLength) == 0x000218, "Member 'USQBlastComponent::EffectsConeLength' has a wrong offset!");
static_assert(offsetof(USQBlastComponent, EffectsConeHalfAngle) == 0x00021C, "Member 'USQBlastComponent::EffectsConeHalfAngle' has a wrong offset!");
static_assert(offsetof(USQBlastComponent, BlastShockwave) == 0x000220, "Member 'USQBlastComponent::BlastShockwave' has a wrong offset!");

// Class Squad.SQMultiThreadBPSubsystem
// 0x0018 (0x0048 - 0x0030)
class USQMultiThreadBPSubsystem final : public UEngineSubsystem
{
public:
	uint8                                         Pad_ED6[0x8];                                      // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMultithreadObjectPair>         MultithreadObjects;                                // 0x0038(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMultiThreadBPSubsystem">();
	}
	static class USQMultiThreadBPSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMultiThreadBPSubsystem>();
	}
};
static_assert(alignof(USQMultiThreadBPSubsystem) == 0x000008, "Wrong alignment on USQMultiThreadBPSubsystem");
static_assert(sizeof(USQMultiThreadBPSubsystem) == 0x000048, "Wrong size on USQMultiThreadBPSubsystem");
static_assert(offsetof(USQMultiThreadBPSubsystem, MultithreadObjects) == 0x000038, "Member 'USQMultiThreadBPSubsystem::MultithreadObjects' has a wrong offset!");

// Class Squad.SQEquipableItem
// 0x0250 (0x0478 - 0x0228)
class ASQEquipableItem : public AActor
{
public:
	class USQItemStaticInfo*                      ItemStaticInfo;                                    // 0x0228(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class USQItemStaticInfo>          ItemStaticInfoClass;                               // 0x0230(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_ED7[0x28];                                     // 0x0238(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnPawnOwnerChangedEvent;                           // 0x0260(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0270(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ItemDescription;                                   // 0x0288(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         RearmTypesAllowed;                                 // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseOwnerAsMasterPose;                             // 0x02A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ED8[0x3];                                      // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AmmoPerRearmItem;                                  // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ED9[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UnequippedNetUpdateRate;                           // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQEquippableActionState                      ActionState;                                       // 0x02B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EDA[0x3];                                      // 0x02B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace1D*                          SprintBlendspace;                                  // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          WalkForwardAnim;                                   // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          IdleAnim;                                          // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          UseAnim;                                           // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          StandAnim;                                         // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          EquipAnim;                                         // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          UnequipAnim;                                       // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AltUseAnim;                                        // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Custom1Anim;                                       // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Custom2Anim;                                       // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Custom3Anim;                                       // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          PreUseAnim;                                        // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          PostUseAnim;                                       // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          PreAltUseAnim;                                     // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          PostAltUseAnim;                                    // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             HUDSelectedTexture;                                // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             HUDTexture;                                        // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ItemCountIconTexture;                              // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowItemCountInInventory;                         // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowMagCountInInventory;                          // 0x0349(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowAmmoDataInHud;                                // 0x034A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChangeDormancyOnEquipState;                       // 0x034B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCount;                                         // 0x034C(0x0004)(BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxItemCount;                                      // 0x0350(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCannotRearm : 1;                                  // 0x0354(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_EDB[0xB];                                      // 0x0355(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	class USQItemSkinCollection*                  AppliedSkinCollection;                             // 0x0360(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EDC[0x4];                                      // 0x0368(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EquipDuration;                                     // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         UnequipDuration;                                   // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EDD[0x8];                                      // 0x0374(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RearmCounterMultiplier;                            // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                        Root;                                              // 0x0380(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 Mesh1P;                                            // 0x0388(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 Mesh3P;                                            // 0x0390(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APawn*                                  PawnOwner;                                         // 0x0398(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APlayerController*                      LocalPlayerController;                             // 0x03A0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             PlayAnimationEvent;                                // 0x03A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             PauseAnimationEvent;                               // 0x03B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             ResumeAnimationEvent;                              // 0x03C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             SetAnimationPlayRateEvent;                         // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             EndLoopAnimationEvent;                             // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             StopAnimationEvent;                                // 0x03F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	struct FSQAudioComponentPool                  AudioComponentPool;                                // 0x0408(0x0020)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UAnimInstance*                          CachedWeapon1pAnimInstance;                        // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimInstance*                          CachedWeapon3pAnimInstance;                        // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQAnimInstanceSoldier1P*               CachedSoldier1pAnimInstance;                       // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQAnimInstanceSoldier3P*               CachedSoldier3pAnimInstance;                       // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CachedEquipDuration;                               // 0x0448(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CachedUnequipDuration;                             // 0x044C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESQEquippableState                            EquipState;                                        // 0x0450(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCachedMoveBobbing;                                // 0x0451(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCachedSprintBobbing;                              // 0x0452(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCachedHasMovement;                                // 0x0453(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCachedIsPullingTrigger;                           // 0x0454(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCachedIsLeaningRight;                             // 0x0455(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCachedIsLeaningLeft;                              // 0x0456(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EDE[0x1];                                      // 0x0457(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CachedDeltaTime;                                   // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EDF[0x1C];                                     // 0x045C(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeginAltUse();
	void BeginUse();
	void BlueprintDrawHUD(class UCanvas* Canvas);
	void BlueprintOnEquip();
	void BlueprintOnEquipped();
	void BlueprintOnUnequip();
	void BlueprintOnUnequipped();
	void BlueprintUpdateFirstPersonVisibility(bool bIsFirstPersonVisible);
	void BPBeginAltUse();
	void BPBeginUse();
	void BPEndAltUse();
	void BPEndUse();
	void Drop();
	void EndAltUse();
	void EndUse();
	struct FVector GetFireDirection();
	class USkeletalMeshComponent* GetMesh(bool bGetMesh1P);
	bool HasAmmo();
	void Hide();
	void InitializeAmmoValues(const struct FSQInventoryData& ItemClass, bool bSpawnMaxAmmo, const struct FSQPersistedAmmoCount& PersistedAmmo);
	void MulticastStopAllMontages3P();
	void PendingEquip();
	void Pickup();
	void PlayEquipAnimation();
	void PlaySoundAttachedToWeapon(class USoundCue* Sound1p, class USoundCue* Sound3p, const class FName& SocketName, const struct FVector& FallbackOrigin);
	void PlayUnequipAnimation();
	float Rearm(int32 Quantity);
	void ReinitializeAnimInstances();
	void ReinitializeEquip();
	void ServerConsumeItem();
	void SetLoweringAnimation(bool bLowered);
	void SetRaisingAnimation(bool bRaised);
	void StopAllMontages3P(const float blendOutTime);
	void UpdateFirstPersonVisibility();
	void UpdateItemVisibility(bool NewVisibility);
	void UpdateLeanLeft();
	void UpdateLeanRight();
	void UpdateMoveBobbing();
	void UpdateMoveInputs(bool bForceStopLoop);
	void UpdateSprintBobbing(bool bForceStopLoop);

	float CalculateMaxAmmoCost(int32 MaxCount) const;
	float CalculateMissingAmmoCost() const;
	int32 CalculateMissingRearmItems() const;
	float CalculateRearmAmmoCost(int32 QuantityToRearm) const;
	bool CanAltUse() const;
	bool CanRearm() const;
	bool CanRearmFromType(ESQRearmType RearmType) const;
	class ASQDeployable* CanShovel(int32 ShovelTraceLength, float ShovelTraceSphereRadius, const TArray<EObjectTypeQuery>& ObjectTypes, bool bRemovingHealth) const;
	bool CanUse() const;
	struct FSQPersistedAmmoCount CreatePersistingAmmoCount() const;
	class AController* GetController() const;
	class USQItemStaticInfo* GetItemStaticInfo() const;
	class APawn* GetOwnerPawn() const;
	int32 GetRearmItemCount() const;
	int32 GetRearmMaxItemCount() const;
	bool IsAmmoFull() const;
	bool IsBeingUsed() const;
	bool IsEquipped() const;
	bool IsFirstPersonViewTarget() const;
	class ASQDeployable* ShovelHitDeployable(const struct FHitResult& HitResult, bool bRemovingHealth) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEquipableItem">();
	}
	static class ASQEquipableItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEquipableItem>();
	}
};
static_assert(alignof(ASQEquipableItem) == 0x000008, "Wrong alignment on ASQEquipableItem");
static_assert(sizeof(ASQEquipableItem) == 0x000478, "Wrong size on ASQEquipableItem");
static_assert(offsetof(ASQEquipableItem, ItemStaticInfo) == 0x000228, "Member 'ASQEquipableItem::ItemStaticInfo' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, ItemStaticInfoClass) == 0x000230, "Member 'ASQEquipableItem::ItemStaticInfoClass' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, OnPawnOwnerChangedEvent) == 0x000260, "Member 'ASQEquipableItem::OnPawnOwnerChangedEvent' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, DisplayName) == 0x000270, "Member 'ASQEquipableItem::DisplayName' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, ItemDescription) == 0x000288, "Member 'ASQEquipableItem::ItemDescription' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, RearmTypesAllowed) == 0x0002A0, "Member 'ASQEquipableItem::RearmTypesAllowed' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, bUseOwnerAsMasterPose) == 0x0002A4, "Member 'ASQEquipableItem::bUseOwnerAsMasterPose' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, AmmoPerRearmItem) == 0x0002A8, "Member 'ASQEquipableItem::AmmoPerRearmItem' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, UnequippedNetUpdateRate) == 0x0002B0, "Member 'ASQEquipableItem::UnequippedNetUpdateRate' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, ActionState) == 0x0002B4, "Member 'ASQEquipableItem::ActionState' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, SprintBlendspace) == 0x0002B8, "Member 'ASQEquipableItem::SprintBlendspace' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, WalkForwardAnim) == 0x0002C0, "Member 'ASQEquipableItem::WalkForwardAnim' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, IdleAnim) == 0x0002C8, "Member 'ASQEquipableItem::IdleAnim' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, UseAnim) == 0x0002D0, "Member 'ASQEquipableItem::UseAnim' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, StandAnim) == 0x0002D8, "Member 'ASQEquipableItem::StandAnim' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, EquipAnim) == 0x0002E0, "Member 'ASQEquipableItem::EquipAnim' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, UnequipAnim) == 0x0002E8, "Member 'ASQEquipableItem::UnequipAnim' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, AltUseAnim) == 0x0002F0, "Member 'ASQEquipableItem::AltUseAnim' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, Custom1Anim) == 0x0002F8, "Member 'ASQEquipableItem::Custom1Anim' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, Custom2Anim) == 0x000300, "Member 'ASQEquipableItem::Custom2Anim' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, Custom3Anim) == 0x000308, "Member 'ASQEquipableItem::Custom3Anim' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, PreUseAnim) == 0x000310, "Member 'ASQEquipableItem::PreUseAnim' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, PostUseAnim) == 0x000318, "Member 'ASQEquipableItem::PostUseAnim' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, PreAltUseAnim) == 0x000320, "Member 'ASQEquipableItem::PreAltUseAnim' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, PostAltUseAnim) == 0x000328, "Member 'ASQEquipableItem::PostAltUseAnim' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, HUDSelectedTexture) == 0x000330, "Member 'ASQEquipableItem::HUDSelectedTexture' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, HUDTexture) == 0x000338, "Member 'ASQEquipableItem::HUDTexture' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, ItemCountIconTexture) == 0x000340, "Member 'ASQEquipableItem::ItemCountIconTexture' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, bShowItemCountInInventory) == 0x000348, "Member 'ASQEquipableItem::bShowItemCountInInventory' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, bShowMagCountInInventory) == 0x000349, "Member 'ASQEquipableItem::bShowMagCountInInventory' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, bShowAmmoDataInHud) == 0x00034A, "Member 'ASQEquipableItem::bShowAmmoDataInHud' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, bChangeDormancyOnEquipState) == 0x00034B, "Member 'ASQEquipableItem::bChangeDormancyOnEquipState' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, ItemCount) == 0x00034C, "Member 'ASQEquipableItem::ItemCount' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, MaxItemCount) == 0x000350, "Member 'ASQEquipableItem::MaxItemCount' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, AppliedSkinCollection) == 0x000360, "Member 'ASQEquipableItem::AppliedSkinCollection' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, EquipDuration) == 0x00036C, "Member 'ASQEquipableItem::EquipDuration' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, UnequipDuration) == 0x000370, "Member 'ASQEquipableItem::UnequipDuration' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, RearmCounterMultiplier) == 0x00037C, "Member 'ASQEquipableItem::RearmCounterMultiplier' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, Root) == 0x000380, "Member 'ASQEquipableItem::Root' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, Mesh1P) == 0x000388, "Member 'ASQEquipableItem::Mesh1P' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, Mesh3P) == 0x000390, "Member 'ASQEquipableItem::Mesh3P' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, PawnOwner) == 0x000398, "Member 'ASQEquipableItem::PawnOwner' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, LocalPlayerController) == 0x0003A0, "Member 'ASQEquipableItem::LocalPlayerController' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, PlayAnimationEvent) == 0x0003A8, "Member 'ASQEquipableItem::PlayAnimationEvent' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, PauseAnimationEvent) == 0x0003B8, "Member 'ASQEquipableItem::PauseAnimationEvent' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, ResumeAnimationEvent) == 0x0003C8, "Member 'ASQEquipableItem::ResumeAnimationEvent' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, SetAnimationPlayRateEvent) == 0x0003D8, "Member 'ASQEquipableItem::SetAnimationPlayRateEvent' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, EndLoopAnimationEvent) == 0x0003E8, "Member 'ASQEquipableItem::EndLoopAnimationEvent' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, StopAnimationEvent) == 0x0003F8, "Member 'ASQEquipableItem::StopAnimationEvent' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, AudioComponentPool) == 0x000408, "Member 'ASQEquipableItem::AudioComponentPool' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, CachedWeapon1pAnimInstance) == 0x000428, "Member 'ASQEquipableItem::CachedWeapon1pAnimInstance' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, CachedWeapon3pAnimInstance) == 0x000430, "Member 'ASQEquipableItem::CachedWeapon3pAnimInstance' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, CachedSoldier1pAnimInstance) == 0x000438, "Member 'ASQEquipableItem::CachedSoldier1pAnimInstance' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, CachedSoldier3pAnimInstance) == 0x000440, "Member 'ASQEquipableItem::CachedSoldier3pAnimInstance' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, CachedEquipDuration) == 0x000448, "Member 'ASQEquipableItem::CachedEquipDuration' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, CachedUnequipDuration) == 0x00044C, "Member 'ASQEquipableItem::CachedUnequipDuration' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, EquipState) == 0x000450, "Member 'ASQEquipableItem::EquipState' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, bCachedMoveBobbing) == 0x000451, "Member 'ASQEquipableItem::bCachedMoveBobbing' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, bCachedSprintBobbing) == 0x000452, "Member 'ASQEquipableItem::bCachedSprintBobbing' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, bCachedHasMovement) == 0x000453, "Member 'ASQEquipableItem::bCachedHasMovement' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, bCachedIsPullingTrigger) == 0x000454, "Member 'ASQEquipableItem::bCachedIsPullingTrigger' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, bCachedIsLeaningRight) == 0x000455, "Member 'ASQEquipableItem::bCachedIsLeaningRight' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, bCachedIsLeaningLeft) == 0x000456, "Member 'ASQEquipableItem::bCachedIsLeaningLeft' has a wrong offset!");
static_assert(offsetof(ASQEquipableItem, CachedDeltaTime) == 0x000458, "Member 'ASQEquipableItem::CachedDeltaTime' has a wrong offset!");

// Class Squad.SQRepairEquipable
// 0x0018 (0x0490 - 0x0478)
class ASQRepairEquipable : public ASQEquipableItem
{
public:
	float                                         TraceLengthCentimeters;                            // 0x0478(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EE6[0x4];                                      // 0x047C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQVehicle*                             RepairTarget;                                      // 0x0480(0x0008)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioComponent*                        AudioComponent;                                    // 0x0488(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnRep_RepairedTarget(class ASQVehicle* PreviousRepairedTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRepairEquipable">();
	}
	static class ASQRepairEquipable* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQRepairEquipable>();
	}
};
static_assert(alignof(ASQRepairEquipable) == 0x000008, "Wrong alignment on ASQRepairEquipable");
static_assert(sizeof(ASQRepairEquipable) == 0x000490, "Wrong size on ASQRepairEquipable");
static_assert(offsetof(ASQRepairEquipable, TraceLengthCentimeters) == 0x000478, "Member 'ASQRepairEquipable::TraceLengthCentimeters' has a wrong offset!");
static_assert(offsetof(ASQRepairEquipable, RepairTarget) == 0x000480, "Member 'ASQRepairEquipable::RepairTarget' has a wrong offset!");
static_assert(offsetof(ASQRepairEquipable, AudioComponent) == 0x000488, "Member 'ASQRepairEquipable::AudioComponent' has a wrong offset!");

// Class Squad.SQSoldier
// 0x2170 (0x2630 - 0x04C0)
class ASQSoldier : public ACharacter
{
public:
	uint8                                         Pad_EE7[0x44];                                     // 0x04B8(0x0044)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BuddyBoosterMaximumVelocitySquared;                // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQUsableData                          UsableData;                                        // 0x0500(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       DynamicFirstPersonMeshMaterials;                   // 0x0540(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 Mesh1P;                                            // 0x0550(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 Mesh1PShadow;                                      // 0x0558(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableTickUpdateShiftMesh : 1;                    // 0x0560(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_EE8[0x3];                                      // 0x0561(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ShiftMeshOffset;                                   // 0x0564(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Prone2SprintMovementRecovery;                      // 0x0570(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Prone2SprintAlpha;                                 // 0x0574(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQConsoleVariablesComponent*           ConsoleVariablesComponent;                         // 0x0578(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USkeletalMesh*>                  SoldierMeshSkins;                                  // 0x0580(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     BasePatchMaterial;                                 // 0x0590(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraComponent*                       FirstPersonCameraComponent;                        // 0x0598(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponBasedFOV;                                    // 0x05A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EE9[0x4];                                      // 0x05A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQSoldierMovement*                     SoldierMovement;                                   // 0x05A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USphereComponent*                       SnapZone;                                          // 0x05B0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EEA[0x8];                                      // 0x05B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   LowHealthPostProcessSettings;                      // 0x05C0(0x0560)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPostProcessSettings                   BleedingPostProcessSettings;                       // 0x0B20(0x0560)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPostProcessSettings                   SuppressionPostProcessSettings;                    // 0x1080(0x0560)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         bAllowEffectsForProjectilesFiredWithinSuppressionRange : 1; // 0x15E0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_EEB[0x3];                                      // 0x15E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UnderSuppressionPercentage;                        // 0x15E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSuppressionPercentage;                          // 0x15E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuppressionEffectsDecayRate;                       // 0x15EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuppressionMultiplier;                             // 0x15F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PunchInterpSpeed;                                  // 0x15F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               WeaponPunchSway;                                   // 0x15F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               WeaponPunchAlignment;                              // 0x1604(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                WeaponPunchLocation;                               // 0x1610(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseTurnRate;                                      // 0x161C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseLookUpRate;                                    // 0x1620(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxProneTurnRate;                                  // 0x1624(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ADSToSprintDot;                                    // 0x1628(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsDoubleTapWalking : 1;                           // 0x162C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_EEC[0x3];                                      // 0x162D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                GunOffset;                                         // 0x1630(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProneEyeHeight;                                    // 0x163C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsProne : 1;                                      // 0x1640(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_3C : 7;                                     // 0x0040(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         Pad_EED[0xF];                                      // 0x1641(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bInThirdPersonView : 1;                            // 0x1650(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCachedInThirdPerson : 1;                          // 0x1650(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_EEE[0x3];                                      // 0x1651(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachSocket1PName;                                // 0x1654(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocket3PName;                                // 0x165C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EEF[0x4];                                      // 0x1664(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQCoreStateComponent*                  StateObject;                                       // 0x1668(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQMapIconComponent*                    MapIcon;                                           // 0x1670(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondsUntilIgnoreDistanceForAliveTeamMates;       // 0x1678(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondsOfSpawnProtection;                          // 0x167C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InvulnerableDelay;                                 // 0x1680(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RagdollLifeSpan;                                   // 0x1684(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UnpossessionDelayAfterDeath;                       // 0x1688(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EF0[0x4];                                      // 0x168C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQBoneDamageMod>               BoneDamageModifiers;                               // 0x1690(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_EF1[0x30];                                     // 0x16A0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         LeaningDirection;                                  // 0x16D0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EF2[0x3];                                      // 0x16D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlockLeanTraceDistance;                            // 0x16D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchAngleAdjust;                                  // 0x16D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlockLeanTraceRotation;                            // 0x16DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProneBlockLeanTraceDistance;                       // 0x16E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PronePitchAngleAdjust;                             // 0x16E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProneBlockLeanTraceRotation;                       // 0x16E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UseInteractDistance;                               // 0x16EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 UseFocus;                                          // 0x16F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EF3[0x8];                                      // 0x16F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USphereComponent*                       InteractableVolumeForDragging;                     // 0x1700(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InteractableRadiusMultiplier;                      // 0x1708(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SnapZoneRadius;                                    // 0x170C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistanceToSuppressedTarget;                     // 0x1710(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FullSuppressionRadius;                             // 0x1714(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuppressionWallIgnoranceRange;                     // 0x1718(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EF4[0x8];                                      // 0x171C(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SuppressionRadius;                                 // 0x1724(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQVehicleSeatComponent*                CurrentSeat;                                       // 0x1728(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bTestingMove : 1;                                  // 0x1730(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_EF5[0x3];                                      // 0x1731(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CachedMoveRotation;                                // 0x1734(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CachedMoveRotationPoint;                           // 0x1738(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CachedForwardVector;                               // 0x1744(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChangedSeat;                                     // 0x1750(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         bStopADSWhenSprintPressed : 1;                     // 0x1760(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bStopADSWhenPronePressed : 1;                      // 0x1760(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bStopADSWhenUnpronePressed : 1;                    // 0x1760(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bStopSprintWhenADSPressed : 1;                     // 0x1760(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bStopUsingPrimaryItemWhenPronePressed : 1;         // 0x1760(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bStopUsingAltItemWhenPronePressed : 1;             // 0x1760(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bStopUsingPrimaryItemWhenUnpronePressed : 1;       // 0x1760(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bStopUsingAltItemWhenUnpronePressed : 1;           // 0x1760(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bItemLoweredDueToCollision : 1;                    // 0x1761(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCachedADSDuringItemCollision : 1;                 // 0x1761(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_EF6[0x2];                                      // 0x1762(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FreeAimVerticalInput;                              // 0x1764(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FreeAimHorizontalInput;                            // 0x1768(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EF7[0x4];                                      // 0x176C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 UsingObject;                                       // 0x1770(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_EF8[0x50];                                     // 0x1778(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VehicleSeatEntryWeaponSlot;                        // 0x17C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         VehicleSeatEntryWeaponOffset;                      // 0x17CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EF9[0x10];                                     // 0x17D0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                SuppressionDebugWidget;                            // 0x17E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            SuppressionDebugWidgetReference;                   // 0x17E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EFA[0x4C8];                                    // 0x17F0(0x04C8)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQTakeHitInfo                         LastTakeHitInfo;                                   // 0x1CB8(0x0138)(Net, Transient, RepNotify, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         SoldierSkinIndex;                                  // 0x1DF0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EFB[0x3];                                      // 0x1DF1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bIsDying : 1;                                      // 0x1DF4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Net, EditConst, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_3D : 1;                                     // 0x1DF4(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bIsBleeding : 1;                                   // 0x1DF4(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, Net, EditConst, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsWounded : 1;                                    // 0x1DF4(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Net, EditConst, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_3E : 1;                                     // 0x1DF4(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bAllowWoundedState : 1;                            // 0x1DF4(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_EFC[0x3];                                      // 0x1DF5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Health;                                            // 0x1DF8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastHealedTime;                                    // 0x1DFC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WoundedThreshold;                                  // 0x1E00(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealthBleedableThreshold;                          // 0x1E04(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealthHurtMovementThreshold;                       // 0x1E08(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageBleedableThreshold;                          // 0x1E0C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WoundedHealthLossRate;                             // 0x1E10(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WoundedBandagedHealthLossRate;                     // 0x1E14(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BleedingHealthLossRate;                            // 0x1E18(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KillDamageThreshold;                               // 0x1E1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealthUponRevival;                                 // 0x1E20(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeBecameWounded;                                 // 0x1E24(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeBecameRevived;                                 // 0x1E28(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PostRecoveryUpdateRate;                            // 0x1E2C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           PostRecoveryTimerHandle;                           // 0x1E30(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PostRecoveryTimeLeft;                              // 0x1E38(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EFD[0x4];                                      // 0x1E3C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            PostRecoveryRateByHealthCurve;                     // 0x1E40(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CumulativeRevivePenalty;                           // 0x1E48(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsHoldingBreath : 1;                              // 0x1E4C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_EFE[0x3];                                      // 0x1E4D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BreathHoldStamina;                                 // 0x1E50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BreathHoldStaminaMax;                              // 0x1E54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BreathHoldRecoveryDuration;                        // 0x1E58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BreathHoldConsumptionDuration;                     // 0x1E5C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BreathHoldFadeDuration;                            // 0x1E60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BreathHoldPct;                                     // 0x1E64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FocusZoomAlpha;                                    // 0x1E68(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFocusing;                                       // 0x1E6C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EFF[0x3];                                      // 0x1E6D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            FallSpeedToFallDamageCurve;                        // 0x1E70(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallingDamageMultiplier;                           // 0x1E78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumSafeFallingSpeed;                           // 0x1E7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BonkOnHeadFallDamageMultiplier;                    // 0x1E80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F00[0x4];                                      // 0x1E84(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnRevivedEvent;                                    // 0x1E88(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         bIsLeavingServer : 1;                              // 0x1E98(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_F01[0x7];                                      // 0x1E99(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ESQStance, struct FSQLeaningConfig>      LeaningConfig;                                     // 0x1EA0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         LeanMovementInterpSpeed;                           // 0x1EF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F02[0x4];                                      // 0x1EF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundMix*                              WoundedSoundMix;                                   // 0x1EF8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundMix*                              BleedingSoundMix;                                  // 0x1F00(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             WaterFeetBottomEnterSound;                         // 0x1F08(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             WaterAboveHipEnterSound;                           // 0x1F10(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             WaterJumpSound;                                    // 0x1F18(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        WaterAC;                                           // 0x1F20(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        DeepWaterAC;                                       // 0x1F28(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQSoldierRagdollAudioComponent*        RagdollAudioComponent;                             // 0x1F30(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQListenerType                               ListenerType;                                      // 0x1F38(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F03[0x7];                                      // 0x1F39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveLinearColor*                      HealthBasedFilterGainCurve;                        // 0x1F40(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseHealthBasedFilterGainCurveForWoundedSoundMix : 1; // 0x1F48(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseHealthBasedFilterGainCurveForBleedingSoundMix : 1; // 0x1F48(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_F04[0x7];                                      // 0x1F49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            HeartbeatVolumeCurve;                              // 0x1F50(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             HeartbeatSound;                                    // 0x1F58(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             HeartbeatIncapSound;                               // 0x1F60(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             DefaultLandedSound;                                // 0x1F68(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             HitSound;                                          // 0x1F70(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             FirstPersonHitSound;                               // 0x1F78(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             IncapSound;                                        // 0x1F80(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSQBoneHitSound>                BoneHitSounds;                                     // 0x1F88(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         IncapSoundOccurrencePercentage;                    // 0x1F98(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WoundedSoundMixDelaySeconds;                       // 0x1F9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bPlayIncapSound : 1;                               // 0x1FA0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_F05[0x7];                                      // 0x1FA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             DeathSound;                                        // 0x1FA8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             ClothingSound;                                     // 0x1FB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             EquipmentSound;                                    // 0x1FB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             ResupplyCrateSound;                                // 0x1FC0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeathSoundOccurrencePercentage;                    // 0x1FC8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bPlayDeathSound : 1;                               // 0x1FCC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_F06[0x3];                                      // 0x1FCD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        FoleyAC;                                           // 0x1FD0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        HeartbeatAC;                                       // 0x1FD8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        HeartbeatIncapAC;                                  // 0x1FE0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQPhysicalMaterialSoldiersEffects> PhysMatEffectsClass;                               // 0x1FE8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bPerfToggleMultiCastLean : 1;                      // 0x1FF0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_F07[0x7];                                      // 0x1FF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           DelayedUnposessTimer;                              // 0x1FF8(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPhysicsHandleComponent*                DraggingHandle;                                    // 0x2000(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSQDraggingData                        DraggingData;                                      // 0x2008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         DraggingDistanceMultiplier;                        // 0x2018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F08[0x4];                                      // 0x201C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           StartDraggingTimerHandle;                          // 0x2020(0x0008)(Edit, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StartDraggingDelay;                                // 0x2028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F09[0x4];                                      // 0x202C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQDraggableBone>               DraggableBones;                                    // 0x2030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class USQSoldierRagdollComponent*             RagdollComponent;                                  // 0x2040(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQBuffManager*                         Buffs;                                             // 0x2048(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnWoundEvent;                                      // 0x2050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0A[0x8];                                      // 0x2060(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnDeathEvent;                                      // 0x2068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         bBodyDraggingActive : 1;                           // 0x2078(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_F0B[0x7];                                      // 0x2079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQSoldierStaticInfo*                   SoldierStaticInfo;                                 // 0x2080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultDrowningHeight;                             // 0x2088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrouchedDrowningHeight;                            // 0x208C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProneDrowningHeight;                               // 0x2090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQUnderwaterBoneData                  UnderwaterBoneData;                                // 0x2094(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0C[0x4];                                      // 0x20BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        WaterFeetEnterEffect;                              // 0x20C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NiagaraWaterFeetEnterEffect;                       // 0x20C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        WaterDeepEnterEffect;                              // 0x20D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NiagaraWaterDeepEnterEffect;                       // 0x20D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQBaseWaterComponent*                  BaseWaterComponent;                                // 0x20E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQSoldierWaterDamageComponent*         WaterDamageComponent;                              // 0x20E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQWaterPointTestComponent*             WaterPointTestComponent;                           // 0x20F0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0D[0x10];                                     // 0x20F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class USQPawnInventoryComponent*              InventoryComponent;                                // 0x2108(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F0E[0x8];                                      // 0x2110(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundMix*                              CurrentSoundMix;                                   // 0x2118(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FVector_NetQuantize>            ZeroBasedBoneLocs;                                 // 0x2120(0x0010)(Net, ZeroConstructor, NativeAccessSpecifierPrivate)
	class USQItemStaticInfo*                      CurrentItemStaticInfo;                             // 0x2130(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0F[0x10];                                     // 0x2138(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class USQBotComponent*                        BotComponent;                                      // 0x2148(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 UpperMesh1P;                                       // 0x2150(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpringArmComponent*                    SpringArm1P;                                       // 0x2158(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           IdleMontage;                                       // 0x2160(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ControlRotation;                                   // 0x2168(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               AimRotation1P;                                     // 0x2174(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RequiredProneTransitionTime;                       // 0x2180(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCachedIsUsingItem;                                // 0x2184(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCachedIsUsingGrenade;                             // 0x2185(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCachedLeanLeft;                                   // 0x2186(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCachedLeanRight;                                  // 0x2187(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CachedFwdPct;                                      // 0x2188(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CachedStrafePct;                                   // 0x218C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShot;                                             // 0x2190(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasCrouchedBeforeProne;                           // 0x2191(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCameraRecoilActive;                             // 0x2192(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F10[0x1];                                      // 0x2193(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpringArmTargetHeight1p;                           // 0x2194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringArmHeight1pInterpSpeed;                      // 0x2198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TempSpringArmHeight1p;                             // 0x219C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentSpringArmHeight1p;                          // 0x21A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringArmClimbingHeight;                           // 0x21A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringArmCrouchingMovingHeight;                    // 0x21A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringArmCrouchingStaticHeight;                    // 0x21AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringArmProneHeight;                              // 0x21B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Base1pOffset;                                      // 0x21B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RawBase1pOffset;                                   // 0x21C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSwitchedSoldierStance;                            // 0x21CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EThirdPersonCameraMode                        ViewMode3p;                                        // 0x21CD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F11[0x2];                                      // 0x21CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ViewPos3p;                                         // 0x21D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewDistance3p;                                    // 0x21DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ViewOrientation3p;                                 // 0x21E0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ViewScrollDistance3p;                              // 0x21EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ViewAdjustingDelta3p;                              // 0x21F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ViewTogglePressTime;                               // 0x21FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdjustingView3p;                                  // 0x2200(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLastInThirdPersonView;                            // 0x2201(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F12[0x6];                                      // 0x2202(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           StartCrouch_1P_Montage;                            // 0x2208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           EndCrouch_1P_Montage;                              // 0x2210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           DraggingStart1pMontage;                            // 0x2218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           DraggingStart3pMontage;                            // 0x2220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           DraggingEnd1pMontage;                              // 0x2228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           DraggingEnd3pMontage;                              // 0x2230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQEquipableItem*                       PreviousWeapon;                                    // 0x2238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreviousWeaponMagHasAmmo;                         // 0x2240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCachedIsSprinting;                                // 0x2241(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F13[0x6];                                      // 0x2242(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        WeaponDeviationRot;                                // 0x2248(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAccuracyDebugVisible;                             // 0x2250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F14[0x7];                                      // 0x2251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQAnimInstanceSoldier3P*               CachedAnimInstance3p;                              // 0x2258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQAnimInstanceSoldier1P*               CachedAnimInstance1p;                              // 0x2260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoldierPlayTime1p;                                 // 0x2268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoldierPlayTime3p;                                 // 0x226C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPawnPossessedEvent;                              // 0x2270(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPawnUnPossessedEvent;                            // 0x2280(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FSQClimbData                           ClimbData;                                         // 0x2290(0x0150)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_F15[0x2];                                      // 0x23E0(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bClimbingEnabled;                                  // 0x23E2(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F16[0x5];                                      // 0x23E3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQClimbInfo                           ClimbInfo;                                         // 0x23E8(0x0030)(Net, RepNotify, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F17[0x88];                                     // 0x2418(0x0088)(Fixing Size After Last Property [ Dumper-7 ])
	class USQBoundaryListener*                    BoundaryListener;                                  // 0x24A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F18[0x8];                                      // 0x24A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USQFreeLookComponent*                   FreeLookComponent;                                 // 0x24B0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               VaultClimbAo;                                      // 0x24B8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               CachedVaultClimbAo2;                               // 0x24C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CachedVaultClimbAoYawInterpSpeed;                  // 0x24D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CachedVaultClimbAoPitchInterpSpeed;                // 0x24D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bipod3pSkelMeshOffset;                             // 0x24D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeginBipod3pSkelMeshOffset;                        // 0x24DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CachedBipodTransitionAlpha;                        // 0x24E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBipodDeployed;                                  // 0x24E4(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F19[0x3];                                      // 0x24E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BipodHitLocZeroBased;                              // 0x24E8(0x000C)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F1A[0x4];                                      // 0x24F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        BipodObject;                                       // 0x24F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F1B[0xC];                                      // 0x2500(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CachedDeployed1pBipodLocation;                     // 0x250C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BipodHitLocSpringArm1PHeight;                      // 0x2518(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BipodNonDeployedSpringArm1pRelativeHeight;         // 0x251C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F1C[0x74];                                     // 0x2520(0x0074)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BipodSpringArmFloorTraceLength;                    // 0x2594(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeployedBipodCapsuleRadius;                        // 0x2598(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BipodClientServerAcceptableRange;                  // 0x259C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BipodObjectMaxDelta;                               // 0x25A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BipodDepth;                                        // 0x25A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BipodStandingMinDeployHeight;                      // 0x25A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BipodStandingMaxDeployHeight;                      // 0x25AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BipodCrouchingMinDeployHeight;                     // 0x25B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BipodCrouchingMaxDeployHeight;                     // 0x25B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BipodProneMinDeployHeight;                         // 0x25B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BipodProneMaxDeployHeight;                         // 0x25BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BipodCameraProbeSize;                              // 0x25C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1D[0x4];                                      // 0x25C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bWeaponLowered;                                    // 0x25C8(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F1E[0x3];                                      // 0x25C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ChestSocketName;                                   // 0x25CC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsChestImmersed : 1;                              // 0x25D4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bItemRaisedAboveHead : 1;                          // 0x25D4(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_F1F[0x3];                                      // 0x25D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USQAnimDataEmotes*                      EmoteData;                                         // 0x25D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQVoipAnim                            MouthAnim;                                         // 0x25E0(0x0020)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FSQVoipAnim                            HandActionRadioAnim;                               // 0x2600(0x0020)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsPlayingVoipHandAnim;                            // 0x2620(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F20[0x7];                                      // 0x2621(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQEmotePlayer*                         EmotePlayer;                                       // 0x2628(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool AttemptRadialSuppression(const struct FVector& SuppressionOrigin, const class AActor* SuppressionInstigator, TSubclassOf<class USQRadialSuppressionInfo> SuppressionInfoClass);
	bool AttemptSuppression(const struct FVector& SuppressionStart, const struct FVector& SuppressionEnd, const class AActor* ProjectileInstigator, TSubclassOf<class USQSuppressionInfo> SuppressionInfoClass, struct FVector* OutClosestPoint, bool* bOutApplySuppression);
	bool AttemptToRearmWeapons(TScriptInterface<class ISQRearmSource> RearmSource, const TArray<struct FSQRearmWeaponRequest>& RearmRequest);
	void BeginAltFireWeapon();
	void BeginFireWeapon();
	void BeginInteract();
	void BlueprintCalcCamera(float DeltaTime, const struct FVector& InLocation, const struct FRotator& InRotation, float InFOV, struct FVector* OutLocation, struct FRotator* OutRotation, float* OutFOV);
	void BlueprintUpdateFirstPersonVisibility(bool bIsFirstPersonVisible);
	void BlueprintUpdateSkin();
	void BPBleedingDamageTaken(float Damage);
	void BPDie(float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser);
	void BPOnEndProne(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void BPOnSnapZoneOverlapBegin(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BPOnSnapZoneOverlapEnd(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BPOnStartProne(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void BPWound(float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser);
	void BPWoundedDamageTaken(float Damage);
	void CalcCamera_BP(float DeltaTime, const struct FVector& InLocation, const struct FRotator& InRotation, float InFOV, struct FVector* OutLocation, struct FRotator* OutRotation, float* OutFOV);
	void ChangeSoundMix(class USoundMix* NewSoundMix);
	void ClearSeatState();
	void ClientRejectBipod();
	void ClientRejectClimb();
	void CycleThirdPersonViewMode();
	void CycleVariableWeaponMagnification();
	void DeactivateSprintState(bool bHasMovementInput);
	void DebugAddAmmoSupply(int32 Amount);
	void DebugAddBuildSupply(int32 Amount);
	void DebugFullHealth();
	void DebugRagdoll();
	void DebugRevive();
	void DebugSetHealth(float Value);
	void DebugStopBleeding();
	void DebugToggleGodMode();
	void DebugToggleOriginRebaseTest(bool Value);
	void DebugTogglePostRecovery(bool Value);
	void DecreaseCameraDistance();
	bool Die(float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser);
	void DisableSpawnProtection();
	void EndAimDownSights();
	void EndAltFireWeapon();
	void EndFireWeapon();
	void EndInteract();
	void EnteredSeat(class USQVehicleSeatComponent* PreviousSeat, class USQVehicleSeatComponent* NewSeat, bool bSwitchedSeats, bool bEnteredVehicle);
	void EnteredVehicle(class USQVehicleSeatComponent* NewSeat);
	float GetDamageForFallingAtSpeed(const float InFallSpeed, const float InBaseHealth);
	float GetDrowningHeight();
	class ASQForwardBase* GetNearestFOB(bool bIsFriendly);
	ESQSoldierSeatState GetSeatState();
	void Heal(float AmountHealed);
	void IncreaseCameraDistance();
	void InitiateDragging(class ASQSoldier* SoldierToDrag, int32 BoneIndex);
	void InputClimb();
	bool IsMontagePlaying(class UAnimMontage* FirstPersonAnim, class UAnimMontage* ThirdPersonAnim);
	void LeftSeat(class USQVehicleSeatComponent* PreviousSeat, bool bSwitchedSeats, bool bLeftVehicle);
	void LeftVehicle(class USQVehicleSeatComponent* PreviousSeat);
	void MulticastChangeRootComponent(const bool bSetMeshAsRoot);
	void MulticastLean(uint8 NewLeanDirection);
	void MulticastPlayCustomEmote(const class FName& CustomName);
	void MulticastPlayEmoteAnim(ESQEmotes Emote);
	void MulticastSetDragging(const bool bDrag, class ASQSoldier* SoldierToDrag, int32 BoneIndex);
	void MulticastToggleGodMode();
	void On_RepIsPlayingVoipHandAnim();
	void OnEnterBoundary(class USQBoundaryListener* Listener, class ASQBoundary* Boundary);
	void OnEquip__DelegateSignature(class USQItemStaticInfo* StaticInfo);
	void OnExitBoundary(class USQBoundaryListener* Listener, class ASQBoundary* Boundary);
	void OnFeetBottomCollideWithWaterLevel(float ImmersionDepth);
	void OnHipHeightCollideWithWaterLevel(float ImmersionDepth);
	void OnNextItem();
	void OnPossessionChanged__DelegateSignature();
	void OnPrevItem();
	void OnRagdollHit(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnRep_Bipod(bool bBipodWasDeployed);
	void OnRep_ClimbInfo(const struct FSQClimbInfo& PrevClimbInfo);
	void OnRep_CurrentSeat(class USQVehicleSeatComponent* PreviousSeat);
	void OnRep_Health(float OldHealth);
	void OnRep_IsBleeding();
	void OnRep_IsDying();
	void OnRep_IsWounded();
	void OnRep_ItemRaisedAboveHeadChanged(bool bVal);
	void OnRep_LastTakeHitInfo();
	void OnRep_SoldierSkinIndex();
	void OnRep_WeaponLoweredChanged(bool bVal);
	void OnSnapZoneOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnSnapZoneOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OutOfBoundsKillCallback();
	void PlayClothingSound(float MaxDistanceInMeters);
	void PlayEquipmentSound(float MaxDistanceInMeters);
	void PlayFootStep(const class FName SocketName, const class FName OpposingKneeSocketName, float MaxDistanceInMeters);
	void PlayOrStopAnimations(class UAnimMontage* FirstPersonAnim, class UAnimMontage* ThirdPersonAnim, bool bStopAnimation, float blendOutTime);
	void PlayOrStopMontage(class UAnimInstance* AnimInstance, class UAnimMontage* Montage, bool bStopAnimation, float blendOutTime);
	void Prone();
	void ResetFreeAimOffset();
	void ReviveServerOnly();
	void ServerBeginInteract();
	void ServerClimb(const struct FTransform& ClientTransformZeroBased, const struct FSQClimbInfo& ClientInfo, const bool InIsMovingForward);
	void ServerDebugAddAmmoSupply(int32 Amount);
	void ServerDebugAddBuildSupply(int32 Amount);
	void ServerDebugFullHealth();
	void ServerDebugRagdoll();
	void ServerDebugRevive();
	void ServerDebugSetHealth(float Value);
	void ServerDebugStopBleeding();
	void ServerDebugToggleGodMode();
	void ServerDebugTogglePostRecovery(bool Value);
	void ServerDeployableInteractable(class ASQDeployableInteractable* Deployable);
	void ServerDeployBipod(const struct FVector& RemoteBipodDeploymentLocationZeroBased, const struct FVector& RemoteActorLocationZeroBased);
	void ServerDisableSpawnProtection();
	void ServerDragBody(const bool bDrag, class ASQSoldier* SoldierToDrag, int32 BoneIndex);
	void ServerEndInteract();
	void ServerLowerWeapon(const bool bValue);
	void ServerPickupAmmoBag(class ASQDeployableAmmoBag* Ammobag);
	void ServerRaiseItemAboveHead(const bool bShouldRaise);
	void ServerRetractBipod();
	void ServerVehicleCollision(class ASQVehicle* Vehicle, bool bShouldKill);
	void SetFirstPersonVisibility(bool bIsFirstPersonVisible);
	void SetFullSuppressionRadius(float Radius);
	void SetIsHoldingBreath(bool bInIsHoldingBreath);
	void SetSeatState(ESQSoldierSeatState SoldierSeatState);
	void SetSuppressionRadius(float Radius);
	void StartAimDownSights();
	void StartBodyDragging(class ASQSoldier* SoldierToDrag, int32 BoneIndex);
	void StopBleeding();
	void StopBodyDragging();
	void Suicide();
	void SwitchedSeat(class USQVehicleSeatComponent* PreviousSeat, class USQVehicleSeatComponent* NewSeat);
	bool SwitchWeapon(int32 NewWeaponSlotla);
	void TickUpdateThirdPersonView(float DeltaTime);
	void ToggleBipod();
	void ToggleThirdPersonView();
	void ToggleViewPressed();
	void ToggleViewReleased();
	void UnProne();
	void Update1pCamStanceHeight(const float DeltaSeconds);
	void Update1pRelativeLocation();
	void UpdateCachedAnimInstance3p();
	void UpdateFirstPersonVisibility();
	void UpdatePatches();
	void UpdateStaticItemInfo(class USQItemStaticInfo* InfoObject);
	void UserSettingsChanged(const class USQGameUserSettings* Settings);
	bool Wound(float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser);

	struct FVector2D BPGetYawViewLimits(const struct FVector2D& YawViewLimits) const;
	bool CanADS() const;
	bool CanStartWithMaxAmmo() const;
	bool CheckItemCollision() const;
	float FindPerStanceValues(const float StandingValue, const float CrouchingValue, const float ProneValue, const float BipodValue) const;
	float GetChestHeight(const struct FVector& TestLocation) const;
	float GetCurrentHealthPercentage() const;
	class USQVehicleSeatComponent* GetCurrentSeat() const;
	class ASQVehicleSeat* GetCurrentSeatPawn() const;
	struct FRotator GetCurrentSeatWeaponRotation() const;
	float GetCurrentSpeedPercentage() const;
	class ASQVehicle* GetCurrentVehicle() const;
	class ASQEquipableItem* GetCurrentWeapon() const;
	bool GetFirstPersonVisibility() const;
	float GetFootHeight(const struct FVector& TestLocation) const;
	float GetHeadHeight(const struct FVector& TestLocation) const;
	float GetHipHeight(const struct FVector& TestLocation) const;
	class USQPawnInventoryComponent* GetInventory() const;
	float GetKneeHeight(const struct FVector& TestLocation) const;
	float GetMaxHealth() const;
	class ASQEquipableItem* GetPendingWeapon() const;
	int32 GetTeam() const;
	class ASQTeamState* GetTeamState() const;
	bool IsAlive() const;
	bool IsBeingDragged() const;
	bool IsClimbing(bool bRequiredOnly) const;
	bool IsDragging() const;
	bool IsFirstPersonViewTarget() const;
	bool IsImmersedPastChestHeight() const;
	bool IsImmersedPastFootHeight() const;
	bool IsImmersedPastHeadHeight() const;
	bool IsImmersedPastHipHeight() const;
	bool IsImmersedPastKneeHeight() const;
	bool IsInteracting() const;
	bool IsInVehicle() const;
	bool IsOutOfMapBounds() const;
	bool IsProneTransitioning() const;
	bool IsPullingTriggerOnWeapon() const;
	bool IsSprinting() const;
	bool IsWeaponLowered() const;
	bool WeaponMagazineHasAmmo() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSoldier">();
	}
	static class ASQSoldier* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQSoldier>();
	}
};
static_assert(alignof(ASQSoldier) == 0x000010, "Wrong alignment on ASQSoldier");
static_assert(sizeof(ASQSoldier) == 0x002630, "Wrong size on ASQSoldier");
static_assert(offsetof(ASQSoldier, BuddyBoosterMaximumVelocitySquared) == 0x0004FC, "Member 'ASQSoldier::BuddyBoosterMaximumVelocitySquared' has a wrong offset!");
static_assert(offsetof(ASQSoldier, UsableData) == 0x000500, "Member 'ASQSoldier::UsableData' has a wrong offset!");
static_assert(offsetof(ASQSoldier, DynamicFirstPersonMeshMaterials) == 0x000540, "Member 'ASQSoldier::DynamicFirstPersonMeshMaterials' has a wrong offset!");
static_assert(offsetof(ASQSoldier, Mesh1P) == 0x000550, "Member 'ASQSoldier::Mesh1P' has a wrong offset!");
static_assert(offsetof(ASQSoldier, Mesh1PShadow) == 0x000558, "Member 'ASQSoldier::Mesh1PShadow' has a wrong offset!");
static_assert(offsetof(ASQSoldier, ShiftMeshOffset) == 0x000564, "Member 'ASQSoldier::ShiftMeshOffset' has a wrong offset!");
static_assert(offsetof(ASQSoldier, Prone2SprintMovementRecovery) == 0x000570, "Member 'ASQSoldier::Prone2SprintMovementRecovery' has a wrong offset!");
static_assert(offsetof(ASQSoldier, Prone2SprintAlpha) == 0x000574, "Member 'ASQSoldier::Prone2SprintAlpha' has a wrong offset!");
static_assert(offsetof(ASQSoldier, ConsoleVariablesComponent) == 0x000578, "Member 'ASQSoldier::ConsoleVariablesComponent' has a wrong offset!");
static_assert(offsetof(ASQSoldier, SoldierMeshSkins) == 0x000580, "Member 'ASQSoldier::SoldierMeshSkins' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BasePatchMaterial) == 0x000590, "Member 'ASQSoldier::BasePatchMaterial' has a wrong offset!");
static_assert(offsetof(ASQSoldier, FirstPersonCameraComponent) == 0x000598, "Member 'ASQSoldier::FirstPersonCameraComponent' has a wrong offset!");
static_assert(offsetof(ASQSoldier, WeaponBasedFOV) == 0x0005A0, "Member 'ASQSoldier::WeaponBasedFOV' has a wrong offset!");
static_assert(offsetof(ASQSoldier, SoldierMovement) == 0x0005A8, "Member 'ASQSoldier::SoldierMovement' has a wrong offset!");
static_assert(offsetof(ASQSoldier, SnapZone) == 0x0005B0, "Member 'ASQSoldier::SnapZone' has a wrong offset!");
static_assert(offsetof(ASQSoldier, LowHealthPostProcessSettings) == 0x0005C0, "Member 'ASQSoldier::LowHealthPostProcessSettings' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BleedingPostProcessSettings) == 0x000B20, "Member 'ASQSoldier::BleedingPostProcessSettings' has a wrong offset!");
static_assert(offsetof(ASQSoldier, SuppressionPostProcessSettings) == 0x001080, "Member 'ASQSoldier::SuppressionPostProcessSettings' has a wrong offset!");
static_assert(offsetof(ASQSoldier, UnderSuppressionPercentage) == 0x0015E4, "Member 'ASQSoldier::UnderSuppressionPercentage' has a wrong offset!");
static_assert(offsetof(ASQSoldier, MaxSuppressionPercentage) == 0x0015E8, "Member 'ASQSoldier::MaxSuppressionPercentage' has a wrong offset!");
static_assert(offsetof(ASQSoldier, SuppressionEffectsDecayRate) == 0x0015EC, "Member 'ASQSoldier::SuppressionEffectsDecayRate' has a wrong offset!");
static_assert(offsetof(ASQSoldier, SuppressionMultiplier) == 0x0015F0, "Member 'ASQSoldier::SuppressionMultiplier' has a wrong offset!");
static_assert(offsetof(ASQSoldier, PunchInterpSpeed) == 0x0015F4, "Member 'ASQSoldier::PunchInterpSpeed' has a wrong offset!");
static_assert(offsetof(ASQSoldier, WeaponPunchSway) == 0x0015F8, "Member 'ASQSoldier::WeaponPunchSway' has a wrong offset!");
static_assert(offsetof(ASQSoldier, WeaponPunchAlignment) == 0x001604, "Member 'ASQSoldier::WeaponPunchAlignment' has a wrong offset!");
static_assert(offsetof(ASQSoldier, WeaponPunchLocation) == 0x001610, "Member 'ASQSoldier::WeaponPunchLocation' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BaseTurnRate) == 0x00161C, "Member 'ASQSoldier::BaseTurnRate' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BaseLookUpRate) == 0x001620, "Member 'ASQSoldier::BaseLookUpRate' has a wrong offset!");
static_assert(offsetof(ASQSoldier, MaxProneTurnRate) == 0x001624, "Member 'ASQSoldier::MaxProneTurnRate' has a wrong offset!");
static_assert(offsetof(ASQSoldier, ADSToSprintDot) == 0x001628, "Member 'ASQSoldier::ADSToSprintDot' has a wrong offset!");
static_assert(offsetof(ASQSoldier, GunOffset) == 0x001630, "Member 'ASQSoldier::GunOffset' has a wrong offset!");
static_assert(offsetof(ASQSoldier, ProneEyeHeight) == 0x00163C, "Member 'ASQSoldier::ProneEyeHeight' has a wrong offset!");
static_assert(offsetof(ASQSoldier, AttachSocket1PName) == 0x001654, "Member 'ASQSoldier::AttachSocket1PName' has a wrong offset!");
static_assert(offsetof(ASQSoldier, AttachSocket3PName) == 0x00165C, "Member 'ASQSoldier::AttachSocket3PName' has a wrong offset!");
static_assert(offsetof(ASQSoldier, StateObject) == 0x001668, "Member 'ASQSoldier::StateObject' has a wrong offset!");
static_assert(offsetof(ASQSoldier, MapIcon) == 0x001670, "Member 'ASQSoldier::MapIcon' has a wrong offset!");
static_assert(offsetof(ASQSoldier, SecondsUntilIgnoreDistanceForAliveTeamMates) == 0x001678, "Member 'ASQSoldier::SecondsUntilIgnoreDistanceForAliveTeamMates' has a wrong offset!");
static_assert(offsetof(ASQSoldier, SecondsOfSpawnProtection) == 0x00167C, "Member 'ASQSoldier::SecondsOfSpawnProtection' has a wrong offset!");
static_assert(offsetof(ASQSoldier, InvulnerableDelay) == 0x001680, "Member 'ASQSoldier::InvulnerableDelay' has a wrong offset!");
static_assert(offsetof(ASQSoldier, RagdollLifeSpan) == 0x001684, "Member 'ASQSoldier::RagdollLifeSpan' has a wrong offset!");
static_assert(offsetof(ASQSoldier, UnpossessionDelayAfterDeath) == 0x001688, "Member 'ASQSoldier::UnpossessionDelayAfterDeath' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BoneDamageModifiers) == 0x001690, "Member 'ASQSoldier::BoneDamageModifiers' has a wrong offset!");
static_assert(offsetof(ASQSoldier, LeaningDirection) == 0x0016D0, "Member 'ASQSoldier::LeaningDirection' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BlockLeanTraceDistance) == 0x0016D4, "Member 'ASQSoldier::BlockLeanTraceDistance' has a wrong offset!");
static_assert(offsetof(ASQSoldier, PitchAngleAdjust) == 0x0016D8, "Member 'ASQSoldier::PitchAngleAdjust' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BlockLeanTraceRotation) == 0x0016DC, "Member 'ASQSoldier::BlockLeanTraceRotation' has a wrong offset!");
static_assert(offsetof(ASQSoldier, ProneBlockLeanTraceDistance) == 0x0016E0, "Member 'ASQSoldier::ProneBlockLeanTraceDistance' has a wrong offset!");
static_assert(offsetof(ASQSoldier, PronePitchAngleAdjust) == 0x0016E4, "Member 'ASQSoldier::PronePitchAngleAdjust' has a wrong offset!");
static_assert(offsetof(ASQSoldier, ProneBlockLeanTraceRotation) == 0x0016E8, "Member 'ASQSoldier::ProneBlockLeanTraceRotation' has a wrong offset!");
static_assert(offsetof(ASQSoldier, UseInteractDistance) == 0x0016EC, "Member 'ASQSoldier::UseInteractDistance' has a wrong offset!");
static_assert(offsetof(ASQSoldier, UseFocus) == 0x0016F0, "Member 'ASQSoldier::UseFocus' has a wrong offset!");
static_assert(offsetof(ASQSoldier, InteractableVolumeForDragging) == 0x001700, "Member 'ASQSoldier::InteractableVolumeForDragging' has a wrong offset!");
static_assert(offsetof(ASQSoldier, InteractableRadiusMultiplier) == 0x001708, "Member 'ASQSoldier::InteractableRadiusMultiplier' has a wrong offset!");
static_assert(offsetof(ASQSoldier, SnapZoneRadius) == 0x00170C, "Member 'ASQSoldier::SnapZoneRadius' has a wrong offset!");
static_assert(offsetof(ASQSoldier, MinDistanceToSuppressedTarget) == 0x001710, "Member 'ASQSoldier::MinDistanceToSuppressedTarget' has a wrong offset!");
static_assert(offsetof(ASQSoldier, FullSuppressionRadius) == 0x001714, "Member 'ASQSoldier::FullSuppressionRadius' has a wrong offset!");
static_assert(offsetof(ASQSoldier, SuppressionWallIgnoranceRange) == 0x001718, "Member 'ASQSoldier::SuppressionWallIgnoranceRange' has a wrong offset!");
static_assert(offsetof(ASQSoldier, SuppressionRadius) == 0x001724, "Member 'ASQSoldier::SuppressionRadius' has a wrong offset!");
static_assert(offsetof(ASQSoldier, CurrentSeat) == 0x001728, "Member 'ASQSoldier::CurrentSeat' has a wrong offset!");
static_assert(offsetof(ASQSoldier, CachedMoveRotation) == 0x001734, "Member 'ASQSoldier::CachedMoveRotation' has a wrong offset!");
static_assert(offsetof(ASQSoldier, CachedMoveRotationPoint) == 0x001738, "Member 'ASQSoldier::CachedMoveRotationPoint' has a wrong offset!");
static_assert(offsetof(ASQSoldier, CachedForwardVector) == 0x001744, "Member 'ASQSoldier::CachedForwardVector' has a wrong offset!");
static_assert(offsetof(ASQSoldier, OnChangedSeat) == 0x001750, "Member 'ASQSoldier::OnChangedSeat' has a wrong offset!");
static_assert(offsetof(ASQSoldier, FreeAimVerticalInput) == 0x001764, "Member 'ASQSoldier::FreeAimVerticalInput' has a wrong offset!");
static_assert(offsetof(ASQSoldier, FreeAimHorizontalInput) == 0x001768, "Member 'ASQSoldier::FreeAimHorizontalInput' has a wrong offset!");
static_assert(offsetof(ASQSoldier, UsingObject) == 0x001770, "Member 'ASQSoldier::UsingObject' has a wrong offset!");
static_assert(offsetof(ASQSoldier, VehicleSeatEntryWeaponSlot) == 0x0017C8, "Member 'ASQSoldier::VehicleSeatEntryWeaponSlot' has a wrong offset!");
static_assert(offsetof(ASQSoldier, VehicleSeatEntryWeaponOffset) == 0x0017CC, "Member 'ASQSoldier::VehicleSeatEntryWeaponOffset' has a wrong offset!");
static_assert(offsetof(ASQSoldier, SuppressionDebugWidget) == 0x0017E0, "Member 'ASQSoldier::SuppressionDebugWidget' has a wrong offset!");
static_assert(offsetof(ASQSoldier, SuppressionDebugWidgetReference) == 0x0017E8, "Member 'ASQSoldier::SuppressionDebugWidgetReference' has a wrong offset!");
static_assert(offsetof(ASQSoldier, LastTakeHitInfo) == 0x001CB8, "Member 'ASQSoldier::LastTakeHitInfo' has a wrong offset!");
static_assert(offsetof(ASQSoldier, SoldierSkinIndex) == 0x001DF0, "Member 'ASQSoldier::SoldierSkinIndex' has a wrong offset!");
static_assert(offsetof(ASQSoldier, Health) == 0x001DF8, "Member 'ASQSoldier::Health' has a wrong offset!");
static_assert(offsetof(ASQSoldier, LastHealedTime) == 0x001DFC, "Member 'ASQSoldier::LastHealedTime' has a wrong offset!");
static_assert(offsetof(ASQSoldier, WoundedThreshold) == 0x001E00, "Member 'ASQSoldier::WoundedThreshold' has a wrong offset!");
static_assert(offsetof(ASQSoldier, HealthBleedableThreshold) == 0x001E04, "Member 'ASQSoldier::HealthBleedableThreshold' has a wrong offset!");
static_assert(offsetof(ASQSoldier, HealthHurtMovementThreshold) == 0x001E08, "Member 'ASQSoldier::HealthHurtMovementThreshold' has a wrong offset!");
static_assert(offsetof(ASQSoldier, DamageBleedableThreshold) == 0x001E0C, "Member 'ASQSoldier::DamageBleedableThreshold' has a wrong offset!");
static_assert(offsetof(ASQSoldier, WoundedHealthLossRate) == 0x001E10, "Member 'ASQSoldier::WoundedHealthLossRate' has a wrong offset!");
static_assert(offsetof(ASQSoldier, WoundedBandagedHealthLossRate) == 0x001E14, "Member 'ASQSoldier::WoundedBandagedHealthLossRate' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BleedingHealthLossRate) == 0x001E18, "Member 'ASQSoldier::BleedingHealthLossRate' has a wrong offset!");
static_assert(offsetof(ASQSoldier, KillDamageThreshold) == 0x001E1C, "Member 'ASQSoldier::KillDamageThreshold' has a wrong offset!");
static_assert(offsetof(ASQSoldier, HealthUponRevival) == 0x001E20, "Member 'ASQSoldier::HealthUponRevival' has a wrong offset!");
static_assert(offsetof(ASQSoldier, TimeBecameWounded) == 0x001E24, "Member 'ASQSoldier::TimeBecameWounded' has a wrong offset!");
static_assert(offsetof(ASQSoldier, TimeBecameRevived) == 0x001E28, "Member 'ASQSoldier::TimeBecameRevived' has a wrong offset!");
static_assert(offsetof(ASQSoldier, PostRecoveryUpdateRate) == 0x001E2C, "Member 'ASQSoldier::PostRecoveryUpdateRate' has a wrong offset!");
static_assert(offsetof(ASQSoldier, PostRecoveryTimerHandle) == 0x001E30, "Member 'ASQSoldier::PostRecoveryTimerHandle' has a wrong offset!");
static_assert(offsetof(ASQSoldier, PostRecoveryTimeLeft) == 0x001E38, "Member 'ASQSoldier::PostRecoveryTimeLeft' has a wrong offset!");
static_assert(offsetof(ASQSoldier, PostRecoveryRateByHealthCurve) == 0x001E40, "Member 'ASQSoldier::PostRecoveryRateByHealthCurve' has a wrong offset!");
static_assert(offsetof(ASQSoldier, CumulativeRevivePenalty) == 0x001E48, "Member 'ASQSoldier::CumulativeRevivePenalty' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BreathHoldStamina) == 0x001E50, "Member 'ASQSoldier::BreathHoldStamina' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BreathHoldStaminaMax) == 0x001E54, "Member 'ASQSoldier::BreathHoldStaminaMax' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BreathHoldRecoveryDuration) == 0x001E58, "Member 'ASQSoldier::BreathHoldRecoveryDuration' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BreathHoldConsumptionDuration) == 0x001E5C, "Member 'ASQSoldier::BreathHoldConsumptionDuration' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BreathHoldFadeDuration) == 0x001E60, "Member 'ASQSoldier::BreathHoldFadeDuration' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BreathHoldPct) == 0x001E64, "Member 'ASQSoldier::BreathHoldPct' has a wrong offset!");
static_assert(offsetof(ASQSoldier, FocusZoomAlpha) == 0x001E68, "Member 'ASQSoldier::FocusZoomAlpha' has a wrong offset!");
static_assert(offsetof(ASQSoldier, bIsFocusing) == 0x001E6C, "Member 'ASQSoldier::bIsFocusing' has a wrong offset!");
static_assert(offsetof(ASQSoldier, FallSpeedToFallDamageCurve) == 0x001E70, "Member 'ASQSoldier::FallSpeedToFallDamageCurve' has a wrong offset!");
static_assert(offsetof(ASQSoldier, FallingDamageMultiplier) == 0x001E78, "Member 'ASQSoldier::FallingDamageMultiplier' has a wrong offset!");
static_assert(offsetof(ASQSoldier, MaximumSafeFallingSpeed) == 0x001E7C, "Member 'ASQSoldier::MaximumSafeFallingSpeed' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BonkOnHeadFallDamageMultiplier) == 0x001E80, "Member 'ASQSoldier::BonkOnHeadFallDamageMultiplier' has a wrong offset!");
static_assert(offsetof(ASQSoldier, OnRevivedEvent) == 0x001E88, "Member 'ASQSoldier::OnRevivedEvent' has a wrong offset!");
static_assert(offsetof(ASQSoldier, LeaningConfig) == 0x001EA0, "Member 'ASQSoldier::LeaningConfig' has a wrong offset!");
static_assert(offsetof(ASQSoldier, LeanMovementInterpSpeed) == 0x001EF0, "Member 'ASQSoldier::LeanMovementInterpSpeed' has a wrong offset!");
static_assert(offsetof(ASQSoldier, WoundedSoundMix) == 0x001EF8, "Member 'ASQSoldier::WoundedSoundMix' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BleedingSoundMix) == 0x001F00, "Member 'ASQSoldier::BleedingSoundMix' has a wrong offset!");
static_assert(offsetof(ASQSoldier, WaterFeetBottomEnterSound) == 0x001F08, "Member 'ASQSoldier::WaterFeetBottomEnterSound' has a wrong offset!");
static_assert(offsetof(ASQSoldier, WaterAboveHipEnterSound) == 0x001F10, "Member 'ASQSoldier::WaterAboveHipEnterSound' has a wrong offset!");
static_assert(offsetof(ASQSoldier, WaterJumpSound) == 0x001F18, "Member 'ASQSoldier::WaterJumpSound' has a wrong offset!");
static_assert(offsetof(ASQSoldier, WaterAC) == 0x001F20, "Member 'ASQSoldier::WaterAC' has a wrong offset!");
static_assert(offsetof(ASQSoldier, DeepWaterAC) == 0x001F28, "Member 'ASQSoldier::DeepWaterAC' has a wrong offset!");
static_assert(offsetof(ASQSoldier, RagdollAudioComponent) == 0x001F30, "Member 'ASQSoldier::RagdollAudioComponent' has a wrong offset!");
static_assert(offsetof(ASQSoldier, ListenerType) == 0x001F38, "Member 'ASQSoldier::ListenerType' has a wrong offset!");
static_assert(offsetof(ASQSoldier, HealthBasedFilterGainCurve) == 0x001F40, "Member 'ASQSoldier::HealthBasedFilterGainCurve' has a wrong offset!");
static_assert(offsetof(ASQSoldier, HeartbeatVolumeCurve) == 0x001F50, "Member 'ASQSoldier::HeartbeatVolumeCurve' has a wrong offset!");
static_assert(offsetof(ASQSoldier, HeartbeatSound) == 0x001F58, "Member 'ASQSoldier::HeartbeatSound' has a wrong offset!");
static_assert(offsetof(ASQSoldier, HeartbeatIncapSound) == 0x001F60, "Member 'ASQSoldier::HeartbeatIncapSound' has a wrong offset!");
static_assert(offsetof(ASQSoldier, DefaultLandedSound) == 0x001F68, "Member 'ASQSoldier::DefaultLandedSound' has a wrong offset!");
static_assert(offsetof(ASQSoldier, HitSound) == 0x001F70, "Member 'ASQSoldier::HitSound' has a wrong offset!");
static_assert(offsetof(ASQSoldier, FirstPersonHitSound) == 0x001F78, "Member 'ASQSoldier::FirstPersonHitSound' has a wrong offset!");
static_assert(offsetof(ASQSoldier, IncapSound) == 0x001F80, "Member 'ASQSoldier::IncapSound' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BoneHitSounds) == 0x001F88, "Member 'ASQSoldier::BoneHitSounds' has a wrong offset!");
static_assert(offsetof(ASQSoldier, IncapSoundOccurrencePercentage) == 0x001F98, "Member 'ASQSoldier::IncapSoundOccurrencePercentage' has a wrong offset!");
static_assert(offsetof(ASQSoldier, WoundedSoundMixDelaySeconds) == 0x001F9C, "Member 'ASQSoldier::WoundedSoundMixDelaySeconds' has a wrong offset!");
static_assert(offsetof(ASQSoldier, DeathSound) == 0x001FA8, "Member 'ASQSoldier::DeathSound' has a wrong offset!");
static_assert(offsetof(ASQSoldier, ClothingSound) == 0x001FB0, "Member 'ASQSoldier::ClothingSound' has a wrong offset!");
static_assert(offsetof(ASQSoldier, EquipmentSound) == 0x001FB8, "Member 'ASQSoldier::EquipmentSound' has a wrong offset!");
static_assert(offsetof(ASQSoldier, ResupplyCrateSound) == 0x001FC0, "Member 'ASQSoldier::ResupplyCrateSound' has a wrong offset!");
static_assert(offsetof(ASQSoldier, DeathSoundOccurrencePercentage) == 0x001FC8, "Member 'ASQSoldier::DeathSoundOccurrencePercentage' has a wrong offset!");
static_assert(offsetof(ASQSoldier, FoleyAC) == 0x001FD0, "Member 'ASQSoldier::FoleyAC' has a wrong offset!");
static_assert(offsetof(ASQSoldier, HeartbeatAC) == 0x001FD8, "Member 'ASQSoldier::HeartbeatAC' has a wrong offset!");
static_assert(offsetof(ASQSoldier, HeartbeatIncapAC) == 0x001FE0, "Member 'ASQSoldier::HeartbeatIncapAC' has a wrong offset!");
static_assert(offsetof(ASQSoldier, PhysMatEffectsClass) == 0x001FE8, "Member 'ASQSoldier::PhysMatEffectsClass' has a wrong offset!");
static_assert(offsetof(ASQSoldier, DelayedUnposessTimer) == 0x001FF8, "Member 'ASQSoldier::DelayedUnposessTimer' has a wrong offset!");
static_assert(offsetof(ASQSoldier, DraggingHandle) == 0x002000, "Member 'ASQSoldier::DraggingHandle' has a wrong offset!");
static_assert(offsetof(ASQSoldier, DraggingData) == 0x002008, "Member 'ASQSoldier::DraggingData' has a wrong offset!");
static_assert(offsetof(ASQSoldier, DraggingDistanceMultiplier) == 0x002018, "Member 'ASQSoldier::DraggingDistanceMultiplier' has a wrong offset!");
static_assert(offsetof(ASQSoldier, StartDraggingTimerHandle) == 0x002020, "Member 'ASQSoldier::StartDraggingTimerHandle' has a wrong offset!");
static_assert(offsetof(ASQSoldier, StartDraggingDelay) == 0x002028, "Member 'ASQSoldier::StartDraggingDelay' has a wrong offset!");
static_assert(offsetof(ASQSoldier, DraggableBones) == 0x002030, "Member 'ASQSoldier::DraggableBones' has a wrong offset!");
static_assert(offsetof(ASQSoldier, RagdollComponent) == 0x002040, "Member 'ASQSoldier::RagdollComponent' has a wrong offset!");
static_assert(offsetof(ASQSoldier, Buffs) == 0x002048, "Member 'ASQSoldier::Buffs' has a wrong offset!");
static_assert(offsetof(ASQSoldier, OnWoundEvent) == 0x002050, "Member 'ASQSoldier::OnWoundEvent' has a wrong offset!");
static_assert(offsetof(ASQSoldier, OnDeathEvent) == 0x002068, "Member 'ASQSoldier::OnDeathEvent' has a wrong offset!");
static_assert(offsetof(ASQSoldier, SoldierStaticInfo) == 0x002080, "Member 'ASQSoldier::SoldierStaticInfo' has a wrong offset!");
static_assert(offsetof(ASQSoldier, DefaultDrowningHeight) == 0x002088, "Member 'ASQSoldier::DefaultDrowningHeight' has a wrong offset!");
static_assert(offsetof(ASQSoldier, CrouchedDrowningHeight) == 0x00208C, "Member 'ASQSoldier::CrouchedDrowningHeight' has a wrong offset!");
static_assert(offsetof(ASQSoldier, ProneDrowningHeight) == 0x002090, "Member 'ASQSoldier::ProneDrowningHeight' has a wrong offset!");
static_assert(offsetof(ASQSoldier, UnderwaterBoneData) == 0x002094, "Member 'ASQSoldier::UnderwaterBoneData' has a wrong offset!");
static_assert(offsetof(ASQSoldier, WaterFeetEnterEffect) == 0x0020C0, "Member 'ASQSoldier::WaterFeetEnterEffect' has a wrong offset!");
static_assert(offsetof(ASQSoldier, NiagaraWaterFeetEnterEffect) == 0x0020C8, "Member 'ASQSoldier::NiagaraWaterFeetEnterEffect' has a wrong offset!");
static_assert(offsetof(ASQSoldier, WaterDeepEnterEffect) == 0x0020D0, "Member 'ASQSoldier::WaterDeepEnterEffect' has a wrong offset!");
static_assert(offsetof(ASQSoldier, NiagaraWaterDeepEnterEffect) == 0x0020D8, "Member 'ASQSoldier::NiagaraWaterDeepEnterEffect' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BaseWaterComponent) == 0x0020E0, "Member 'ASQSoldier::BaseWaterComponent' has a wrong offset!");
static_assert(offsetof(ASQSoldier, WaterDamageComponent) == 0x0020E8, "Member 'ASQSoldier::WaterDamageComponent' has a wrong offset!");
static_assert(offsetof(ASQSoldier, WaterPointTestComponent) == 0x0020F0, "Member 'ASQSoldier::WaterPointTestComponent' has a wrong offset!");
static_assert(offsetof(ASQSoldier, InventoryComponent) == 0x002108, "Member 'ASQSoldier::InventoryComponent' has a wrong offset!");
static_assert(offsetof(ASQSoldier, CurrentSoundMix) == 0x002118, "Member 'ASQSoldier::CurrentSoundMix' has a wrong offset!");
static_assert(offsetof(ASQSoldier, ZeroBasedBoneLocs) == 0x002120, "Member 'ASQSoldier::ZeroBasedBoneLocs' has a wrong offset!");
static_assert(offsetof(ASQSoldier, CurrentItemStaticInfo) == 0x002130, "Member 'ASQSoldier::CurrentItemStaticInfo' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BotComponent) == 0x002148, "Member 'ASQSoldier::BotComponent' has a wrong offset!");
static_assert(offsetof(ASQSoldier, UpperMesh1P) == 0x002150, "Member 'ASQSoldier::UpperMesh1P' has a wrong offset!");
static_assert(offsetof(ASQSoldier, SpringArm1P) == 0x002158, "Member 'ASQSoldier::SpringArm1P' has a wrong offset!");
static_assert(offsetof(ASQSoldier, IdleMontage) == 0x002160, "Member 'ASQSoldier::IdleMontage' has a wrong offset!");
static_assert(offsetof(ASQSoldier, ControlRotation) == 0x002168, "Member 'ASQSoldier::ControlRotation' has a wrong offset!");
static_assert(offsetof(ASQSoldier, AimRotation1P) == 0x002174, "Member 'ASQSoldier::AimRotation1P' has a wrong offset!");
static_assert(offsetof(ASQSoldier, RequiredProneTransitionTime) == 0x002180, "Member 'ASQSoldier::RequiredProneTransitionTime' has a wrong offset!");
static_assert(offsetof(ASQSoldier, bCachedIsUsingItem) == 0x002184, "Member 'ASQSoldier::bCachedIsUsingItem' has a wrong offset!");
static_assert(offsetof(ASQSoldier, bCachedIsUsingGrenade) == 0x002185, "Member 'ASQSoldier::bCachedIsUsingGrenade' has a wrong offset!");
static_assert(offsetof(ASQSoldier, bCachedLeanLeft) == 0x002186, "Member 'ASQSoldier::bCachedLeanLeft' has a wrong offset!");
static_assert(offsetof(ASQSoldier, bCachedLeanRight) == 0x002187, "Member 'ASQSoldier::bCachedLeanRight' has a wrong offset!");
static_assert(offsetof(ASQSoldier, CachedFwdPct) == 0x002188, "Member 'ASQSoldier::CachedFwdPct' has a wrong offset!");
static_assert(offsetof(ASQSoldier, CachedStrafePct) == 0x00218C, "Member 'ASQSoldier::CachedStrafePct' has a wrong offset!");
static_assert(offsetof(ASQSoldier, bShot) == 0x002190, "Member 'ASQSoldier::bShot' has a wrong offset!");
static_assert(offsetof(ASQSoldier, bWasCrouchedBeforeProne) == 0x002191, "Member 'ASQSoldier::bWasCrouchedBeforeProne' has a wrong offset!");
static_assert(offsetof(ASQSoldier, bIsCameraRecoilActive) == 0x002192, "Member 'ASQSoldier::bIsCameraRecoilActive' has a wrong offset!");
static_assert(offsetof(ASQSoldier, SpringArmTargetHeight1p) == 0x002194, "Member 'ASQSoldier::SpringArmTargetHeight1p' has a wrong offset!");
static_assert(offsetof(ASQSoldier, SpringArmHeight1pInterpSpeed) == 0x002198, "Member 'ASQSoldier::SpringArmHeight1pInterpSpeed' has a wrong offset!");
static_assert(offsetof(ASQSoldier, TempSpringArmHeight1p) == 0x00219C, "Member 'ASQSoldier::TempSpringArmHeight1p' has a wrong offset!");
static_assert(offsetof(ASQSoldier, CurrentSpringArmHeight1p) == 0x0021A0, "Member 'ASQSoldier::CurrentSpringArmHeight1p' has a wrong offset!");
static_assert(offsetof(ASQSoldier, SpringArmClimbingHeight) == 0x0021A4, "Member 'ASQSoldier::SpringArmClimbingHeight' has a wrong offset!");
static_assert(offsetof(ASQSoldier, SpringArmCrouchingMovingHeight) == 0x0021A8, "Member 'ASQSoldier::SpringArmCrouchingMovingHeight' has a wrong offset!");
static_assert(offsetof(ASQSoldier, SpringArmCrouchingStaticHeight) == 0x0021AC, "Member 'ASQSoldier::SpringArmCrouchingStaticHeight' has a wrong offset!");
static_assert(offsetof(ASQSoldier, SpringArmProneHeight) == 0x0021B0, "Member 'ASQSoldier::SpringArmProneHeight' has a wrong offset!");
static_assert(offsetof(ASQSoldier, Base1pOffset) == 0x0021B4, "Member 'ASQSoldier::Base1pOffset' has a wrong offset!");
static_assert(offsetof(ASQSoldier, RawBase1pOffset) == 0x0021C0, "Member 'ASQSoldier::RawBase1pOffset' has a wrong offset!");
static_assert(offsetof(ASQSoldier, bSwitchedSoldierStance) == 0x0021CC, "Member 'ASQSoldier::bSwitchedSoldierStance' has a wrong offset!");
static_assert(offsetof(ASQSoldier, ViewMode3p) == 0x0021CD, "Member 'ASQSoldier::ViewMode3p' has a wrong offset!");
static_assert(offsetof(ASQSoldier, ViewPos3p) == 0x0021D0, "Member 'ASQSoldier::ViewPos3p' has a wrong offset!");
static_assert(offsetof(ASQSoldier, ViewDistance3p) == 0x0021DC, "Member 'ASQSoldier::ViewDistance3p' has a wrong offset!");
static_assert(offsetof(ASQSoldier, ViewOrientation3p) == 0x0021E0, "Member 'ASQSoldier::ViewOrientation3p' has a wrong offset!");
static_assert(offsetof(ASQSoldier, ViewScrollDistance3p) == 0x0021EC, "Member 'ASQSoldier::ViewScrollDistance3p' has a wrong offset!");
static_assert(offsetof(ASQSoldier, ViewAdjustingDelta3p) == 0x0021F0, "Member 'ASQSoldier::ViewAdjustingDelta3p' has a wrong offset!");
static_assert(offsetof(ASQSoldier, ViewTogglePressTime) == 0x0021FC, "Member 'ASQSoldier::ViewTogglePressTime' has a wrong offset!");
static_assert(offsetof(ASQSoldier, bAdjustingView3p) == 0x002200, "Member 'ASQSoldier::bAdjustingView3p' has a wrong offset!");
static_assert(offsetof(ASQSoldier, bLastInThirdPersonView) == 0x002201, "Member 'ASQSoldier::bLastInThirdPersonView' has a wrong offset!");
static_assert(offsetof(ASQSoldier, StartCrouch_1P_Montage) == 0x002208, "Member 'ASQSoldier::StartCrouch_1P_Montage' has a wrong offset!");
static_assert(offsetof(ASQSoldier, EndCrouch_1P_Montage) == 0x002210, "Member 'ASQSoldier::EndCrouch_1P_Montage' has a wrong offset!");
static_assert(offsetof(ASQSoldier, DraggingStart1pMontage) == 0x002218, "Member 'ASQSoldier::DraggingStart1pMontage' has a wrong offset!");
static_assert(offsetof(ASQSoldier, DraggingStart3pMontage) == 0x002220, "Member 'ASQSoldier::DraggingStart3pMontage' has a wrong offset!");
static_assert(offsetof(ASQSoldier, DraggingEnd1pMontage) == 0x002228, "Member 'ASQSoldier::DraggingEnd1pMontage' has a wrong offset!");
static_assert(offsetof(ASQSoldier, DraggingEnd3pMontage) == 0x002230, "Member 'ASQSoldier::DraggingEnd3pMontage' has a wrong offset!");
static_assert(offsetof(ASQSoldier, PreviousWeapon) == 0x002238, "Member 'ASQSoldier::PreviousWeapon' has a wrong offset!");
static_assert(offsetof(ASQSoldier, bPreviousWeaponMagHasAmmo) == 0x002240, "Member 'ASQSoldier::bPreviousWeaponMagHasAmmo' has a wrong offset!");
static_assert(offsetof(ASQSoldier, bCachedIsSprinting) == 0x002241, "Member 'ASQSoldier::bCachedIsSprinting' has a wrong offset!");
static_assert(offsetof(ASQSoldier, WeaponDeviationRot) == 0x002248, "Member 'ASQSoldier::WeaponDeviationRot' has a wrong offset!");
static_assert(offsetof(ASQSoldier, bAccuracyDebugVisible) == 0x002250, "Member 'ASQSoldier::bAccuracyDebugVisible' has a wrong offset!");
static_assert(offsetof(ASQSoldier, CachedAnimInstance3p) == 0x002258, "Member 'ASQSoldier::CachedAnimInstance3p' has a wrong offset!");
static_assert(offsetof(ASQSoldier, CachedAnimInstance1p) == 0x002260, "Member 'ASQSoldier::CachedAnimInstance1p' has a wrong offset!");
static_assert(offsetof(ASQSoldier, SoldierPlayTime1p) == 0x002268, "Member 'ASQSoldier::SoldierPlayTime1p' has a wrong offset!");
static_assert(offsetof(ASQSoldier, SoldierPlayTime3p) == 0x00226C, "Member 'ASQSoldier::SoldierPlayTime3p' has a wrong offset!");
static_assert(offsetof(ASQSoldier, OnPawnPossessedEvent) == 0x002270, "Member 'ASQSoldier::OnPawnPossessedEvent' has a wrong offset!");
static_assert(offsetof(ASQSoldier, OnPawnUnPossessedEvent) == 0x002280, "Member 'ASQSoldier::OnPawnUnPossessedEvent' has a wrong offset!");
static_assert(offsetof(ASQSoldier, ClimbData) == 0x002290, "Member 'ASQSoldier::ClimbData' has a wrong offset!");
static_assert(offsetof(ASQSoldier, bClimbingEnabled) == 0x0023E2, "Member 'ASQSoldier::bClimbingEnabled' has a wrong offset!");
static_assert(offsetof(ASQSoldier, ClimbInfo) == 0x0023E8, "Member 'ASQSoldier::ClimbInfo' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BoundaryListener) == 0x0024A0, "Member 'ASQSoldier::BoundaryListener' has a wrong offset!");
static_assert(offsetof(ASQSoldier, FreeLookComponent) == 0x0024B0, "Member 'ASQSoldier::FreeLookComponent' has a wrong offset!");
static_assert(offsetof(ASQSoldier, VaultClimbAo) == 0x0024B8, "Member 'ASQSoldier::VaultClimbAo' has a wrong offset!");
static_assert(offsetof(ASQSoldier, CachedVaultClimbAo2) == 0x0024C4, "Member 'ASQSoldier::CachedVaultClimbAo2' has a wrong offset!");
static_assert(offsetof(ASQSoldier, CachedVaultClimbAoYawInterpSpeed) == 0x0024D0, "Member 'ASQSoldier::CachedVaultClimbAoYawInterpSpeed' has a wrong offset!");
static_assert(offsetof(ASQSoldier, CachedVaultClimbAoPitchInterpSpeed) == 0x0024D4, "Member 'ASQSoldier::CachedVaultClimbAoPitchInterpSpeed' has a wrong offset!");
static_assert(offsetof(ASQSoldier, Bipod3pSkelMeshOffset) == 0x0024D8, "Member 'ASQSoldier::Bipod3pSkelMeshOffset' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BeginBipod3pSkelMeshOffset) == 0x0024DC, "Member 'ASQSoldier::BeginBipod3pSkelMeshOffset' has a wrong offset!");
static_assert(offsetof(ASQSoldier, CachedBipodTransitionAlpha) == 0x0024E0, "Member 'ASQSoldier::CachedBipodTransitionAlpha' has a wrong offset!");
static_assert(offsetof(ASQSoldier, bIsBipodDeployed) == 0x0024E4, "Member 'ASQSoldier::bIsBipodDeployed' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BipodHitLocZeroBased) == 0x0024E8, "Member 'ASQSoldier::BipodHitLocZeroBased' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BipodObject) == 0x0024F8, "Member 'ASQSoldier::BipodObject' has a wrong offset!");
static_assert(offsetof(ASQSoldier, CachedDeployed1pBipodLocation) == 0x00250C, "Member 'ASQSoldier::CachedDeployed1pBipodLocation' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BipodHitLocSpringArm1PHeight) == 0x002518, "Member 'ASQSoldier::BipodHitLocSpringArm1PHeight' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BipodNonDeployedSpringArm1pRelativeHeight) == 0x00251C, "Member 'ASQSoldier::BipodNonDeployedSpringArm1pRelativeHeight' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BipodSpringArmFloorTraceLength) == 0x002594, "Member 'ASQSoldier::BipodSpringArmFloorTraceLength' has a wrong offset!");
static_assert(offsetof(ASQSoldier, DeployedBipodCapsuleRadius) == 0x002598, "Member 'ASQSoldier::DeployedBipodCapsuleRadius' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BipodClientServerAcceptableRange) == 0x00259C, "Member 'ASQSoldier::BipodClientServerAcceptableRange' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BipodObjectMaxDelta) == 0x0025A0, "Member 'ASQSoldier::BipodObjectMaxDelta' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BipodDepth) == 0x0025A4, "Member 'ASQSoldier::BipodDepth' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BipodStandingMinDeployHeight) == 0x0025A8, "Member 'ASQSoldier::BipodStandingMinDeployHeight' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BipodStandingMaxDeployHeight) == 0x0025AC, "Member 'ASQSoldier::BipodStandingMaxDeployHeight' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BipodCrouchingMinDeployHeight) == 0x0025B0, "Member 'ASQSoldier::BipodCrouchingMinDeployHeight' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BipodCrouchingMaxDeployHeight) == 0x0025B4, "Member 'ASQSoldier::BipodCrouchingMaxDeployHeight' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BipodProneMinDeployHeight) == 0x0025B8, "Member 'ASQSoldier::BipodProneMinDeployHeight' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BipodProneMaxDeployHeight) == 0x0025BC, "Member 'ASQSoldier::BipodProneMaxDeployHeight' has a wrong offset!");
static_assert(offsetof(ASQSoldier, BipodCameraProbeSize) == 0x0025C0, "Member 'ASQSoldier::BipodCameraProbeSize' has a wrong offset!");
static_assert(offsetof(ASQSoldier, bWeaponLowered) == 0x0025C8, "Member 'ASQSoldier::bWeaponLowered' has a wrong offset!");
static_assert(offsetof(ASQSoldier, ChestSocketName) == 0x0025CC, "Member 'ASQSoldier::ChestSocketName' has a wrong offset!");
static_assert(offsetof(ASQSoldier, EmoteData) == 0x0025D8, "Member 'ASQSoldier::EmoteData' has a wrong offset!");
static_assert(offsetof(ASQSoldier, MouthAnim) == 0x0025E0, "Member 'ASQSoldier::MouthAnim' has a wrong offset!");
static_assert(offsetof(ASQSoldier, HandActionRadioAnim) == 0x002600, "Member 'ASQSoldier::HandActionRadioAnim' has a wrong offset!");
static_assert(offsetof(ASQSoldier, bIsPlayingVoipHandAnim) == 0x002620, "Member 'ASQSoldier::bIsPlayingVoipHandAnim' has a wrong offset!");
static_assert(offsetof(ASQSoldier, EmotePlayer) == 0x002628, "Member 'ASQSoldier::EmotePlayer' has a wrong offset!");

// Class Squad.SQBot
// 0x0010 (0x2640 - 0x2630)
class ASQBot final : public ASQSoldier
{
public:
	class UBehaviorTree*                          BotBehavior;                                       // 0x2630(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F3F[0x8];                                      // 0x2638(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQBot">();
	}
	static class ASQBot* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQBot>();
	}
};
static_assert(alignof(ASQBot) == 0x000010, "Wrong alignment on ASQBot");
static_assert(sizeof(ASQBot) == 0x002640, "Wrong size on ASQBot");
static_assert(offsetof(ASQBot, BotBehavior) == 0x002630, "Member 'ASQBot::BotBehavior' has a wrong offset!");

// Class Squad.SQReplicationGraphNode_AlwaysRelevant_ForConnection
// 0x0240 (0x0290 - 0x0050)
class USQReplicationGraphNode_AlwaysRelevant_ForConnection final : public UReplicationGraphNode
{
public:
	uint8                                         Pad_F40[0x220];                                    // 0x0050(0x0220)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LastPawn;                                          // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FAlwaysRelevantActorInfo>       PastRelevantActors;                                // 0x0278(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F41[0x8];                                      // 0x0288(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQReplicationGraphNode_AlwaysRelevant_ForConnection">();
	}
	static class USQReplicationGraphNode_AlwaysRelevant_ForConnection* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQReplicationGraphNode_AlwaysRelevant_ForConnection>();
	}
};
static_assert(alignof(USQReplicationGraphNode_AlwaysRelevant_ForConnection) == 0x000008, "Wrong alignment on USQReplicationGraphNode_AlwaysRelevant_ForConnection");
static_assert(sizeof(USQReplicationGraphNode_AlwaysRelevant_ForConnection) == 0x000290, "Wrong size on USQReplicationGraphNode_AlwaysRelevant_ForConnection");
static_assert(offsetof(USQReplicationGraphNode_AlwaysRelevant_ForConnection, LastPawn) == 0x000270, "Member 'USQReplicationGraphNode_AlwaysRelevant_ForConnection::LastPawn' has a wrong offset!");
static_assert(offsetof(USQReplicationGraphNode_AlwaysRelevant_ForConnection, PastRelevantActors) == 0x000278, "Member 'USQReplicationGraphNode_AlwaysRelevant_ForConnection::PastRelevantActors' has a wrong offset!");

// Class Squad.SQBotComponent
// 0x0028 (0x00D8 - 0x00B0)
class USQBotComponent final : public UActorComponent
{
public:
	class ASQSoldier*                             TargetEnemy;                                       // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ASQSoldier*                             OwnerSoldier;                                      // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F42[0x4];                                      // 0x00C0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetingRange;                                    // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CheckAtFloorDistance;                              // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomHeadingYawRange;                             // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomHeadingPitchRange;                           // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetingMaxPitchDelta;                            // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQBotComponent">();
	}
	static class USQBotComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQBotComponent>();
	}
};
static_assert(alignof(USQBotComponent) == 0x000008, "Wrong alignment on USQBotComponent");
static_assert(sizeof(USQBotComponent) == 0x0000D8, "Wrong size on USQBotComponent");
static_assert(offsetof(USQBotComponent, TargetEnemy) == 0x0000B0, "Member 'USQBotComponent::TargetEnemy' has a wrong offset!");
static_assert(offsetof(USQBotComponent, OwnerSoldier) == 0x0000B8, "Member 'USQBotComponent::OwnerSoldier' has a wrong offset!");
static_assert(offsetof(USQBotComponent, TargetingRange) == 0x0000C4, "Member 'USQBotComponent::TargetingRange' has a wrong offset!");
static_assert(offsetof(USQBotComponent, CheckAtFloorDistance) == 0x0000C8, "Member 'USQBotComponent::CheckAtFloorDistance' has a wrong offset!");
static_assert(offsetof(USQBotComponent, RandomHeadingYawRange) == 0x0000CC, "Member 'USQBotComponent::RandomHeadingYawRange' has a wrong offset!");
static_assert(offsetof(USQBotComponent, RandomHeadingPitchRange) == 0x0000D0, "Member 'USQBotComponent::RandomHeadingPitchRange' has a wrong offset!");
static_assert(offsetof(USQBotComponent, TargetingMaxPitchDelta) == 0x0000D4, "Member 'USQBotComponent::TargetingMaxPitchDelta' has a wrong offset!");

// Class Squad.SQBoundaryListener
// 0x0068 (0x0118 - 0x00B0)
class USQBoundaryListener final : public UActorComponent
{
public:
	bool                                          bRegisterToAllBoundaries;                          // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F43[0x7];                                      // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class ASQBoundary>>        TargetBoundaryClasses;                             // 0x00B8(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnEnterBoundarySignal;                             // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnExitBoundarySignal;                              // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AActor*                                 OverrideTargetActor;                               // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ASQBoundary*>                    Boundaries;                                        // 0x00F0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_F44[0x18];                                     // 0x0100(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEnterBoundary(class ASQBoundary* Boundary);
	void OnExitBoundary(class ASQBoundary* Boundary);
	void UnregisterAllBoundaries();

	class AActor* GetActor() const;
	bool ShouldRegisterToBoundary(const class ASQBoundary* Boundary) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQBoundaryListener">();
	}
	static class USQBoundaryListener* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQBoundaryListener>();
	}
};
static_assert(alignof(USQBoundaryListener) == 0x000008, "Wrong alignment on USQBoundaryListener");
static_assert(sizeof(USQBoundaryListener) == 0x000118, "Wrong size on USQBoundaryListener");
static_assert(offsetof(USQBoundaryListener, bRegisterToAllBoundaries) == 0x0000B0, "Member 'USQBoundaryListener::bRegisterToAllBoundaries' has a wrong offset!");
static_assert(offsetof(USQBoundaryListener, TargetBoundaryClasses) == 0x0000B8, "Member 'USQBoundaryListener::TargetBoundaryClasses' has a wrong offset!");
static_assert(offsetof(USQBoundaryListener, OnEnterBoundarySignal) == 0x0000C8, "Member 'USQBoundaryListener::OnEnterBoundarySignal' has a wrong offset!");
static_assert(offsetof(USQBoundaryListener, OnExitBoundarySignal) == 0x0000D8, "Member 'USQBoundaryListener::OnExitBoundarySignal' has a wrong offset!");
static_assert(offsetof(USQBoundaryListener, OverrideTargetActor) == 0x0000E8, "Member 'USQBoundaryListener::OverrideTargetActor' has a wrong offset!");
static_assert(offsetof(USQBoundaryListener, Boundaries) == 0x0000F0, "Member 'USQBoundaryListener::Boundaries' has a wrong offset!");

// Class Squad.SQRestriction
// 0x0000 (0x0060 - 0x0060)
class USQRestriction : public USQSettings
{
public:
	static bool TryGetLocalFOB(class ASQPlayerController* InPlayer, class ASQForwardBase** OutFOB);
	static bool TryGetLocalVehicle(class ASQPlayerController* InPlayer, class ASQVehicle** OutVehicle);

	bool GetRestrictionReason(struct FDataTableRowHandle* OutRestrictionReason) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRestriction">();
	}
	static class USQRestriction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRestriction>();
	}
};
static_assert(alignof(USQRestriction) == 0x000008, "Wrong alignment on USQRestriction");
static_assert(sizeof(USQRestriction) == 0x000060, "Wrong size on USQRestriction");

// Class Squad.SQRestriction_Delay_Base
// 0x0000 (0x0060 - 0x0060)
class USQRestriction_Delay_Base : public USQRestriction
{
public:
	void GetDefaultDelay(struct FTimespan* OutDefaultDelay) const;
	bool HasInitialDelay(class ASQTeam* InTeam, struct FTimespan* OutInitialDelay, int32* OutDelayedUsage, struct FDataTableRowHandle* OutDelayReason) const;
	bool OnPlayerAddUsage(class ASQPlayerController* InPlayer, struct FTimespan* OutNextAvailabilityDelay, struct FDataTableRowHandle* OutDelayReason) const;
	bool OnPlayerRemoveUsage(class ASQPlayerController* InPlayer, struct FTimespan* OutNextAvailabilityDelay, struct FDataTableRowHandle* OutDelayReason) const;
	bool OnTeamAddUsage(class ASQTeam* InTeam, struct FTimespan* OutNextAvailabilityDelay, struct FDataTableRowHandle* OutDelayReason) const;
	bool OnTeamRemoveUsage(class ASQTeam* InTeam, struct FTimespan* OutNextAvailabilityDelay, struct FDataTableRowHandle* OutDelayReason) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRestriction_Delay_Base">();
	}
	static class USQRestriction_Delay_Base* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRestriction_Delay_Base>();
	}
};
static_assert(alignof(USQRestriction_Delay_Base) == 0x000008, "Wrong alignment on USQRestriction_Delay_Base");
static_assert(sizeof(USQRestriction_Delay_Base) == 0x000060, "Wrong size on USQRestriction_Delay_Base");

// Class Squad.SQRestriction_Delay
// 0x0020 (0x0080 - 0x0060)
class USQRestriction_Delay final : public USQRestriction_Delay_Base
{
public:
	struct FTimespan                              InitialDelay;                                      // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfDelayedUsage;                              // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4F[0x4];                                      // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              Delay;                                             // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyDelayOnAddUsage;                              // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ApplyDelayOnRemoveUsage;                           // 0x0079(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F50[0x6];                                      // 0x007A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRestriction_Delay">();
	}
	static class USQRestriction_Delay* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRestriction_Delay>();
	}
};
static_assert(alignof(USQRestriction_Delay) == 0x000008, "Wrong alignment on USQRestriction_Delay");
static_assert(sizeof(USQRestriction_Delay) == 0x000080, "Wrong size on USQRestriction_Delay");
static_assert(offsetof(USQRestriction_Delay, InitialDelay) == 0x000060, "Member 'USQRestriction_Delay::InitialDelay' has a wrong offset!");
static_assert(offsetof(USQRestriction_Delay, NumberOfDelayedUsage) == 0x000068, "Member 'USQRestriction_Delay::NumberOfDelayedUsage' has a wrong offset!");
static_assert(offsetof(USQRestriction_Delay, Delay) == 0x000070, "Member 'USQRestriction_Delay::Delay' has a wrong offset!");
static_assert(offsetof(USQRestriction_Delay, ApplyDelayOnAddUsage) == 0x000078, "Member 'USQRestriction_Delay::ApplyDelayOnAddUsage' has a wrong offset!");
static_assert(offsetof(USQRestriction_Delay, ApplyDelayOnRemoveUsage) == 0x000079, "Member 'USQRestriction_Delay::ApplyDelayOnRemoveUsage' has a wrong offset!");

// Class Squad.SQBoundary
// 0x00C0 (0x02E8 - 0x0228)
class ASQBoundary : public AActor
{
public:
	class USplineComponent*                       XYBoundary;                                        // 0x0228(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bXYBoundaryTangetsInwards;                         // 0x0230(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F51[0x3];                                      // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BoundaryMaskSizeX;                                 // 0x0234(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoundaryMaskSizeY;                                 // 0x0238(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F52[0x4];                                      // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             BoundaryMask;                                      // 0x0240(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CeilingHeight;                                     // 0x0248(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloorHeight;                                       // 0x024C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CheckDelaySeconds;                                 // 0x0250(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultToInside;                                  // 0x0254(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bComplexCheck;                                     // 0x0255(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F53[0x2];                                      // 0x0256(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class USQBoundaryListener*, struct FSQBoundaryListenerData> ListenerDatas;                                     // 0x0258(0x0050)(BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_F54[0x28];                                     // 0x02A8(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 BoundaryMaskData;                                  // 0x02D0(0x0010)(ZeroConstructor, NonPIEDuplicateTransient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F55[0x8];                                      // 0x02E0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FSQBoundaryListenerData FindListenerData(class USQBoundaryListener* Listener, bool* bOutFound);
	void GenerateBoundaryMask();
	struct FBoxSphereBounds GetXYBoundaryBounds();
	bool IsInside(const struct FVector& Location);
	void OnListenerEnterBoundary(class USQBoundaryListener* Listener);
	void OnListenerExitBoundary(class USQBoundaryListener* Listener);
	bool RegisterListener(class USQBoundaryListener* Listener, bool bForce);
	bool UnregisterListener(class USQBoundaryListener* Listener);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQBoundary">();
	}
	static class ASQBoundary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQBoundary>();
	}
};
static_assert(alignof(ASQBoundary) == 0x000008, "Wrong alignment on ASQBoundary");
static_assert(sizeof(ASQBoundary) == 0x0002E8, "Wrong size on ASQBoundary");
static_assert(offsetof(ASQBoundary, XYBoundary) == 0x000228, "Member 'ASQBoundary::XYBoundary' has a wrong offset!");
static_assert(offsetof(ASQBoundary, bXYBoundaryTangetsInwards) == 0x000230, "Member 'ASQBoundary::bXYBoundaryTangetsInwards' has a wrong offset!");
static_assert(offsetof(ASQBoundary, BoundaryMaskSizeX) == 0x000234, "Member 'ASQBoundary::BoundaryMaskSizeX' has a wrong offset!");
static_assert(offsetof(ASQBoundary, BoundaryMaskSizeY) == 0x000238, "Member 'ASQBoundary::BoundaryMaskSizeY' has a wrong offset!");
static_assert(offsetof(ASQBoundary, BoundaryMask) == 0x000240, "Member 'ASQBoundary::BoundaryMask' has a wrong offset!");
static_assert(offsetof(ASQBoundary, CeilingHeight) == 0x000248, "Member 'ASQBoundary::CeilingHeight' has a wrong offset!");
static_assert(offsetof(ASQBoundary, FloorHeight) == 0x00024C, "Member 'ASQBoundary::FloorHeight' has a wrong offset!");
static_assert(offsetof(ASQBoundary, CheckDelaySeconds) == 0x000250, "Member 'ASQBoundary::CheckDelaySeconds' has a wrong offset!");
static_assert(offsetof(ASQBoundary, bDefaultToInside) == 0x000254, "Member 'ASQBoundary::bDefaultToInside' has a wrong offset!");
static_assert(offsetof(ASQBoundary, bComplexCheck) == 0x000255, "Member 'ASQBoundary::bComplexCheck' has a wrong offset!");
static_assert(offsetof(ASQBoundary, ListenerDatas) == 0x000258, "Member 'ASQBoundary::ListenerDatas' has a wrong offset!");
static_assert(offsetof(ASQBoundary, BoundaryMaskData) == 0x0002D0, "Member 'ASQBoundary::BoundaryMaskData' has a wrong offset!");

// Class Squad.SQBPFL_UI
// 0x0000 (0x0028 - 0x0028)
class USQBPFL_UI final : public UBlueprintFunctionLibrary
{
public:
	static void CopyToClipboard(const class FString& ToText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQBPFL_UI">();
	}
	static class USQBPFL_UI* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQBPFL_UI>();
	}
};
static_assert(alignof(USQBPFL_UI) == 0x000008, "Wrong alignment on USQBPFL_UI");
static_assert(sizeof(USQBPFL_UI) == 0x000028, "Wrong size on USQBPFL_UI");

// Class Squad.SQBTDecorator_HasLoSTo
// 0x0028 (0x0090 - 0x0068)
class USQBTDecorator_HasLoSTo final : public UBTDecorator
{
public:
	struct FBlackboardKeySelector                 EnemyKey;                                          // 0x0068(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQBTDecorator_HasLoSTo">();
	}
	static class USQBTDecorator_HasLoSTo* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQBTDecorator_HasLoSTo>();
	}
};
static_assert(alignof(USQBTDecorator_HasLoSTo) == 0x000008, "Wrong alignment on USQBTDecorator_HasLoSTo");
static_assert(sizeof(USQBTDecorator_HasLoSTo) == 0x000090, "Wrong size on USQBTDecorator_HasLoSTo");
static_assert(offsetof(USQBTDecorator_HasLoSTo, EnemyKey) == 0x000068, "Member 'USQBTDecorator_HasLoSTo::EnemyKey' has a wrong offset!");

// Class Squad.SQBTTask_FindPointNearEnemy
// 0x0000 (0x0098 - 0x0098)
class USQBTTask_FindPointNearEnemy final : public UBTTask_BlackboardBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQBTTask_FindPointNearEnemy">();
	}
	static class USQBTTask_FindPointNearEnemy* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQBTTask_FindPointNearEnemy>();
	}
};
static_assert(alignof(USQBTTask_FindPointNearEnemy) == 0x000008, "Wrong alignment on USQBTTask_FindPointNearEnemy");
static_assert(sizeof(USQBTTask_FindPointNearEnemy) == 0x000098, "Wrong size on USQBTTask_FindPointNearEnemy");

// Class Squad.SQBuffManager
// 0x0058 (0x0108 - 0x00B0)
class USQBuffManager final : public UActorComponent
{
public:
	struct FSQBuffDesc                            Buffs[0x5];                                        // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             BuffAppliedEvent;                                  // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             BuffRemovedEvent;                                  // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             BuffEndedEvent;                                    // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void ApplyBuff(ESQBuffTypes BuffTypeToApply, float Duration);
	void PulseBuff(ESQBuffTypes BuffTypeToApply, float Duration);
	void RemoveBuff(ESQBuffTypes BuffTypeToRemove);

	bool HasBuff(ESQBuffTypes BuffTypeToCheck) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQBuffManager">();
	}
	static class USQBuffManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQBuffManager>();
	}
};
static_assert(alignof(USQBuffManager) == 0x000008, "Wrong alignment on USQBuffManager");
static_assert(sizeof(USQBuffManager) == 0x000108, "Wrong size on USQBuffManager");
static_assert(offsetof(USQBuffManager, Buffs) == 0x0000B0, "Member 'USQBuffManager::Buffs' has a wrong offset!");
static_assert(offsetof(USQBuffManager, BuffAppliedEvent) == 0x0000D8, "Member 'USQBuffManager::BuffAppliedEvent' has a wrong offset!");
static_assert(offsetof(USQBuffManager, BuffRemovedEvent) == 0x0000E8, "Member 'USQBuffManager::BuffRemovedEvent' has a wrong offset!");
static_assert(offsetof(USQBuffManager, BuffEndedEvent) == 0x0000F8, "Member 'USQBuffManager::BuffEndedEvent' has a wrong offset!");

// Class Squad.SQDamageType
// 0x0008 (0x0048 - 0x0040)
class USQDamageType : public UDamageType
{
public:
	bool                                          bCanCauseBleeding;                                 // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F5C[0x7];                                      // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDamageType">();
	}
	static class USQDamageType* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQDamageType>();
	}
};
static_assert(alignof(USQDamageType) == 0x000008, "Wrong alignment on USQDamageType");
static_assert(sizeof(USQDamageType) == 0x000048, "Wrong size on USQDamageType");
static_assert(offsetof(USQDamageType, bCanCauseBleeding) == 0x000040, "Member 'USQDamageType::bCanCauseBleeding' has a wrong offset!");

// Class Squad.SQRestriction_Boolean
// 0x0000 (0x0060 - 0x0060)
class USQRestriction_Boolean : public USQRestriction
{
public:
	bool IsRestrictedForPlayer(class ASQPlayerController* InPlayer) const;
	bool IsRestrictedForTeam(class ASQTeam* InTeam) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRestriction_Boolean">();
	}
	static class USQRestriction_Boolean* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRestriction_Boolean>();
	}
};
static_assert(alignof(USQRestriction_Boolean) == 0x000008, "Wrong alignment on USQRestriction_Boolean");
static_assert(sizeof(USQRestriction_Boolean) == 0x000060, "Wrong size on USQRestriction_Boolean");

// Class Squad.SQRestriction_ActorsInRange
// 0x0018 (0x0078 - 0x0060)
class USQRestriction_ActorsInRange final : public USQRestriction_Boolean
{
public:
	float                                         Range;                                             // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F5F[0x4];                                      // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AActor>                     TargetActorClass;                                  // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetCount;                                       // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F60[0x4];                                      // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsAuthorizedWithActorInRange(class ASQPlayerController* InPlayer, const class AActor* InActorInRange) const;
	bool IsRestrictedWithActorsInRange(class ASQPlayerController* InPlayer, const TArray<class AActor*>& InActorsInRange) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRestriction_ActorsInRange">();
	}
	static class USQRestriction_ActorsInRange* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRestriction_ActorsInRange>();
	}
};
static_assert(alignof(USQRestriction_ActorsInRange) == 0x000008, "Wrong alignment on USQRestriction_ActorsInRange");
static_assert(sizeof(USQRestriction_ActorsInRange) == 0x000078, "Wrong size on USQRestriction_ActorsInRange");
static_assert(offsetof(USQRestriction_ActorsInRange, Range) == 0x000060, "Member 'USQRestriction_ActorsInRange::Range' has a wrong offset!");
static_assert(offsetof(USQRestriction_ActorsInRange, TargetActorClass) == 0x000068, "Member 'USQRestriction_ActorsInRange::TargetActorClass' has a wrong offset!");
static_assert(offsetof(USQRestriction_ActorsInRange, TargetCount) == 0x000070, "Member 'USQRestriction_ActorsInRange::TargetCount' has a wrong offset!");

// Class Squad.SQBurningDamage
// 0x0000 (0x0048 - 0x0048)
class USQBurningDamage final : public USQDamageType
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQBurningDamage">();
	}
	static class USQBurningDamage* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQBurningDamage>();
	}
};
static_assert(alignof(USQBurningDamage) == 0x000008, "Wrong alignment on USQBurningDamage");
static_assert(sizeof(USQBurningDamage) == 0x000048, "Wrong size on USQBurningDamage");

// Class Squad.SQCameraMan
// 0x0050 (0x0510 - 0x04C0)
#pragma pack(push, 0x1)
class alignas(0x10) ASQCameraMan : public ACharacter
{
public:
	uint8                                         Pad_F63[0x8];                                      // 0x04B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	ESQListenerType                               ListenerType;                                      // 0x04C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F64[0x3];                                      // 0x04C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BaseTurnRate;                                      // 0x04C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseLookUpRate;                                    // 0x04C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F65[0x4];                                      // 0x04CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USpringArmComponent*                    SpringArm;                                         // 0x04D0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraComponent*                       FirstPersonCameraComponent;                        // 0x04D8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               CameraManHUDIconTexture;                           // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTryingToGainAltitude;                           // 0x04E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTryingToLoseAltitude;                           // 0x04E9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F66[0x16];                                     // 0x04EA(0x0016)(Fixing Size After Last Property [ Dumper-7 ])
	class USQCoreStateComponent*                  StateObject;                                       // 0x0500(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ClientUpdateCustomTimeDilation(const float NewCustomDilation);
	void DrawHUD(class ASQHUD* SquadHUD, class UCanvas* Canvas);
	void RecalculateCustomTimeDilation(float TimeDilation);
	void ServerSetDecelerationTarget(float InDecelerationTarget);
	void ServerSetFlySpeedTarget(float InFlySpeedTarget);
	void ServerSetIgnoreSlomo(bool bShouldIgnore);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCameraMan">();
	}
	static class ASQCameraMan* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQCameraMan>();
	}
};
#pragma pack(pop)
static_assert(alignof(ASQCameraMan) == 0x000010, "Wrong alignment on ASQCameraMan");
static_assert(sizeof(ASQCameraMan) == 0x000510, "Wrong size on ASQCameraMan");
static_assert(offsetof(ASQCameraMan, ListenerType) == 0x0004C0, "Member 'ASQCameraMan::ListenerType' has a wrong offset!");
static_assert(offsetof(ASQCameraMan, BaseTurnRate) == 0x0004C4, "Member 'ASQCameraMan::BaseTurnRate' has a wrong offset!");
static_assert(offsetof(ASQCameraMan, BaseLookUpRate) == 0x0004C8, "Member 'ASQCameraMan::BaseLookUpRate' has a wrong offset!");
static_assert(offsetof(ASQCameraMan, SpringArm) == 0x0004D0, "Member 'ASQCameraMan::SpringArm' has a wrong offset!");
static_assert(offsetof(ASQCameraMan, FirstPersonCameraComponent) == 0x0004D8, "Member 'ASQCameraMan::FirstPersonCameraComponent' has a wrong offset!");
static_assert(offsetof(ASQCameraMan, CameraManHUDIconTexture) == 0x0004E0, "Member 'ASQCameraMan::CameraManHUDIconTexture' has a wrong offset!");
static_assert(offsetof(ASQCameraMan, bIsTryingToGainAltitude) == 0x0004E8, "Member 'ASQCameraMan::bIsTryingToGainAltitude' has a wrong offset!");
static_assert(offsetof(ASQCameraMan, bIsTryingToLoseAltitude) == 0x0004E9, "Member 'ASQCameraMan::bIsTryingToLoseAltitude' has a wrong offset!");
static_assert(offsetof(ASQCameraMan, StateObject) == 0x000500, "Member 'ASQCameraMan::StateObject' has a wrong offset!");

// Class Squad.SQGraphNodeComponent
// 0x0078 (0x0128 - 0x00B0)
class USQGraphNodeComponent : public UActorComponent
{
public:
	TSubclassOf<class URouteSelectorPredicate>    RouteSelectorPredicate;                            // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class URouteSelectorPredicate>    RouteSelectorVisualizerPredicate;                  // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class URouteCombinerPredicate>    RouteCombinerPredicate;                            // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class USQGraphNodeComponent*>            DesignOutgoingLinks;                               // 0x00C8(0x0050)(BlueprintVisible, ExportObject, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class USQGraphNodeComponent*>          Neighbors;                                         // 0x0118(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void AddNeighbor(class USQGraphNodeComponent* Neighbor);
	void GetNeighbors(TArray<class USQGraphNodeComponent*>& InOutNodes);
	void OnNeighborAdded(class USQGraphNodeComponent* Neighbor);
	void OnNeighborRemoved(class USQGraphNodeComponent* Neighbor);
	void RemoveNeighbor(class USQGraphNodeComponent* Neighbor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGraphNodeComponent">();
	}
	static class USQGraphNodeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQGraphNodeComponent>();
	}
};
static_assert(alignof(USQGraphNodeComponent) == 0x000008, "Wrong alignment on USQGraphNodeComponent");
static_assert(sizeof(USQGraphNodeComponent) == 0x000128, "Wrong size on USQGraphNodeComponent");
static_assert(offsetof(USQGraphNodeComponent, RouteSelectorPredicate) == 0x0000B0, "Member 'USQGraphNodeComponent::RouteSelectorPredicate' has a wrong offset!");
static_assert(offsetof(USQGraphNodeComponent, RouteSelectorVisualizerPredicate) == 0x0000B8, "Member 'USQGraphNodeComponent::RouteSelectorVisualizerPredicate' has a wrong offset!");
static_assert(offsetof(USQGraphNodeComponent, RouteCombinerPredicate) == 0x0000C0, "Member 'USQGraphNodeComponent::RouteCombinerPredicate' has a wrong offset!");
static_assert(offsetof(USQGraphNodeComponent, DesignOutgoingLinks) == 0x0000C8, "Member 'USQGraphNodeComponent::DesignOutgoingLinks' has a wrong offset!");
static_assert(offsetof(USQGraphNodeComponent, Neighbors) == 0x000118, "Member 'USQGraphNodeComponent::Neighbors' has a wrong offset!");

// Class Squad.SQCaptureZoneComponent
// 0x0110 (0x0238 - 0x0128)
class USQCaptureZoneComponent : public USQGraphNodeComponent
{
public:
	uint8                                         InitialTeam;                                       // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F67[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   FlagName;                                          // 0x0130(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         CapturingTeam;                                     // 0x0148(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OwningTeam;                                        // 0x0149(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LastOwningTeam;                                    // 0x014A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Uncappable;                                        // 0x014B(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F68[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<TSoftClassPtr<class UClass>, struct FCaptureZoneStats> CaptureZoneValues;                                 // 0x0150(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCaptureZoneStats                      DefaultCaptureZoneValues;                          // 0x01A0(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         BonusCaptureMultiplier;                            // 0x01B8(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerAdvantage;                                   // 0x01BC(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapturePercentDelta;                               // 0x01C0(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapturePercent;                                    // 0x01C4(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CapturePercentDirection;                           // 0x01C8(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocked;                                         // 0x01CC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F69[0x3];                                      // 0x01CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             CaptureStateChangeEvent;                           // 0x01D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class USQCoreStateComponent*                  StateObject;                                       // 0x01E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F6A[0x28];                                     // 0x01E8(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        TeamCapturabilities;                               // 0x0210(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint32                                        TeamKnowledge;                                     // 0x0214(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FCaptureZoneStats                      CurrentCaptureZoneStats;                           // 0x0218(0x0018)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F6B[0x8];                                      // 0x0230(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CaptureTick();
	class USQGraphNodeComponent* FindMainBase(uint8 Team, TArray<class USQGraphNodeComponent*>& VisitedNodes);
	void FullyCap(uint8 ForTeam);
	void GetCapturezoneDirections(TArray<class USQCaptureZoneComponent*>& TeamOneDir, TArray<class USQCaptureZoneComponent*>& TeamTwoDir);
	void GetPlayersInCaptureZone(TArray<class AActor*>& TeamOne, TArray<class AActor*>& TeamTwo);
	void LockCaptureZone();
	void Neutralize();
	void OnIndexedTeamStatesReplicated();
	void OnRep_CapturePercent();
	void OnRep_CapturingTeam();
	void OnRep_OwningTeam();
	void OnRep_TeamCapturabilities();
	void OnRep_TeamKnowledge();
	void OnRep_Uncappable();
	bool SetTeamCanCapture(uint8 Team, bool bCanCap);
	bool SetTeamHaveKnowledge(uint8 Team, bool bHaveKnowledge);
	void UnlockCaptureZone();
	void UpdateCanCaptureState(TArray<class USQCaptureZoneComponent*>& TeamOneDir, TArray<class USQCaptureZoneComponent*>& TeamTwoDir);
	void UpdateCaptureState(class USQCaptureZoneComponent* CaptureZone, uint8 Team);
	void UpdateLockState();
	void UpdateTeamKnowledge(TArray<class USQCaptureZoneComponent*>& TeamOneDir, TArray<class USQCaptureZoneComponent*>& TeamTwoDir);

	bool GetCanTeamCapture(uint8 Team) const;
	bool GetCurrentModeCaptureZoneStats(struct FCaptureZoneStats* OutputCaptureZoneStats) const;
	bool GetTeamHaveKnowledge(uint8 Team) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCaptureZoneComponent">();
	}
	static class USQCaptureZoneComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCaptureZoneComponent>();
	}
};
static_assert(alignof(USQCaptureZoneComponent) == 0x000008, "Wrong alignment on USQCaptureZoneComponent");
static_assert(sizeof(USQCaptureZoneComponent) == 0x000238, "Wrong size on USQCaptureZoneComponent");
static_assert(offsetof(USQCaptureZoneComponent, InitialTeam) == 0x000128, "Member 'USQCaptureZoneComponent::InitialTeam' has a wrong offset!");
static_assert(offsetof(USQCaptureZoneComponent, FlagName) == 0x000130, "Member 'USQCaptureZoneComponent::FlagName' has a wrong offset!");
static_assert(offsetof(USQCaptureZoneComponent, CapturingTeam) == 0x000148, "Member 'USQCaptureZoneComponent::CapturingTeam' has a wrong offset!");
static_assert(offsetof(USQCaptureZoneComponent, OwningTeam) == 0x000149, "Member 'USQCaptureZoneComponent::OwningTeam' has a wrong offset!");
static_assert(offsetof(USQCaptureZoneComponent, LastOwningTeam) == 0x00014A, "Member 'USQCaptureZoneComponent::LastOwningTeam' has a wrong offset!");
static_assert(offsetof(USQCaptureZoneComponent, Uncappable) == 0x00014B, "Member 'USQCaptureZoneComponent::Uncappable' has a wrong offset!");
static_assert(offsetof(USQCaptureZoneComponent, CaptureZoneValues) == 0x000150, "Member 'USQCaptureZoneComponent::CaptureZoneValues' has a wrong offset!");
static_assert(offsetof(USQCaptureZoneComponent, DefaultCaptureZoneValues) == 0x0001A0, "Member 'USQCaptureZoneComponent::DefaultCaptureZoneValues' has a wrong offset!");
static_assert(offsetof(USQCaptureZoneComponent, BonusCaptureMultiplier) == 0x0001B8, "Member 'USQCaptureZoneComponent::BonusCaptureMultiplier' has a wrong offset!");
static_assert(offsetof(USQCaptureZoneComponent, PlayerAdvantage) == 0x0001BC, "Member 'USQCaptureZoneComponent::PlayerAdvantage' has a wrong offset!");
static_assert(offsetof(USQCaptureZoneComponent, CapturePercentDelta) == 0x0001C0, "Member 'USQCaptureZoneComponent::CapturePercentDelta' has a wrong offset!");
static_assert(offsetof(USQCaptureZoneComponent, CapturePercent) == 0x0001C4, "Member 'USQCaptureZoneComponent::CapturePercent' has a wrong offset!");
static_assert(offsetof(USQCaptureZoneComponent, CapturePercentDirection) == 0x0001C8, "Member 'USQCaptureZoneComponent::CapturePercentDirection' has a wrong offset!");
static_assert(offsetof(USQCaptureZoneComponent, bIsLocked) == 0x0001CC, "Member 'USQCaptureZoneComponent::bIsLocked' has a wrong offset!");
static_assert(offsetof(USQCaptureZoneComponent, CaptureStateChangeEvent) == 0x0001D0, "Member 'USQCaptureZoneComponent::CaptureStateChangeEvent' has a wrong offset!");
static_assert(offsetof(USQCaptureZoneComponent, StateObject) == 0x0001E0, "Member 'USQCaptureZoneComponent::StateObject' has a wrong offset!");
static_assert(offsetof(USQCaptureZoneComponent, TeamCapturabilities) == 0x000210, "Member 'USQCaptureZoneComponent::TeamCapturabilities' has a wrong offset!");
static_assert(offsetof(USQCaptureZoneComponent, TeamKnowledge) == 0x000214, "Member 'USQCaptureZoneComponent::TeamKnowledge' has a wrong offset!");
static_assert(offsetof(USQCaptureZoneComponent, CurrentCaptureZoneStats) == 0x000218, "Member 'USQCaptureZoneComponent::CurrentCaptureZoneStats' has a wrong offset!");

// Class Squad.SQCaptureZoneInvasionComponent
// 0x0008 (0x0240 - 0x0238)
class USQCaptureZoneInvasionComponent final : public USQCaptureZoneComponent
{
public:
	int32                                         TeamToLockFor;                                     // 0x0238(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F6F[0x4];                                      // 0x023C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCaptureZoneInvasionComponent">();
	}
	static class USQCaptureZoneInvasionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCaptureZoneInvasionComponent>();
	}
};
static_assert(alignof(USQCaptureZoneInvasionComponent) == 0x000008, "Wrong alignment on USQCaptureZoneInvasionComponent");
static_assert(sizeof(USQCaptureZoneInvasionComponent) == 0x000240, "Wrong size on USQCaptureZoneInvasionComponent");
static_assert(offsetof(USQCaptureZoneInvasionComponent, TeamToLockFor) == 0x000238, "Member 'USQCaptureZoneInvasionComponent::TeamToLockFor' has a wrong offset!");

// Class Squad.SQCaptureZoneResourceComponent
// 0x0000 (0x00B0 - 0x00B0)
class USQCaptureZoneResourceComponent final : public UActorComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCaptureZoneResourceComponent">();
	}
	static class USQCaptureZoneResourceComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCaptureZoneResourceComponent>();
	}
};
static_assert(alignof(USQCaptureZoneResourceComponent) == 0x000008, "Wrong alignment on USQCaptureZoneResourceComponent");
static_assert(sizeof(USQCaptureZoneResourceComponent) == 0x0000B0, "Wrong size on USQCaptureZoneResourceComponent");

// Class Squad.SQCaptureZoneTCComponent
// 0x0000 (0x0238 - 0x0238)
class USQCaptureZoneTCComponent final : public USQCaptureZoneComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCaptureZoneTCComponent">();
	}
	static class USQCaptureZoneTCComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCaptureZoneTCComponent>();
	}
};
static_assert(alignof(USQCaptureZoneTCComponent) == 0x000008, "Wrong alignment on USQCaptureZoneTCComponent");
static_assert(sizeof(USQCaptureZoneTCComponent) == 0x000238, "Wrong size on USQCaptureZoneTCComponent");

// Class Squad.SQFloatingVehicle
// 0x0030 (0x0350 - 0x0320)
class ASQFloatingVehicle final : public ASQPawn
{
public:
	class USQSimpleMovementComponent*             SimpleMovementComponent;                           // 0x0320(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraComponent*                       CameraComponent;                                   // 0x0328(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpringArmComponent*                    SpringArm;                                         // 0x0330(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0338(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCapsuleComponent*                      CapsuleComponent;                                  // 0x0340(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F70[0x8];                                      // 0x0348(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQFloatingVehicle">();
	}
	static class ASQFloatingVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQFloatingVehicle>();
	}
};
static_assert(alignof(ASQFloatingVehicle) == 0x000010, "Wrong alignment on ASQFloatingVehicle");
static_assert(sizeof(ASQFloatingVehicle) == 0x000350, "Wrong size on ASQFloatingVehicle");
static_assert(offsetof(ASQFloatingVehicle, SimpleMovementComponent) == 0x000320, "Member 'ASQFloatingVehicle::SimpleMovementComponent' has a wrong offset!");
static_assert(offsetof(ASQFloatingVehicle, CameraComponent) == 0x000328, "Member 'ASQFloatingVehicle::CameraComponent' has a wrong offset!");
static_assert(offsetof(ASQFloatingVehicle, SpringArm) == 0x000330, "Member 'ASQFloatingVehicle::SpringArm' has a wrong offset!");
static_assert(offsetof(ASQFloatingVehicle, SkeletalMeshComponent) == 0x000338, "Member 'ASQFloatingVehicle::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(ASQFloatingVehicle, CapsuleComponent) == 0x000340, "Member 'ASQFloatingVehicle::CapsuleComponent' has a wrong offset!");

// Class Squad.SQCdnFile
// 0x0010 (0x0038 - 0x0028)
class USQCdnFile final : public UObject
{
public:
	TArray<uint8>                                 Data;                                              // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	class UTexture2D* GetAsTexture() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCdnFile">();
	}
	static class USQCdnFile* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCdnFile>();
	}
};
static_assert(alignof(USQCdnFile) == 0x000008, "Wrong alignment on USQCdnFile");
static_assert(sizeof(USQCdnFile) == 0x000038, "Wrong size on USQCdnFile");
static_assert(offsetof(USQCdnFile, Data) == 0x000028, "Member 'USQCdnFile::Data' has a wrong offset!");

// Class Squad.SQChatWidgetStyle
// 0x0908 (0x0938 - 0x0030)
class USQChatWidgetStyle final : public USlateWidgetStyleContainerBase
{
public:
	struct FSQChatStyle                           ChatStyle;                                         // 0x0030(0x0908)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQChatWidgetStyle">();
	}
	static class USQChatWidgetStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQChatWidgetStyle>();
	}
};
static_assert(alignof(USQChatWidgetStyle) == 0x000008, "Wrong alignment on USQChatWidgetStyle");
static_assert(sizeof(USQChatWidgetStyle) == 0x000938, "Wrong size on USQChatWidgetStyle");
static_assert(offsetof(USQChatWidgetStyle, ChatStyle) == 0x000030, "Member 'USQChatWidgetStyle::ChatStyle' has a wrong offset!");

// Class Squad.SQCheatManager
// 0x0000 (0x0088 - 0x0088)
class USQCheatManager final : public UCheatManager
{
public:
	void SqDumpPakContents(const class FString& OutputFilename);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCheatManager">();
	}
	static class USQCheatManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCheatManager>();
	}
};
static_assert(alignof(USQCheatManager) == 0x000008, "Wrong alignment on USQCheatManager");
static_assert(sizeof(USQCheatManager) == 0x000088, "Wrong size on USQCheatManager");

// Class Squad.SQFriendsBrowserWidget
// 0x0010 (0x0278 - 0x0268)
class USQFriendsBrowserWidget : public USQUserWidget
{
public:
	bool                                          bCanStartNewFindFriends;                           // 0x0268(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F71[0x7];                                      // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQFindFriendsCallbackProxy*            CurrentCallback;                                   // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnFailure();
	void OnFindFriendsCompleted(const TArray<struct FSQBlueprintFriend>& Results, bool bSuccess);
	void OnSuccess(const TArray<struct FSQBlueprintFriend>& Results);
	void StartFindFriends();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQFriendsBrowserWidget">();
	}
	static class USQFriendsBrowserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQFriendsBrowserWidget>();
	}
};
static_assert(alignof(USQFriendsBrowserWidget) == 0x000008, "Wrong alignment on USQFriendsBrowserWidget");
static_assert(sizeof(USQFriendsBrowserWidget) == 0x000278, "Wrong size on USQFriendsBrowserWidget");
static_assert(offsetof(USQFriendsBrowserWidget, bCanStartNewFindFriends) == 0x000268, "Member 'USQFriendsBrowserWidget::bCanStartNewFindFriends' has a wrong offset!");
static_assert(offsetof(USQFriendsBrowserWidget, CurrentCallback) == 0x000270, "Member 'USQFriendsBrowserWidget::CurrentCallback' has a wrong offset!");

// Class Squad.SQChunkSettings
// 0x0078 (0x00B0 - 0x0038)
class USQChunkSettings final : public UDeveloperSettings
{
public:
	TArray<TSoftObjectPtr<class USQLevel>>        LevelsToCook;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class USQLayer>>        LayersToCook;                                      // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class USQFaction>>      FactionsToCook;                                    // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class USQFactionSetup>> FactionSetupsToCook;                               // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bGroupSharedLevelAssets;                           // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGroupSharedFactionAssets;                         // 0x0079(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F73[0x2];                                      // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FactionSharedChunkId;                              // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelSharedChunkId;                                // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LayerChunkIdOffset;                                // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoResolveAssetLabelDependencies;                // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoResolveNonRecursivePriorities;                // 0x0089(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F74[0x6];                                      // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQChunkReplacementRule>        ChunkReplacementRules;                             // 0x0090(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FSQChunkRule>                   ChunkRules;                                        // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)

public:
	static class USQChunkSettings* GetChunkSettings();

	void CollectFactionSetupsFromFactions();
	void CollectLayersFromLevels();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQChunkSettings">();
	}
	static class USQChunkSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQChunkSettings>();
	}
};
static_assert(alignof(USQChunkSettings) == 0x000008, "Wrong alignment on USQChunkSettings");
static_assert(sizeof(USQChunkSettings) == 0x0000B0, "Wrong size on USQChunkSettings");
static_assert(offsetof(USQChunkSettings, LevelsToCook) == 0x000038, "Member 'USQChunkSettings::LevelsToCook' has a wrong offset!");
static_assert(offsetof(USQChunkSettings, LayersToCook) == 0x000048, "Member 'USQChunkSettings::LayersToCook' has a wrong offset!");
static_assert(offsetof(USQChunkSettings, FactionsToCook) == 0x000058, "Member 'USQChunkSettings::FactionsToCook' has a wrong offset!");
static_assert(offsetof(USQChunkSettings, FactionSetupsToCook) == 0x000068, "Member 'USQChunkSettings::FactionSetupsToCook' has a wrong offset!");
static_assert(offsetof(USQChunkSettings, bGroupSharedLevelAssets) == 0x000078, "Member 'USQChunkSettings::bGroupSharedLevelAssets' has a wrong offset!");
static_assert(offsetof(USQChunkSettings, bGroupSharedFactionAssets) == 0x000079, "Member 'USQChunkSettings::bGroupSharedFactionAssets' has a wrong offset!");
static_assert(offsetof(USQChunkSettings, FactionSharedChunkId) == 0x00007C, "Member 'USQChunkSettings::FactionSharedChunkId' has a wrong offset!");
static_assert(offsetof(USQChunkSettings, LevelSharedChunkId) == 0x000080, "Member 'USQChunkSettings::LevelSharedChunkId' has a wrong offset!");
static_assert(offsetof(USQChunkSettings, LayerChunkIdOffset) == 0x000084, "Member 'USQChunkSettings::LayerChunkIdOffset' has a wrong offset!");
static_assert(offsetof(USQChunkSettings, bAutoResolveAssetLabelDependencies) == 0x000088, "Member 'USQChunkSettings::bAutoResolveAssetLabelDependencies' has a wrong offset!");
static_assert(offsetof(USQChunkSettings, bAutoResolveNonRecursivePriorities) == 0x000089, "Member 'USQChunkSettings::bAutoResolveNonRecursivePriorities' has a wrong offset!");
static_assert(offsetof(USQChunkSettings, ChunkReplacementRules) == 0x000090, "Member 'USQChunkSettings::ChunkReplacementRules' has a wrong offset!");
static_assert(offsetof(USQChunkSettings, ChunkRules) == 0x0000A0, "Member 'USQChunkSettings::ChunkRules' has a wrong offset!");

// Class Squad.SQClientsideWeaponSettings
// 0x0028 (0x0060 - 0x0038)
class USQClientsideWeaponSettings final : public UDeveloperSettings
{
public:
	float                                         MaxVerificationAngle;                              // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShotTimeout;                                       // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowProjectileTimeout;                             // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyPlayerOnShotFail;                           // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyAdminOnShotFail;                            // 0x0045(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyPlayerOnHitFail;                            // 0x0046(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNotifyAdminOnHitFail;                             // 0x0047(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<ESQHitDetectionFailReason>             NotifyOnlyOnTheseFailureReasons;                   // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	int32                                         ConsecutiveFailedShotKickAmount;                   // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConsecutiveFailedHitKickAmount;                    // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQClientsideWeaponSettings">();
	}
	static class USQClientsideWeaponSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQClientsideWeaponSettings>();
	}
};
static_assert(alignof(USQClientsideWeaponSettings) == 0x000008, "Wrong alignment on USQClientsideWeaponSettings");
static_assert(sizeof(USQClientsideWeaponSettings) == 0x000060, "Wrong size on USQClientsideWeaponSettings");
static_assert(offsetof(USQClientsideWeaponSettings, MaxVerificationAngle) == 0x000038, "Member 'USQClientsideWeaponSettings::MaxVerificationAngle' has a wrong offset!");
static_assert(offsetof(USQClientsideWeaponSettings, ShotTimeout) == 0x00003C, "Member 'USQClientsideWeaponSettings::ShotTimeout' has a wrong offset!");
static_assert(offsetof(USQClientsideWeaponSettings, SlowProjectileTimeout) == 0x000040, "Member 'USQClientsideWeaponSettings::SlowProjectileTimeout' has a wrong offset!");
static_assert(offsetof(USQClientsideWeaponSettings, bNotifyPlayerOnShotFail) == 0x000044, "Member 'USQClientsideWeaponSettings::bNotifyPlayerOnShotFail' has a wrong offset!");
static_assert(offsetof(USQClientsideWeaponSettings, bNotifyAdminOnShotFail) == 0x000045, "Member 'USQClientsideWeaponSettings::bNotifyAdminOnShotFail' has a wrong offset!");
static_assert(offsetof(USQClientsideWeaponSettings, bNotifyPlayerOnHitFail) == 0x000046, "Member 'USQClientsideWeaponSettings::bNotifyPlayerOnHitFail' has a wrong offset!");
static_assert(offsetof(USQClientsideWeaponSettings, bNotifyAdminOnHitFail) == 0x000047, "Member 'USQClientsideWeaponSettings::bNotifyAdminOnHitFail' has a wrong offset!");
static_assert(offsetof(USQClientsideWeaponSettings, NotifyOnlyOnTheseFailureReasons) == 0x000048, "Member 'USQClientsideWeaponSettings::NotifyOnlyOnTheseFailureReasons' has a wrong offset!");
static_assert(offsetof(USQClientsideWeaponSettings, ConsecutiveFailedShotKickAmount) == 0x000058, "Member 'USQClientsideWeaponSettings::ConsecutiveFailedShotKickAmount' has a wrong offset!");
static_assert(offsetof(USQClientsideWeaponSettings, ConsecutiveFailedHitKickAmount) == 0x00005C, "Member 'USQClientsideWeaponSettings::ConsecutiveFailedHitKickAmount' has a wrong offset!");

// Class Squad.SQForceMovementComponentSettings
// 0x0058 (0x0088 - 0x0030)
class USQForceMovementComponentSettings final : public UDataAsset
{
public:
	float                                         Mass;                                              // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               MaxRotationalVelocity;                             // 0x0038(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Length;                                            // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            AirDensityByHeight;                                // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DragCoefficient;                                   // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gravity;                                           // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyGravity;                                     // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyDrag;                                        // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F75[0x2];                                      // 0x0062(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DragApplicationSocket;                             // 0x0064(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DragTorqueMultiplier;                              // 0x006C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyCentripedalForce;                            // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePhysX;                                         // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugForces;                                      // 0x007A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F76[0x1];                                      // 0x007B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AngularDamping;                                    // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearDamping;                                     // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F77[0x4];                                      // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQForceMovementComponentSettings">();
	}
	static class USQForceMovementComponentSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQForceMovementComponentSettings>();
	}
};
static_assert(alignof(USQForceMovementComponentSettings) == 0x000008, "Wrong alignment on USQForceMovementComponentSettings");
static_assert(sizeof(USQForceMovementComponentSettings) == 0x000088, "Wrong size on USQForceMovementComponentSettings");
static_assert(offsetof(USQForceMovementComponentSettings, Mass) == 0x000030, "Member 'USQForceMovementComponentSettings::Mass' has a wrong offset!");
static_assert(offsetof(USQForceMovementComponentSettings, MaxSpeed) == 0x000034, "Member 'USQForceMovementComponentSettings::MaxSpeed' has a wrong offset!");
static_assert(offsetof(USQForceMovementComponentSettings, MaxRotationalVelocity) == 0x000038, "Member 'USQForceMovementComponentSettings::MaxRotationalVelocity' has a wrong offset!");
static_assert(offsetof(USQForceMovementComponentSettings, Length) == 0x000044, "Member 'USQForceMovementComponentSettings::Length' has a wrong offset!");
static_assert(offsetof(USQForceMovementComponentSettings, Width) == 0x000048, "Member 'USQForceMovementComponentSettings::Width' has a wrong offset!");
static_assert(offsetof(USQForceMovementComponentSettings, Height) == 0x00004C, "Member 'USQForceMovementComponentSettings::Height' has a wrong offset!");
static_assert(offsetof(USQForceMovementComponentSettings, AirDensityByHeight) == 0x000050, "Member 'USQForceMovementComponentSettings::AirDensityByHeight' has a wrong offset!");
static_assert(offsetof(USQForceMovementComponentSettings, DragCoefficient) == 0x000058, "Member 'USQForceMovementComponentSettings::DragCoefficient' has a wrong offset!");
static_assert(offsetof(USQForceMovementComponentSettings, Gravity) == 0x00005C, "Member 'USQForceMovementComponentSettings::Gravity' has a wrong offset!");
static_assert(offsetof(USQForceMovementComponentSettings, bApplyGravity) == 0x000060, "Member 'USQForceMovementComponentSettings::bApplyGravity' has a wrong offset!");
static_assert(offsetof(USQForceMovementComponentSettings, bApplyDrag) == 0x000061, "Member 'USQForceMovementComponentSettings::bApplyDrag' has a wrong offset!");
static_assert(offsetof(USQForceMovementComponentSettings, DragApplicationSocket) == 0x000064, "Member 'USQForceMovementComponentSettings::DragApplicationSocket' has a wrong offset!");
static_assert(offsetof(USQForceMovementComponentSettings, DragTorqueMultiplier) == 0x00006C, "Member 'USQForceMovementComponentSettings::DragTorqueMultiplier' has a wrong offset!");
static_assert(offsetof(USQForceMovementComponentSettings, bApplyCentripedalForce) == 0x000078, "Member 'USQForceMovementComponentSettings::bApplyCentripedalForce' has a wrong offset!");
static_assert(offsetof(USQForceMovementComponentSettings, bUsePhysX) == 0x000079, "Member 'USQForceMovementComponentSettings::bUsePhysX' has a wrong offset!");
static_assert(offsetof(USQForceMovementComponentSettings, bDebugForces) == 0x00007A, "Member 'USQForceMovementComponentSettings::bDebugForces' has a wrong offset!");
static_assert(offsetof(USQForceMovementComponentSettings, AngularDamping) == 0x00007C, "Member 'USQForceMovementComponentSettings::AngularDamping' has a wrong offset!");
static_assert(offsetof(USQForceMovementComponentSettings, LinearDamping) == 0x000080, "Member 'USQForceMovementComponentSettings::LinearDamping' has a wrong offset!");

// Class Squad.SQCloudServicesSubsystem
// 0x0120 (0x0150 - 0x0030)
class USQCloudServicesSubsystem final : public UGameInstanceSubsystem
{
public:
	FMulticastInlineDelegateProperty_             OnNewsDataReady;                                   // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnCrossPromoDataReady;                             // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTitleDataReady;                                  // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayerDataReady;                                 // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_F78[0x50];                                     // 0x0070(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USQCloudProvider*>               ProviderList;                                      // 0x00C0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_F79[0x78];                                     // 0x00D0(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	ECloudProvider                                NewsProvider;                                      // 0x0148(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECloudProvider                                TitleDataProvider;                                 // 0x0149(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECloudProvider                                PlayerDataProvider;                                // 0x014A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECloudProvider                                ImageProvider;                                     // 0x014B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECloudProvider                                AnalyticsProvider;                                 // 0x014C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F7A[0x3];                                      // 0x014D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void AcceptPrivacyPolicy();
	static const struct FCrossPromotionData GetCrossPromotionData();
	static const struct FNewsData GetNewsData();
	static const struct FTitleData GetTitleData();
	static void RequestFile(const class FString& Filename, TDelegate<void(class USQCdnFile* File)> OnReadyDelegate);
	static void RequestNewsData(bool bForceRefresh);
	static void RequestPlayerData(bool bForceRefresh);
	static void RequestTitleData(bool bForceRefresh);
	static void SendAnalyticEvent(const class FString& EventName, const class FString& EventDataKey, const class FString& EventData);
	static void SendAnalyticEventArray(const class FString& EventName, const TArray<struct FAnalyticKeyValue>& EventData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCloudServicesSubsystem">();
	}
	static class USQCloudServicesSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCloudServicesSubsystem>();
	}
};
static_assert(alignof(USQCloudServicesSubsystem) == 0x000008, "Wrong alignment on USQCloudServicesSubsystem");
static_assert(sizeof(USQCloudServicesSubsystem) == 0x000150, "Wrong size on USQCloudServicesSubsystem");
static_assert(offsetof(USQCloudServicesSubsystem, OnNewsDataReady) == 0x000030, "Member 'USQCloudServicesSubsystem::OnNewsDataReady' has a wrong offset!");
static_assert(offsetof(USQCloudServicesSubsystem, OnCrossPromoDataReady) == 0x000040, "Member 'USQCloudServicesSubsystem::OnCrossPromoDataReady' has a wrong offset!");
static_assert(offsetof(USQCloudServicesSubsystem, OnTitleDataReady) == 0x000050, "Member 'USQCloudServicesSubsystem::OnTitleDataReady' has a wrong offset!");
static_assert(offsetof(USQCloudServicesSubsystem, OnPlayerDataReady) == 0x000060, "Member 'USQCloudServicesSubsystem::OnPlayerDataReady' has a wrong offset!");
static_assert(offsetof(USQCloudServicesSubsystem, ProviderList) == 0x0000C0, "Member 'USQCloudServicesSubsystem::ProviderList' has a wrong offset!");
static_assert(offsetof(USQCloudServicesSubsystem, NewsProvider) == 0x000148, "Member 'USQCloudServicesSubsystem::NewsProvider' has a wrong offset!");
static_assert(offsetof(USQCloudServicesSubsystem, TitleDataProvider) == 0x000149, "Member 'USQCloudServicesSubsystem::TitleDataProvider' has a wrong offset!");
static_assert(offsetof(USQCloudServicesSubsystem, PlayerDataProvider) == 0x00014A, "Member 'USQCloudServicesSubsystem::PlayerDataProvider' has a wrong offset!");
static_assert(offsetof(USQCloudServicesSubsystem, ImageProvider) == 0x00014B, "Member 'USQCloudServicesSubsystem::ImageProvider' has a wrong offset!");
static_assert(offsetof(USQCloudServicesSubsystem, AnalyticsProvider) == 0x00014C, "Member 'USQCloudServicesSubsystem::AnalyticsProvider' has a wrong offset!");

// Class Squad.SQCollisionDamage
// 0x0040 (0x00F0 - 0x00B0)
class USQCollisionDamage : public UActorComponent
{
public:
	float                                         MinDamage;                                         // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxDamage;                                         // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinImpactForce;                                    // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxImpactForce;                                    // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            InterpCurve;                                       // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundCue*                              CollisionSound;                                    // 0x00C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        ParticleEffect;                                    // 0x00D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraSystem*                         NiagaraParticleEffect;                             // 0x00D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UCameraShakeBase>           CollisionCameraShake;                              // 0x00E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinShakeForce;                                     // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxShakeForce;                                     // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ApplyDamage(float Damage);
	void OnActorHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);

	float CalculateDamage(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCollisionDamage">();
	}
	static class USQCollisionDamage* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCollisionDamage>();
	}
};
static_assert(alignof(USQCollisionDamage) == 0x000008, "Wrong alignment on USQCollisionDamage");
static_assert(sizeof(USQCollisionDamage) == 0x0000F0, "Wrong size on USQCollisionDamage");
static_assert(offsetof(USQCollisionDamage, MinDamage) == 0x0000B0, "Member 'USQCollisionDamage::MinDamage' has a wrong offset!");
static_assert(offsetof(USQCollisionDamage, MaxDamage) == 0x0000B4, "Member 'USQCollisionDamage::MaxDamage' has a wrong offset!");
static_assert(offsetof(USQCollisionDamage, MinImpactForce) == 0x0000B8, "Member 'USQCollisionDamage::MinImpactForce' has a wrong offset!");
static_assert(offsetof(USQCollisionDamage, MaxImpactForce) == 0x0000BC, "Member 'USQCollisionDamage::MaxImpactForce' has a wrong offset!");
static_assert(offsetof(USQCollisionDamage, InterpCurve) == 0x0000C0, "Member 'USQCollisionDamage::InterpCurve' has a wrong offset!");
static_assert(offsetof(USQCollisionDamage, CollisionSound) == 0x0000C8, "Member 'USQCollisionDamage::CollisionSound' has a wrong offset!");
static_assert(offsetof(USQCollisionDamage, ParticleEffect) == 0x0000D0, "Member 'USQCollisionDamage::ParticleEffect' has a wrong offset!");
static_assert(offsetof(USQCollisionDamage, NiagaraParticleEffect) == 0x0000D8, "Member 'USQCollisionDamage::NiagaraParticleEffect' has a wrong offset!");
static_assert(offsetof(USQCollisionDamage, CollisionCameraShake) == 0x0000E0, "Member 'USQCollisionDamage::CollisionCameraShake' has a wrong offset!");
static_assert(offsetof(USQCollisionDamage, MinShakeForce) == 0x0000E8, "Member 'USQCollisionDamage::MinShakeForce' has a wrong offset!");
static_assert(offsetof(USQCollisionDamage, MaxShakeForce) == 0x0000EC, "Member 'USQCollisionDamage::MaxShakeForce' has a wrong offset!");

// Class Squad.SQItemStaticInfo
// 0x05C0 (0x05F0 - 0x0030)
class USQItemStaticInfo : public UDataAsset
{
public:
	class UAnimMontage*                           BaseWeaponMontage;                                 // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Base1pMontage;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Base3pMontage;                                     // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          SprintToProne3p;                                   // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          StandToProne3p;                                    // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ProneToStand3p;                                    // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          CrouchToProne3p;                                   // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ProneToCrouch3p;                                   // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          AO1D_StandPitch;                                   // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          AO1D_CrouchPitch;                                  // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          AO1D_PronePitch;                                   // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            AO_BipodStandCrouchPitch;                          // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AO1D_StandYawSF;                                   // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AO1D_CrouchYawSF;                                  // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AO1D_ProneYawSF;                                   // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          StandTurnRight;                                    // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          StandTurnLeft;                                     // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          CrouchTurnRight;                                   // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          CrouchTurnLeft;                                    // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ProneTurnRight;                                    // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ProneTurnLeft;                                     // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReloadWeaponMontage;                               // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Reload1pMontage;                                   // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Reload3pMontage;                                   // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckCurrentMagazineForEquip;                     // 0x00F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckCurrentMagazineForUnequip;                   // 0x00F1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F7C[0x6];                                      // 0x00F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           EmptyEquipWeaponMontage;                           // 0x00F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           EmptyEquip1pMontage;                               // 0x0100(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           EmptyEquip3pMontage;                               // 0x0108(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           EquipWeaponMontage;                                // 0x0110(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Equip1pMontage;                                    // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Equip3pMontage;                                    // 0x0120(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           EmptyUnequipWeaponMontage;                         // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           EmptyUnequip1pMontage;                             // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           EmptyUnequip3pMontage;                             // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           UnequipWeaponMontage;                              // 0x0140(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Unequip1pMontage;                                  // 0x0148(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Unequip3pMontage;                                  // 0x0150(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           BobbingSprint1pMontage;                            // 0x0158(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           BobbingEndSprint1pMontage;                         // 0x0160(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           BobbingAddSprint1pMontage;                         // 0x0168(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          BS1D_3pStandSprintType;                            // 0x0170(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          BS1D_3pCrouchSprintType;                           // 0x0178(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          SprintStop3p;                                      // 0x0180(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            BS_3pStandJogType;                                 // 0x0188(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            BS_3pStandWalkType;                                // 0x0190(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            BS_3pCrouchWalkType;                               // 0x0198(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          BS1D_3pProneCrawlType;                             // 0x01A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          StandStopMove;                                     // 0x01A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          CrouchStopMove;                                    // 0x01B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           BobbingMove1pMontage;                              // 0x01B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Idle1pMontage;                                     // 0x01C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           LeanLeftBegin3pMontage;                            // 0x01C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           LeanLeftEnd3pMontage;                              // 0x01D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           LeanRightBegin3pMontage;                           // 0x01D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           LeanRightEnd3pMontage;                             // 0x01E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          StandLeanLeftShuffle;                              // 0x01E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          StandLeanRightShuffle;                             // 0x01F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          CrouchLeanLeftShuffle;                             // 0x01F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          CrouchLeanRightShuffle;                            // 0x0200(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Lowered1pMontage;                                  // 0x0208(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Lowered3pMontage;                                  // 0x0210(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           LoweredCrouch3pMontage;                            // 0x0218(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Raised1pMontage;                                   // 0x0220(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Raised3pMontage;                                   // 0x0228(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           RaisedCrouch3pMontage;                             // 0x0230(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQMontageSectionNames                 MoveBobbingEndLoopSectionNames;                    // 0x0238(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQMontageSectionNames                 SprintBobbingEndLoopSectionNames;                  // 0x0260(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class UBlendSpaceBase*                        BobbingProneMoveType;                              // 0x0288(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          ProneMoveTypeAdditiveReference;                    // 0x0290(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          OutProneMoveType;                                  // 0x0298(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          OutProneMoveTypeNonadditive;                       // 0x02A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftHandWeaponIkAlpha;                             // 0x02A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightHand3pWeaponIkAlpha;                          // 0x02AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JogPlayRateFactorMinRange;                         // 0x02B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SprintPlayRateFactorMinRange;                      // 0x02B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SprintBlendFactorMinRange;                         // 0x02B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SprintBlendSpeedInterpSpeed;                       // 0x02BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          SprintStaticPose;                                  // 0x02C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoweringBlendOutTime;                              // 0x02C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdleBlendOutTime;                                  // 0x02CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSQBoredMontageSet>             BoredMontage;                                      // 0x02D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         BoredMaxFrequency;                                 // 0x02E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoredAbortBlendOutTime;                            // 0x02E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSQMutualWeapon>                MutualWeapons;                                     // 0x02E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         EmptyUnequipDuration;                              // 0x02F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmptyEquipDuration;                                // 0x02FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAutoLowering;                                  // 0x0300(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F7D[0x3];                                      // 0x0301(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LoweringTimer;                                     // 0x0304(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemCollisionDistance;                             // 0x0308(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReturnToADSAfterItemCollision;                    // 0x030C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowRaisingAboveHead;                            // 0x030D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F7E[0x2];                                      // 0x030E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RaisingBlendOutTime;                               // 0x0310(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F7F[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCameraShakeBase>           FireShake;                                         // 0x0318(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StandLoc;                                          // 0x0320(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CrouchLoc;                                         // 0x032C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ProneLoc;                                          // 0x0338(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BipodLoc;                                          // 0x0344(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandLocBlendTime;                                 // 0x0350(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OffsetLineOfFire;                                  // 0x0354(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                StandLeanLeftRootOffset;                           // 0x0360(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               StandLeanLeftWeaponRotation;                       // 0x036C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               StandLeanLeftCameraRotation;                       // 0x0378(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                StandLeanRightRootOffset;                          // 0x0384(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               StandLeanRightWeaponRotation;                      // 0x0390(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               StandLeanRightCameraRotation;                      // 0x039C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                CrouchLeanLeftRootOffset;                          // 0x03A8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CrouchLeanLeftWeaponRotation;                      // 0x03B4(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               CrouchLeanLeftCameraRotation;                      // 0x03C0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                CrouchLeanRightRootOffset;                         // 0x03CC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CrouchLeanRightWeaponRotation;                     // 0x03D8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               CrouchLeanRightCameraRotation;                     // 0x03E4(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ProneLeanLeftRootOffset;                           // 0x03F0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ProneLeanLeftWeaponRotation;                       // 0x03FC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ProneLeanLeftCameraRotation;                       // 0x0408(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ProneLeanRightRootOffset;                          // 0x0414(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ProneLeanRightWeaponRotation;                      // 0x0420(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ProneLeanRightCameraRotation;                      // 0x042C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                FpvLowerRootBoneOffset;                            // 0x0438(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FpvTorsoCameraOffset;                              // 0x0444(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeaponSpringSide;                                  // 0x0450(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponSpringStiffness;                             // 0x0454(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponSpringCriticalDampingFactor;                 // 0x0458(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponSpringMass;                                  // 0x045C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponSpringFactor2;                               // 0x0460(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponMeshSpringLocDelayFactor;                    // 0x0464(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponMeshSpringRotDelayFactor;                    // 0x0468(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponSpringClamp;                                 // 0x046C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeaponSpringTurnSpeedToFullIntensity;              // 0x0470(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               StrafeSpringRotator;                               // 0x0474(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                StrafeSpringVector;                                // 0x0480(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               AdsStrafeSpringRotator;                            // 0x048C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                SpringADSMultiplierRotation;                       // 0x0498(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpringADSMultiplierTranslation;                    // 0x04A4(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToggleADSFlag;                                    // 0x04B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F80[0x3];                                      // 0x04B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQWeaponSpringOverrideParams          WeaponSpringADSOverride;                           // 0x04B4(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bToggleBipodNonADSFlag;                            // 0x04DC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F81[0x3];                                      // 0x04DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQWeaponSpringOverrideParams          WeaponSpringBipodNonADSOverride;                   // 0x04E0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bToggleBipodADSFlag;                               // 0x0508(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F82[0x3];                                      // 0x0509(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQWeaponSpringOverrideParams          WeaponSpringBipodADSOverride;                      // 0x050C(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   SoundsSocket;                                      // 0x0534(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F83[0x4];                                      // 0x053C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              FireSound1P;                                       // 0x0540(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              FireSound3P;                                       // 0x0548(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              ReloadSound1P;                                     // 0x0550(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              ReloadSound3P;                                     // 0x0558(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              DryReloadSound1P;                                  // 0x0560(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              DryReloadSound3P;                                  // 0x0568(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              EquipSound1P;                                      // 0x0570(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              EquipSound3P;                                      // 0x0578(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              UnequipSound1P;                                    // 0x0580(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              UnequipSound3P;                                    // 0x0588(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             IntoForcedLoweringSound;                           // 0x0590(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             OutOfForcedLoweringSound;                          // 0x0598(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             IntoForcedRaisingSound;                            // 0x05A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             OutOfForcedRaisingSound;                           // 0x05A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsableInMainBase;                                 // 0x05B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F84[0x7];                                      // 0x05B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ItemUsageNullifiedText;                            // 0x05B8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bPreventUseWhileCrawling;                          // 0x05D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreventAltUseWhileCrawling;                       // 0x05D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F85[0x2];                                      // 0x05D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WalkSpeedMultiplier;                               // 0x05D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           ChangeStancePunchWeaponSway;                       // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           ChangeStancePunchWeaponAlignment;                  // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           ChangeStancePunchCameraRotation;                   // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQItemStaticInfo">();
	}
	static class USQItemStaticInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQItemStaticInfo>();
	}
};
static_assert(alignof(USQItemStaticInfo) == 0x000008, "Wrong alignment on USQItemStaticInfo");
static_assert(sizeof(USQItemStaticInfo) == 0x0005F0, "Wrong size on USQItemStaticInfo");
static_assert(offsetof(USQItemStaticInfo, BaseWeaponMontage) == 0x000030, "Member 'USQItemStaticInfo::BaseWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, Base1pMontage) == 0x000038, "Member 'USQItemStaticInfo::Base1pMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, Base3pMontage) == 0x000040, "Member 'USQItemStaticInfo::Base3pMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, SprintToProne3p) == 0x000048, "Member 'USQItemStaticInfo::SprintToProne3p' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, StandToProne3p) == 0x000050, "Member 'USQItemStaticInfo::StandToProne3p' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, ProneToStand3p) == 0x000058, "Member 'USQItemStaticInfo::ProneToStand3p' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, CrouchToProne3p) == 0x000060, "Member 'USQItemStaticInfo::CrouchToProne3p' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, ProneToCrouch3p) == 0x000068, "Member 'USQItemStaticInfo::ProneToCrouch3p' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, AO1D_StandPitch) == 0x000070, "Member 'USQItemStaticInfo::AO1D_StandPitch' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, AO1D_CrouchPitch) == 0x000078, "Member 'USQItemStaticInfo::AO1D_CrouchPitch' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, AO1D_PronePitch) == 0x000080, "Member 'USQItemStaticInfo::AO1D_PronePitch' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, AO_BipodStandCrouchPitch) == 0x000088, "Member 'USQItemStaticInfo::AO_BipodStandCrouchPitch' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, AO1D_StandYawSF) == 0x000090, "Member 'USQItemStaticInfo::AO1D_StandYawSF' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, AO1D_CrouchYawSF) == 0x000098, "Member 'USQItemStaticInfo::AO1D_CrouchYawSF' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, AO1D_ProneYawSF) == 0x0000A0, "Member 'USQItemStaticInfo::AO1D_ProneYawSF' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, StandTurnRight) == 0x0000A8, "Member 'USQItemStaticInfo::StandTurnRight' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, StandTurnLeft) == 0x0000B0, "Member 'USQItemStaticInfo::StandTurnLeft' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, CrouchTurnRight) == 0x0000B8, "Member 'USQItemStaticInfo::CrouchTurnRight' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, CrouchTurnLeft) == 0x0000C0, "Member 'USQItemStaticInfo::CrouchTurnLeft' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, ProneTurnRight) == 0x0000C8, "Member 'USQItemStaticInfo::ProneTurnRight' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, ProneTurnLeft) == 0x0000D0, "Member 'USQItemStaticInfo::ProneTurnLeft' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, ReloadWeaponMontage) == 0x0000D8, "Member 'USQItemStaticInfo::ReloadWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, Reload1pMontage) == 0x0000E0, "Member 'USQItemStaticInfo::Reload1pMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, Reload3pMontage) == 0x0000E8, "Member 'USQItemStaticInfo::Reload3pMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, bCheckCurrentMagazineForEquip) == 0x0000F0, "Member 'USQItemStaticInfo::bCheckCurrentMagazineForEquip' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, bCheckCurrentMagazineForUnequip) == 0x0000F1, "Member 'USQItemStaticInfo::bCheckCurrentMagazineForUnequip' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, EmptyEquipWeaponMontage) == 0x0000F8, "Member 'USQItemStaticInfo::EmptyEquipWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, EmptyEquip1pMontage) == 0x000100, "Member 'USQItemStaticInfo::EmptyEquip1pMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, EmptyEquip3pMontage) == 0x000108, "Member 'USQItemStaticInfo::EmptyEquip3pMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, EquipWeaponMontage) == 0x000110, "Member 'USQItemStaticInfo::EquipWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, Equip1pMontage) == 0x000118, "Member 'USQItemStaticInfo::Equip1pMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, Equip3pMontage) == 0x000120, "Member 'USQItemStaticInfo::Equip3pMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, EmptyUnequipWeaponMontage) == 0x000128, "Member 'USQItemStaticInfo::EmptyUnequipWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, EmptyUnequip1pMontage) == 0x000130, "Member 'USQItemStaticInfo::EmptyUnequip1pMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, EmptyUnequip3pMontage) == 0x000138, "Member 'USQItemStaticInfo::EmptyUnequip3pMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, UnequipWeaponMontage) == 0x000140, "Member 'USQItemStaticInfo::UnequipWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, Unequip1pMontage) == 0x000148, "Member 'USQItemStaticInfo::Unequip1pMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, Unequip3pMontage) == 0x000150, "Member 'USQItemStaticInfo::Unequip3pMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, BobbingSprint1pMontage) == 0x000158, "Member 'USQItemStaticInfo::BobbingSprint1pMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, BobbingEndSprint1pMontage) == 0x000160, "Member 'USQItemStaticInfo::BobbingEndSprint1pMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, BobbingAddSprint1pMontage) == 0x000168, "Member 'USQItemStaticInfo::BobbingAddSprint1pMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, BS1D_3pStandSprintType) == 0x000170, "Member 'USQItemStaticInfo::BS1D_3pStandSprintType' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, BS1D_3pCrouchSprintType) == 0x000178, "Member 'USQItemStaticInfo::BS1D_3pCrouchSprintType' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, SprintStop3p) == 0x000180, "Member 'USQItemStaticInfo::SprintStop3p' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, BS_3pStandJogType) == 0x000188, "Member 'USQItemStaticInfo::BS_3pStandJogType' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, BS_3pStandWalkType) == 0x000190, "Member 'USQItemStaticInfo::BS_3pStandWalkType' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, BS_3pCrouchWalkType) == 0x000198, "Member 'USQItemStaticInfo::BS_3pCrouchWalkType' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, BS1D_3pProneCrawlType) == 0x0001A0, "Member 'USQItemStaticInfo::BS1D_3pProneCrawlType' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, StandStopMove) == 0x0001A8, "Member 'USQItemStaticInfo::StandStopMove' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, CrouchStopMove) == 0x0001B0, "Member 'USQItemStaticInfo::CrouchStopMove' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, BobbingMove1pMontage) == 0x0001B8, "Member 'USQItemStaticInfo::BobbingMove1pMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, Idle1pMontage) == 0x0001C0, "Member 'USQItemStaticInfo::Idle1pMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, LeanLeftBegin3pMontage) == 0x0001C8, "Member 'USQItemStaticInfo::LeanLeftBegin3pMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, LeanLeftEnd3pMontage) == 0x0001D0, "Member 'USQItemStaticInfo::LeanLeftEnd3pMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, LeanRightBegin3pMontage) == 0x0001D8, "Member 'USQItemStaticInfo::LeanRightBegin3pMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, LeanRightEnd3pMontage) == 0x0001E0, "Member 'USQItemStaticInfo::LeanRightEnd3pMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, StandLeanLeftShuffle) == 0x0001E8, "Member 'USQItemStaticInfo::StandLeanLeftShuffle' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, StandLeanRightShuffle) == 0x0001F0, "Member 'USQItemStaticInfo::StandLeanRightShuffle' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, CrouchLeanLeftShuffle) == 0x0001F8, "Member 'USQItemStaticInfo::CrouchLeanLeftShuffle' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, CrouchLeanRightShuffle) == 0x000200, "Member 'USQItemStaticInfo::CrouchLeanRightShuffle' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, Lowered1pMontage) == 0x000208, "Member 'USQItemStaticInfo::Lowered1pMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, Lowered3pMontage) == 0x000210, "Member 'USQItemStaticInfo::Lowered3pMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, LoweredCrouch3pMontage) == 0x000218, "Member 'USQItemStaticInfo::LoweredCrouch3pMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, Raised1pMontage) == 0x000220, "Member 'USQItemStaticInfo::Raised1pMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, Raised3pMontage) == 0x000228, "Member 'USQItemStaticInfo::Raised3pMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, RaisedCrouch3pMontage) == 0x000230, "Member 'USQItemStaticInfo::RaisedCrouch3pMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, MoveBobbingEndLoopSectionNames) == 0x000238, "Member 'USQItemStaticInfo::MoveBobbingEndLoopSectionNames' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, SprintBobbingEndLoopSectionNames) == 0x000260, "Member 'USQItemStaticInfo::SprintBobbingEndLoopSectionNames' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, BobbingProneMoveType) == 0x000288, "Member 'USQItemStaticInfo::BobbingProneMoveType' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, ProneMoveTypeAdditiveReference) == 0x000290, "Member 'USQItemStaticInfo::ProneMoveTypeAdditiveReference' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, OutProneMoveType) == 0x000298, "Member 'USQItemStaticInfo::OutProneMoveType' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, OutProneMoveTypeNonadditive) == 0x0002A0, "Member 'USQItemStaticInfo::OutProneMoveTypeNonadditive' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, LeftHandWeaponIkAlpha) == 0x0002A8, "Member 'USQItemStaticInfo::LeftHandWeaponIkAlpha' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, RightHand3pWeaponIkAlpha) == 0x0002AC, "Member 'USQItemStaticInfo::RightHand3pWeaponIkAlpha' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, JogPlayRateFactorMinRange) == 0x0002B0, "Member 'USQItemStaticInfo::JogPlayRateFactorMinRange' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, SprintPlayRateFactorMinRange) == 0x0002B4, "Member 'USQItemStaticInfo::SprintPlayRateFactorMinRange' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, SprintBlendFactorMinRange) == 0x0002B8, "Member 'USQItemStaticInfo::SprintBlendFactorMinRange' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, SprintBlendSpeedInterpSpeed) == 0x0002BC, "Member 'USQItemStaticInfo::SprintBlendSpeedInterpSpeed' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, SprintStaticPose) == 0x0002C0, "Member 'USQItemStaticInfo::SprintStaticPose' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, LoweringBlendOutTime) == 0x0002C8, "Member 'USQItemStaticInfo::LoweringBlendOutTime' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, IdleBlendOutTime) == 0x0002CC, "Member 'USQItemStaticInfo::IdleBlendOutTime' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, BoredMontage) == 0x0002D0, "Member 'USQItemStaticInfo::BoredMontage' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, BoredMaxFrequency) == 0x0002E0, "Member 'USQItemStaticInfo::BoredMaxFrequency' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, BoredAbortBlendOutTime) == 0x0002E4, "Member 'USQItemStaticInfo::BoredAbortBlendOutTime' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, MutualWeapons) == 0x0002E8, "Member 'USQItemStaticInfo::MutualWeapons' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, EmptyUnequipDuration) == 0x0002F8, "Member 'USQItemStaticInfo::EmptyUnequipDuration' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, EmptyEquipDuration) == 0x0002FC, "Member 'USQItemStaticInfo::EmptyEquipDuration' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, bUseAutoLowering) == 0x000300, "Member 'USQItemStaticInfo::bUseAutoLowering' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, LoweringTimer) == 0x000304, "Member 'USQItemStaticInfo::LoweringTimer' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, ItemCollisionDistance) == 0x000308, "Member 'USQItemStaticInfo::ItemCollisionDistance' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, bReturnToADSAfterItemCollision) == 0x00030C, "Member 'USQItemStaticInfo::bReturnToADSAfterItemCollision' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, bAllowRaisingAboveHead) == 0x00030D, "Member 'USQItemStaticInfo::bAllowRaisingAboveHead' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, RaisingBlendOutTime) == 0x000310, "Member 'USQItemStaticInfo::RaisingBlendOutTime' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, FireShake) == 0x000318, "Member 'USQItemStaticInfo::FireShake' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, StandLoc) == 0x000320, "Member 'USQItemStaticInfo::StandLoc' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, CrouchLoc) == 0x00032C, "Member 'USQItemStaticInfo::CrouchLoc' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, ProneLoc) == 0x000338, "Member 'USQItemStaticInfo::ProneLoc' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, BipodLoc) == 0x000344, "Member 'USQItemStaticInfo::BipodLoc' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, StandLocBlendTime) == 0x000350, "Member 'USQItemStaticInfo::StandLocBlendTime' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, OffsetLineOfFire) == 0x000354, "Member 'USQItemStaticInfo::OffsetLineOfFire' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, StandLeanLeftRootOffset) == 0x000360, "Member 'USQItemStaticInfo::StandLeanLeftRootOffset' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, StandLeanLeftWeaponRotation) == 0x00036C, "Member 'USQItemStaticInfo::StandLeanLeftWeaponRotation' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, StandLeanLeftCameraRotation) == 0x000378, "Member 'USQItemStaticInfo::StandLeanLeftCameraRotation' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, StandLeanRightRootOffset) == 0x000384, "Member 'USQItemStaticInfo::StandLeanRightRootOffset' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, StandLeanRightWeaponRotation) == 0x000390, "Member 'USQItemStaticInfo::StandLeanRightWeaponRotation' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, StandLeanRightCameraRotation) == 0x00039C, "Member 'USQItemStaticInfo::StandLeanRightCameraRotation' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, CrouchLeanLeftRootOffset) == 0x0003A8, "Member 'USQItemStaticInfo::CrouchLeanLeftRootOffset' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, CrouchLeanLeftWeaponRotation) == 0x0003B4, "Member 'USQItemStaticInfo::CrouchLeanLeftWeaponRotation' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, CrouchLeanLeftCameraRotation) == 0x0003C0, "Member 'USQItemStaticInfo::CrouchLeanLeftCameraRotation' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, CrouchLeanRightRootOffset) == 0x0003CC, "Member 'USQItemStaticInfo::CrouchLeanRightRootOffset' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, CrouchLeanRightWeaponRotation) == 0x0003D8, "Member 'USQItemStaticInfo::CrouchLeanRightWeaponRotation' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, CrouchLeanRightCameraRotation) == 0x0003E4, "Member 'USQItemStaticInfo::CrouchLeanRightCameraRotation' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, ProneLeanLeftRootOffset) == 0x0003F0, "Member 'USQItemStaticInfo::ProneLeanLeftRootOffset' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, ProneLeanLeftWeaponRotation) == 0x0003FC, "Member 'USQItemStaticInfo::ProneLeanLeftWeaponRotation' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, ProneLeanLeftCameraRotation) == 0x000408, "Member 'USQItemStaticInfo::ProneLeanLeftCameraRotation' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, ProneLeanRightRootOffset) == 0x000414, "Member 'USQItemStaticInfo::ProneLeanRightRootOffset' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, ProneLeanRightWeaponRotation) == 0x000420, "Member 'USQItemStaticInfo::ProneLeanRightWeaponRotation' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, ProneLeanRightCameraRotation) == 0x00042C, "Member 'USQItemStaticInfo::ProneLeanRightCameraRotation' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, FpvLowerRootBoneOffset) == 0x000438, "Member 'USQItemStaticInfo::FpvLowerRootBoneOffset' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, FpvTorsoCameraOffset) == 0x000444, "Member 'USQItemStaticInfo::FpvTorsoCameraOffset' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, WeaponSpringSide) == 0x000450, "Member 'USQItemStaticInfo::WeaponSpringSide' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, WeaponSpringStiffness) == 0x000454, "Member 'USQItemStaticInfo::WeaponSpringStiffness' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, WeaponSpringCriticalDampingFactor) == 0x000458, "Member 'USQItemStaticInfo::WeaponSpringCriticalDampingFactor' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, WeaponSpringMass) == 0x00045C, "Member 'USQItemStaticInfo::WeaponSpringMass' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, WeaponSpringFactor2) == 0x000460, "Member 'USQItemStaticInfo::WeaponSpringFactor2' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, WeaponMeshSpringLocDelayFactor) == 0x000464, "Member 'USQItemStaticInfo::WeaponMeshSpringLocDelayFactor' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, WeaponMeshSpringRotDelayFactor) == 0x000468, "Member 'USQItemStaticInfo::WeaponMeshSpringRotDelayFactor' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, WeaponSpringClamp) == 0x00046C, "Member 'USQItemStaticInfo::WeaponSpringClamp' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, WeaponSpringTurnSpeedToFullIntensity) == 0x000470, "Member 'USQItemStaticInfo::WeaponSpringTurnSpeedToFullIntensity' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, StrafeSpringRotator) == 0x000474, "Member 'USQItemStaticInfo::StrafeSpringRotator' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, StrafeSpringVector) == 0x000480, "Member 'USQItemStaticInfo::StrafeSpringVector' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, AdsStrafeSpringRotator) == 0x00048C, "Member 'USQItemStaticInfo::AdsStrafeSpringRotator' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, SpringADSMultiplierRotation) == 0x000498, "Member 'USQItemStaticInfo::SpringADSMultiplierRotation' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, SpringADSMultiplierTranslation) == 0x0004A4, "Member 'USQItemStaticInfo::SpringADSMultiplierTranslation' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, bToggleADSFlag) == 0x0004B0, "Member 'USQItemStaticInfo::bToggleADSFlag' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, WeaponSpringADSOverride) == 0x0004B4, "Member 'USQItemStaticInfo::WeaponSpringADSOverride' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, bToggleBipodNonADSFlag) == 0x0004DC, "Member 'USQItemStaticInfo::bToggleBipodNonADSFlag' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, WeaponSpringBipodNonADSOverride) == 0x0004E0, "Member 'USQItemStaticInfo::WeaponSpringBipodNonADSOverride' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, bToggleBipodADSFlag) == 0x000508, "Member 'USQItemStaticInfo::bToggleBipodADSFlag' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, WeaponSpringBipodADSOverride) == 0x00050C, "Member 'USQItemStaticInfo::WeaponSpringBipodADSOverride' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, SoundsSocket) == 0x000534, "Member 'USQItemStaticInfo::SoundsSocket' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, FireSound1P) == 0x000540, "Member 'USQItemStaticInfo::FireSound1P' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, FireSound3P) == 0x000548, "Member 'USQItemStaticInfo::FireSound3P' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, ReloadSound1P) == 0x000550, "Member 'USQItemStaticInfo::ReloadSound1P' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, ReloadSound3P) == 0x000558, "Member 'USQItemStaticInfo::ReloadSound3P' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, DryReloadSound1P) == 0x000560, "Member 'USQItemStaticInfo::DryReloadSound1P' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, DryReloadSound3P) == 0x000568, "Member 'USQItemStaticInfo::DryReloadSound3P' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, EquipSound1P) == 0x000570, "Member 'USQItemStaticInfo::EquipSound1P' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, EquipSound3P) == 0x000578, "Member 'USQItemStaticInfo::EquipSound3P' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, UnequipSound1P) == 0x000580, "Member 'USQItemStaticInfo::UnequipSound1P' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, UnequipSound3P) == 0x000588, "Member 'USQItemStaticInfo::UnequipSound3P' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, IntoForcedLoweringSound) == 0x000590, "Member 'USQItemStaticInfo::IntoForcedLoweringSound' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, OutOfForcedLoweringSound) == 0x000598, "Member 'USQItemStaticInfo::OutOfForcedLoweringSound' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, IntoForcedRaisingSound) == 0x0005A0, "Member 'USQItemStaticInfo::IntoForcedRaisingSound' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, OutOfForcedRaisingSound) == 0x0005A8, "Member 'USQItemStaticInfo::OutOfForcedRaisingSound' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, bUsableInMainBase) == 0x0005B0, "Member 'USQItemStaticInfo::bUsableInMainBase' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, ItemUsageNullifiedText) == 0x0005B8, "Member 'USQItemStaticInfo::ItemUsageNullifiedText' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, bPreventUseWhileCrawling) == 0x0005D0, "Member 'USQItemStaticInfo::bPreventUseWhileCrawling' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, bPreventAltUseWhileCrawling) == 0x0005D1, "Member 'USQItemStaticInfo::bPreventAltUseWhileCrawling' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, WalkSpeedMultiplier) == 0x0005D4, "Member 'USQItemStaticInfo::WalkSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, ChangeStancePunchWeaponSway) == 0x0005D8, "Member 'USQItemStaticInfo::ChangeStancePunchWeaponSway' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, ChangeStancePunchWeaponAlignment) == 0x0005E0, "Member 'USQItemStaticInfo::ChangeStancePunchWeaponAlignment' has a wrong offset!");
static_assert(offsetof(USQItemStaticInfo, ChangeStancePunchCameraRotation) == 0x0005E8, "Member 'USQItemStaticInfo::ChangeStancePunchCameraRotation' has a wrong offset!");

// Class Squad.SQFieldDressingStaticInfo
// 0x0118 (0x0708 - 0x05F0)
class USQFieldDressingStaticInfo : public USQItemStaticInfo
{
public:
	class UAnimMontage*                           HealingSelfRightArm1pMontage;                      // 0x05F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           HealingSelfRightArm3pMontage;                      // 0x05F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           HealingSelfRightArm1pWeaponMontage;                // 0x0600(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           HealingSelfRightArm3pWeaponMontage;                // 0x0608(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           HealingSelfLeftArm1pMontage;                       // 0x0610(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           HealingSelfLeftArm3pMontage;                       // 0x0618(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           HealingSelfLeftArm1pWeaponMontage;                 // 0x0620(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           HealingSelfLeftArm3pWeaponMontage;                 // 0x0628(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           HealingSelfEnd1pMontage;                           // 0x0630(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           HealingSelfEnd3pMontage;                           // 0x0638(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           HealingSelfEnd1pWeaponMontage;                     // 0x0640(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           HealingSelfEnd3pWeaponMontage;                     // 0x0648(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Healing1pMontage;                                  // 0x0650(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Healing3pMontage;                                  // 0x0658(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           HealingEnd1pMontage;                               // 0x0660(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           HealingEnd3pMontage;                               // 0x0668(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Healing1pWeaponMontage;                            // 0x0670(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Healing3pWeaponMontage;                            // 0x0678(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           HealingEnd1pWeaponMontage;                         // 0x0680(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           HealingEnd3pWeaponMontage;                         // 0x0688(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Reviving1pMontage;                                 // 0x0690(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Reviving3pMontage;                                 // 0x0698(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           RevivingEnd1pMontage;                              // 0x06A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           RevivingEnd3pMontage;                              // 0x06A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Reviving1pWeaponMontage;                           // 0x06B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Reviving3pWeaponMontage;                           // 0x06B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           RevivingEnd1pWeaponMontage;                        // 0x06C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           RevivingEnd3pWeaponMontage;                        // 0x06C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              HealSelfSound;                                     // 0x06D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              HealOtherSound;                                    // 0x06D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              ReviveOtherSound;                                  // 0x06E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalReviveDuration;                              // 0x06E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MedicReviveDuration;                               // 0x06EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalStopBleedingOtherDuration;                   // 0x06F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalStopBleedingSelfDuration;                    // 0x06F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MedicStopBleedingOtherDuration;                    // 0x06F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MedicStopBleedingSelfDuration;                     // 0x06FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimPlayRateMultiplier;                            // 0x0700(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F86[0x4];                                      // 0x0704(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQFieldDressingStaticInfo">();
	}
	static class USQFieldDressingStaticInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQFieldDressingStaticInfo>();
	}
};
static_assert(alignof(USQFieldDressingStaticInfo) == 0x000008, "Wrong alignment on USQFieldDressingStaticInfo");
static_assert(sizeof(USQFieldDressingStaticInfo) == 0x000708, "Wrong size on USQFieldDressingStaticInfo");
static_assert(offsetof(USQFieldDressingStaticInfo, HealingSelfRightArm1pMontage) == 0x0005F0, "Member 'USQFieldDressingStaticInfo::HealingSelfRightArm1pMontage' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, HealingSelfRightArm3pMontage) == 0x0005F8, "Member 'USQFieldDressingStaticInfo::HealingSelfRightArm3pMontage' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, HealingSelfRightArm1pWeaponMontage) == 0x000600, "Member 'USQFieldDressingStaticInfo::HealingSelfRightArm1pWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, HealingSelfRightArm3pWeaponMontage) == 0x000608, "Member 'USQFieldDressingStaticInfo::HealingSelfRightArm3pWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, HealingSelfLeftArm1pMontage) == 0x000610, "Member 'USQFieldDressingStaticInfo::HealingSelfLeftArm1pMontage' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, HealingSelfLeftArm3pMontage) == 0x000618, "Member 'USQFieldDressingStaticInfo::HealingSelfLeftArm3pMontage' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, HealingSelfLeftArm1pWeaponMontage) == 0x000620, "Member 'USQFieldDressingStaticInfo::HealingSelfLeftArm1pWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, HealingSelfLeftArm3pWeaponMontage) == 0x000628, "Member 'USQFieldDressingStaticInfo::HealingSelfLeftArm3pWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, HealingSelfEnd1pMontage) == 0x000630, "Member 'USQFieldDressingStaticInfo::HealingSelfEnd1pMontage' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, HealingSelfEnd3pMontage) == 0x000638, "Member 'USQFieldDressingStaticInfo::HealingSelfEnd3pMontage' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, HealingSelfEnd1pWeaponMontage) == 0x000640, "Member 'USQFieldDressingStaticInfo::HealingSelfEnd1pWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, HealingSelfEnd3pWeaponMontage) == 0x000648, "Member 'USQFieldDressingStaticInfo::HealingSelfEnd3pWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, Healing1pMontage) == 0x000650, "Member 'USQFieldDressingStaticInfo::Healing1pMontage' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, Healing3pMontage) == 0x000658, "Member 'USQFieldDressingStaticInfo::Healing3pMontage' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, HealingEnd1pMontage) == 0x000660, "Member 'USQFieldDressingStaticInfo::HealingEnd1pMontage' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, HealingEnd3pMontage) == 0x000668, "Member 'USQFieldDressingStaticInfo::HealingEnd3pMontage' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, Healing1pWeaponMontage) == 0x000670, "Member 'USQFieldDressingStaticInfo::Healing1pWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, Healing3pWeaponMontage) == 0x000678, "Member 'USQFieldDressingStaticInfo::Healing3pWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, HealingEnd1pWeaponMontage) == 0x000680, "Member 'USQFieldDressingStaticInfo::HealingEnd1pWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, HealingEnd3pWeaponMontage) == 0x000688, "Member 'USQFieldDressingStaticInfo::HealingEnd3pWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, Reviving1pMontage) == 0x000690, "Member 'USQFieldDressingStaticInfo::Reviving1pMontage' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, Reviving3pMontage) == 0x000698, "Member 'USQFieldDressingStaticInfo::Reviving3pMontage' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, RevivingEnd1pMontage) == 0x0006A0, "Member 'USQFieldDressingStaticInfo::RevivingEnd1pMontage' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, RevivingEnd3pMontage) == 0x0006A8, "Member 'USQFieldDressingStaticInfo::RevivingEnd3pMontage' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, Reviving1pWeaponMontage) == 0x0006B0, "Member 'USQFieldDressingStaticInfo::Reviving1pWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, Reviving3pWeaponMontage) == 0x0006B8, "Member 'USQFieldDressingStaticInfo::Reviving3pWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, RevivingEnd1pWeaponMontage) == 0x0006C0, "Member 'USQFieldDressingStaticInfo::RevivingEnd1pWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, RevivingEnd3pWeaponMontage) == 0x0006C8, "Member 'USQFieldDressingStaticInfo::RevivingEnd3pWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, HealSelfSound) == 0x0006D0, "Member 'USQFieldDressingStaticInfo::HealSelfSound' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, HealOtherSound) == 0x0006D8, "Member 'USQFieldDressingStaticInfo::HealOtherSound' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, ReviveOtherSound) == 0x0006E0, "Member 'USQFieldDressingStaticInfo::ReviveOtherSound' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, NormalReviveDuration) == 0x0006E8, "Member 'USQFieldDressingStaticInfo::NormalReviveDuration' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, MedicReviveDuration) == 0x0006EC, "Member 'USQFieldDressingStaticInfo::MedicReviveDuration' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, NormalStopBleedingOtherDuration) == 0x0006F0, "Member 'USQFieldDressingStaticInfo::NormalStopBleedingOtherDuration' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, NormalStopBleedingSelfDuration) == 0x0006F4, "Member 'USQFieldDressingStaticInfo::NormalStopBleedingSelfDuration' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, MedicStopBleedingOtherDuration) == 0x0006F8, "Member 'USQFieldDressingStaticInfo::MedicStopBleedingOtherDuration' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, MedicStopBleedingSelfDuration) == 0x0006FC, "Member 'USQFieldDressingStaticInfo::MedicStopBleedingSelfDuration' has a wrong offset!");
static_assert(offsetof(USQFieldDressingStaticInfo, AnimPlayRateMultiplier) == 0x000700, "Member 'USQFieldDressingStaticInfo::AnimPlayRateMultiplier' has a wrong offset!");

// Class Squad.SQColorsDataAsset
// 0x0090 (0x00C0 - 0x0030)
class USQColorsDataAsset final : public UDataAsset
{
public:
	TArray<struct FLinearColor>                   UIColors;                                          // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FLinearColor                           TintColors[0x7];                                   // 0x0040(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   FireTeamColors;                                    // 0x00B0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	struct FLinearColor GetColor(ESQMapWidgetTint TintValue, int32 FireTeamIndex) const;
	struct FLinearColor GetUIColors(int32 ColorIndex) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQColorsDataAsset">();
	}
	static class USQColorsDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQColorsDataAsset>();
	}
};
static_assert(alignof(USQColorsDataAsset) == 0x000008, "Wrong alignment on USQColorsDataAsset");
static_assert(sizeof(USQColorsDataAsset) == 0x0000C0, "Wrong size on USQColorsDataAsset");
static_assert(offsetof(USQColorsDataAsset, UIColors) == 0x000030, "Member 'USQColorsDataAsset::UIColors' has a wrong offset!");
static_assert(offsetof(USQColorsDataAsset, TintColors) == 0x000040, "Member 'USQColorsDataAsset::TintColors' has a wrong offset!");
static_assert(offsetof(USQColorsDataAsset, FireTeamColors) == 0x0000B0, "Member 'USQColorsDataAsset::FireTeamColors' has a wrong offset!");

// Class Squad.SQCommandActor
// 0x0018 (0x0240 - 0x0228)
class ASQCommandActor : public AActor
{
public:
	float                                         Distance;                                          // 0x0228(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Team;                                              // 0x022C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AController>             DamageInstigatorController;                        // 0x0230(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class USQGridData_CommandOption>  Action;                                            // 0x0238(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnRep_Action();
	void SetAction(TSubclassOf<class USQGridData_CommandOption> NewAction);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCommandActor">();
	}
	static class ASQCommandActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQCommandActor>();
	}
};
static_assert(alignof(ASQCommandActor) == 0x000008, "Wrong alignment on ASQCommandActor");
static_assert(sizeof(ASQCommandActor) == 0x000240, "Wrong size on ASQCommandActor");
static_assert(offsetof(ASQCommandActor, Distance) == 0x000228, "Member 'ASQCommandActor::Distance' has a wrong offset!");
static_assert(offsetof(ASQCommandActor, Team) == 0x00022C, "Member 'ASQCommandActor::Team' has a wrong offset!");
static_assert(offsetof(ASQCommandActor, DamageInstigatorController) == 0x000230, "Member 'ASQCommandActor::DamageInstigatorController' has a wrong offset!");
static_assert(offsetof(ASQCommandActor, Action) == 0x000238, "Member 'ASQCommandActor::Action' has a wrong offset!");

// Class Squad.SQFreeLookComponent
// 0x0080 (0x0130 - 0x00B0)
class USQFreeLookComponent final : public UActorComponent
{
public:
	uint8                                         Pad_F88[0x8];                                      // 0x00B0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  OuterPawn;                                         // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F89[0x18];                                     // 0x00C0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraComponent*                       FreeLookCamera;                                    // 0x00D8(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bCanFreelookWhileADS;                              // 0x00E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bFreelookCanRecenterWeapons;                       // 0x00E1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F8A[0x2];                                      // 0x00E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              PitchLimits;                                       // 0x00E4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector2D                              YawLimits;                                         // 0x00EC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector2D                              RotationSpeed;                                     // 0x00F4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ResetSpeed;                                        // 0x00FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F8B[0x20];                                     // 0x0100(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQRotator_NetQuantizeBytes            ReplicatedFreeLookRot;                             // 0x0120(0x000C)(Net, RepNotify, NoDestructor, NativeAccessSpecifierPrivate)
	EFreeLookMode                                 FreelookMode;                                      // 0x012C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bReplicateFreeLookRotation;                        // 0x012D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F8C[0x2];                                      // 0x012E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_ReplicatedFreeLookRot();
	void ResetFreeLook();
	void ServerSetFreeLookRotation(const struct FRotator& NewFreeLookRotation);
	void SetCanFreelookWhileADS(const bool bNewBool);
	void SetFreeLookCamera(class UCameraComponent* NewCamera);
	void SetFreelookCanRecenterWeapons(const bool bNewBool);
	void SetFreeLookMode(const EFreeLookMode NewFreeLookMode);
	void SetFreeLookRotation(const struct FRotator& NewFreeLookRotator);
	void SetIsToggleActive(const bool bNewState);
	void SetPitchLimits(const struct FVector2D& NewPitchLimits);
	void SetReplicateFreeLookRotation(const bool bNewBool);
	void SetRotationSpeed(const struct FVector2D& NewRotationSpeed);
	void SetYawLimits(const struct FVector2D& NewYawLimits);

	struct FRotator CalculateFreeLookRotation() const;
	bool GetCanFreelookWhileADS() const;
	class UCameraComponent* GetFreeLookCamera() const;
	bool GetFreelookCanRecenterWeapons() const;
	bool GetIsFreeLookComponentActive() const;
	bool GetIsUsingFreeLook() const;
	struct FVector2D GetPitchLimits() const;
	struct FVector2D GetRotationSpeed() const;
	struct FVector2D GetYawLimits() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQFreeLookComponent">();
	}
	static class USQFreeLookComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQFreeLookComponent>();
	}
};
static_assert(alignof(USQFreeLookComponent) == 0x000008, "Wrong alignment on USQFreeLookComponent");
static_assert(sizeof(USQFreeLookComponent) == 0x000130, "Wrong size on USQFreeLookComponent");
static_assert(offsetof(USQFreeLookComponent, OuterPawn) == 0x0000B8, "Member 'USQFreeLookComponent::OuterPawn' has a wrong offset!");
static_assert(offsetof(USQFreeLookComponent, FreeLookCamera) == 0x0000D8, "Member 'USQFreeLookComponent::FreeLookCamera' has a wrong offset!");
static_assert(offsetof(USQFreeLookComponent, bCanFreelookWhileADS) == 0x0000E0, "Member 'USQFreeLookComponent::bCanFreelookWhileADS' has a wrong offset!");
static_assert(offsetof(USQFreeLookComponent, bFreelookCanRecenterWeapons) == 0x0000E1, "Member 'USQFreeLookComponent::bFreelookCanRecenterWeapons' has a wrong offset!");
static_assert(offsetof(USQFreeLookComponent, PitchLimits) == 0x0000E4, "Member 'USQFreeLookComponent::PitchLimits' has a wrong offset!");
static_assert(offsetof(USQFreeLookComponent, YawLimits) == 0x0000EC, "Member 'USQFreeLookComponent::YawLimits' has a wrong offset!");
static_assert(offsetof(USQFreeLookComponent, RotationSpeed) == 0x0000F4, "Member 'USQFreeLookComponent::RotationSpeed' has a wrong offset!");
static_assert(offsetof(USQFreeLookComponent, ResetSpeed) == 0x0000FC, "Member 'USQFreeLookComponent::ResetSpeed' has a wrong offset!");
static_assert(offsetof(USQFreeLookComponent, ReplicatedFreeLookRot) == 0x000120, "Member 'USQFreeLookComponent::ReplicatedFreeLookRot' has a wrong offset!");
static_assert(offsetof(USQFreeLookComponent, FreelookMode) == 0x00012C, "Member 'USQFreeLookComponent::FreelookMode' has a wrong offset!");
static_assert(offsetof(USQFreeLookComponent, bReplicateFreeLookRotation) == 0x00012D, "Member 'USQFreeLookComponent::bReplicateFreeLookRotation' has a wrong offset!");

// Class Squad.SQCommanderInputComponent
// 0x0010 (0x00C0 - 0x00B0)
class USQCommanderInputComponent final : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_             OnCommanderRevivedEvent;                           // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void AttemptSetActionsUsableState(bool bNewActionsEnabled);
	void ClientActionAttemptFinished();
	void DebugBecomeCommander();
	void DebugDemoteCommander();
	void DebugEnableVoteRequirements(bool bEnable);
	void DebugVoteForCommander(const class FString& PlayerName);
	void RequestCommandActorDestroyed(TSubclassOf<class USQGridData_CommandOption> CommandOption);
	void RequestCreateCommandActor(TSubclassOf<class USQGridData_CommandOption> CommandOption, const struct FTransform& Transform, const float Distance);
	void RequestDemoteCommander();
	void RequestPromoteCommander();
	void RequestSupportAtLocation(const struct FVector& WorldLocation);
	void ServerAttemptSetActionsUsableState(bool bNewActionsEnabled);
	void ServerDebugEnableVoteRequirements(bool bEnable);
	void ServerDemoteCommander();
	void ServerMakePlayerCommander(class ASQPlayerState* NewCommander);
	void ServerRequestCommandActorDestroyed(TSubclassOf<class USQGridData_CommandOption> CommandOption);
	void ServerRequestCreateCommandActor(TSubclassOf<class USQGridData_CommandOption> CommandOption, const struct FTransform& Transform, const float Distance);
	void ServerRequestSupportAtLocation(const struct FVector& WorldLocation);
	void ServerVoteForCommander(class ASQPlayerState* Nominee);
	void VotePlayer(class ASQPlayerState* Player);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCommanderInputComponent">();
	}
	static class USQCommanderInputComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCommanderInputComponent>();
	}
};
static_assert(alignof(USQCommanderInputComponent) == 0x000008, "Wrong alignment on USQCommanderInputComponent");
static_assert(sizeof(USQCommanderInputComponent) == 0x0000C0, "Wrong size on USQCommanderInputComponent");
static_assert(offsetof(USQCommanderInputComponent, OnCommanderRevivedEvent) == 0x0000B0, "Member 'USQCommanderInputComponent::OnCommanderRevivedEvent' has a wrong offset!");

// Class Squad.SQGridData_BaseOption
// 0x0038 (0x0060 - 0x0028)
class USQGridData_BaseOption : public UObject
{
public:
	class FString                                 DisplayName;                                       // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Texture;                                           // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Tint;                                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGridData_BaseOption">();
	}
	static class USQGridData_BaseOption* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQGridData_BaseOption>();
	}
};
static_assert(alignof(USQGridData_BaseOption) == 0x000008, "Wrong alignment on USQGridData_BaseOption");
static_assert(sizeof(USQGridData_BaseOption) == 0x000060, "Wrong size on USQGridData_BaseOption");
static_assert(offsetof(USQGridData_BaseOption, DisplayName) == 0x000028, "Member 'USQGridData_BaseOption::DisplayName' has a wrong offset!");
static_assert(offsetof(USQGridData_BaseOption, Description) == 0x000038, "Member 'USQGridData_BaseOption::Description' has a wrong offset!");
static_assert(offsetof(USQGridData_BaseOption, Texture) == 0x000048, "Member 'USQGridData_BaseOption::Texture' has a wrong offset!");
static_assert(offsetof(USQGridData_BaseOption, Tint) == 0x000050, "Member 'USQGridData_BaseOption::Tint' has a wrong offset!");

// Class Squad.SQGameInstance
// 0x0628 (0x07D0 - 0x01A8)
class USQGameInstance : public UGameInstance
{
public:
	TArray<struct FSQSoliderNetPriorityObject>    SoliderNetPriorities;                              // 0x01A8(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	float                                         SoldierNetPriorityConeSensitivity;                 // 0x01B8(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoldierNetPriorityConeFactor;                      // 0x01BC(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQJoinBeaconHost*                      SQJoinQueueHost;                                   // 0x01C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AOnlineBeaconHost*                      BeaconHost;                                        // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQJoinBeaconClient*                    JoinQueueClient;                                   // 0x01D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQSessionInfo*                         LastServerAttempt;                                 // 0x01D8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQFindSessionsCallbackProxy*           ActiveFindSessionsCallback;                        // 0x01E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQFindFriendsCallbackProxy*            ActiveFindFriendsCallback;                         // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F91[0x1C];                                     // 0x01F0(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bSaveServerBrowserResultsToFile;                   // 0x020C(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F92[0x173];                                    // 0x020D(0x0173)(Fixing Size After Last Property [ Dumper-7 ])
	class USQConfig*                              SquadConfig;                                       // 0x0380(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQServerTagManager*                    ServerTagManager;                                  // 0x0388(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnMapIconCreated;                                  // 0x0390(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMapIconDestroyed;                                // 0x03A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnWorldOriginLocationChangedEvent;                 // 0x03B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnQueueForServer;                                  // 0x03C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnLoadingFinish;                                   // 0x03D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 UserEnteredPassword;                               // 0x03E0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        MusicAudioComponent;                               // 0x03F0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             MusicSoundCue;                                     // 0x03F8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlueprintSessionResult                PendingServer;                                     // 0x0400(0x0108)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bHasPendingServer;                                 // 0x0508(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F93[0x7];                                      // 0x0509(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 LastTicket;                                        // 0x0510(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FDateTime                              LastTicketRefresh;                                 // 0x0520(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F94[0x8];                                      // 0x0528(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerPartMessage;                                 // 0x0530(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FModdingRuntimeModInfoDetails>  ModInfo;                                           // 0x0540(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 MainMenuMap;                                       // 0x0550(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQLevel*                               CurrentLevel;                                      // 0x0560(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQLayer*                               CurrentLayer;                                      // 0x0568(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQLayerSettings                       CurrentLayerSetup;                                 // 0x0570(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQLayerSettings                       NextLayerSetup;                                    // 0x0590(0x0020)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_F95[0x10];                                     // 0x05B0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HistoryRecordsLimit;                               // 0x05C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F96[0x4];                                      // 0x05C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQLayer*                               NextLayer;                                         // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQLevel*                               NextLevel;                                         // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F97[0x18];                                     // 0x05D8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQLayerSettingsPair>           LayerRotation;                                     // 0x05F0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQLayerSettingsPair>           LayerVoteList;                                     // 0x0600(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQLayerSettingsPair>           LayerRotationLowPlayers;                           // 0x0610(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_F98[0x8];                                      // 0x0620(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             InitialGameDiscoveryCompletedDelegate;             // 0x0628(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          InitialGameDiscoveryCompleted;                     // 0x0638(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F99[0x7];                                      // 0x0639(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class USQLevel*>            AvailableLevels;                                   // 0x0640(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	TMap<class FName, class USQLayer*>            AvailableLayers;                                   // 0x0690(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	TMap<class FName, class USQFaction*>          AvailableFactions;                                 // 0x06E0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	TMap<class FName, class USQFactionSetup*>     AvailableFactionSetups;                            // 0x0730(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9A[0x40];                                     // 0x0780(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	class USQPipScopeCaptureComponent*            CurrentCaptureComponent;                           // 0x07C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTextureRenderTarget2D*                 PIPTexture;                                        // 0x07C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static bool GetServerUniqueId(const struct FBlueprintSessionResult& BlueprintSessionResult, class UObject* WorldContextObject, class FString* OutUniqueId);

	bool CanQueueForServer(class UObject* WorldContextObject, const class USQSessionInfo* ServerSession);
	void DetermineNextLayer();
	void DetermineNextLevel();
	void DetermineNextMap();
	bool DetermineStartupLayer();
	void DisconnectToMenu();
	class USQFaction* ForceLoadFaction(const class FName& FactionID);
	class UTextureRenderTarget2D* GetPipTextureIfAvailable(const class USQPipScopeCaptureComponent* InCaptureComponent);
	class USQUISettings* GetSquadUISettings();
	void GotoMainMenu();
	void HideLoadingScreen();
	bool HostGame(class ULocalPlayer* LocalPlayer, const class FString& GameType, const class FString& InTravelURL);
	bool IsLoadingFinished();
	bool IsOnlineServiceConnected();
	bool IsSteamConnected();
	void MakePipTextureTargetAvailable(const class UTextureRenderTarget2D* InTextureTarget);
	void MarkLoadingRequirementFinished(ESQLoadingRequirement Requirement);
	void OnNewModdedFactionAvailable(class USQFaction* Faction);
	void OnNewModdedFactionSetupAvailable(class USQFactionSetup* FactionSetup);
	void OnNewModdedLayerAvailable(class USQLayer* Layer);
	void OnNewModdedLevelAvailable(class USQLevel* Level);
	bool OverrideNextLayer(const class FName& NextLayerName, const struct FSQLayerSettings& LayerData, bool bExtendSearch);
	bool OverrideNextLevel(const class FName& NextLevelName, bool bExtendSearch);
	void PlayMusic(class USoundBase* InOverrideMusic);
	class ASQJoinBeaconClient* QueueForServer(class UObject* WorldContextObject, class USQSessionInfo* ServerSession);
	void RandomizeRotation();
	void ResetRotation();
	void ServerTravelToNextLayer(const class FString& Params_0);
	void ServerTravelToNextLevel(const class FString& Params_0);
	void ServerTravelToNextMap(const class FString& Params_0);
	void ShowLoadingScreen();
	void StopMusic();
	bool TryGetNextLayers(int32 InCount, TArray<class USQLayer*>* OutLayers);
	bool TryGetNextLevels(int32 InCount, TArray<class USQLevel*>* OutLevels);
	void TryMarkDeploymentLoadingState();
	bool VerifyPassword(const struct FBlueprintSessionResult& BlueprintSessionResult, const class FString& UserPassword);

	bool DetermineLayerFromName(const class FName& InLayerName, class USQLayer** OutLayer) const;
	bool FindLayers(const TArray<class FString>& InSpecificLayerList, TArray<class USQLayer*>* OutLayers) const;
	bool FindLevels(const TArray<class FString>& InSpecificLevelList, TArray<class USQLevel*>* OutLevels) const;
	class FString GetCurrentLayerDisplayName() const;
	class FText GetCurrentLayerDisplayText() const;
	class FString GetCurrentLayerId() const;
	class FString GetCurrentLevelDisplayName() const;
	class FString GetCurrentLevelId() const;
	class FString GetMenuMap() const;
	class FString GetNextLayerDisplayName() const;
	class FString GetNextLayerId() const;
	class FString GetNextLevelDisplayName() const;
	struct FSQServerSettings GetServerSettings() const;
	class USQServerTagManager* GetServerTagManager() const;
	bool NeedToVoteForNextLevel() const;
	bool TryGetLayersInRotationFor(class USQLevel* InLevel, TArray<class USQLayer*>* OutLayers) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGameInstance">();
	}
	static class USQGameInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQGameInstance>();
	}
};
static_assert(alignof(USQGameInstance) == 0x000008, "Wrong alignment on USQGameInstance");
static_assert(sizeof(USQGameInstance) == 0x0007D0, "Wrong size on USQGameInstance");
static_assert(offsetof(USQGameInstance, SoliderNetPriorities) == 0x0001A8, "Member 'USQGameInstance::SoliderNetPriorities' has a wrong offset!");
static_assert(offsetof(USQGameInstance, SoldierNetPriorityConeSensitivity) == 0x0001B8, "Member 'USQGameInstance::SoldierNetPriorityConeSensitivity' has a wrong offset!");
static_assert(offsetof(USQGameInstance, SoldierNetPriorityConeFactor) == 0x0001BC, "Member 'USQGameInstance::SoldierNetPriorityConeFactor' has a wrong offset!");
static_assert(offsetof(USQGameInstance, SQJoinQueueHost) == 0x0001C0, "Member 'USQGameInstance::SQJoinQueueHost' has a wrong offset!");
static_assert(offsetof(USQGameInstance, BeaconHost) == 0x0001C8, "Member 'USQGameInstance::BeaconHost' has a wrong offset!");
static_assert(offsetof(USQGameInstance, JoinQueueClient) == 0x0001D0, "Member 'USQGameInstance::JoinQueueClient' has a wrong offset!");
static_assert(offsetof(USQGameInstance, LastServerAttempt) == 0x0001D8, "Member 'USQGameInstance::LastServerAttempt' has a wrong offset!");
static_assert(offsetof(USQGameInstance, ActiveFindSessionsCallback) == 0x0001E0, "Member 'USQGameInstance::ActiveFindSessionsCallback' has a wrong offset!");
static_assert(offsetof(USQGameInstance, ActiveFindFriendsCallback) == 0x0001E8, "Member 'USQGameInstance::ActiveFindFriendsCallback' has a wrong offset!");
static_assert(offsetof(USQGameInstance, bSaveServerBrowserResultsToFile) == 0x00020C, "Member 'USQGameInstance::bSaveServerBrowserResultsToFile' has a wrong offset!");
static_assert(offsetof(USQGameInstance, SquadConfig) == 0x000380, "Member 'USQGameInstance::SquadConfig' has a wrong offset!");
static_assert(offsetof(USQGameInstance, ServerTagManager) == 0x000388, "Member 'USQGameInstance::ServerTagManager' has a wrong offset!");
static_assert(offsetof(USQGameInstance, OnMapIconCreated) == 0x000390, "Member 'USQGameInstance::OnMapIconCreated' has a wrong offset!");
static_assert(offsetof(USQGameInstance, OnMapIconDestroyed) == 0x0003A0, "Member 'USQGameInstance::OnMapIconDestroyed' has a wrong offset!");
static_assert(offsetof(USQGameInstance, OnWorldOriginLocationChangedEvent) == 0x0003B0, "Member 'USQGameInstance::OnWorldOriginLocationChangedEvent' has a wrong offset!");
static_assert(offsetof(USQGameInstance, OnQueueForServer) == 0x0003C0, "Member 'USQGameInstance::OnQueueForServer' has a wrong offset!");
static_assert(offsetof(USQGameInstance, OnLoadingFinish) == 0x0003D0, "Member 'USQGameInstance::OnLoadingFinish' has a wrong offset!");
static_assert(offsetof(USQGameInstance, UserEnteredPassword) == 0x0003E0, "Member 'USQGameInstance::UserEnteredPassword' has a wrong offset!");
static_assert(offsetof(USQGameInstance, MusicAudioComponent) == 0x0003F0, "Member 'USQGameInstance::MusicAudioComponent' has a wrong offset!");
static_assert(offsetof(USQGameInstance, MusicSoundCue) == 0x0003F8, "Member 'USQGameInstance::MusicSoundCue' has a wrong offset!");
static_assert(offsetof(USQGameInstance, PendingServer) == 0x000400, "Member 'USQGameInstance::PendingServer' has a wrong offset!");
static_assert(offsetof(USQGameInstance, bHasPendingServer) == 0x000508, "Member 'USQGameInstance::bHasPendingServer' has a wrong offset!");
static_assert(offsetof(USQGameInstance, LastTicket) == 0x000510, "Member 'USQGameInstance::LastTicket' has a wrong offset!");
static_assert(offsetof(USQGameInstance, LastTicketRefresh) == 0x000520, "Member 'USQGameInstance::LastTicketRefresh' has a wrong offset!");
static_assert(offsetof(USQGameInstance, ServerPartMessage) == 0x000530, "Member 'USQGameInstance::ServerPartMessage' has a wrong offset!");
static_assert(offsetof(USQGameInstance, ModInfo) == 0x000540, "Member 'USQGameInstance::ModInfo' has a wrong offset!");
static_assert(offsetof(USQGameInstance, MainMenuMap) == 0x000550, "Member 'USQGameInstance::MainMenuMap' has a wrong offset!");
static_assert(offsetof(USQGameInstance, CurrentLevel) == 0x000560, "Member 'USQGameInstance::CurrentLevel' has a wrong offset!");
static_assert(offsetof(USQGameInstance, CurrentLayer) == 0x000568, "Member 'USQGameInstance::CurrentLayer' has a wrong offset!");
static_assert(offsetof(USQGameInstance, CurrentLayerSetup) == 0x000570, "Member 'USQGameInstance::CurrentLayerSetup' has a wrong offset!");
static_assert(offsetof(USQGameInstance, NextLayerSetup) == 0x000590, "Member 'USQGameInstance::NextLayerSetup' has a wrong offset!");
static_assert(offsetof(USQGameInstance, HistoryRecordsLimit) == 0x0005C0, "Member 'USQGameInstance::HistoryRecordsLimit' has a wrong offset!");
static_assert(offsetof(USQGameInstance, NextLayer) == 0x0005C8, "Member 'USQGameInstance::NextLayer' has a wrong offset!");
static_assert(offsetof(USQGameInstance, NextLevel) == 0x0005D0, "Member 'USQGameInstance::NextLevel' has a wrong offset!");
static_assert(offsetof(USQGameInstance, LayerRotation) == 0x0005F0, "Member 'USQGameInstance::LayerRotation' has a wrong offset!");
static_assert(offsetof(USQGameInstance, LayerVoteList) == 0x000600, "Member 'USQGameInstance::LayerVoteList' has a wrong offset!");
static_assert(offsetof(USQGameInstance, LayerRotationLowPlayers) == 0x000610, "Member 'USQGameInstance::LayerRotationLowPlayers' has a wrong offset!");
static_assert(offsetof(USQGameInstance, InitialGameDiscoveryCompletedDelegate) == 0x000628, "Member 'USQGameInstance::InitialGameDiscoveryCompletedDelegate' has a wrong offset!");
static_assert(offsetof(USQGameInstance, InitialGameDiscoveryCompleted) == 0x000638, "Member 'USQGameInstance::InitialGameDiscoveryCompleted' has a wrong offset!");
static_assert(offsetof(USQGameInstance, AvailableLevels) == 0x000640, "Member 'USQGameInstance::AvailableLevels' has a wrong offset!");
static_assert(offsetof(USQGameInstance, AvailableLayers) == 0x000690, "Member 'USQGameInstance::AvailableLayers' has a wrong offset!");
static_assert(offsetof(USQGameInstance, AvailableFactions) == 0x0006E0, "Member 'USQGameInstance::AvailableFactions' has a wrong offset!");
static_assert(offsetof(USQGameInstance, AvailableFactionSetups) == 0x000730, "Member 'USQGameInstance::AvailableFactionSetups' has a wrong offset!");
static_assert(offsetof(USQGameInstance, CurrentCaptureComponent) == 0x0007C0, "Member 'USQGameInstance::CurrentCaptureComponent' has a wrong offset!");
static_assert(offsetof(USQGameInstance, PIPTexture) == 0x0007C8, "Member 'USQGameInstance::PIPTexture' has a wrong offset!");

// Class Squad.SQGridData_CommandOption
// 0x00D8 (0x0138 - 0x0060)
class USQGridData_CommandOption : public USQGridData_BaseOption
{
public:
	uint8                                         CategoryId;                                        // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA9[0x7];                                      // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ASQCommandActor>            CommandActor;                                      // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                ControlWidget;                                     // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnrouteDuration;                                   // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActiveDuration;                                    // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CooldownDuration;                                  // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IconAngleOffset;                                   // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngleFromBase;                                  // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CreateMapMarker;                                   // 0x008C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowedInVehicle;                                 // 0x008D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreActionEnabled;                              // 0x008E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FAA[0x1];                                      // 0x008F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ASQMapMarker>               MapMarkerClass;                                    // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQCommanderActionSounds               CommanderActionSoundsList;                         // 0x0098(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGridData_CommandOption">();
	}
	static class USQGridData_CommandOption* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQGridData_CommandOption>();
	}
};
static_assert(alignof(USQGridData_CommandOption) == 0x000008, "Wrong alignment on USQGridData_CommandOption");
static_assert(sizeof(USQGridData_CommandOption) == 0x000138, "Wrong size on USQGridData_CommandOption");
static_assert(offsetof(USQGridData_CommandOption, CategoryId) == 0x000060, "Member 'USQGridData_CommandOption::CategoryId' has a wrong offset!");
static_assert(offsetof(USQGridData_CommandOption, CommandActor) == 0x000068, "Member 'USQGridData_CommandOption::CommandActor' has a wrong offset!");
static_assert(offsetof(USQGridData_CommandOption, ControlWidget) == 0x000070, "Member 'USQGridData_CommandOption::ControlWidget' has a wrong offset!");
static_assert(offsetof(USQGridData_CommandOption, EnrouteDuration) == 0x000078, "Member 'USQGridData_CommandOption::EnrouteDuration' has a wrong offset!");
static_assert(offsetof(USQGridData_CommandOption, ActiveDuration) == 0x00007C, "Member 'USQGridData_CommandOption::ActiveDuration' has a wrong offset!");
static_assert(offsetof(USQGridData_CommandOption, CooldownDuration) == 0x000080, "Member 'USQGridData_CommandOption::CooldownDuration' has a wrong offset!");
static_assert(offsetof(USQGridData_CommandOption, IconAngleOffset) == 0x000084, "Member 'USQGridData_CommandOption::IconAngleOffset' has a wrong offset!");
static_assert(offsetof(USQGridData_CommandOption, MaxAngleFromBase) == 0x000088, "Member 'USQGridData_CommandOption::MaxAngleFromBase' has a wrong offset!");
static_assert(offsetof(USQGridData_CommandOption, CreateMapMarker) == 0x00008C, "Member 'USQGridData_CommandOption::CreateMapMarker' has a wrong offset!");
static_assert(offsetof(USQGridData_CommandOption, bAllowedInVehicle) == 0x00008D, "Member 'USQGridData_CommandOption::bAllowedInVehicle' has a wrong offset!");
static_assert(offsetof(USQGridData_CommandOption, bIgnoreActionEnabled) == 0x00008E, "Member 'USQGridData_CommandOption::bIgnoreActionEnabled' has a wrong offset!");
static_assert(offsetof(USQGridData_CommandOption, MapMarkerClass) == 0x000090, "Member 'USQGridData_CommandOption::MapMarkerClass' has a wrong offset!");
static_assert(offsetof(USQGridData_CommandOption, CommanderActionSoundsList) == 0x000098, "Member 'USQGridData_CommandOption::CommanderActionSoundsList' has a wrong offset!");

// Class Squad.SQGridData_CommandOption_Distance
// 0x0008 (0x0140 - 0x0138)
class USQGridData_CommandOption_Distance final : public USQGridData_CommandOption
{
public:
	float                                         MinimumDistance;                                   // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumDistance;                                   // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGridData_CommandOption_Distance">();
	}
	static class USQGridData_CommandOption_Distance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQGridData_CommandOption_Distance>();
	}
};
static_assert(alignof(USQGridData_CommandOption_Distance) == 0x000008, "Wrong alignment on USQGridData_CommandOption_Distance");
static_assert(sizeof(USQGridData_CommandOption_Distance) == 0x000140, "Wrong size on USQGridData_CommandOption_Distance");
static_assert(offsetof(USQGridData_CommandOption_Distance, MinimumDistance) == 0x000138, "Member 'USQGridData_CommandOption_Distance::MinimumDistance' has a wrong offset!");
static_assert(offsetof(USQGridData_CommandOption_Distance, MaximumDistance) == 0x00013C, "Member 'USQGridData_CommandOption_Distance::MaximumDistance' has a wrong offset!");

// Class Squad.SQTeam
// 0x0060 (0x0288 - 0x0228)
class ASQTeam : public AInfo
{
public:
	TSubclassOf<class ASQTeamState>               TeamStateClass;                                    // 0x0228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQTeamStatePrivate>        PrivateTeamStateClass;                             // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQTeamState*                           TeamState;                                         // 0x0238(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQTeamStatePrivate*                    PrivateTeamState;                                  // 0x0240(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ASQSquad*>                       Squads;                                            // 0x0248(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ASQSquad*>                       IndexedSquads;                                     // 0x0258(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class ASQPlayerController*                    Commander;                                         // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQSquad*                               CommandSquad;                                      // 0x0270(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQCommanderManager*                    CommanderManager;                                  // 0x0278(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQLayerTeamConfig*                     TeamLayerConfig;                                   // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class FString GetNatoStringOrSquadString(int32 Idx);

	void ApplySlomoFactor(float TimeDilationFactor);
	void InitializeAvailabilities();
	void Release_Action(const class FName& SettingId);
	void Release_Deployable(const class FName& SettingId);
	void Release_Role(const class FName& SettingId);
	void Release_Vehicle(const class FName& SettingId, const int32 Param_Index);
	bool Request_Player_Action(const class FName& ActionId, class ASQPlayerController* InPlayer, class USQActionSettings* OutSetting, struct FDataTableRowHandle* OutUnavailabilityReason);
	bool Request_Player_Deployable_Refund(class ASQPlayerController* InPlayer, class ASQDeployable* InDeployable);
	bool Request_Player_Role(const class FName& RoleId, class ASQPlayerController* InPlayer, class USQRoleSettings** OutSetting, struct FDataTableRowHandle* OutUnavailabilityReason);
	bool Request_Player_Role_Rearm(const class FName& RoleId, class ASQPlayerController* InPlayer, const TScriptInterface<class ISQRearmSource>& InRearmSource, class USQRoleSettings** OutSetting, struct FDataTableRowHandle* OutUnavailabilityReason);
	bool Request_Player_Vehicle(const class FName& VehicleId, class ASQPlayerController* InPlayer, class USQVehicleSettings** OutSetting, struct FDataTableRowHandle* OutUnavailabilityReason);
	bool Request_Team_Deployable(const struct FSQAvailabilityState_Deployable& DeployableStatus);
	bool Request_Team_Vehicle(const struct FSQAvailabilityState_Vehicle& VehicleStatus);
	void SetFactionSetup(class USQFactionSetup* InFactionSetup);
	void SetTeamConfig(class USQLayerTeamConfig* InLayerTeamConfig);
	void UpdateAvailabilities();

	class USQRoleSettings* GetDefaultRole() const;
	class USQRoleSettings* GetDefaultSquadLeaderRole() const;
	class USQFaction* GetFaction() const;
	class FString GetFactionDisplayName() const;
	class FName GetFactionId() const;
	class USQFactionSetup* GetFactionSetup() const;
	class FString GetFactionSetupDisplayName() const;
	class FName GetFactionSetupId() const;
	class USQRoleSettings* GetLeaveSquadRole() const;
	int32 GetPlayerCount() const;
	int32 GetTeamId() const;
	bool HasFactionSetup() const;
	bool IsConfigured() const;
	bool TryGetFactionDisplayName(class FText* OutDisplayName) const;
	bool TryGetFactionSetupDisplayName(class FText* OutDisplayName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQTeam">();
	}
	static class ASQTeam* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQTeam>();
	}
};
static_assert(alignof(ASQTeam) == 0x000008, "Wrong alignment on ASQTeam");
static_assert(sizeof(ASQTeam) == 0x000288, "Wrong size on ASQTeam");
static_assert(offsetof(ASQTeam, TeamStateClass) == 0x000228, "Member 'ASQTeam::TeamStateClass' has a wrong offset!");
static_assert(offsetof(ASQTeam, PrivateTeamStateClass) == 0x000230, "Member 'ASQTeam::PrivateTeamStateClass' has a wrong offset!");
static_assert(offsetof(ASQTeam, TeamState) == 0x000238, "Member 'ASQTeam::TeamState' has a wrong offset!");
static_assert(offsetof(ASQTeam, PrivateTeamState) == 0x000240, "Member 'ASQTeam::PrivateTeamState' has a wrong offset!");
static_assert(offsetof(ASQTeam, Squads) == 0x000248, "Member 'ASQTeam::Squads' has a wrong offset!");
static_assert(offsetof(ASQTeam, IndexedSquads) == 0x000258, "Member 'ASQTeam::IndexedSquads' has a wrong offset!");
static_assert(offsetof(ASQTeam, Commander) == 0x000268, "Member 'ASQTeam::Commander' has a wrong offset!");
static_assert(offsetof(ASQTeam, CommandSquad) == 0x000270, "Member 'ASQTeam::CommandSquad' has a wrong offset!");
static_assert(offsetof(ASQTeam, CommanderManager) == 0x000278, "Member 'ASQTeam::CommanderManager' has a wrong offset!");
static_assert(offsetof(ASQTeam, TeamLayerConfig) == 0x000280, "Member 'ASQTeam::TeamLayerConfig' has a wrong offset!");

// Class Squad.SQDeployable
// 0x0208 (0x0430 - 0x0228)
class ASQDeployable : public AActor
{
public:
	uint8                                         Pad_FB5[0x10];                                     // 0x0228(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	ESQTeam                                       InitialTeam;                                       // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB6[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQForwardBase*                         OwningFob;                                         // 0x0240(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfBuiltTransitionHealth;                         // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FullyBuiltTransitionHealth;                        // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Team;                                              // 0x0250(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFob;                                            // 0x0254(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlaced;                                           // 0x0255(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB7[0x2];                                      // 0x0256(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UBoxComponent*                          StackingCollisionBox;                              // 0x0258(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                          PlacementCollisionBox;                             // 0x0260(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePlacementCollisionBox;                         // 0x0268(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB8[0x7];                                      // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftClassPtr<class UClass>>           AllowablePlacementIntersectionClasses;             // 0x0270(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bUseLineOfSightTrace;                              // 0x0280(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB9[0x3];                                      // 0x0281(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LineOfSightEndOffset;                              // 0x0284(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositivePlacementTraceHeight;                      // 0x0290(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NegativePlacementTraceHeight;                      // 0x0294(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositivePlacementVerticalAllowance;                // 0x0298(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NegativePlacementVerticalAllowance;                // 0x029C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewPlacementCapsuleRadius;                        // 0x02A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FBA[0x4];                                      // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQCoreStateComponent*                  StateObject;                                       // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQExplosiveType                              ExplosiveType;                                     // 0x02B0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FBB[0x7];                                      // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQUsableData                          UsableData;                                        // 0x02B8(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class USceneComponent*                        Completed;                                         // 0x02F8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                        Unbuilt;                                           // 0x0300(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                        HalfBuilt;                                         // 0x0308(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USphereComponent*                       SimpleDetectionSphere;                             // 0x0310(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_             OnBuildStateChange;                                // 0x0318(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnDestroyedEvent;                                  // 0x0328(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	ESQBuildState                                 BuildState;                                        // 0x0338(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FBC[0x7];                                      // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQDeployableChangeStateEffect> ChangeStateEffects;                                // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQDeployableStateDamageEffect> DamageStateEffects;                                // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQLastingEffect>           DestructionEffect;                                 // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Cost;                                              // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHealth;                                         // 0x036C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialHealth;                                     // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Health;                                            // 0x0374(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanUnbuild;                                       // 0x0378(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FBD[0x7];                                      // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQDamageModifier>              AllowableDamageTypes;                              // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ESQDeployableSize                             Size;                                              // 0x0390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIngoreNoResist;                                   // 0x0391(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStartUnbuilt;                                     // 0x0392(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrackInFOB;                                       // 0x0393(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrackInPlayerState;                               // 0x0394(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FBE[0x3];                                      // 0x0395(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypesToStack;                                // 0x0398(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bAllowStacking;                                    // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowPlacementOnPawns;                            // 0x03A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowPlacementOnSoldiers;                         // 0x03AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowPlacementOnVehicles;                         // 0x03AB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowPlacementInWaterBodies;                      // 0x03AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttachToUnderlyingActor;                          // 0x03AD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestroyWhenAttachedActorIsDestroyed;              // 0x03AE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FBF[0x1];                                      // 0x03AF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxWaterDepthPlacement;                            // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQInvalidPlacementReason                     bCachedPlacementResult;                            // 0x03B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlignToGround;                                    // 0x03B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_FC0[0x2];                                      // 0x03B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ValidPitchRange;                                   // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxCornerDifference;                               // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRequiresSameTeam;                                 // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCantBePlacedInFOB;                                // 0x03C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseComplexTraceForPlacement;                      // 0x03C2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_FC1[0x1];                                      // 0x03C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                GhostOffset;                                       // 0x03C4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQBuildState                                 GhostBuildState;                                   // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC2[0x7];                                      // 0x03D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     GhostMaterial;                                     // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGhost;                                          // 0x03E0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC3[0x3];                                      // 0x03E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GhostRotationSpeed;                                // 0x03E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GhostRotationDelta;                                // 0x03E8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowFireWeaponOverrideOnSQPlayerController;      // 0x03EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowAltFireWeaponOverrideOnSQPlayerController;   // 0x03ED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequiresFOB;                                      // 0x03EE(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC4[0x1];                                      // 0x03EF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DynGhostInstance;                                  // 0x03F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_FC5[0x10];                                     // 0x03F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class USQDeployableSettings*                  Setting;                                           // 0x0408(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    CachedInvalidPlacementReason;                      // 0x0410(0x0010)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, NativeAccessSpecifierPublic)
	class UDataTable*                             ErrorTable;                                        // 0x0420(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WasEverBuilt;                                      // 0x0428(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC6[0x7];                                      // 0x0429(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AttachToUnderlyingActor();
	void BeginDeath(float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser);
	ESQTrackDeployableResult BP_ExtraTrackDeployableRules(class ASQPlayerState* PlayerState, bool bIncludeSelf);
	void BP_OnStateChange(ESQBuildState OldBuildState);
	void BP_OnStateChangeClient(ESQBuildState OldBuildState);
	void BPOnDeath(float KillingDamage, const struct FDamageEvent& DamageEvent, class AController* Killer, class AActor* DamageCauser);
	void BPOnGhostMade();
	void CompletedConstruction();
	void ConstructionHit(class ASQSoldier* Activator, class AController* Inst, float Amount);
	class FText GetFailedSpawnReasonText(ESQInvalidPlacementReason Reason);
	class ASQForwardBase* GetNearestFOB(bool bIsFriendly);
	ESQTrackDeployableResult GetTrackDeployableResult(class ASQPlayerState* PlayerState, bool bIncludeSelf);
	void GoToBuildState(ESQBuildState InBuildState);
	void InvalidatePlacement();
	bool IsDeployableEmpty();
	bool IsValidPlacement(ESQInvalidPlacementReason* Reason);
	void MakeGhost();
	void MulticastPlayDamageEffects(TSubclassOf<class UDamageType> DamageTypeClass, const struct FVector& ImpactLocationZeroBased, ESQBuildState OldBuildState, ESQBuildState NewBuildState);
	void MulticastPlayDestructionEffect();
	void OnAttachedActorDestroyed(class AActor* DestroyedActor);
	void OnRep_BuildState(ESQBuildState OldBuildState);
	void OnRep_Team();
	void OnStateChangeClient(ESQBuildState OldBuildState);
	void Placed();
	void PlayStateChangeEffects(ESQBuildState OldBuildState);
	void PostModifyHealth(const float DeltaHealth, class AController* Inst, const bool bCausedByDamage);
	float PreModifyHealth(const float DeltaHealth, class AController* Inst, const bool bCausedByDamage);
	void PushSoldiersOutOfBounds();
	void RemovedFromPlayersPlacedList();
	void SetStateCompleted();
	void SetStateHalfBuilt();
	void SetStateUnbuilt();
	void SetTeam(int32 Param_Team);
	void UpdateState();

	ESQBuildState GetBuildState() const;
	bool IsGhost() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDeployable">();
	}
	static class ASQDeployable* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQDeployable>();
	}
};
static_assert(alignof(ASQDeployable) == 0x000008, "Wrong alignment on ASQDeployable");
static_assert(sizeof(ASQDeployable) == 0x000430, "Wrong size on ASQDeployable");
static_assert(offsetof(ASQDeployable, InitialTeam) == 0x000238, "Member 'ASQDeployable::InitialTeam' has a wrong offset!");
static_assert(offsetof(ASQDeployable, OwningFob) == 0x000240, "Member 'ASQDeployable::OwningFob' has a wrong offset!");
static_assert(offsetof(ASQDeployable, HalfBuiltTransitionHealth) == 0x000248, "Member 'ASQDeployable::HalfBuiltTransitionHealth' has a wrong offset!");
static_assert(offsetof(ASQDeployable, FullyBuiltTransitionHealth) == 0x00024C, "Member 'ASQDeployable::FullyBuiltTransitionHealth' has a wrong offset!");
static_assert(offsetof(ASQDeployable, Team) == 0x000250, "Member 'ASQDeployable::Team' has a wrong offset!");
static_assert(offsetof(ASQDeployable, bIsFob) == 0x000254, "Member 'ASQDeployable::bIsFob' has a wrong offset!");
static_assert(offsetof(ASQDeployable, bPlaced) == 0x000255, "Member 'ASQDeployable::bPlaced' has a wrong offset!");
static_assert(offsetof(ASQDeployable, StackingCollisionBox) == 0x000258, "Member 'ASQDeployable::StackingCollisionBox' has a wrong offset!");
static_assert(offsetof(ASQDeployable, PlacementCollisionBox) == 0x000260, "Member 'ASQDeployable::PlacementCollisionBox' has a wrong offset!");
static_assert(offsetof(ASQDeployable, bUsePlacementCollisionBox) == 0x000268, "Member 'ASQDeployable::bUsePlacementCollisionBox' has a wrong offset!");
static_assert(offsetof(ASQDeployable, AllowablePlacementIntersectionClasses) == 0x000270, "Member 'ASQDeployable::AllowablePlacementIntersectionClasses' has a wrong offset!");
static_assert(offsetof(ASQDeployable, bUseLineOfSightTrace) == 0x000280, "Member 'ASQDeployable::bUseLineOfSightTrace' has a wrong offset!");
static_assert(offsetof(ASQDeployable, LineOfSightEndOffset) == 0x000284, "Member 'ASQDeployable::LineOfSightEndOffset' has a wrong offset!");
static_assert(offsetof(ASQDeployable, PositivePlacementTraceHeight) == 0x000290, "Member 'ASQDeployable::PositivePlacementTraceHeight' has a wrong offset!");
static_assert(offsetof(ASQDeployable, NegativePlacementTraceHeight) == 0x000294, "Member 'ASQDeployable::NegativePlacementTraceHeight' has a wrong offset!");
static_assert(offsetof(ASQDeployable, PositivePlacementVerticalAllowance) == 0x000298, "Member 'ASQDeployable::PositivePlacementVerticalAllowance' has a wrong offset!");
static_assert(offsetof(ASQDeployable, NegativePlacementVerticalAllowance) == 0x00029C, "Member 'ASQDeployable::NegativePlacementVerticalAllowance' has a wrong offset!");
static_assert(offsetof(ASQDeployable, ViewPlacementCapsuleRadius) == 0x0002A0, "Member 'ASQDeployable::ViewPlacementCapsuleRadius' has a wrong offset!");
static_assert(offsetof(ASQDeployable, StateObject) == 0x0002A8, "Member 'ASQDeployable::StateObject' has a wrong offset!");
static_assert(offsetof(ASQDeployable, ExplosiveType) == 0x0002B0, "Member 'ASQDeployable::ExplosiveType' has a wrong offset!");
static_assert(offsetof(ASQDeployable, UsableData) == 0x0002B8, "Member 'ASQDeployable::UsableData' has a wrong offset!");
static_assert(offsetof(ASQDeployable, Completed) == 0x0002F8, "Member 'ASQDeployable::Completed' has a wrong offset!");
static_assert(offsetof(ASQDeployable, Unbuilt) == 0x000300, "Member 'ASQDeployable::Unbuilt' has a wrong offset!");
static_assert(offsetof(ASQDeployable, HalfBuilt) == 0x000308, "Member 'ASQDeployable::HalfBuilt' has a wrong offset!");
static_assert(offsetof(ASQDeployable, SimpleDetectionSphere) == 0x000310, "Member 'ASQDeployable::SimpleDetectionSphere' has a wrong offset!");
static_assert(offsetof(ASQDeployable, OnBuildStateChange) == 0x000318, "Member 'ASQDeployable::OnBuildStateChange' has a wrong offset!");
static_assert(offsetof(ASQDeployable, OnDestroyedEvent) == 0x000328, "Member 'ASQDeployable::OnDestroyedEvent' has a wrong offset!");
static_assert(offsetof(ASQDeployable, BuildState) == 0x000338, "Member 'ASQDeployable::BuildState' has a wrong offset!");
static_assert(offsetof(ASQDeployable, ChangeStateEffects) == 0x000340, "Member 'ASQDeployable::ChangeStateEffects' has a wrong offset!");
static_assert(offsetof(ASQDeployable, DamageStateEffects) == 0x000350, "Member 'ASQDeployable::DamageStateEffects' has a wrong offset!");
static_assert(offsetof(ASQDeployable, DestructionEffect) == 0x000360, "Member 'ASQDeployable::DestructionEffect' has a wrong offset!");
static_assert(offsetof(ASQDeployable, Cost) == 0x000368, "Member 'ASQDeployable::Cost' has a wrong offset!");
static_assert(offsetof(ASQDeployable, MaxHealth) == 0x00036C, "Member 'ASQDeployable::MaxHealth' has a wrong offset!");
static_assert(offsetof(ASQDeployable, InitialHealth) == 0x000370, "Member 'ASQDeployable::InitialHealth' has a wrong offset!");
static_assert(offsetof(ASQDeployable, Health) == 0x000374, "Member 'ASQDeployable::Health' has a wrong offset!");
static_assert(offsetof(ASQDeployable, bCanUnbuild) == 0x000378, "Member 'ASQDeployable::bCanUnbuild' has a wrong offset!");
static_assert(offsetof(ASQDeployable, AllowableDamageTypes) == 0x000380, "Member 'ASQDeployable::AllowableDamageTypes' has a wrong offset!");
static_assert(offsetof(ASQDeployable, Size) == 0x000390, "Member 'ASQDeployable::Size' has a wrong offset!");
static_assert(offsetof(ASQDeployable, bIngoreNoResist) == 0x000391, "Member 'ASQDeployable::bIngoreNoResist' has a wrong offset!");
static_assert(offsetof(ASQDeployable, bStartUnbuilt) == 0x000392, "Member 'ASQDeployable::bStartUnbuilt' has a wrong offset!");
static_assert(offsetof(ASQDeployable, bTrackInFOB) == 0x000393, "Member 'ASQDeployable::bTrackInFOB' has a wrong offset!");
static_assert(offsetof(ASQDeployable, bTrackInPlayerState) == 0x000394, "Member 'ASQDeployable::bTrackInPlayerState' has a wrong offset!");
static_assert(offsetof(ASQDeployable, ObjectTypesToStack) == 0x000398, "Member 'ASQDeployable::ObjectTypesToStack' has a wrong offset!");
static_assert(offsetof(ASQDeployable, bAllowStacking) == 0x0003A8, "Member 'ASQDeployable::bAllowStacking' has a wrong offset!");
static_assert(offsetof(ASQDeployable, bAllowPlacementOnPawns) == 0x0003A9, "Member 'ASQDeployable::bAllowPlacementOnPawns' has a wrong offset!");
static_assert(offsetof(ASQDeployable, bAllowPlacementOnSoldiers) == 0x0003AA, "Member 'ASQDeployable::bAllowPlacementOnSoldiers' has a wrong offset!");
static_assert(offsetof(ASQDeployable, bAllowPlacementOnVehicles) == 0x0003AB, "Member 'ASQDeployable::bAllowPlacementOnVehicles' has a wrong offset!");
static_assert(offsetof(ASQDeployable, bAllowPlacementInWaterBodies) == 0x0003AC, "Member 'ASQDeployable::bAllowPlacementInWaterBodies' has a wrong offset!");
static_assert(offsetof(ASQDeployable, bAttachToUnderlyingActor) == 0x0003AD, "Member 'ASQDeployable::bAttachToUnderlyingActor' has a wrong offset!");
static_assert(offsetof(ASQDeployable, bDestroyWhenAttachedActorIsDestroyed) == 0x0003AE, "Member 'ASQDeployable::bDestroyWhenAttachedActorIsDestroyed' has a wrong offset!");
static_assert(offsetof(ASQDeployable, MaxWaterDepthPlacement) == 0x0003B0, "Member 'ASQDeployable::MaxWaterDepthPlacement' has a wrong offset!");
static_assert(offsetof(ASQDeployable, bCachedPlacementResult) == 0x0003B4, "Member 'ASQDeployable::bCachedPlacementResult' has a wrong offset!");
static_assert(offsetof(ASQDeployable, bAlignToGround) == 0x0003B5, "Member 'ASQDeployable::bAlignToGround' has a wrong offset!");
static_assert(offsetof(ASQDeployable, ValidPitchRange) == 0x0003B8, "Member 'ASQDeployable::ValidPitchRange' has a wrong offset!");
static_assert(offsetof(ASQDeployable, MaxCornerDifference) == 0x0003BC, "Member 'ASQDeployable::MaxCornerDifference' has a wrong offset!");
static_assert(offsetof(ASQDeployable, bRequiresSameTeam) == 0x0003C0, "Member 'ASQDeployable::bRequiresSameTeam' has a wrong offset!");
static_assert(offsetof(ASQDeployable, bCantBePlacedInFOB) == 0x0003C1, "Member 'ASQDeployable::bCantBePlacedInFOB' has a wrong offset!");
static_assert(offsetof(ASQDeployable, bUseComplexTraceForPlacement) == 0x0003C2, "Member 'ASQDeployable::bUseComplexTraceForPlacement' has a wrong offset!");
static_assert(offsetof(ASQDeployable, GhostOffset) == 0x0003C4, "Member 'ASQDeployable::GhostOffset' has a wrong offset!");
static_assert(offsetof(ASQDeployable, GhostBuildState) == 0x0003D0, "Member 'ASQDeployable::GhostBuildState' has a wrong offset!");
static_assert(offsetof(ASQDeployable, GhostMaterial) == 0x0003D8, "Member 'ASQDeployable::GhostMaterial' has a wrong offset!");
static_assert(offsetof(ASQDeployable, bIsGhost) == 0x0003E0, "Member 'ASQDeployable::bIsGhost' has a wrong offset!");
static_assert(offsetof(ASQDeployable, GhostRotationSpeed) == 0x0003E4, "Member 'ASQDeployable::GhostRotationSpeed' has a wrong offset!");
static_assert(offsetof(ASQDeployable, GhostRotationDelta) == 0x0003E8, "Member 'ASQDeployable::GhostRotationDelta' has a wrong offset!");
static_assert(offsetof(ASQDeployable, bAllowFireWeaponOverrideOnSQPlayerController) == 0x0003EC, "Member 'ASQDeployable::bAllowFireWeaponOverrideOnSQPlayerController' has a wrong offset!");
static_assert(offsetof(ASQDeployable, bAllowAltFireWeaponOverrideOnSQPlayerController) == 0x0003ED, "Member 'ASQDeployable::bAllowAltFireWeaponOverrideOnSQPlayerController' has a wrong offset!");
static_assert(offsetof(ASQDeployable, bRequiresFOB) == 0x0003EE, "Member 'ASQDeployable::bRequiresFOB' has a wrong offset!");
static_assert(offsetof(ASQDeployable, DynGhostInstance) == 0x0003F0, "Member 'ASQDeployable::DynGhostInstance' has a wrong offset!");
static_assert(offsetof(ASQDeployable, Setting) == 0x000408, "Member 'ASQDeployable::Setting' has a wrong offset!");
static_assert(offsetof(ASQDeployable, CachedInvalidPlacementReason) == 0x000410, "Member 'ASQDeployable::CachedInvalidPlacementReason' has a wrong offset!");
static_assert(offsetof(ASQDeployable, ErrorTable) == 0x000420, "Member 'ASQDeployable::ErrorTable' has a wrong offset!");
static_assert(offsetof(ASQDeployable, WasEverBuilt) == 0x000428, "Member 'ASQDeployable::WasEverBuilt' has a wrong offset!");

// Class Squad.SQForwardBase
// 0x0150 (0x0580 - 0x0430)
class ASQForwardBase : public ASQDeployable
{
public:
	uint8                                         Pad_FD3[0x8];                                      // 0x0430(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsSpawningEnabled;                                // 0x0438(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD4[0x3];                                      // 0x0439(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToEnableSpawning;                              // 0x043C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreatesFobSpawnPoints;                            // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuppliesCreateSpawnPoints;                        // 0x0441(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD5[0x2];                                      // 0x0442(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpawnPointRadius;                                  // 0x0444(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnOffset;                                       // 0x0448(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemiesToCapture;                                  // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_SQForwardBase;                                // 0x0458(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseCaptureTick;                                    // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD6[0x7];                                      // 0x0469(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ASQDeployable*>                  TrackedDeployables;                                // 0x0470(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFOBStateUpdated;                                 // 0x0480(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class ASQGameSpawn*>                   SpawnPoints;                                       // 0x0490(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, RepNotify, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class ASQGameSpawn>               SpawnPointClass;                                   // 0x04A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSieged;                                           // 0x04A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_FD7[0x3];                                      // 0x04A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActivatedTime;                                     // 0x04AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NumberOfTeammatesNeededToDeploy;                   // 0x04B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NumberOfLogisNeededToDeploy;                       // 0x04B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PercentToDisableSpawns;                            // 0x04B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_FD8[0x4];                                      // 0x04BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USphereComponent*                       CaptureZone;                                       // 0x04C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USphereComponent*                       DeploymentRadius;                                  // 0x04C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USphereComponent*                       ConstructionRadius;                                // 0x04D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bUseResourceTickRateToUpdateResources;             // 0x04D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD9[0x3];                                      // 0x04D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxTicketsPerSecond;                               // 0x04DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TicketsPerPlayer;                                  // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicketsLostWhenOverrun;                            // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemiesToDisableSpawn;                             // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialConstructionPoints;                         // 0x04EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxConstructionPoints;                             // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialAmmo;                                       // 0x04F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAmmo;                                           // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CPPerSecond;                                       // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmmoPerSecond;                                     // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResourceGenerationRate;                            // 0x0504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CaptureTickRate;                                   // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ammo;                                              // 0x050C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         ConstructionPoints;                                // 0x0510(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NearbyEnemies;                                     // 0x0514(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SiegedSpawnPoints;                                 // 0x0518(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_FDA[0x2C];                                     // 0x051C(0x002C)(Fixing Size After Last Property [ Dumper-7 ])
	class USQForwardBaseSettings*                 FOBSettings;                                       // 0x0548(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsBleeding;                                       // 0x0550(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_FDB[0x3];                                      // 0x0551(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EnterBleedingHealth;                               // 0x0554(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ExitBleedingHealth;                                // 0x0558(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BleedOutTime;                                      // 0x055C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EstimatedWorldTimeOfDeath;                         // 0x0560(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_FDC[0xC];                                      // 0x0564(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            BleedStateInstigator;                              // 0x0570(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                 BleedStateCauser;                                  // 0x0578(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void BP_OnDeployableAdded(class ASQDeployable* InDeployable);
	void BP_OnDeployableRemoved(class ASQDeployable* InDeployable);
	void BPOnIsBleedingChanged();
	void BPOverrun(bool bFriendly);
	void BPPostTicketTick(float Difference);
	bool CheckDeploymentRules();
	bool ConsumeConstructionPoints(float Amount);
	bool ConsumeFOBAmmo(float Amount);
	class ASQGameSpawn* CreateSpawnPointOnFob();
	class ASQGameSpawn* CreateSpawnPointSeperately(const struct FVector& Location);
	bool HasConstructionPointsFor(float Amount);
	void OnBleedOut();
	void OnRep_ActivatedTimeChanged();
	void OnRep_AmmoChanged();
	void OnRep_ConstructionPointsChanged();
	void OnRep_IsBleedingChanged(bool bPrevIsBleeding);
	void OnRep_SiegedChanged();
	void OnRep_SpawningEnabledChanged();
	void OnRep_SpawnPointsChanged();
	void OnSpawningActivatedTimestampChanged(class ASQGameSpawn* SpawnPoint);
	void OnSpawningEnabledChanged(class ASQGameSpawn* SpawnPoint);
	void OnSpawnPointDestroyed(class AActor* DestroyedActor);
	void OnSpawnSiegedStateChanged(class ASQGameSpawn* SpawnPoint);
	void OnTrackedDeployableDestroyed(class ASQDeployable* Deployable);
	void Overrun(bool bFriendly);
	void SetActivateDelay(float DelaySeconds);
	void SetAmmo(float NewAmmo);
	void SetBleedState(bool bNewIsBleeding);
	void SetConstructionPoints(float NewConstructionPoints);
	void SetSieged(bool bValue);
	void SetSpawnPointsEnabled(bool bEnabled);
	void TrackDeployable(class ASQDeployable* Deployable);

	float GetActivatedSpawnDelay(bool BMax) const;
	float GetActivatedTimeStamp(bool BMax) const;
	float GetClientRemainingActivatingTime() const;
	int32 GetNumActivatedSpawnPoints() const;
	float GetRemainingActivatingTime(bool BMax) const;
	bool GetSpawnPointsEnabled() const;
	bool HasAmmoFor(float Amount) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQForwardBase">();
	}
	static class ASQForwardBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQForwardBase>();
	}
};
static_assert(alignof(ASQForwardBase) == 0x000008, "Wrong alignment on ASQForwardBase");
static_assert(sizeof(ASQForwardBase) == 0x000580, "Wrong size on ASQForwardBase");
static_assert(offsetof(ASQForwardBase, bIsSpawningEnabled) == 0x000438, "Member 'ASQForwardBase::bIsSpawningEnabled' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, TimeToEnableSpawning) == 0x00043C, "Member 'ASQForwardBase::TimeToEnableSpawning' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, bCreatesFobSpawnPoints) == 0x000440, "Member 'ASQForwardBase::bCreatesFobSpawnPoints' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, bSuppliesCreateSpawnPoints) == 0x000441, "Member 'ASQForwardBase::bSuppliesCreateSpawnPoints' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, SpawnPointRadius) == 0x000444, "Member 'ASQForwardBase::SpawnPointRadius' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, SpawnOffset) == 0x000448, "Member 'ASQForwardBase::SpawnOffset' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, EnemiesToCapture) == 0x000454, "Member 'ASQForwardBase::EnemiesToCapture' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, Name_SQForwardBase) == 0x000458, "Member 'ASQForwardBase::Name_SQForwardBase' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, UseCaptureTick) == 0x000468, "Member 'ASQForwardBase::UseCaptureTick' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, TrackedDeployables) == 0x000470, "Member 'ASQForwardBase::TrackedDeployables' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, OnFOBStateUpdated) == 0x000480, "Member 'ASQForwardBase::OnFOBStateUpdated' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, SpawnPoints) == 0x000490, "Member 'ASQForwardBase::SpawnPoints' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, SpawnPointClass) == 0x0004A0, "Member 'ASQForwardBase::SpawnPointClass' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, bSieged) == 0x0004A8, "Member 'ASQForwardBase::bSieged' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, ActivatedTime) == 0x0004AC, "Member 'ASQForwardBase::ActivatedTime' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, NumberOfTeammatesNeededToDeploy) == 0x0004B0, "Member 'ASQForwardBase::NumberOfTeammatesNeededToDeploy' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, NumberOfLogisNeededToDeploy) == 0x0004B4, "Member 'ASQForwardBase::NumberOfLogisNeededToDeploy' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, PercentToDisableSpawns) == 0x0004B8, "Member 'ASQForwardBase::PercentToDisableSpawns' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, CaptureZone) == 0x0004C0, "Member 'ASQForwardBase::CaptureZone' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, DeploymentRadius) == 0x0004C8, "Member 'ASQForwardBase::DeploymentRadius' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, ConstructionRadius) == 0x0004D0, "Member 'ASQForwardBase::ConstructionRadius' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, bUseResourceTickRateToUpdateResources) == 0x0004D8, "Member 'ASQForwardBase::bUseResourceTickRateToUpdateResources' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, MaxTicketsPerSecond) == 0x0004DC, "Member 'ASQForwardBase::MaxTicketsPerSecond' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, TicketsPerPlayer) == 0x0004E0, "Member 'ASQForwardBase::TicketsPerPlayer' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, TicketsLostWhenOverrun) == 0x0004E4, "Member 'ASQForwardBase::TicketsLostWhenOverrun' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, EnemiesToDisableSpawn) == 0x0004E8, "Member 'ASQForwardBase::EnemiesToDisableSpawn' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, InitialConstructionPoints) == 0x0004EC, "Member 'ASQForwardBase::InitialConstructionPoints' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, MaxConstructionPoints) == 0x0004F0, "Member 'ASQForwardBase::MaxConstructionPoints' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, InitialAmmo) == 0x0004F4, "Member 'ASQForwardBase::InitialAmmo' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, MaxAmmo) == 0x0004F8, "Member 'ASQForwardBase::MaxAmmo' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, CPPerSecond) == 0x0004FC, "Member 'ASQForwardBase::CPPerSecond' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, AmmoPerSecond) == 0x000500, "Member 'ASQForwardBase::AmmoPerSecond' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, ResourceGenerationRate) == 0x000504, "Member 'ASQForwardBase::ResourceGenerationRate' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, CaptureTickRate) == 0x000508, "Member 'ASQForwardBase::CaptureTickRate' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, Ammo) == 0x00050C, "Member 'ASQForwardBase::Ammo' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, ConstructionPoints) == 0x000510, "Member 'ASQForwardBase::ConstructionPoints' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, NearbyEnemies) == 0x000514, "Member 'ASQForwardBase::NearbyEnemies' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, SiegedSpawnPoints) == 0x000518, "Member 'ASQForwardBase::SiegedSpawnPoints' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, FOBSettings) == 0x000548, "Member 'ASQForwardBase::FOBSettings' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, bIsBleeding) == 0x000550, "Member 'ASQForwardBase::bIsBleeding' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, EnterBleedingHealth) == 0x000554, "Member 'ASQForwardBase::EnterBleedingHealth' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, ExitBleedingHealth) == 0x000558, "Member 'ASQForwardBase::ExitBleedingHealth' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, BleedOutTime) == 0x00055C, "Member 'ASQForwardBase::BleedOutTime' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, EstimatedWorldTimeOfDeath) == 0x000560, "Member 'ASQForwardBase::EstimatedWorldTimeOfDeath' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, BleedStateInstigator) == 0x000570, "Member 'ASQForwardBase::BleedStateInstigator' has a wrong offset!");
static_assert(offsetof(ASQForwardBase, BleedStateCauser) == 0x000578, "Member 'ASQForwardBase::BleedStateCauser' has a wrong offset!");

// Class Squad.SQCommanderManager
// 0x00C8 (0x0178 - 0x00B0)
class USQCommanderManager final : public UActorComponent
{
public:
	class ASQCommanderState*                      CommanderState;                                    // 0x00B0(0x0008)(Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             TeamCommands;                                      // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCommanderCategory>             Categories;                                        // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MinimumSquadSizeForVoting;                         // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinimumSquadsRequiredForVoting;                    // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VotingTimeSeconds;                                 // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoubleCaptureSpeed;                               // 0x00DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FE5[0x3];                                      // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActionCooldownExtensionOnNewCommander;             // 0x00E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoteCooldownTimeSeconds;                           // 0x00E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FE6[0x20];                                     // 0x00E8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bCommanderActive;                                  // 0x0108(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FE7[0x6F];                                     // 0x0109(0x006F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static float CalculateCategoryCurrentRemainingTime(const uint8& CommandOptionType, const class ASQCommanderState* SQCommanderState);
	static bool CalculateCategoryLocked(const uint8& CommandOptionType, const class ASQCommanderState* SQCommanderState);
	static float CalculateCategoryPercentRemainingTime(const uint8& CommandOptionType, const class ASQCommanderState* SQCommanderState);
	static ESQCommandOptionState CalculateState(const TSubclassOf<class USQGridData_CommandOption> CommandOption, const class ASQCommanderState* SQCommanderState);
	static float CalculateStatePercentTimeRemaining(const TSubclassOf<class USQGridData_CommandOption> CommandOption, const class ASQCommanderState* SQCommanderState, const ESQCommandOptionState& CommandOptionState);
	static float CalculateStateTimeRemaining(const TSubclassOf<class USQGridData_CommandOption> CommandOption, const class ASQCommanderState* SQCommanderState, const ESQCommandOptionState& CommandOptionState);
	static float CalculateTotalTimeRemaining(const TSubclassOf<class USQGridData_CommandOption> CommandOption, const class ASQCommanderState* SQCommanderState);
	static bool CanUseAction(const TSubclassOf<class USQGridData_CommandOption> CommandOption, const class ASQCommanderState* SQCommanderState);
	static struct FSQCommandActionData GetInterval(const TSubclassOf<class USQGridData_CommandOption> CommandOption, const class ASQCommanderState* SQCommanderState);

	void CommanderChangedDelegate__DelegateSignature(class ASQPlayerState* OldCommander);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCommanderManager">();
	}
	static class USQCommanderManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCommanderManager>();
	}
};
static_assert(alignof(USQCommanderManager) == 0x000008, "Wrong alignment on USQCommanderManager");
static_assert(sizeof(USQCommanderManager) == 0x000178, "Wrong size on USQCommanderManager");
static_assert(offsetof(USQCommanderManager, CommanderState) == 0x0000B0, "Member 'USQCommanderManager::CommanderState' has a wrong offset!");
static_assert(offsetof(USQCommanderManager, TeamCommands) == 0x0000B8, "Member 'USQCommanderManager::TeamCommands' has a wrong offset!");
static_assert(offsetof(USQCommanderManager, Categories) == 0x0000C0, "Member 'USQCommanderManager::Categories' has a wrong offset!");
static_assert(offsetof(USQCommanderManager, MinimumSquadSizeForVoting) == 0x0000D0, "Member 'USQCommanderManager::MinimumSquadSizeForVoting' has a wrong offset!");
static_assert(offsetof(USQCommanderManager, MinimumSquadsRequiredForVoting) == 0x0000D4, "Member 'USQCommanderManager::MinimumSquadsRequiredForVoting' has a wrong offset!");
static_assert(offsetof(USQCommanderManager, VotingTimeSeconds) == 0x0000D8, "Member 'USQCommanderManager::VotingTimeSeconds' has a wrong offset!");
static_assert(offsetof(USQCommanderManager, bDoubleCaptureSpeed) == 0x0000DC, "Member 'USQCommanderManager::bDoubleCaptureSpeed' has a wrong offset!");
static_assert(offsetof(USQCommanderManager, ActionCooldownExtensionOnNewCommander) == 0x0000E0, "Member 'USQCommanderManager::ActionCooldownExtensionOnNewCommander' has a wrong offset!");
static_assert(offsetof(USQCommanderManager, VoteCooldownTimeSeconds) == 0x0000E4, "Member 'USQCommanderManager::VoteCooldownTimeSeconds' has a wrong offset!");
static_assert(offsetof(USQCommanderManager, bCommanderActive) == 0x000108, "Member 'USQCommanderManager::bCommanderActive' has a wrong offset!");

// Class Squad.SQCommanderState
// 0x02F0 (0x0518 - 0x0228)
class ASQCommanderState final : public AInfo
{
public:
	bool                                          bVoteInProgress;                                   // 0x0228(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FF3[0x3];                                      // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CommanderVoteTimestamp;                            // 0x022C(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CommanderVoteTimer;                                // 0x0230(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVoteCooldownActive;                               // 0x0234(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FF4[0x3];                                      // 0x0235(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VoteCooldownTimer;                                 // 0x0238(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoteCooldownTimeSeconds;                           // 0x023C(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoteCooldownTimestamp;                             // 0x0240(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCommanderIsActive;                                // 0x0244(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCommandActionAttempted;                           // 0x0245(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoubleCaptureSpeed;                               // 0x0246(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FF5[0x11];                                     // 0x0247(0x0011)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCommanderCategory>             CommanderCategories;                               // 0x0258(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MinimumSquadSizeForVoting;                         // 0x0268(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinimumSquadsRequiredForVoting;                    // 0x026C(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VotingTimeSeconds;                                 // 0x0270(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FF6[0x4];                                      // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQCommanderActionDataArray            CommandIntervals;                                  // 0x0278(0x0118)(BlueprintVisible, Net, NativeAccessSpecifierPublic)
	TArray<float>                                 LastCategoryGameTime;                              // 0x0390(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, NativeAccessSpecifierPublic)
	class UDataTable*                             TeamCommands;                                      // 0x03A0(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCommanderNomineeArray                 NomineeStatus;                                     // 0x03A8(0x0118)(BlueprintVisible, BlueprintReadOnly, Net, NativeAccessSpecifierPublic)
	uint8                                         Pad_FF7[0x8];                                      // 0x04C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnCommanderChangedEvent;                           // 0x04C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnNominationAvailableEvent;                        // 0x04D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnNominationEndedEvent;                            // 0x04E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnNominationStartedEvent;                          // 0x04F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class ASQPlayerState*                         CurrentCommander;                                  // 0x0508(0x0008)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bActionsEnabled;                                   // 0x0510(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_FF8[0x7];                                      // 0x0511(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetActionsEnabled();
	TArray<TSubclassOf<class USQGridData_CommandOption>> GetCommandActions();
	TArray<TSubclassOf<class USQGridData_CommandOption>> GetCommandActionsById(const uint8& ID);
	void OnRep_CurrentCommander(class ASQPlayerState* OldCommander);
	void OnRep_VoteInProgressChanged();

	class ASQPlayerState* GetCurrentCommander() const;
	bool IsCommanderActionAllowed(const TSubclassOf<class USQGridData_CommandOption> CommandOption) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCommanderState">();
	}
	static class ASQCommanderState* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQCommanderState>();
	}
};
static_assert(alignof(ASQCommanderState) == 0x000008, "Wrong alignment on ASQCommanderState");
static_assert(sizeof(ASQCommanderState) == 0x000518, "Wrong size on ASQCommanderState");
static_assert(offsetof(ASQCommanderState, bVoteInProgress) == 0x000228, "Member 'ASQCommanderState::bVoteInProgress' has a wrong offset!");
static_assert(offsetof(ASQCommanderState, CommanderVoteTimestamp) == 0x00022C, "Member 'ASQCommanderState::CommanderVoteTimestamp' has a wrong offset!");
static_assert(offsetof(ASQCommanderState, CommanderVoteTimer) == 0x000230, "Member 'ASQCommanderState::CommanderVoteTimer' has a wrong offset!");
static_assert(offsetof(ASQCommanderState, bVoteCooldownActive) == 0x000234, "Member 'ASQCommanderState::bVoteCooldownActive' has a wrong offset!");
static_assert(offsetof(ASQCommanderState, VoteCooldownTimer) == 0x000238, "Member 'ASQCommanderState::VoteCooldownTimer' has a wrong offset!");
static_assert(offsetof(ASQCommanderState, VoteCooldownTimeSeconds) == 0x00023C, "Member 'ASQCommanderState::VoteCooldownTimeSeconds' has a wrong offset!");
static_assert(offsetof(ASQCommanderState, VoteCooldownTimestamp) == 0x000240, "Member 'ASQCommanderState::VoteCooldownTimestamp' has a wrong offset!");
static_assert(offsetof(ASQCommanderState, bCommanderIsActive) == 0x000244, "Member 'ASQCommanderState::bCommanderIsActive' has a wrong offset!");
static_assert(offsetof(ASQCommanderState, bCommandActionAttempted) == 0x000245, "Member 'ASQCommanderState::bCommandActionAttempted' has a wrong offset!");
static_assert(offsetof(ASQCommanderState, bDoubleCaptureSpeed) == 0x000246, "Member 'ASQCommanderState::bDoubleCaptureSpeed' has a wrong offset!");
static_assert(offsetof(ASQCommanderState, CommanderCategories) == 0x000258, "Member 'ASQCommanderState::CommanderCategories' has a wrong offset!");
static_assert(offsetof(ASQCommanderState, MinimumSquadSizeForVoting) == 0x000268, "Member 'ASQCommanderState::MinimumSquadSizeForVoting' has a wrong offset!");
static_assert(offsetof(ASQCommanderState, MinimumSquadsRequiredForVoting) == 0x00026C, "Member 'ASQCommanderState::MinimumSquadsRequiredForVoting' has a wrong offset!");
static_assert(offsetof(ASQCommanderState, VotingTimeSeconds) == 0x000270, "Member 'ASQCommanderState::VotingTimeSeconds' has a wrong offset!");
static_assert(offsetof(ASQCommanderState, CommandIntervals) == 0x000278, "Member 'ASQCommanderState::CommandIntervals' has a wrong offset!");
static_assert(offsetof(ASQCommanderState, LastCategoryGameTime) == 0x000390, "Member 'ASQCommanderState::LastCategoryGameTime' has a wrong offset!");
static_assert(offsetof(ASQCommanderState, TeamCommands) == 0x0003A0, "Member 'ASQCommanderState::TeamCommands' has a wrong offset!");
static_assert(offsetof(ASQCommanderState, NomineeStatus) == 0x0003A8, "Member 'ASQCommanderState::NomineeStatus' has a wrong offset!");
static_assert(offsetof(ASQCommanderState, OnCommanderChangedEvent) == 0x0004C8, "Member 'ASQCommanderState::OnCommanderChangedEvent' has a wrong offset!");
static_assert(offsetof(ASQCommanderState, OnNominationAvailableEvent) == 0x0004D8, "Member 'ASQCommanderState::OnNominationAvailableEvent' has a wrong offset!");
static_assert(offsetof(ASQCommanderState, OnNominationEndedEvent) == 0x0004E8, "Member 'ASQCommanderState::OnNominationEndedEvent' has a wrong offset!");
static_assert(offsetof(ASQCommanderState, OnNominationStartedEvent) == 0x0004F8, "Member 'ASQCommanderState::OnNominationStartedEvent' has a wrong offset!");
static_assert(offsetof(ASQCommanderState, CurrentCommander) == 0x000508, "Member 'ASQCommanderState::CurrentCommander' has a wrong offset!");
static_assert(offsetof(ASQCommanderState, bActionsEnabled) == 0x000510, "Member 'ASQCommanderState::bActionsEnabled' has a wrong offset!");

// Class Squad.SQGameEngine
// 0x00F8 (0x0E40 - 0x0D48)
class USQGameEngine final : public UGameEngine
{
public:
	class USQConfig*                              SquadConfig;                                       // 0x0D48(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FFB[0xF0];                                     // 0x0D50(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGameEngine">();
	}
	static class USQGameEngine* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQGameEngine>();
	}
};
static_assert(alignof(USQGameEngine) == 0x000008, "Wrong alignment on USQGameEngine");
static_assert(sizeof(USQGameEngine) == 0x000E40, "Wrong size on USQGameEngine");
static_assert(offsetof(USQGameEngine, SquadConfig) == 0x000D48, "Member 'USQGameEngine::SquadConfig' has a wrong offset!");

// Class Squad.SQCommanderVotingPlayerItem
// 0x0020 (0x0288 - 0x0268)
class USQCommanderVotingPlayerItem : public USQUserWidget
{
public:
	bool                                          bIsVotedByPlayer;                                  // 0x0268(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FFC[0x3];                                      // 0x0269(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VoteCount;                                         // 0x026C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NomineeName;                                       // 0x0270(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerState*                         NomineePlayerState;                                // 0x0280(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnIsVotedByPlayerChanged();
	void OnNomineeNameChanged();
	void OnVoteCountChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCommanderVotingPlayerItem">();
	}
	static class USQCommanderVotingPlayerItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCommanderVotingPlayerItem>();
	}
};
static_assert(alignof(USQCommanderVotingPlayerItem) == 0x000008, "Wrong alignment on USQCommanderVotingPlayerItem");
static_assert(sizeof(USQCommanderVotingPlayerItem) == 0x000288, "Wrong size on USQCommanderVotingPlayerItem");
static_assert(offsetof(USQCommanderVotingPlayerItem, bIsVotedByPlayer) == 0x000268, "Member 'USQCommanderVotingPlayerItem::bIsVotedByPlayer' has a wrong offset!");
static_assert(offsetof(USQCommanderVotingPlayerItem, VoteCount) == 0x00026C, "Member 'USQCommanderVotingPlayerItem::VoteCount' has a wrong offset!");
static_assert(offsetof(USQCommanderVotingPlayerItem, NomineeName) == 0x000270, "Member 'USQCommanderVotingPlayerItem::NomineeName' has a wrong offset!");
static_assert(offsetof(USQCommanderVotingPlayerItem, NomineePlayerState) == 0x000280, "Member 'USQCommanderVotingPlayerItem::NomineePlayerState' has a wrong offset!");

// Class Squad.SQCommanderVotingWidget
// 0x0020 (0x0288 - 0x0268)
class USQCommanderVotingWidget : public USQUserWidget
{
public:
	bool                                          bIsVotingAvailable;                                // 0x0268(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVotePending;                                    // 0x0269(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVoteInProgress;                                 // 0x026A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FFD[0x5];                                      // 0x026B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USQCommanderVotingPlayerItem> VoteItemClass;                                     // 0x0270(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPanelWidget*                           VoteItemsParent;                                   // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FFE[0x8];                                      // 0x0280(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Init();
	void OnIsVoteInProgressChanged();
	void OnIsVotingAvailableChanged();
	void OnVotingTimeChanged(float Seconds);
	void UpdateFromData();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCommanderVotingWidget">();
	}
	static class USQCommanderVotingWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCommanderVotingWidget>();
	}
};
static_assert(alignof(USQCommanderVotingWidget) == 0x000008, "Wrong alignment on USQCommanderVotingWidget");
static_assert(sizeof(USQCommanderVotingWidget) == 0x000288, "Wrong size on USQCommanderVotingWidget");
static_assert(offsetof(USQCommanderVotingWidget, bIsVotingAvailable) == 0x000268, "Member 'USQCommanderVotingWidget::bIsVotingAvailable' has a wrong offset!");
static_assert(offsetof(USQCommanderVotingWidget, bIsVotePending) == 0x000269, "Member 'USQCommanderVotingWidget::bIsVotePending' has a wrong offset!");
static_assert(offsetof(USQCommanderVotingWidget, bIsVoteInProgress) == 0x00026A, "Member 'USQCommanderVotingWidget::bIsVoteInProgress' has a wrong offset!");
static_assert(offsetof(USQCommanderVotingWidget, VoteItemClass) == 0x000270, "Member 'USQCommanderVotingWidget::VoteItemClass' has a wrong offset!");
static_assert(offsetof(USQCommanderVotingWidget, VoteItemsParent) == 0x000278, "Member 'USQCommanderVotingWidget::VoteItemsParent' has a wrong offset!");

// Class Squad.SQGameplayStatics
// 0x0000 (0x0028 - 0x0028)
class USQGameplayStatics final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGameplayStatics">();
	}
	static class USQGameplayStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQGameplayStatics>();
	}
};
static_assert(alignof(USQGameplayStatics) == 0x000008, "Wrong alignment on USQGameplayStatics");
static_assert(sizeof(USQGameplayStatics) == 0x000028, "Wrong size on USQGameplayStatics");

// Class Squad.SQCompass
// 0x0020 (0x0288 - 0x0268)
class USQCompass : public USQUserWidget
{
public:
	bool                                          bIsOwnerMedic;                                     // 0x0268(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FFF[0x3];                                      // 0x0269(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotationXFix;                                      // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         XScale;                                            // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVisibilityDistance;                             // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YPositionOffset;                                   // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalScale;                                        // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BearingLERP;                                       // 0x0280(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoCompassLERP;                                    // 0x0284(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldHide;                                       // 0x0285(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1000[0x2];                                     // 0x0286(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCompass">();
	}
	static class USQCompass* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCompass>();
	}
};
static_assert(alignof(USQCompass) == 0x000008, "Wrong alignment on USQCompass");
static_assert(sizeof(USQCompass) == 0x000288, "Wrong size on USQCompass");
static_assert(offsetof(USQCompass, bIsOwnerMedic) == 0x000268, "Member 'USQCompass::bIsOwnerMedic' has a wrong offset!");
static_assert(offsetof(USQCompass, RotationXFix) == 0x00026C, "Member 'USQCompass::RotationXFix' has a wrong offset!");
static_assert(offsetof(USQCompass, XScale) == 0x000270, "Member 'USQCompass::XScale' has a wrong offset!");
static_assert(offsetof(USQCompass, MaxVisibilityDistance) == 0x000274, "Member 'USQCompass::MaxVisibilityDistance' has a wrong offset!");
static_assert(offsetof(USQCompass, YPositionOffset) == 0x000278, "Member 'USQCompass::YPositionOffset' has a wrong offset!");
static_assert(offsetof(USQCompass, TotalScale) == 0x00027C, "Member 'USQCompass::TotalScale' has a wrong offset!");
static_assert(offsetof(USQCompass, BearingLERP) == 0x000280, "Member 'USQCompass::BearingLERP' has a wrong offset!");
static_assert(offsetof(USQCompass, bDoCompassLERP) == 0x000284, "Member 'USQCompass::bDoCompassLERP' has a wrong offset!");
static_assert(offsetof(USQCompass, bShouldHide) == 0x000285, "Member 'USQCompass::bShouldHide' has a wrong offset!");

// Class Squad.SQCompassBaseUnit
// 0x0008 (0x0270 - 0x0268)
class USQCompassBaseUnit : public USQUserWidget
{
public:
	class UImage*                                 BaseImage;                                         // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCompassBaseUnit">();
	}
	static class USQCompassBaseUnit* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCompassBaseUnit>();
	}
};
static_assert(alignof(USQCompassBaseUnit) == 0x000008, "Wrong alignment on USQCompassBaseUnit");
static_assert(sizeof(USQCompassBaseUnit) == 0x000270, "Wrong size on USQCompassBaseUnit");
static_assert(offsetof(USQCompassBaseUnit, BaseImage) == 0x000268, "Member 'USQCompassBaseUnit::BaseImage' has a wrong offset!");

// Class Squad.SQCompassMarker
// 0x0100 (0x0370 - 0x0270)
class USQCompassMarker : public USQCompassBaseUnit
{
public:
	bool                                          bTopScreenView;                                    // 0x0270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1001[0x3];                                     // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           MarkerColor;                                       // 0x0274(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1002[0x4];                                     // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DistanceResolutionCurveInMeters;                   // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQMapMarker*                           MapMarker;                                         // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQMapMarkerVisualData                 MapMarkerVisualData;                               // 0x0298(0x00C8)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UTextBlock*                             DistanceTextBlock;                                 // 0x0360(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             MeterTextBlock;                                    // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void InitWidget();
	void RefreshDisplayMode();
	void UpdateState(float InScale, bool bShowIcon);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCompassMarker">();
	}
	static class USQCompassMarker* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCompassMarker>();
	}
};
static_assert(alignof(USQCompassMarker) == 0x000008, "Wrong alignment on USQCompassMarker");
static_assert(sizeof(USQCompassMarker) == 0x000370, "Wrong size on USQCompassMarker");
static_assert(offsetof(USQCompassMarker, bTopScreenView) == 0x000270, "Member 'USQCompassMarker::bTopScreenView' has a wrong offset!");
static_assert(offsetof(USQCompassMarker, MarkerColor) == 0x000274, "Member 'USQCompassMarker::MarkerColor' has a wrong offset!");
static_assert(offsetof(USQCompassMarker, DistanceResolutionCurveInMeters) == 0x000288, "Member 'USQCompassMarker::DistanceResolutionCurveInMeters' has a wrong offset!");
static_assert(offsetof(USQCompassMarker, MapMarker) == 0x000290, "Member 'USQCompassMarker::MapMarker' has a wrong offset!");
static_assert(offsetof(USQCompassMarker, MapMarkerVisualData) == 0x000298, "Member 'USQCompassMarker::MapMarkerVisualData' has a wrong offset!");
static_assert(offsetof(USQCompassMarker, DistanceTextBlock) == 0x000360, "Member 'USQCompassMarker::DistanceTextBlock' has a wrong offset!");
static_assert(offsetof(USQCompassMarker, MeterTextBlock) == 0x000368, "Member 'USQCompassMarker::MeterTextBlock' has a wrong offset!");

// Class Squad.SQCompassMK2
// 0x00B8 (0x0340 - 0x0288)
class USQCompassMK2 : public USQCompass
{
public:
	class UCanvasPanel*                           MainP;                                             // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             CompassBearingText;                                // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreciseBearingMode;                               // 0x0298(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1004[0x7];                                     // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UImage*                                 LeftArrow;                                         // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 RightArrow;                                        // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTopScreenView;                                    // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1005[0x7];                                     // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CompassMID;                                        // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BearingMatParamName;                               // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerState*                         InitialPlayerState;                                // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MarkerYPositionOffset;                             // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1006[0x4];                                     // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USQCompassPlayer*>               TrackedSquadMatesWidgets;                          // 0x02D8(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DistanceCurve;                                     // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysShowSquadLeader;                            // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1007[0x7];                                     // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USQCompassMarker*>               TrackedMarkerWidgets;                              // 0x02F8(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<ESQMapMarkerType>                      MarkerTypesToTrack;                                // 0x0308(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         CompassEdgeFadePercentage;                         // 0x0318(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CompassEdgeMinFade;                                // 0x031C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MarkerBottomPosition;                              // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MarkerTopPosition;                                 // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQCompassPlayer>           CompassPlayerType;                                 // 0x0330(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class USQCompassMarker>           CompassMarkerType;                                 // 0x0338(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void CreateNewCompassMarker(const struct FSQMapMarkerVisualData& MapMarkerVisualData);
	void CreateNewMarker(int32 SquadId, class ASQMapMarker* Marker);
	void CreateSquadMateWidget(class ASQPlayerState* SquadMate);
	void InitWidget();
	void PlayerJoinedSquad(class ASQSquadState* Squad, class ASQPlayerState* PlayerState);
	void PlayerLeftSquad(class ASQSquadState* Squad, class ASQPlayerState* PlayerState);
	void RemoveCompassMarker(uint8 ID);
	void RemoveMarker(class AActor* DestroyedActor);
	void SquadChangedHandler(class ASQSquadState* NewSquad, class ASQSquadState* OldSquad, class ASQPlayerState* Player);
	void UpdateCompassBearing();
	void UpdateMarkerArrows();
	float UpdatePlayerWidgetTransform(bool* bShowIcon, class ASQSoldier* SoldierRef, class USQCompassPlayer* WidgetRef);
	void UpdateSquadMarkers();
	void UpdateSquadMembers();
	void UpdateVisibility();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCompassMK2">();
	}
	static class USQCompassMK2* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCompassMK2>();
	}
};
static_assert(alignof(USQCompassMK2) == 0x000008, "Wrong alignment on USQCompassMK2");
static_assert(sizeof(USQCompassMK2) == 0x000340, "Wrong size on USQCompassMK2");
static_assert(offsetof(USQCompassMK2, MainP) == 0x000288, "Member 'USQCompassMK2::MainP' has a wrong offset!");
static_assert(offsetof(USQCompassMK2, CompassBearingText) == 0x000290, "Member 'USQCompassMK2::CompassBearingText' has a wrong offset!");
static_assert(offsetof(USQCompassMK2, bPreciseBearingMode) == 0x000298, "Member 'USQCompassMK2::bPreciseBearingMode' has a wrong offset!");
static_assert(offsetof(USQCompassMK2, LeftArrow) == 0x0002A0, "Member 'USQCompassMK2::LeftArrow' has a wrong offset!");
static_assert(offsetof(USQCompassMK2, RightArrow) == 0x0002A8, "Member 'USQCompassMK2::RightArrow' has a wrong offset!");
static_assert(offsetof(USQCompassMK2, bTopScreenView) == 0x0002B0, "Member 'USQCompassMK2::bTopScreenView' has a wrong offset!");
static_assert(offsetof(USQCompassMK2, CompassMID) == 0x0002B8, "Member 'USQCompassMK2::CompassMID' has a wrong offset!");
static_assert(offsetof(USQCompassMK2, BearingMatParamName) == 0x0002C0, "Member 'USQCompassMK2::BearingMatParamName' has a wrong offset!");
static_assert(offsetof(USQCompassMK2, InitialPlayerState) == 0x0002C8, "Member 'USQCompassMK2::InitialPlayerState' has a wrong offset!");
static_assert(offsetof(USQCompassMK2, MarkerYPositionOffset) == 0x0002D0, "Member 'USQCompassMK2::MarkerYPositionOffset' has a wrong offset!");
static_assert(offsetof(USQCompassMK2, TrackedSquadMatesWidgets) == 0x0002D8, "Member 'USQCompassMK2::TrackedSquadMatesWidgets' has a wrong offset!");
static_assert(offsetof(USQCompassMK2, DistanceCurve) == 0x0002E8, "Member 'USQCompassMK2::DistanceCurve' has a wrong offset!");
static_assert(offsetof(USQCompassMK2, bAlwaysShowSquadLeader) == 0x0002F0, "Member 'USQCompassMK2::bAlwaysShowSquadLeader' has a wrong offset!");
static_assert(offsetof(USQCompassMK2, TrackedMarkerWidgets) == 0x0002F8, "Member 'USQCompassMK2::TrackedMarkerWidgets' has a wrong offset!");
static_assert(offsetof(USQCompassMK2, MarkerTypesToTrack) == 0x000308, "Member 'USQCompassMK2::MarkerTypesToTrack' has a wrong offset!");
static_assert(offsetof(USQCompassMK2, CompassEdgeFadePercentage) == 0x000318, "Member 'USQCompassMK2::CompassEdgeFadePercentage' has a wrong offset!");
static_assert(offsetof(USQCompassMK2, CompassEdgeMinFade) == 0x00031C, "Member 'USQCompassMK2::CompassEdgeMinFade' has a wrong offset!");
static_assert(offsetof(USQCompassMK2, MarkerBottomPosition) == 0x000320, "Member 'USQCompassMK2::MarkerBottomPosition' has a wrong offset!");
static_assert(offsetof(USQCompassMK2, MarkerTopPosition) == 0x000328, "Member 'USQCompassMK2::MarkerTopPosition' has a wrong offset!");
static_assert(offsetof(USQCompassMK2, CompassPlayerType) == 0x000330, "Member 'USQCompassMK2::CompassPlayerType' has a wrong offset!");
static_assert(offsetof(USQCompassMK2, CompassMarkerType) == 0x000338, "Member 'USQCompassMK2::CompassMarkerType' has a wrong offset!");

// Class Squad.SQGameCommandComponent
// 0x0100 (0x01B0 - 0x00B0)
class USQGameCommandComponent final : public UActorComponent
{
public:
	uint8                                         Pad_100B[0x100];                                   // 0x00B0(0x0100)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleVoteResult_Vote(class USQVoteSession* VoteSession, const struct FSQChoice& Winner);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGameCommandComponent">();
	}
	static class USQGameCommandComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQGameCommandComponent>();
	}
};
static_assert(alignof(USQGameCommandComponent) == 0x000008, "Wrong alignment on USQGameCommandComponent");
static_assert(sizeof(USQGameCommandComponent) == 0x0001B0, "Wrong size on USQGameCommandComponent");

// Class Squad.SQCompassPlayer
// 0x0078 (0x02E8 - 0x0270)
class USQCompassPlayer : public USQCompassBaseUnit
{
public:
	class UImage*                                 MedicIcon;                                         // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorHealthy;                                      // 0x0278(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorWounded;                                      // 0x0288(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorDown;                                         // 0x0298(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorInvisible;                                    // 0x02A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             TexturePlayer;                                     // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             TextureSL;                                         // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             TextureMedic;                                      // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerIconScale;                                   // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SLPlayerIconScale;                                 // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MedicPlayerIconScale;                              // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MedicIconScale;                                    // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerState*                         PlayerState;                                       // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void InitWidget();
	void UpdateState(float InScale, bool bShowIcon, int32 HealthStateIndex, bool bIsMedic, bool bIsSL, bool bIsOwnderMedic);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCompassPlayer">();
	}
	static class USQCompassPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCompassPlayer>();
	}
};
static_assert(alignof(USQCompassPlayer) == 0x000008, "Wrong alignment on USQCompassPlayer");
static_assert(sizeof(USQCompassPlayer) == 0x0002E8, "Wrong size on USQCompassPlayer");
static_assert(offsetof(USQCompassPlayer, MedicIcon) == 0x000270, "Member 'USQCompassPlayer::MedicIcon' has a wrong offset!");
static_assert(offsetof(USQCompassPlayer, ColorHealthy) == 0x000278, "Member 'USQCompassPlayer::ColorHealthy' has a wrong offset!");
static_assert(offsetof(USQCompassPlayer, ColorWounded) == 0x000288, "Member 'USQCompassPlayer::ColorWounded' has a wrong offset!");
static_assert(offsetof(USQCompassPlayer, ColorDown) == 0x000298, "Member 'USQCompassPlayer::ColorDown' has a wrong offset!");
static_assert(offsetof(USQCompassPlayer, ColorInvisible) == 0x0002A8, "Member 'USQCompassPlayer::ColorInvisible' has a wrong offset!");
static_assert(offsetof(USQCompassPlayer, TexturePlayer) == 0x0002B8, "Member 'USQCompassPlayer::TexturePlayer' has a wrong offset!");
static_assert(offsetof(USQCompassPlayer, TextureSL) == 0x0002C0, "Member 'USQCompassPlayer::TextureSL' has a wrong offset!");
static_assert(offsetof(USQCompassPlayer, TextureMedic) == 0x0002C8, "Member 'USQCompassPlayer::TextureMedic' has a wrong offset!");
static_assert(offsetof(USQCompassPlayer, PlayerIconScale) == 0x0002D0, "Member 'USQCompassPlayer::PlayerIconScale' has a wrong offset!");
static_assert(offsetof(USQCompassPlayer, SLPlayerIconScale) == 0x0002D4, "Member 'USQCompassPlayer::SLPlayerIconScale' has a wrong offset!");
static_assert(offsetof(USQCompassPlayer, MedicPlayerIconScale) == 0x0002D8, "Member 'USQCompassPlayer::MedicPlayerIconScale' has a wrong offset!");
static_assert(offsetof(USQCompassPlayer, MedicIconScale) == 0x0002DC, "Member 'USQCompassPlayer::MedicIconScale' has a wrong offset!");
static_assert(offsetof(USQCompassPlayer, PlayerState) == 0x0002E0, "Member 'USQCompassPlayer::PlayerState' has a wrong offset!");

// Class Squad.SQConfig
// 0x04F8 (0x0520 - 0x0028)
class USQConfig final : public UObject
{
public:
	bool                                          ConfigLoaded;                                      // 0x0028(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNightTimeLoaded;                                  // 0x0029(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_100E[0x6];                                     // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnConfigLoaded;                                    // 0x0030(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_100F[0x4E0];                                   // 0x0040(0x04E0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQConfig">();
	}
	static class USQConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQConfig>();
	}
};
static_assert(alignof(USQConfig) == 0x000008, "Wrong alignment on USQConfig");
static_assert(sizeof(USQConfig) == 0x000520, "Wrong size on USQConfig");
static_assert(offsetof(USQConfig, ConfigLoaded) == 0x000028, "Member 'USQConfig::ConfigLoaded' has a wrong offset!");
static_assert(offsetof(USQConfig, bNightTimeLoaded) == 0x000029, "Member 'USQConfig::bNightTimeLoaded' has a wrong offset!");
static_assert(offsetof(USQConfig, OnConfigLoaded) == 0x000030, "Member 'USQConfig::OnConfigLoaded' has a wrong offset!");

// Class Squad.SQGameViewportClient
// 0x0010 (0x0370 - 0x0360)
class USQGameViewportClient final : public UGameViewportClient
{
public:
	uint8                                         Pad_1010[0x10];                                    // 0x0360(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGameViewportClient">();
	}
	static class USQGameViewportClient* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQGameViewportClient>();
	}
};
static_assert(alignof(USQGameViewportClient) == 0x000008, "Wrong alignment on USQGameViewportClient");
static_assert(sizeof(USQGameViewportClient) == 0x000370, "Wrong size on USQGameViewportClient");

// Class Squad.SQConsole
// 0x0020 (0x0150 - 0x0130)
class USQConsole final : public UConsole
{
public:
	ESQConsoleMessageType                         MessageType;                                       // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1011[0x7];                                     // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CustomMessage;                                     // 0x0138(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastMessageTime;                                   // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1012[0x4];                                     // 0x014C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQConsole">();
	}
	static class USQConsole* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQConsole>();
	}
};
static_assert(alignof(USQConsole) == 0x000008, "Wrong alignment on USQConsole");
static_assert(sizeof(USQConsole) == 0x000150, "Wrong size on USQConsole");
static_assert(offsetof(USQConsole, MessageType) == 0x000130, "Member 'USQConsole::MessageType' has a wrong offset!");
static_assert(offsetof(USQConsole, CustomMessage) == 0x000138, "Member 'USQConsole::CustomMessage' has a wrong offset!");
static_assert(offsetof(USQConsole, LastMessageTime) == 0x000148, "Member 'USQConsole::LastMessageTime' has a wrong offset!");

// Class Squad.SQConsoleVariablesComponent
// 0x0050 (0x0100 - 0x00B0)
class USQConsoleVariablesComponent final : public UActorComponent
{
public:
	uint8                                         Pad_1013[0x50];                                    // 0x00B0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQConsoleVariablesComponent">();
	}
	static class USQConsoleVariablesComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQConsoleVariablesComponent>();
	}
};
static_assert(alignof(USQConsoleVariablesComponent) == 0x000008, "Wrong alignment on USQConsoleVariablesComponent");
static_assert(sizeof(USQConsoleVariablesComponent) == 0x000100, "Wrong size on USQConsoleVariablesComponent");

// Class Squad.SQConstructionResource
// 0x0000 (0x0260 - 0x0260)
class ASQConstructionResource : public ASQVehicleResource
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQConstructionResource">();
	}
	static class ASQConstructionResource* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQConstructionResource>();
	}
};
static_assert(alignof(ASQConstructionResource) == 0x000008, "Wrong alignment on ASQConstructionResource");
static_assert(sizeof(ASQConstructionResource) == 0x000260, "Wrong size on ASQConstructionResource");

// Class Squad.SQGameSession
// 0x02E8 (0x0528 - 0x0240)
class ASQGameSession final : public AGameSession
{
public:
	uint8                                         Pad_1014[0x188];                                   // 0x0240(0x0188)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumPlayersDiffForTeamChanges;                      // 0x03C8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowTeamChanges;                                 // 0x03CC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreventTeamChangeIfUnbalanced;                    // 0x03CD(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1015[0xDA];                                    // 0x03CE(0x00DA)(Fixing Size After Last Property [ Dumper-7 ])
	class USQConfig*                              SquadConfig;                                       // 0x04A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1016[0x78];                                    // 0x04B0(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FString GetLastLoginError();
	bool IsLoggedIn();
	bool IsLoginBusy();
	bool Login(const class FString& LoginName, const class FString& InPassword);
	bool Logout();
	void OnServerLicenseValidated(bool bIsValidLicense);
	void SetMaxNumPlayers(int32 NumPlayers, bool bIgnoreRestrictions);
	void SetNumReservedSlots(int32 NumReserved);
	void SetPublicQueueLimit(int64 PublicQueueLimit);
	void SetServerPassword(const class FString& ServerPassword);

	class USQConfig* GetSquadConfig() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGameSession">();
	}
	static class ASQGameSession* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQGameSession>();
	}
};
static_assert(alignof(ASQGameSession) == 0x000008, "Wrong alignment on ASQGameSession");
static_assert(sizeof(ASQGameSession) == 0x000528, "Wrong size on ASQGameSession");
static_assert(offsetof(ASQGameSession, NumPlayersDiffForTeamChanges) == 0x0003C8, "Member 'ASQGameSession::NumPlayersDiffForTeamChanges' has a wrong offset!");
static_assert(offsetof(ASQGameSession, bAllowTeamChanges) == 0x0003CC, "Member 'ASQGameSession::bAllowTeamChanges' has a wrong offset!");
static_assert(offsetof(ASQGameSession, bPreventTeamChangeIfUnbalanced) == 0x0003CD, "Member 'ASQGameSession::bPreventTeamChangeIfUnbalanced' has a wrong offset!");
static_assert(offsetof(ASQGameSession, SquadConfig) == 0x0004A8, "Member 'ASQGameSession::SquadConfig' has a wrong offset!");

// Class Squad.SQCoreStateComponent
// 0x0038 (0x00E8 - 0x00B0)
class USQCoreStateComponent final : public UActorComponent
{
public:
	TSubclassOf<class USQCoreStateData>           DataClass;                                         // 0x00B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1019[0x8];                                     // 0x00B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USQCoreStateData*                       DataObject;                                        // 0x00C0(0x0008)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class USQCoreStateConnection*>         Connections;                                       // 0x00C8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_101A[0x10];                                    // 0x00D8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnConnectionCreate(class USQCoreStateConnection* Connection);
	void OnRep_DataObject(class USQCoreStateData* PrevDataObject);
	void ServerConfigure();
	void ServerSetIsVisible(const bool bValue);

	struct FSQCoreStateId GetId() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCoreStateComponent">();
	}
	static class USQCoreStateComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCoreStateComponent>();
	}
};
static_assert(alignof(USQCoreStateComponent) == 0x000008, "Wrong alignment on USQCoreStateComponent");
static_assert(sizeof(USQCoreStateComponent) == 0x0000E8, "Wrong size on USQCoreStateComponent");
static_assert(offsetof(USQCoreStateComponent, DataClass) == 0x0000B0, "Member 'USQCoreStateComponent::DataClass' has a wrong offset!");
static_assert(offsetof(USQCoreStateComponent, DataObject) == 0x0000C0, "Member 'USQCoreStateComponent::DataObject' has a wrong offset!");
static_assert(offsetof(USQCoreStateComponent, Connections) == 0x0000C8, "Member 'USQCoreStateComponent::Connections' has a wrong offset!");

// Class Squad.SQCoreStateConnection
// 0x0070 (0x0120 - 0x00B0)
class USQCoreStateConnection final : public UActorComponent
{
public:
	uint8                                         Pad_101B[0x10];                                    // 0x00B0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USQCoreStateComponent*>          ComponentList;                                     // 0x00C0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<class UActorChannel*, struct FSQCoreStateDataToIdMap> RemovedDataLists;                                  // 0x00D0(0x0050)(NativeAccessSpecifierPrivate)

public:
	void OnComponentObtainedId(class USQCoreStateComponent* Component);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCoreStateConnection">();
	}
	static class USQCoreStateConnection* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCoreStateConnection>();
	}
};
static_assert(alignof(USQCoreStateConnection) == 0x000008, "Wrong alignment on USQCoreStateConnection");
static_assert(sizeof(USQCoreStateConnection) == 0x000120, "Wrong size on USQCoreStateConnection");
static_assert(offsetof(USQCoreStateConnection, ComponentList) == 0x0000C0, "Member 'USQCoreStateConnection::ComponentList' has a wrong offset!");
static_assert(offsetof(USQCoreStateConnection, RemovedDataLists) == 0x0000D0, "Member 'USQCoreStateConnection::RemovedDataLists' has a wrong offset!");

// Class Squad.SQGraphVisualizerComponent
// 0x0010 (0x00C0 - 0x00B0)
class USQGraphVisualizerComponent : public UActorComponent
{
public:
	bool                                          bShowDebugInfo;                                    // 0x00B0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101C[0x3];                                     // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebugNodeRadius;                                   // 0x00B4(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugNodeHeightOffset;                             // 0x00B8(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DebugLineHeightOffset;                             // 0x00BC(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void UpdateDesignLinks();

	void Draw() const;
	void DrawLink(const class USQGraphNodeComponent* NodeA, const class USQGraphNodeComponent* NodeB, const struct FColor& LinkColor) const;
	void DrawNode(class USQGraphNodeComponent* Node, const struct FColor& Color) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGraphVisualizerComponent">();
	}
	static class USQGraphVisualizerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQGraphVisualizerComponent>();
	}
};
static_assert(alignof(USQGraphVisualizerComponent) == 0x000008, "Wrong alignment on USQGraphVisualizerComponent");
static_assert(sizeof(USQGraphVisualizerComponent) == 0x0000C0, "Wrong size on USQGraphVisualizerComponent");
static_assert(offsetof(USQGraphVisualizerComponent, bShowDebugInfo) == 0x0000B0, "Member 'USQGraphVisualizerComponent::bShowDebugInfo' has a wrong offset!");
static_assert(offsetof(USQGraphVisualizerComponent, DebugNodeRadius) == 0x0000B4, "Member 'USQGraphVisualizerComponent::DebugNodeRadius' has a wrong offset!");
static_assert(offsetof(USQGraphVisualizerComponent, DebugNodeHeightOffset) == 0x0000B8, "Member 'USQGraphVisualizerComponent::DebugNodeHeightOffset' has a wrong offset!");
static_assert(offsetof(USQGraphVisualizerComponent, DebugLineHeightOffset) == 0x0000BC, "Member 'USQGraphVisualizerComponent::DebugLineHeightOffset' has a wrong offset!");

// Class Squad.SQGraphAASVisualizerComponent
// 0x0000 (0x00C0 - 0x00C0)
class USQGraphAASVisualizerComponent : public USQGraphVisualizerComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGraphAASVisualizerComponent">();
	}
	static class USQGraphAASVisualizerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQGraphAASVisualizerComponent>();
	}
};
static_assert(alignof(USQGraphAASVisualizerComponent) == 0x000008, "Wrong alignment on USQGraphAASVisualizerComponent");
static_assert(sizeof(USQGraphAASVisualizerComponent) == 0x0000C0, "Wrong size on USQGraphAASVisualizerComponent");

// Class Squad.SQCoreStateConnectionActor
// 0x0008 (0x0230 - 0x0228)
class ASQCoreStateConnectionActor final : public AInfo
{
public:
	class USQCoreStateConnection*                 StateConnection;                                   // 0x0228(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCoreStateConnectionActor">();
	}
	static class ASQCoreStateConnectionActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQCoreStateConnectionActor>();
	}
};
static_assert(alignof(ASQCoreStateConnectionActor) == 0x000008, "Wrong alignment on ASQCoreStateConnectionActor");
static_assert(sizeof(ASQCoreStateConnectionActor) == 0x000230, "Wrong size on ASQCoreStateConnectionActor");
static_assert(offsetof(ASQCoreStateConnectionActor, StateConnection) == 0x000228, "Member 'ASQCoreStateConnectionActor::StateConnection' has a wrong offset!");

// Class Squad.SQGameUserSettings
// 0x1030 (0x1150 - 0x0120)
class alignas(0x10) USQGameUserSettings final : public UGameUserSettings
{
public:
	uint8                                         Pad_101F[0x18];                                    // 0x0120(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsRHIDX12;                                        // 0x0138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1020[0x7];                                     // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerNamePrefix;                                  // 0x0140(0x0010)(BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NameTagOpacity;                                    // 0x0150(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NameTagScale;                                      // 0x0154(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowNameTagText;                                  // 0x0158(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysShowFTLMarker;                              // 0x0159(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowNameTagKit;                                   // 0x015A(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClientAutoRecord;                                 // 0x015B(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberAutoRecordedGames;                           // 0x015C(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAAEnabled;                                      // 0x0160(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1021[0x3];                                     // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LastSavedScopeClarityMode;                         // 0x0164(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPlayerADSWithScopeClarityOn;                    // 0x0168(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1022[0x3];                                     // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LastSavedAASamples;                                // 0x016C(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastSavedAAQuality;                                // 0x0170(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertedYAxis;                                    // 0x0174(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableMouseSmoothing;                             // 0x0175(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeyboardHighlight;                                // 0x0176(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1023[0x1];                                     // 0x0177(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ControlsPresetName;                                // 0x0178(0x0018)(BlueprintVisible, Config, NativeAccessSpecifierPublic)
	bool                                          bUseMenuToolTips;                                  // 0x0190(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRadialMenuToolTips;                            // 0x0191(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseInGameHelp;                                    // 0x0192(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1024[0x5];                                     // 0x0193(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQInt32CVarSetting                    HZBOcclusion;                                      // 0x0198(0x0040)(BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FSQInt32CVarSetting                    TextureStreamPoolSizeStorage;                      // 0x01D8(0x0040)(BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnBenchmarkComplete;                               // 0x0218(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bCompassBackgroundEnabled;                         // 0x0228(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCompassTopViewEnabled;                            // 0x0229(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1025[0x2];                                     // 0x022A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FOV;                                               // 0x022C(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWeaponModelBlurDisabled;                          // 0x0230(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1026[0x3];                                     // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GlobalSensitivity;                                 // 0x0234(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteadyAimSensitivity;                              // 0x0238(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DoubleKeyPressTime;                                // 0x023C(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1027[0x8];                                     // 0x0240(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQInt32CVarSetting                    Tessellation;                                      // 0x0248(0x0040)(BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FSQInt32CVarSetting                    TessellationMode;                                  // 0x0288(0x0040)(BlueprintVisible, Config, NativeAccessSpecifierPublic)
	ESQToggleType                                 CrouchMode;                                        // 0x02C8(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQToggleType                                 ADSMode;                                           // 0x02C9(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQToggleType                                 LeanMode;                                          // 0x02CA(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQToggleType                                 FreelookMode;                                      // 0x02CB(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQToggleType                                 SprintMode;                                        // 0x02CC(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1028[0x3];                                     // 0x02CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FreelookSensitivitySliderValue;                    // 0x02D0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FreelookSensitivity;                               // 0x02D4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHelicopterInvertMousePitch;                       // 0x02D8(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1029[0x3];                                     // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HelicopterPitchSensitivitySliderValue;             // 0x02DC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HelicopterPitchSensitivity;                        // 0x02E0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HelicopterRollSensitivitySliderValue;              // 0x02E4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUncapTexturePoolSize;                             // 0x02E8(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_102A[0x3];                                     // 0x02E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HelicopterRollSensitivity;                         // 0x02EC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalSensitivitySliderValue;                      // 0x02F0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SteadyAimSensitivitySliderValue;                   // 0x02F4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoldierSensitivitySliderValue;                     // 0x02F8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoldierSensitivity;                                // 0x02FC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<float, float>                            SoldierZoomSensitivities;                          // 0x0300(0x0050)(BlueprintVisible, Config, NativeAccessSpecifierPublic)
	float                                         VehicleSensitivitySliderValue;                     // 0x0350(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VehicleSensitivity;                                // 0x0354(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PostFX_Brightness;                                 // 0x0358(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PostFX_BrightnessSliderValue;                      // 0x035C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PostFX_Contrast;                                   // 0x0360(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PostFX_ContrastSliderValue;                        // 0x0364(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PostFX_Saturation;                                 // 0x0368(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PostFX_SaturationSliderValue;                      // 0x036C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQFloatCVarSetting                    ScopeResolutionScale;                              // 0x0370(0x0040)(BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)
	struct FSQInt32CVarSetting                    ScopeUpdateRate;                                   // 0x03B0(0x0040)(BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)
	struct FSQScalabilitySetting                  ShadowQuality;                                     // 0x03F0(0x0058)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSQInt32CVarSetting                    ContactShadows;                                    // 0x0448(0x0040)(BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FSQScalabilitySetting                  FoliageQuality;                                    // 0x0488(0x0058)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSQInt32CVarSetting                    FoliageMinLOD;                                     // 0x04E0(0x0040)(BlueprintVisible, Config, NativeAccessSpecifierPublic)
	TMap<float, float>                            VehicleZoomSensitivitiesSliderValues;              // 0x0520(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<float, float>                            VehicleZoomSensitivities;                          // 0x0570(0x0050)(Config, NativeAccessSpecifierPublic)
	bool                                          bFreelookRecentersWeapon;                          // 0x05C0(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJumpCausesUnCrouch;                               // 0x05C1(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bJumpCausesUnProne;                                // 0x05C2(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDoubleTapWalkingEnabled;                        // 0x05C3(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_102B[0x4];                                     // 0x05C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         FavoriteServersList;                               // 0x05C8(0x0010)(BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FString>                         RecentServersList;                                 // 0x05D8(0x0010)(BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                          bShowDiffVerServers;                               // 0x05E8(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowEmptyServers;                                 // 0x05E9(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowQueuesSeparately;                             // 0x05EA(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowReservedSlots;                                // 0x05EB(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowFullServers;                                  // 0x05EC(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowModdedServers;                                // 0x05ED(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowWhitelistedMods;                              // 0x05EE(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowLicensedServers;                              // 0x05EF(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FilterMaxPing;                                     // 0x05F0(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MenuFrameRateLimit;                                // 0x05F4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           BrowserSearchTags;                                 // 0x05F8(0x0010)(BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	int32                                         QPMaxPing;                                         // 0x0608(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bQPShowFullServers;                                // 0x060C(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bQPShowEmptyServers;                               // 0x060D(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bQPShowModdedServers;                              // 0x060E(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bQPSimpleSearch;                                   // 0x060F(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bQPDiffVer;                                        // 0x0610(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_102C[0x3];                                     // 0x0611(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         QPMinPlayers;                                      // 0x0614(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QPPreferedLanguage;                                // 0x0618(0x0010)(BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QPElapsedTime;                                     // 0x0628(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QPElapsedTimeMax;                                  // 0x062C(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           QPGameModes;                                       // 0x0630(0x0010)(BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FName>                           QPSearchTags;                                      // 0x0640(0x0010)(BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	struct FSQInt32CVarSetting                    AmbientOcclusion;                                  // 0x0650(0x0040)(BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FSQInt32CVarSetting                    ShadowFilterMethod;                                // 0x0690(0x0040)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         GraphicsQuality;                                   // 0x06D0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_102D[0x4];                                     // 0x06D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQScalabilitySetting                  ResolutionQuality;                                 // 0x06D8(0x0058)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSQFloatCVarSetting                    ScreenSharpening;                                  // 0x0730(0x0040)(BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FSQInt32CVarSetting                    ScreenPercentage;                                  // 0x0770(0x0040)(BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FSQFloatCVarSetting                    MotionBlurAmount;                                  // 0x07B0(0x0040)(BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FSQInt32CVarSetting                    LensFlareQuality;                                  // 0x07F0(0x0040)(BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FSQInt32CVarSetting                    AutoExposure;                                      // 0x0830(0x0040)(BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FSQInt32CVarSetting                    AntiAliasingMode;                                  // 0x0870(0x0040)(BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FSQInt32CVarSetting                    ScopeClarityMode;                                  // 0x08B0(0x0040)(BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FSQInt32CVarSetting                    MaterialQuality;                                   // 0x08F0(0x0040)(BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FSQInt32CVarSetting                    TemporalAASamples;                                 // 0x0930(0x0040)(BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FSQFloatCVarSetting                    TemporalAACurrentFrameWeight;                      // 0x0970(0x0040)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSQInt32CVarSetting                    UpscaleMode;                                       // 0x09B0(0x0040)(BlueprintVisible, Config, NativeAccessSpecifierPublic)
	EUDLSSMode                                    DLSSMode;                                          // 0x09F0(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_102E[0x3];                                     // 0x09F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DLSSSharpness;                                     // 0x09F4(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUStreamlineDLSSGMode                         DLSSFrameGenerationMode;                           // 0x09F8(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUStreamlineReflexMode                        ReflexMode;                                        // 0x09F9(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_102F[0x6];                                     // 0x09FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQInt32CVarSetting                    FSR2Mode;                                          // 0x0A00(0x0040)(BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FSQInt32CVarSetting                    FSR2Quality;                                       // 0x0A40(0x0040)(BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FSQInt32CVarSetting                    XeSSEnabled;                                       // 0x0A80(0x0040)(BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FSQInt32CVarSetting                    XeSSQuality;                                       // 0x0AC0(0x0040)(BlueprintVisible, Config, NativeAccessSpecifierPublic)
	TArray<int32>                                 GPUThresholdScores;                                // 0x0B00(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<int32>                                 CPUThresholdScores;                                // 0x0B10(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	struct FSQFloatCVarSetting                    FSR2Sharpness;                                     // 0x0B20(0x0040)(BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FSQScalabilitySetting                  CustomQuality;                                     // 0x0B60(0x0058)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSQScalabilitySetting                  AntiAliasingQuality;                               // 0x0BB8(0x0058)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSQScalabilitySetting                  PostProcessQuality;                                // 0x0C10(0x0058)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSQScalabilitySetting                  EffectsQuality;                                    // 0x0C68(0x0058)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSQScalabilitySetting                  TextureQuality;                                    // 0x0CC0(0x0058)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSQScalabilitySetting                  ViewDistanceQuality;                               // 0x0D18(0x0058)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSQInt32CVarSetting                    OceanQuality;                                      // 0x0D70(0x0040)(BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FSQInt32CVarSetting                    WakeSim;                                           // 0x0DB0(0x0040)(BlueprintVisible, Config, NativeAccessSpecifierPublic)
	struct FSQInt32CVarSetting                    SkeletalMeshLODBias;                               // 0x0DF0(0x0040)(BlueprintVisible, Config, NativeAccessSpecifierPublic)
	float                                         VehicleSkeletalMeshOptimizationLevel;              // 0x0E30(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoldierSkeletalMeshOptimizationLevel;              // 0x0E34(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQInt32CVarSetting                    MaxAnisotropy;                                     // 0x0E38(0x0040)(BlueprintVisible, Config, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class USQEmotesData>>   EquippedEmotes;                                    // 0x0E78(0x0010)(BlueprintVisible, ZeroConstructor, Config, UObjectWrapper, NativeAccessSpecifierPublic)
	class USQEmotesData*                          TemporarilyHeldEmote;                              // 0x0E88(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UODKBazaarBundle>> ViewedBundles;                                     // 0x0E90(0x0010)(BlueprintVisible, ZeroConstructor, Config, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class USQEmotesData>>   ViewedEmotes;                                      // 0x0EA0(0x0010)(BlueprintVisible, ZeroConstructor, Config, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class USQItemSkinCollection>> ViewedWeaponSkins;                                 // 0x0EB0(0x0010)(BlueprintVisible, ZeroConstructor, Config, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         MasterVolume;                                      // 0x0EC0(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectsVolume;                                     // 0x0EC4(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UIVolume;                                          // 0x0EC8(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MusicVolume;                                       // 0x0ECC(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SquadVoiceVolume;                                  // 0x0ED0(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VoiceSide;                                         // 0x0ED4(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyVoiceRadioFilter;                            // 0x0ED8(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyBiasWhileNonLeader;                          // 0x0ED9(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1030[0x1];                                     // 0x0EDA(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bPlaySquadVOIPSounds;                              // 0x0EDB(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayCommandVOIPSounds;                            // 0x0EDC(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1031[0x3];                                     // 0x0EDD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LocalVoIPVolume;                                   // 0x0EE0(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CommandVoIPVolume;                                 // 0x0EE4(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CommandVoIPSide;                                   // 0x0EE8(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeaderVoipDucking;                                 // 0x0EEC(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBoolIniConfigSetting                  RendererConfig;                                    // 0x0EF0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<ESQJoyStickControls, struct FSQJoyStickConfig> JoyStickConfigurations;                            // 0x0F40(0x0050)(Config, NativeAccessSpecifierPublic)
	bool                                          bAlwaysFreeLook;                                   // 0x0F90(0x0001)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1032[0x3];                                     // 0x0F91(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UnfocusedVolumeMultiplier;                         // 0x0F94(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxImpactEffectDecalLifeSpan;                      // 0x0F98(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1033[0x4];                                     // 0x0F9C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQOnlineInventorySetting>      InventorySettings;                                 // 0x0FA0(0x0010)(BlueprintVisible, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TMap<class FName, struct FSQSkinArray>        EquippedSkins;                                     // 0x0FB0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)
	struct FSQInt32CVarSetting                    TextureStreaming;                                  // 0x1000(0x0040)(BlueprintVisible, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnGameUserSettingsChanged;                         // 0x1040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1034[0x10];                                    // 0x1050(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StreamerModeMask;                                  // 0x1060(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1035[0x1];                                     // 0x1064(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsLanMatch;                                       // 0x1065(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1036[0x2];                                     // 0x1066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        SquadIncrementalVersion;                           // 0x1068(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint32                                        SquadSettingsVersion;                              // 0x106C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1037[0xE0];                                    // 0x1070(0x00E0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class FString EnumToString(EUpscaleMode InUpscaleMode);
	static const float GetFloatFromConfig(const class FString& SectionName, int32 Level, const class FString& CVar);
	static const int32 GetInt32FromConfig(const class FString& SectionName, int32 Level, const class FString& CVar);
	static float ReadFloatSetting(const struct FSQFloatCVarSetting& InSetting);
	static int32 ReadIntSetting(const struct FSQInt32CVarSetting& InSetting);

	void BenchmarkGraphicsSettings(bool bApplyPostBenchmark);
	void BlueprintApplySettings(bool bCheckForCommandLineOverrides);
	const TArray<int32> BlueprintGetBasicGraphicsSettings();
	int32 BlueprintGetFullscreenMode();
	struct FIntPoint BlueprintGetScreenResolution();
	bool BlueprintGetVSync();
	void BlueprintResetLocalAppdata();
	void BlueprintResetToCurrentSettings();
	void BlueprintSetFullscreenMode(int32 InFullscreenMode);
	void BlueprintSetGameToDefaults();
	void BlueprintSetGraphicsToDefaults();
	void BlueprintSetKeysToDefaults();
	void BlueprintSetPoolSize(int32 InTextureQuality);
	void BlueprintSetScreenResolution(const struct FIntPoint& Resolution);
	void BlueprintSetSoundsToDefaults();
	void BlueprintSetToDefaults();
	void BlueprintSetVSync(bool bEnable);
	void ChangeFloatSetting(struct FSQFloatCVarSetting& InSetting, float Value);
	void ChangeIntSetting(struct FSQInt32CVarSetting& InSetting, int32 Value);
	void ChangeSetting(struct FSQCVarSetting& InSetting, const class FString& Value);
	void ChangeSettingOfName(const class FName& CVarSettingName, const class FString& Value);
	bool DeleteKeybindsBackup(const class FString& Filename);
	void GetActiveAudioInputDevice(class FString* OutCurrentDevice);
	void GetAvailableAudioOutputDevice(TArray<class FString>* OutAvailableDevice, class FString* OutCurrentDevice);
	TSoftObjectPtr<class USQEmotesData> GetEmoteAtIndex(int32 Param_Index);
	const struct FSQJoyStickConfig GetJoyConfig(ESQJoyStickControls Control);
	int32 GetQualityFromLastBenchmark();
	int32 GetTexturePoolSize();
	int32 GetTexturePoolUsage();
	int32 GetTotalVRAMCapacity();
	EUpscaleMode GetUpscaleMode();
	bool IsDLSSGFeatureEnabled();
	bool IsSteamItemEnabled(int32 ItemId);
	bool IsUsingCustomSettings();
	bool LoadBackupKeyBinds(const class FString& Filename);
	void OverrideTemporalFrameWeight(float Value, bool bOverride);
	const class FString ReadCVarSetting(const class FName& CVarSettingName);
	bool SaveBackupKeyBinds(const class FString& Filename);
	void SetActiveAudioInputDevice(const class FString& InDevice);
	void SetActiveAudioOutputDevice(const class FString& InDevice);
	void SetDLSSFrameGenerationMode(EUStreamlineDLSSGMode DLSSGMode);
	void SetDLSSMode(EUDLSSMode Param_DLSSMode);
	void SetDLSSSharpness(float Sharpness);
	void SetEffectsQuality(int32 Param_EffectsQuality);
	void SetGraphicsQuality(int32 InGraphicsQuality);
	void SetGraphicsSliderValues();
	void SetJoyConfig(const ESQJoyStickControls Control, const struct FSQJoyStickConfig& Config);
	void SetMenuFrameRateLimit(float NewLimit);
	void SetPostProcessQuality(int32 InPostProcessQuality);
	void SetReflexMode(EUStreamlineReflexMode InReflexMode);
	void SetResolutionQuality(int32 Param_ResolutionQuality);
	void SetScopeClarity(const int32 Value);
	void SetScopeResolutionScale(const float Value);
	void SetScopeUpdateRate(const int32 Value);
	void SetSteamItemEnabled(int32 ItemId, bool bEnabled);
	void SetUpscaleMode(const EUpscaleMode InUpscaleMode);
	void SetUseDX12(bool bUse);
	void SetXeSSQuality(const int32 InXeSSQuality);
	void ToggleAntiAliasingMode(const bool bEnable);
	void ToggleDLSSDependantSettings(bool bDLSSEnabled);
	void ToggleFSR2(const bool bEnable);
	void ToggleStreamerModeEnabledForLevel(ESQStreamerModeLevel Level);
	void ToggleXeSS(const bool bEnable);

	bool GetIsUsingDX12() const;
	float GetMenuFrameRateLimit() const;
	bool GetStreamerModeEnabledForLevel(ESQStreamerModeLevel Level) const;
	bool GetWeaponModelBlurDisabled() const;
	bool IsServerFiltersDefault() const;
	int32 ProcessBenchmarkScore(const int32 LastBenchmarkScore, const TArray<int32>& Thresholds) const;
	int32 UpdateQualityBasedOnGraphicsQuality(const int32 InBaseQuality, const int32 InGraphicsQuality) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGameUserSettings">();
	}
	static class USQGameUserSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQGameUserSettings>();
	}
};
static_assert(alignof(USQGameUserSettings) == 0x000010, "Wrong alignment on USQGameUserSettings");
static_assert(sizeof(USQGameUserSettings) == 0x001150, "Wrong size on USQGameUserSettings");
static_assert(offsetof(USQGameUserSettings, bIsRHIDX12) == 0x000138, "Member 'USQGameUserSettings::bIsRHIDX12' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, PlayerNamePrefix) == 0x000140, "Member 'USQGameUserSettings::PlayerNamePrefix' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, NameTagOpacity) == 0x000150, "Member 'USQGameUserSettings::NameTagOpacity' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, NameTagScale) == 0x000154, "Member 'USQGameUserSettings::NameTagScale' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bShowNameTagText) == 0x000158, "Member 'USQGameUserSettings::bShowNameTagText' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bAlwaysShowFTLMarker) == 0x000159, "Member 'USQGameUserSettings::bAlwaysShowFTLMarker' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bShowNameTagKit) == 0x00015A, "Member 'USQGameUserSettings::bShowNameTagKit' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bClientAutoRecord) == 0x00015B, "Member 'USQGameUserSettings::bClientAutoRecord' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, NumberAutoRecordedGames) == 0x00015C, "Member 'USQGameUserSettings::NumberAutoRecordedGames' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bIsAAEnabled) == 0x000160, "Member 'USQGameUserSettings::bIsAAEnabled' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, LastSavedScopeClarityMode) == 0x000164, "Member 'USQGameUserSettings::LastSavedScopeClarityMode' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bIsPlayerADSWithScopeClarityOn) == 0x000168, "Member 'USQGameUserSettings::bIsPlayerADSWithScopeClarityOn' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, LastSavedAASamples) == 0x00016C, "Member 'USQGameUserSettings::LastSavedAASamples' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, LastSavedAAQuality) == 0x000170, "Member 'USQGameUserSettings::LastSavedAAQuality' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bInvertedYAxis) == 0x000174, "Member 'USQGameUserSettings::bInvertedYAxis' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bEnableMouseSmoothing) == 0x000175, "Member 'USQGameUserSettings::bEnableMouseSmoothing' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bKeyboardHighlight) == 0x000176, "Member 'USQGameUserSettings::bKeyboardHighlight' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, ControlsPresetName) == 0x000178, "Member 'USQGameUserSettings::ControlsPresetName' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bUseMenuToolTips) == 0x000190, "Member 'USQGameUserSettings::bUseMenuToolTips' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bUseRadialMenuToolTips) == 0x000191, "Member 'USQGameUserSettings::bUseRadialMenuToolTips' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bUseInGameHelp) == 0x000192, "Member 'USQGameUserSettings::bUseInGameHelp' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, HZBOcclusion) == 0x000198, "Member 'USQGameUserSettings::HZBOcclusion' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, TextureStreamPoolSizeStorage) == 0x0001D8, "Member 'USQGameUserSettings::TextureStreamPoolSizeStorage' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, OnBenchmarkComplete) == 0x000218, "Member 'USQGameUserSettings::OnBenchmarkComplete' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bCompassBackgroundEnabled) == 0x000228, "Member 'USQGameUserSettings::bCompassBackgroundEnabled' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bCompassTopViewEnabled) == 0x000229, "Member 'USQGameUserSettings::bCompassTopViewEnabled' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, FOV) == 0x00022C, "Member 'USQGameUserSettings::FOV' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bWeaponModelBlurDisabled) == 0x000230, "Member 'USQGameUserSettings::bWeaponModelBlurDisabled' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, GlobalSensitivity) == 0x000234, "Member 'USQGameUserSettings::GlobalSensitivity' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, SteadyAimSensitivity) == 0x000238, "Member 'USQGameUserSettings::SteadyAimSensitivity' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, DoubleKeyPressTime) == 0x00023C, "Member 'USQGameUserSettings::DoubleKeyPressTime' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, Tessellation) == 0x000248, "Member 'USQGameUserSettings::Tessellation' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, TessellationMode) == 0x000288, "Member 'USQGameUserSettings::TessellationMode' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, CrouchMode) == 0x0002C8, "Member 'USQGameUserSettings::CrouchMode' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, ADSMode) == 0x0002C9, "Member 'USQGameUserSettings::ADSMode' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, LeanMode) == 0x0002CA, "Member 'USQGameUserSettings::LeanMode' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, FreelookMode) == 0x0002CB, "Member 'USQGameUserSettings::FreelookMode' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, SprintMode) == 0x0002CC, "Member 'USQGameUserSettings::SprintMode' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, FreelookSensitivitySliderValue) == 0x0002D0, "Member 'USQGameUserSettings::FreelookSensitivitySliderValue' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, FreelookSensitivity) == 0x0002D4, "Member 'USQGameUserSettings::FreelookSensitivity' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bHelicopterInvertMousePitch) == 0x0002D8, "Member 'USQGameUserSettings::bHelicopterInvertMousePitch' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, HelicopterPitchSensitivitySliderValue) == 0x0002DC, "Member 'USQGameUserSettings::HelicopterPitchSensitivitySliderValue' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, HelicopterPitchSensitivity) == 0x0002E0, "Member 'USQGameUserSettings::HelicopterPitchSensitivity' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, HelicopterRollSensitivitySliderValue) == 0x0002E4, "Member 'USQGameUserSettings::HelicopterRollSensitivitySliderValue' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bUncapTexturePoolSize) == 0x0002E8, "Member 'USQGameUserSettings::bUncapTexturePoolSize' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, HelicopterRollSensitivity) == 0x0002EC, "Member 'USQGameUserSettings::HelicopterRollSensitivity' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, GlobalSensitivitySliderValue) == 0x0002F0, "Member 'USQGameUserSettings::GlobalSensitivitySliderValue' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, SteadyAimSensitivitySliderValue) == 0x0002F4, "Member 'USQGameUserSettings::SteadyAimSensitivitySliderValue' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, SoldierSensitivitySliderValue) == 0x0002F8, "Member 'USQGameUserSettings::SoldierSensitivitySliderValue' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, SoldierSensitivity) == 0x0002FC, "Member 'USQGameUserSettings::SoldierSensitivity' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, SoldierZoomSensitivities) == 0x000300, "Member 'USQGameUserSettings::SoldierZoomSensitivities' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, VehicleSensitivitySliderValue) == 0x000350, "Member 'USQGameUserSettings::VehicleSensitivitySliderValue' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, VehicleSensitivity) == 0x000354, "Member 'USQGameUserSettings::VehicleSensitivity' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, PostFX_Brightness) == 0x000358, "Member 'USQGameUserSettings::PostFX_Brightness' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, PostFX_BrightnessSliderValue) == 0x00035C, "Member 'USQGameUserSettings::PostFX_BrightnessSliderValue' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, PostFX_Contrast) == 0x000360, "Member 'USQGameUserSettings::PostFX_Contrast' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, PostFX_ContrastSliderValue) == 0x000364, "Member 'USQGameUserSettings::PostFX_ContrastSliderValue' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, PostFX_Saturation) == 0x000368, "Member 'USQGameUserSettings::PostFX_Saturation' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, PostFX_SaturationSliderValue) == 0x00036C, "Member 'USQGameUserSettings::PostFX_SaturationSliderValue' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, ScopeResolutionScale) == 0x000370, "Member 'USQGameUserSettings::ScopeResolutionScale' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, ScopeUpdateRate) == 0x0003B0, "Member 'USQGameUserSettings::ScopeUpdateRate' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, ShadowQuality) == 0x0003F0, "Member 'USQGameUserSettings::ShadowQuality' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, ContactShadows) == 0x000448, "Member 'USQGameUserSettings::ContactShadows' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, FoliageQuality) == 0x000488, "Member 'USQGameUserSettings::FoliageQuality' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, FoliageMinLOD) == 0x0004E0, "Member 'USQGameUserSettings::FoliageMinLOD' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, VehicleZoomSensitivitiesSliderValues) == 0x000520, "Member 'USQGameUserSettings::VehicleZoomSensitivitiesSliderValues' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, VehicleZoomSensitivities) == 0x000570, "Member 'USQGameUserSettings::VehicleZoomSensitivities' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bFreelookRecentersWeapon) == 0x0005C0, "Member 'USQGameUserSettings::bFreelookRecentersWeapon' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bJumpCausesUnCrouch) == 0x0005C1, "Member 'USQGameUserSettings::bJumpCausesUnCrouch' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bJumpCausesUnProne) == 0x0005C2, "Member 'USQGameUserSettings::bJumpCausesUnProne' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bIsDoubleTapWalkingEnabled) == 0x0005C3, "Member 'USQGameUserSettings::bIsDoubleTapWalkingEnabled' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, FavoriteServersList) == 0x0005C8, "Member 'USQGameUserSettings::FavoriteServersList' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, RecentServersList) == 0x0005D8, "Member 'USQGameUserSettings::RecentServersList' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bShowDiffVerServers) == 0x0005E8, "Member 'USQGameUserSettings::bShowDiffVerServers' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bShowEmptyServers) == 0x0005E9, "Member 'USQGameUserSettings::bShowEmptyServers' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bShowQueuesSeparately) == 0x0005EA, "Member 'USQGameUserSettings::bShowQueuesSeparately' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bShowReservedSlots) == 0x0005EB, "Member 'USQGameUserSettings::bShowReservedSlots' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bShowFullServers) == 0x0005EC, "Member 'USQGameUserSettings::bShowFullServers' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bShowModdedServers) == 0x0005ED, "Member 'USQGameUserSettings::bShowModdedServers' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bShowWhitelistedMods) == 0x0005EE, "Member 'USQGameUserSettings::bShowWhitelistedMods' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bShowLicensedServers) == 0x0005EF, "Member 'USQGameUserSettings::bShowLicensedServers' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, FilterMaxPing) == 0x0005F0, "Member 'USQGameUserSettings::FilterMaxPing' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, MenuFrameRateLimit) == 0x0005F4, "Member 'USQGameUserSettings::MenuFrameRateLimit' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, BrowserSearchTags) == 0x0005F8, "Member 'USQGameUserSettings::BrowserSearchTags' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, QPMaxPing) == 0x000608, "Member 'USQGameUserSettings::QPMaxPing' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bQPShowFullServers) == 0x00060C, "Member 'USQGameUserSettings::bQPShowFullServers' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bQPShowEmptyServers) == 0x00060D, "Member 'USQGameUserSettings::bQPShowEmptyServers' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bQPShowModdedServers) == 0x00060E, "Member 'USQGameUserSettings::bQPShowModdedServers' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bQPSimpleSearch) == 0x00060F, "Member 'USQGameUserSettings::bQPSimpleSearch' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bQPDiffVer) == 0x000610, "Member 'USQGameUserSettings::bQPDiffVer' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, QPMinPlayers) == 0x000614, "Member 'USQGameUserSettings::QPMinPlayers' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, QPPreferedLanguage) == 0x000618, "Member 'USQGameUserSettings::QPPreferedLanguage' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, QPElapsedTime) == 0x000628, "Member 'USQGameUserSettings::QPElapsedTime' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, QPElapsedTimeMax) == 0x00062C, "Member 'USQGameUserSettings::QPElapsedTimeMax' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, QPGameModes) == 0x000630, "Member 'USQGameUserSettings::QPGameModes' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, QPSearchTags) == 0x000640, "Member 'USQGameUserSettings::QPSearchTags' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, AmbientOcclusion) == 0x000650, "Member 'USQGameUserSettings::AmbientOcclusion' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, ShadowFilterMethod) == 0x000690, "Member 'USQGameUserSettings::ShadowFilterMethod' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, GraphicsQuality) == 0x0006D0, "Member 'USQGameUserSettings::GraphicsQuality' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, ResolutionQuality) == 0x0006D8, "Member 'USQGameUserSettings::ResolutionQuality' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, ScreenSharpening) == 0x000730, "Member 'USQGameUserSettings::ScreenSharpening' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, ScreenPercentage) == 0x000770, "Member 'USQGameUserSettings::ScreenPercentage' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, MotionBlurAmount) == 0x0007B0, "Member 'USQGameUserSettings::MotionBlurAmount' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, LensFlareQuality) == 0x0007F0, "Member 'USQGameUserSettings::LensFlareQuality' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, AutoExposure) == 0x000830, "Member 'USQGameUserSettings::AutoExposure' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, AntiAliasingMode) == 0x000870, "Member 'USQGameUserSettings::AntiAliasingMode' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, ScopeClarityMode) == 0x0008B0, "Member 'USQGameUserSettings::ScopeClarityMode' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, MaterialQuality) == 0x0008F0, "Member 'USQGameUserSettings::MaterialQuality' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, TemporalAASamples) == 0x000930, "Member 'USQGameUserSettings::TemporalAASamples' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, TemporalAACurrentFrameWeight) == 0x000970, "Member 'USQGameUserSettings::TemporalAACurrentFrameWeight' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, UpscaleMode) == 0x0009B0, "Member 'USQGameUserSettings::UpscaleMode' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, DLSSMode) == 0x0009F0, "Member 'USQGameUserSettings::DLSSMode' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, DLSSSharpness) == 0x0009F4, "Member 'USQGameUserSettings::DLSSSharpness' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, DLSSFrameGenerationMode) == 0x0009F8, "Member 'USQGameUserSettings::DLSSFrameGenerationMode' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, ReflexMode) == 0x0009F9, "Member 'USQGameUserSettings::ReflexMode' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, FSR2Mode) == 0x000A00, "Member 'USQGameUserSettings::FSR2Mode' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, FSR2Quality) == 0x000A40, "Member 'USQGameUserSettings::FSR2Quality' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, XeSSEnabled) == 0x000A80, "Member 'USQGameUserSettings::XeSSEnabled' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, XeSSQuality) == 0x000AC0, "Member 'USQGameUserSettings::XeSSQuality' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, GPUThresholdScores) == 0x000B00, "Member 'USQGameUserSettings::GPUThresholdScores' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, CPUThresholdScores) == 0x000B10, "Member 'USQGameUserSettings::CPUThresholdScores' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, FSR2Sharpness) == 0x000B20, "Member 'USQGameUserSettings::FSR2Sharpness' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, CustomQuality) == 0x000B60, "Member 'USQGameUserSettings::CustomQuality' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, AntiAliasingQuality) == 0x000BB8, "Member 'USQGameUserSettings::AntiAliasingQuality' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, PostProcessQuality) == 0x000C10, "Member 'USQGameUserSettings::PostProcessQuality' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, EffectsQuality) == 0x000C68, "Member 'USQGameUserSettings::EffectsQuality' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, TextureQuality) == 0x000CC0, "Member 'USQGameUserSettings::TextureQuality' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, ViewDistanceQuality) == 0x000D18, "Member 'USQGameUserSettings::ViewDistanceQuality' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, OceanQuality) == 0x000D70, "Member 'USQGameUserSettings::OceanQuality' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, WakeSim) == 0x000DB0, "Member 'USQGameUserSettings::WakeSim' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, SkeletalMeshLODBias) == 0x000DF0, "Member 'USQGameUserSettings::SkeletalMeshLODBias' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, VehicleSkeletalMeshOptimizationLevel) == 0x000E30, "Member 'USQGameUserSettings::VehicleSkeletalMeshOptimizationLevel' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, SoldierSkeletalMeshOptimizationLevel) == 0x000E34, "Member 'USQGameUserSettings::SoldierSkeletalMeshOptimizationLevel' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, MaxAnisotropy) == 0x000E38, "Member 'USQGameUserSettings::MaxAnisotropy' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, EquippedEmotes) == 0x000E78, "Member 'USQGameUserSettings::EquippedEmotes' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, TemporarilyHeldEmote) == 0x000E88, "Member 'USQGameUserSettings::TemporarilyHeldEmote' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, ViewedBundles) == 0x000E90, "Member 'USQGameUserSettings::ViewedBundles' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, ViewedEmotes) == 0x000EA0, "Member 'USQGameUserSettings::ViewedEmotes' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, ViewedWeaponSkins) == 0x000EB0, "Member 'USQGameUserSettings::ViewedWeaponSkins' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, MasterVolume) == 0x000EC0, "Member 'USQGameUserSettings::MasterVolume' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, EffectsVolume) == 0x000EC4, "Member 'USQGameUserSettings::EffectsVolume' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, UIVolume) == 0x000EC8, "Member 'USQGameUserSettings::UIVolume' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, MusicVolume) == 0x000ECC, "Member 'USQGameUserSettings::MusicVolume' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, SquadVoiceVolume) == 0x000ED0, "Member 'USQGameUserSettings::SquadVoiceVolume' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, VoiceSide) == 0x000ED4, "Member 'USQGameUserSettings::VoiceSide' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bApplyVoiceRadioFilter) == 0x000ED8, "Member 'USQGameUserSettings::bApplyVoiceRadioFilter' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bApplyBiasWhileNonLeader) == 0x000ED9, "Member 'USQGameUserSettings::bApplyBiasWhileNonLeader' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bPlaySquadVOIPSounds) == 0x000EDB, "Member 'USQGameUserSettings::bPlaySquadVOIPSounds' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bPlayCommandVOIPSounds) == 0x000EDC, "Member 'USQGameUserSettings::bPlayCommandVOIPSounds' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, LocalVoIPVolume) == 0x000EE0, "Member 'USQGameUserSettings::LocalVoIPVolume' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, CommandVoIPVolume) == 0x000EE4, "Member 'USQGameUserSettings::CommandVoIPVolume' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, CommandVoIPSide) == 0x000EE8, "Member 'USQGameUserSettings::CommandVoIPSide' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, LeaderVoipDucking) == 0x000EEC, "Member 'USQGameUserSettings::LeaderVoipDucking' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, RendererConfig) == 0x000EF0, "Member 'USQGameUserSettings::RendererConfig' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, JoyStickConfigurations) == 0x000F40, "Member 'USQGameUserSettings::JoyStickConfigurations' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bAlwaysFreeLook) == 0x000F90, "Member 'USQGameUserSettings::bAlwaysFreeLook' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, UnfocusedVolumeMultiplier) == 0x000F94, "Member 'USQGameUserSettings::UnfocusedVolumeMultiplier' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, MaxImpactEffectDecalLifeSpan) == 0x000F98, "Member 'USQGameUserSettings::MaxImpactEffectDecalLifeSpan' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, InventorySettings) == 0x000FA0, "Member 'USQGameUserSettings::InventorySettings' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, EquippedSkins) == 0x000FB0, "Member 'USQGameUserSettings::EquippedSkins' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, TextureStreaming) == 0x001000, "Member 'USQGameUserSettings::TextureStreaming' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, OnGameUserSettingsChanged) == 0x001040, "Member 'USQGameUserSettings::OnGameUserSettingsChanged' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, StreamerModeMask) == 0x001060, "Member 'USQGameUserSettings::StreamerModeMask' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, bIsLanMatch) == 0x001065, "Member 'USQGameUserSettings::bIsLanMatch' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, SquadIncrementalVersion) == 0x001068, "Member 'USQGameUserSettings::SquadIncrementalVersion' has a wrong offset!");
static_assert(offsetof(USQGameUserSettings, SquadSettingsVersion) == 0x00106C, "Member 'USQGameUserSettings::SquadSettingsVersion' has a wrong offset!");

// Class Squad.SQCoreStateConnectionChildActorComponent
// 0x0010 (0x0240 - 0x0230)
class USQCoreStateConnectionChildActorComponent final : public UChildActorComponent
{
public:
	float                                         NetPriority;                                       // 0x0230(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetUpdateFrequency;                                // 0x0234(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinNetUpdateFrequency;                             // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104C[0x4];                                     // 0x023C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCoreStateConnectionChildActorComponent">();
	}
	static class USQCoreStateConnectionChildActorComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCoreStateConnectionChildActorComponent>();
	}
};
static_assert(alignof(USQCoreStateConnectionChildActorComponent) == 0x000010, "Wrong alignment on USQCoreStateConnectionChildActorComponent");
static_assert(sizeof(USQCoreStateConnectionChildActorComponent) == 0x000240, "Wrong size on USQCoreStateConnectionChildActorComponent");
static_assert(offsetof(USQCoreStateConnectionChildActorComponent, NetPriority) == 0x000230, "Member 'USQCoreStateConnectionChildActorComponent::NetPriority' has a wrong offset!");
static_assert(offsetof(USQCoreStateConnectionChildActorComponent, NetUpdateFrequency) == 0x000234, "Member 'USQCoreStateConnectionChildActorComponent::NetUpdateFrequency' has a wrong offset!");
static_assert(offsetof(USQCoreStateConnectionChildActorComponent, MinNetUpdateFrequency) == 0x000238, "Member 'USQCoreStateConnectionChildActorComponent::MinNetUpdateFrequency' has a wrong offset!");

// Class Squad.SQCoreStateData
// 0x0080 (0x00A8 - 0x0028)
class USQCoreStateData : public UObject
{
public:
	bool                                          bIsGlobalData;                                     // 0x0028(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowConfigureOnServer;                           // 0x0029(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowConfigureOnClient;                           // 0x002A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanEverConfigureOnTick;                           // 0x002B(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TickConfigureServerFrequency;                      // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TickConfigureClientFrequency;                      // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_104D[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCoreStateDataTickFunction             TickFunction;                                      // 0x0038(0x0030)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_104E[0x8];                                     // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USQCoreStateListener*>           ListenerList;                                      // 0x0070(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_104F[0x8];                                     // 0x0080(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQCoreStateId                         RepComponentId;                                    // 0x0088(0x0002)(Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         BitPad_3F : 1;                                     // 0x008A(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bIsVisible : 1;                                    // 0x008A(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_1050[0x1D];                                    // 0x008B(0x001D)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnListenerCreate(class USQCoreStateListener* Listener);
	void OnWorldCleanup(class UWorld* World, bool bSessionEnded, bool bCleanupResources);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCoreStateData">();
	}
	static class USQCoreStateData* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCoreStateData>();
	}
};
static_assert(alignof(USQCoreStateData) == 0x000008, "Wrong alignment on USQCoreStateData");
static_assert(sizeof(USQCoreStateData) == 0x0000A8, "Wrong size on USQCoreStateData");
static_assert(offsetof(USQCoreStateData, bIsGlobalData) == 0x000028, "Member 'USQCoreStateData::bIsGlobalData' has a wrong offset!");
static_assert(offsetof(USQCoreStateData, bAllowConfigureOnServer) == 0x000029, "Member 'USQCoreStateData::bAllowConfigureOnServer' has a wrong offset!");
static_assert(offsetof(USQCoreStateData, bAllowConfigureOnClient) == 0x00002A, "Member 'USQCoreStateData::bAllowConfigureOnClient' has a wrong offset!");
static_assert(offsetof(USQCoreStateData, bCanEverConfigureOnTick) == 0x00002B, "Member 'USQCoreStateData::bCanEverConfigureOnTick' has a wrong offset!");
static_assert(offsetof(USQCoreStateData, TickConfigureServerFrequency) == 0x00002C, "Member 'USQCoreStateData::TickConfigureServerFrequency' has a wrong offset!");
static_assert(offsetof(USQCoreStateData, TickConfigureClientFrequency) == 0x000030, "Member 'USQCoreStateData::TickConfigureClientFrequency' has a wrong offset!");
static_assert(offsetof(USQCoreStateData, TickFunction) == 0x000038, "Member 'USQCoreStateData::TickFunction' has a wrong offset!");
static_assert(offsetof(USQCoreStateData, ListenerList) == 0x000070, "Member 'USQCoreStateData::ListenerList' has a wrong offset!");
static_assert(offsetof(USQCoreStateData, RepComponentId) == 0x000088, "Member 'USQCoreStateData::RepComponentId' has a wrong offset!");

// Class Squad.SQGameSpawn
// 0x01A8 (0x0400 - 0x0258)
class ASQGameSpawn : public APlayerStart
{
public:
	uint8                                         Pad_1052[0x8];                                     // 0x0258(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             PreSiegedStateChangedSignal;                       // 0x0260(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSiegedStateChangedSignal;                        // 0x0270(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnActivatedTimeStampChangedSignal;                 // 0x0280(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             PreSpawningEnabledStateChanged;                    // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSpawningEnabledStateChanged;                     // 0x02A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         RespawnDelay;                                      // 0x02B0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RespawnIncrease;                                   // 0x02B4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondsOfSpawnProtection;                          // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1053[0x4];                                     // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USQMapIconComponent>        SpawnIconComponentClass;                           // 0x02C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTimeIntervalBetweenSpawnPointLocationEvaluations; // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawningEnabled;                                  // 0x02CC(0x0001)(Edit, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSieged;                                           // 0x02CD(0x0001)(Edit, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1054[0x2];                                     // 0x02CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActivatedTimeStamp;                                // 0x02D0(0x0004)(Edit, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1055[0x4];                                     // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQCoreStateComponent*                  StateObject;                                       // 0x02D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQMapIconComponent*                    MapIcon;                                           // 0x02E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class USQMapIconWidget>           DefaultMapIconWidget;                              // 0x02E8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpawnSearchRadius;                                 // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpawnSearchHeight;                                 // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FVector>                        ValidSpawnLocations;                               // 0x02F8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FVector>                        ValidOutOfSightSpawnPoints;                        // 0x0308(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bHasValidSpawnLocation;                            // 0x0318(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1056[0xF];                                     // 0x0319(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bCanEverDoNearbyEnemiesCheck;                      // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBeSiegedByVehicles;                            // 0x0329(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1057[0x2];                                     // 0x032A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NearbyEnemiesRadius;                               // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearbyEnemiesCheckTickRate;                        // 0x0330(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1058[0x4];                                     // 0x0334(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            SiegeDistanceThreshold;                            // 0x0338(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            EnemyDistanceToRespawnDelay;                       // 0x0340(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1059[0x88];                                    // 0x0348(0x0088)(Fixing Size After Last Property [ Dumper-7 ])
	ESQTeam                                       Team;                                              // 0x03D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESQSpawnPointType                             SpawnPointType;                                    // 0x03D1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_105A[0x2];                                     // 0x03D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaveIntervalTime;                                  // 0x03D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_105B[0x18];                                    // 0x03D8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WaveSpawnStartTime;                                // 0x03F0(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_105C[0xC];                                     // 0x03F4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnActivatedTimeStampChanged();
	void BP_OnSiegedStateChanged();
	void ClearActivatingTimestamp();
	float GetRespawnDelay();
	class AActor* GetSpawnActor();
	struct FVector GetValidSpawnLocation(class UClass* DefaultPawnClass);
	TArray<struct FVector> GetValidSpawnLocations();
	void OnActivatedTimestampReached();
	void OnRep_ActivatedTimeStamp();
	void OnRep_HasValidSpawnLocation();
	void OnRep_Sieged();
	void OnRep_SpawningEnabled();
	void OnRep_Team();
	void SetActivatedTimeStamp(const float Value, bool bForce);
	void SetRespawnIncrease(float Value);
	void SetSieged(bool bEnabled);
	void SetSpawningEnabled(bool bEnabled);
	void SetTeam(ESQTeam Param_Team);

	bool CanSpawn() const;
	bool GetActivatedState() const;
	float GetActivatedTimeStamp() const;
	float GetRemainingActivatingTime() const;
	float GetRespawnIncrease() const;
	bool GetSieged() const;
	bool GetSpawningEnabled() const;
	ESQSpawnPointType GetSpawnPointType() const;
	ESQTeam GetTeam() const;
	float GetWaveIntervalTime() const;
	float GetWaveSpawnStartTime() const;
	float GetWaveTime() const;
	bool HasValidSpawnLocation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGameSpawn">();
	}
	static class ASQGameSpawn* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQGameSpawn>();
	}
};
static_assert(alignof(ASQGameSpawn) == 0x000008, "Wrong alignment on ASQGameSpawn");
static_assert(sizeof(ASQGameSpawn) == 0x000400, "Wrong size on ASQGameSpawn");
static_assert(offsetof(ASQGameSpawn, PreSiegedStateChangedSignal) == 0x000260, "Member 'ASQGameSpawn::PreSiegedStateChangedSignal' has a wrong offset!");
static_assert(offsetof(ASQGameSpawn, OnSiegedStateChangedSignal) == 0x000270, "Member 'ASQGameSpawn::OnSiegedStateChangedSignal' has a wrong offset!");
static_assert(offsetof(ASQGameSpawn, OnActivatedTimeStampChangedSignal) == 0x000280, "Member 'ASQGameSpawn::OnActivatedTimeStampChangedSignal' has a wrong offset!");
static_assert(offsetof(ASQGameSpawn, PreSpawningEnabledStateChanged) == 0x000290, "Member 'ASQGameSpawn::PreSpawningEnabledStateChanged' has a wrong offset!");
static_assert(offsetof(ASQGameSpawn, OnSpawningEnabledStateChanged) == 0x0002A0, "Member 'ASQGameSpawn::OnSpawningEnabledStateChanged' has a wrong offset!");
static_assert(offsetof(ASQGameSpawn, RespawnDelay) == 0x0002B0, "Member 'ASQGameSpawn::RespawnDelay' has a wrong offset!");
static_assert(offsetof(ASQGameSpawn, RespawnIncrease) == 0x0002B4, "Member 'ASQGameSpawn::RespawnIncrease' has a wrong offset!");
static_assert(offsetof(ASQGameSpawn, SecondsOfSpawnProtection) == 0x0002B8, "Member 'ASQGameSpawn::SecondsOfSpawnProtection' has a wrong offset!");
static_assert(offsetof(ASQGameSpawn, SpawnIconComponentClass) == 0x0002C0, "Member 'ASQGameSpawn::SpawnIconComponentClass' has a wrong offset!");
static_assert(offsetof(ASQGameSpawn, MaxTimeIntervalBetweenSpawnPointLocationEvaluations) == 0x0002C8, "Member 'ASQGameSpawn::MaxTimeIntervalBetweenSpawnPointLocationEvaluations' has a wrong offset!");
static_assert(offsetof(ASQGameSpawn, bSpawningEnabled) == 0x0002CC, "Member 'ASQGameSpawn::bSpawningEnabled' has a wrong offset!");
static_assert(offsetof(ASQGameSpawn, bSieged) == 0x0002CD, "Member 'ASQGameSpawn::bSieged' has a wrong offset!");
static_assert(offsetof(ASQGameSpawn, ActivatedTimeStamp) == 0x0002D0, "Member 'ASQGameSpawn::ActivatedTimeStamp' has a wrong offset!");
static_assert(offsetof(ASQGameSpawn, StateObject) == 0x0002D8, "Member 'ASQGameSpawn::StateObject' has a wrong offset!");
static_assert(offsetof(ASQGameSpawn, MapIcon) == 0x0002E0, "Member 'ASQGameSpawn::MapIcon' has a wrong offset!");
static_assert(offsetof(ASQGameSpawn, DefaultMapIconWidget) == 0x0002E8, "Member 'ASQGameSpawn::DefaultMapIconWidget' has a wrong offset!");
static_assert(offsetof(ASQGameSpawn, SpawnSearchRadius) == 0x0002F0, "Member 'ASQGameSpawn::SpawnSearchRadius' has a wrong offset!");
static_assert(offsetof(ASQGameSpawn, SpawnSearchHeight) == 0x0002F4, "Member 'ASQGameSpawn::SpawnSearchHeight' has a wrong offset!");
static_assert(offsetof(ASQGameSpawn, ValidSpawnLocations) == 0x0002F8, "Member 'ASQGameSpawn::ValidSpawnLocations' has a wrong offset!");
static_assert(offsetof(ASQGameSpawn, ValidOutOfSightSpawnPoints) == 0x000308, "Member 'ASQGameSpawn::ValidOutOfSightSpawnPoints' has a wrong offset!");
static_assert(offsetof(ASQGameSpawn, bHasValidSpawnLocation) == 0x000318, "Member 'ASQGameSpawn::bHasValidSpawnLocation' has a wrong offset!");
static_assert(offsetof(ASQGameSpawn, bCanEverDoNearbyEnemiesCheck) == 0x000328, "Member 'ASQGameSpawn::bCanEverDoNearbyEnemiesCheck' has a wrong offset!");
static_assert(offsetof(ASQGameSpawn, bCanBeSiegedByVehicles) == 0x000329, "Member 'ASQGameSpawn::bCanBeSiegedByVehicles' has a wrong offset!");
static_assert(offsetof(ASQGameSpawn, NearbyEnemiesRadius) == 0x00032C, "Member 'ASQGameSpawn::NearbyEnemiesRadius' has a wrong offset!");
static_assert(offsetof(ASQGameSpawn, NearbyEnemiesCheckTickRate) == 0x000330, "Member 'ASQGameSpawn::NearbyEnemiesCheckTickRate' has a wrong offset!");
static_assert(offsetof(ASQGameSpawn, SiegeDistanceThreshold) == 0x000338, "Member 'ASQGameSpawn::SiegeDistanceThreshold' has a wrong offset!");
static_assert(offsetof(ASQGameSpawn, EnemyDistanceToRespawnDelay) == 0x000340, "Member 'ASQGameSpawn::EnemyDistanceToRespawnDelay' has a wrong offset!");
static_assert(offsetof(ASQGameSpawn, Team) == 0x0003D0, "Member 'ASQGameSpawn::Team' has a wrong offset!");
static_assert(offsetof(ASQGameSpawn, SpawnPointType) == 0x0003D1, "Member 'ASQGameSpawn::SpawnPointType' has a wrong offset!");
static_assert(offsetof(ASQGameSpawn, WaveIntervalTime) == 0x0003D4, "Member 'ASQGameSpawn::WaveIntervalTime' has a wrong offset!");
static_assert(offsetof(ASQGameSpawn, WaveSpawnStartTime) == 0x0003F0, "Member 'ASQGameSpawn::WaveSpawnStartTime' has a wrong offset!");

// Class Squad.SQGameRallyPoint
// 0x0028 (0x0428 - 0x0400)
class ASQGameRallyPoint : public ASQGameSpawn
{
public:
	class UStaticMeshComponent*                   Mesh;                                              // 0x0400(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQMapIconComponent*                    RallyPointMapIcon;                                 // 0x0408(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             PlacementSound;                                    // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_105F[0x8];                                     // 0x0418(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumberOfSpawns;                                    // 0x0420(0x0004)(Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1060[0x4];                                     // 0x0424(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetNumberOfSpawns() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGameRallyPoint">();
	}
	static class ASQGameRallyPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQGameRallyPoint>();
	}
};
static_assert(alignof(ASQGameRallyPoint) == 0x000008, "Wrong alignment on ASQGameRallyPoint");
static_assert(sizeof(ASQGameRallyPoint) == 0x000428, "Wrong size on ASQGameRallyPoint");
static_assert(offsetof(ASQGameRallyPoint, Mesh) == 0x000400, "Member 'ASQGameRallyPoint::Mesh' has a wrong offset!");
static_assert(offsetof(ASQGameRallyPoint, RallyPointMapIcon) == 0x000408, "Member 'ASQGameRallyPoint::RallyPointMapIcon' has a wrong offset!");
static_assert(offsetof(ASQGameRallyPoint, PlacementSound) == 0x000410, "Member 'ASQGameRallyPoint::PlacementSound' has a wrong offset!");
static_assert(offsetof(ASQGameRallyPoint, NumberOfSpawns) == 0x000420, "Member 'ASQGameRallyPoint::NumberOfSpawns' has a wrong offset!");

// Class Squad.SQCoreStateListener
// 0x0068 (0x0118 - 0x00B0)
class USQCoreStateListener : public UActorComponent
{
public:
	uint8                                         Pad_1061[0x18];                                    // 0x00B0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FSQCoreStateId, struct FSQCoreStateDataList> DataMap;                                           // 0x00C8(0x0050)(NativeAccessSpecifierPrivate)

public:
	void OnDataCreate(class USQCoreStateData* Data);
	void RefreshVisbility(const class APlayerController* PC);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCoreStateListener">();
	}
	static class USQCoreStateListener* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCoreStateListener>();
	}
};
static_assert(alignof(USQCoreStateListener) == 0x000008, "Wrong alignment on USQCoreStateListener");
static_assert(sizeof(USQCoreStateListener) == 0x000118, "Wrong size on USQCoreStateListener");
static_assert(offsetof(USQCoreStateListener, DataMap) == 0x0000C8, "Member 'USQCoreStateListener::DataMap' has a wrong offset!");

// Class Squad.SQCoreStateWidgetFactory
// 0x0200 (0x0318 - 0x0118)
class USQCoreStateWidgetFactory : public USQCoreStateListener
{
public:
	uint8                                         Pad_1062[0x8];                                     // 0x0118(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FSQCoreStateId, class USQCoreStateWidget*> Widgets;                                           // 0x0120(0x0050)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<TSubclassOf<class USQCoreStateWidget>, struct FWidgetGroup> UnusedWidgets;                                     // 0x0170(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1063[0xF0];                                    // 0x01C0(0x00F0)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class USQCoreStateData*, int32>          SubDataPendingSuperKey;                            // 0x02B0(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_1064[0x10];                                    // 0x0300(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class USQCoreStateSelectionHUB*               SelectionHUB;                                      // 0x0310(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ReceiveSelection(const struct FSQCoreStateId& ComponentId, ESQSelectionState SelectionState, const class UObject* SelectionInstigator) const;
	void UnselectAll(const class UObject* SelectionInstigator) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCoreStateWidgetFactory">();
	}
	static class USQCoreStateWidgetFactory* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCoreStateWidgetFactory>();
	}
};
static_assert(alignof(USQCoreStateWidgetFactory) == 0x000008, "Wrong alignment on USQCoreStateWidgetFactory");
static_assert(sizeof(USQCoreStateWidgetFactory) == 0x000318, "Wrong size on USQCoreStateWidgetFactory");
static_assert(offsetof(USQCoreStateWidgetFactory, Widgets) == 0x000120, "Member 'USQCoreStateWidgetFactory::Widgets' has a wrong offset!");
static_assert(offsetof(USQCoreStateWidgetFactory, UnusedWidgets) == 0x000170, "Member 'USQCoreStateWidgetFactory::UnusedWidgets' has a wrong offset!");
static_assert(offsetof(USQCoreStateWidgetFactory, SubDataPendingSuperKey) == 0x0002B0, "Member 'USQCoreStateWidgetFactory::SubDataPendingSuperKey' has a wrong offset!");
static_assert(offsetof(USQCoreStateWidgetFactory, SelectionHUB) == 0x000310, "Member 'USQCoreStateWidgetFactory::SelectionHUB' has a wrong offset!");

// Class Squad.SQGraphInitializerComponent
// 0x0010 (0x00C0 - 0x00B0)
class USQGraphInitializerComponent : public UActorComponent
{
public:
	TArray<struct FSQDesignLink>                  DesignOutgoingLinks;                               // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	void PopulateGraph();
	void UpdateDesignLinks();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGraphInitializerComponent">();
	}
	static class USQGraphInitializerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQGraphInitializerComponent>();
	}
};
static_assert(alignof(USQGraphInitializerComponent) == 0x000008, "Wrong alignment on USQGraphInitializerComponent");
static_assert(sizeof(USQGraphInitializerComponent) == 0x0000C0, "Wrong size on USQGraphInitializerComponent");
static_assert(offsetof(USQGraphInitializerComponent, DesignOutgoingLinks) == 0x0000B0, "Member 'USQGraphInitializerComponent::DesignOutgoingLinks' has a wrong offset!");

// Class Squad.SQGraphAASInitializerComponent
// 0x0000 (0x00C0 - 0x00C0)
class USQGraphAASInitializerComponent : public USQGraphInitializerComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGraphAASInitializerComponent">();
	}
	static class USQGraphAASInitializerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQGraphAASInitializerComponent>();
	}
};
static_assert(alignof(USQGraphAASInitializerComponent) == 0x000008, "Wrong alignment on USQGraphAASInitializerComponent");
static_assert(sizeof(USQGraphAASInitializerComponent) == 0x0000C0, "Wrong size on USQGraphAASInitializerComponent");

// Class Squad.SQCoreStateMapComponent
// 0x0178 (0x0490 - 0x0318)
class USQCoreStateMapComponent final : public USQCoreStateWidgetFactory
{
public:
	class UPanelWidget*                           RootWidget;                                        // 0x0318(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQMapWidgetBase*                       MapWidgetBase;                                     // 0x0320(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WidgetScale;                                       // 0x0328(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1066[0x164];                                   // 0x032C(0x0164)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetRootWidget(class UPanelWidget* Value);
	void SetWidgetScale(float UniformScale);

	const TMap<int32, struct FSQCoreStateId> GetOrderTargetWidgets() const;
	const TMap<int32, struct FSQCoreStateId> GetWaypointFTWidgets() const;
	const TMap<int32, struct FSQCoreStateId> GetWaypointWidgets() const;
	bool GetWidgetScreenPosition(struct FVector2D* OutPosition, const struct FSQCoreStateId& ID) const;
	bool GetWidgetWorldLocation(struct FVector* OutWorldLocation, const struct FSQCoreStateId& ID) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCoreStateMapComponent">();
	}
	static class USQCoreStateMapComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCoreStateMapComponent>();
	}
};
static_assert(alignof(USQCoreStateMapComponent) == 0x000008, "Wrong alignment on USQCoreStateMapComponent");
static_assert(sizeof(USQCoreStateMapComponent) == 0x000490, "Wrong size on USQCoreStateMapComponent");
static_assert(offsetof(USQCoreStateMapComponent, RootWidget) == 0x000318, "Member 'USQCoreStateMapComponent::RootWidget' has a wrong offset!");
static_assert(offsetof(USQCoreStateMapComponent, MapWidgetBase) == 0x000320, "Member 'USQCoreStateMapComponent::MapWidgetBase' has a wrong offset!");
static_assert(offsetof(USQCoreStateMapComponent, WidgetScale) == 0x000328, "Member 'USQCoreStateMapComponent::WidgetScale' has a wrong offset!");

// Class Squad.SQCoreStateMapDataInterface
// 0x0000 (0x0028 - 0x0028)
class ISQCoreStateMapDataInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCoreStateMapDataInterface">();
	}
	static class ISQCoreStateMapDataInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISQCoreStateMapDataInterface>();
	}
};
static_assert(alignof(ISQCoreStateMapDataInterface) == 0x000008, "Wrong alignment on ISQCoreStateMapDataInterface");
static_assert(sizeof(ISQCoreStateMapDataInterface) == 0x000028, "Wrong size on ISQCoreStateMapDataInterface");

// Class Squad.SQGrenade
// 0x00F8 (0x0570 - 0x0478)
class ASQGrenade : public ASQEquipableItem
{
public:
	ESQGrenadeState                               GrenadeState;                                      // 0x0478(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1069[0x7];                                     // 0x0479(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQGrenadeData                         GrenadeConfig;                                     // 0x0480(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_106A[0x18];                                    // 0x04C8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class USQGrenadeStaticInfo*                   GrenadeStaticInfo;                                 // 0x04E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCachedOverhandPinpull;                            // 0x04E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCachedOverhandThrow;                              // 0x04E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCachedUnderhandPinpull;                           // 0x04EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCachedUnderhandThrow;                             // 0x04EB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCachedReloading;                                  // 0x04EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_106B[0x3];                                     // 0x04ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           WeaponOverhandPinpull1pMontage;                    // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimMontage*                           WeaponOverhandPinpull3pMontage;                    // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimMontage*                           OverhandPinpull1pMontage;                          // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimMontage*                           OverhandPinpull3pMontage;                          // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimMontage*                           WeaponOverhandThrow1pMontage;                      // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimMontage*                           WeaponOverhandThrow3pMontage;                      // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimMontage*                           OverhandThrow1pMontage;                            // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimMontage*                           OverhandThrow3pMontage;                            // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimMontage*                           WeaponUnderhandPinpull1pMontage;                   // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimMontage*                           WeaponUnderhandPinpull3pMontage;                   // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimMontage*                           UnderhandPinpull1pMontage;                         // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimMontage*                           UnderhandPinpull3pMontage;                         // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimMontage*                           WeaponUnderhandThrow1pMontage;                     // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimMontage*                           WeaponUnderhandThrow3pMontage;                     // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimMontage*                           UnderhandThrow1pMontage;                           // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimMontage*                           UnderhandThrow3pMontage;                           // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BlueprintOnGrenadeStateChanged();
	struct FRotator GetAimDirection();
	struct FVector GetAimLocation();
	void OnRep_GrenadeState();
	void ServerPrepareThrow(bool bOverhand);
	void ServerReleaseThrow(bool bOverhand);
	void ServerSpawnGrenade(const struct FVector& SpawnLocationZeroBased);
	void UpdateOverhandPinpull();
	void UpdateOverhandThrow();
	void UpdateReloading();
	void UpdateUnderhandPinpull();
	void UpdateUnderhandThrow();

	class USQGrenadeStaticInfo* GetGrenadeStaticInfo() const;
	class ASQSoldier* GetOwnerSoldier() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGrenade">();
	}
	static class ASQGrenade* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQGrenade>();
	}
};
static_assert(alignof(ASQGrenade) == 0x000008, "Wrong alignment on ASQGrenade");
static_assert(sizeof(ASQGrenade) == 0x000570, "Wrong size on ASQGrenade");
static_assert(offsetof(ASQGrenade, GrenadeState) == 0x000478, "Member 'ASQGrenade::GrenadeState' has a wrong offset!");
static_assert(offsetof(ASQGrenade, GrenadeConfig) == 0x000480, "Member 'ASQGrenade::GrenadeConfig' has a wrong offset!");
static_assert(offsetof(ASQGrenade, GrenadeStaticInfo) == 0x0004E0, "Member 'ASQGrenade::GrenadeStaticInfo' has a wrong offset!");
static_assert(offsetof(ASQGrenade, bCachedOverhandPinpull) == 0x0004E8, "Member 'ASQGrenade::bCachedOverhandPinpull' has a wrong offset!");
static_assert(offsetof(ASQGrenade, bCachedOverhandThrow) == 0x0004E9, "Member 'ASQGrenade::bCachedOverhandThrow' has a wrong offset!");
static_assert(offsetof(ASQGrenade, bCachedUnderhandPinpull) == 0x0004EA, "Member 'ASQGrenade::bCachedUnderhandPinpull' has a wrong offset!");
static_assert(offsetof(ASQGrenade, bCachedUnderhandThrow) == 0x0004EB, "Member 'ASQGrenade::bCachedUnderhandThrow' has a wrong offset!");
static_assert(offsetof(ASQGrenade, bCachedReloading) == 0x0004EC, "Member 'ASQGrenade::bCachedReloading' has a wrong offset!");
static_assert(offsetof(ASQGrenade, WeaponOverhandPinpull1pMontage) == 0x0004F0, "Member 'ASQGrenade::WeaponOverhandPinpull1pMontage' has a wrong offset!");
static_assert(offsetof(ASQGrenade, WeaponOverhandPinpull3pMontage) == 0x0004F8, "Member 'ASQGrenade::WeaponOverhandPinpull3pMontage' has a wrong offset!");
static_assert(offsetof(ASQGrenade, OverhandPinpull1pMontage) == 0x000500, "Member 'ASQGrenade::OverhandPinpull1pMontage' has a wrong offset!");
static_assert(offsetof(ASQGrenade, OverhandPinpull3pMontage) == 0x000508, "Member 'ASQGrenade::OverhandPinpull3pMontage' has a wrong offset!");
static_assert(offsetof(ASQGrenade, WeaponOverhandThrow1pMontage) == 0x000510, "Member 'ASQGrenade::WeaponOverhandThrow1pMontage' has a wrong offset!");
static_assert(offsetof(ASQGrenade, WeaponOverhandThrow3pMontage) == 0x000518, "Member 'ASQGrenade::WeaponOverhandThrow3pMontage' has a wrong offset!");
static_assert(offsetof(ASQGrenade, OverhandThrow1pMontage) == 0x000520, "Member 'ASQGrenade::OverhandThrow1pMontage' has a wrong offset!");
static_assert(offsetof(ASQGrenade, OverhandThrow3pMontage) == 0x000528, "Member 'ASQGrenade::OverhandThrow3pMontage' has a wrong offset!");
static_assert(offsetof(ASQGrenade, WeaponUnderhandPinpull1pMontage) == 0x000530, "Member 'ASQGrenade::WeaponUnderhandPinpull1pMontage' has a wrong offset!");
static_assert(offsetof(ASQGrenade, WeaponUnderhandPinpull3pMontage) == 0x000538, "Member 'ASQGrenade::WeaponUnderhandPinpull3pMontage' has a wrong offset!");
static_assert(offsetof(ASQGrenade, UnderhandPinpull1pMontage) == 0x000540, "Member 'ASQGrenade::UnderhandPinpull1pMontage' has a wrong offset!");
static_assert(offsetof(ASQGrenade, UnderhandPinpull3pMontage) == 0x000548, "Member 'ASQGrenade::UnderhandPinpull3pMontage' has a wrong offset!");
static_assert(offsetof(ASQGrenade, WeaponUnderhandThrow1pMontage) == 0x000550, "Member 'ASQGrenade::WeaponUnderhandThrow1pMontage' has a wrong offset!");
static_assert(offsetof(ASQGrenade, WeaponUnderhandThrow3pMontage) == 0x000558, "Member 'ASQGrenade::WeaponUnderhandThrow3pMontage' has a wrong offset!");
static_assert(offsetof(ASQGrenade, UnderhandThrow1pMontage) == 0x000560, "Member 'ASQGrenade::UnderhandThrow1pMontage' has a wrong offset!");
static_assert(offsetof(ASQGrenade, UnderhandThrow3pMontage) == 0x000568, "Member 'ASQGrenade::UnderhandThrow3pMontage' has a wrong offset!");

// Class Squad.RouteSelectorPredicate
// 0x0008 (0x0030 - 0x0028)
class URouteSelectorPredicate : public UObject
{
public:
	int32                                         NumLinksToChoose;                                  // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_106C[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool Execute(TArray<class USQGraphNodeComponent*>& LinksLeft, TArray<class USQGraphNodeComponent*>& ChosenLinks, struct FRandomStream& RandStream);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RouteSelectorPredicate">();
	}
	static class URouteSelectorPredicate* GetDefaultObj()
	{
		return GetDefaultObjImpl<URouteSelectorPredicate>();
	}
};
static_assert(alignof(URouteSelectorPredicate) == 0x000008, "Wrong alignment on URouteSelectorPredicate");
static_assert(sizeof(URouteSelectorPredicate) == 0x000030, "Wrong size on URouteSelectorPredicate");
static_assert(offsetof(URouteSelectorPredicate, NumLinksToChoose) == 0x000028, "Member 'URouteSelectorPredicate::NumLinksToChoose' has a wrong offset!");

// Class Squad.SQCoreStateSquadListComponent
// 0x0210 (0x0528 - 0x0318)
class USQCoreStateSquadListComponent : public USQCoreStateWidgetFactory
{
public:
	TSubclassOf<class USQCoreStateSquadItemWidget> SquadWidgetClass;                                  // 0x0318(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class USQCoreStateSquadMemberWidget> PlayerWidgetClass;                                 // 0x0320(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPanelWidget*                           SquadRoot;                                         // 0x0328(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPanelWidget*                           UnassignedRoot;                                    // 0x0330(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPanelWidget*                           CommanderRoot;                                     // 0x0338(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EListLayout                                   ListLayout;                                        // 0x0340(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EListLayout                                   UnassignedLayout;                                  // 0x0341(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_106E[0x6];                                     // 0x0342(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class USQCoreStateSquadItemWidget*> ActiveSquadWidgets;                                // 0x0348(0x0050)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_106F[0x190];                                   // 0x0398(0x0190)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetRootWidgets(class UPanelWidget* InSquadRoot, class UPanelWidget* InUnassignedRoot, class UPanelWidget* InCommanderRoot);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCoreStateSquadListComponent">();
	}
	static class USQCoreStateSquadListComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCoreStateSquadListComponent>();
	}
};
static_assert(alignof(USQCoreStateSquadListComponent) == 0x000008, "Wrong alignment on USQCoreStateSquadListComponent");
static_assert(sizeof(USQCoreStateSquadListComponent) == 0x000528, "Wrong size on USQCoreStateSquadListComponent");
static_assert(offsetof(USQCoreStateSquadListComponent, SquadWidgetClass) == 0x000318, "Member 'USQCoreStateSquadListComponent::SquadWidgetClass' has a wrong offset!");
static_assert(offsetof(USQCoreStateSquadListComponent, PlayerWidgetClass) == 0x000320, "Member 'USQCoreStateSquadListComponent::PlayerWidgetClass' has a wrong offset!");
static_assert(offsetof(USQCoreStateSquadListComponent, SquadRoot) == 0x000328, "Member 'USQCoreStateSquadListComponent::SquadRoot' has a wrong offset!");
static_assert(offsetof(USQCoreStateSquadListComponent, UnassignedRoot) == 0x000330, "Member 'USQCoreStateSquadListComponent::UnassignedRoot' has a wrong offset!");
static_assert(offsetof(USQCoreStateSquadListComponent, CommanderRoot) == 0x000338, "Member 'USQCoreStateSquadListComponent::CommanderRoot' has a wrong offset!");
static_assert(offsetof(USQCoreStateSquadListComponent, ListLayout) == 0x000340, "Member 'USQCoreStateSquadListComponent::ListLayout' has a wrong offset!");
static_assert(offsetof(USQCoreStateSquadListComponent, UnassignedLayout) == 0x000341, "Member 'USQCoreStateSquadListComponent::UnassignedLayout' has a wrong offset!");
static_assert(offsetof(USQCoreStateSquadListComponent, ActiveSquadWidgets) == 0x000348, "Member 'USQCoreStateSquadListComponent::ActiveSquadWidgets' has a wrong offset!");

// Class Squad.SQCoreStateRolesSquadListComponent
// 0x0000 (0x0528 - 0x0528)
class USQCoreStateRolesSquadListComponent final : public USQCoreStateSquadListComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCoreStateRolesSquadListComponent">();
	}
	static class USQCoreStateRolesSquadListComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCoreStateRolesSquadListComponent>();
	}
};
static_assert(alignof(USQCoreStateRolesSquadListComponent) == 0x000008, "Wrong alignment on USQCoreStateRolesSquadListComponent");
static_assert(sizeof(USQCoreStateRolesSquadListComponent) == 0x000528, "Wrong size on USQCoreStateRolesSquadListComponent");

// Class Squad.SQGenericPunchSubsystem
// 0x0110 (0x0140 - 0x0030)
class USQGenericPunchSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_1070[0x110];                                   // 0x0030(0x0110)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddGenericCameraPunch(const struct FSQGenericPunchInput& CameraRotationData, const struct FSQGenericPunchInput& CameraLocationData);
	void AddGenericWeaponPunch(const struct FSQGenericPunchInput& WeaponSwayData, const struct FSQGenericPunchInput& WeaponAlignmentData, const struct FSQGenericPunchInput& WeaponLocationData);
	void ResumePausedPunch(const class FName PunchID);

	bool PunchExistsByID(const class FName PunchID) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGenericPunchSubsystem">();
	}
	static class USQGenericPunchSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQGenericPunchSubsystem>();
	}
};
static_assert(alignof(USQGenericPunchSubsystem) == 0x000008, "Wrong alignment on USQGenericPunchSubsystem");
static_assert(sizeof(USQGenericPunchSubsystem) == 0x000140, "Wrong size on USQGenericPunchSubsystem");

// Class Squad.SQCoreStateSelectionHUB
// 0x0030 (0x00E0 - 0x00B0)
class USQCoreStateSelectionHUB final : public UActorComponent
{
public:
	uint8                                         Pad_1072[0x30];                                    // 0x00B0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UnselectAll(const class UObject* SelectionInstigator) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCoreStateSelectionHUB">();
	}
	static class USQCoreStateSelectionHUB* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCoreStateSelectionHUB>();
	}
};
static_assert(alignof(USQCoreStateSelectionHUB) == 0x000008, "Wrong alignment on USQCoreStateSelectionHUB");
static_assert(sizeof(USQCoreStateSelectionHUB) == 0x0000E0, "Wrong size on USQCoreStateSelectionHUB");

// Class Squad.SQCoreStateSpawnPointsListComponent
// 0x0050 (0x0368 - 0x0318)
class USQCoreStateSpawnPointsListComponent final : public USQCoreStateWidgetFactory
{
public:
	TSubclassOf<class USQCoreStateSpawnPointsListWidget> WidgetClass;                                       // 0x0318(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGridPanel*                             BaseRoot;                                          // 0x0320(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGridPanel*                             HABRoot;                                           // 0x0328(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGridPanel*                             RallyRoot;                                         // 0x0330(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1073[0x30];                                    // 0x0338(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetRootWidgets(class UGridPanel* InBaseRoot, class UGridPanel* InHABRoot, class UGridPanel* InRallyRoot);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCoreStateSpawnPointsListComponent">();
	}
	static class USQCoreStateSpawnPointsListComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCoreStateSpawnPointsListComponent>();
	}
};
static_assert(alignof(USQCoreStateSpawnPointsListComponent) == 0x000008, "Wrong alignment on USQCoreStateSpawnPointsListComponent");
static_assert(sizeof(USQCoreStateSpawnPointsListComponent) == 0x000368, "Wrong size on USQCoreStateSpawnPointsListComponent");
static_assert(offsetof(USQCoreStateSpawnPointsListComponent, WidgetClass) == 0x000318, "Member 'USQCoreStateSpawnPointsListComponent::WidgetClass' has a wrong offset!");
static_assert(offsetof(USQCoreStateSpawnPointsListComponent, BaseRoot) == 0x000320, "Member 'USQCoreStateSpawnPointsListComponent::BaseRoot' has a wrong offset!");
static_assert(offsetof(USQCoreStateSpawnPointsListComponent, HABRoot) == 0x000328, "Member 'USQCoreStateSpawnPointsListComponent::HABRoot' has a wrong offset!");
static_assert(offsetof(USQCoreStateSpawnPointsListComponent, RallyRoot) == 0x000330, "Member 'USQCoreStateSpawnPointsListComponent::RallyRoot' has a wrong offset!");

// Class Squad.SQGraphRAASInitializerComponent
// 0x0000 (0x00C0 - 0x00C0)
class USQGraphRAASInitializerComponent final : public USQGraphAASInitializerComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGraphRAASInitializerComponent">();
	}
	static class USQGraphRAASInitializerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQGraphRAASInitializerComponent>();
	}
};
static_assert(alignof(USQGraphRAASInitializerComponent) == 0x000008, "Wrong alignment on USQGraphRAASInitializerComponent");
static_assert(sizeof(USQGraphRAASInitializerComponent) == 0x0000C0, "Wrong size on USQGraphRAASInitializerComponent");

// Class Squad.SQCoreStateSpawnPointsListWidget
// 0x0050 (0x02D8 - 0x0288)
class USQCoreStateSpawnPointsListWidget : public USQCoreStateWidget
{
public:
	bool                                          bSpawnOnSelection;                                 // 0x0288(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1074[0x3];                                     // 0x0289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bIsSelected : 1;                                   // 0x028C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bSieged : 1;                                       // 0x028C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bSpawningEnabled : 1;                              // 0x028C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_1075[0x3];                                     // 0x028D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SpawnPointLocation;                                // 0x0290(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESQSpawnPointType                             SpawnPointType;                                    // 0x029C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1076[0x3];                                     // 0x029D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActivatedTimeStamp;                                // 0x02A0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1077[0x4];                                     // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             BaseTexture;                                       // 0x02A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             HABTexture;                                        // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             RallyTexture;                                      // 0x02B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             CacheTexture;                                      // 0x02C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASQGameSpawn*                           OwningGameSpawn;                                   // 0x02C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1078[0x8];                                     // 0x02D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnActivatedTimeStampChanged();
	void OnIsSelectedChanged();
	void OnSiegedChanged();
	void OnSpawningEnabledChanged();
	void OnSpawnPointLocationChanged();
	void OnSpawnPointTypeChanged();
	void SelectSpawnPoint();

	class UTexture2D* GetSpawnIcon() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCoreStateSpawnPointsListWidget">();
	}
	static class USQCoreStateSpawnPointsListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCoreStateSpawnPointsListWidget>();
	}
};
static_assert(alignof(USQCoreStateSpawnPointsListWidget) == 0x000008, "Wrong alignment on USQCoreStateSpawnPointsListWidget");
static_assert(sizeof(USQCoreStateSpawnPointsListWidget) == 0x0002D8, "Wrong size on USQCoreStateSpawnPointsListWidget");
static_assert(offsetof(USQCoreStateSpawnPointsListWidget, bSpawnOnSelection) == 0x000288, "Member 'USQCoreStateSpawnPointsListWidget::bSpawnOnSelection' has a wrong offset!");
static_assert(offsetof(USQCoreStateSpawnPointsListWidget, SpawnPointLocation) == 0x000290, "Member 'USQCoreStateSpawnPointsListWidget::SpawnPointLocation' has a wrong offset!");
static_assert(offsetof(USQCoreStateSpawnPointsListWidget, SpawnPointType) == 0x00029C, "Member 'USQCoreStateSpawnPointsListWidget::SpawnPointType' has a wrong offset!");
static_assert(offsetof(USQCoreStateSpawnPointsListWidget, ActivatedTimeStamp) == 0x0002A0, "Member 'USQCoreStateSpawnPointsListWidget::ActivatedTimeStamp' has a wrong offset!");
static_assert(offsetof(USQCoreStateSpawnPointsListWidget, BaseTexture) == 0x0002A8, "Member 'USQCoreStateSpawnPointsListWidget::BaseTexture' has a wrong offset!");
static_assert(offsetof(USQCoreStateSpawnPointsListWidget, HABTexture) == 0x0002B0, "Member 'USQCoreStateSpawnPointsListWidget::HABTexture' has a wrong offset!");
static_assert(offsetof(USQCoreStateSpawnPointsListWidget, RallyTexture) == 0x0002B8, "Member 'USQCoreStateSpawnPointsListWidget::RallyTexture' has a wrong offset!");
static_assert(offsetof(USQCoreStateSpawnPointsListWidget, CacheTexture) == 0x0002C0, "Member 'USQCoreStateSpawnPointsListWidget::CacheTexture' has a wrong offset!");
static_assert(offsetof(USQCoreStateSpawnPointsListWidget, OwningGameSpawn) == 0x0002C8, "Member 'USQCoreStateSpawnPointsListWidget::OwningGameSpawn' has a wrong offset!");

// Class Squad.SQCoreStateSquadListWidget
// 0x0008 (0x0290 - 0x0288)
class USQCoreStateSquadListWidget : public USQCoreStateWidget
{
public:
	EListLayout                                   ListLayout;                                        // 0x0288(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1079[0x7];                                     // 0x0289(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnListLayoutChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCoreStateSquadListWidget">();
	}
	static class USQCoreStateSquadListWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCoreStateSquadListWidget>();
	}
};
static_assert(alignof(USQCoreStateSquadListWidget) == 0x000008, "Wrong alignment on USQCoreStateSquadListWidget");
static_assert(sizeof(USQCoreStateSquadListWidget) == 0x000290, "Wrong size on USQCoreStateSquadListWidget");
static_assert(offsetof(USQCoreStateSquadListWidget, ListLayout) == 0x000288, "Member 'USQCoreStateSquadListWidget::ListLayout' has a wrong offset!");

// Class Squad.SQGuidanceControllerComponent
// 0x00A8 (0x0158 - 0x00B0)
class USQGuidanceControllerComponent final : public UActorComponent
{
public:
	uint8                                         Pad_107A[0x10];                                    // 0x00B0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQWeapon*                              OwnerWeapon;                                       // 0x00C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxConcurrentGuidableProjectiles;                  // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFromFireLocationUntilGuidanceLoss;         // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockFiringWhenGuidingProjectile;                 // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_107B[0x1F];                                    // 0x00D1(0x001F)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GuidanceControllerJitterSeed;                      // 0x00F0(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_107C[0x4];                                     // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EGuidanceLossReason, class USoundBase*>  ConnectionLossAudioCues;                           // 0x00F8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_107D[0x10];                                    // 0x0148(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class USQGuidanceComponent* GetFirstGuidanceComponent();
	void OnProjectileSpawned(class ASQProjectile* SpawnedProjectile);
	void OnRep_JitterSeed();
	void PlayConnectionLossEffects(const EGuidanceLossReason LossReason);
	void UnregisterGuidanceComponent(class USQGuidanceComponent* InGuidanceComponent, const EGuidanceLossReason LossReason);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGuidanceControllerComponent">();
	}
	static class USQGuidanceControllerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQGuidanceControllerComponent>();
	}
};
static_assert(alignof(USQGuidanceControllerComponent) == 0x000008, "Wrong alignment on USQGuidanceControllerComponent");
static_assert(sizeof(USQGuidanceControllerComponent) == 0x000158, "Wrong size on USQGuidanceControllerComponent");
static_assert(offsetof(USQGuidanceControllerComponent, OwnerWeapon) == 0x0000C0, "Member 'USQGuidanceControllerComponent::OwnerWeapon' has a wrong offset!");
static_assert(offsetof(USQGuidanceControllerComponent, MaxConcurrentGuidableProjectiles) == 0x0000C8, "Member 'USQGuidanceControllerComponent::MaxConcurrentGuidableProjectiles' has a wrong offset!");
static_assert(offsetof(USQGuidanceControllerComponent, DistanceFromFireLocationUntilGuidanceLoss) == 0x0000CC, "Member 'USQGuidanceControllerComponent::DistanceFromFireLocationUntilGuidanceLoss' has a wrong offset!");
static_assert(offsetof(USQGuidanceControllerComponent, bBlockFiringWhenGuidingProjectile) == 0x0000D0, "Member 'USQGuidanceControllerComponent::bBlockFiringWhenGuidingProjectile' has a wrong offset!");
static_assert(offsetof(USQGuidanceControllerComponent, GuidanceControllerJitterSeed) == 0x0000F0, "Member 'USQGuidanceControllerComponent::GuidanceControllerJitterSeed' has a wrong offset!");
static_assert(offsetof(USQGuidanceControllerComponent, ConnectionLossAudioCues) == 0x0000F8, "Member 'USQGuidanceControllerComponent::ConnectionLossAudioCues' has a wrong offset!");

// Class Squad.SQCoreStateSquadItemWidget
// 0x0050 (0x02E0 - 0x0290)
class USQCoreStateSquadItemWidget : public USQCoreStateSquadListWidget
{
public:
	class ASQSquadState*                          SquadState;                                        // 0x0290(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SquadId;                                           // 0x0298(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_107F[0x4];                                     // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SquadName;                                         // 0x02A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 LeaderName;                                        // 0x02B0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MemberNum;                                         // 0x02C0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxMembers;                                        // 0x02C4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsSelfInSquad;                                    // 0x02C8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsCommandSquad;                                   // 0x02C9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EJoinButtonState                              JoinButtonState;                                   // 0x02CA(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1080[0x5];                                     // 0x02CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQPlayerController*                    CachedSQPlayerController;                          // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1081[0x8];                                     // 0x02D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class ASQPlayerController* GetCachedSQPlayerController();
	void JoinSquad();
	void OnBanned(int32 Param_SquadId, float BanDuration);
	void OnIsCommandSquadChanged();
	void OnIsSelfInSquadChanged();
	void OnJoinButtonStateChanged();
	void OnLeaderNameChanged();
	void OnMaxMembersChanged();
	void OnMemberNumChanged();
	void OnSquadIdChanged();
	void OnSquadNameChanged();

	class UPanelWidget* GetMemberRoot(int32 FireTeamIndex) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCoreStateSquadItemWidget">();
	}
	static class USQCoreStateSquadItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCoreStateSquadItemWidget>();
	}
};
static_assert(alignof(USQCoreStateSquadItemWidget) == 0x000008, "Wrong alignment on USQCoreStateSquadItemWidget");
static_assert(sizeof(USQCoreStateSquadItemWidget) == 0x0002E0, "Wrong size on USQCoreStateSquadItemWidget");
static_assert(offsetof(USQCoreStateSquadItemWidget, SquadState) == 0x000290, "Member 'USQCoreStateSquadItemWidget::SquadState' has a wrong offset!");
static_assert(offsetof(USQCoreStateSquadItemWidget, SquadId) == 0x000298, "Member 'USQCoreStateSquadItemWidget::SquadId' has a wrong offset!");
static_assert(offsetof(USQCoreStateSquadItemWidget, SquadName) == 0x0002A0, "Member 'USQCoreStateSquadItemWidget::SquadName' has a wrong offset!");
static_assert(offsetof(USQCoreStateSquadItemWidget, LeaderName) == 0x0002B0, "Member 'USQCoreStateSquadItemWidget::LeaderName' has a wrong offset!");
static_assert(offsetof(USQCoreStateSquadItemWidget, MemberNum) == 0x0002C0, "Member 'USQCoreStateSquadItemWidget::MemberNum' has a wrong offset!");
static_assert(offsetof(USQCoreStateSquadItemWidget, MaxMembers) == 0x0002C4, "Member 'USQCoreStateSquadItemWidget::MaxMembers' has a wrong offset!");
static_assert(offsetof(USQCoreStateSquadItemWidget, bIsSelfInSquad) == 0x0002C8, "Member 'USQCoreStateSquadItemWidget::bIsSelfInSquad' has a wrong offset!");
static_assert(offsetof(USQCoreStateSquadItemWidget, bIsCommandSquad) == 0x0002C9, "Member 'USQCoreStateSquadItemWidget::bIsCommandSquad' has a wrong offset!");
static_assert(offsetof(USQCoreStateSquadItemWidget, JoinButtonState) == 0x0002CA, "Member 'USQCoreStateSquadItemWidget::JoinButtonState' has a wrong offset!");
static_assert(offsetof(USQCoreStateSquadItemWidget, CachedSQPlayerController) == 0x0002D0, "Member 'USQCoreStateSquadItemWidget::CachedSQPlayerController' has a wrong offset!");

// Class Squad.SQCoreStateSquadMemberWidget
// 0x0058 (0x02E8 - 0x0290)
class USQCoreStateSquadMemberWidget : public USQCoreStateSquadListWidget
{
public:
	int32                                         RootWidgetSquadId;                                 // 0x0290(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1083[0x4];                                     // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQPlayerState*                         PlayerState;                                       // 0x0298(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SquadId;                                           // 0x02A0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bIsPossessingPawn : 1;                             // 0x02A4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_1084[0x3];                                     // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsSquadLeader;                                    // 0x02A8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsFireTeamLeader;                                 // 0x02A9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1085[0x2];                                     // 0x02AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FireTeamIndex;                                     // 0x02AC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1086[0x4];                                     // 0x02B0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FireTeamPosition;                                  // 0x02B4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1087[0x8];                                     // 0x02B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USQRoleSettings*                        DeployRole;                                        // 0x02C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 PlayerName;                                        // 0x02C8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQVehicleUIStaticDataAsset*            CurrentVehicleData;                                // 0x02D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESQVoiceChannel                               VoipChannel;                                       // 0x02E0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsMuted;                                          // 0x02E1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsAlive;                                          // 0x02E2(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsBleeding;                                       // 0x02E3(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsWounded;                                        // 0x02E4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1088[0x3];                                     // 0x02E5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCurrentVehicleDataChanged();
	void OnDeployRoleChanged();
	void OnFireTeamIndexChanged();
	void OnFireTeamPositionChanged();
	void OnIsAliveChanged();
	void OnIsBleedingChanged();
	void OnIsFireTeamLeaderChanged();
	void OnIsMutedChanged();
	void OnIsPossessingPawnChanged();
	void OnIsSquadLeaderChanged();
	void OnIsWoundedChanged();
	void OnPlayerNameChanged();
	void OnSquadIdChanged();
	void OnVoipChannelChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCoreStateSquadMemberWidget">();
	}
	static class USQCoreStateSquadMemberWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCoreStateSquadMemberWidget>();
	}
};
static_assert(alignof(USQCoreStateSquadMemberWidget) == 0x000008, "Wrong alignment on USQCoreStateSquadMemberWidget");
static_assert(sizeof(USQCoreStateSquadMemberWidget) == 0x0002E8, "Wrong size on USQCoreStateSquadMemberWidget");
static_assert(offsetof(USQCoreStateSquadMemberWidget, RootWidgetSquadId) == 0x000290, "Member 'USQCoreStateSquadMemberWidget::RootWidgetSquadId' has a wrong offset!");
static_assert(offsetof(USQCoreStateSquadMemberWidget, PlayerState) == 0x000298, "Member 'USQCoreStateSquadMemberWidget::PlayerState' has a wrong offset!");
static_assert(offsetof(USQCoreStateSquadMemberWidget, SquadId) == 0x0002A0, "Member 'USQCoreStateSquadMemberWidget::SquadId' has a wrong offset!");
static_assert(offsetof(USQCoreStateSquadMemberWidget, bIsSquadLeader) == 0x0002A8, "Member 'USQCoreStateSquadMemberWidget::bIsSquadLeader' has a wrong offset!");
static_assert(offsetof(USQCoreStateSquadMemberWidget, bIsFireTeamLeader) == 0x0002A9, "Member 'USQCoreStateSquadMemberWidget::bIsFireTeamLeader' has a wrong offset!");
static_assert(offsetof(USQCoreStateSquadMemberWidget, FireTeamIndex) == 0x0002AC, "Member 'USQCoreStateSquadMemberWidget::FireTeamIndex' has a wrong offset!");
static_assert(offsetof(USQCoreStateSquadMemberWidget, FireTeamPosition) == 0x0002B4, "Member 'USQCoreStateSquadMemberWidget::FireTeamPosition' has a wrong offset!");
static_assert(offsetof(USQCoreStateSquadMemberWidget, DeployRole) == 0x0002C0, "Member 'USQCoreStateSquadMemberWidget::DeployRole' has a wrong offset!");
static_assert(offsetof(USQCoreStateSquadMemberWidget, PlayerName) == 0x0002C8, "Member 'USQCoreStateSquadMemberWidget::PlayerName' has a wrong offset!");
static_assert(offsetof(USQCoreStateSquadMemberWidget, CurrentVehicleData) == 0x0002D8, "Member 'USQCoreStateSquadMemberWidget::CurrentVehicleData' has a wrong offset!");
static_assert(offsetof(USQCoreStateSquadMemberWidget, VoipChannel) == 0x0002E0, "Member 'USQCoreStateSquadMemberWidget::VoipChannel' has a wrong offset!");
static_assert(offsetof(USQCoreStateSquadMemberWidget, bIsMuted) == 0x0002E1, "Member 'USQCoreStateSquadMemberWidget::bIsMuted' has a wrong offset!");
static_assert(offsetof(USQCoreStateSquadMemberWidget, bIsAlive) == 0x0002E2, "Member 'USQCoreStateSquadMemberWidget::bIsAlive' has a wrong offset!");
static_assert(offsetof(USQCoreStateSquadMemberWidget, bIsBleeding) == 0x0002E3, "Member 'USQCoreStateSquadMemberWidget::bIsBleeding' has a wrong offset!");
static_assert(offsetof(USQCoreStateSquadMemberWidget, bIsWounded) == 0x0002E4, "Member 'USQCoreStateSquadMemberWidget::bIsWounded' has a wrong offset!");

// Class Squad.SQProjectile
// 0x0250 (0x0478 - 0x0228)
class ASQProjectile : public AActor
{
public:
	class USphereComponent*                       CollisionComp;                                     // 0x0228(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UProjectileMovementComponent*           ProjectileMovement;                                // 0x0230(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                DamageTypeToApply;                                 // 0x0238(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             LastImpactHitResult;                               // 0x0240(0x0088)(BlueprintVisible, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bHasImpacted;                                      // 0x02C8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestroyOnImpact;                                  // 0x02C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAppliesSuppression;                               // 0x02CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1089[0x1];                                     // 0x02CB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CollisionSize;                                     // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_108A[0x2C];                                    // 0x02D0(0x002C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsExplosiveProjectile;                            // 0x02FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_108B[0x3];                                     // 0x02FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExplosiveBaseDamage;                               // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplosiveMinimumDamage;                            // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplosiveKillZoneRadius;                           // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplosiveDamageInnerRadius;                        // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplosiveDamageOuterRadius;                        // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplosiveDamageFalloff;                            // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArmorPenetrationDepthMillimeters;                  // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceDistanceAfterPenetrationMeters;               // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplosiveDamageDistanceFromImpactNormal;           // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_108C[0x4];                                     // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        ProjectileAC;                                      // 0x0328(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyPlayFlybySoundOnProjectile;                   // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_108D[0x7];                                     // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              FlybySound;                                        // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQSuppressionInfo>         SuppressionInfoClass;                              // 0x0340(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class USQPhysicalMaterial*, struct FSQProjectileImpactEffect> SpecificImpactEffects;                             // 0x0348(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class USQPhysicalMaterial*, struct FSQProjectileImpactEffect> SpecificThrowableEffects;                          // 0x0398(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class USQPhysicalMaterial*, struct FSQProjectileImpactEffect> SpecificExplosionEffects;                          // 0x03E8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSubclassOf<class USQPhysicalMaterialEffects> DefaultEffectsClass;                               // 0x0438(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClientAuthoritativeImpact;                        // 0x0440(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProxiesPredictImpact;                             // 0x0441(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_108E[0x6];                                     // 0x0442(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            DamageInstigatorController;                        // 0x0448(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_108F[0x10];                                    // 0x0450(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      AirExplosionPhysMat;                               // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1090[0x10];                                    // 0x0468(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BlueprintOnImpact(const struct FHitResult& HitResult);
	bool BPApplyExplosiveDamage(const struct FHitResult& LastHitResult, class AActor* DamageCauser, const TArray<class AActor*>& IgnoreActors);
	void DisableAndDestroy();
	float GetDamage();
	class ASQEquipableItem* GetWeapon();
	void OnImpact(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	bool PlayExplosionEffect(const struct FHitResult& ImpactHit);
	class UAudioComponent* PlayProjectileSound(class USoundCue* Sound);
	void SelfDestruct();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQProjectile">();
	}
	static class ASQProjectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQProjectile>();
	}
};
static_assert(alignof(ASQProjectile) == 0x000008, "Wrong alignment on ASQProjectile");
static_assert(sizeof(ASQProjectile) == 0x000478, "Wrong size on ASQProjectile");
static_assert(offsetof(ASQProjectile, CollisionComp) == 0x000228, "Member 'ASQProjectile::CollisionComp' has a wrong offset!");
static_assert(offsetof(ASQProjectile, ProjectileMovement) == 0x000230, "Member 'ASQProjectile::ProjectileMovement' has a wrong offset!");
static_assert(offsetof(ASQProjectile, DamageTypeToApply) == 0x000238, "Member 'ASQProjectile::DamageTypeToApply' has a wrong offset!");
static_assert(offsetof(ASQProjectile, LastImpactHitResult) == 0x000240, "Member 'ASQProjectile::LastImpactHitResult' has a wrong offset!");
static_assert(offsetof(ASQProjectile, bHasImpacted) == 0x0002C8, "Member 'ASQProjectile::bHasImpacted' has a wrong offset!");
static_assert(offsetof(ASQProjectile, bDestroyOnImpact) == 0x0002C9, "Member 'ASQProjectile::bDestroyOnImpact' has a wrong offset!");
static_assert(offsetof(ASQProjectile, bAppliesSuppression) == 0x0002CA, "Member 'ASQProjectile::bAppliesSuppression' has a wrong offset!");
static_assert(offsetof(ASQProjectile, CollisionSize) == 0x0002CC, "Member 'ASQProjectile::CollisionSize' has a wrong offset!");
static_assert(offsetof(ASQProjectile, bIsExplosiveProjectile) == 0x0002FC, "Member 'ASQProjectile::bIsExplosiveProjectile' has a wrong offset!");
static_assert(offsetof(ASQProjectile, ExplosiveBaseDamage) == 0x000300, "Member 'ASQProjectile::ExplosiveBaseDamage' has a wrong offset!");
static_assert(offsetof(ASQProjectile, ExplosiveMinimumDamage) == 0x000304, "Member 'ASQProjectile::ExplosiveMinimumDamage' has a wrong offset!");
static_assert(offsetof(ASQProjectile, ExplosiveKillZoneRadius) == 0x000308, "Member 'ASQProjectile::ExplosiveKillZoneRadius' has a wrong offset!");
static_assert(offsetof(ASQProjectile, ExplosiveDamageInnerRadius) == 0x00030C, "Member 'ASQProjectile::ExplosiveDamageInnerRadius' has a wrong offset!");
static_assert(offsetof(ASQProjectile, ExplosiveDamageOuterRadius) == 0x000310, "Member 'ASQProjectile::ExplosiveDamageOuterRadius' has a wrong offset!");
static_assert(offsetof(ASQProjectile, ExplosiveDamageFalloff) == 0x000314, "Member 'ASQProjectile::ExplosiveDamageFalloff' has a wrong offset!");
static_assert(offsetof(ASQProjectile, ArmorPenetrationDepthMillimeters) == 0x000318, "Member 'ASQProjectile::ArmorPenetrationDepthMillimeters' has a wrong offset!");
static_assert(offsetof(ASQProjectile, TraceDistanceAfterPenetrationMeters) == 0x00031C, "Member 'ASQProjectile::TraceDistanceAfterPenetrationMeters' has a wrong offset!");
static_assert(offsetof(ASQProjectile, ExplosiveDamageDistanceFromImpactNormal) == 0x000320, "Member 'ASQProjectile::ExplosiveDamageDistanceFromImpactNormal' has a wrong offset!");
static_assert(offsetof(ASQProjectile, ProjectileAC) == 0x000328, "Member 'ASQProjectile::ProjectileAC' has a wrong offset!");
static_assert(offsetof(ASQProjectile, bOnlyPlayFlybySoundOnProjectile) == 0x000330, "Member 'ASQProjectile::bOnlyPlayFlybySoundOnProjectile' has a wrong offset!");
static_assert(offsetof(ASQProjectile, FlybySound) == 0x000338, "Member 'ASQProjectile::FlybySound' has a wrong offset!");
static_assert(offsetof(ASQProjectile, SuppressionInfoClass) == 0x000340, "Member 'ASQProjectile::SuppressionInfoClass' has a wrong offset!");
static_assert(offsetof(ASQProjectile, SpecificImpactEffects) == 0x000348, "Member 'ASQProjectile::SpecificImpactEffects' has a wrong offset!");
static_assert(offsetof(ASQProjectile, SpecificThrowableEffects) == 0x000398, "Member 'ASQProjectile::SpecificThrowableEffects' has a wrong offset!");
static_assert(offsetof(ASQProjectile, SpecificExplosionEffects) == 0x0003E8, "Member 'ASQProjectile::SpecificExplosionEffects' has a wrong offset!");
static_assert(offsetof(ASQProjectile, DefaultEffectsClass) == 0x000438, "Member 'ASQProjectile::DefaultEffectsClass' has a wrong offset!");
static_assert(offsetof(ASQProjectile, bClientAuthoritativeImpact) == 0x000440, "Member 'ASQProjectile::bClientAuthoritativeImpact' has a wrong offset!");
static_assert(offsetof(ASQProjectile, bProxiesPredictImpact) == 0x000441, "Member 'ASQProjectile::bProxiesPredictImpact' has a wrong offset!");
static_assert(offsetof(ASQProjectile, DamageInstigatorController) == 0x000448, "Member 'ASQProjectile::DamageInstigatorController' has a wrong offset!");
static_assert(offsetof(ASQProjectile, AirExplosionPhysMat) == 0x000460, "Member 'ASQProjectile::AirExplosionPhysMat' has a wrong offset!");

// Class Squad.SQGrenadeProjectile
// 0x0040 (0x04B8 - 0x0478)
class ASQGrenadeProjectile : public ASQProjectile
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComp;                                  // 0x0478(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UChildActorComponent*                   Shockwave;                                         // 0x0480(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumVelocityToPlayThrowableEffects;             // 0x0488(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsExploding;                                      // 0x048C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1095[0x3];                                     // 0x048D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FuseTime;                                          // 0x0490(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExplodeOnFuse;                                    // 0x0494(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExplodeOnImpact;                                  // 0x0495(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExplodeOnLifeSpanExpired;                         // 0x0496(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExplodeOnLifeSpanExpiredAfterImpact;              // 0x0497(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        DefaultExplosionEffect;                            // 0x0498(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNiagaraSystem*                         NiagaraDefaultExplosionEffect;                     // 0x04A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USoundCue*                              DefaultExplosionSound;                             // 0x04A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         GroundTraceLength;                                 // 0x04B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1096[0x4];                                     // 0x04B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_Explode();
	void Explode();
	bool PlayThrowableImpactEffect(const struct FHitResult& ImpactHit);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGrenadeProjectile">();
	}
	static class ASQGrenadeProjectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQGrenadeProjectile>();
	}
};
static_assert(alignof(ASQGrenadeProjectile) == 0x000008, "Wrong alignment on ASQGrenadeProjectile");
static_assert(sizeof(ASQGrenadeProjectile) == 0x0004B8, "Wrong size on ASQGrenadeProjectile");
static_assert(offsetof(ASQGrenadeProjectile, SkeletalMeshComp) == 0x000478, "Member 'ASQGrenadeProjectile::SkeletalMeshComp' has a wrong offset!");
static_assert(offsetof(ASQGrenadeProjectile, Shockwave) == 0x000480, "Member 'ASQGrenadeProjectile::Shockwave' has a wrong offset!");
static_assert(offsetof(ASQGrenadeProjectile, MinimumVelocityToPlayThrowableEffects) == 0x000488, "Member 'ASQGrenadeProjectile::MinimumVelocityToPlayThrowableEffects' has a wrong offset!");
static_assert(offsetof(ASQGrenadeProjectile, bIsExploding) == 0x00048C, "Member 'ASQGrenadeProjectile::bIsExploding' has a wrong offset!");
static_assert(offsetof(ASQGrenadeProjectile, FuseTime) == 0x000490, "Member 'ASQGrenadeProjectile::FuseTime' has a wrong offset!");
static_assert(offsetof(ASQGrenadeProjectile, bExplodeOnFuse) == 0x000494, "Member 'ASQGrenadeProjectile::bExplodeOnFuse' has a wrong offset!");
static_assert(offsetof(ASQGrenadeProjectile, bExplodeOnImpact) == 0x000495, "Member 'ASQGrenadeProjectile::bExplodeOnImpact' has a wrong offset!");
static_assert(offsetof(ASQGrenadeProjectile, bExplodeOnLifeSpanExpired) == 0x000496, "Member 'ASQGrenadeProjectile::bExplodeOnLifeSpanExpired' has a wrong offset!");
static_assert(offsetof(ASQGrenadeProjectile, bExplodeOnLifeSpanExpiredAfterImpact) == 0x000497, "Member 'ASQGrenadeProjectile::bExplodeOnLifeSpanExpiredAfterImpact' has a wrong offset!");
static_assert(offsetof(ASQGrenadeProjectile, DefaultExplosionEffect) == 0x000498, "Member 'ASQGrenadeProjectile::DefaultExplosionEffect' has a wrong offset!");
static_assert(offsetof(ASQGrenadeProjectile, NiagaraDefaultExplosionEffect) == 0x0004A0, "Member 'ASQGrenadeProjectile::NiagaraDefaultExplosionEffect' has a wrong offset!");
static_assert(offsetof(ASQGrenadeProjectile, DefaultExplosionSound) == 0x0004A8, "Member 'ASQGrenadeProjectile::DefaultExplosionSound' has a wrong offset!");
static_assert(offsetof(ASQGrenadeProjectile, GroundTraceLength) == 0x0004B0, "Member 'ASQGrenadeProjectile::GroundTraceLength' has a wrong offset!");

// Class Squad.SQCountParameterBase
// 0x0008 (0x0068 - 0x0060)
class USQCountParameterBase : public USQRestriction
{
public:
	ESQScalingCountingMode                        Operation;                                         // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseForTeam;                                        // 0x0061(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseForPlayer;                                      // 0x0062(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1098[0x5];                                     // 0x0063(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool TryGetValueForPlayer(const class ASQPlayerController* InPlayer, int32* OutValue) const;
	bool TryGetValueForTeam(const class ASQTeam* InTeam, int32* OutValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCountParameterBase">();
	}
	static class USQCountParameterBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCountParameterBase>();
	}
};
static_assert(alignof(USQCountParameterBase) == 0x000008, "Wrong alignment on USQCountParameterBase");
static_assert(sizeof(USQCountParameterBase) == 0x000068, "Wrong size on USQCountParameterBase");
static_assert(offsetof(USQCountParameterBase, Operation) == 0x000060, "Member 'USQCountParameterBase::Operation' has a wrong offset!");
static_assert(offsetof(USQCountParameterBase, UseForTeam) == 0x000061, "Member 'USQCountParameterBase::UseForTeam' has a wrong offset!");
static_assert(offsetof(USQCountParameterBase, UseForPlayer) == 0x000062, "Member 'USQCountParameterBase::UseForPlayer' has a wrong offset!");

// Class Squad.RouteCombinerPredicate
// 0x0000 (0x0028 - 0x0028)
class URouteCombinerPredicate : public UObject
{
public:
	void Execute(TArray<struct FSQRoute2>& NewRoutes, TArray<struct FSQRoute2>& Routes) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RouteCombinerPredicate">();
	}
	static class URouteCombinerPredicate* GetDefaultObj()
	{
		return GetDefaultObjImpl<URouteCombinerPredicate>();
	}
};
static_assert(alignof(URouteCombinerPredicate) == 0x000008, "Wrong alignment on URouteCombinerPredicate");
static_assert(sizeof(URouteCombinerPredicate) == 0x000028, "Wrong size on URouteCombinerPredicate");

// Class Squad.SQCountParameter
// 0x0018 (0x0080 - 0x0068)
class USQCountParameter : public USQCountParameterBase
{
public:
	bool                                          UseCurve;                                          // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109B[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Curve;                                             // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueToReach;                                      // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FixedAvailability;                                 // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool TryGetInputValueForPlayer(const class ASQPlayerController* InPlayer, float* OutValue) const;
	bool TryGetInputValueForTeam(const class ASQTeam* InTeam, float* OutValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCountParameter">();
	}
	static class USQCountParameter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCountParameter>();
	}
};
static_assert(alignof(USQCountParameter) == 0x000008, "Wrong alignment on USQCountParameter");
static_assert(sizeof(USQCountParameter) == 0x000080, "Wrong size on USQCountParameter");
static_assert(offsetof(USQCountParameter, UseCurve) == 0x000068, "Member 'USQCountParameter::UseCurve' has a wrong offset!");
static_assert(offsetof(USQCountParameter, Curve) == 0x000070, "Member 'USQCountParameter::Curve' has a wrong offset!");
static_assert(offsetof(USQCountParameter, ValueToReach) == 0x000078, "Member 'USQCountParameter::ValueToReach' has a wrong offset!");
static_assert(offsetof(USQCountParameter, FixedAvailability) == 0x00007C, "Member 'USQCountParameter::FixedAvailability' has a wrong offset!");

// Class Squad.SQCountParameter_Legacy
// 0x0038 (0x00A0 - 0x0068)
class USQCountParameter_Legacy final : public USQCountParameterBase
{
public:
	TArray<struct FSQRoleGroupLimit>              GroupLimits;                                       // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSQRoleLimit                           RoleLimit;                                         // 0x0078(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_109E[0x4];                                     // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FSQRoleGroupLimit GetGroupLimit() const;
	bool IsPartOfRoleGroup(const class USQRoleSettings* InRole) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCountParameter_Legacy">();
	}
	static class USQCountParameter_Legacy* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCountParameter_Legacy>();
	}
};
static_assert(alignof(USQCountParameter_Legacy) == 0x000008, "Wrong alignment on USQCountParameter_Legacy");
static_assert(sizeof(USQCountParameter_Legacy) == 0x0000A0, "Wrong size on USQCountParameter_Legacy");
static_assert(offsetof(USQCountParameter_Legacy, GroupLimits) == 0x000068, "Member 'USQCountParameter_Legacy::GroupLimits' has a wrong offset!");
static_assert(offsetof(USQCountParameter_Legacy, RoleLimit) == 0x000078, "Member 'USQCountParameter_Legacy::RoleLimit' has a wrong offset!");

// Class Squad.SQMapMarkerInputComponent
// 0x0000 (0x00B0 - 0x00B0)
class USQMapMarkerInputComponent final : public UActorComponent
{
public:
	void RefreshMarkerWidgets();
	void ServerRequestMapMarker(const struct FSQMapMarkerGameplayData& MarkerGameplayData);
	void ServerRequestRemoveMapMarker(uint8 ID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapMarkerInputComponent">();
	}
	static class USQMapMarkerInputComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapMarkerInputComponent>();
	}
};
static_assert(alignof(USQMapMarkerInputComponent) == 0x000008, "Wrong alignment on USQMapMarkerInputComponent");
static_assert(sizeof(USQMapMarkerInputComponent) == 0x0000B0, "Wrong size on USQMapMarkerInputComponent");

// Class Squad.SQCrashReportSubsystem
// 0x0000 (0x0030 - 0x0030)
class USQCrashReportSubsystem : public UGameInstanceSubsystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCrashReportSubsystem">();
	}
	static class USQCrashReportSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCrashReportSubsystem>();
	}
};
static_assert(alignof(USQCrashReportSubsystem) == 0x000008, "Wrong alignment on USQCrashReportSubsystem");
static_assert(sizeof(USQCrashReportSubsystem) == 0x000030, "Wrong size on USQCrashReportSubsystem");

// Class Squad.SQCreateSquadButton
// 0x0030 (0x0350 - 0x0320)
class USQCreateSquadButton final : public USQBaseButton
{
public:
	bool                                          bUsesCustomName;                                   // 0x0320(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A0[0x7];                                     // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQPlayerState*                         OwnerPlayerState;                                  // 0x0328(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerController*                    OwnerPlayerController;                             // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEditableTextBox*                       SquadNameTextBox;                                  // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnNewSquadCreated;                                 // 0x0340(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void SquadNameTextChanged(const class FText& Text);
	void SquadNameTextCommit(const class FText& Text, ETextCommit CommitMethodEnum);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCreateSquadButton">();
	}
	static class USQCreateSquadButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCreateSquadButton>();
	}
};
static_assert(alignof(USQCreateSquadButton) == 0x000008, "Wrong alignment on USQCreateSquadButton");
static_assert(sizeof(USQCreateSquadButton) == 0x000350, "Wrong size on USQCreateSquadButton");
static_assert(offsetof(USQCreateSquadButton, bUsesCustomName) == 0x000320, "Member 'USQCreateSquadButton::bUsesCustomName' has a wrong offset!");
static_assert(offsetof(USQCreateSquadButton, OwnerPlayerState) == 0x000328, "Member 'USQCreateSquadButton::OwnerPlayerState' has a wrong offset!");
static_assert(offsetof(USQCreateSquadButton, OwnerPlayerController) == 0x000330, "Member 'USQCreateSquadButton::OwnerPlayerController' has a wrong offset!");
static_assert(offsetof(USQCreateSquadButton, SquadNameTextBox) == 0x000338, "Member 'USQCreateSquadButton::SquadNameTextBox' has a wrong offset!");
static_assert(offsetof(USQCreateSquadButton, OnNewSquadCreated) == 0x000340, "Member 'USQCreateSquadButton::OnNewSquadCreated' has a wrong offset!");

// Class Squad.SQChatBoxInfo
// 0x0038 (0x0060 - 0x0028)
class USQChatBoxInfo final : public UObject
{
public:
	class UFont*                                  Font;                                              // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSQHUDMessage>                  Messages;                                          // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector2D                              MessageBoxLocation;                                // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNumberOfMessagesToShow;                         // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MessagesLifetime;                                  // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MessagesFadeTime;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTextHorizontalAlignment                    MessageHorizontalAlignment;                        // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTextVerticalAlignment                      MessageVerticalAlignment;                          // 0x0055(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOutlineMessages;                                  // 0x0056(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScrollUp;                                         // 0x0057(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextScale;                                         // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A2[0x4];                                     // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQChatBoxInfo">();
	}
	static class USQChatBoxInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQChatBoxInfo>();
	}
};
static_assert(alignof(USQChatBoxInfo) == 0x000008, "Wrong alignment on USQChatBoxInfo");
static_assert(sizeof(USQChatBoxInfo) == 0x000060, "Wrong size on USQChatBoxInfo");
static_assert(offsetof(USQChatBoxInfo, Font) == 0x000028, "Member 'USQChatBoxInfo::Font' has a wrong offset!");
static_assert(offsetof(USQChatBoxInfo, Messages) == 0x000030, "Member 'USQChatBoxInfo::Messages' has a wrong offset!");
static_assert(offsetof(USQChatBoxInfo, MessageBoxLocation) == 0x000040, "Member 'USQChatBoxInfo::MessageBoxLocation' has a wrong offset!");
static_assert(offsetof(USQChatBoxInfo, MaxNumberOfMessagesToShow) == 0x000048, "Member 'USQChatBoxInfo::MaxNumberOfMessagesToShow' has a wrong offset!");
static_assert(offsetof(USQChatBoxInfo, MessagesLifetime) == 0x00004C, "Member 'USQChatBoxInfo::MessagesLifetime' has a wrong offset!");
static_assert(offsetof(USQChatBoxInfo, MessagesFadeTime) == 0x000050, "Member 'USQChatBoxInfo::MessagesFadeTime' has a wrong offset!");
static_assert(offsetof(USQChatBoxInfo, MessageHorizontalAlignment) == 0x000054, "Member 'USQChatBoxInfo::MessageHorizontalAlignment' has a wrong offset!");
static_assert(offsetof(USQChatBoxInfo, MessageVerticalAlignment) == 0x000055, "Member 'USQChatBoxInfo::MessageVerticalAlignment' has a wrong offset!");
static_assert(offsetof(USQChatBoxInfo, bOutlineMessages) == 0x000056, "Member 'USQChatBoxInfo::bOutlineMessages' has a wrong offset!");
static_assert(offsetof(USQChatBoxInfo, bScrollUp) == 0x000057, "Member 'USQChatBoxInfo::bScrollUp' has a wrong offset!");
static_assert(offsetof(USQChatBoxInfo, TextScale) == 0x000058, "Member 'USQChatBoxInfo::TextScale' has a wrong offset!");

// Class Squad.SQCustomizationScreen
// 0x0080 (0x02E0 - 0x0260)
class USQCustomizationScreen : public UUserWidget
{
public:
	TDelegate<void(struct FODKBazaarPurchaseCompletedData& PurchaseData)> OnPurchase;                                        // 0x0260(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class USQEmoteItemWidget*>             EmoteItemWidgets;                                  // 0x0270(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class USQWeaponSkinWidget*>            WeaponSkinItemWidgets;                             // 0x0280(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSubclassOf<class USQEmoteItemWidget>         EmoteWidgetItemClass;                              // 0x0290(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQWeaponSkinWidget>        WeaponSkinWidgetItemClass;                         // 0x0298(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQFactionItemWidget>       FactionWidgetItemClass;                            // 0x02A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQFaction>                 FactionClass;                                      // 0x02A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             FactionTable;                                      // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEmotesDataTable*                     EmotesDataTable;                                   // 0x02B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnNewEquippableDelegate;                           // 0x02C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UUniformGridPanel*                      StoreGrid;                                         // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBundleCategory                               CurrentCategory;                                   // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A3[0x7];                                     // 0x02D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateEmotesGrid(class UUniformGridPanel* GridParent, int32 UniformSize);
	void CreateEmotesGridFromBundle(class UUniformGridPanel* GridParent, int32 UniformSize, class UODKBazaarBundle* Bundle, bool bFlip);
	void CreateEmotesList(class UListView* ListParent);
	void CreateFactionGrid(class UUniformGridPanel* GridParent, int32 UniformSize, bool bOnlyShowFactionsWithOwnedSkins);
	void CreateWeaponSkinGrid(class UUniformGridPanel* GridParent, int32 UniformSize);
	void CreateWeaponSkinsGridFromBundle(class UUniformGridPanel* GridParent, int32 UniformSize, class UODKBazaarBundle* Bundle, bool bFlip);
	void CreateWeaponSkinsGridFromFaction(class UUniformGridPanel* GridParent, int32 UniformSize, const class FName& FactionName, bool bShowOnlyOwned, bool bFlip);
	TArray<class USQEmoteItemWidget*> GetOwnedEmotesAsWidget();
	void OnEmoteHovered(class USQEmotesData* EmoteData);
	void OnEmoteSelected(class USQEmotesData* EmoteData);
	void OnFactionHovered(class FName FactionName);
	void OnFactionSelected(class FName FactionName);
	void OnPurchaseCompleted(const struct FODKBazaarPurchaseCompletedData& PurchaseCompletedData);
	void OnWeaponSkinHovered(class USQItemSkinCollection* SkinData);
	void OnWeaponSkinSelected(const class FName& SkinName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQCustomizationScreen">();
	}
	static class USQCustomizationScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQCustomizationScreen>();
	}
};
static_assert(alignof(USQCustomizationScreen) == 0x000008, "Wrong alignment on USQCustomizationScreen");
static_assert(sizeof(USQCustomizationScreen) == 0x0002E0, "Wrong size on USQCustomizationScreen");
static_assert(offsetof(USQCustomizationScreen, OnPurchase) == 0x000260, "Member 'USQCustomizationScreen::OnPurchase' has a wrong offset!");
static_assert(offsetof(USQCustomizationScreen, EmoteItemWidgets) == 0x000270, "Member 'USQCustomizationScreen::EmoteItemWidgets' has a wrong offset!");
static_assert(offsetof(USQCustomizationScreen, WeaponSkinItemWidgets) == 0x000280, "Member 'USQCustomizationScreen::WeaponSkinItemWidgets' has a wrong offset!");
static_assert(offsetof(USQCustomizationScreen, EmoteWidgetItemClass) == 0x000290, "Member 'USQCustomizationScreen::EmoteWidgetItemClass' has a wrong offset!");
static_assert(offsetof(USQCustomizationScreen, WeaponSkinWidgetItemClass) == 0x000298, "Member 'USQCustomizationScreen::WeaponSkinWidgetItemClass' has a wrong offset!");
static_assert(offsetof(USQCustomizationScreen, FactionWidgetItemClass) == 0x0002A0, "Member 'USQCustomizationScreen::FactionWidgetItemClass' has a wrong offset!");
static_assert(offsetof(USQCustomizationScreen, FactionClass) == 0x0002A8, "Member 'USQCustomizationScreen::FactionClass' has a wrong offset!");
static_assert(offsetof(USQCustomizationScreen, FactionTable) == 0x0002B0, "Member 'USQCustomizationScreen::FactionTable' has a wrong offset!");
static_assert(offsetof(USQCustomizationScreen, EmotesDataTable) == 0x0002B8, "Member 'USQCustomizationScreen::EmotesDataTable' has a wrong offset!");
static_assert(offsetof(USQCustomizationScreen, OnNewEquippableDelegate) == 0x0002C0, "Member 'USQCustomizationScreen::OnNewEquippableDelegate' has a wrong offset!");
static_assert(offsetof(USQCustomizationScreen, StoreGrid) == 0x0002D0, "Member 'USQCustomizationScreen::StoreGrid' has a wrong offset!");
static_assert(offsetof(USQCustomizationScreen, CurrentCategory) == 0x0002D8, "Member 'USQCustomizationScreen::CurrentCategory' has a wrong offset!");

// Class Squad.SQDamageType_Collision
// 0x0000 (0x0048 - 0x0048)
class USQDamageType_Collision final : public USQDamageType
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDamageType_Collision">();
	}
	static class USQDamageType_Collision* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQDamageType_Collision>();
	}
};
static_assert(alignof(USQDamageType_Collision) == 0x000008, "Wrong alignment on USQDamageType_Collision");
static_assert(sizeof(USQDamageType_Collision) == 0x000048, "Wrong size on USQDamageType_Collision");

// Class Squad.SQMapIconWidget
// 0x0020 (0x0280 - 0x0260)
class USQMapIconWidget : public UUserWidget
{
public:
	class USQMapItemComponent*                    RefItem;                                           // 0x0260(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapZOrder;                                         // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10AC[0x4];                                     // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USQToolTipBaseWidget>       TooltipType;                                       // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQMap*                                 ParentMap;                                         // 0x0278(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool IsMarkerVisible();

	struct FLinearColor GetEnemyColor() const;
	struct FLinearColor GetFriendlyColor() const;
	struct FLinearColor GetNeutralColor() const;
	struct FLinearColor GetSquadColor() const;
	bool ShouldMarkerUpdate() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapIconWidget">();
	}
	static class USQMapIconWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapIconWidget>();
	}
};
static_assert(alignof(USQMapIconWidget) == 0x000008, "Wrong alignment on USQMapIconWidget");
static_assert(sizeof(USQMapIconWidget) == 0x000280, "Wrong size on USQMapIconWidget");
static_assert(offsetof(USQMapIconWidget, RefItem) == 0x000260, "Member 'USQMapIconWidget::RefItem' has a wrong offset!");
static_assert(offsetof(USQMapIconWidget, MapZOrder) == 0x000268, "Member 'USQMapIconWidget::MapZOrder' has a wrong offset!");
static_assert(offsetof(USQMapIconWidget, TooltipType) == 0x000270, "Member 'USQMapIconWidget::TooltipType' has a wrong offset!");
static_assert(offsetof(USQMapIconWidget, ParentMap) == 0x000278, "Member 'USQMapIconWidget::ParentMap' has a wrong offset!");

// Class Squad.SQMapPawnIconWidget
// 0x0018 (0x0298 - 0x0280)
class USQMapPawnIconWidget : public USQMapIconWidget
{
public:
	bool                                          bIsSL;                                             // 0x0280(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInSameSquad;                                    // 0x0281(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInSameTeam;                                     // 0x0282(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10AD[0x5];                                     // 0x0283(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQTeamState*                           CurrentTeam;                                       // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSelf;                                           // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10AE[0x7];                                     // 0x0291(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class ASQPlayerState* GetWidgetPlayerState();
	void UpdateIsInSameSquad();
	void UpdateIsInSameTeam();
	void UpdateIsSelf();
	void UpdateIsSl();
	void UpdateTeam();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapPawnIconWidget">();
	}
	static class USQMapPawnIconWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapPawnIconWidget>();
	}
};
static_assert(alignof(USQMapPawnIconWidget) == 0x000008, "Wrong alignment on USQMapPawnIconWidget");
static_assert(sizeof(USQMapPawnIconWidget) == 0x000298, "Wrong size on USQMapPawnIconWidget");
static_assert(offsetof(USQMapPawnIconWidget, bIsSL) == 0x000280, "Member 'USQMapPawnIconWidget::bIsSL' has a wrong offset!");
static_assert(offsetof(USQMapPawnIconWidget, bIsInSameSquad) == 0x000281, "Member 'USQMapPawnIconWidget::bIsInSameSquad' has a wrong offset!");
static_assert(offsetof(USQMapPawnIconWidget, bIsInSameTeam) == 0x000282, "Member 'USQMapPawnIconWidget::bIsInSameTeam' has a wrong offset!");
static_assert(offsetof(USQMapPawnIconWidget, CurrentTeam) == 0x000288, "Member 'USQMapPawnIconWidget::CurrentTeam' has a wrong offset!");
static_assert(offsetof(USQMapPawnIconWidget, bIsSelf) == 0x000290, "Member 'USQMapPawnIconWidget::bIsSelf' has a wrong offset!");

// Class Squad.SQMapSoldierIconWidget
// 0x0010 (0x02A8 - 0x0298)
class USQMapSoldierIconWidget : public USQMapPawnIconWidget
{
public:
	bool                                          bIsSelfMedic;                                      // 0x0298(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWithinMedicRange;                               // 0x0299(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10AF[0x2];                                     // 0x029A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MedicRange;                                        // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMedic;                                          // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAlive;                                          // 0x02A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBleeding;                                       // 0x02A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInVehicle;                                      // 0x02A3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10B0[0x4];                                     // 0x02A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UpdateIsAlive();
	void UpdateIsBleeding();
	void UpdateIsInVehicle();
	void UpdateIsMedic();
	void UpdateIsSelfMedic();
	void UpdateIsWithinMedicRange();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapSoldierIconWidget">();
	}
	static class USQMapSoldierIconWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapSoldierIconWidget>();
	}
};
static_assert(alignof(USQMapSoldierIconWidget) == 0x000008, "Wrong alignment on USQMapSoldierIconWidget");
static_assert(sizeof(USQMapSoldierIconWidget) == 0x0002A8, "Wrong size on USQMapSoldierIconWidget");
static_assert(offsetof(USQMapSoldierIconWidget, bIsSelfMedic) == 0x000298, "Member 'USQMapSoldierIconWidget::bIsSelfMedic' has a wrong offset!");
static_assert(offsetof(USQMapSoldierIconWidget, bIsWithinMedicRange) == 0x000299, "Member 'USQMapSoldierIconWidget::bIsWithinMedicRange' has a wrong offset!");
static_assert(offsetof(USQMapSoldierIconWidget, MedicRange) == 0x00029C, "Member 'USQMapSoldierIconWidget::MedicRange' has a wrong offset!");
static_assert(offsetof(USQMapSoldierIconWidget, bIsMedic) == 0x0002A0, "Member 'USQMapSoldierIconWidget::bIsMedic' has a wrong offset!");
static_assert(offsetof(USQMapSoldierIconWidget, bIsAlive) == 0x0002A1, "Member 'USQMapSoldierIconWidget::bIsAlive' has a wrong offset!");
static_assert(offsetof(USQMapSoldierIconWidget, bIsBleeding) == 0x0002A2, "Member 'USQMapSoldierIconWidget::bIsBleeding' has a wrong offset!");
static_assert(offsetof(USQMapSoldierIconWidget, bIsInVehicle) == 0x0002A3, "Member 'USQMapSoldierIconWidget::bIsInVehicle' has a wrong offset!");

// Class Squad.SQDamageType_Explosive
// 0x0000 (0x0048 - 0x0048)
class USQDamageType_Explosive : public USQDamageType
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDamageType_Explosive">();
	}
	static class USQDamageType_Explosive* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQDamageType_Explosive>();
	}
};
static_assert(alignof(USQDamageType_Explosive) == 0x000008, "Wrong alignment on USQDamageType_Explosive");
static_assert(sizeof(USQDamageType_Explosive) == 0x000048, "Wrong size on USQDamageType_Explosive");

// Class Squad.SQDamageType_ExplosiveRocket
// 0x0000 (0x0048 - 0x0048)
class USQDamageType_ExplosiveRocket final : public USQDamageType_Explosive
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDamageType_ExplosiveRocket">();
	}
	static class USQDamageType_ExplosiveRocket* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQDamageType_ExplosiveRocket>();
	}
};
static_assert(alignof(USQDamageType_ExplosiveRocket) == 0x000008, "Wrong alignment on USQDamageType_ExplosiveRocket");
static_assert(sizeof(USQDamageType_ExplosiveRocket) == 0x000048, "Wrong size on USQDamageType_ExplosiveRocket");

// Class Squad.SQMapMarkerBase
// 0x00F0 (0x0350 - 0x0260)
class USQMapMarkerBase : public UUserWidget
{
public:
	class UImage*                                 MarkerImage;                                       // 0x0260(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanelSlot*                       CanvasPanelSlot;                                   // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimationEpsilon;                                  // 0x0270(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10B1[0x4];                                     // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQColorsDataAsset*                     ColorsDataAsset;                                   // 0x0278(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSQMapMarkerVisualData                 MarkerData;                                        // 0x0280(0x00C8)(BlueprintVisible, BlueprintReadOnly, NoDestructor, ExposeOnSpawn, NativeAccessSpecifierPrivate)
	bool                                          bHasFaded;                                         // 0x0348(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10B2[0x7];                                     // 0x0349(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FSQMapMarkerVisualData GetMapMarkerData();
	void OnHasFadedChanged();
	void OnScaleChanged(float ScaleValue);
	void SetupMapMarker(class UCanvasPanelSlot* PanelSlot);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapMarkerBase">();
	}
	static class USQMapMarkerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapMarkerBase>();
	}
};
static_assert(alignof(USQMapMarkerBase) == 0x000008, "Wrong alignment on USQMapMarkerBase");
static_assert(sizeof(USQMapMarkerBase) == 0x000350, "Wrong size on USQMapMarkerBase");
static_assert(offsetof(USQMapMarkerBase, MarkerImage) == 0x000260, "Member 'USQMapMarkerBase::MarkerImage' has a wrong offset!");
static_assert(offsetof(USQMapMarkerBase, CanvasPanelSlot) == 0x000268, "Member 'USQMapMarkerBase::CanvasPanelSlot' has a wrong offset!");
static_assert(offsetof(USQMapMarkerBase, AnimationEpsilon) == 0x000270, "Member 'USQMapMarkerBase::AnimationEpsilon' has a wrong offset!");
static_assert(offsetof(USQMapMarkerBase, ColorsDataAsset) == 0x000278, "Member 'USQMapMarkerBase::ColorsDataAsset' has a wrong offset!");
static_assert(offsetof(USQMapMarkerBase, MarkerData) == 0x000280, "Member 'USQMapMarkerBase::MarkerData' has a wrong offset!");
static_assert(offsetof(USQMapMarkerBase, bHasFaded) == 0x000348, "Member 'USQMapMarkerBase::bHasFaded' has a wrong offset!");

// Class Squad.SQDamageType_Fall
// 0x0000 (0x0048 - 0x0048)
class USQDamageType_Fall final : public USQDamageType
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDamageType_Fall">();
	}
	static class USQDamageType_Fall* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQDamageType_Fall>();
	}
};
static_assert(alignof(USQDamageType_Fall) == 0x000008, "Wrong alignment on USQDamageType_Fall");
static_assert(sizeof(USQDamageType_Fall) == 0x000048, "Wrong size on USQDamageType_Fall");

// Class Squad.SQDamageType_HeatExplosive
// 0x0000 (0x0048 - 0x0048)
class USQDamageType_HeatExplosive final : public USQDamageType
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDamageType_HeatExplosive">();
	}
	static class USQDamageType_HeatExplosive* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQDamageType_HeatExplosive>();
	}
};
static_assert(alignof(USQDamageType_HeatExplosive) == 0x000008, "Wrong alignment on USQDamageType_HeatExplosive");
static_assert(sizeof(USQDamageType_HeatExplosive) == 0x000048, "Wrong size on USQDamageType_HeatExplosive");

// Class Squad.SQMovementComponentBase
// 0x00E8 (0x0198 - 0x00B0)
class USQMovementComponentBase : public UActorComponent
{
public:
	uint8                                         Pad_10B3[0x20];                                    // 0x00B0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxMoveDeltaTime;                                  // 0x00D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VectorEqualityTolerance;                           // 0x00D4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelDotThresholdCombine;                          // 0x00D8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelDotThreshold;                                 // 0x00DC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelMagThreshold;                                 // 0x00E0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularErrorTolerance;                             // 0x00E4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetworkMaxSmoothUpdateDistance;                    // 0x00E8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinCorrectionDelay;                                // 0x00EC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NetworkNoSmoothUpdateDistance;                     // 0x00F0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVectorQuantization                           LocationQuantizationLevel;                         // 0x00F4(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVectorQuantization                           VelocityQuantizationLevel;                         // 0x00F5(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVectorQuantization                           AccelerationQuantizationLevel;                     // 0x00F6(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERotatorQuantization                          RotationQuantizationLevel;                         // 0x00F7(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OwnerActor;                                        // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AController*                            Controller;                                        // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10B4[0x48];                                    // 0x0108(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQRepMovement                         ReplicatedMovement;                                // 0x0150(0x0040)(Net, RepNotify, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0190(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10B5[0x4];                                     // 0x0194(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClientAckGoodMove(float Timestamp);
	void ClientAdjustPosition(float Timestamp, const struct FVector& LocationZeroBased, const struct FVector& InVelocity);
	void ClientAdjustPositionAndRotation(const float Timestamp, const struct FVector& LocationZeroBased, const struct FVector& InVelocity, const struct FRotator& Rotation);
	void OnRep_Movement();
	void ServerMove(const TArray<uint8>& Move);
	void ServerMoveDual(const TArray<uint8>& Move1, const TArray<uint8>& Move2);
	void ServerMoveOld(const TArray<uint8>& Move);

	const struct FVector GetCurrentAcceleration() const;
	const struct FVector GetCurrentRotationalAcceleration() const;
	const struct FVector GetCurrentRotationalVelocity() const;
	const struct FVector GetCurrentVelocity() const;
	bool IsLocallyControlledComponent() const;
	bool IsServerComponent() const;
	bool IsSimulatedProxy() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMovementComponentBase">();
	}
	static class USQMovementComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMovementComponentBase>();
	}
};
static_assert(alignof(USQMovementComponentBase) == 0x000008, "Wrong alignment on USQMovementComponentBase");
static_assert(sizeof(USQMovementComponentBase) == 0x000198, "Wrong size on USQMovementComponentBase");
static_assert(offsetof(USQMovementComponentBase, MaxMoveDeltaTime) == 0x0000D0, "Member 'USQMovementComponentBase::MaxMoveDeltaTime' has a wrong offset!");
static_assert(offsetof(USQMovementComponentBase, VectorEqualityTolerance) == 0x0000D4, "Member 'USQMovementComponentBase::VectorEqualityTolerance' has a wrong offset!");
static_assert(offsetof(USQMovementComponentBase, AccelDotThresholdCombine) == 0x0000D8, "Member 'USQMovementComponentBase::AccelDotThresholdCombine' has a wrong offset!");
static_assert(offsetof(USQMovementComponentBase, AccelDotThreshold) == 0x0000DC, "Member 'USQMovementComponentBase::AccelDotThreshold' has a wrong offset!");
static_assert(offsetof(USQMovementComponentBase, AccelMagThreshold) == 0x0000E0, "Member 'USQMovementComponentBase::AccelMagThreshold' has a wrong offset!");
static_assert(offsetof(USQMovementComponentBase, AngularErrorTolerance) == 0x0000E4, "Member 'USQMovementComponentBase::AngularErrorTolerance' has a wrong offset!");
static_assert(offsetof(USQMovementComponentBase, NetworkMaxSmoothUpdateDistance) == 0x0000E8, "Member 'USQMovementComponentBase::NetworkMaxSmoothUpdateDistance' has a wrong offset!");
static_assert(offsetof(USQMovementComponentBase, MinCorrectionDelay) == 0x0000EC, "Member 'USQMovementComponentBase::MinCorrectionDelay' has a wrong offset!");
static_assert(offsetof(USQMovementComponentBase, NetworkNoSmoothUpdateDistance) == 0x0000F0, "Member 'USQMovementComponentBase::NetworkNoSmoothUpdateDistance' has a wrong offset!");
static_assert(offsetof(USQMovementComponentBase, LocationQuantizationLevel) == 0x0000F4, "Member 'USQMovementComponentBase::LocationQuantizationLevel' has a wrong offset!");
static_assert(offsetof(USQMovementComponentBase, VelocityQuantizationLevel) == 0x0000F5, "Member 'USQMovementComponentBase::VelocityQuantizationLevel' has a wrong offset!");
static_assert(offsetof(USQMovementComponentBase, AccelerationQuantizationLevel) == 0x0000F6, "Member 'USQMovementComponentBase::AccelerationQuantizationLevel' has a wrong offset!");
static_assert(offsetof(USQMovementComponentBase, RotationQuantizationLevel) == 0x0000F7, "Member 'USQMovementComponentBase::RotationQuantizationLevel' has a wrong offset!");
static_assert(offsetof(USQMovementComponentBase, OwnerActor) == 0x0000F8, "Member 'USQMovementComponentBase::OwnerActor' has a wrong offset!");
static_assert(offsetof(USQMovementComponentBase, Controller) == 0x000100, "Member 'USQMovementComponentBase::Controller' has a wrong offset!");
static_assert(offsetof(USQMovementComponentBase, ReplicatedMovement) == 0x000150, "Member 'USQMovementComponentBase::ReplicatedMovement' has a wrong offset!");
static_assert(offsetof(USQMovementComponentBase, MaxSpeed) == 0x000190, "Member 'USQMovementComponentBase::MaxSpeed' has a wrong offset!");

// Class Squad.SQDamageType_Thermite
// 0x0000 (0x0048 - 0x0048)
class USQDamageType_Thermite final : public USQDamageType
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDamageType_Thermite">();
	}
	static class USQDamageType_Thermite* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQDamageType_Thermite>();
	}
};
static_assert(alignof(USQDamageType_Thermite) == 0x000008, "Wrong alignment on USQDamageType_Thermite");
static_assert(sizeof(USQDamageType_Thermite) == 0x000048, "Wrong size on USQDamageType_Thermite");

// Class Squad.SQDamageType_Underwater
// 0x0000 (0x0048 - 0x0048)
class USQDamageType_Underwater final : public USQDamageType
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDamageType_Underwater">();
	}
	static class USQDamageType_Underwater* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQDamageType_Underwater>();
	}
};
static_assert(alignof(USQDamageType_Underwater) == 0x000008, "Wrong alignment on USQDamageType_Underwater");
static_assert(sizeof(USQDamageType_Underwater) == 0x000048, "Wrong size on USQDamageType_Underwater");

// Class Squad.SQInstancedStaticMeshActor
// 0x0008 (0x0230 - 0x0228)
class ASQInstancedStaticMeshActor final : public AActor
{
public:
	class UInstancedStaticMeshComponent*          InstancedStaticMeshComponent;                      // 0x0228(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQInstancedStaticMeshActor">();
	}
	static class ASQInstancedStaticMeshActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQInstancedStaticMeshActor>();
	}
};
static_assert(alignof(ASQInstancedStaticMeshActor) == 0x000008, "Wrong alignment on ASQInstancedStaticMeshActor");
static_assert(sizeof(ASQInstancedStaticMeshActor) == 0x000230, "Wrong size on ASQInstancedStaticMeshActor");
static_assert(offsetof(ASQInstancedStaticMeshActor, InstancedStaticMeshComponent) == 0x000228, "Member 'ASQInstancedStaticMeshActor::InstancedStaticMeshComponent' has a wrong offset!");

// Class Squad.SQWoundedDamageType
// 0x0000 (0x0048 - 0x0048)
class USQWoundedDamageType final : public USQDamageType
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQWoundedDamageType">();
	}
	static class USQWoundedDamageType* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQWoundedDamageType>();
	}
};
static_assert(alignof(USQWoundedDamageType) == 0x000008, "Wrong alignment on USQWoundedDamageType");
static_assert(sizeof(USQWoundedDamageType) == 0x000048, "Wrong size on USQWoundedDamageType");

// Class Squad.SQDataGatheringComponent
// 0x0010 (0x00C0 - 0x00B0)
class USQDataGatheringComponent final : public UActorComponent
{
public:
	class UHeatMapRecorder*                       HeatMapRecorder;                                   // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10B6[0x8];                                     // 0x00B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RecordHeatMap(float XStepSize, float YStepSize, float HeightOffset, bool bRecordRawValues, float PositionWaitTime, float YawRotationAngle, float PitchRotationAngle, const class FString& Filename);
	void RunMultiMapHeatMap(const class FString& Filename);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDataGatheringComponent">();
	}
	static class USQDataGatheringComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQDataGatheringComponent>();
	}
};
static_assert(alignof(USQDataGatheringComponent) == 0x000008, "Wrong alignment on USQDataGatheringComponent");
static_assert(sizeof(USQDataGatheringComponent) == 0x0000C0, "Wrong size on USQDataGatheringComponent");
static_assert(offsetof(USQDataGatheringComponent, HeatMapRecorder) == 0x0000B0, "Member 'USQDataGatheringComponent::HeatMapRecorder' has a wrong offset!");

// Class Squad.SQHUD
// 0x0658 (0x0970 - 0x0318)
class ASQHUD : public AHUD
{
public:
	class USQMainMenuWidget*                      SQMainMenuWidget;                                  // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSQInputState>                  InputStateStack;                                   // 0x0320(0x0010)(BlueprintVisible, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          bTraceViewEnabled;                                 // 0x0330(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10B9[0x7];                                     // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQVehicleViewWidget*                   VehicleOverlayWidget;                              // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQBaseHudWidget*                       BaseHudWidget;                                     // 0x0340(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQMapMarker*                           CurrentlyShownHudMarker;                           // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndOfRound;                                       // 0x0350(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10BA[0x3];                                     // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MapTopPadding;                                     // 0x0354(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MapRightPadding;                                   // 0x0358(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MapBottomPadding;                                  // 0x035C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MapMaxWidthRatio;                                  // 0x0360(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MapGridLetterColor;                                // 0x0364(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SquadToSquadRadioColor;                            // 0x0374(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SquadToAllSquadsRadioColor;                        // 0x0384(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MapGridLetterPadding;                              // 0x0394(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MapGridLetterScale;                                // 0x0398(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10BB[0x4];                                     // 0x039C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         LineOfSightDrawTextCache;                          // 0x03A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_10BC[0x20];                                    // 0x03B0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class USQCoreStateSelectionHUB*               SelectionHUB;                                      // 0x03D0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQCoreStateMapComponent*               MapComponent;                                      // 0x03D8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQMapWidgetBase*                       MapWidgetBase;                                     // 0x03E0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQCoreStateSpawnPointsListComponent*   SpawnPointsListComponent;                          // 0x03E8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQCoreStateSquadListComponent*         SquadListComponent;                                // 0x03F0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQCoreStateRolesSquadListComponent*    RoleSquadListComponent;                            // 0x03F8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQNetworkPollingComponent*             NetworkPolling;                                    // 0x0400(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10BD[0x38];                                    // 0x0408(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             HUDMainTexture;                                    // 0x0440(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             LowHealthOverlayTexture;                           // 0x0448(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     CircularProgressMaterial;                          // 0x0450(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CircularProgressMaterialPercentageName;            // 0x0458(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CircularProgressMaterialTransparencyName;          // 0x0460(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CircularProgressMaterialColorName;                 // 0x0468(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class ASQSoldier*, class UMaterialInstanceDynamic*> CircularProgressMIDMap;                            // 0x0470(0x0050)(Protected, NativeAccessSpecifierProtected)
	class UTexture*                               MedicIconTexture;                                  // 0x04C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture*                               HealedIconTexture;                                 // 0x04C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture*                               DragIconTexture;                                   // 0x04D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture*                               VehicleRepairIconTexture;                          // 0x04D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture*                               BleedingIconTexture;                               // 0x04E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture*                               ItemCollisionIconTexture;                          // 0x04E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFont*                                  BigFont;                                           // 0x04F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFont*                                  NormalFont;                                        // 0x04F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFont*                                  NametagFont;                                       // 0x0500(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFont*                                  ChatMessageFont;                                   // 0x0508(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFont*                                  SystemMessageFont;                                 // 0x0510(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           TicketTextColor;                                   // 0x0518(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FSQRemoteTalkerDisplayInfo>     RemoteTalkers;                                     // 0x0528(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FSQRemoteTalkerDisplayInfo>     TestTalkers;                                       // 0x0538(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bUseTestTalkers;                                   // 0x0548(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESQVoiceChannel                               OwnerSpeakingState;                                // 0x0549(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10BE[0x6];                                     // 0x054A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQMessageBoxInfo                      ChatBoxInfo;                                       // 0x0550(0x0080)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FSQMessageBoxInfo                      SystemMessageBoxInfo;                              // 0x05D0(0x0080)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FSQMessageBoxInfo                      GameNotificationBoxInfo;                           // 0x0650(0x0080)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FSQMessageBoxInfo                      PlayerNotificationBoxInfo;                         // 0x06D0(0x0080)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FLinearColor                           SystemMessagesColor;                               // 0x0750(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10BF[0x4];                                     // 0x0760(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         BitPad_40 : 1;                                     // 0x0764(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bShouldOffsetSpawnText : 1;                        // 0x0764(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bShouldShowEnemyFobWidgets : 1;                    // 0x0764(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_10C0[0x3];                                     // 0x0765(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StartingMapZoomLevel;                              // 0x0768(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10C1[0x4];                                     // 0x076C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 MapZoomLevels;                                     // 0x0770(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_10C2[0x30];                                    // 0x0780(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class USQScoreboard*                          ScoreBoard;                                        // 0x07B0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQDrawChatWidget*                      ChatDrawingWidget;                                 // 0x07B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10C3[0x10];                                    // 0x07C0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NametagDistantVisibilityDropoffStart;              // 0x07D0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NametagDistantVisibilityDropoffFinish;             // 0x07D4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NametagDistantVisibilitySize;                      // 0x07D8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NametagNearVerticalOffset;                         // 0x07DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NametagFarVerticalOffset;                          // 0x07E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NametagNearVerticalInterpStart;                    // 0x07E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NametagFadingInterpStart;                          // 0x07E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         UsableDistantVisibilityDropoffStart;               // 0x07EC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         UsableDistantVisibilityDropoffFinish;              // 0x07F0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         UsableDistantVisibilitySize;                       // 0x07F4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         UsableNearVerticalOffset;                          // 0x07F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         UsableFarVerticalOffset;                           // 0x07FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         UsableNearVerticalInterpStart;                     // 0x0800(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         UsableFadingInterpStart;                           // 0x0804(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           EnemyColor;                                        // 0x0808(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           TeamColor;                                         // 0x0818(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           SquadColor;                                        // 0x0828(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           FireTeamColor;                                     // 0x0838(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           NametagOutlineColor;                               // 0x0848(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxDistanceToShowHUDIcons;                         // 0x0858(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxDistanceToShowWoundedHUDIcons;                  // 0x085C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxDistanceToShowDragHUDIcons;                     // 0x0860(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   BoneForDragIcon;                                   // 0x0864(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DragIconXOffset;                                   // 0x086C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DragIconYOffset;                                   // 0x0870(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           DragHUDIconColor;                                  // 0x0874(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DragHUDIconSizeMultiplier;                         // 0x0884(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   BoneForBleedingIcon;                               // 0x0888(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                HUDIconOffset;                                     // 0x0890(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                HUDIconCrouchedOffset;                             // 0x089C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                HUDIconProneOffset;                                // 0x08A8(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                HUDIconWoundedOffset;                              // 0x08B4(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HUDIconFarSize;                                    // 0x08C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HUDIconNearSize;                                   // 0x08C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              HealedIconOffset;                                  // 0x08C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              HealedIconSize;                                    // 0x08D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              ItemCollisionIconOffset;                           // 0x08D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              ItemCollisionIconSize;                             // 0x08E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxTimeSinceLastHealedToDrawHealedIcon;            // 0x08E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxTimeSinceLastRepairedToDrawRepairedIcon;        // 0x08EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveLinearColor*                      HealthColorCurve;                                  // 0x08F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHudWidgetsEnabled;                                // 0x08F8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10C4[0x17];                                    // 0x08F9(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnChatReceived;                                    // 0x0910(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class USoundBase*                             CommandVoiceStartingSound;                         // 0x0920(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundBase*                             CommandVoiceEndingSound;                           // 0x0928(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundBase*                             SquadVoiceStartingSound;                           // 0x0930(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundBase*                             SquadVoiceEndingSound;                             // 0x0938(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10C5[0x8];                                     // 0x0940(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USQColorsDataAsset*                     ColorsDataAsset;                                   // 0x0948(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEnum*                                  ChatEnumObj;                                       // 0x0950(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnWorldOriginUpdated;                              // 0x0958(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	class UUserWidget*                            SQDeploymentMenu;                                  // 0x0968(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void AddChatMessage(class ASQPlayerState* Player, const class FString& Message, ESQChat Channel, const struct FLinearColor& Color, float MessageLifetimeOverride, ESQNotificationTypes NotificationType);
	void AddChatMessageDefaultColor(class ASQPlayerState* Player, const class FString& Message, ESQChat Channel, float MessageLifetimeOverride, ESQNotificationTypes NotificationType);
	struct FSQInputState AddInputStackState(const struct FSQInputState& NewState);
	void AddLineOfSightActor(class AActor* Actor);
	void AddSystemMessage(const class FString& Message, const struct FLinearColor& Color, const float MessageLifetimeOverride, ESQNotificationTypes NotificationType);
	void BlueprintNotifyHit(float DamageTaken, const struct FDamageEvent& DamageEvent, class APawn* PawnInstigator);
	void BPOnSetHudWidgetsEnabled(bool bEnabled);
	void BPOnUsableVisible(class AActor* Actor, bool bIsVisible);
	void ConditionalCloseScoreboard();
	void DeleteMarkerOnHUD();
	void DisplayAmmoBagOverlay(class ASQDeployableAmmoBag* Ammobag, bool bCanPickup);
	void DisplayDeployableInteractableOverlay(class ASQDeployableInteractable* Ammobag, bool bCanPickup);
	void DrawChatMessages(struct FSQMessageBoxInfo* ChatBox, const float PosX, const float PosY);
	float DrawString(int32 Param_Index, const class FString& Text, float PosX, float PosY, const struct FLinearColor& Color, const struct FSQMessageBoxInfo& Info, ESQTextHorizontalAlignment HorizontalAlignment, ESQTextVerticalAlignment VerticalAlignment);
	void DrawSystemMessages(const float PosX, const float PosY);
	class UCanvas* GetCanvas();
	struct FLinearColor GetEnemyColor();
	struct FLinearColor GetFireTeamColor();
	const TArray<struct FSQRemoteTalkerDisplayInfo> GetRemoteTalkers();
	float GetScaleUI();
	struct FLinearColor GetSquadColor();
	struct FLinearColor GetSystemMessagesColor();
	struct FLinearColor GetTeamColor();
	void HideAmmoBagOverlay(class ASQDeployableAmmoBag* Ammobag);
	void HideDeployableInteractableOverlay(class ASQDeployableInteractable* Ammobag);
	float IncrementMapZoomLevel(float CurrentMapZoom, int32 Amount, bool bLoop);
	void OnReceiveChatEvent__DelegateSignature(const class FString& PlayerName, const class FString& Message, ESQChat Channel, const struct FLinearColor& Color, ESQNotificationTypes NotificationType);
	struct FSQInputState RemoveInputStackState(const struct FSQInputState& OldState);
	void RemoveLineOfSightActor(class AActor* Actor);
	void SetHudWidgetsEnabled(bool bValue);
	void ShowMarkerOnHUD(const struct FSQMapMarkerVisualData& MapMarkerVisualData);
	void ShowScoreboard(bool bEnable);
	void StatFrameGenerationFPS();
	void ToggleScoreboard();
	void TraceViewToggle();
	void VehicleChangeZoomOverlay(const int32 NewZoomOverlayIndex);
	void VehicleCreateOverlay(TSubclassOf<class USQVehicleViewWidget> WidgetClass);
	void VehicleRemoveOverlay(TSubclassOf<class USQVehicleViewWidget> WidgetClass);
	void VehicleResetZoom();
	void WorldOriginUpdated(class UWorld* World, const struct FIntVector& Old, const struct FIntVector& New);

	bool GetMouseScreenSpacePosition(struct FIntPoint* OutPosition) const;
	struct FLinearColor GetOtherPlayerColor(class ASQPlayerState* OtherPlayer) const;
	ESQVoiceChannel GetOwnerSpeakerState() const;
	float GetStartingMapZoom() const;
	struct FLinearColor GetTeamBasedColor(ESQTeam InTeam) const;
	bool HudWidgetsEnabled() const;
	bool IsScoreboardVisible() const;
	bool ShouldOffsetSpawnText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQHUD">();
	}
	static class ASQHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQHUD>();
	}
};
static_assert(alignof(ASQHUD) == 0x000008, "Wrong alignment on ASQHUD");
static_assert(sizeof(ASQHUD) == 0x000970, "Wrong size on ASQHUD");
static_assert(offsetof(ASQHUD, SQMainMenuWidget) == 0x000318, "Member 'ASQHUD::SQMainMenuWidget' has a wrong offset!");
static_assert(offsetof(ASQHUD, InputStateStack) == 0x000320, "Member 'ASQHUD::InputStateStack' has a wrong offset!");
static_assert(offsetof(ASQHUD, bTraceViewEnabled) == 0x000330, "Member 'ASQHUD::bTraceViewEnabled' has a wrong offset!");
static_assert(offsetof(ASQHUD, VehicleOverlayWidget) == 0x000338, "Member 'ASQHUD::VehicleOverlayWidget' has a wrong offset!");
static_assert(offsetof(ASQHUD, BaseHudWidget) == 0x000340, "Member 'ASQHUD::BaseHudWidget' has a wrong offset!");
static_assert(offsetof(ASQHUD, CurrentlyShownHudMarker) == 0x000348, "Member 'ASQHUD::CurrentlyShownHudMarker' has a wrong offset!");
static_assert(offsetof(ASQHUD, bEndOfRound) == 0x000350, "Member 'ASQHUD::bEndOfRound' has a wrong offset!");
static_assert(offsetof(ASQHUD, MapTopPadding) == 0x000354, "Member 'ASQHUD::MapTopPadding' has a wrong offset!");
static_assert(offsetof(ASQHUD, MapRightPadding) == 0x000358, "Member 'ASQHUD::MapRightPadding' has a wrong offset!");
static_assert(offsetof(ASQHUD, MapBottomPadding) == 0x00035C, "Member 'ASQHUD::MapBottomPadding' has a wrong offset!");
static_assert(offsetof(ASQHUD, MapMaxWidthRatio) == 0x000360, "Member 'ASQHUD::MapMaxWidthRatio' has a wrong offset!");
static_assert(offsetof(ASQHUD, MapGridLetterColor) == 0x000364, "Member 'ASQHUD::MapGridLetterColor' has a wrong offset!");
static_assert(offsetof(ASQHUD, SquadToSquadRadioColor) == 0x000374, "Member 'ASQHUD::SquadToSquadRadioColor' has a wrong offset!");
static_assert(offsetof(ASQHUD, SquadToAllSquadsRadioColor) == 0x000384, "Member 'ASQHUD::SquadToAllSquadsRadioColor' has a wrong offset!");
static_assert(offsetof(ASQHUD, MapGridLetterPadding) == 0x000394, "Member 'ASQHUD::MapGridLetterPadding' has a wrong offset!");
static_assert(offsetof(ASQHUD, MapGridLetterScale) == 0x000398, "Member 'ASQHUD::MapGridLetterScale' has a wrong offset!");
static_assert(offsetof(ASQHUD, LineOfSightDrawTextCache) == 0x0003A0, "Member 'ASQHUD::LineOfSightDrawTextCache' has a wrong offset!");
static_assert(offsetof(ASQHUD, SelectionHUB) == 0x0003D0, "Member 'ASQHUD::SelectionHUB' has a wrong offset!");
static_assert(offsetof(ASQHUD, MapComponent) == 0x0003D8, "Member 'ASQHUD::MapComponent' has a wrong offset!");
static_assert(offsetof(ASQHUD, MapWidgetBase) == 0x0003E0, "Member 'ASQHUD::MapWidgetBase' has a wrong offset!");
static_assert(offsetof(ASQHUD, SpawnPointsListComponent) == 0x0003E8, "Member 'ASQHUD::SpawnPointsListComponent' has a wrong offset!");
static_assert(offsetof(ASQHUD, SquadListComponent) == 0x0003F0, "Member 'ASQHUD::SquadListComponent' has a wrong offset!");
static_assert(offsetof(ASQHUD, RoleSquadListComponent) == 0x0003F8, "Member 'ASQHUD::RoleSquadListComponent' has a wrong offset!");
static_assert(offsetof(ASQHUD, NetworkPolling) == 0x000400, "Member 'ASQHUD::NetworkPolling' has a wrong offset!");
static_assert(offsetof(ASQHUD, HUDMainTexture) == 0x000440, "Member 'ASQHUD::HUDMainTexture' has a wrong offset!");
static_assert(offsetof(ASQHUD, LowHealthOverlayTexture) == 0x000448, "Member 'ASQHUD::LowHealthOverlayTexture' has a wrong offset!");
static_assert(offsetof(ASQHUD, CircularProgressMaterial) == 0x000450, "Member 'ASQHUD::CircularProgressMaterial' has a wrong offset!");
static_assert(offsetof(ASQHUD, CircularProgressMaterialPercentageName) == 0x000458, "Member 'ASQHUD::CircularProgressMaterialPercentageName' has a wrong offset!");
static_assert(offsetof(ASQHUD, CircularProgressMaterialTransparencyName) == 0x000460, "Member 'ASQHUD::CircularProgressMaterialTransparencyName' has a wrong offset!");
static_assert(offsetof(ASQHUD, CircularProgressMaterialColorName) == 0x000468, "Member 'ASQHUD::CircularProgressMaterialColorName' has a wrong offset!");
static_assert(offsetof(ASQHUD, CircularProgressMIDMap) == 0x000470, "Member 'ASQHUD::CircularProgressMIDMap' has a wrong offset!");
static_assert(offsetof(ASQHUD, MedicIconTexture) == 0x0004C0, "Member 'ASQHUD::MedicIconTexture' has a wrong offset!");
static_assert(offsetof(ASQHUD, HealedIconTexture) == 0x0004C8, "Member 'ASQHUD::HealedIconTexture' has a wrong offset!");
static_assert(offsetof(ASQHUD, DragIconTexture) == 0x0004D0, "Member 'ASQHUD::DragIconTexture' has a wrong offset!");
static_assert(offsetof(ASQHUD, VehicleRepairIconTexture) == 0x0004D8, "Member 'ASQHUD::VehicleRepairIconTexture' has a wrong offset!");
static_assert(offsetof(ASQHUD, BleedingIconTexture) == 0x0004E0, "Member 'ASQHUD::BleedingIconTexture' has a wrong offset!");
static_assert(offsetof(ASQHUD, ItemCollisionIconTexture) == 0x0004E8, "Member 'ASQHUD::ItemCollisionIconTexture' has a wrong offset!");
static_assert(offsetof(ASQHUD, BigFont) == 0x0004F0, "Member 'ASQHUD::BigFont' has a wrong offset!");
static_assert(offsetof(ASQHUD, NormalFont) == 0x0004F8, "Member 'ASQHUD::NormalFont' has a wrong offset!");
static_assert(offsetof(ASQHUD, NametagFont) == 0x000500, "Member 'ASQHUD::NametagFont' has a wrong offset!");
static_assert(offsetof(ASQHUD, ChatMessageFont) == 0x000508, "Member 'ASQHUD::ChatMessageFont' has a wrong offset!");
static_assert(offsetof(ASQHUD, SystemMessageFont) == 0x000510, "Member 'ASQHUD::SystemMessageFont' has a wrong offset!");
static_assert(offsetof(ASQHUD, TicketTextColor) == 0x000518, "Member 'ASQHUD::TicketTextColor' has a wrong offset!");
static_assert(offsetof(ASQHUD, RemoteTalkers) == 0x000528, "Member 'ASQHUD::RemoteTalkers' has a wrong offset!");
static_assert(offsetof(ASQHUD, TestTalkers) == 0x000538, "Member 'ASQHUD::TestTalkers' has a wrong offset!");
static_assert(offsetof(ASQHUD, bUseTestTalkers) == 0x000548, "Member 'ASQHUD::bUseTestTalkers' has a wrong offset!");
static_assert(offsetof(ASQHUD, OwnerSpeakingState) == 0x000549, "Member 'ASQHUD::OwnerSpeakingState' has a wrong offset!");
static_assert(offsetof(ASQHUD, ChatBoxInfo) == 0x000550, "Member 'ASQHUD::ChatBoxInfo' has a wrong offset!");
static_assert(offsetof(ASQHUD, SystemMessageBoxInfo) == 0x0005D0, "Member 'ASQHUD::SystemMessageBoxInfo' has a wrong offset!");
static_assert(offsetof(ASQHUD, GameNotificationBoxInfo) == 0x000650, "Member 'ASQHUD::GameNotificationBoxInfo' has a wrong offset!");
static_assert(offsetof(ASQHUD, PlayerNotificationBoxInfo) == 0x0006D0, "Member 'ASQHUD::PlayerNotificationBoxInfo' has a wrong offset!");
static_assert(offsetof(ASQHUD, SystemMessagesColor) == 0x000750, "Member 'ASQHUD::SystemMessagesColor' has a wrong offset!");
static_assert(offsetof(ASQHUD, StartingMapZoomLevel) == 0x000768, "Member 'ASQHUD::StartingMapZoomLevel' has a wrong offset!");
static_assert(offsetof(ASQHUD, MapZoomLevels) == 0x000770, "Member 'ASQHUD::MapZoomLevels' has a wrong offset!");
static_assert(offsetof(ASQHUD, ScoreBoard) == 0x0007B0, "Member 'ASQHUD::ScoreBoard' has a wrong offset!");
static_assert(offsetof(ASQHUD, ChatDrawingWidget) == 0x0007B8, "Member 'ASQHUD::ChatDrawingWidget' has a wrong offset!");
static_assert(offsetof(ASQHUD, NametagDistantVisibilityDropoffStart) == 0x0007D0, "Member 'ASQHUD::NametagDistantVisibilityDropoffStart' has a wrong offset!");
static_assert(offsetof(ASQHUD, NametagDistantVisibilityDropoffFinish) == 0x0007D4, "Member 'ASQHUD::NametagDistantVisibilityDropoffFinish' has a wrong offset!");
static_assert(offsetof(ASQHUD, NametagDistantVisibilitySize) == 0x0007D8, "Member 'ASQHUD::NametagDistantVisibilitySize' has a wrong offset!");
static_assert(offsetof(ASQHUD, NametagNearVerticalOffset) == 0x0007DC, "Member 'ASQHUD::NametagNearVerticalOffset' has a wrong offset!");
static_assert(offsetof(ASQHUD, NametagFarVerticalOffset) == 0x0007E0, "Member 'ASQHUD::NametagFarVerticalOffset' has a wrong offset!");
static_assert(offsetof(ASQHUD, NametagNearVerticalInterpStart) == 0x0007E4, "Member 'ASQHUD::NametagNearVerticalInterpStart' has a wrong offset!");
static_assert(offsetof(ASQHUD, NametagFadingInterpStart) == 0x0007E8, "Member 'ASQHUD::NametagFadingInterpStart' has a wrong offset!");
static_assert(offsetof(ASQHUD, UsableDistantVisibilityDropoffStart) == 0x0007EC, "Member 'ASQHUD::UsableDistantVisibilityDropoffStart' has a wrong offset!");
static_assert(offsetof(ASQHUD, UsableDistantVisibilityDropoffFinish) == 0x0007F0, "Member 'ASQHUD::UsableDistantVisibilityDropoffFinish' has a wrong offset!");
static_assert(offsetof(ASQHUD, UsableDistantVisibilitySize) == 0x0007F4, "Member 'ASQHUD::UsableDistantVisibilitySize' has a wrong offset!");
static_assert(offsetof(ASQHUD, UsableNearVerticalOffset) == 0x0007F8, "Member 'ASQHUD::UsableNearVerticalOffset' has a wrong offset!");
static_assert(offsetof(ASQHUD, UsableFarVerticalOffset) == 0x0007FC, "Member 'ASQHUD::UsableFarVerticalOffset' has a wrong offset!");
static_assert(offsetof(ASQHUD, UsableNearVerticalInterpStart) == 0x000800, "Member 'ASQHUD::UsableNearVerticalInterpStart' has a wrong offset!");
static_assert(offsetof(ASQHUD, UsableFadingInterpStart) == 0x000804, "Member 'ASQHUD::UsableFadingInterpStart' has a wrong offset!");
static_assert(offsetof(ASQHUD, EnemyColor) == 0x000808, "Member 'ASQHUD::EnemyColor' has a wrong offset!");
static_assert(offsetof(ASQHUD, TeamColor) == 0x000818, "Member 'ASQHUD::TeamColor' has a wrong offset!");
static_assert(offsetof(ASQHUD, SquadColor) == 0x000828, "Member 'ASQHUD::SquadColor' has a wrong offset!");
static_assert(offsetof(ASQHUD, FireTeamColor) == 0x000838, "Member 'ASQHUD::FireTeamColor' has a wrong offset!");
static_assert(offsetof(ASQHUD, NametagOutlineColor) == 0x000848, "Member 'ASQHUD::NametagOutlineColor' has a wrong offset!");
static_assert(offsetof(ASQHUD, MaxDistanceToShowHUDIcons) == 0x000858, "Member 'ASQHUD::MaxDistanceToShowHUDIcons' has a wrong offset!");
static_assert(offsetof(ASQHUD, MaxDistanceToShowWoundedHUDIcons) == 0x00085C, "Member 'ASQHUD::MaxDistanceToShowWoundedHUDIcons' has a wrong offset!");
static_assert(offsetof(ASQHUD, MaxDistanceToShowDragHUDIcons) == 0x000860, "Member 'ASQHUD::MaxDistanceToShowDragHUDIcons' has a wrong offset!");
static_assert(offsetof(ASQHUD, BoneForDragIcon) == 0x000864, "Member 'ASQHUD::BoneForDragIcon' has a wrong offset!");
static_assert(offsetof(ASQHUD, DragIconXOffset) == 0x00086C, "Member 'ASQHUD::DragIconXOffset' has a wrong offset!");
static_assert(offsetof(ASQHUD, DragIconYOffset) == 0x000870, "Member 'ASQHUD::DragIconYOffset' has a wrong offset!");
static_assert(offsetof(ASQHUD, DragHUDIconColor) == 0x000874, "Member 'ASQHUD::DragHUDIconColor' has a wrong offset!");
static_assert(offsetof(ASQHUD, DragHUDIconSizeMultiplier) == 0x000884, "Member 'ASQHUD::DragHUDIconSizeMultiplier' has a wrong offset!");
static_assert(offsetof(ASQHUD, BoneForBleedingIcon) == 0x000888, "Member 'ASQHUD::BoneForBleedingIcon' has a wrong offset!");
static_assert(offsetof(ASQHUD, HUDIconOffset) == 0x000890, "Member 'ASQHUD::HUDIconOffset' has a wrong offset!");
static_assert(offsetof(ASQHUD, HUDIconCrouchedOffset) == 0x00089C, "Member 'ASQHUD::HUDIconCrouchedOffset' has a wrong offset!");
static_assert(offsetof(ASQHUD, HUDIconProneOffset) == 0x0008A8, "Member 'ASQHUD::HUDIconProneOffset' has a wrong offset!");
static_assert(offsetof(ASQHUD, HUDIconWoundedOffset) == 0x0008B4, "Member 'ASQHUD::HUDIconWoundedOffset' has a wrong offset!");
static_assert(offsetof(ASQHUD, HUDIconFarSize) == 0x0008C0, "Member 'ASQHUD::HUDIconFarSize' has a wrong offset!");
static_assert(offsetof(ASQHUD, HUDIconNearSize) == 0x0008C4, "Member 'ASQHUD::HUDIconNearSize' has a wrong offset!");
static_assert(offsetof(ASQHUD, HealedIconOffset) == 0x0008C8, "Member 'ASQHUD::HealedIconOffset' has a wrong offset!");
static_assert(offsetof(ASQHUD, HealedIconSize) == 0x0008D0, "Member 'ASQHUD::HealedIconSize' has a wrong offset!");
static_assert(offsetof(ASQHUD, ItemCollisionIconOffset) == 0x0008D8, "Member 'ASQHUD::ItemCollisionIconOffset' has a wrong offset!");
static_assert(offsetof(ASQHUD, ItemCollisionIconSize) == 0x0008E0, "Member 'ASQHUD::ItemCollisionIconSize' has a wrong offset!");
static_assert(offsetof(ASQHUD, MaxTimeSinceLastHealedToDrawHealedIcon) == 0x0008E8, "Member 'ASQHUD::MaxTimeSinceLastHealedToDrawHealedIcon' has a wrong offset!");
static_assert(offsetof(ASQHUD, MaxTimeSinceLastRepairedToDrawRepairedIcon) == 0x0008EC, "Member 'ASQHUD::MaxTimeSinceLastRepairedToDrawRepairedIcon' has a wrong offset!");
static_assert(offsetof(ASQHUD, HealthColorCurve) == 0x0008F0, "Member 'ASQHUD::HealthColorCurve' has a wrong offset!");
static_assert(offsetof(ASQHUD, bHudWidgetsEnabled) == 0x0008F8, "Member 'ASQHUD::bHudWidgetsEnabled' has a wrong offset!");
static_assert(offsetof(ASQHUD, OnChatReceived) == 0x000910, "Member 'ASQHUD::OnChatReceived' has a wrong offset!");
static_assert(offsetof(ASQHUD, CommandVoiceStartingSound) == 0x000920, "Member 'ASQHUD::CommandVoiceStartingSound' has a wrong offset!");
static_assert(offsetof(ASQHUD, CommandVoiceEndingSound) == 0x000928, "Member 'ASQHUD::CommandVoiceEndingSound' has a wrong offset!");
static_assert(offsetof(ASQHUD, SquadVoiceStartingSound) == 0x000930, "Member 'ASQHUD::SquadVoiceStartingSound' has a wrong offset!");
static_assert(offsetof(ASQHUD, SquadVoiceEndingSound) == 0x000938, "Member 'ASQHUD::SquadVoiceEndingSound' has a wrong offset!");
static_assert(offsetof(ASQHUD, ColorsDataAsset) == 0x000948, "Member 'ASQHUD::ColorsDataAsset' has a wrong offset!");
static_assert(offsetof(ASQHUD, ChatEnumObj) == 0x000950, "Member 'ASQHUD::ChatEnumObj' has a wrong offset!");
static_assert(offsetof(ASQHUD, OnWorldOriginUpdated) == 0x000958, "Member 'ASQHUD::OnWorldOriginUpdated' has a wrong offset!");
static_assert(offsetof(ASQHUD, SQDeploymentMenu) == 0x000968, "Member 'ASQHUD::SQDeploymentMenu' has a wrong offset!");

// Class Squad.SQDataSettings
// 0x0128 (0x0160 - 0x0038)
class USQDataSettings final : public UDeveloperSettings
{
public:
	bool                                          UseAdditiveLayer;                                  // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D6[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USQLevel>                   LevelClass;                                        // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQLayer>                   LayerClass;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQFaction>                 FactionClass;                                      // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQFactionSetup>            FactionSetupClass;                                 // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondsTimeForCollectingCommanderChoices;          // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SecondsTimeForCollectingCommanderChoicesCooldown;  // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinimumSquadSizeForVoting;                         // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinimumSquadsRequiredForVoting;                    // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQVoteConfig                          CommanderVoteConfig;                               // 0x0070(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)
	bool                                          UseVoteLevel;                                      // 0x00B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D7[0x3];                                     // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LevelCountPerVote;                                 // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQVoteConfig                          LevelVoteConfig;                                   // 0x00B8(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)
	bool                                          UseVoteLayer;                                      // 0x00F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D8[0x3];                                     // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LayerCountPerVote;                                 // 0x00FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQVoteConfig                          LayerVoteConfig;                                   // 0x0100(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)
	bool                                          UseVoteFactions;                                   // 0x0140(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PreventSameFaction;                                // 0x0141(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D9[0x2];                                     // 0x0142(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxInitializedTeamId;                              // 0x0144(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTeamId;                                         // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10DA[0x4];                                     // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQVoteConfig>                  FactionVoteConfigs;                                // 0x0150(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class USQDataSettings* GetDataSettings();

	bool UseVote() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDataSettings">();
	}
	static class USQDataSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQDataSettings>();
	}
};
static_assert(alignof(USQDataSettings) == 0x000008, "Wrong alignment on USQDataSettings");
static_assert(sizeof(USQDataSettings) == 0x000160, "Wrong size on USQDataSettings");
static_assert(offsetof(USQDataSettings, UseAdditiveLayer) == 0x000038, "Member 'USQDataSettings::UseAdditiveLayer' has a wrong offset!");
static_assert(offsetof(USQDataSettings, LevelClass) == 0x000040, "Member 'USQDataSettings::LevelClass' has a wrong offset!");
static_assert(offsetof(USQDataSettings, LayerClass) == 0x000048, "Member 'USQDataSettings::LayerClass' has a wrong offset!");
static_assert(offsetof(USQDataSettings, FactionClass) == 0x000050, "Member 'USQDataSettings::FactionClass' has a wrong offset!");
static_assert(offsetof(USQDataSettings, FactionSetupClass) == 0x000058, "Member 'USQDataSettings::FactionSetupClass' has a wrong offset!");
static_assert(offsetof(USQDataSettings, SecondsTimeForCollectingCommanderChoices) == 0x000060, "Member 'USQDataSettings::SecondsTimeForCollectingCommanderChoices' has a wrong offset!");
static_assert(offsetof(USQDataSettings, SecondsTimeForCollectingCommanderChoicesCooldown) == 0x000064, "Member 'USQDataSettings::SecondsTimeForCollectingCommanderChoicesCooldown' has a wrong offset!");
static_assert(offsetof(USQDataSettings, MinimumSquadSizeForVoting) == 0x000068, "Member 'USQDataSettings::MinimumSquadSizeForVoting' has a wrong offset!");
static_assert(offsetof(USQDataSettings, MinimumSquadsRequiredForVoting) == 0x00006C, "Member 'USQDataSettings::MinimumSquadsRequiredForVoting' has a wrong offset!");
static_assert(offsetof(USQDataSettings, CommanderVoteConfig) == 0x000070, "Member 'USQDataSettings::CommanderVoteConfig' has a wrong offset!");
static_assert(offsetof(USQDataSettings, UseVoteLevel) == 0x0000B0, "Member 'USQDataSettings::UseVoteLevel' has a wrong offset!");
static_assert(offsetof(USQDataSettings, LevelCountPerVote) == 0x0000B4, "Member 'USQDataSettings::LevelCountPerVote' has a wrong offset!");
static_assert(offsetof(USQDataSettings, LevelVoteConfig) == 0x0000B8, "Member 'USQDataSettings::LevelVoteConfig' has a wrong offset!");
static_assert(offsetof(USQDataSettings, UseVoteLayer) == 0x0000F8, "Member 'USQDataSettings::UseVoteLayer' has a wrong offset!");
static_assert(offsetof(USQDataSettings, LayerCountPerVote) == 0x0000FC, "Member 'USQDataSettings::LayerCountPerVote' has a wrong offset!");
static_assert(offsetof(USQDataSettings, LayerVoteConfig) == 0x000100, "Member 'USQDataSettings::LayerVoteConfig' has a wrong offset!");
static_assert(offsetof(USQDataSettings, UseVoteFactions) == 0x000140, "Member 'USQDataSettings::UseVoteFactions' has a wrong offset!");
static_assert(offsetof(USQDataSettings, PreventSameFaction) == 0x000141, "Member 'USQDataSettings::PreventSameFaction' has a wrong offset!");
static_assert(offsetof(USQDataSettings, MaxInitializedTeamId) == 0x000144, "Member 'USQDataSettings::MaxInitializedTeamId' has a wrong offset!");
static_assert(offsetof(USQDataSettings, MaxTeamId) == 0x000148, "Member 'USQDataSettings::MaxTeamId' has a wrong offset!");
static_assert(offsetof(USQDataSettings, FactionVoteConfigs) == 0x000150, "Member 'USQDataSettings::FactionVoteConfigs' has a wrong offset!");

// Class Squad.SQDemoSpectator
// 0x0018 (0x0590 - 0x0578)
class ASQDemoSpectator : public APlayerController
{
public:
	uint8                                         Pad_10DB[0x18];                                    // 0x0578(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDemoSpectator">();
	}
	static class ASQDemoSpectator* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQDemoSpectator>();
	}
};
static_assert(alignof(ASQDemoSpectator) == 0x000008, "Wrong alignment on ASQDemoSpectator");
static_assert(sizeof(ASQDemoSpectator) == 0x000590, "Wrong size on ASQDemoSpectator");

// Class Squad.SQHelicopterCollisionDamage
// 0x0008 (0x00F8 - 0x00F0)
class USQHelicopterCollisionDamage final : public USQCollisionDamage
{
public:
	float                                         FlightDynamicImpulseMultiplier;                    // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10DC[0x4];                                     // 0x00F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleImpact(const struct FHitResult& Impact, float TimeSlice, const struct FVector& MoveDelta);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQHelicopterCollisionDamage">();
	}
	static class USQHelicopterCollisionDamage* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQHelicopterCollisionDamage>();
	}
};
static_assert(alignof(USQHelicopterCollisionDamage) == 0x000008, "Wrong alignment on USQHelicopterCollisionDamage");
static_assert(sizeof(USQHelicopterCollisionDamage) == 0x0000F8, "Wrong size on USQHelicopterCollisionDamage");
static_assert(offsetof(USQHelicopterCollisionDamage, FlightDynamicImpulseMultiplier) == 0x0000F0, "Member 'USQHelicopterCollisionDamage::FlightDynamicImpulseMultiplier' has a wrong offset!");

// Class Squad.SQDeployableItem
// 0x0020 (0x0450 - 0x0430)
class ASQDeployableItem : public ASQDeployable
{
public:
	class ASQPlayerController*                    InstigatingPlayerController;                       // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerState*                         InstigatingPlayerState;                            // 0x0438(0x0008)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxAllowedPerPlayerInGame;                         // 0x0440(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTrackDeployableResult                      TrackDeployableOverMaxResult;                      // 0x0444(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10DD[0x3];                                     // 0x0445(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ASQEquipableItem>           EquippableInstigatorClass;                         // 0x0448(0x0008)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDeployableItem">();
	}
	static class ASQDeployableItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQDeployableItem>();
	}
};
static_assert(alignof(ASQDeployableItem) == 0x000008, "Wrong alignment on ASQDeployableItem");
static_assert(sizeof(ASQDeployableItem) == 0x000450, "Wrong size on ASQDeployableItem");
static_assert(offsetof(ASQDeployableItem, InstigatingPlayerController) == 0x000430, "Member 'ASQDeployableItem::InstigatingPlayerController' has a wrong offset!");
static_assert(offsetof(ASQDeployableItem, InstigatingPlayerState) == 0x000438, "Member 'ASQDeployableItem::InstigatingPlayerState' has a wrong offset!");
static_assert(offsetof(ASQDeployableItem, MaxAllowedPerPlayerInGame) == 0x000440, "Member 'ASQDeployableItem::MaxAllowedPerPlayerInGame' has a wrong offset!");
static_assert(offsetof(ASQDeployableItem, TrackDeployableOverMaxResult) == 0x000444, "Member 'ASQDeployableItem::TrackDeployableOverMaxResult' has a wrong offset!");
static_assert(offsetof(ASQDeployableItem, EquippableInstigatorClass) == 0x000448, "Member 'ASQDeployableItem::EquippableInstigatorClass' has a wrong offset!");

// Class Squad.SQDeployableAmmoBag
// 0x0030 (0x0480 - 0x0450)
class ASQDeployableAmmoBag : public ASQDeployableItem
{
public:
	uint8                                         Pad_10DE[0x8];                                     // 0x0450(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             AmmoBagAmmoUpdatedEvent;                           // 0x0458(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             RearmSourceAmmoUpdatedEvent;                       // 0x0468(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	float                                         AmmoCount;                                         // 0x0478(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutOfAmmoLifetime;                                 // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BP_PickedUp(class ASQEquipableItem* EquippableAmmoBag);
	void OnRep_AmmoCount();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDeployableAmmoBag">();
	}
	static class ASQDeployableAmmoBag* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQDeployableAmmoBag>();
	}
};
static_assert(alignof(ASQDeployableAmmoBag) == 0x000008, "Wrong alignment on ASQDeployableAmmoBag");
static_assert(sizeof(ASQDeployableAmmoBag) == 0x000480, "Wrong size on ASQDeployableAmmoBag");
static_assert(offsetof(ASQDeployableAmmoBag, AmmoBagAmmoUpdatedEvent) == 0x000458, "Member 'ASQDeployableAmmoBag::AmmoBagAmmoUpdatedEvent' has a wrong offset!");
static_assert(offsetof(ASQDeployableAmmoBag, RearmSourceAmmoUpdatedEvent) == 0x000468, "Member 'ASQDeployableAmmoBag::RearmSourceAmmoUpdatedEvent' has a wrong offset!");
static_assert(offsetof(ASQDeployableAmmoBag, AmmoCount) == 0x000478, "Member 'ASQDeployableAmmoBag::AmmoCount' has a wrong offset!");
static_assert(offsetof(ASQDeployableAmmoBag, OutOfAmmoLifetime) == 0x00047C, "Member 'ASQDeployableAmmoBag::OutOfAmmoLifetime' has a wrong offset!");

// Class Squad.SQDeployableChildActorComponent
// 0x0010 (0x0240 - 0x0230)
class USQDeployableChildActorComponent final : public UChildActorComponent
{
public:
	uint8                                         Pad_10DF[0x1];                                     // 0x0230(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	ESQBuildState                                 SpawnBuildState;                                   // 0x0231(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQBuildState                                 DespawnBuildState;                                 // 0x0232(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldUseSpawningTeam;                            // 0x0233(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TimesSpawnable;                                    // 0x0234(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10E0[0xB];                                     // 0x0235(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnDeployableStateChange(ESQBuildState BuildState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDeployableChildActorComponent">();
	}
	static class USQDeployableChildActorComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQDeployableChildActorComponent>();
	}
};
static_assert(alignof(USQDeployableChildActorComponent) == 0x000010, "Wrong alignment on USQDeployableChildActorComponent");
static_assert(sizeof(USQDeployableChildActorComponent) == 0x000240, "Wrong size on USQDeployableChildActorComponent");
static_assert(offsetof(USQDeployableChildActorComponent, SpawnBuildState) == 0x000231, "Member 'USQDeployableChildActorComponent::SpawnBuildState' has a wrong offset!");
static_assert(offsetof(USQDeployableChildActorComponent, DespawnBuildState) == 0x000232, "Member 'USQDeployableChildActorComponent::DespawnBuildState' has a wrong offset!");
static_assert(offsetof(USQDeployableChildActorComponent, bShouldUseSpawningTeam) == 0x000233, "Member 'USQDeployableChildActorComponent::bShouldUseSpawningTeam' has a wrong offset!");
static_assert(offsetof(USQDeployableChildActorComponent, TimesSpawnable) == 0x000234, "Member 'USQDeployableChildActorComponent::TimesSpawnable' has a wrong offset!");

// Class Squad.SQInventoryWidget
// 0x0048 (0x02B0 - 0x0268)
class USQInventoryWidget : public USQUserWidget
{
public:
	TArray<class USQInventoryGroupWidget*>        GroupsArray;                                       // 0x0268(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class ASQPlayerController*                    OwningController;                                  // 0x0278(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQPawnInventoryComponent*              RenderedInventory;                                 // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10E1[0xC];                                     // 0x0288(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxTranslucencyAlpha;                              // 0x0294(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ItemSelectedAlpha;                                 // 0x0298(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ItemUnselectedAlpha;                               // 0x029C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FadeoutDuration;                                   // 0x02A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FadeoutDelay;                                      // 0x02A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundCue*                              ItemScrollSound;                                   // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void InitWidget();
	void SetupInventoryWidgets();
	void UpdateElements();
	void UpdateInventoryWidgets();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQInventoryWidget">();
	}
	static class USQInventoryWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQInventoryWidget>();
	}
};
static_assert(alignof(USQInventoryWidget) == 0x000008, "Wrong alignment on USQInventoryWidget");
static_assert(sizeof(USQInventoryWidget) == 0x0002B0, "Wrong size on USQInventoryWidget");
static_assert(offsetof(USQInventoryWidget, GroupsArray) == 0x000268, "Member 'USQInventoryWidget::GroupsArray' has a wrong offset!");
static_assert(offsetof(USQInventoryWidget, OwningController) == 0x000278, "Member 'USQInventoryWidget::OwningController' has a wrong offset!");
static_assert(offsetof(USQInventoryWidget, RenderedInventory) == 0x000280, "Member 'USQInventoryWidget::RenderedInventory' has a wrong offset!");
static_assert(offsetof(USQInventoryWidget, MaxTranslucencyAlpha) == 0x000294, "Member 'USQInventoryWidget::MaxTranslucencyAlpha' has a wrong offset!");
static_assert(offsetof(USQInventoryWidget, ItemSelectedAlpha) == 0x000298, "Member 'USQInventoryWidget::ItemSelectedAlpha' has a wrong offset!");
static_assert(offsetof(USQInventoryWidget, ItemUnselectedAlpha) == 0x00029C, "Member 'USQInventoryWidget::ItemUnselectedAlpha' has a wrong offset!");
static_assert(offsetof(USQInventoryWidget, FadeoutDuration) == 0x0002A0, "Member 'USQInventoryWidget::FadeoutDuration' has a wrong offset!");
static_assert(offsetof(USQInventoryWidget, FadeoutDelay) == 0x0002A4, "Member 'USQInventoryWidget::FadeoutDelay' has a wrong offset!");
static_assert(offsetof(USQInventoryWidget, ItemScrollSound) == 0x0002A8, "Member 'USQInventoryWidget::ItemScrollSound' has a wrong offset!");

// Class Squad.SQServerListItemWidget
// 0x0018 (0x0280 - 0x0268)
class USQServerListItemWidget : public USQUserWidget
{
public:
	int32                                         ItemIndex;                                         // 0x0268(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10E2[0x4];                                     // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQSessionInfo*                         SessionInfo;                                       // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             PingTextBlock;                                     // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ClientJoinAccepted();
	class FString GetServerURL();
	void ServerConnectionCheckUpdate(const struct FSQConnectionCheckResponse& UpdateResponse);
	void SetSession(const struct FBlueprintSessionResult& Result);
	void UpdatePing();

	class FString GetServerName(const struct FBlueprintSessionResult& Result) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQServerListItemWidget">();
	}
	static class USQServerListItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQServerListItemWidget>();
	}
};
static_assert(alignof(USQServerListItemWidget) == 0x000008, "Wrong alignment on USQServerListItemWidget");
static_assert(sizeof(USQServerListItemWidget) == 0x000280, "Wrong size on USQServerListItemWidget");
static_assert(offsetof(USQServerListItemWidget, ItemIndex) == 0x000268, "Member 'USQServerListItemWidget::ItemIndex' has a wrong offset!");
static_assert(offsetof(USQServerListItemWidget, SessionInfo) == 0x000270, "Member 'USQServerListItemWidget::SessionInfo' has a wrong offset!");
static_assert(offsetof(USQServerListItemWidget, PingTextBlock) == 0x000278, "Member 'USQServerListItemWidget::PingTextBlock' has a wrong offset!");

// Class Squad.SQDeployableGhostChildActorComp
// 0x0020 (0x0250 - 0x0230)
class USQDeployableGhostChildActorComp final : public UChildActorComponent
{
public:
	class ASQDeployable*                          Deployable;                                        // 0x0230(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQDeployableSettings*                  DeployableSetting;                                 // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQBuildState                                 DeployableBuildState;                              // 0x0240(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10E3[0xF];                                     // 0x0241(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDeployableGhostChildActorComp">();
	}
	static class USQDeployableGhostChildActorComp* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQDeployableGhostChildActorComp>();
	}
};
static_assert(alignof(USQDeployableGhostChildActorComp) == 0x000010, "Wrong alignment on USQDeployableGhostChildActorComp");
static_assert(sizeof(USQDeployableGhostChildActorComp) == 0x000250, "Wrong size on USQDeployableGhostChildActorComp");
static_assert(offsetof(USQDeployableGhostChildActorComp, Deployable) == 0x000230, "Member 'USQDeployableGhostChildActorComp::Deployable' has a wrong offset!");
static_assert(offsetof(USQDeployableGhostChildActorComp, DeployableSetting) == 0x000238, "Member 'USQDeployableGhostChildActorComp::DeployableSetting' has a wrong offset!");
static_assert(offsetof(USQDeployableGhostChildActorComp, DeployableBuildState) == 0x000240, "Member 'USQDeployableGhostChildActorComp::DeployableBuildState' has a wrong offset!");

// Class Squad.SQDeployableInteractable
// 0x0000 (0x0450 - 0x0450)
class ASQDeployableInteractable final : public ASQDeployableItem
{
public:
	void BP_PickedUp(class ASQEquipableItem* EquippableDeployableInteractable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDeployableInteractable">();
	}
	static class ASQDeployableInteractable* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQDeployableInteractable>();
	}
};
static_assert(alignof(ASQDeployableInteractable) == 0x000008, "Wrong alignment on ASQDeployableInteractable");
static_assert(sizeof(ASQDeployableInteractable) == 0x000450, "Wrong size on ASQDeployableInteractable");

// Class Squad.SQObjectiveRuleset
// 0x0090 (0x0320 - 0x0290)
class ASQObjectiveRuleset : public ASQGameModeRuleset
{
public:
	int32                                         NumberOfObjectives;                                // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNumberOfObjectivesShownAtSameTime;              // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicketsGainedUponMeetingObjective;                 // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicketsLostUponLosingObjective;                    // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQMapMarker>               KnownAttackObjectiveMarkerClass;                   // 0x02A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQMapMarker>               KnownDefendObjectiveMarkerClass;                   // 0x02A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQMapMarker>               UnknownDefendObjectiveMarkerClass;                 // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQMapMarker>               SatisfiedObjectiveMarkerClass;                     // 0x02B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinObjectiveDistance;                              // 0x02C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyCheckMinDistanceAgainstActiveObjectives;      // 0x02C4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRandomlyPickObjectiveIfAllFailDistanceCheck;      // 0x02C5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10E4[0x2];                                     // 0x02C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ASQMapMarker*>                   Markers;                                           // 0x02C8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     AllAvailableObjectiveLocations;                    // 0x02D8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FTransform>                     FilteredObjectiveLocations;                        // 0x02E8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class ASQObjective*>                   Objectives;                                        // 0x02F8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQObjective>               ObjectiveType;                                     // 0x0308(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeSinceLastObjectiveSpawn;                       // 0x0310(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOverrideObjectiveSpawning;                        // 0x0314(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bGenerateMarkersForTeamOneUponObjectiveSpawn;      // 0x0315(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bGenerateMarkersForTeamTwoUponObjectiveSpawn;      // 0x0316(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESQTeam                                       WinningTeamUponAllObjectivesCompleted;             // 0x0317(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESQTeam                                       WinningTeamUponTimerExpired;                       // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESQTeam                                       WinningTeamIfTeamOneHasNoTickets;                  // 0x0319(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESQTeam                                       WinningTeamIfTeamTwoHasNoTickets;                  // 0x031A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10E5[0x5];                                     // 0x031B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearAndGenerateMarkersForTeam(ESQTeam Team);
	void ClearAndGenerateMarkersForTeamOne();
	void ClearAndGenerateMarkersForTeamTwo();
	void DelayShowNewObjectives(float InDelay);
	void GenerateMarkersForTeam(ESQTeam Team);
	void OnObjectiveMet(class ASQObjective* ObjectiveMet);
	void OnObjectiveShown(class ASQObjective* ObjectiveShown);
	TArray<class ASQObjective*> ShowNewObjectives();
	void ShowNewObjectivesFromTimer();

	bool RandomlySelectDistantUnusedObjectiveLocation(struct FTransform* OutTransform) const;
	bool RandomlySelectUnusedObjectiveLocation(struct FTransform* OutTransform) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQObjectiveRuleset">();
	}
	static class ASQObjectiveRuleset* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQObjectiveRuleset>();
	}
};
static_assert(alignof(ASQObjectiveRuleset) == 0x000008, "Wrong alignment on ASQObjectiveRuleset");
static_assert(sizeof(ASQObjectiveRuleset) == 0x000320, "Wrong size on ASQObjectiveRuleset");
static_assert(offsetof(ASQObjectiveRuleset, NumberOfObjectives) == 0x000290, "Member 'ASQObjectiveRuleset::NumberOfObjectives' has a wrong offset!");
static_assert(offsetof(ASQObjectiveRuleset, MaxNumberOfObjectivesShownAtSameTime) == 0x000294, "Member 'ASQObjectiveRuleset::MaxNumberOfObjectivesShownAtSameTime' has a wrong offset!");
static_assert(offsetof(ASQObjectiveRuleset, TicketsGainedUponMeetingObjective) == 0x000298, "Member 'ASQObjectiveRuleset::TicketsGainedUponMeetingObjective' has a wrong offset!");
static_assert(offsetof(ASQObjectiveRuleset, TicketsLostUponLosingObjective) == 0x00029C, "Member 'ASQObjectiveRuleset::TicketsLostUponLosingObjective' has a wrong offset!");
static_assert(offsetof(ASQObjectiveRuleset, KnownAttackObjectiveMarkerClass) == 0x0002A0, "Member 'ASQObjectiveRuleset::KnownAttackObjectiveMarkerClass' has a wrong offset!");
static_assert(offsetof(ASQObjectiveRuleset, KnownDefendObjectiveMarkerClass) == 0x0002A8, "Member 'ASQObjectiveRuleset::KnownDefendObjectiveMarkerClass' has a wrong offset!");
static_assert(offsetof(ASQObjectiveRuleset, UnknownDefendObjectiveMarkerClass) == 0x0002B0, "Member 'ASQObjectiveRuleset::UnknownDefendObjectiveMarkerClass' has a wrong offset!");
static_assert(offsetof(ASQObjectiveRuleset, SatisfiedObjectiveMarkerClass) == 0x0002B8, "Member 'ASQObjectiveRuleset::SatisfiedObjectiveMarkerClass' has a wrong offset!");
static_assert(offsetof(ASQObjectiveRuleset, MinObjectiveDistance) == 0x0002C0, "Member 'ASQObjectiveRuleset::MinObjectiveDistance' has a wrong offset!");
static_assert(offsetof(ASQObjectiveRuleset, bOnlyCheckMinDistanceAgainstActiveObjectives) == 0x0002C4, "Member 'ASQObjectiveRuleset::bOnlyCheckMinDistanceAgainstActiveObjectives' has a wrong offset!");
static_assert(offsetof(ASQObjectiveRuleset, bRandomlyPickObjectiveIfAllFailDistanceCheck) == 0x0002C5, "Member 'ASQObjectiveRuleset::bRandomlyPickObjectiveIfAllFailDistanceCheck' has a wrong offset!");
static_assert(offsetof(ASQObjectiveRuleset, Markers) == 0x0002C8, "Member 'ASQObjectiveRuleset::Markers' has a wrong offset!");
static_assert(offsetof(ASQObjectiveRuleset, AllAvailableObjectiveLocations) == 0x0002D8, "Member 'ASQObjectiveRuleset::AllAvailableObjectiveLocations' has a wrong offset!");
static_assert(offsetof(ASQObjectiveRuleset, FilteredObjectiveLocations) == 0x0002E8, "Member 'ASQObjectiveRuleset::FilteredObjectiveLocations' has a wrong offset!");
static_assert(offsetof(ASQObjectiveRuleset, Objectives) == 0x0002F8, "Member 'ASQObjectiveRuleset::Objectives' has a wrong offset!");
static_assert(offsetof(ASQObjectiveRuleset, ObjectiveType) == 0x000308, "Member 'ASQObjectiveRuleset::ObjectiveType' has a wrong offset!");
static_assert(offsetof(ASQObjectiveRuleset, TimeSinceLastObjectiveSpawn) == 0x000310, "Member 'ASQObjectiveRuleset::TimeSinceLastObjectiveSpawn' has a wrong offset!");
static_assert(offsetof(ASQObjectiveRuleset, bOverrideObjectiveSpawning) == 0x000314, "Member 'ASQObjectiveRuleset::bOverrideObjectiveSpawning' has a wrong offset!");
static_assert(offsetof(ASQObjectiveRuleset, bGenerateMarkersForTeamOneUponObjectiveSpawn) == 0x000315, "Member 'ASQObjectiveRuleset::bGenerateMarkersForTeamOneUponObjectiveSpawn' has a wrong offset!");
static_assert(offsetof(ASQObjectiveRuleset, bGenerateMarkersForTeamTwoUponObjectiveSpawn) == 0x000316, "Member 'ASQObjectiveRuleset::bGenerateMarkersForTeamTwoUponObjectiveSpawn' has a wrong offset!");
static_assert(offsetof(ASQObjectiveRuleset, WinningTeamUponAllObjectivesCompleted) == 0x000317, "Member 'ASQObjectiveRuleset::WinningTeamUponAllObjectivesCompleted' has a wrong offset!");
static_assert(offsetof(ASQObjectiveRuleset, WinningTeamUponTimerExpired) == 0x000318, "Member 'ASQObjectiveRuleset::WinningTeamUponTimerExpired' has a wrong offset!");
static_assert(offsetof(ASQObjectiveRuleset, WinningTeamIfTeamOneHasNoTickets) == 0x000319, "Member 'ASQObjectiveRuleset::WinningTeamIfTeamOneHasNoTickets' has a wrong offset!");
static_assert(offsetof(ASQObjectiveRuleset, WinningTeamIfTeamTwoHasNoTickets) == 0x00031A, "Member 'ASQObjectiveRuleset::WinningTeamIfTeamTwoHasNoTickets' has a wrong offset!");

// Class Squad.SQInsurgencyRuleset
// 0x0050 (0x0370 - 0x0320)
class ASQInsurgencyRuleset final : public ASQObjectiveRuleset
{
public:
	int32                                         IntelligencePoints;                                // 0x0320(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTeam                                       CoalitionTeam;                                     // 0x0324(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTeam                                       InsurgentTeam;                                     // 0x0325(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10E8[0x2];                                     // 0x0326(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxNumberOfFirstCachesToShowCoalition;             // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TimeDelayToShowFirstCache;                         // 0x032C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TimeDelayToShowNextCache;                          // 0x0334(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TimeDelayToNotifyCoalitionOfFirstCaches;           // 0x033C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TimeDelayToNotifyCoalitionOfCache;                 // 0x0344(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntelligencePointsPerInsurgentKilled;              // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntelligencePointsPerInsurgentArrested;            // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntelligencePointsPerCivilianKilled;               // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSQPlayerLimiter>               IntelligencePointsRequiredToShowCache;             // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class USQRoleSettings*                        CivilianRole;                                      // 0x0368(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void CheckIntelligencePoints();
	int32 GetNumberOfPlayersOnServer();
	void NotifyCoalitionOfCaches(const TArray<class ASQObjective*>& NewCaches);
	void NotifyCoalitionOfSingleCache();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQInsurgencyRuleset">();
	}
	static class ASQInsurgencyRuleset* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQInsurgencyRuleset>();
	}
};
static_assert(alignof(ASQInsurgencyRuleset) == 0x000008, "Wrong alignment on ASQInsurgencyRuleset");
static_assert(sizeof(ASQInsurgencyRuleset) == 0x000370, "Wrong size on ASQInsurgencyRuleset");
static_assert(offsetof(ASQInsurgencyRuleset, IntelligencePoints) == 0x000320, "Member 'ASQInsurgencyRuleset::IntelligencePoints' has a wrong offset!");
static_assert(offsetof(ASQInsurgencyRuleset, CoalitionTeam) == 0x000324, "Member 'ASQInsurgencyRuleset::CoalitionTeam' has a wrong offset!");
static_assert(offsetof(ASQInsurgencyRuleset, InsurgentTeam) == 0x000325, "Member 'ASQInsurgencyRuleset::InsurgentTeam' has a wrong offset!");
static_assert(offsetof(ASQInsurgencyRuleset, MaxNumberOfFirstCachesToShowCoalition) == 0x000328, "Member 'ASQInsurgencyRuleset::MaxNumberOfFirstCachesToShowCoalition' has a wrong offset!");
static_assert(offsetof(ASQInsurgencyRuleset, TimeDelayToShowFirstCache) == 0x00032C, "Member 'ASQInsurgencyRuleset::TimeDelayToShowFirstCache' has a wrong offset!");
static_assert(offsetof(ASQInsurgencyRuleset, TimeDelayToShowNextCache) == 0x000334, "Member 'ASQInsurgencyRuleset::TimeDelayToShowNextCache' has a wrong offset!");
static_assert(offsetof(ASQInsurgencyRuleset, TimeDelayToNotifyCoalitionOfFirstCaches) == 0x00033C, "Member 'ASQInsurgencyRuleset::TimeDelayToNotifyCoalitionOfFirstCaches' has a wrong offset!");
static_assert(offsetof(ASQInsurgencyRuleset, TimeDelayToNotifyCoalitionOfCache) == 0x000344, "Member 'ASQInsurgencyRuleset::TimeDelayToNotifyCoalitionOfCache' has a wrong offset!");
static_assert(offsetof(ASQInsurgencyRuleset, IntelligencePointsPerInsurgentKilled) == 0x00034C, "Member 'ASQInsurgencyRuleset::IntelligencePointsPerInsurgentKilled' has a wrong offset!");
static_assert(offsetof(ASQInsurgencyRuleset, IntelligencePointsPerInsurgentArrested) == 0x000350, "Member 'ASQInsurgencyRuleset::IntelligencePointsPerInsurgentArrested' has a wrong offset!");
static_assert(offsetof(ASQInsurgencyRuleset, IntelligencePointsPerCivilianKilled) == 0x000354, "Member 'ASQInsurgencyRuleset::IntelligencePointsPerCivilianKilled' has a wrong offset!");
static_assert(offsetof(ASQInsurgencyRuleset, IntelligencePointsRequiredToShowCache) == 0x000358, "Member 'ASQInsurgencyRuleset::IntelligencePointsRequiredToShowCache' has a wrong offset!");
static_assert(offsetof(ASQInsurgencyRuleset, CivilianRole) == 0x000368, "Member 'ASQInsurgencyRuleset::CivilianRole' has a wrong offset!");

// Class Squad.SQDeployableItemStaticInfo
// 0x0030 (0x0620 - 0x05F0)
class USQDeployableItemStaticInfo : public USQItemStaticInfo
{
public:
	class UAnimMontage*                           PlacingDeployableWeaponMontage;                    // 0x05F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           PlacingDeployable1pMontage;                        // 0x05F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           PlacingDeployable3pMontage;                        // 0x0600(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQDeployableItem>          DeployableClass;                                   // 0x0608(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQDeployableSettings*                  Deployable;                                        // 0x0610(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlacingDeployableDuration;                         // 0x0618(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinishPlacingDeployableBlendOutDuration;           // 0x061C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDeployableItemStaticInfo">();
	}
	static class USQDeployableItemStaticInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQDeployableItemStaticInfo>();
	}
};
static_assert(alignof(USQDeployableItemStaticInfo) == 0x000008, "Wrong alignment on USQDeployableItemStaticInfo");
static_assert(sizeof(USQDeployableItemStaticInfo) == 0x000620, "Wrong size on USQDeployableItemStaticInfo");
static_assert(offsetof(USQDeployableItemStaticInfo, PlacingDeployableWeaponMontage) == 0x0005F0, "Member 'USQDeployableItemStaticInfo::PlacingDeployableWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQDeployableItemStaticInfo, PlacingDeployable1pMontage) == 0x0005F8, "Member 'USQDeployableItemStaticInfo::PlacingDeployable1pMontage' has a wrong offset!");
static_assert(offsetof(USQDeployableItemStaticInfo, PlacingDeployable3pMontage) == 0x000600, "Member 'USQDeployableItemStaticInfo::PlacingDeployable3pMontage' has a wrong offset!");
static_assert(offsetof(USQDeployableItemStaticInfo, DeployableClass) == 0x000608, "Member 'USQDeployableItemStaticInfo::DeployableClass' has a wrong offset!");
static_assert(offsetof(USQDeployableItemStaticInfo, Deployable) == 0x000610, "Member 'USQDeployableItemStaticInfo::Deployable' has a wrong offset!");
static_assert(offsetof(USQDeployableItemStaticInfo, PlacingDeployableDuration) == 0x000618, "Member 'USQDeployableItemStaticInfo::PlacingDeployableDuration' has a wrong offset!");
static_assert(offsetof(USQDeployableItemStaticInfo, FinishPlacingDeployableBlendOutDuration) == 0x00061C, "Member 'USQDeployableItemStaticInfo::FinishPlacingDeployableBlendOutDuration' has a wrong offset!");

// Class Squad.SQWeapon
// 0x0418 (0x0890 - 0x0478)
#pragma pack(push, 0x1)
class alignas(0x10) ASQWeapon : public ASQEquipableItem
{
public:
	FMulticastInlineDelegateProperty_             OnProjectileSpawned;                               // 0x0478(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class USQWeaponStaticInfo*                    WeaponStaticInfo;                                  // 0x0488(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSQAudioComponentPool                  FiringAudioComponentPool;                          // 0x0490(0x0020)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_10E9[0x160];                                   // 0x04B0(0x0160)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ZoomFinishAdsTransitionTimerHandle;                // 0x0610(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWaitingForMagazineLoad;                           // 0x0618(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10EA[0x3];                                     // 0x0619(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bFiring : 1;                                       // 0x061C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Net, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bReloading : 1;                                    // 0x061C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Net, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_10EB[0x3];                                     // 0x061D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQWeaponData                          WeaponConfig;                                      // 0x0620(0x00C8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ESQWeaponState                                CurrentState;                                      // 0x06E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRoundInChamber;                                 // 0x06E9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10EC[0x6];                                     // 0x06EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USQPipScopeCaptureComponent*            CachedPipScope;                                    // 0x06F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ADSMoveSpeedMultiplier;                            // 0x06F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAimingDownSights;                                 // 0x06FC(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFireInput;                                        // 0x06FD(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPendingFire;                                      // 0x06FE(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10ED[0x11];                                    // 0x06FF(0x0011)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxTimeToLoopSoundsAfterLastFire;                  // 0x0710(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ModifiedTacticalReloadDuration;                    // 0x0714(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ModifiedDryReloadDuration;                         // 0x0718(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10EE[0x1C];                                    // 0x071C(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentFireMode;                                   // 0x0738(0x0004)(BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10EF[0xC];                                     // 0x073C(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQMagazineData>                Magazines;                                         // 0x0748(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class USQWeaponAttachment>> AttachmentClasses;                                 // 0x0758(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class USQWeaponAttachment*>            Attachments;                                       // 0x0768(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UADSPostProcessSettings*                ADSPostProcessSettings;                            // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       DynamicFirstPersonMeshMaterials;                   // 0x0780(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_10F0[0x8];                                     // 0x0790(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FovShaderName;                                     // 0x0798(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FocusZoomAlpha;                                    // 0x07A0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SimulatedAdsAlpha;                                 // 0x07A4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10F1[0x8];                                     // 0x07A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUseStopADSPPDrawing;                              // 0x07B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopADSPPDrawing;                                 // 0x07B1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10F2[0x2];                                     // 0x07B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQDynamicEasingStruct                 HoldingZoomEasing;                                 // 0x07B4(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         HoldingZoomEasingAlpha;                            // 0x07C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HoldingZoomRawAlpha;                               // 0x07CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10F3[0x4];                                     // 0x07D0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HoldingZoomIntermediateAlpha;                      // 0x07D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HoldingZoomTargetAlpha;                            // 0x07D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixedZoomFOV;                                     // 0x07DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10F4[0x3];                                     // 0x07DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentFOV;                                        // 0x07E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZoomedFOV;                                         // 0x07E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FocusZoomTime;                                     // 0x07E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FocusAdditionalZoom;                               // 0x07EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeSinceLastZoomToggle;                           // 0x07F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastZoomProgressAtToggle;                          // 0x07F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustAdsSightItemAnimPos;                         // 0x07F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CachedAdjustAdsSightItemAnimPos;                   // 0x07FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewAdjustAdsSightItemAnimPos;                      // 0x0800(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustAdsSightItemAnimPosAlpha;                    // 0x0804(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxConcurrentSounds;                               // 0x0808(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxConcurrentSoundsFadeOut;                        // 0x080C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIs1PUsingSquadSoundNodeLooping;                   // 0x0810(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIs3PUsingSquadSoundNodeLooping;                   // 0x0811(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10F5[0x6];                                     // 0x0812(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        CurrentFiringAC;                                   // 0x0818(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UAudioComponent*>                FiringACs;                                         // 0x0820(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class USoundCue*                              SemiAutoSound1P;                                   // 0x0830(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundCue*                              SemiAutoSound3P;                                   // 0x0838(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundCue*                              StartingSound1P;                                   // 0x0840(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundCue*                              StartingSound3P;                                   // 0x0848(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10F6[0x10];                                    // 0x0850(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsModifyingZeroing;                               // 0x0860(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10F7[0x3];                                     // 0x0861(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AdjustableSightItemPos;                            // 0x0864(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQSuppressionInfo>         SuppressionInfoClassOverride;                      // 0x0868(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalculatedADSTime;                                 // 0x0870(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CachedLastZeroingTime;                             // 0x0874(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CachedLastZeroingPlayTime;                         // 0x0878(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CachedLastZeroingPosition;                         // 0x087C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCachedIsBipodDeployed;                            // 0x0880(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCachedAimProneBobbing;                            // 0x0881(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFinishedAdsTransition;                            // 0x0882(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLastNewZoom;                                      // 0x0883(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          FireSwaySelector;                                  // 0x0884(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          PreFireSwaySelector;                               // 0x0885(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10F8[0x2];                                     // 0x0886(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BlueprintOnFire(const struct FVector& Origin);
	void BlueprintOnPreReload();
	void BlueprintOnReload();
	void BlueprintOnReloaded();
	void BlueprintOnToggleFiremode();
	void BlueprintOnZoom(bool bNewZoom);
	void FinishAdsTransition();
	void ModifyZeroing(bool bIncrease);
	void MulticastCancelReload();
	void MulticastFireMultipleProjectileEffects(const TArray<struct FSQPenetrationProxy>& HitResultsZeroBased, const struct FSQShotInfo& ShotInfoZeroBased, bool bIsRayTracedShot, bool bIsManuallyCalled);
	void MulticastFireProjectile(const struct FVector& OriginZeroBased, const struct FVector_NetQuantizeNormal& ShootDir);
	void MulticastFireProjectileWithId(const struct FVector& OriginZeroBased, const struct FVector_NetQuantizeNormal& ShootDir, uint64 UniqueProjectileId);
	void OnPawnOwnerChanged(class APawn* NewPawnOwner);
	void OnRep_AimingDownSights(bool bPrevAimingDownSights);
	void OnRep_Firing();
	void OnRep_Magazines(TArray<struct FSQMagazineData>* OldMagazines);
	void OnRep_Reloading();
	void PlayFiringSound(class USoundBase* Sound1p, class USoundBase* Sound3p, const class FName& SocketName);
	void PlayImpactEffect(const struct FSQPenetrationTrace& PenetrationHitInputZeroBased, bool bIsProjectileTracer);
	void ServerFireProjectile(const struct FSQShotInfo& ShotInfoZeroBased);
	void ServerFireProjectileWithId(const struct FSQShotInfo& ShotInfoZeroBased, uint64 UniqueProjectileId);
	void ServerNotifyFireAndMiss(const struct FSQShotInfo& ShotInfoZeroBased, const struct FHitResult& HitResultZeroBased, bool bIsRayTracedShot);
	void ServerNotifyHit(const struct FSQShotInfo& ShotInfoZeroBased, const TArray<struct FSQPenetrationTrace>& TargetsZeroBased, bool bIsRayTracedShot, bool bIsManuallyCalled);
	void ServerSetCurrentFireMode(int32 NewCurrentFireMode);
	void ServerSetIsAimingDownSights(bool bIsAimingDownSights);
	void ServerStartFire();
	void ServerStartReload();
	void ServerStopFire();
	void SetZoom(bool bNewZoom, bool bForce);
	void StartModifyZeroing();
	void StartReload();
	void StopModifyZeroing();
	void ToggleFiremode();
	void UpdateAdjustableSightAnimPos();
	void UpdateAimProneBobbing();
	void UpdateBipod();
	void UpdateVariableADSBipod(bool bIsBipod);
	void UpdateVariableADSStance(ESQStance Stance);

	bool CanToggleFiremode() const;
	struct FVector GetAimDirection() const;
	struct FVector GetAimLocation() const;
	float GetCurrentMOA() const;
	struct FVector GetMOAAdjustedAimDirection(const struct FVector& AimDirection) const;
	struct FVector GetMOAAdjustedAimDirectionFromRotator(const struct FRotator& AimDirection) const;
	struct FTransform GetProjectileSpawnTransform() const;
	class USQWeaponStaticInfo* GetWeaponStaticInfo() const;
	float GetZoomProgress(bool bJustToggledZoom) const;
	bool IsAimingDownSights() const;
	bool IsFullyZoomed() const;
	bool IsPendingFire() const;
	bool IsPullingTrigger() const;
	bool IsReloading() const;
	bool IsZoomed() const;
	bool MagazineHasAmmo() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQWeapon">();
	}
	static class ASQWeapon* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQWeapon>();
	}
};
#pragma pack(pop)
static_assert(alignof(ASQWeapon) == 0x000010, "Wrong alignment on ASQWeapon");
static_assert(sizeof(ASQWeapon) == 0x000890, "Wrong size on ASQWeapon");
static_assert(offsetof(ASQWeapon, OnProjectileSpawned) == 0x000478, "Member 'ASQWeapon::OnProjectileSpawned' has a wrong offset!");
static_assert(offsetof(ASQWeapon, WeaponStaticInfo) == 0x000488, "Member 'ASQWeapon::WeaponStaticInfo' has a wrong offset!");
static_assert(offsetof(ASQWeapon, FiringAudioComponentPool) == 0x000490, "Member 'ASQWeapon::FiringAudioComponentPool' has a wrong offset!");
static_assert(offsetof(ASQWeapon, ZoomFinishAdsTransitionTimerHandle) == 0x000610, "Member 'ASQWeapon::ZoomFinishAdsTransitionTimerHandle' has a wrong offset!");
static_assert(offsetof(ASQWeapon, bWaitingForMagazineLoad) == 0x000618, "Member 'ASQWeapon::bWaitingForMagazineLoad' has a wrong offset!");
static_assert(offsetof(ASQWeapon, WeaponConfig) == 0x000620, "Member 'ASQWeapon::WeaponConfig' has a wrong offset!");
static_assert(offsetof(ASQWeapon, CurrentState) == 0x0006E8, "Member 'ASQWeapon::CurrentState' has a wrong offset!");
static_assert(offsetof(ASQWeapon, bIsRoundInChamber) == 0x0006E9, "Member 'ASQWeapon::bIsRoundInChamber' has a wrong offset!");
static_assert(offsetof(ASQWeapon, CachedPipScope) == 0x0006F0, "Member 'ASQWeapon::CachedPipScope' has a wrong offset!");
static_assert(offsetof(ASQWeapon, ADSMoveSpeedMultiplier) == 0x0006F8, "Member 'ASQWeapon::ADSMoveSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(ASQWeapon, bAimingDownSights) == 0x0006FC, "Member 'ASQWeapon::bAimingDownSights' has a wrong offset!");
static_assert(offsetof(ASQWeapon, bFireInput) == 0x0006FD, "Member 'ASQWeapon::bFireInput' has a wrong offset!");
static_assert(offsetof(ASQWeapon, bPendingFire) == 0x0006FE, "Member 'ASQWeapon::bPendingFire' has a wrong offset!");
static_assert(offsetof(ASQWeapon, MaxTimeToLoopSoundsAfterLastFire) == 0x000710, "Member 'ASQWeapon::MaxTimeToLoopSoundsAfterLastFire' has a wrong offset!");
static_assert(offsetof(ASQWeapon, ModifiedTacticalReloadDuration) == 0x000714, "Member 'ASQWeapon::ModifiedTacticalReloadDuration' has a wrong offset!");
static_assert(offsetof(ASQWeapon, ModifiedDryReloadDuration) == 0x000718, "Member 'ASQWeapon::ModifiedDryReloadDuration' has a wrong offset!");
static_assert(offsetof(ASQWeapon, CurrentFireMode) == 0x000738, "Member 'ASQWeapon::CurrentFireMode' has a wrong offset!");
static_assert(offsetof(ASQWeapon, Magazines) == 0x000748, "Member 'ASQWeapon::Magazines' has a wrong offset!");
static_assert(offsetof(ASQWeapon, AttachmentClasses) == 0x000758, "Member 'ASQWeapon::AttachmentClasses' has a wrong offset!");
static_assert(offsetof(ASQWeapon, Attachments) == 0x000768, "Member 'ASQWeapon::Attachments' has a wrong offset!");
static_assert(offsetof(ASQWeapon, ADSPostProcessSettings) == 0x000778, "Member 'ASQWeapon::ADSPostProcessSettings' has a wrong offset!");
static_assert(offsetof(ASQWeapon, DynamicFirstPersonMeshMaterials) == 0x000780, "Member 'ASQWeapon::DynamicFirstPersonMeshMaterials' has a wrong offset!");
static_assert(offsetof(ASQWeapon, FovShaderName) == 0x000798, "Member 'ASQWeapon::FovShaderName' has a wrong offset!");
static_assert(offsetof(ASQWeapon, FocusZoomAlpha) == 0x0007A0, "Member 'ASQWeapon::FocusZoomAlpha' has a wrong offset!");
static_assert(offsetof(ASQWeapon, SimulatedAdsAlpha) == 0x0007A4, "Member 'ASQWeapon::SimulatedAdsAlpha' has a wrong offset!");
static_assert(offsetof(ASQWeapon, bUseStopADSPPDrawing) == 0x0007B0, "Member 'ASQWeapon::bUseStopADSPPDrawing' has a wrong offset!");
static_assert(offsetof(ASQWeapon, bStopADSPPDrawing) == 0x0007B1, "Member 'ASQWeapon::bStopADSPPDrawing' has a wrong offset!");
static_assert(offsetof(ASQWeapon, HoldingZoomEasing) == 0x0007B4, "Member 'ASQWeapon::HoldingZoomEasing' has a wrong offset!");
static_assert(offsetof(ASQWeapon, HoldingZoomEasingAlpha) == 0x0007C8, "Member 'ASQWeapon::HoldingZoomEasingAlpha' has a wrong offset!");
static_assert(offsetof(ASQWeapon, HoldingZoomRawAlpha) == 0x0007CC, "Member 'ASQWeapon::HoldingZoomRawAlpha' has a wrong offset!");
static_assert(offsetof(ASQWeapon, HoldingZoomIntermediateAlpha) == 0x0007D4, "Member 'ASQWeapon::HoldingZoomIntermediateAlpha' has a wrong offset!");
static_assert(offsetof(ASQWeapon, HoldingZoomTargetAlpha) == 0x0007D8, "Member 'ASQWeapon::HoldingZoomTargetAlpha' has a wrong offset!");
static_assert(offsetof(ASQWeapon, bFixedZoomFOV) == 0x0007DC, "Member 'ASQWeapon::bFixedZoomFOV' has a wrong offset!");
static_assert(offsetof(ASQWeapon, CurrentFOV) == 0x0007E0, "Member 'ASQWeapon::CurrentFOV' has a wrong offset!");
static_assert(offsetof(ASQWeapon, ZoomedFOV) == 0x0007E4, "Member 'ASQWeapon::ZoomedFOV' has a wrong offset!");
static_assert(offsetof(ASQWeapon, FocusZoomTime) == 0x0007E8, "Member 'ASQWeapon::FocusZoomTime' has a wrong offset!");
static_assert(offsetof(ASQWeapon, FocusAdditionalZoom) == 0x0007EC, "Member 'ASQWeapon::FocusAdditionalZoom' has a wrong offset!");
static_assert(offsetof(ASQWeapon, TimeSinceLastZoomToggle) == 0x0007F0, "Member 'ASQWeapon::TimeSinceLastZoomToggle' has a wrong offset!");
static_assert(offsetof(ASQWeapon, LastZoomProgressAtToggle) == 0x0007F4, "Member 'ASQWeapon::LastZoomProgressAtToggle' has a wrong offset!");
static_assert(offsetof(ASQWeapon, AdjustAdsSightItemAnimPos) == 0x0007F8, "Member 'ASQWeapon::AdjustAdsSightItemAnimPos' has a wrong offset!");
static_assert(offsetof(ASQWeapon, CachedAdjustAdsSightItemAnimPos) == 0x0007FC, "Member 'ASQWeapon::CachedAdjustAdsSightItemAnimPos' has a wrong offset!");
static_assert(offsetof(ASQWeapon, NewAdjustAdsSightItemAnimPos) == 0x000800, "Member 'ASQWeapon::NewAdjustAdsSightItemAnimPos' has a wrong offset!");
static_assert(offsetof(ASQWeapon, AdjustAdsSightItemAnimPosAlpha) == 0x000804, "Member 'ASQWeapon::AdjustAdsSightItemAnimPosAlpha' has a wrong offset!");
static_assert(offsetof(ASQWeapon, MaxConcurrentSounds) == 0x000808, "Member 'ASQWeapon::MaxConcurrentSounds' has a wrong offset!");
static_assert(offsetof(ASQWeapon, MaxConcurrentSoundsFadeOut) == 0x00080C, "Member 'ASQWeapon::MaxConcurrentSoundsFadeOut' has a wrong offset!");
static_assert(offsetof(ASQWeapon, bIs1PUsingSquadSoundNodeLooping) == 0x000810, "Member 'ASQWeapon::bIs1PUsingSquadSoundNodeLooping' has a wrong offset!");
static_assert(offsetof(ASQWeapon, bIs3PUsingSquadSoundNodeLooping) == 0x000811, "Member 'ASQWeapon::bIs3PUsingSquadSoundNodeLooping' has a wrong offset!");
static_assert(offsetof(ASQWeapon, CurrentFiringAC) == 0x000818, "Member 'ASQWeapon::CurrentFiringAC' has a wrong offset!");
static_assert(offsetof(ASQWeapon, FiringACs) == 0x000820, "Member 'ASQWeapon::FiringACs' has a wrong offset!");
static_assert(offsetof(ASQWeapon, SemiAutoSound1P) == 0x000830, "Member 'ASQWeapon::SemiAutoSound1P' has a wrong offset!");
static_assert(offsetof(ASQWeapon, SemiAutoSound3P) == 0x000838, "Member 'ASQWeapon::SemiAutoSound3P' has a wrong offset!");
static_assert(offsetof(ASQWeapon, StartingSound1P) == 0x000840, "Member 'ASQWeapon::StartingSound1P' has a wrong offset!");
static_assert(offsetof(ASQWeapon, StartingSound3P) == 0x000848, "Member 'ASQWeapon::StartingSound3P' has a wrong offset!");
static_assert(offsetof(ASQWeapon, bIsModifyingZeroing) == 0x000860, "Member 'ASQWeapon::bIsModifyingZeroing' has a wrong offset!");
static_assert(offsetof(ASQWeapon, AdjustableSightItemPos) == 0x000864, "Member 'ASQWeapon::AdjustableSightItemPos' has a wrong offset!");
static_assert(offsetof(ASQWeapon, SuppressionInfoClassOverride) == 0x000868, "Member 'ASQWeapon::SuppressionInfoClassOverride' has a wrong offset!");
static_assert(offsetof(ASQWeapon, CalculatedADSTime) == 0x000870, "Member 'ASQWeapon::CalculatedADSTime' has a wrong offset!");
static_assert(offsetof(ASQWeapon, CachedLastZeroingTime) == 0x000874, "Member 'ASQWeapon::CachedLastZeroingTime' has a wrong offset!");
static_assert(offsetof(ASQWeapon, CachedLastZeroingPlayTime) == 0x000878, "Member 'ASQWeapon::CachedLastZeroingPlayTime' has a wrong offset!");
static_assert(offsetof(ASQWeapon, CachedLastZeroingPosition) == 0x00087C, "Member 'ASQWeapon::CachedLastZeroingPosition' has a wrong offset!");
static_assert(offsetof(ASQWeapon, bCachedIsBipodDeployed) == 0x000880, "Member 'ASQWeapon::bCachedIsBipodDeployed' has a wrong offset!");
static_assert(offsetof(ASQWeapon, bCachedAimProneBobbing) == 0x000881, "Member 'ASQWeapon::bCachedAimProneBobbing' has a wrong offset!");
static_assert(offsetof(ASQWeapon, bFinishedAdsTransition) == 0x000882, "Member 'ASQWeapon::bFinishedAdsTransition' has a wrong offset!");
static_assert(offsetof(ASQWeapon, bLastNewZoom) == 0x000883, "Member 'ASQWeapon::bLastNewZoom' has a wrong offset!");
static_assert(offsetof(ASQWeapon, FireSwaySelector) == 0x000884, "Member 'ASQWeapon::FireSwaySelector' has a wrong offset!");
static_assert(offsetof(ASQWeapon, PreFireSwaySelector) == 0x000885, "Member 'ASQWeapon::PreFireSwaySelector' has a wrong offset!");

// Class Squad.SQProgressWidget
// 0x0020 (0x0288 - 0x0268)
class USQProgressWidget : public USQUserWidget
{
public:
	float                                         TimerDuration;                                     // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TimerEnd;                                          // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTimerActive;                                      // 0x0270(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1100[0x3];                                     // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeRemaining;                                     // 0x0274(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnTimerReached;                                    // 0x0278(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)

public:
	void BPOnTimerCanceled();
	void BPOnTimerPaused();
	void BPOnTimerProgress(float RemainingPct);
	void BPOnTimerReached();
	void BPOnTimerResumed();
	void BPOnTimerStarted();
	void CancelTimer();
	void PauseTimer();
	void ResumeTimer();
	void ResumeTimerFromTime(float TimerStartedAt);
	void StartTimer();
	void ToggleTimer();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQProgressWidget">();
	}
	static class USQProgressWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQProgressWidget>();
	}
};
static_assert(alignof(USQProgressWidget) == 0x000008, "Wrong alignment on USQProgressWidget");
static_assert(sizeof(USQProgressWidget) == 0x000288, "Wrong size on USQProgressWidget");
static_assert(offsetof(USQProgressWidget, TimerDuration) == 0x000268, "Member 'USQProgressWidget::TimerDuration' has a wrong offset!");
static_assert(offsetof(USQProgressWidget, TimerEnd) == 0x00026C, "Member 'USQProgressWidget::TimerEnd' has a wrong offset!");
static_assert(offsetof(USQProgressWidget, bTimerActive) == 0x000270, "Member 'USQProgressWidget::bTimerActive' has a wrong offset!");
static_assert(offsetof(USQProgressWidget, TimeRemaining) == 0x000274, "Member 'USQProgressWidget::TimeRemaining' has a wrong offset!");
static_assert(offsetof(USQProgressWidget, OnTimerReached) == 0x000278, "Member 'USQProgressWidget::OnTimerReached' has a wrong offset!");

// Class Squad.SQSeatProgressWidget
// 0x0018 (0x02A0 - 0x0288)
class USQSeatProgressWidget : public USQProgressWidget
{
public:
	float                                         TotalTime;                                         // 0x0288(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1101[0x4];                                     // 0x028C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQVehicle*                             WithVehicle;                                       // 0x0290(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESeatProgressMenuMode                         MenuMode;                                          // 0x0298(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1102[0x7];                                     // 0x0299(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BPOnShowVehicleInventory();
	void FinishOnServer();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSeatProgressWidget">();
	}
	static class USQSeatProgressWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSeatProgressWidget>();
	}
};
static_assert(alignof(USQSeatProgressWidget) == 0x000008, "Wrong alignment on USQSeatProgressWidget");
static_assert(sizeof(USQSeatProgressWidget) == 0x0002A0, "Wrong size on USQSeatProgressWidget");
static_assert(offsetof(USQSeatProgressWidget, TotalTime) == 0x000288, "Member 'USQSeatProgressWidget::TotalTime' has a wrong offset!");
static_assert(offsetof(USQSeatProgressWidget, WithVehicle) == 0x000290, "Member 'USQSeatProgressWidget::WithVehicle' has a wrong offset!");
static_assert(offsetof(USQSeatProgressWidget, MenuMode) == 0x000298, "Member 'USQSeatProgressWidget::MenuMode' has a wrong offset!");

// Class Squad.SQInventoryInterface
// 0x0000 (0x0028 - 0x0028)
class ISQInventoryInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQInventoryInterface">();
	}
	static class ISQInventoryInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISQInventoryInterface>();
	}
};
static_assert(alignof(ISQInventoryInterface) == 0x000008, "Wrong alignment on ISQInventoryInterface");
static_assert(sizeof(ISQInventoryInterface) == 0x000028, "Wrong size on ISQInventoryInterface");

// Class Squad.SQDeployableVehicle
// 0x0030 (0x0940 - 0x0910)
#pragma pack(push, 0x1)
class alignas(0x10) ASQDeployableVehicle : public ASQVehicle
{
public:
	class USQVehicleInventoryComponent*           InventoryComponent;                                // 0x0908(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQMapIconComponent*                    MapIconComponent;                                  // 0x0910(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQVehicleExitPointComponent*           VehicleExitPoint;                                  // 0x0918(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 SwivelMeshComponent;                               // 0x0920(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        GunMountComponent;                                 // 0x0928(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQDeployable*                          OwningDeployable;                                  // 0x0930(0x0008)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	bool IsCurrentWeaponInputEnabled();
	void LookUp(float Rate);
	void LookUpAtRate(float Rate);
	void Turn(float Rate);
	void TurnAtRate(float Rate);

	class ASQDeployable* GetOwnerDeployable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDeployableVehicle">();
	}
	static class ASQDeployableVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQDeployableVehicle>();
	}
};
#pragma pack(pop)
static_assert(alignof(ASQDeployableVehicle) == 0x000010, "Wrong alignment on ASQDeployableVehicle");
static_assert(sizeof(ASQDeployableVehicle) == 0x000940, "Wrong size on ASQDeployableVehicle");
static_assert(offsetof(ASQDeployableVehicle, InventoryComponent) == 0x000908, "Member 'ASQDeployableVehicle::InventoryComponent' has a wrong offset!");
static_assert(offsetof(ASQDeployableVehicle, MapIconComponent) == 0x000910, "Member 'ASQDeployableVehicle::MapIconComponent' has a wrong offset!");
static_assert(offsetof(ASQDeployableVehicle, VehicleExitPoint) == 0x000918, "Member 'ASQDeployableVehicle::VehicleExitPoint' has a wrong offset!");
static_assert(offsetof(ASQDeployableVehicle, SwivelMeshComponent) == 0x000920, "Member 'ASQDeployableVehicle::SwivelMeshComponent' has a wrong offset!");
static_assert(offsetof(ASQDeployableVehicle, GunMountComponent) == 0x000928, "Member 'ASQDeployableVehicle::GunMountComponent' has a wrong offset!");
static_assert(offsetof(ASQDeployableVehicle, OwningDeployable) == 0x000930, "Member 'ASQDeployableVehicle::OwningDeployable' has a wrong offset!");

// Class Squad.SQJoinBeaconState
// 0x0030 (0x0058 - 0x0028)
class USQJoinBeaconState final : public UObject
{
public:
	TArray<struct FSQServerSlot>                  PublicQueue;                                       // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQServerSlot>                  ReservedQueue;                                     // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQServerSlot>                  JoiningServerSlots;                                // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQJoinBeaconState">();
	}
	static class USQJoinBeaconState* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQJoinBeaconState>();
	}
};
static_assert(alignof(USQJoinBeaconState) == 0x000008, "Wrong alignment on USQJoinBeaconState");
static_assert(sizeof(USQJoinBeaconState) == 0x000058, "Wrong size on USQJoinBeaconState");
static_assert(offsetof(USQJoinBeaconState, PublicQueue) == 0x000028, "Member 'USQJoinBeaconState::PublicQueue' has a wrong offset!");
static_assert(offsetof(USQJoinBeaconState, ReservedQueue) == 0x000038, "Member 'USQJoinBeaconState::ReservedQueue' has a wrong offset!");
static_assert(offsetof(USQJoinBeaconState, JoiningServerSlots) == 0x000048, "Member 'USQJoinBeaconState::JoiningServerSlots' has a wrong offset!");

// Class Squad.SQDeployableMortarVehicle
// 0x0000 (0x0940 - 0x0940)
class ASQDeployableMortarVehicle : public ASQDeployableVehicle
{
public:
	float                                         CachedTubePitch;                                   // 0x0938(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1103[0x4];                                     // 0x093C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDeployableMortarVehicle">();
	}
	static class ASQDeployableMortarVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQDeployableMortarVehicle>();
	}
};
static_assert(alignof(ASQDeployableMortarVehicle) == 0x000010, "Wrong alignment on ASQDeployableMortarVehicle");
static_assert(sizeof(ASQDeployableMortarVehicle) == 0x000940, "Wrong size on ASQDeployableMortarVehicle");
static_assert(offsetof(ASQDeployableMortarVehicle, CachedTubePitch) == 0x000938, "Member 'ASQDeployableMortarVehicle::CachedTubePitch' has a wrong offset!");

// Class Squad.SQServerTagManager
// 0x01F8 (0x0220 - 0x0028)
class USQServerTagManager final : public UObject
{
public:
	class UDataTable*                             TagsTable;                                         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1104[0x1F0];                                   // 0x0030(0x01F0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<class FName> GetPreferencesTags();
	TArray<struct FSQServerTag> GetServerTags(const struct FBlueprintSessionResult& ServerSearchResult);
	void SetFilterByBitMask(const ESQTagType& Section, const int32& BitMask);
	bool SetSearchFilter(const TArray<class FName>& Tags);

	TMap<class FName, struct FSQServerTag> GetAllFiltersInSection(const ESQTagType& Section) const;
	int32 GetFiltersBits(const ESQTagType& Section) const;
	const TMap<ESQTagType, class FName> GetTagSettings() const;
	bool IsFilteringEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQServerTagManager">();
	}
	static class USQServerTagManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQServerTagManager>();
	}
};
static_assert(alignof(USQServerTagManager) == 0x000008, "Wrong alignment on USQServerTagManager");
static_assert(sizeof(USQServerTagManager) == 0x000220, "Wrong size on USQServerTagManager");
static_assert(offsetof(USQServerTagManager, TagsTable) == 0x000028, "Member 'USQServerTagManager::TagsTable' has a wrong offset!");

// Class Squad.SQDeployableSettings
// 0x0008 (0x0068 - 0x0060)
class USQDeployableSettings : public USQSettings
{
public:
	bool                                          ShouldBeTrackedByFOB;                              // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1109[0x7];                                     // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool TryGetDeployableWithLayer(const class USQLayer* InLayer, TSoftClassPtr<class UClass>* OutDeployable) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDeployableSettings">();
	}
	static class USQDeployableSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQDeployableSettings>();
	}
};
static_assert(alignof(USQDeployableSettings) == 0x000008, "Wrong alignment on USQDeployableSettings");
static_assert(sizeof(USQDeployableSettings) == 0x000068, "Wrong size on USQDeployableSettings");
static_assert(offsetof(USQDeployableSettings, ShouldBeTrackedByFOB) == 0x000060, "Member 'USQDeployableSettings::ShouldBeTrackedByFOB' has a wrong offset!");

// Class Squad.SQSpawner
// 0x0098 (0x02C0 - 0x0228)
class ASQSpawner : public AActor
{
public:
	uint8                                         Pad_110B[0x8];                                     // 0x0228(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              MinimumDelayBetweenSpawn;                          // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnPositionHeightCheck;                          // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_110C[0x4];                                     // 0x023C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      SpawnTraceObjectTypes;                             // 0x0240(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         SpawnPositionOffset;                               // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQTeam                                       Team;                                              // 0x0254(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_110D[0x3];                                     // 0x0255(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectCollisionTypes;                              // 0x0258(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          SpawnInProgress;                                   // 0x0268(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpawnOverlapped;                                   // 0x0269(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpawnerEnabled;                                    // 0x026A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_110E[0x5];                                     // 0x026B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnPosition;                                     // 0x0270(0x0030)(BlueprintVisible, BlueprintReadOnly, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                SpawnBound;                                        // 0x02A0(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_110F[0x4];                                     // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              SpawnerLockedUntil;                                // 0x02B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASQTeam*                                TeamAuthority;                                     // 0x02B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	bool ComputeSpawnPosition();
	void InitializeSpawnerDelay();
	void ReportSpawnFinished();
	void ResetSpawnerDelay();
	void SetTeam(ESQTeam NewTeam);
	bool TrySpawn();

	struct FTimespan ComputeInitialSpawnerDelay() const;
	struct FTimespan ComputeSpawnerDelay() const;
	void GetSpawnerBound(struct FVector* OutBounds) const;
	ESQTeam GetTeam() const;
	bool IsConfigurationValid() const;
	bool IsSpawnerAvailable() const;
	bool IsSpawnerOverlapped() const;
	struct FTransform SpawnPositionPostProcess(const struct FHitResult& HitSpawnPosition, const struct FVector& Bounds) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSpawner">();
	}
	static class ASQSpawner* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQSpawner>();
	}
};
static_assert(alignof(ASQSpawner) == 0x000010, "Wrong alignment on ASQSpawner");
static_assert(sizeof(ASQSpawner) == 0x0002C0, "Wrong size on ASQSpawner");
static_assert(offsetof(ASQSpawner, MinimumDelayBetweenSpawn) == 0x000230, "Member 'ASQSpawner::MinimumDelayBetweenSpawn' has a wrong offset!");
static_assert(offsetof(ASQSpawner, SpawnPositionHeightCheck) == 0x000238, "Member 'ASQSpawner::SpawnPositionHeightCheck' has a wrong offset!");
static_assert(offsetof(ASQSpawner, SpawnTraceObjectTypes) == 0x000240, "Member 'ASQSpawner::SpawnTraceObjectTypes' has a wrong offset!");
static_assert(offsetof(ASQSpawner, SpawnPositionOffset) == 0x000250, "Member 'ASQSpawner::SpawnPositionOffset' has a wrong offset!");
static_assert(offsetof(ASQSpawner, Team) == 0x000254, "Member 'ASQSpawner::Team' has a wrong offset!");
static_assert(offsetof(ASQSpawner, ObjectCollisionTypes) == 0x000258, "Member 'ASQSpawner::ObjectCollisionTypes' has a wrong offset!");
static_assert(offsetof(ASQSpawner, SpawnInProgress) == 0x000268, "Member 'ASQSpawner::SpawnInProgress' has a wrong offset!");
static_assert(offsetof(ASQSpawner, SpawnOverlapped) == 0x000269, "Member 'ASQSpawner::SpawnOverlapped' has a wrong offset!");
static_assert(offsetof(ASQSpawner, SpawnerEnabled) == 0x00026A, "Member 'ASQSpawner::SpawnerEnabled' has a wrong offset!");
static_assert(offsetof(ASQSpawner, SpawnPosition) == 0x000270, "Member 'ASQSpawner::SpawnPosition' has a wrong offset!");
static_assert(offsetof(ASQSpawner, SpawnBound) == 0x0002A0, "Member 'ASQSpawner::SpawnBound' has a wrong offset!");
static_assert(offsetof(ASQSpawner, SpawnerLockedUntil) == 0x0002B0, "Member 'ASQSpawner::SpawnerLockedUntil' has a wrong offset!");
static_assert(offsetof(ASQSpawner, TeamAuthority) == 0x0002B8, "Member 'ASQSpawner::TeamAuthority' has a wrong offset!");

// Class Squad.SQDeployableSpawner
// 0x0010 (0x02D0 - 0x02C0)
class ASQDeployableSpawner : public ASQSpawner
{
public:
	ESQTeam                                       NeutralCopyDeployableFromTeam;                     // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1111[0x7];                                     // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQDeployableSettings*                  SpecificDeployable;                                // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnDeployableLoaded(TSoftClassPtr<class UClass> InDeployableReference, class USQDeployableSettings* InDeployableSettings);
	void OnDeployableSpawned(class ASQDeployable* OutDeployable);
	void StartLoadAndSpawnDeployable(class USQDeployableSettings* InDeployableSettings);

	bool CanSpawnDeployable(const class USQDeployableSettings* InAvailableDeployable) const;
	int32 GetDeployablePriority(const struct FSQAvailabilityState_Deployable& InAvailableDeployable) const;
	void GetDeployableReference(class USQDeployableSettings* InDeployableSettings, TSoftClassPtr<class UClass>* OutDeployableReference) const;
	bool GetDeployableToSpawn(const TArray<struct FSQAvailabilityState_Deployable>& InDeployableAvailabilityStates, struct FSQAvailabilityState_Deployable* OutSelectedDeployable) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDeployableSpawner">();
	}
	static class ASQDeployableSpawner* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQDeployableSpawner>();
	}
};
static_assert(alignof(ASQDeployableSpawner) == 0x000010, "Wrong alignment on ASQDeployableSpawner");
static_assert(sizeof(ASQDeployableSpawner) == 0x0002D0, "Wrong size on ASQDeployableSpawner");
static_assert(offsetof(ASQDeployableSpawner, NeutralCopyDeployableFromTeam) == 0x0002C0, "Member 'ASQDeployableSpawner::NeutralCopyDeployableFromTeam' has a wrong offset!");
static_assert(offsetof(ASQDeployableSpawner, SpecificDeployable) == 0x0002C8, "Member 'ASQDeployableSpawner::SpecificDeployable' has a wrong offset!");

// Class Squad.SQInteractableWidgetList
// 0x0000 (0x0260 - 0x0260)
class USQInteractableWidgetList : public UUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQInteractableWidgetList">();
	}
	static class USQInteractableWidgetList* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQInteractableWidgetList>();
	}
};
static_assert(alignof(USQInteractableWidgetList) == 0x000008, "Wrong alignment on USQInteractableWidgetList");
static_assert(sizeof(USQInteractableWidgetList) == 0x000260, "Wrong size on USQInteractableWidgetList");

// Class Squad.SQScriptActionExecutor
// 0x0010 (0x0238 - 0x0228)
class ASQScriptActionExecutor final : public AActor
{
public:
	TArray<struct FScriptContainer>               Scripts;                                           // 0x0228(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void OnConditionValueUpdated(const class USQScriptCondition* ConditionObject, bool bNewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQScriptActionExecutor">();
	}
	static class ASQScriptActionExecutor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQScriptActionExecutor>();
	}
};
static_assert(alignof(ASQScriptActionExecutor) == 0x000008, "Wrong alignment on ASQScriptActionExecutor");
static_assert(sizeof(ASQScriptActionExecutor) == 0x000238, "Wrong size on ASQScriptActionExecutor");
static_assert(offsetof(ASQScriptActionExecutor, Scripts) == 0x000228, "Member 'ASQScriptActionExecutor::Scripts' has a wrong offset!");

// Class Squad.SQDeployableSpawnerSettings
// 0x0000 (0x0060 - 0x0060)
class USQDeployableSpawnerSettings : public USQSettings
{
public:
	bool IsDeployableMatching(const class USQDeployableSettings* InAvailableDeployable) const;
	bool SelectDeployableToSpawn(const TArray<struct FSQAvailabilityState_Deployable>& InDeployables, struct FSQAvailabilityState_Deployable* OutSelectDeployable) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDeployableSpawnerSettings">();
	}
	static class USQDeployableSpawnerSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQDeployableSpawnerSettings>();
	}
};
static_assert(alignof(USQDeployableSpawnerSettings) == 0x000008, "Wrong alignment on USQDeployableSpawnerSettings");
static_assert(sizeof(USQDeployableSpawnerSettings) == 0x000060, "Wrong size on USQDeployableSpawnerSettings");

// Class Squad.SQDeployableTripodVehicle
// 0x0010 (0x0950 - 0x0940)
class ASQDeployableTripodVehicle : public ASQDeployableVehicle
{
public:
	class USceneComponent*                        AdsCamera1pPositionComponent;                      // 0x0938(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentMagnificationLevelIndex;                    // 0x0940(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1118[0xC];                                     // 0x0944(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CycleMagnificationLevel();
	void PlayCycleMagnificationSounds();
	void ResetVehicleMagnificationLevel();
	void SetCurrentMagnificationLevelIndex(const int32 NewMagnificationLevelIndex);
	bool ShouldUseVehicleZoom();

	TArray<float> GetMagnificationLevels() const;
	class USQTurretMovementComponent* GetTurretMovementComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDeployableTripodVehicle">();
	}
	static class ASQDeployableTripodVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQDeployableTripodVehicle>();
	}
};
static_assert(alignof(ASQDeployableTripodVehicle) == 0x000010, "Wrong alignment on ASQDeployableTripodVehicle");
static_assert(sizeof(ASQDeployableTripodVehicle) == 0x000950, "Wrong size on ASQDeployableTripodVehicle");
static_assert(offsetof(ASQDeployableTripodVehicle, AdsCamera1pPositionComponent) == 0x000938, "Member 'ASQDeployableTripodVehicle::AdsCamera1pPositionComponent' has a wrong offset!");
static_assert(offsetof(ASQDeployableTripodVehicle, CurrentMagnificationLevelIndex) == 0x000940, "Member 'ASQDeployableTripodVehicle::CurrentMagnificationLevelIndex' has a wrong offset!");

// Class Squad.SQGameplayEventsSubsystem
// 0x00F0 (0x0120 - 0x0030)
class USQGameplayEventsSubsystem final : public UGameInstanceSubsystem
{
public:
	FMulticastInlineDelegateProperty_             OnAdsEventDelegate;                                // 0x0030(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnAdsCompleteEventDelegate;                        // 0x0040(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSwitchWeaponDelegate;                            // 0x0050(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSuppressionEventDelegate;                        // 0x0060(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnDeployBipodEventDelegate;                        // 0x0070(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFreelookEventDelegate;                           // 0x0080(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnHoldBreathEventDelegate;                         // 0x0090(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnRecoilAlignmentEventDelegate;                    // 0x00A0(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSoldierTakeDamageDelegate;                       // 0x00B0(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnJumpEventDelegate;                               // 0x00C0(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnChangeStanceDelegate;                            // 0x00D0(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnLeanEventDelegate;                               // 0x00E0(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMovingEventDelegate;                             // 0x00F0(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnWoundEventDelegate;                              // 0x0100(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnDeathEventDelegate;                              // 0x0110(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGameplayEventsSubsystem">();
	}
	static class USQGameplayEventsSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQGameplayEventsSubsystem>();
	}
};
static_assert(alignof(USQGameplayEventsSubsystem) == 0x000008, "Wrong alignment on USQGameplayEventsSubsystem");
static_assert(sizeof(USQGameplayEventsSubsystem) == 0x000120, "Wrong size on USQGameplayEventsSubsystem");
static_assert(offsetof(USQGameplayEventsSubsystem, OnAdsEventDelegate) == 0x000030, "Member 'USQGameplayEventsSubsystem::OnAdsEventDelegate' has a wrong offset!");
static_assert(offsetof(USQGameplayEventsSubsystem, OnAdsCompleteEventDelegate) == 0x000040, "Member 'USQGameplayEventsSubsystem::OnAdsCompleteEventDelegate' has a wrong offset!");
static_assert(offsetof(USQGameplayEventsSubsystem, OnSwitchWeaponDelegate) == 0x000050, "Member 'USQGameplayEventsSubsystem::OnSwitchWeaponDelegate' has a wrong offset!");
static_assert(offsetof(USQGameplayEventsSubsystem, OnSuppressionEventDelegate) == 0x000060, "Member 'USQGameplayEventsSubsystem::OnSuppressionEventDelegate' has a wrong offset!");
static_assert(offsetof(USQGameplayEventsSubsystem, OnDeployBipodEventDelegate) == 0x000070, "Member 'USQGameplayEventsSubsystem::OnDeployBipodEventDelegate' has a wrong offset!");
static_assert(offsetof(USQGameplayEventsSubsystem, OnFreelookEventDelegate) == 0x000080, "Member 'USQGameplayEventsSubsystem::OnFreelookEventDelegate' has a wrong offset!");
static_assert(offsetof(USQGameplayEventsSubsystem, OnHoldBreathEventDelegate) == 0x000090, "Member 'USQGameplayEventsSubsystem::OnHoldBreathEventDelegate' has a wrong offset!");
static_assert(offsetof(USQGameplayEventsSubsystem, OnRecoilAlignmentEventDelegate) == 0x0000A0, "Member 'USQGameplayEventsSubsystem::OnRecoilAlignmentEventDelegate' has a wrong offset!");
static_assert(offsetof(USQGameplayEventsSubsystem, OnSoldierTakeDamageDelegate) == 0x0000B0, "Member 'USQGameplayEventsSubsystem::OnSoldierTakeDamageDelegate' has a wrong offset!");
static_assert(offsetof(USQGameplayEventsSubsystem, OnJumpEventDelegate) == 0x0000C0, "Member 'USQGameplayEventsSubsystem::OnJumpEventDelegate' has a wrong offset!");
static_assert(offsetof(USQGameplayEventsSubsystem, OnChangeStanceDelegate) == 0x0000D0, "Member 'USQGameplayEventsSubsystem::OnChangeStanceDelegate' has a wrong offset!");
static_assert(offsetof(USQGameplayEventsSubsystem, OnLeanEventDelegate) == 0x0000E0, "Member 'USQGameplayEventsSubsystem::OnLeanEventDelegate' has a wrong offset!");
static_assert(offsetof(USQGameplayEventsSubsystem, OnMovingEventDelegate) == 0x0000F0, "Member 'USQGameplayEventsSubsystem::OnMovingEventDelegate' has a wrong offset!");
static_assert(offsetof(USQGameplayEventsSubsystem, OnWoundEventDelegate) == 0x000100, "Member 'USQGameplayEventsSubsystem::OnWoundEventDelegate' has a wrong offset!");
static_assert(offsetof(USQGameplayEventsSubsystem, OnDeathEventDelegate) == 0x000110, "Member 'USQGameplayEventsSubsystem::OnDeathEventDelegate' has a wrong offset!");

// Class Squad.SQDestroyedVehicle
// 0x0190 (0x03B8 - 0x0228)
class ASQDestroyedVehicle : public AActor
{
public:
	class UStaticMeshComponent*                   VehicleMesh;                                       // 0x0228(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSimulatingInEditor;                             // 0x0230(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWreckSimulatePhysics;                             // 0x0231(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayEffectsWhenReady;                             // 0x0232(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1119[0x5];                                     // 0x0233(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQLastingEffect*                       TemperatureLastingEffect;                          // 0x0238(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TemperatureLastingEffectAttachSocket;              // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TemperatureLastingEffectLifetime;                  // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinReplicationTime;                                // 0x024C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQVehicle*                             OriginalVehicle;                                   // 0x0250(0x0008)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UDamageType>                DeathDamageType;                                   // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSQVehicleDestroyEffectConfig>  DeathEffectConfig;                                 // 0x0260(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   DestroyedEffectsSocket;                            // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        DestroyedParticleEffect;                           // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NiagaraDestroyedParticleEffect;                    // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*               ExplosionEffect;                                   // 0x0288(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      NiagaraExplosionEffect;                            // 0x0290(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*               WreckPiecesEffect;                                 // 0x0298(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      NiagaraWreckPiecesEffect;                          // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UParticleSystemComponent*>       ParticleSystemComponentArray;                      // 0x02A8(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UNiagaraComponent*>              NiagaraComponentArray;                             // 0x02B8(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSubclassOf<class USQShockwave>               DestroyedShockwaveEffect;                          // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              DestroyedSound;                                    // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              DestroyedDebrisSound;                              // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              DestroyedBurningSound;                             // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              ShockwaveSound;                                    // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAudioComponent*>                AudioComponentsWithDepthRequirement;               // 0x02F0(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UParticleSystemComponent*>       ParticleSystemComponentsWithDepthRequirement;      // 0x0300(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UNiagaraComponent*>              NiagaraParticleSystemComponentsWithDepthRequirement; // 0x0310(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FSQDamageModifier>              AllowableDamageTypes;                              // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Health;                                            // 0x0330(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResyncTimeDetonatedDefaultValue;                   // 0x0334(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQLastingEffect>           WreckDestroyEffect;                                // 0x0338(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHealth;                                         // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111A[0x4];                                     // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQBaseWaterComponent*                  BaseWaterComponent;                                // 0x0348(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResyncAllowedLeeway;                               // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResyncTimeDilation;                                // 0x0354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeDetonated;                                     // 0x0358(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SinkingLinearDampening;                            // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SinkingAngularDampening;                           // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111B[0x4];                                     // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDamageType>                LastDamageTypeClass;                               // 0x0368(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            LastDamageInstigator;                              // 0x0370(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQPhysicalMaterialEffects> DefaultEffectsClass;                               // 0x0378(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InitialVelocity;                                   // 0x0380(0x000C)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InitialAngularVelocity;                            // 0x038C(0x000C)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifespanInProtectionZone;                          // 0x0398(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111C[0x4];                                     // 0x039C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ClearAudioHandle;                                  // 0x03A0(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           StopReplicationTimer;                              // 0x03A8(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           StopBurningEffectsTimer;                           // 0x03B0(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void CheckIfDestroyedVehicleUnderwater();
	void EnableWreckPhysics(bool bEnable);
	void MulticastPlayDestructionEffect();
	void OnBeginDestroyedVehicle();
	void OnEnteredWater();
	void OnExitedWater();
	void OnNiagaraVFXComplete(class UNiagaraComponent* PSystem);
	void OnReplicationTimeComplete();
	void OnVFXComplete(class UParticleSystemComponent* PSystem);
	void PlayFX();
	void ResyncTimeDilationOnNiagaraComponent(class UNiagaraComponent* NiagaraComponent, const struct FTimerHandle& TimeDilationResetTimer);
	void ResyncTimeDilationOnParticleSystemComponent(class UParticleSystemComponent* PSCEffect, const struct FTimerHandle& TimeDilationResetTimer);
	void SetInitialMovement(const struct FVector& InInitialVelocity, const struct FVector& InInitialAngularVelocity);
	void StopReplication();
	void TransferBurningLastingEffect(class ASQLastingEffect* LastingEffect);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDestroyedVehicle">();
	}
	static class ASQDestroyedVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQDestroyedVehicle>();
	}
};
static_assert(alignof(ASQDestroyedVehicle) == 0x000008, "Wrong alignment on ASQDestroyedVehicle");
static_assert(sizeof(ASQDestroyedVehicle) == 0x0003B8, "Wrong size on ASQDestroyedVehicle");
static_assert(offsetof(ASQDestroyedVehicle, VehicleMesh) == 0x000228, "Member 'ASQDestroyedVehicle::VehicleMesh' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, bIsSimulatingInEditor) == 0x000230, "Member 'ASQDestroyedVehicle::bIsSimulatingInEditor' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, bWreckSimulatePhysics) == 0x000231, "Member 'ASQDestroyedVehicle::bWreckSimulatePhysics' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, bPlayEffectsWhenReady) == 0x000232, "Member 'ASQDestroyedVehicle::bPlayEffectsWhenReady' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, TemperatureLastingEffect) == 0x000238, "Member 'ASQDestroyedVehicle::TemperatureLastingEffect' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, TemperatureLastingEffectAttachSocket) == 0x000240, "Member 'ASQDestroyedVehicle::TemperatureLastingEffectAttachSocket' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, TemperatureLastingEffectLifetime) == 0x000248, "Member 'ASQDestroyedVehicle::TemperatureLastingEffectLifetime' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, MinReplicationTime) == 0x00024C, "Member 'ASQDestroyedVehicle::MinReplicationTime' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, OriginalVehicle) == 0x000250, "Member 'ASQDestroyedVehicle::OriginalVehicle' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, DeathDamageType) == 0x000258, "Member 'ASQDestroyedVehicle::DeathDamageType' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, DeathEffectConfig) == 0x000260, "Member 'ASQDestroyedVehicle::DeathEffectConfig' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, DestroyedEffectsSocket) == 0x000270, "Member 'ASQDestroyedVehicle::DestroyedEffectsSocket' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, DestroyedParticleEffect) == 0x000278, "Member 'ASQDestroyedVehicle::DestroyedParticleEffect' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, NiagaraDestroyedParticleEffect) == 0x000280, "Member 'ASQDestroyedVehicle::NiagaraDestroyedParticleEffect' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, ExplosionEffect) == 0x000288, "Member 'ASQDestroyedVehicle::ExplosionEffect' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, NiagaraExplosionEffect) == 0x000290, "Member 'ASQDestroyedVehicle::NiagaraExplosionEffect' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, WreckPiecesEffect) == 0x000298, "Member 'ASQDestroyedVehicle::WreckPiecesEffect' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, NiagaraWreckPiecesEffect) == 0x0002A0, "Member 'ASQDestroyedVehicle::NiagaraWreckPiecesEffect' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, ParticleSystemComponentArray) == 0x0002A8, "Member 'ASQDestroyedVehicle::ParticleSystemComponentArray' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, NiagaraComponentArray) == 0x0002B8, "Member 'ASQDestroyedVehicle::NiagaraComponentArray' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, DestroyedShockwaveEffect) == 0x0002C8, "Member 'ASQDestroyedVehicle::DestroyedShockwaveEffect' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, DestroyedSound) == 0x0002D0, "Member 'ASQDestroyedVehicle::DestroyedSound' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, DestroyedDebrisSound) == 0x0002D8, "Member 'ASQDestroyedVehicle::DestroyedDebrisSound' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, DestroyedBurningSound) == 0x0002E0, "Member 'ASQDestroyedVehicle::DestroyedBurningSound' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, ShockwaveSound) == 0x0002E8, "Member 'ASQDestroyedVehicle::ShockwaveSound' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, AudioComponentsWithDepthRequirement) == 0x0002F0, "Member 'ASQDestroyedVehicle::AudioComponentsWithDepthRequirement' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, ParticleSystemComponentsWithDepthRequirement) == 0x000300, "Member 'ASQDestroyedVehicle::ParticleSystemComponentsWithDepthRequirement' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, NiagaraParticleSystemComponentsWithDepthRequirement) == 0x000310, "Member 'ASQDestroyedVehicle::NiagaraParticleSystemComponentsWithDepthRequirement' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, AllowableDamageTypes) == 0x000320, "Member 'ASQDestroyedVehicle::AllowableDamageTypes' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, Health) == 0x000330, "Member 'ASQDestroyedVehicle::Health' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, ResyncTimeDetonatedDefaultValue) == 0x000334, "Member 'ASQDestroyedVehicle::ResyncTimeDetonatedDefaultValue' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, WreckDestroyEffect) == 0x000338, "Member 'ASQDestroyedVehicle::WreckDestroyEffect' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, MaxHealth) == 0x000340, "Member 'ASQDestroyedVehicle::MaxHealth' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, BaseWaterComponent) == 0x000348, "Member 'ASQDestroyedVehicle::BaseWaterComponent' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, ResyncAllowedLeeway) == 0x000350, "Member 'ASQDestroyedVehicle::ResyncAllowedLeeway' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, ResyncTimeDilation) == 0x000354, "Member 'ASQDestroyedVehicle::ResyncTimeDilation' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, TimeDetonated) == 0x000358, "Member 'ASQDestroyedVehicle::TimeDetonated' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, SinkingLinearDampening) == 0x00035C, "Member 'ASQDestroyedVehicle::SinkingLinearDampening' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, SinkingAngularDampening) == 0x000360, "Member 'ASQDestroyedVehicle::SinkingAngularDampening' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, LastDamageTypeClass) == 0x000368, "Member 'ASQDestroyedVehicle::LastDamageTypeClass' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, LastDamageInstigator) == 0x000370, "Member 'ASQDestroyedVehicle::LastDamageInstigator' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, DefaultEffectsClass) == 0x000378, "Member 'ASQDestroyedVehicle::DefaultEffectsClass' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, InitialVelocity) == 0x000380, "Member 'ASQDestroyedVehicle::InitialVelocity' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, InitialAngularVelocity) == 0x00038C, "Member 'ASQDestroyedVehicle::InitialAngularVelocity' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, LifespanInProtectionZone) == 0x000398, "Member 'ASQDestroyedVehicle::LifespanInProtectionZone' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, ClearAudioHandle) == 0x0003A0, "Member 'ASQDestroyedVehicle::ClearAudioHandle' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, StopReplicationTimer) == 0x0003A8, "Member 'ASQDestroyedVehicle::StopReplicationTimer' has a wrong offset!");
static_assert(offsetof(ASQDestroyedVehicle, StopBurningEffectsTimer) == 0x0003B0, "Member 'ASQDestroyedVehicle::StopBurningEffectsTimer' has a wrong offset!");

// Class Squad.SQDetonatorStaticInfo
// 0x0038 (0x0628 - 0x05F0)
class USQDetonatorStaticInfo : public USQItemStaticInfo
{
public:
	class UAnimMontage*                           DetonatorUseWeaponMontage;                         // 0x05F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           DetonatorUse1pMontage;                             // 0x05F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           DetonatorUse3pMontage;                             // 0x0600(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQDeployableItem>          IEDClass;                                          // 0x0608(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RandomDetonationDelayRange;                        // 0x0610(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DetonationDelay;                                   // 0x0618(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DetonatorUseDuration;                              // 0x061C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseRandomDetonationDelay;                         // 0x0620(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111D[0x7];                                     // 0x0621(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDetonatorStaticInfo">();
	}
	static class USQDetonatorStaticInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQDetonatorStaticInfo>();
	}
};
static_assert(alignof(USQDetonatorStaticInfo) == 0x000008, "Wrong alignment on USQDetonatorStaticInfo");
static_assert(sizeof(USQDetonatorStaticInfo) == 0x000628, "Wrong size on USQDetonatorStaticInfo");
static_assert(offsetof(USQDetonatorStaticInfo, DetonatorUseWeaponMontage) == 0x0005F0, "Member 'USQDetonatorStaticInfo::DetonatorUseWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQDetonatorStaticInfo, DetonatorUse1pMontage) == 0x0005F8, "Member 'USQDetonatorStaticInfo::DetonatorUse1pMontage' has a wrong offset!");
static_assert(offsetof(USQDetonatorStaticInfo, DetonatorUse3pMontage) == 0x000600, "Member 'USQDetonatorStaticInfo::DetonatorUse3pMontage' has a wrong offset!");
static_assert(offsetof(USQDetonatorStaticInfo, IEDClass) == 0x000608, "Member 'USQDetonatorStaticInfo::IEDClass' has a wrong offset!");
static_assert(offsetof(USQDetonatorStaticInfo, RandomDetonationDelayRange) == 0x000610, "Member 'USQDetonatorStaticInfo::RandomDetonationDelayRange' has a wrong offset!");
static_assert(offsetof(USQDetonatorStaticInfo, DetonationDelay) == 0x000618, "Member 'USQDetonatorStaticInfo::DetonationDelay' has a wrong offset!");
static_assert(offsetof(USQDetonatorStaticInfo, DetonatorUseDuration) == 0x00061C, "Member 'USQDetonatorStaticInfo::DetonatorUseDuration' has a wrong offset!");
static_assert(offsetof(USQDetonatorStaticInfo, bUseRandomDetonationDelay) == 0x000620, "Member 'USQDetonatorStaticInfo::bUseRandomDetonationDelay' has a wrong offset!");

// Class Squad.SQLicensedServerManager
// 0x01D8 (0x0208 - 0x0030)
class USQLicensedServerManager final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_111E[0x10];                                    // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LicenseServerEndpoint;                             // 0x0040(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 LicenseValidationKey;                              // 0x0050(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 LicenseClientEndpoint;                             // 0x0060(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 RemoteListFileName;                                // 0x0070(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 PromotedServersFile;                               // 0x0080(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_111F[0x178];                                   // 0x0090(0x0178)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsServerPromoted(const struct FBlueprintSessionResult& Result);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQLicensedServerManager">();
	}
	static class USQLicensedServerManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQLicensedServerManager>();
	}
};
static_assert(alignof(USQLicensedServerManager) == 0x000008, "Wrong alignment on USQLicensedServerManager");
static_assert(sizeof(USQLicensedServerManager) == 0x000208, "Wrong size on USQLicensedServerManager");
static_assert(offsetof(USQLicensedServerManager, LicenseServerEndpoint) == 0x000040, "Member 'USQLicensedServerManager::LicenseServerEndpoint' has a wrong offset!");
static_assert(offsetof(USQLicensedServerManager, LicenseValidationKey) == 0x000050, "Member 'USQLicensedServerManager::LicenseValidationKey' has a wrong offset!");
static_assert(offsetof(USQLicensedServerManager, LicenseClientEndpoint) == 0x000060, "Member 'USQLicensedServerManager::LicenseClientEndpoint' has a wrong offset!");
static_assert(offsetof(USQLicensedServerManager, RemoteListFileName) == 0x000070, "Member 'USQLicensedServerManager::RemoteListFileName' has a wrong offset!");
static_assert(offsetof(USQLicensedServerManager, PromotedServersFile) == 0x000080, "Member 'USQLicensedServerManager::PromotedServersFile' has a wrong offset!");

// Class Squad.SQDeveloperCameraMan
// 0x00C0 (0x05D0 - 0x0510)
class ASQDeveloperCameraMan : public ASQCameraMan
{
public:
	FMulticastInlineDelegateProperty_             OnMouseModeChanged;                                // 0x0508(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnLookStart;                                       // 0x0518(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnLookEnd;                                         // 0x0528(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnActorSelected;                                   // 0x0538(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnTrackedActor;                                    // 0x0548(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnClearSelection;                                  // 0x0558(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TArray<ECollisionChannel>                     SelectionFilters;                                  // 0x0568(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UMaterialInstance*                      PreviewMaterial;                                   // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASQSpawnableGhost*                      CurrentGhost;                                      // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ScrollRate;                                        // 0x0588(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpawnZOffset;                                      // 0x058C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TraceDistance;                                     // 0x0590(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1121[0x4];                                     // 0x0594(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SelectedActor;                                     // 0x0598(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESQBuildState                                 CurrentBuildState;                                 // 0x05A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMouseMode                                    MouseMode;                                         // 0x05A1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1122[0x2];                                     // 0x05A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentTeam;                                       // 0x05A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQRoleSettings*                        SelectedRole;                                      // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EToolMode                                     ToolMode;                                          // 0x05B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1123[0x3];                                     // 0x05B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TrackDistance;                                     // 0x05B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 TrackingActor;                                     // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASQPlayerState*                         TrackingPlayer;                                    // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TrackingMinCameraDistance;                         // 0x05C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1124[0x4];                                     // 0x05CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class AActor* ActorTrace();
	void ClearWrecks();
	void DamageVehicleComponent(class USQVehicleComponent* Component, float DamageAmount, const TArray<struct FSQDamageModifier>& AllowableDamageTypes, TSubclassOf<class UDamageType> DamageType);
	EToolMode GetToolMode();
	void OnActorPlaced(class AActor* Actor);
	void OnGhostDestroyed(class AActor* DestroyedActor);
	void OnStartTrackingTarget(class AActor* TrackedActor);
	class ASQSpawnableGhost* ReplaceExistingGhost(class USQSpawnableItemBase* SpawnableItem, const struct FTransform& SpawnTransform);
	class AActor* SelectionTrace();
	void SetMouseMode(EMouseMode NewMode);
	void SetSoldierRole(class ASQSoldier* Soldier, class USQRoleSettings* RoleSettings);
	void SetToolMode(EToolMode NewMode);
	void SetTrackPlayer(class ASQPlayerState* TargetPlayer);
	void SetTrackTarget(class AActor* Target);
	void SpawnNewDeployable(TSubclassOf<class ASQDeployable> DeployableClass, int32 Team, ESQBuildState BuildState, class USQDeployableSettings* Settings, const struct FTransform& Transform);
	void SpawnNewSoldier(TSubclassOf<class ASQSoldier> Param_Class, class USQRoleSettings* RoleSetting, const ESQTeam Team, const struct FTransform& Transform);
	void SpawnNewVehicle(TSubclassOf<class ASQVehicle> Param_Class, class USQVehicleSettings* VehicleSetting, const ESQTeam Team, const struct FTransform& Transform);
	void ToggleMenu();

	struct FHitResult CameraTrace() const;
	bool IsTracking() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDeveloperCameraMan">();
	}
	static class ASQDeveloperCameraMan* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQDeveloperCameraMan>();
	}
};
static_assert(alignof(ASQDeveloperCameraMan) == 0x000010, "Wrong alignment on ASQDeveloperCameraMan");
static_assert(sizeof(ASQDeveloperCameraMan) == 0x0005D0, "Wrong size on ASQDeveloperCameraMan");
static_assert(offsetof(ASQDeveloperCameraMan, OnMouseModeChanged) == 0x000508, "Member 'ASQDeveloperCameraMan::OnMouseModeChanged' has a wrong offset!");
static_assert(offsetof(ASQDeveloperCameraMan, OnLookStart) == 0x000518, "Member 'ASQDeveloperCameraMan::OnLookStart' has a wrong offset!");
static_assert(offsetof(ASQDeveloperCameraMan, OnLookEnd) == 0x000528, "Member 'ASQDeveloperCameraMan::OnLookEnd' has a wrong offset!");
static_assert(offsetof(ASQDeveloperCameraMan, OnActorSelected) == 0x000538, "Member 'ASQDeveloperCameraMan::OnActorSelected' has a wrong offset!");
static_assert(offsetof(ASQDeveloperCameraMan, OnTrackedActor) == 0x000548, "Member 'ASQDeveloperCameraMan::OnTrackedActor' has a wrong offset!");
static_assert(offsetof(ASQDeveloperCameraMan, OnClearSelection) == 0x000558, "Member 'ASQDeveloperCameraMan::OnClearSelection' has a wrong offset!");
static_assert(offsetof(ASQDeveloperCameraMan, SelectionFilters) == 0x000568, "Member 'ASQDeveloperCameraMan::SelectionFilters' has a wrong offset!");
static_assert(offsetof(ASQDeveloperCameraMan, PreviewMaterial) == 0x000578, "Member 'ASQDeveloperCameraMan::PreviewMaterial' has a wrong offset!");
static_assert(offsetof(ASQDeveloperCameraMan, CurrentGhost) == 0x000580, "Member 'ASQDeveloperCameraMan::CurrentGhost' has a wrong offset!");
static_assert(offsetof(ASQDeveloperCameraMan, ScrollRate) == 0x000588, "Member 'ASQDeveloperCameraMan::ScrollRate' has a wrong offset!");
static_assert(offsetof(ASQDeveloperCameraMan, SpawnZOffset) == 0x00058C, "Member 'ASQDeveloperCameraMan::SpawnZOffset' has a wrong offset!");
static_assert(offsetof(ASQDeveloperCameraMan, TraceDistance) == 0x000590, "Member 'ASQDeveloperCameraMan::TraceDistance' has a wrong offset!");
static_assert(offsetof(ASQDeveloperCameraMan, SelectedActor) == 0x000598, "Member 'ASQDeveloperCameraMan::SelectedActor' has a wrong offset!");
static_assert(offsetof(ASQDeveloperCameraMan, CurrentBuildState) == 0x0005A0, "Member 'ASQDeveloperCameraMan::CurrentBuildState' has a wrong offset!");
static_assert(offsetof(ASQDeveloperCameraMan, MouseMode) == 0x0005A1, "Member 'ASQDeveloperCameraMan::MouseMode' has a wrong offset!");
static_assert(offsetof(ASQDeveloperCameraMan, CurrentTeam) == 0x0005A4, "Member 'ASQDeveloperCameraMan::CurrentTeam' has a wrong offset!");
static_assert(offsetof(ASQDeveloperCameraMan, SelectedRole) == 0x0005A8, "Member 'ASQDeveloperCameraMan::SelectedRole' has a wrong offset!");
static_assert(offsetof(ASQDeveloperCameraMan, ToolMode) == 0x0005B0, "Member 'ASQDeveloperCameraMan::ToolMode' has a wrong offset!");
static_assert(offsetof(ASQDeveloperCameraMan, TrackDistance) == 0x0005B4, "Member 'ASQDeveloperCameraMan::TrackDistance' has a wrong offset!");
static_assert(offsetof(ASQDeveloperCameraMan, TrackingActor) == 0x0005B8, "Member 'ASQDeveloperCameraMan::TrackingActor' has a wrong offset!");
static_assert(offsetof(ASQDeveloperCameraMan, TrackingPlayer) == 0x0005C0, "Member 'ASQDeveloperCameraMan::TrackingPlayer' has a wrong offset!");
static_assert(offsetof(ASQDeveloperCameraMan, TrackingMinCameraDistance) == 0x0005C8, "Member 'ASQDeveloperCameraMan::TrackingMinCameraDistance' has a wrong offset!");

// Class Squad.SQDiplomacyService
// 0x0000 (0x0028 - 0x0028)
class USQDiplomacyService final : public UBlueprintFunctionLibrary
{
public:
	static ESQTeamRelationShip GetRelationShip(const class UObject* WorldContextObject, TScriptInterface<class ISQTeamInterface> InActorA, TScriptInterface<class ISQTeamInterface> InActorB);
	static ESQTeamRelationShip GetRelationShipByIds(const class UObject* WorldContextObject, const ESQTeam InTeamIdA, const ESQTeam InTeamIdB);
	static ESQTeamRelationShip GetRelationShipByIndex(const class UObject* WorldContextObject, const int32 InTeamIdA, const int32 InTeamIdB);
	static ESQTeamRelationShip GetRelationShipByTeams(const class ASQTeam* InTeamA, const class ASQTeam* InTeamB);
	static void GetTeamsFromRelationShip(const class UObject* WorldContextObject, TScriptInterface<class ISQTeamInterface> InActor, const TArray<ESQTeamRelationShip>& InRelationShips, TArray<int32>* OutTeamIds);
	static void GetTeamsFromRelationShipById(const class UObject* WorldContextObject, const ESQTeam InTeamId, const TArray<ESQTeamRelationShip>& InRelationShips, TArray<int32>* OutTeamIds);
	static void GetTeamsFromRelationShipByTeam(const class ASQTeam* InTeam, const TArray<ESQTeamRelationShip>& InRelationShips, TArray<int32>* OutTeamIds);
	static void GetTeamsFromRelationShipSet(const class UObject* WorldContextObject, TScriptInterface<class ISQTeamInterface> InActor, const TSet<ESQTeamRelationShip>& InRelationShips, TArray<int32>* OutTeamIds);
	static void GetTeamsFromRelationShipSetById(const class UObject* WorldContextObject, const ESQTeam InTeamId, const TSet<ESQTeamRelationShip>& InRelationShips, TArray<int32>* OutTeamIds);
	static void GetTeamsFromRelationShipSetByTeam(const class ASQTeam* InTeam, const TSet<ESQTeamRelationShip>& InRelationShips, TArray<int32>* OutTeamIds);
	static void GetTeamsFromSingleRelationShip(const class UObject* WorldContextObject, TScriptInterface<class ISQTeamInterface> InActor, const ESQTeamRelationShip InRelationShip, TArray<int32>* OutTeamIds);
	static void GetTeamsFromSingleRelationShipById(const class UObject* WorldContextObject, const ESQTeam InTeamId, const ESQTeamRelationShip InRelationShip, TArray<int32>* OutTeamIds);
	static void GetTeamsFromSingleRelationShipByTeam(const class ASQTeam* InTeam, const ESQTeamRelationShip InRelationShip, TArray<int32>* OutTeamIds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDiplomacyService">();
	}
	static class USQDiplomacyService* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQDiplomacyService>();
	}
};
static_assert(alignof(USQDiplomacyService) == 0x000008, "Wrong alignment on USQDiplomacyService");
static_assert(sizeof(USQDiplomacyService) == 0x000028, "Wrong size on USQDiplomacyService");

// Class Squad.SQRotorsAnimInstance
// 0x0060 (0x0340 - 0x02E0)
#pragma pack(push, 0x1)
class alignas(0x10) USQRotorsAnimInstance : public USQAnimInstance
{
public:
	class USQRotorVehicleMovementComponent*       RotorMovementComponent;                            // 0x02D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FName, struct FRotator>            RotationsMap;                                      // 0x02E0(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_1135[0x8];                                     // 0x0330(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	const struct FRotator GetRotationByBoneName(const class FName BoneName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRotorsAnimInstance">();
	}
	static class USQRotorsAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRotorsAnimInstance>();
	}
};
#pragma pack(pop)
static_assert(alignof(USQRotorsAnimInstance) == 0x000010, "Wrong alignment on USQRotorsAnimInstance");
static_assert(sizeof(USQRotorsAnimInstance) == 0x000340, "Wrong size on USQRotorsAnimInstance");
static_assert(offsetof(USQRotorsAnimInstance, RotorMovementComponent) == 0x0002D8, "Member 'USQRotorsAnimInstance::RotorMovementComponent' has a wrong offset!");
static_assert(offsetof(USQRotorsAnimInstance, RotationsMap) == 0x0002E0, "Member 'USQRotorsAnimInstance::RotationsMap' has a wrong offset!");

// Class Squad.SQDoubleRotorAnimInstance
// 0x0020 (0x0360 - 0x0340)
class USQDoubleRotorAnimInstance final : public USQRotorsAnimInstance
{
public:
	class FName                                   Rotor1Name;                                        // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Rotor2Name;                                        // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotor1Rotation;                                    // 0x0348(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Rotor2Rotation;                                    // 0x0354(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDoubleRotorAnimInstance">();
	}
	static class USQDoubleRotorAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQDoubleRotorAnimInstance>();
	}
};
static_assert(alignof(USQDoubleRotorAnimInstance) == 0x000010, "Wrong alignment on USQDoubleRotorAnimInstance");
static_assert(sizeof(USQDoubleRotorAnimInstance) == 0x000360, "Wrong size on USQDoubleRotorAnimInstance");
static_assert(offsetof(USQDoubleRotorAnimInstance, Rotor1Name) == 0x000338, "Member 'USQDoubleRotorAnimInstance::Rotor1Name' has a wrong offset!");
static_assert(offsetof(USQDoubleRotorAnimInstance, Rotor2Name) == 0x000340, "Member 'USQDoubleRotorAnimInstance::Rotor2Name' has a wrong offset!");
static_assert(offsetof(USQDoubleRotorAnimInstance, Rotor1Rotation) == 0x000348, "Member 'USQDoubleRotorAnimInstance::Rotor1Rotation' has a wrong offset!");
static_assert(offsetof(USQDoubleRotorAnimInstance, Rotor2Rotation) == 0x000354, "Member 'USQDoubleRotorAnimInstance::Rotor2Rotation' has a wrong offset!");

// Class Squad.SQDPICustomScalingRule
// 0x0000 (0x0028 - 0x0028)
class USQDPICustomScalingRule final : public UDPICustomScalingRule
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDPICustomScalingRule">();
	}
	static class USQDPICustomScalingRule* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQDPICustomScalingRule>();
	}
};
static_assert(alignof(USQDPICustomScalingRule) == 0x000008, "Wrong alignment on USQDPICustomScalingRule");
static_assert(sizeof(USQDPICustomScalingRule) == 0x000028, "Wrong size on USQDPICustomScalingRule");

// Class Squad.SQPrimaryData
// 0x0040 (0x0070 - 0x0030)
class USQPrimaryData : public UPrimaryDataAsset
{
public:
	class FName                                   ID;                                                // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1136[0x18];                                    // 0x0038(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    Data;                                              // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FPrimaryAssetRules                     PackingRules;                                      // 0x0060(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bLabelAssetsInMyDirectory : 1;                     // 0x006C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1137[0x3];                                     // 0x006D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FString GetLogId();
	class FString GetModID();

	bool GetDisplayName(class FText* OutDisplayName) const;
	class FName GetId() const;
	class FString GetIdAsString() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQPrimaryData">();
	}
	static class USQPrimaryData* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQPrimaryData>();
	}
};
static_assert(alignof(USQPrimaryData) == 0x000008, "Wrong alignment on USQPrimaryData");
static_assert(sizeof(USQPrimaryData) == 0x000070, "Wrong size on USQPrimaryData");
static_assert(offsetof(USQPrimaryData, ID) == 0x000030, "Member 'USQPrimaryData::ID' has a wrong offset!");
static_assert(offsetof(USQPrimaryData, Data) == 0x000050, "Member 'USQPrimaryData::Data' has a wrong offset!");
static_assert(offsetof(USQPrimaryData, PackingRules) == 0x000060, "Member 'USQPrimaryData::PackingRules' has a wrong offset!");

// Class Squad.SQLayer
// 0x01A8 (0x0218 - 0x0070)
class USQLayer : public USQPrimaryData
{
public:
	class FName                                   LevelId;                                           // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQLevel*                               OuterLevel;                                        // 0x0078(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UWorld>>          Worlds;                                            // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<class FName, TSoftObjectPtr<class UWorld>> Lighting;                                          // 0x0090(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    PersistentLightingType;                            // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class USQLayerTeamConfig*>             TeamConfigs;                                       // 0x00F0(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bSeparatedFactionsList;                            // 0x0100(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1139[0x7];                                     // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FSQFactionType>      FactionsList;                                      // 0x0108(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TMap<class FName, struct FSQFactionType>      FactionsListTeamTwo;                               // 0x0158(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	struct FSQGameFlags                           GameFlags;                                         // 0x01A8(0x0011)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_113A[0x3];                                     // 0x01B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ObjectivesCount;                                   // 0x01BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSQLayerPOIData>                ObjectiveLocations;                                // 0x01C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture>                OveriddenMinimapTexture;                           // 0x01D0(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox2D                                 MinimapCornersPosition;                            // 0x01F8(0x0014)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   DefaultFactionType;                                // 0x020C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_113B[0x4];                                     // 0x0214(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddObjectiveLocation(const struct FSQLayerPOIData& POI);
	void ResetObjectivesLocation();

	bool CanVoteForFactionConcurrently() const;
	bool GetCompatibleFactionSetups(const int32 InTeam, const TMap<class FName, class USQFactionSetup*>& InAvailableFactionSetups, TArray<class USQFactionSetup*>* OutCompatibleFactionSetups) const;
	class USQFactionSetup* GetDefaultFactionSetup(const int32& TeamId) const;
	class USQFactionSetup* GetFactionSetupByID(const class FName& FactionID, const int32& TeamId) const;
	class USQFactionSetup* GetFactionSetupByIDType(const class FName& FactionID, const class FName& FactionType, const int32& TeamId) const;
	const struct FDataTableRowHandle GetFobRadiusTableRow() const;
	class FName GetGameModeID() const;
	class FName GetLayerSize() const;
	int32 GetMapNames(TArray<class FString>* OutMapNames) const;
	int32 GetMapPaths(TArray<class FString>* OutMapPaths) const;
	bool HasFactionSetupChoice(const int32 InTeam, class USQFactionSetup** OutSpecificFaction, const TArray<class FName>& Excluded) const;
	bool HasMapName(const class FString& MapName) const;
	bool HasMapPath(const class FString& MapPath) const;
	bool HasTeamConfig(int32 TeamId) const;
	bool TryGetAvailabilityModifierPct(const int32 InTeam, const class USQAvailability* InAvailability, int32* OutModifier) const;
	bool TryGetDisplayName(class FText* OutDisplayName) const;
	bool TryGetGameModeName(class FText* OutGameMode) const;
	bool TryGetGameModeShortName(class FText* OutGameMode) const;
	bool TryGetLayerStagingDuration(struct FTimespan* OutDuration) const;
	bool TryGetLoadingMusic(class USoundBase** OutLoadingMusic) const;
	bool TryGetTeamConfig(int32 TeamId, TSubclassOf<class USQLayerTeamConfig> LayerTeamConfigClass, class USQLayerTeamConfig** OutTeamConfig) const;
	void ValidateFactions(struct FSQLayerSettings* LayerSettings) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQLayer">();
	}
	static class USQLayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQLayer>();
	}
};
static_assert(alignof(USQLayer) == 0x000008, "Wrong alignment on USQLayer");
static_assert(sizeof(USQLayer) == 0x000218, "Wrong size on USQLayer");
static_assert(offsetof(USQLayer, LevelId) == 0x000070, "Member 'USQLayer::LevelId' has a wrong offset!");
static_assert(offsetof(USQLayer, OuterLevel) == 0x000078, "Member 'USQLayer::OuterLevel' has a wrong offset!");
static_assert(offsetof(USQLayer, Worlds) == 0x000080, "Member 'USQLayer::Worlds' has a wrong offset!");
static_assert(offsetof(USQLayer, Lighting) == 0x000090, "Member 'USQLayer::Lighting' has a wrong offset!");
static_assert(offsetof(USQLayer, PersistentLightingType) == 0x0000E0, "Member 'USQLayer::PersistentLightingType' has a wrong offset!");
static_assert(offsetof(USQLayer, TeamConfigs) == 0x0000F0, "Member 'USQLayer::TeamConfigs' has a wrong offset!");
static_assert(offsetof(USQLayer, bSeparatedFactionsList) == 0x000100, "Member 'USQLayer::bSeparatedFactionsList' has a wrong offset!");
static_assert(offsetof(USQLayer, FactionsList) == 0x000108, "Member 'USQLayer::FactionsList' has a wrong offset!");
static_assert(offsetof(USQLayer, FactionsListTeamTwo) == 0x000158, "Member 'USQLayer::FactionsListTeamTwo' has a wrong offset!");
static_assert(offsetof(USQLayer, GameFlags) == 0x0001A8, "Member 'USQLayer::GameFlags' has a wrong offset!");
static_assert(offsetof(USQLayer, ObjectivesCount) == 0x0001BC, "Member 'USQLayer::ObjectivesCount' has a wrong offset!");
static_assert(offsetof(USQLayer, ObjectiveLocations) == 0x0001C0, "Member 'USQLayer::ObjectiveLocations' has a wrong offset!");
static_assert(offsetof(USQLayer, OveriddenMinimapTexture) == 0x0001D0, "Member 'USQLayer::OveriddenMinimapTexture' has a wrong offset!");
static_assert(offsetof(USQLayer, MinimapCornersPosition) == 0x0001F8, "Member 'USQLayer::MinimapCornersPosition' has a wrong offset!");
static_assert(offsetof(USQLayer, DefaultFactionType) == 0x00020C, "Member 'USQLayer::DefaultFactionType' has a wrong offset!");

// Class Squad.SQDrawChatWidget
// 0x0010 (0x0278 - 0x0268)
class USQDrawChatWidget : public USQUserWidget
{
public:
	TArray<struct FSQDrawChatStruct>              MessagesToDraw;                                    // 0x0268(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static void DrawWidget(class USQDrawChatWidget* ChatWidget, struct FPaintContext& Context);

	void InitWidget();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDrawChatWidget">();
	}
	static class USQDrawChatWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQDrawChatWidget>();
	}
};
static_assert(alignof(USQDrawChatWidget) == 0x000008, "Wrong alignment on USQDrawChatWidget");
static_assert(sizeof(USQDrawChatWidget) == 0x000278, "Wrong size on USQDrawChatWidget");
static_assert(offsetof(USQDrawChatWidget, MessagesToDraw) == 0x000268, "Member 'USQDrawChatWidget::MessagesToDraw' has a wrong offset!");

// Class Squad.SQVehicleComponent
// 0x0110 (0x05F0 - 0x04E0)
class USQVehicleComponent : public UStaticMeshComponent
{
public:
	float                                         MaxHealth;                                         // 0x04E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1151[0x4];                                     // 0x04E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQDamageModifier>              AllowableDamageTypes;                              // 0x04E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bCanBeDestroyed;                                   // 0x04F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanBeRepairedAfterDestroyed;                      // 0x04F9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1152[0x2];                                     // 0x04FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxRepairToolLimit;                                // 0x04FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMesh*                            FullyRepairedComponentMesh;                        // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMesh*                            RepairedFromDestructionComponentMesh;              // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMesh*                            DestroyedComponentMesh;                            // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASQVehicle*                             ParentVehicle;                                     // 0x0518(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UParticleSystem*                        BurningEffect;                                     // 0x0520(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraSystem*                         NiagaraBurningEffect;                              // 0x0528(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundCue*                              BurningSound;                                      // 0x0530(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioComponent*                        BurningAudioComponent;                             // 0x0538(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBurningAudioInheritsScale;                        // 0x0540(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1153[0x7];                                     // 0x0541(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        DestroyedExplosion;                                // 0x0548(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraSystem*                         NiagaraDestroyedExplosion;                         // 0x0550(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundCue*                              DestroyedSound;                                    // 0x0558(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   DestructionDamageEffectSocket;                     // 0x0560(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FSQDamageEffect>                DestructionDamageEffects;                          // 0x0568(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bLastingEffectInheritsScale;                       // 0x0578(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1154[0x7];                                     // 0x0579(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        DestroyedAudioComponent;                           // 0x0580(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDestroyedAudioInheritsScale;                      // 0x0588(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1155[0x7];                                     // 0x0589(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               BurningParticleSystem;                             // 0x0590(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      NiagaraBurningParticleSystem;                      // 0x0598(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBurningEffectInheritsScale;                       // 0x05A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1156[0x7];                                     // 0x05A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               DestructionParticleSystem;                         // 0x05A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      NiagaraDestructionParticleSystem;                  // 0x05B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDestructionEffectInheritsScale;                   // 0x05B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1157[0x3];                                     // 0x05B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NormalizedHealth;                                  // 0x05BC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             OnComponentDestroyedEvent;                         // 0x05C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnComponentUndestroyedEvent;                       // 0x05D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         Health;                                            // 0x05E0(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ESQVehicleComponentStates                     VehicleComponentState;                             // 0x05E4(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1158[0x3];                                     // 0x05E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   DecorativeMesh;                                    // 0x05E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class ASQVehicle* GetParentVehicle();
	void MulticastComponentDestroyed(TSubclassOf<class UDamageType> DamageTypeClass);
	void MulticastComponentFullyRepaired();
	void MulticastComponentRepairedFromDestruction();
	void OnRep_HealthChanged(float PreviousHealthValue);
	void OnRep_VehicleComponentState(ESQVehicleComponentStates PreviousState);
	void SetHealth(float NewHealth);

	float GetHealth() const;
	float GetMaximumHealth() const;
	float GetNormalizedHealth() const;
	ESQVehicleComponentStates GetPreviousVehicleComponentState() const;
	ESQVehicleComponentStates GetVehicleComponentState() const;
	bool IsDestroyed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleComponent">();
	}
	static class USQVehicleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleComponent>();
	}
};
static_assert(alignof(USQVehicleComponent) == 0x000010, "Wrong alignment on USQVehicleComponent");
static_assert(sizeof(USQVehicleComponent) == 0x0005F0, "Wrong size on USQVehicleComponent");
static_assert(offsetof(USQVehicleComponent, MaxHealth) == 0x0004E0, "Member 'USQVehicleComponent::MaxHealth' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, AllowableDamageTypes) == 0x0004E8, "Member 'USQVehicleComponent::AllowableDamageTypes' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, bCanBeDestroyed) == 0x0004F8, "Member 'USQVehicleComponent::bCanBeDestroyed' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, bCanBeRepairedAfterDestroyed) == 0x0004F9, "Member 'USQVehicleComponent::bCanBeRepairedAfterDestroyed' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, MaxRepairToolLimit) == 0x0004FC, "Member 'USQVehicleComponent::MaxRepairToolLimit' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, FullyRepairedComponentMesh) == 0x000500, "Member 'USQVehicleComponent::FullyRepairedComponentMesh' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, RepairedFromDestructionComponentMesh) == 0x000508, "Member 'USQVehicleComponent::RepairedFromDestructionComponentMesh' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, DestroyedComponentMesh) == 0x000510, "Member 'USQVehicleComponent::DestroyedComponentMesh' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, ParentVehicle) == 0x000518, "Member 'USQVehicleComponent::ParentVehicle' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, BurningEffect) == 0x000520, "Member 'USQVehicleComponent::BurningEffect' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, NiagaraBurningEffect) == 0x000528, "Member 'USQVehicleComponent::NiagaraBurningEffect' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, BurningSound) == 0x000530, "Member 'USQVehicleComponent::BurningSound' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, BurningAudioComponent) == 0x000538, "Member 'USQVehicleComponent::BurningAudioComponent' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, bBurningAudioInheritsScale) == 0x000540, "Member 'USQVehicleComponent::bBurningAudioInheritsScale' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, DestroyedExplosion) == 0x000548, "Member 'USQVehicleComponent::DestroyedExplosion' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, NiagaraDestroyedExplosion) == 0x000550, "Member 'USQVehicleComponent::NiagaraDestroyedExplosion' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, DestroyedSound) == 0x000558, "Member 'USQVehicleComponent::DestroyedSound' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, DestructionDamageEffectSocket) == 0x000560, "Member 'USQVehicleComponent::DestructionDamageEffectSocket' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, DestructionDamageEffects) == 0x000568, "Member 'USQVehicleComponent::DestructionDamageEffects' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, bLastingEffectInheritsScale) == 0x000578, "Member 'USQVehicleComponent::bLastingEffectInheritsScale' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, DestroyedAudioComponent) == 0x000580, "Member 'USQVehicleComponent::DestroyedAudioComponent' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, bDestroyedAudioInheritsScale) == 0x000588, "Member 'USQVehicleComponent::bDestroyedAudioInheritsScale' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, BurningParticleSystem) == 0x000590, "Member 'USQVehicleComponent::BurningParticleSystem' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, NiagaraBurningParticleSystem) == 0x000598, "Member 'USQVehicleComponent::NiagaraBurningParticleSystem' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, bBurningEffectInheritsScale) == 0x0005A0, "Member 'USQVehicleComponent::bBurningEffectInheritsScale' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, DestructionParticleSystem) == 0x0005A8, "Member 'USQVehicleComponent::DestructionParticleSystem' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, NiagaraDestructionParticleSystem) == 0x0005B0, "Member 'USQVehicleComponent::NiagaraDestructionParticleSystem' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, bDestructionEffectInheritsScale) == 0x0005B8, "Member 'USQVehicleComponent::bDestructionEffectInheritsScale' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, NormalizedHealth) == 0x0005BC, "Member 'USQVehicleComponent::NormalizedHealth' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, OnComponentDestroyedEvent) == 0x0005C0, "Member 'USQVehicleComponent::OnComponentDestroyedEvent' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, OnComponentUndestroyedEvent) == 0x0005D0, "Member 'USQVehicleComponent::OnComponentUndestroyedEvent' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, Health) == 0x0005E0, "Member 'USQVehicleComponent::Health' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, VehicleComponentState) == 0x0005E4, "Member 'USQVehicleComponent::VehicleComponentState' has a wrong offset!");
static_assert(offsetof(USQVehicleComponent, DecorativeMesh) == 0x0005E8, "Member 'USQVehicleComponent::DecorativeMesh' has a wrong offset!");

// Class Squad.SQMagazineWidget
// 0x0010 (0x0278 - 0x0268)
class USQMagazineWidget : public USQUserWidget
{
public:
	class UImage*                                 SelectedImage;                                     // 0x0268(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 AmmoImage;                                         // 0x0270(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void InitWidget();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMagazineWidget">();
	}
	static class USQMagazineWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMagazineWidget>();
	}
};
static_assert(alignof(USQMagazineWidget) == 0x000008, "Wrong alignment on USQMagazineWidget");
static_assert(sizeof(USQMagazineWidget) == 0x000278, "Wrong size on USQMagazineWidget");
static_assert(offsetof(USQMagazineWidget, SelectedImage) == 0x000268, "Member 'USQMagazineWidget::SelectedImage' has a wrong offset!");
static_assert(offsetof(USQMagazineWidget, AmmoImage) == 0x000270, "Member 'USQMagazineWidget::AmmoImage' has a wrong offset!");

// Class Squad.SQDriveTrainComponent
// 0x0020 (0x0610 - 0x05F0)
#pragma pack(push, 0x1)
class alignas(0x10) USQDriveTrainComponent : public USQVehicleComponent
{
public:
	bool                                          IsInWater;                                         // 0x05F0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1159[0x3];                                     // 0x05F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DepthUnderwater;                                   // 0x05F4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DropPercentage;                                    // 0x05F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_115A[0xC];                                     // 0x05FC(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnDriveTrainComponentBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnDriveTrainComponentEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQDriveTrainComponent">();
	}
	static class USQDriveTrainComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQDriveTrainComponent>();
	}
};
#pragma pack(pop)
static_assert(alignof(USQDriveTrainComponent) == 0x000010, "Wrong alignment on USQDriveTrainComponent");
static_assert(sizeof(USQDriveTrainComponent) == 0x000610, "Wrong size on USQDriveTrainComponent");
static_assert(offsetof(USQDriveTrainComponent, IsInWater) == 0x0005F0, "Member 'USQDriveTrainComponent::IsInWater' has a wrong offset!");
static_assert(offsetof(USQDriveTrainComponent, DepthUnderwater) == 0x0005F4, "Member 'USQDriveTrainComponent::DepthUnderwater' has a wrong offset!");
static_assert(offsetof(USQDriveTrainComponent, DropPercentage) == 0x0005F8, "Member 'USQDriveTrainComponent::DropPercentage' has a wrong offset!");

// Class Squad.SQEditorPlaySettings
// 0x04D0 (0x0508 - 0x0038)
class USQEditorPlaySettings final : public UDeveloperSettings
{
public:
	TSoftClassPtr<class UClass>                   DefaultPawnClassOverride;                          // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   DefaultWeaponClassOverride;                        // 0x0060(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USQLayer>                LayerEditorOverride;                               // 0x0088(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoadServerConfig;                                 // 0x00B0(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LimitDataLoading;                                  // 0x00B1(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LoadWeaponReplacements;                            // 0x00B2(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115D[0x5];                                     // 0x00B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQServerSettings                      EditorServerSettings;                              // 0x00B8(0x02E8)(Edit, BlueprintVisible, Config, NativeAccessSpecifierPublic)
	bool                                          EditorIgnoreStartupTime;                           // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115E[0x3];                                     // 0x03A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RaasDefaultSeed;                                   // 0x03A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartTeamOverride;                                 // 0x03A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceDirectSpawn;                                  // 0x03AC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeployablePlacementAlwaysValid;                    // 0x03AD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceOutOfBoundsKillDisabled;                      // 0x03AE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForcePlayerNotAdminInEditor;                       // 0x03AF(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForcePlayerNotDevInEditor;                         // 0x03B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForcePlayerNotQAInEditor;                          // 0x03B1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForcePlayerNotMemberInEditor;                      // 0x03B2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115F[0x5];                                     // 0x03B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class USQLayer*                               EditorActiveLayer;                                 // 0x03B8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USQLevel*                               EditorActiveLevel;                                 // 0x03C0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FName, class USQLevel*>            AvailableLevels;                                   // 0x03C8(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<class FName, class USQLayer*>            AvailableLayers;                                   // 0x0418(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<class FName, class USQFaction*>          AvailableFactions;                                 // 0x0468(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<class FName, class USQFactionSetup*>     AvailableFactionSetups;                            // 0x04B8(0x0050)(Transient, NativeAccessSpecifierPrivate)

public:
	static class USQEditorPlaySettings* GetEditorPlaySettings();
	static void RemoveCustomOption(const class FString& Key);
	static void SetCustomOption(const class FString& Key, const class FString& Value);

	bool TryGetEditorFactionSetup(const ESQTeam InTeam, class USQFactionSetup** OutFactionSetup);
	bool TryGetEditorSQLayer(class USQLayer** OutEditorLayer);
	bool TryGetEditorSQLevel(class USQLevel** OutEditorLevel);

	bool HasLayerOverride() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEditorPlaySettings">();
	}
	static class USQEditorPlaySettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEditorPlaySettings>();
	}
};
static_assert(alignof(USQEditorPlaySettings) == 0x000008, "Wrong alignment on USQEditorPlaySettings");
static_assert(sizeof(USQEditorPlaySettings) == 0x000508, "Wrong size on USQEditorPlaySettings");
static_assert(offsetof(USQEditorPlaySettings, DefaultPawnClassOverride) == 0x000038, "Member 'USQEditorPlaySettings::DefaultPawnClassOverride' has a wrong offset!");
static_assert(offsetof(USQEditorPlaySettings, DefaultWeaponClassOverride) == 0x000060, "Member 'USQEditorPlaySettings::DefaultWeaponClassOverride' has a wrong offset!");
static_assert(offsetof(USQEditorPlaySettings, LayerEditorOverride) == 0x000088, "Member 'USQEditorPlaySettings::LayerEditorOverride' has a wrong offset!");
static_assert(offsetof(USQEditorPlaySettings, bLoadServerConfig) == 0x0000B0, "Member 'USQEditorPlaySettings::bLoadServerConfig' has a wrong offset!");
static_assert(offsetof(USQEditorPlaySettings, LimitDataLoading) == 0x0000B1, "Member 'USQEditorPlaySettings::LimitDataLoading' has a wrong offset!");
static_assert(offsetof(USQEditorPlaySettings, LoadWeaponReplacements) == 0x0000B2, "Member 'USQEditorPlaySettings::LoadWeaponReplacements' has a wrong offset!");
static_assert(offsetof(USQEditorPlaySettings, EditorServerSettings) == 0x0000B8, "Member 'USQEditorPlaySettings::EditorServerSettings' has a wrong offset!");
static_assert(offsetof(USQEditorPlaySettings, EditorIgnoreStartupTime) == 0x0003A0, "Member 'USQEditorPlaySettings::EditorIgnoreStartupTime' has a wrong offset!");
static_assert(offsetof(USQEditorPlaySettings, RaasDefaultSeed) == 0x0003A4, "Member 'USQEditorPlaySettings::RaasDefaultSeed' has a wrong offset!");
static_assert(offsetof(USQEditorPlaySettings, StartTeamOverride) == 0x0003A8, "Member 'USQEditorPlaySettings::StartTeamOverride' has a wrong offset!");
static_assert(offsetof(USQEditorPlaySettings, ForceDirectSpawn) == 0x0003AC, "Member 'USQEditorPlaySettings::ForceDirectSpawn' has a wrong offset!");
static_assert(offsetof(USQEditorPlaySettings, DeployablePlacementAlwaysValid) == 0x0003AD, "Member 'USQEditorPlaySettings::DeployablePlacementAlwaysValid' has a wrong offset!");
static_assert(offsetof(USQEditorPlaySettings, ForceOutOfBoundsKillDisabled) == 0x0003AE, "Member 'USQEditorPlaySettings::ForceOutOfBoundsKillDisabled' has a wrong offset!");
static_assert(offsetof(USQEditorPlaySettings, ForcePlayerNotAdminInEditor) == 0x0003AF, "Member 'USQEditorPlaySettings::ForcePlayerNotAdminInEditor' has a wrong offset!");
static_assert(offsetof(USQEditorPlaySettings, ForcePlayerNotDevInEditor) == 0x0003B0, "Member 'USQEditorPlaySettings::ForcePlayerNotDevInEditor' has a wrong offset!");
static_assert(offsetof(USQEditorPlaySettings, ForcePlayerNotQAInEditor) == 0x0003B1, "Member 'USQEditorPlaySettings::ForcePlayerNotQAInEditor' has a wrong offset!");
static_assert(offsetof(USQEditorPlaySettings, ForcePlayerNotMemberInEditor) == 0x0003B2, "Member 'USQEditorPlaySettings::ForcePlayerNotMemberInEditor' has a wrong offset!");
static_assert(offsetof(USQEditorPlaySettings, EditorActiveLayer) == 0x0003B8, "Member 'USQEditorPlaySettings::EditorActiveLayer' has a wrong offset!");
static_assert(offsetof(USQEditorPlaySettings, EditorActiveLevel) == 0x0003C0, "Member 'USQEditorPlaySettings::EditorActiveLevel' has a wrong offset!");
static_assert(offsetof(USQEditorPlaySettings, AvailableLevels) == 0x0003C8, "Member 'USQEditorPlaySettings::AvailableLevels' has a wrong offset!");
static_assert(offsetof(USQEditorPlaySettings, AvailableLayers) == 0x000418, "Member 'USQEditorPlaySettings::AvailableLayers' has a wrong offset!");
static_assert(offsetof(USQEditorPlaySettings, AvailableFactions) == 0x000468, "Member 'USQEditorPlaySettings::AvailableFactions' has a wrong offset!");
static_assert(offsetof(USQEditorPlaySettings, AvailableFactionSetups) == 0x0004B8, "Member 'USQEditorPlaySettings::AvailableFactionSetups' has a wrong offset!");

// Class Squad.SQEmotePlayer
// 0x0088 (0x0138 - 0x00B0)
class USQEmotePlayer final : public UActorComponent
{
public:
	class USQEmotesDataTable*                     EmotesData;                                        // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEmotesData*                          EmotePlaying;                                      // 0x00B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1164[0x68];                                    // 0x00C0(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQEmoteProp*                           SpawnedEmoteObject;                                // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1165[0x8];                                     // 0x0130(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void MulticastCancelEmote(const class FName& EmoteName);
	void MulticastPlayEmote(const class FName& EmoteName, const uint16& RandomVal);

	bool CanPlayEmote(const class USQEmotesData* Emote) const;
	bool CanShowEmotesWheel() const;
	TArray<class FString> GetRestrictionText(const class USQEmotesData* Emote) const;
	bool IsEmotePlaying(const class USQEmotesData* Emote) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEmotePlayer">();
	}
	static class USQEmotePlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEmotePlayer>();
	}
};
static_assert(alignof(USQEmotePlayer) == 0x000008, "Wrong alignment on USQEmotePlayer");
static_assert(sizeof(USQEmotePlayer) == 0x000138, "Wrong size on USQEmotePlayer");
static_assert(offsetof(USQEmotePlayer, EmotesData) == 0x0000B0, "Member 'USQEmotePlayer::EmotesData' has a wrong offset!");
static_assert(offsetof(USQEmotePlayer, EmotePlaying) == 0x0000B8, "Member 'USQEmotePlayer::EmotePlaying' has a wrong offset!");
static_assert(offsetof(USQEmotePlayer, SpawnedEmoteObject) == 0x000128, "Member 'USQEmotePlayer::SpawnedEmoteObject' has a wrong offset!");

// Class Squad.SQAnimNotifyEmoteProp
// 0x0010 (0x0048 - 0x0038)
class USQAnimNotifyEmoteProp final : public UAnimNotify
{
public:
	ESQPropNotifyAction                           Mode;                                              // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1169[0x3];                                     // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachSocket;                                      // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_116A[0x4];                                     // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAnimNotifyEmoteProp">();
	}
	static class USQAnimNotifyEmoteProp* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQAnimNotifyEmoteProp>();
	}
};
static_assert(alignof(USQAnimNotifyEmoteProp) == 0x000008, "Wrong alignment on USQAnimNotifyEmoteProp");
static_assert(sizeof(USQAnimNotifyEmoteProp) == 0x000048, "Wrong size on USQAnimNotifyEmoteProp");
static_assert(offsetof(USQAnimNotifyEmoteProp, Mode) == 0x000038, "Member 'USQAnimNotifyEmoteProp::Mode' has a wrong offset!");
static_assert(offsetof(USQAnimNotifyEmoteProp, AttachSocket) == 0x00003C, "Member 'USQAnimNotifyEmoteProp::AttachSocket' has a wrong offset!");

// Class Squad.SQLastingEffect
// 0x0060 (0x0288 - 0x0228)
class ASQLastingEffect : public AActor
{
public:
	class UParticleSystemComponent*               ParticleSystem;                                    // 0x0228(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      NiagaraSystem;                                     // 0x0230(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        Audio;                                             // 0x0238(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQShockwave>               ShockwaveEffect;                                   // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToFireTriggerLastingEffectEventAfterBeginPlay; // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToLiveAfterBeginPlay;                          // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToLiveAfterTriggerLastingEffect;               // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bListenForOnActorHitEvents;                        // 0x0254(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bListenForOnDestroyedEvents;                       // 0x0255(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivateParticleSystemUponBeginPlay;              // 0x0256(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivateParticleSystemUponTriggerLastingEffect;   // 0x0257(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivateAudioUponBeginPlay;                       // 0x0258(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivateAudioUponTriggerLastingEffect;            // 0x0259(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivateShockwaveUponBeginPlay;                   // 0x025A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivateShockwaveUponTriggerLastingEffect;        // 0x025B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDetachFromActorUponTriggerLastingEffect;          // 0x025C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeactivateParticleSystemUponTriggerLastingEffect; // 0x025D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeactivateParticleSystemUponTriggerLastingEffectTimerExpired; // 0x025E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeactivateAudioUponTriggerLastingEffectTimerExpired; // 0x025F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestroyUponTriggerLastingEffectTimerExpired;      // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawDebugSphere;                                  // 0x0261(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_116B[0x2];                                     // 0x0262(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DebugSphereRadius;                                 // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         DebugSphereSegments;                               // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FColor                                 DebugSphereColor;                                  // 0x026C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_116C[0x18];                                    // 0x0270(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Activate();
	void Deactivate();
	void OnActorHitEvent(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnBeginPlayTimerExpired();
	void OnDestroyedEvent(class AActor* DestroyedActor);
	void OnTriggerLastingEffectEvent();
	void OnTriggerLastingEffectTimerExpired();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQLastingEffect">();
	}
	static class ASQLastingEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQLastingEffect>();
	}
};
static_assert(alignof(ASQLastingEffect) == 0x000008, "Wrong alignment on ASQLastingEffect");
static_assert(sizeof(ASQLastingEffect) == 0x000288, "Wrong size on ASQLastingEffect");
static_assert(offsetof(ASQLastingEffect, ParticleSystem) == 0x000228, "Member 'ASQLastingEffect::ParticleSystem' has a wrong offset!");
static_assert(offsetof(ASQLastingEffect, NiagaraSystem) == 0x000230, "Member 'ASQLastingEffect::NiagaraSystem' has a wrong offset!");
static_assert(offsetof(ASQLastingEffect, Audio) == 0x000238, "Member 'ASQLastingEffect::Audio' has a wrong offset!");
static_assert(offsetof(ASQLastingEffect, ShockwaveEffect) == 0x000240, "Member 'ASQLastingEffect::ShockwaveEffect' has a wrong offset!");
static_assert(offsetof(ASQLastingEffect, TimeToFireTriggerLastingEffectEventAfterBeginPlay) == 0x000248, "Member 'ASQLastingEffect::TimeToFireTriggerLastingEffectEventAfterBeginPlay' has a wrong offset!");
static_assert(offsetof(ASQLastingEffect, TimeToLiveAfterBeginPlay) == 0x00024C, "Member 'ASQLastingEffect::TimeToLiveAfterBeginPlay' has a wrong offset!");
static_assert(offsetof(ASQLastingEffect, TimeToLiveAfterTriggerLastingEffect) == 0x000250, "Member 'ASQLastingEffect::TimeToLiveAfterTriggerLastingEffect' has a wrong offset!");
static_assert(offsetof(ASQLastingEffect, bListenForOnActorHitEvents) == 0x000254, "Member 'ASQLastingEffect::bListenForOnActorHitEvents' has a wrong offset!");
static_assert(offsetof(ASQLastingEffect, bListenForOnDestroyedEvents) == 0x000255, "Member 'ASQLastingEffect::bListenForOnDestroyedEvents' has a wrong offset!");
static_assert(offsetof(ASQLastingEffect, bActivateParticleSystemUponBeginPlay) == 0x000256, "Member 'ASQLastingEffect::bActivateParticleSystemUponBeginPlay' has a wrong offset!");
static_assert(offsetof(ASQLastingEffect, bActivateParticleSystemUponTriggerLastingEffect) == 0x000257, "Member 'ASQLastingEffect::bActivateParticleSystemUponTriggerLastingEffect' has a wrong offset!");
static_assert(offsetof(ASQLastingEffect, bActivateAudioUponBeginPlay) == 0x000258, "Member 'ASQLastingEffect::bActivateAudioUponBeginPlay' has a wrong offset!");
static_assert(offsetof(ASQLastingEffect, bActivateAudioUponTriggerLastingEffect) == 0x000259, "Member 'ASQLastingEffect::bActivateAudioUponTriggerLastingEffect' has a wrong offset!");
static_assert(offsetof(ASQLastingEffect, bActivateShockwaveUponBeginPlay) == 0x00025A, "Member 'ASQLastingEffect::bActivateShockwaveUponBeginPlay' has a wrong offset!");
static_assert(offsetof(ASQLastingEffect, bActivateShockwaveUponTriggerLastingEffect) == 0x00025B, "Member 'ASQLastingEffect::bActivateShockwaveUponTriggerLastingEffect' has a wrong offset!");
static_assert(offsetof(ASQLastingEffect, bDetachFromActorUponTriggerLastingEffect) == 0x00025C, "Member 'ASQLastingEffect::bDetachFromActorUponTriggerLastingEffect' has a wrong offset!");
static_assert(offsetof(ASQLastingEffect, bDeactivateParticleSystemUponTriggerLastingEffect) == 0x00025D, "Member 'ASQLastingEffect::bDeactivateParticleSystemUponTriggerLastingEffect' has a wrong offset!");
static_assert(offsetof(ASQLastingEffect, bDeactivateParticleSystemUponTriggerLastingEffectTimerExpired) == 0x00025E, "Member 'ASQLastingEffect::bDeactivateParticleSystemUponTriggerLastingEffectTimerExpired' has a wrong offset!");
static_assert(offsetof(ASQLastingEffect, bDeactivateAudioUponTriggerLastingEffectTimerExpired) == 0x00025F, "Member 'ASQLastingEffect::bDeactivateAudioUponTriggerLastingEffectTimerExpired' has a wrong offset!");
static_assert(offsetof(ASQLastingEffect, bDestroyUponTriggerLastingEffectTimerExpired) == 0x000260, "Member 'ASQLastingEffect::bDestroyUponTriggerLastingEffectTimerExpired' has a wrong offset!");
static_assert(offsetof(ASQLastingEffect, bDrawDebugSphere) == 0x000261, "Member 'ASQLastingEffect::bDrawDebugSphere' has a wrong offset!");
static_assert(offsetof(ASQLastingEffect, DebugSphereRadius) == 0x000264, "Member 'ASQLastingEffect::DebugSphereRadius' has a wrong offset!");
static_assert(offsetof(ASQLastingEffect, DebugSphereSegments) == 0x000268, "Member 'ASQLastingEffect::DebugSphereSegments' has a wrong offset!");
static_assert(offsetof(ASQLastingEffect, DebugSphereColor) == 0x00026C, "Member 'ASQLastingEffect::DebugSphereColor' has a wrong offset!");

// Class Squad.SQEmoteProp
// 0x0010 (0x0238 - 0x0228)
class ASQEmoteProp : public AActor
{
public:
	bool                                          bIsFirstPerson;                                    // 0x0228(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestroytOnCancel;                                 // 0x0229(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_116E[0x6];                                     // 0x022A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQSoldier*                             OwningSoldier;                                     // 0x0230(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void RunAnimation();
	void SetPropData(const struct FSQEmotePropData& InStructInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEmoteProp">();
	}
	static class ASQEmoteProp* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEmoteProp>();
	}
};
static_assert(alignof(ASQEmoteProp) == 0x000008, "Wrong alignment on ASQEmoteProp");
static_assert(sizeof(ASQEmoteProp) == 0x000238, "Wrong size on ASQEmoteProp");
static_assert(offsetof(ASQEmoteProp, bIsFirstPerson) == 0x000228, "Member 'ASQEmoteProp::bIsFirstPerson' has a wrong offset!");
static_assert(offsetof(ASQEmoteProp, bDestroytOnCancel) == 0x000229, "Member 'ASQEmoteProp::bDestroytOnCancel' has a wrong offset!");
static_assert(offsetof(ASQEmoteProp, OwningSoldier) == 0x000230, "Member 'ASQEmoteProp::OwningSoldier' has a wrong offset!");

// Class Squad.SQEmoteProp_SkelMesh
// 0x0018 (0x0250 - 0x0238)
class ASQEmoteProp_SkelMesh final : public ASQEmoteProp
{
public:
	class UAnimMontage*                           MontageToPlay;                                     // 0x0238(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoopAnimation;                                    // 0x0240(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_116F[0x7];                                     // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 SkelMeshComponent;                                 // 0x0248(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEmoteProp_SkelMesh">();
	}
	static class ASQEmoteProp_SkelMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEmoteProp_SkelMesh>();
	}
};
static_assert(alignof(ASQEmoteProp_SkelMesh) == 0x000008, "Wrong alignment on ASQEmoteProp_SkelMesh");
static_assert(sizeof(ASQEmoteProp_SkelMesh) == 0x000250, "Wrong size on ASQEmoteProp_SkelMesh");
static_assert(offsetof(ASQEmoteProp_SkelMesh, MontageToPlay) == 0x000238, "Member 'ASQEmoteProp_SkelMesh::MontageToPlay' has a wrong offset!");
static_assert(offsetof(ASQEmoteProp_SkelMesh, bLoopAnimation) == 0x000240, "Member 'ASQEmoteProp_SkelMesh::bLoopAnimation' has a wrong offset!");
static_assert(offsetof(ASQEmoteProp_SkelMesh, SkelMeshComponent) == 0x000248, "Member 'ASQEmoteProp_SkelMesh::SkelMeshComponent' has a wrong offset!");

// Class Squad.SQLogisticsRuleSet
// 0x0010 (0x0268 - 0x0258)
class ASQLogisticsRuleSet : public ASQGameRuleSet
{
public:
	struct FSQLogisticsSettings                   RuleSettings;                                      // 0x0258(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1170[0x4];                                     // 0x0264(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQLogisticsRuleSet">();
	}
	static class ASQLogisticsRuleSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQLogisticsRuleSet>();
	}
};
static_assert(alignof(ASQLogisticsRuleSet) == 0x000008, "Wrong alignment on ASQLogisticsRuleSet");
static_assert(sizeof(ASQLogisticsRuleSet) == 0x000268, "Wrong size on ASQLogisticsRuleSet");
static_assert(offsetof(ASQLogisticsRuleSet, RuleSettings) == 0x000258, "Member 'ASQLogisticsRuleSet::RuleSettings' has a wrong offset!");

// Class Squad.SQEmoteProp_StaticMesh
// 0x0008 (0x0240 - 0x0238)
class ASQEmoteProp_StaticMesh final : public ASQEmoteProp
{
public:
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x0238(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEmoteProp_StaticMesh">();
	}
	static class ASQEmoteProp_StaticMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQEmoteProp_StaticMesh>();
	}
};
static_assert(alignof(ASQEmoteProp_StaticMesh) == 0x000008, "Wrong alignment on ASQEmoteProp_StaticMesh");
static_assert(sizeof(ASQEmoteProp_StaticMesh) == 0x000240, "Wrong size on ASQEmoteProp_StaticMesh");
static_assert(offsetof(ASQEmoteProp_StaticMesh, StaticMeshComponent) == 0x000238, "Member 'ASQEmoteProp_StaticMesh::StaticMeshComponent' has a wrong offset!");

// Class Squad.SQEmotesData
// 0x01F8 (0x0228 - 0x0030)
class USQEmotesData final : public UDataAsset
{
public:
	class UODKBazaarItem*                         BazaarItem;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EmoteName;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              EmoteIcon;                                         // 0x0040(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQDLCEmotes                                  EmotesDLC;                                         // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1171[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEmoteAnimationData                    EmoteAnimationData;                                // 0x0070(0x0098)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<TSoftObjectPtr<class USQFaction>, struct FEmoteAnimationData> FactionAlternativeAnimations;                      // 0x0108(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<TSoftClassPtr<class UClass>, struct FEmoteAnimationData> WeaponAlternativeAnimations;                       // 0x0158(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bIsInMainBase;                                     // 0x01A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsForwardStaging;                                 // 0x01A9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInVehicle;                                      // 0x01AA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsConfined;                                       // 0x01AB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsProne;                                          // 0x01AC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCrouched;                                       // 0x01AD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFalling;                                        // 0x01AE(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowWhenStanding;                                // 0x01AF(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowWhenBipoded;                                 // 0x01B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideWeapon;                                       // 0x01B1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowWeaponLowering;                              // 0x01B2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUnderWater;                                     // 0x01B3(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToPlayEmoteOnEnding;                           // 0x01B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           EquippedWeapons;                                   // 0x01B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class USQFaction*>                     Factions;                                          // 0x01C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class USQRoleSettings*>                Role;                                              // 0x01D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	ESQEmotesCamera                               CameraMode;                                        // 0x01E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1172[0x3];                                     // 0x01E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ThirdPersonCameraOrientation;                      // 0x01EC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ThirdPersonCameraDistance;                         // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x01FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         blendOutTime;                                      // 0x0200(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CancelBlendOutTime;                                // 0x0204(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Cooldown;                                          // 0x0208(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExclusiveCooldown;                                 // 0x020C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxUsages;                                         // 0x0210(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCancelOnMove;                                     // 0x0214(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCancelOnSprint;                                   // 0x0215(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCancelOnJump;                                     // 0x0216(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCancelOnClimb;                                    // 0x0217(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCancelOnLean;                                     // 0x0218(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCancelOnProne;                                    // 0x0219(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCancelOnFiring;                                   // 0x021A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCancelOnAiming;                                   // 0x021B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCancelOnReload;                                   // 0x021C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCancelOnWeaponChange;                             // 0x021D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCancelOnInteract;                                 // 0x021E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCancelOnCrouch;                                   // 0x021F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCancelOnUnderWater;                               // 0x0220(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCancelOnLeaveMainBase;                            // 0x0221(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCancelOnBipod;                                    // 0x0222(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1173[0x1];                                     // 0x0223(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MovementSpeedMultiplier;                           // 0x0224(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	TArray<class FString> GetRestrictionsText();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEmotesData">();
	}
	static class USQEmotesData* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEmotesData>();
	}
};
static_assert(alignof(USQEmotesData) == 0x000008, "Wrong alignment on USQEmotesData");
static_assert(sizeof(USQEmotesData) == 0x000228, "Wrong size on USQEmotesData");
static_assert(offsetof(USQEmotesData, BazaarItem) == 0x000030, "Member 'USQEmotesData::BazaarItem' has a wrong offset!");
static_assert(offsetof(USQEmotesData, EmoteName) == 0x000038, "Member 'USQEmotesData::EmoteName' has a wrong offset!");
static_assert(offsetof(USQEmotesData, EmoteIcon) == 0x000040, "Member 'USQEmotesData::EmoteIcon' has a wrong offset!");
static_assert(offsetof(USQEmotesData, EmotesDLC) == 0x000068, "Member 'USQEmotesData::EmotesDLC' has a wrong offset!");
static_assert(offsetof(USQEmotesData, EmoteAnimationData) == 0x000070, "Member 'USQEmotesData::EmoteAnimationData' has a wrong offset!");
static_assert(offsetof(USQEmotesData, FactionAlternativeAnimations) == 0x000108, "Member 'USQEmotesData::FactionAlternativeAnimations' has a wrong offset!");
static_assert(offsetof(USQEmotesData, WeaponAlternativeAnimations) == 0x000158, "Member 'USQEmotesData::WeaponAlternativeAnimations' has a wrong offset!");
static_assert(offsetof(USQEmotesData, bIsInMainBase) == 0x0001A8, "Member 'USQEmotesData::bIsInMainBase' has a wrong offset!");
static_assert(offsetof(USQEmotesData, bIsForwardStaging) == 0x0001A9, "Member 'USQEmotesData::bIsForwardStaging' has a wrong offset!");
static_assert(offsetof(USQEmotesData, bIsInVehicle) == 0x0001AA, "Member 'USQEmotesData::bIsInVehicle' has a wrong offset!");
static_assert(offsetof(USQEmotesData, bIsConfined) == 0x0001AB, "Member 'USQEmotesData::bIsConfined' has a wrong offset!");
static_assert(offsetof(USQEmotesData, bIsProne) == 0x0001AC, "Member 'USQEmotesData::bIsProne' has a wrong offset!");
static_assert(offsetof(USQEmotesData, bIsCrouched) == 0x0001AD, "Member 'USQEmotesData::bIsCrouched' has a wrong offset!");
static_assert(offsetof(USQEmotesData, bIsFalling) == 0x0001AE, "Member 'USQEmotesData::bIsFalling' has a wrong offset!");
static_assert(offsetof(USQEmotesData, bAllowWhenStanding) == 0x0001AF, "Member 'USQEmotesData::bAllowWhenStanding' has a wrong offset!");
static_assert(offsetof(USQEmotesData, bAllowWhenBipoded) == 0x0001B0, "Member 'USQEmotesData::bAllowWhenBipoded' has a wrong offset!");
static_assert(offsetof(USQEmotesData, bHideWeapon) == 0x0001B1, "Member 'USQEmotesData::bHideWeapon' has a wrong offset!");
static_assert(offsetof(USQEmotesData, bAllowWeaponLowering) == 0x0001B2, "Member 'USQEmotesData::bAllowWeaponLowering' has a wrong offset!");
static_assert(offsetof(USQEmotesData, bIsUnderWater) == 0x0001B3, "Member 'USQEmotesData::bIsUnderWater' has a wrong offset!");
static_assert(offsetof(USQEmotesData, TimeToPlayEmoteOnEnding) == 0x0001B4, "Member 'USQEmotesData::TimeToPlayEmoteOnEnding' has a wrong offset!");
static_assert(offsetof(USQEmotesData, EquippedWeapons) == 0x0001B8, "Member 'USQEmotesData::EquippedWeapons' has a wrong offset!");
static_assert(offsetof(USQEmotesData, Factions) == 0x0001C8, "Member 'USQEmotesData::Factions' has a wrong offset!");
static_assert(offsetof(USQEmotesData, Role) == 0x0001D8, "Member 'USQEmotesData::Role' has a wrong offset!");
static_assert(offsetof(USQEmotesData, CameraMode) == 0x0001E8, "Member 'USQEmotesData::CameraMode' has a wrong offset!");
static_assert(offsetof(USQEmotesData, ThirdPersonCameraOrientation) == 0x0001EC, "Member 'USQEmotesData::ThirdPersonCameraOrientation' has a wrong offset!");
static_assert(offsetof(USQEmotesData, ThirdPersonCameraDistance) == 0x0001F8, "Member 'USQEmotesData::ThirdPersonCameraDistance' has a wrong offset!");
static_assert(offsetof(USQEmotesData, BlendInTime) == 0x0001FC, "Member 'USQEmotesData::BlendInTime' has a wrong offset!");
static_assert(offsetof(USQEmotesData, blendOutTime) == 0x000200, "Member 'USQEmotesData::blendOutTime' has a wrong offset!");
static_assert(offsetof(USQEmotesData, CancelBlendOutTime) == 0x000204, "Member 'USQEmotesData::CancelBlendOutTime' has a wrong offset!");
static_assert(offsetof(USQEmotesData, Cooldown) == 0x000208, "Member 'USQEmotesData::Cooldown' has a wrong offset!");
static_assert(offsetof(USQEmotesData, ExclusiveCooldown) == 0x00020C, "Member 'USQEmotesData::ExclusiveCooldown' has a wrong offset!");
static_assert(offsetof(USQEmotesData, MaxUsages) == 0x000210, "Member 'USQEmotesData::MaxUsages' has a wrong offset!");
static_assert(offsetof(USQEmotesData, bCancelOnMove) == 0x000214, "Member 'USQEmotesData::bCancelOnMove' has a wrong offset!");
static_assert(offsetof(USQEmotesData, bCancelOnSprint) == 0x000215, "Member 'USQEmotesData::bCancelOnSprint' has a wrong offset!");
static_assert(offsetof(USQEmotesData, bCancelOnJump) == 0x000216, "Member 'USQEmotesData::bCancelOnJump' has a wrong offset!");
static_assert(offsetof(USQEmotesData, bCancelOnClimb) == 0x000217, "Member 'USQEmotesData::bCancelOnClimb' has a wrong offset!");
static_assert(offsetof(USQEmotesData, bCancelOnLean) == 0x000218, "Member 'USQEmotesData::bCancelOnLean' has a wrong offset!");
static_assert(offsetof(USQEmotesData, bCancelOnProne) == 0x000219, "Member 'USQEmotesData::bCancelOnProne' has a wrong offset!");
static_assert(offsetof(USQEmotesData, bCancelOnFiring) == 0x00021A, "Member 'USQEmotesData::bCancelOnFiring' has a wrong offset!");
static_assert(offsetof(USQEmotesData, bCancelOnAiming) == 0x00021B, "Member 'USQEmotesData::bCancelOnAiming' has a wrong offset!");
static_assert(offsetof(USQEmotesData, bCancelOnReload) == 0x00021C, "Member 'USQEmotesData::bCancelOnReload' has a wrong offset!");
static_assert(offsetof(USQEmotesData, bCancelOnWeaponChange) == 0x00021D, "Member 'USQEmotesData::bCancelOnWeaponChange' has a wrong offset!");
static_assert(offsetof(USQEmotesData, bCancelOnInteract) == 0x00021E, "Member 'USQEmotesData::bCancelOnInteract' has a wrong offset!");
static_assert(offsetof(USQEmotesData, bCancelOnCrouch) == 0x00021F, "Member 'USQEmotesData::bCancelOnCrouch' has a wrong offset!");
static_assert(offsetof(USQEmotesData, bCancelOnUnderWater) == 0x000220, "Member 'USQEmotesData::bCancelOnUnderWater' has a wrong offset!");
static_assert(offsetof(USQEmotesData, bCancelOnLeaveMainBase) == 0x000221, "Member 'USQEmotesData::bCancelOnLeaveMainBase' has a wrong offset!");
static_assert(offsetof(USQEmotesData, bCancelOnBipod) == 0x000222, "Member 'USQEmotesData::bCancelOnBipod' has a wrong offset!");
static_assert(offsetof(USQEmotesData, MovementSpeedMultiplier) == 0x000224, "Member 'USQEmotesData::MovementSpeedMultiplier' has a wrong offset!");

// Class Squad.SQMapItemComponent
// 0x0058 (0x0108 - 0x00B0)
class USQMapItemComponent : public UActorComponent
{
public:
	struct FLinearColor                           Tint;                                              // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CustomWorldPosition;                               // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomWorldPosition;                           // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseWorldRotation;                                 // 0x00C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1174[0x2];                                     // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Rotation;                                          // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RotPivot;                                          // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Size;                                              // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Offset;                                            // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQMapItemDrawMode                            DrawModeX;                                         // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQMapItemDrawMode                            DrawModeY;                                         // 0x00E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVisible;                                        // 0x00EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1175[0x1];                                     // 0x00EB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TeamIndex;                                         // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadId;                                           // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQMapMarkerType                              MapMarkerType;                                     // 0x00F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQMapMarkerVisibleTo                         MapMarkerVisibleTo;                                // 0x00F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQMapItemType                                Type;                                              // 0x00F6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1176[0x1];                                     // 0x00F7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USQMapIconWidget>           CustomMapWidget;                                   // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1177[0x8];                                     // 0x0100(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapItemComponent">();
	}
	static class USQMapItemComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapItemComponent>();
	}
};
static_assert(alignof(USQMapItemComponent) == 0x000008, "Wrong alignment on USQMapItemComponent");
static_assert(sizeof(USQMapItemComponent) == 0x000108, "Wrong size on USQMapItemComponent");
static_assert(offsetof(USQMapItemComponent, Tint) == 0x0000B0, "Member 'USQMapItemComponent::Tint' has a wrong offset!");
static_assert(offsetof(USQMapItemComponent, CustomWorldPosition) == 0x0000C0, "Member 'USQMapItemComponent::CustomWorldPosition' has a wrong offset!");
static_assert(offsetof(USQMapItemComponent, bUseCustomWorldPosition) == 0x0000C8, "Member 'USQMapItemComponent::bUseCustomWorldPosition' has a wrong offset!");
static_assert(offsetof(USQMapItemComponent, bUseWorldRotation) == 0x0000C9, "Member 'USQMapItemComponent::bUseWorldRotation' has a wrong offset!");
static_assert(offsetof(USQMapItemComponent, Rotation) == 0x0000CC, "Member 'USQMapItemComponent::Rotation' has a wrong offset!");
static_assert(offsetof(USQMapItemComponent, RotPivot) == 0x0000D0, "Member 'USQMapItemComponent::RotPivot' has a wrong offset!");
static_assert(offsetof(USQMapItemComponent, Size) == 0x0000D8, "Member 'USQMapItemComponent::Size' has a wrong offset!");
static_assert(offsetof(USQMapItemComponent, Offset) == 0x0000E0, "Member 'USQMapItemComponent::Offset' has a wrong offset!");
static_assert(offsetof(USQMapItemComponent, DrawModeX) == 0x0000E8, "Member 'USQMapItemComponent::DrawModeX' has a wrong offset!");
static_assert(offsetof(USQMapItemComponent, DrawModeY) == 0x0000E9, "Member 'USQMapItemComponent::DrawModeY' has a wrong offset!");
static_assert(offsetof(USQMapItemComponent, bIsVisible) == 0x0000EA, "Member 'USQMapItemComponent::bIsVisible' has a wrong offset!");
static_assert(offsetof(USQMapItemComponent, TeamIndex) == 0x0000EC, "Member 'USQMapItemComponent::TeamIndex' has a wrong offset!");
static_assert(offsetof(USQMapItemComponent, SquadId) == 0x0000F0, "Member 'USQMapItemComponent::SquadId' has a wrong offset!");
static_assert(offsetof(USQMapItemComponent, MapMarkerType) == 0x0000F4, "Member 'USQMapItemComponent::MapMarkerType' has a wrong offset!");
static_assert(offsetof(USQMapItemComponent, MapMarkerVisibleTo) == 0x0000F5, "Member 'USQMapItemComponent::MapMarkerVisibleTo' has a wrong offset!");
static_assert(offsetof(USQMapItemComponent, Type) == 0x0000F6, "Member 'USQMapItemComponent::Type' has a wrong offset!");
static_assert(offsetof(USQMapItemComponent, CustomMapWidget) == 0x0000F8, "Member 'USQMapItemComponent::CustomMapWidget' has a wrong offset!");

// Class Squad.SQMapIconComponent
// 0x0058 (0x0160 - 0x0108)
class USQMapIconComponent final : public USQMapItemComponent
{
public:
	class UTexture*                               Texture;                                           // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQMapIconSelectionGroup                      SelectionGroup;                                    // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1178[0x7];                                     // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               SelectedTexture;                                   // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SelectedTint;                                      // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1179[0x30];                                    // 0x0130(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapIconComponent">();
	}
	static class USQMapIconComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapIconComponent>();
	}
};
static_assert(alignof(USQMapIconComponent) == 0x000008, "Wrong alignment on USQMapIconComponent");
static_assert(sizeof(USQMapIconComponent) == 0x000160, "Wrong size on USQMapIconComponent");
static_assert(offsetof(USQMapIconComponent, Texture) == 0x000108, "Member 'USQMapIconComponent::Texture' has a wrong offset!");
static_assert(offsetof(USQMapIconComponent, SelectionGroup) == 0x000110, "Member 'USQMapIconComponent::SelectionGroup' has a wrong offset!");
static_assert(offsetof(USQMapIconComponent, SelectedTexture) == 0x000118, "Member 'USQMapIconComponent::SelectedTexture' has a wrong offset!");
static_assert(offsetof(USQMapIconComponent, SelectedTint) == 0x000120, "Member 'USQMapIconComponent::SelectedTint' has a wrong offset!");

// Class Squad.SQEmotesDataTable
// 0x0010 (0x0040 - 0x0030)
class USQEmotesDataTable final : public UDataAsset
{
public:
	TArray<class USQEmotesData*>                  EmoteData;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEmotesDataTable">();
	}
	static class USQEmotesDataTable* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEmotesDataTable>();
	}
};
static_assert(alignof(USQEmotesDataTable) == 0x000008, "Wrong alignment on USQEmotesDataTable");
static_assert(sizeof(USQEmotesDataTable) == 0x000040, "Wrong size on USQEmotesDataTable");
static_assert(offsetof(USQEmotesDataTable, EmoteData) == 0x000030, "Member 'USQEmotesDataTable::EmoteData' has a wrong offset!");

// Class Squad.SQEmoteItemWidget
// 0x0048 (0x02A8 - 0x0260)
class USQEmoteItemWidget : public UUserWidget
{
public:
	uint8                                         Pad_117A[0x8];                                     // 0x0260(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSelected;                                        // 0x0268(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnHovered;                                         // 0x0278(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	bool                                          bIsEquipped;                                       // 0x0288(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_117B[0x7];                                     // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQEmotesData*                          EmotesData;                                        // 0x0290(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 ItemIcon;                                          // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UButton*                                ItemButton;                                        // 0x02A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnHover();

	bool IsNew() const;
	bool IsOwned() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEmoteItemWidget">();
	}
	static class USQEmoteItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEmoteItemWidget>();
	}
};
static_assert(alignof(USQEmoteItemWidget) == 0x000008, "Wrong alignment on USQEmoteItemWidget");
static_assert(sizeof(USQEmoteItemWidget) == 0x0002A8, "Wrong size on USQEmoteItemWidget");
static_assert(offsetof(USQEmoteItemWidget, OnSelected) == 0x000268, "Member 'USQEmoteItemWidget::OnSelected' has a wrong offset!");
static_assert(offsetof(USQEmoteItemWidget, OnHovered) == 0x000278, "Member 'USQEmoteItemWidget::OnHovered' has a wrong offset!");
static_assert(offsetof(USQEmoteItemWidget, bIsEquipped) == 0x000288, "Member 'USQEmoteItemWidget::bIsEquipped' has a wrong offset!");
static_assert(offsetof(USQEmoteItemWidget, EmotesData) == 0x000290, "Member 'USQEmoteItemWidget::EmotesData' has a wrong offset!");
static_assert(offsetof(USQEmoteItemWidget, ItemIcon) == 0x000298, "Member 'USQEmoteItemWidget::ItemIcon' has a wrong offset!");
static_assert(offsetof(USQEmoteItemWidget, ItemButton) == 0x0002A0, "Member 'USQEmoteItemWidget::ItemButton' has a wrong offset!");

// Class Squad.SQMap
// 0x0090 (0x02F8 - 0x0268)
class USQMap : public USQUserWidget
{
public:
	float                                         PositionUpdateRate;                                // 0x0268(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionUpdateTimer;                               // 0x026C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMapFollowing;                                   // 0x0270(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMapFollowToggle;                                  // 0x0271(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMapFollowPlayerOnByDefault;                       // 0x0272(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_117C[0x1];                                     // 0x0273(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              MapCurrentCoord;                                   // 0x0274(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MapCenterCoord;                                    // 0x027C(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRunCameraPP;                                      // 0x0284(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRunCameraPPForward;                               // 0x0285(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_117D[0x2];                                     // 0x0286(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PPBlendMultiplier;                                 // 0x0288(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PPBlendValue;                                      // 0x028C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PPBlendFarDistance;                                // 0x0290(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MapDrawX;                                          // 0x0294(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MapDrawY;                                          // 0x0298(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MapWidth;                                          // 0x029C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MapHeight;                                         // 0x02A0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WorldTR;                                           // 0x02A4(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WorldBL;                                           // 0x02AC(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MajorGridSpacing;                                  // 0x02B4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MapLastClickPosition;                              // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LastMapZoomPos;                                    // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 MapZoomLevels;                                     // 0x02C8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         ZoomFloatCurrent;                                  // 0x02D8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZoomStep;                                          // 0x02DC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZoomStepMax;                                       // 0x02E0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ZoomStepMin;                                       // 0x02E4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZoomAlpha;                                         // 0x02E8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsZooming;                                        // 0x02EC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMapIsClosing;                                     // 0x02ED(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMapIsOpening;                                     // 0x02EE(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSpawnScreen;                                    // 0x02EF(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMapOn;                                          // 0x02F0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_117E[0x7];                                     // 0x02F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetWorldCoords();
	void UpdateTickZoom(float DeltaTime, struct FVector2D* MapCoords);
	void ZoomSwitch();

	void CalculatePathDistanceAndAngle(const struct FVector2D& PointStart, const struct FVector2D& PointEnd, float* Distance, float* Angle) const;
	int32 GetCurrentTeam() const;
	struct FVector2D GetCursorNormalizedPos() const;
	struct FVector2D GetCursorPos() const;
	float GetMajorGridSpacingInCM() const;
	class FText GetMapDisplayName() const;
	struct FVector2D IsCursorOverMapPos(bool* OutbIsOverMap) const;
	bool IsInCameraMan(class ASQPlayerController* SQPlayerController) const;
	bool IsSquadLeader() const;
	struct FVector2D TranslateInverseMapCoords(const struct FVector2D& InCoords) const;
	struct FVector2D TranslateMapCoords(const struct FVector2D& InCoords) const;
	struct FVector2D TranslateMapCoordsIsInRange(const struct FVector2D& InCoords, bool* OutbIsInRange) const;
	struct FVector2D TranslateMapPathBorderClamp(const struct FVector2D& InCoords, bool* OutbIsClamped) const;
	struct FVector TranslateMapToWorld(const struct FVector2D& InCoords) const;
	struct FVector TranslateMapToWorldRayTrace(const struct FVector2D& InCoords) const;
	struct FVector2D TranslateWorldToMapAnchorsDirect(const struct FVector& InWorldCoords) const;
	struct FVector2D TranslateWorldToMapZoom(const struct FVector& InWorldCoords, bool* OutbIsInRange) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMap">();
	}
	static class USQMap* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMap>();
	}
};
static_assert(alignof(USQMap) == 0x000008, "Wrong alignment on USQMap");
static_assert(sizeof(USQMap) == 0x0002F8, "Wrong size on USQMap");
static_assert(offsetof(USQMap, PositionUpdateRate) == 0x000268, "Member 'USQMap::PositionUpdateRate' has a wrong offset!");
static_assert(offsetof(USQMap, PositionUpdateTimer) == 0x00026C, "Member 'USQMap::PositionUpdateTimer' has a wrong offset!");
static_assert(offsetof(USQMap, bIsMapFollowing) == 0x000270, "Member 'USQMap::bIsMapFollowing' has a wrong offset!");
static_assert(offsetof(USQMap, bMapFollowToggle) == 0x000271, "Member 'USQMap::bMapFollowToggle' has a wrong offset!");
static_assert(offsetof(USQMap, bMapFollowPlayerOnByDefault) == 0x000272, "Member 'USQMap::bMapFollowPlayerOnByDefault' has a wrong offset!");
static_assert(offsetof(USQMap, MapCurrentCoord) == 0x000274, "Member 'USQMap::MapCurrentCoord' has a wrong offset!");
static_assert(offsetof(USQMap, MapCenterCoord) == 0x00027C, "Member 'USQMap::MapCenterCoord' has a wrong offset!");
static_assert(offsetof(USQMap, bRunCameraPP) == 0x000284, "Member 'USQMap::bRunCameraPP' has a wrong offset!");
static_assert(offsetof(USQMap, bRunCameraPPForward) == 0x000285, "Member 'USQMap::bRunCameraPPForward' has a wrong offset!");
static_assert(offsetof(USQMap, PPBlendMultiplier) == 0x000288, "Member 'USQMap::PPBlendMultiplier' has a wrong offset!");
static_assert(offsetof(USQMap, PPBlendValue) == 0x00028C, "Member 'USQMap::PPBlendValue' has a wrong offset!");
static_assert(offsetof(USQMap, PPBlendFarDistance) == 0x000290, "Member 'USQMap::PPBlendFarDistance' has a wrong offset!");
static_assert(offsetof(USQMap, MapDrawX) == 0x000294, "Member 'USQMap::MapDrawX' has a wrong offset!");
static_assert(offsetof(USQMap, MapDrawY) == 0x000298, "Member 'USQMap::MapDrawY' has a wrong offset!");
static_assert(offsetof(USQMap, MapWidth) == 0x00029C, "Member 'USQMap::MapWidth' has a wrong offset!");
static_assert(offsetof(USQMap, MapHeight) == 0x0002A0, "Member 'USQMap::MapHeight' has a wrong offset!");
static_assert(offsetof(USQMap, WorldTR) == 0x0002A4, "Member 'USQMap::WorldTR' has a wrong offset!");
static_assert(offsetof(USQMap, WorldBL) == 0x0002AC, "Member 'USQMap::WorldBL' has a wrong offset!");
static_assert(offsetof(USQMap, MajorGridSpacing) == 0x0002B4, "Member 'USQMap::MajorGridSpacing' has a wrong offset!");
static_assert(offsetof(USQMap, MapLastClickPosition) == 0x0002B8, "Member 'USQMap::MapLastClickPosition' has a wrong offset!");
static_assert(offsetof(USQMap, LastMapZoomPos) == 0x0002C0, "Member 'USQMap::LastMapZoomPos' has a wrong offset!");
static_assert(offsetof(USQMap, MapZoomLevels) == 0x0002C8, "Member 'USQMap::MapZoomLevels' has a wrong offset!");
static_assert(offsetof(USQMap, ZoomFloatCurrent) == 0x0002D8, "Member 'USQMap::ZoomFloatCurrent' has a wrong offset!");
static_assert(offsetof(USQMap, ZoomStep) == 0x0002DC, "Member 'USQMap::ZoomStep' has a wrong offset!");
static_assert(offsetof(USQMap, ZoomStepMax) == 0x0002E0, "Member 'USQMap::ZoomStepMax' has a wrong offset!");
static_assert(offsetof(USQMap, ZoomStepMin) == 0x0002E4, "Member 'USQMap::ZoomStepMin' has a wrong offset!");
static_assert(offsetof(USQMap, ZoomAlpha) == 0x0002E8, "Member 'USQMap::ZoomAlpha' has a wrong offset!");
static_assert(offsetof(USQMap, bIsZooming) == 0x0002EC, "Member 'USQMap::bIsZooming' has a wrong offset!");
static_assert(offsetof(USQMap, bMapIsClosing) == 0x0002ED, "Member 'USQMap::bMapIsClosing' has a wrong offset!");
static_assert(offsetof(USQMap, bMapIsOpening) == 0x0002EE, "Member 'USQMap::bMapIsOpening' has a wrong offset!");
static_assert(offsetof(USQMap, bIsSpawnScreen) == 0x0002EF, "Member 'USQMap::bIsSpawnScreen' has a wrong offset!");
static_assert(offsetof(USQMap, bIsMapOn) == 0x0002F0, "Member 'USQMap::bIsMapOn' has a wrong offset!");

// Class Squad.SQVehicleUIStaticDataAsset
// 0x0020 (0x0050 - 0x0030)
class USQVehicleUIStaticDataAsset : public UDataAsset
{
public:
	class UTexture2D*                             MapIcon;                                           // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MapIconRotation;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1184[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             SideImage;                                         // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             FrontImage;                                        // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleUIStaticDataAsset">();
	}
	static class USQVehicleUIStaticDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleUIStaticDataAsset>();
	}
};
static_assert(alignof(USQVehicleUIStaticDataAsset) == 0x000008, "Wrong alignment on USQVehicleUIStaticDataAsset");
static_assert(sizeof(USQVehicleUIStaticDataAsset) == 0x000050, "Wrong size on USQVehicleUIStaticDataAsset");
static_assert(offsetof(USQVehicleUIStaticDataAsset, MapIcon) == 0x000030, "Member 'USQVehicleUIStaticDataAsset::MapIcon' has a wrong offset!");
static_assert(offsetof(USQVehicleUIStaticDataAsset, MapIconRotation) == 0x000038, "Member 'USQVehicleUIStaticDataAsset::MapIconRotation' has a wrong offset!");
static_assert(offsetof(USQVehicleUIStaticDataAsset, SideImage) == 0x000040, "Member 'USQVehicleUIStaticDataAsset::SideImage' has a wrong offset!");
static_assert(offsetof(USQVehicleUIStaticDataAsset, FrontImage) == 0x000048, "Member 'USQVehicleUIStaticDataAsset::FrontImage' has a wrong offset!");

// Class Squad.SQEmplacementUIStaticDataAsset
// 0x0000 (0x0050 - 0x0050)
class USQEmplacementUIStaticDataAsset final : public USQVehicleUIStaticDataAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEmplacementUIStaticDataAsset">();
	}
	static class USQEmplacementUIStaticDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEmplacementUIStaticDataAsset>();
	}
};
static_assert(alignof(USQEmplacementUIStaticDataAsset) == 0x000008, "Wrong alignment on USQEmplacementUIStaticDataAsset");
static_assert(sizeof(USQEmplacementUIStaticDataAsset) == 0x000050, "Wrong size on USQEmplacementUIStaticDataAsset");

// Class Squad.SQLockButtonWidget
// 0x0000 (0x0268 - 0x0268)
class USQLockButtonWidget final : public USQUserWidget
{
public:
	void OnPressed();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQLockButtonWidget">();
	}
	static class USQLockButtonWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQLockButtonWidget>();
	}
};
static_assert(alignof(USQLockButtonWidget) == 0x000008, "Wrong alignment on USQLockButtonWidget");
static_assert(sizeof(USQLockButtonWidget) == 0x000268, "Wrong size on USQLockButtonWidget");

// Class Squad.SQEnvironmentInteraction
// 0x00E0 (0x0190 - 0x00B0)
class USQEnvironmentInteraction : public UActorComponent
{
public:
	struct FBiomeTextures                         BiomeTextures;                                     // 0x00B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         UpdatePeriod;                                      // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerForceUpdatePeriod;                           // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CosmeticUpdatePeriod;                              // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundTraceDistance;                               // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EPhysicalSurface, float>                 SurfaceBlendMap;                                   // 0x00D8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         CurrentFrontBlend;                                 // 0x0128(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentBottomBlend;                                // 0x012C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeForMaxEffect;                                  // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectMax;                                         // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BottomRep;                                         // 0x0138(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FrontRep;                                          // 0x0139(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EExclusionMode                                MeshSetupMode;                                     // 0x013A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1185[0x5];                                     // 0x013B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMeshComponent*>                 ExclusionMeshes;                                   // 0x0140(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EExclusionMode                                MaterialSetupMode;                                 // 0x0150(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1186[0x7];                                     // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             ExclusionMaterials;                                // 0x0158(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTimerHandle                           UpdateTimer;                                       // 0x0168(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           ServerForceUpdateTimer;                            // 0x0170(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           CosmeticUpdateTimer;                               // 0x0178(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UMaterialInstanceDynamic*>       MIDs;                                              // 0x0180(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	bool ApplyFrontProjection();
	bool AreBiomeParamsValid();
	float ByteToFloat(uint8 Input);
	bool CanTrace();
	void CosmeticUpdate();
	void CreateMIDs();
	uint8 FloatToByte(float Input);
	bool Initialize();
	void OnRep_BottomRep();
	void OnRep_FrontRep();
	void PassBiomeParamsToMIDs();
	void PauseUpdates();
	void ServerForceUpdate();
	void StartUpdates();
	void Update();
	void UpdateShaderValues(float NewStrength, bool IsFront);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEnvironmentInteraction">();
	}
	static class USQEnvironmentInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEnvironmentInteraction>();
	}
};
static_assert(alignof(USQEnvironmentInteraction) == 0x000008, "Wrong alignment on USQEnvironmentInteraction");
static_assert(sizeof(USQEnvironmentInteraction) == 0x000190, "Wrong size on USQEnvironmentInteraction");
static_assert(offsetof(USQEnvironmentInteraction, BiomeTextures) == 0x0000B0, "Member 'USQEnvironmentInteraction::BiomeTextures' has a wrong offset!");
static_assert(offsetof(USQEnvironmentInteraction, UpdatePeriod) == 0x0000C8, "Member 'USQEnvironmentInteraction::UpdatePeriod' has a wrong offset!");
static_assert(offsetof(USQEnvironmentInteraction, ServerForceUpdatePeriod) == 0x0000CC, "Member 'USQEnvironmentInteraction::ServerForceUpdatePeriod' has a wrong offset!");
static_assert(offsetof(USQEnvironmentInteraction, CosmeticUpdatePeriod) == 0x0000D0, "Member 'USQEnvironmentInteraction::CosmeticUpdatePeriod' has a wrong offset!");
static_assert(offsetof(USQEnvironmentInteraction, GroundTraceDistance) == 0x0000D4, "Member 'USQEnvironmentInteraction::GroundTraceDistance' has a wrong offset!");
static_assert(offsetof(USQEnvironmentInteraction, SurfaceBlendMap) == 0x0000D8, "Member 'USQEnvironmentInteraction::SurfaceBlendMap' has a wrong offset!");
static_assert(offsetof(USQEnvironmentInteraction, CurrentFrontBlend) == 0x000128, "Member 'USQEnvironmentInteraction::CurrentFrontBlend' has a wrong offset!");
static_assert(offsetof(USQEnvironmentInteraction, CurrentBottomBlend) == 0x00012C, "Member 'USQEnvironmentInteraction::CurrentBottomBlend' has a wrong offset!");
static_assert(offsetof(USQEnvironmentInteraction, TimeForMaxEffect) == 0x000130, "Member 'USQEnvironmentInteraction::TimeForMaxEffect' has a wrong offset!");
static_assert(offsetof(USQEnvironmentInteraction, EffectMax) == 0x000134, "Member 'USQEnvironmentInteraction::EffectMax' has a wrong offset!");
static_assert(offsetof(USQEnvironmentInteraction, BottomRep) == 0x000138, "Member 'USQEnvironmentInteraction::BottomRep' has a wrong offset!");
static_assert(offsetof(USQEnvironmentInteraction, FrontRep) == 0x000139, "Member 'USQEnvironmentInteraction::FrontRep' has a wrong offset!");
static_assert(offsetof(USQEnvironmentInteraction, MeshSetupMode) == 0x00013A, "Member 'USQEnvironmentInteraction::MeshSetupMode' has a wrong offset!");
static_assert(offsetof(USQEnvironmentInteraction, ExclusionMeshes) == 0x000140, "Member 'USQEnvironmentInteraction::ExclusionMeshes' has a wrong offset!");
static_assert(offsetof(USQEnvironmentInteraction, MaterialSetupMode) == 0x000150, "Member 'USQEnvironmentInteraction::MaterialSetupMode' has a wrong offset!");
static_assert(offsetof(USQEnvironmentInteraction, ExclusionMaterials) == 0x000158, "Member 'USQEnvironmentInteraction::ExclusionMaterials' has a wrong offset!");
static_assert(offsetof(USQEnvironmentInteraction, UpdateTimer) == 0x000168, "Member 'USQEnvironmentInteraction::UpdateTimer' has a wrong offset!");
static_assert(offsetof(USQEnvironmentInteraction, ServerForceUpdateTimer) == 0x000170, "Member 'USQEnvironmentInteraction::ServerForceUpdateTimer' has a wrong offset!");
static_assert(offsetof(USQEnvironmentInteraction, CosmeticUpdateTimer) == 0x000178, "Member 'USQEnvironmentInteraction::CosmeticUpdateTimer' has a wrong offset!");
static_assert(offsetof(USQEnvironmentInteraction, MIDs) == 0x000180, "Member 'USQEnvironmentInteraction::MIDs' has a wrong offset!");

// Class Squad.SQMapMK2
// 0x0030 (0x0328 - 0x02F8)
class USQMapMK2 final : public USQMap
{
public:
	class USQGridMarkerBase*                      TopGrid;                                           // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQGridMarkerBase*                      BottomGrid;                                        // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQGridMarkerBase*                      LeftGrid;                                          // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQGridMarkerBase*                      RightGrid;                                         // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanel*                           MapCanvas;                                         // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanel*                           RootMapPanel;                                      // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void MapCalculateOffsets();
	void MapFollowPlayer();
	void UpdateDrawOffsets();
	void UpdatePosition(const struct FVector2D& NewMapCoord);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapMK2">();
	}
	static class USQMapMK2* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapMK2>();
	}
};
static_assert(alignof(USQMapMK2) == 0x000008, "Wrong alignment on USQMapMK2");
static_assert(sizeof(USQMapMK2) == 0x000328, "Wrong size on USQMapMK2");
static_assert(offsetof(USQMapMK2, TopGrid) == 0x0002F8, "Member 'USQMapMK2::TopGrid' has a wrong offset!");
static_assert(offsetof(USQMapMK2, BottomGrid) == 0x000300, "Member 'USQMapMK2::BottomGrid' has a wrong offset!");
static_assert(offsetof(USQMapMK2, LeftGrid) == 0x000308, "Member 'USQMapMK2::LeftGrid' has a wrong offset!");
static_assert(offsetof(USQMapMK2, RightGrid) == 0x000310, "Member 'USQMapMK2::RightGrid' has a wrong offset!");
static_assert(offsetof(USQMapMK2, MapCanvas) == 0x000318, "Member 'USQMapMK2::MapCanvas' has a wrong offset!");
static_assert(offsetof(USQMapMK2, RootMapPanel) == 0x000320, "Member 'USQMapMK2::RootMapPanel' has a wrong offset!");

// Class Squad.SQFaction
// 0x0010 (0x0080 - 0x0070)
class USQFaction : public USQPrimaryData
{
public:
	TArray<class USQFactionSetup*>                AvailableSetups;                                   // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)

public:
	bool TryGetFactionShortName(class FText* OutName) const;
	bool TryGetFlagForFullScreen(TSoftObjectPtr<class UTexture2D>* OutTexture) const;
	bool TryGetFlagForMap(TSoftObjectPtr<class UTexture2D>* OutTexture) const;
	bool TryGetRallyPointMesh(class USQLayer* Layer, TSoftObjectPtr<class UStaticMesh>* OutMesh) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQFaction">();
	}
	static class USQFaction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQFaction>();
	}
};
static_assert(alignof(USQFaction) == 0x000008, "Wrong alignment on USQFaction");
static_assert(sizeof(USQFaction) == 0x000080, "Wrong size on USQFaction");
static_assert(offsetof(USQFaction, AvailableSetups) == 0x000070, "Member 'USQFaction::AvailableSetups' has a wrong offset!");

// Class Squad.SQFactionItemWidget
// 0x0050 (0x02B0 - 0x0260)
class USQFactionItemWidget : public UUserWidget
{
public:
	uint8                                         Pad_118E[0x8];                                     // 0x0260(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSelected;                                        // 0x0268(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnHovered;                                         // 0x0278(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UImage*                                 FactionIcon;                                       // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             FactionDisplayName;                                // 0x0290(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UButton*                                ItemButton;                                        // 0x0298(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             FactionDataTable;                                  // 0x02A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FactionName;                                       // 0x02A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQFactionItemWidget">();
	}
	static class USQFactionItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQFactionItemWidget>();
	}
};
static_assert(alignof(USQFactionItemWidget) == 0x000008, "Wrong alignment on USQFactionItemWidget");
static_assert(sizeof(USQFactionItemWidget) == 0x0002B0, "Wrong size on USQFactionItemWidget");
static_assert(offsetof(USQFactionItemWidget, OnSelected) == 0x000268, "Member 'USQFactionItemWidget::OnSelected' has a wrong offset!");
static_assert(offsetof(USQFactionItemWidget, OnHovered) == 0x000278, "Member 'USQFactionItemWidget::OnHovered' has a wrong offset!");
static_assert(offsetof(USQFactionItemWidget, FactionIcon) == 0x000288, "Member 'USQFactionItemWidget::FactionIcon' has a wrong offset!");
static_assert(offsetof(USQFactionItemWidget, FactionDisplayName) == 0x000290, "Member 'USQFactionItemWidget::FactionDisplayName' has a wrong offset!");
static_assert(offsetof(USQFactionItemWidget, ItemButton) == 0x000298, "Member 'USQFactionItemWidget::ItemButton' has a wrong offset!");
static_assert(offsetof(USQFactionItemWidget, FactionDataTable) == 0x0002A0, "Member 'USQFactionItemWidget::FactionDataTable' has a wrong offset!");
static_assert(offsetof(USQFactionItemWidget, FactionName) == 0x0002A8, "Member 'USQFactionItemWidget::FactionName' has a wrong offset!");

// Class Squad.SQTeamActor
// 0x0010 (0x0238 - 0x0228)
class ASQTeamActor : public AActor
{
public:
	uint8                                         Pad_118F[0x8];                                     // 0x0228(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	ESQTeam                                       Team;                                              // 0x0230(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1190[0x7];                                     // 0x0231(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_Team();
	void SetTeam(ESQTeam Param_Team);

	ESQTeam GetTeam() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQTeamActor">();
	}
	static class ASQTeamActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQTeamActor>();
	}
};
static_assert(alignof(ASQTeamActor) == 0x000008, "Wrong alignment on ASQTeamActor");
static_assert(sizeof(ASQTeamActor) == 0x000238, "Wrong size on ASQTeamActor");
static_assert(offsetof(ASQTeamActor, Team) == 0x000230, "Member 'ASQTeamActor::Team' has a wrong offset!");

// Class Squad.SQFactionSetup
// 0x00A0 (0x0110 - 0x0070)
class USQFactionSetup : public USQPrimaryData
{
public:
	class FName                                   FactionID;                                         // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQFaction*                             OuterFaction;                                      // 0x0078(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoInjectIntoLayers;                             // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideDefaults;                                 // 0x0081(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1191[0x6];                                     // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           GameModesList;                                     // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bGameModeListInclusion;                            // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1192[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQRoleSettings*                        DefaultRole;                                       // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQRoleSettings*                        DefaultSquadLeaderRole;                            // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQRoleSettings*                        LeaveSquadRole;                                    // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             CharacteristicsTable;                              // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDataTableRowHandle>            Characteristics;                                   // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class USQAvailability_Role*>           Roles;                                             // 0x00D0(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class USQAvailability_Deployable*>     Deployables;                                       // 0x00E0(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class USQAvailability_Vehicle*>        Vehicles;                                          // 0x00F0(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class USQAvailability_Action*>         Actions;                                           // 0x0100(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	bool CanPlayAgainst(const class USQFactionSetup* OtherFaction) const;
	class FName GetFactionTypeName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQFactionSetup">();
	}
	static class USQFactionSetup* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQFactionSetup>();
	}
};
static_assert(alignof(USQFactionSetup) == 0x000008, "Wrong alignment on USQFactionSetup");
static_assert(sizeof(USQFactionSetup) == 0x000110, "Wrong size on USQFactionSetup");
static_assert(offsetof(USQFactionSetup, FactionID) == 0x000070, "Member 'USQFactionSetup::FactionID' has a wrong offset!");
static_assert(offsetof(USQFactionSetup, OuterFaction) == 0x000078, "Member 'USQFactionSetup::OuterFaction' has a wrong offset!");
static_assert(offsetof(USQFactionSetup, bAutoInjectIntoLayers) == 0x000080, "Member 'USQFactionSetup::bAutoInjectIntoLayers' has a wrong offset!");
static_assert(offsetof(USQFactionSetup, bOverrideDefaults) == 0x000081, "Member 'USQFactionSetup::bOverrideDefaults' has a wrong offset!");
static_assert(offsetof(USQFactionSetup, GameModesList) == 0x000088, "Member 'USQFactionSetup::GameModesList' has a wrong offset!");
static_assert(offsetof(USQFactionSetup, bGameModeListInclusion) == 0x000098, "Member 'USQFactionSetup::bGameModeListInclusion' has a wrong offset!");
static_assert(offsetof(USQFactionSetup, DefaultRole) == 0x0000A0, "Member 'USQFactionSetup::DefaultRole' has a wrong offset!");
static_assert(offsetof(USQFactionSetup, DefaultSquadLeaderRole) == 0x0000A8, "Member 'USQFactionSetup::DefaultSquadLeaderRole' has a wrong offset!");
static_assert(offsetof(USQFactionSetup, LeaveSquadRole) == 0x0000B0, "Member 'USQFactionSetup::LeaveSquadRole' has a wrong offset!");
static_assert(offsetof(USQFactionSetup, CharacteristicsTable) == 0x0000B8, "Member 'USQFactionSetup::CharacteristicsTable' has a wrong offset!");
static_assert(offsetof(USQFactionSetup, Characteristics) == 0x0000C0, "Member 'USQFactionSetup::Characteristics' has a wrong offset!");
static_assert(offsetof(USQFactionSetup, Roles) == 0x0000D0, "Member 'USQFactionSetup::Roles' has a wrong offset!");
static_assert(offsetof(USQFactionSetup, Deployables) == 0x0000E0, "Member 'USQFactionSetup::Deployables' has a wrong offset!");
static_assert(offsetof(USQFactionSetup, Vehicles) == 0x0000F0, "Member 'USQFactionSetup::Vehicles' has a wrong offset!");
static_assert(offsetof(USQFactionSetup, Actions) == 0x000100, "Member 'USQFactionSetup::Actions' has a wrong offset!");

// Class Squad.SQHealingEquipableItem
// 0x0030 (0x04A8 - 0x0478)
class ASQHealingEquipableItem : public ASQEquipableItem
{
public:
	float                                         TraceLength;                                       // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceSphereRadius;                                 // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDurationForCancel;                              // 0x0480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ErrorMessageColor;                                 // 0x0484(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ErrorMessageLifetime;                              // 0x0488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1194[0x4];                                     // 0x048C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQSoldier*                             HealedTarget;                                      // 0x0490(0x0008)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioComponent*                        HealthAudioComponent;                              // 0x0498(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1195[0x8];                                     // 0x04A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_HealedTarget(class ASQSoldier* PreviousHealedTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQHealingEquipableItem">();
	}
	static class ASQHealingEquipableItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQHealingEquipableItem>();
	}
};
static_assert(alignof(ASQHealingEquipableItem) == 0x000008, "Wrong alignment on ASQHealingEquipableItem");
static_assert(sizeof(ASQHealingEquipableItem) == 0x0004A8, "Wrong size on ASQHealingEquipableItem");
static_assert(offsetof(ASQHealingEquipableItem, TraceLength) == 0x000478, "Member 'ASQHealingEquipableItem::TraceLength' has a wrong offset!");
static_assert(offsetof(ASQHealingEquipableItem, TraceSphereRadius) == 0x00047C, "Member 'ASQHealingEquipableItem::TraceSphereRadius' has a wrong offset!");
static_assert(offsetof(ASQHealingEquipableItem, MaxDurationForCancel) == 0x000480, "Member 'ASQHealingEquipableItem::MaxDurationForCancel' has a wrong offset!");
static_assert(offsetof(ASQHealingEquipableItem, ErrorMessageColor) == 0x000484, "Member 'ASQHealingEquipableItem::ErrorMessageColor' has a wrong offset!");
static_assert(offsetof(ASQHealingEquipableItem, ErrorMessageLifetime) == 0x000488, "Member 'ASQHealingEquipableItem::ErrorMessageLifetime' has a wrong offset!");
static_assert(offsetof(ASQHealingEquipableItem, HealedTarget) == 0x000490, "Member 'ASQHealingEquipableItem::HealedTarget' has a wrong offset!");
static_assert(offsetof(ASQHealingEquipableItem, HealthAudioComponent) == 0x000498, "Member 'ASQHealingEquipableItem::HealthAudioComponent' has a wrong offset!");

// Class Squad.SQMapBoundary
// 0x0060 (0x0348 - 0x02E8)
class ASQMapBoundary final : public ASQBoundary
{
public:
	class USQMapBoundarySettings*                 CommonSettings;                                    // 0x02E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideDefaultKillTime;                          // 0x02F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1196[0x3];                                     // 0x02F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultKillTime;                                   // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<TSubclassOf<class UObject>, float>       ClassKillTimes;                                    // 0x02F8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	float CalcKillTimestamp(const TSubclassOf<class UObject>& Param_Class);
	float FindKillTime(const TSubclassOf<class UObject>& Param_Class);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapBoundary">();
	}
	static class ASQMapBoundary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQMapBoundary>();
	}
};
static_assert(alignof(ASQMapBoundary) == 0x000008, "Wrong alignment on ASQMapBoundary");
static_assert(sizeof(ASQMapBoundary) == 0x000348, "Wrong size on ASQMapBoundary");
static_assert(offsetof(ASQMapBoundary, CommonSettings) == 0x0002E8, "Member 'ASQMapBoundary::CommonSettings' has a wrong offset!");
static_assert(offsetof(ASQMapBoundary, bOverrideDefaultKillTime) == 0x0002F0, "Member 'ASQMapBoundary::bOverrideDefaultKillTime' has a wrong offset!");
static_assert(offsetof(ASQMapBoundary, DefaultKillTime) == 0x0002F4, "Member 'ASQMapBoundary::DefaultKillTime' has a wrong offset!");
static_assert(offsetof(ASQMapBoundary, ClassKillTimes) == 0x0002F8, "Member 'ASQMapBoundary::ClassKillTimes' has a wrong offset!");

// Class Squad.SQFieldDressing
// 0x0090 (0x0538 - 0x04A8)
class ASQFieldDressing : public ASQHealingEquipableItem
{
public:
	bool                                          bWasHealingSelf;                                   // 0x04A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bWasRevivingOther;                                 // 0x04A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1199[0x6];                                     // 0x04AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerHandle;                                       // 0x04B0(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USQFieldDressingStaticInfo*             FieldDressingStaticInfo;                           // 0x04B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimMontage*                           SelectedSoldier1pMontage;                          // 0x04C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimMontage*                           SelectedSoldier3pMontage;                          // 0x04C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimMontage*                           SelectedWeaponMontage;                             // 0x04D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_119A[0x60];                                    // 0x04D8(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Revive();
	void StopBleeding();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQFieldDressing">();
	}
	static class ASQFieldDressing* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQFieldDressing>();
	}
};
static_assert(alignof(ASQFieldDressing) == 0x000008, "Wrong alignment on ASQFieldDressing");
static_assert(sizeof(ASQFieldDressing) == 0x000538, "Wrong size on ASQFieldDressing");
static_assert(offsetof(ASQFieldDressing, bWasHealingSelf) == 0x0004A8, "Member 'ASQFieldDressing::bWasHealingSelf' has a wrong offset!");
static_assert(offsetof(ASQFieldDressing, bWasRevivingOther) == 0x0004A9, "Member 'ASQFieldDressing::bWasRevivingOther' has a wrong offset!");
static_assert(offsetof(ASQFieldDressing, TimerHandle) == 0x0004B0, "Member 'ASQFieldDressing::TimerHandle' has a wrong offset!");
static_assert(offsetof(ASQFieldDressing, FieldDressingStaticInfo) == 0x0004B8, "Member 'ASQFieldDressing::FieldDressingStaticInfo' has a wrong offset!");
static_assert(offsetof(ASQFieldDressing, SelectedSoldier1pMontage) == 0x0004C0, "Member 'ASQFieldDressing::SelectedSoldier1pMontage' has a wrong offset!");
static_assert(offsetof(ASQFieldDressing, SelectedSoldier3pMontage) == 0x0004C8, "Member 'ASQFieldDressing::SelectedSoldier3pMontage' has a wrong offset!");
static_assert(offsetof(ASQFieldDressing, SelectedWeaponMontage) == 0x0004D0, "Member 'ASQFieldDressing::SelectedWeaponMontage' has a wrong offset!");

// Class Squad.SQWeapon_Effects
// 0x02D0 (0x0B60 - 0x0890)
#pragma pack(push, 0x1)
class alignas(0x10) ASQWeapon_Effects : public ASQWeapon
{
public:
	struct FSQWeaponSounds                        WeaponSounds;                                      // 0x0888(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQWeaponAnims                         WeaponAnimations;                                  // 0x0910(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQRecoilData                          RecoilData;                                        // 0x0958(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQWeaponEffects                       WeaponEffects;                                     // 0x09A0(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQWeaponSpring                        WeaponSpringConfig;                                // 0x0A18(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_119B[0x4];                                     // 0x0A3C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            RecoilCurve;                                       // 0x0A40(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WeaponOffset;                                      // 0x0A48(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SightsViewOffset;                                  // 0x0A54(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119C[0xF8];                                    // 0x0A60(0x00F8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InterpRecoil(float Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQWeapon_Effects">();
	}
	static class ASQWeapon_Effects* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQWeapon_Effects>();
	}
};
#pragma pack(pop)
static_assert(alignof(ASQWeapon_Effects) == 0x000010, "Wrong alignment on ASQWeapon_Effects");
static_assert(sizeof(ASQWeapon_Effects) == 0x000B60, "Wrong size on ASQWeapon_Effects");
static_assert(offsetof(ASQWeapon_Effects, WeaponSounds) == 0x000888, "Member 'ASQWeapon_Effects::WeaponSounds' has a wrong offset!");
static_assert(offsetof(ASQWeapon_Effects, WeaponAnimations) == 0x000910, "Member 'ASQWeapon_Effects::WeaponAnimations' has a wrong offset!");
static_assert(offsetof(ASQWeapon_Effects, RecoilData) == 0x000958, "Member 'ASQWeapon_Effects::RecoilData' has a wrong offset!");
static_assert(offsetof(ASQWeapon_Effects, WeaponEffects) == 0x0009A0, "Member 'ASQWeapon_Effects::WeaponEffects' has a wrong offset!");
static_assert(offsetof(ASQWeapon_Effects, WeaponSpringConfig) == 0x000A18, "Member 'ASQWeapon_Effects::WeaponSpringConfig' has a wrong offset!");
static_assert(offsetof(ASQWeapon_Effects, RecoilCurve) == 0x000A40, "Member 'ASQWeapon_Effects::RecoilCurve' has a wrong offset!");
static_assert(offsetof(ASQWeapon_Effects, WeaponOffset) == 0x000A48, "Member 'ASQWeapon_Effects::WeaponOffset' has a wrong offset!");
static_assert(offsetof(ASQWeapon_Effects, SightsViewOffset) == 0x000A54, "Member 'ASQWeapon_Effects::SightsViewOffset' has a wrong offset!");

// Class Squad.SQVehicleWeapon
// 0x0040 (0x0BA0 - 0x0B60)
class ASQVehicleWeapon : public ASQWeapon_Effects
{
public:
	bool                                          bIsOverheated;                                     // 0x0B58(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSharedWeapon;                                   // 0x0B59(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInputEnabled;                                     // 0x0B5A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119D[0xD];                                     // 0x0B5B(0x000D)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQVehicleRecoil>               RecoilFactor;                                      // 0x0B68(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bReturnToPitchOriginOnReload;                      // 0x0B78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReturnToYawOriginOnReload;                        // 0x0B79(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119E[0x2];                                     // 0x0B7A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SecondsToReturnToOriginOnReload;                   // 0x0B7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReloadDirectlyFromFob;                            // 0x0B80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119F[0x2];                                     // 0x0B81(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIgnoreCameraChange;                               // 0x0B83(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableTrueFpCamera;                               // 0x0B84(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A0[0x17];                                    // 0x0B85(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bStartWithNoAmmo;                                  // 0x0B9C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_11A1[0x3];                                     // 0x0B9D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SoldierEntersVehicle(class ASQSoldier* Soldier);
	void SoldierLeavesVehicle(class ASQSoldier* Soldier);

	class ASQVehicleSeat* GetOwnerSeat() const;
	class ASQSoldier* GetSoldier() const;
	struct FRotator GetWeaponRotation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleWeapon">();
	}
	static class ASQVehicleWeapon* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQVehicleWeapon>();
	}
};
static_assert(alignof(ASQVehicleWeapon) == 0x000010, "Wrong alignment on ASQVehicleWeapon");
static_assert(sizeof(ASQVehicleWeapon) == 0x000BA0, "Wrong size on ASQVehicleWeapon");
static_assert(offsetof(ASQVehicleWeapon, bIsOverheated) == 0x000B58, "Member 'ASQVehicleWeapon::bIsOverheated' has a wrong offset!");
static_assert(offsetof(ASQVehicleWeapon, bIsSharedWeapon) == 0x000B59, "Member 'ASQVehicleWeapon::bIsSharedWeapon' has a wrong offset!");
static_assert(offsetof(ASQVehicleWeapon, bInputEnabled) == 0x000B5A, "Member 'ASQVehicleWeapon::bInputEnabled' has a wrong offset!");
static_assert(offsetof(ASQVehicleWeapon, RecoilFactor) == 0x000B68, "Member 'ASQVehicleWeapon::RecoilFactor' has a wrong offset!");
static_assert(offsetof(ASQVehicleWeapon, bReturnToPitchOriginOnReload) == 0x000B78, "Member 'ASQVehicleWeapon::bReturnToPitchOriginOnReload' has a wrong offset!");
static_assert(offsetof(ASQVehicleWeapon, bReturnToYawOriginOnReload) == 0x000B79, "Member 'ASQVehicleWeapon::bReturnToYawOriginOnReload' has a wrong offset!");
static_assert(offsetof(ASQVehicleWeapon, SecondsToReturnToOriginOnReload) == 0x000B7C, "Member 'ASQVehicleWeapon::SecondsToReturnToOriginOnReload' has a wrong offset!");
static_assert(offsetof(ASQVehicleWeapon, bReloadDirectlyFromFob) == 0x000B80, "Member 'ASQVehicleWeapon::bReloadDirectlyFromFob' has a wrong offset!");
static_assert(offsetof(ASQVehicleWeapon, bIgnoreCameraChange) == 0x000B83, "Member 'ASQVehicleWeapon::bIgnoreCameraChange' has a wrong offset!");
static_assert(offsetof(ASQVehicleWeapon, bEnableTrueFpCamera) == 0x000B84, "Member 'ASQVehicleWeapon::bEnableTrueFpCamera' has a wrong offset!");
static_assert(offsetof(ASQVehicleWeapon, bStartWithNoAmmo) == 0x000B9C, "Member 'ASQVehicleWeapon::bStartWithNoAmmo' has a wrong offset!");

// Class Squad.SQVehicleSmokeGenerator
// 0x0060 (0x0C00 - 0x0BA0)
class ASQVehicleSmokeGenerator : public ASQVehicleWeapon
{
public:
	class UAudioComponent*                        SmokeGeneratorSound;                               // 0x0BA0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASQGroundVehicle*                       VehicleRef;                                        // 0x0BA8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UParticleSystemComponent*>       SmokeGenerators;                                   // 0x0BB0(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UNiagaraComponent*>              NiagaraSmokeGenerators;                            // 0x0BC0(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class ASQLastingEffect*>               LastingSmokeGenerators;                            // 0x0BD0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class USoundBase*                             LoopingSmokeGenSound;                              // 0x0BE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FadeInDuration;                                    // 0x0BE8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FadeoutDuration;                                   // 0x0BEC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundBase*                             EndUseSound;                                       // 0x0BF0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bServerSmokeActive;                                // 0x0BF8(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11A2[0x7];                                     // 0x0BF9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void MulticastActivate();
	void MulticastDeactivate();
	void ServerStopGenerator();
	void ServerUseGenerator();
	void SetupParticleSystem(class AActor* OwnerActor);
	void SpawnSmokeStart();
	void SpawnSmokeStop();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleSmokeGenerator">();
	}
	static class ASQVehicleSmokeGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQVehicleSmokeGenerator>();
	}
};
static_assert(alignof(ASQVehicleSmokeGenerator) == 0x000010, "Wrong alignment on ASQVehicleSmokeGenerator");
static_assert(sizeof(ASQVehicleSmokeGenerator) == 0x000C00, "Wrong size on ASQVehicleSmokeGenerator");
static_assert(offsetof(ASQVehicleSmokeGenerator, SmokeGeneratorSound) == 0x000BA0, "Member 'ASQVehicleSmokeGenerator::SmokeGeneratorSound' has a wrong offset!");
static_assert(offsetof(ASQVehicleSmokeGenerator, VehicleRef) == 0x000BA8, "Member 'ASQVehicleSmokeGenerator::VehicleRef' has a wrong offset!");
static_assert(offsetof(ASQVehicleSmokeGenerator, SmokeGenerators) == 0x000BB0, "Member 'ASQVehicleSmokeGenerator::SmokeGenerators' has a wrong offset!");
static_assert(offsetof(ASQVehicleSmokeGenerator, NiagaraSmokeGenerators) == 0x000BC0, "Member 'ASQVehicleSmokeGenerator::NiagaraSmokeGenerators' has a wrong offset!");
static_assert(offsetof(ASQVehicleSmokeGenerator, LastingSmokeGenerators) == 0x000BD0, "Member 'ASQVehicleSmokeGenerator::LastingSmokeGenerators' has a wrong offset!");
static_assert(offsetof(ASQVehicleSmokeGenerator, LoopingSmokeGenSound) == 0x000BE0, "Member 'ASQVehicleSmokeGenerator::LoopingSmokeGenSound' has a wrong offset!");
static_assert(offsetof(ASQVehicleSmokeGenerator, FadeInDuration) == 0x000BE8, "Member 'ASQVehicleSmokeGenerator::FadeInDuration' has a wrong offset!");
static_assert(offsetof(ASQVehicleSmokeGenerator, FadeoutDuration) == 0x000BEC, "Member 'ASQVehicleSmokeGenerator::FadeoutDuration' has a wrong offset!");
static_assert(offsetof(ASQVehicleSmokeGenerator, EndUseSound) == 0x000BF0, "Member 'ASQVehicleSmokeGenerator::EndUseSound' has a wrong offset!");
static_assert(offsetof(ASQVehicleSmokeGenerator, bServerSmokeActive) == 0x000BF8, "Member 'ASQVehicleSmokeGenerator::bServerSmokeActive' has a wrong offset!");

// Class Squad.SQFindFriendsCallbackProxy
// 0x0030 (0x0060 - 0x0030)
class USQFindFriendsCallbackProxy final : public UOnlineBlueprintCallProxyBase
{
public:
	uint8                                         Pad_11A3[0x28];                                    // 0x0030(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      PlayerController;                                  // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQFindFriendsCallbackProxy">();
	}
	static class USQFindFriendsCallbackProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQFindFriendsCallbackProxy>();
	}
};
static_assert(alignof(USQFindFriendsCallbackProxy) == 0x000008, "Wrong alignment on USQFindFriendsCallbackProxy");
static_assert(sizeof(USQFindFriendsCallbackProxy) == 0x000060, "Wrong size on USQFindFriendsCallbackProxy");
static_assert(offsetof(USQFindFriendsCallbackProxy, PlayerController) == 0x000058, "Member 'USQFindFriendsCallbackProxy::PlayerController' has a wrong offset!");

// Class Squad.SQFindSessionsCallbackProxy
// 0x00E0 (0x0110 - 0x0030)
class USQFindSessionsCallbackProxy final : public UOnlineBlueprintCallProxyBase
{
public:
	uint8                                         Pad_11A4[0x30];                                    // 0x0030(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BackendPingOverhead;                               // 0x0060(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PingNumRetries;                                    // 0x0064(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PingTimeout;                                       // 0x0068(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A5[0x74];                                    // 0x006C(0x0074)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                WorldContextObject;                                // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USQServerTagManager*                    TagManager;                                        // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FBlueprintSessionResult>        PendingResults;                                    // 0x00F0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FBlueprintSessionResult>        ResolvedResults;                                   // 0x0100(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static bool GetAnticheatProtected(const struct FBlueprintSessionResult& Result);
	static int32 GetCurrentPlayers(const struct FBlueprintSessionResult& Result);
	static class FString GetGameMode(const struct FBlueprintSessionResult& Result);
	static class FString GetGameVersion(const struct FBlueprintSessionResult& Result);
	static bool GetLicensedServer(class UObject* Param_WorldContextObject, const struct FBlueprintSessionResult& Result);
	static class FString GetLicenseID(const struct FBlueprintSessionResult& Result);
	static class FString GetMapName(const struct FBlueprintSessionResult& Result);
	static int32 GetMatchTimeout(const struct FBlueprintSessionResult& Result);
	static int32 GetMaxPlayers(const struct FBlueprintSessionResult& Result);
	static bool GetPasswordProtected(const struct FBlueprintSessionResult& Result);
	static int32 GetPingInMs(const struct FBlueprintSessionResult& Result);
	static int32 GetReservedSlots(const struct FBlueprintSessionResult& Result);
	static class FString GetSearchKeywords(const struct FBlueprintSessionResult& Result);
	static class FString GetServerName(const struct FBlueprintSessionResult& Result);
	static struct FSQSessionFlagStruct GetSessionFlagStruct(const struct FBlueprintSessionResult& Result);
	static bool IsSameServer(const struct FBlueprintSessionResult& ResultA, const struct FBlueprintSessionResult& ResultB);

	void OnServerPingResponse(const struct FBlueprintSessionResult& SessionResult, float Ping);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQFindSessionsCallbackProxy">();
	}
	static class USQFindSessionsCallbackProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQFindSessionsCallbackProxy>();
	}
};
static_assert(alignof(USQFindSessionsCallbackProxy) == 0x000008, "Wrong alignment on USQFindSessionsCallbackProxy");
static_assert(sizeof(USQFindSessionsCallbackProxy) == 0x000110, "Wrong size on USQFindSessionsCallbackProxy");
static_assert(offsetof(USQFindSessionsCallbackProxy, BackendPingOverhead) == 0x000060, "Member 'USQFindSessionsCallbackProxy::BackendPingOverhead' has a wrong offset!");
static_assert(offsetof(USQFindSessionsCallbackProxy, PingNumRetries) == 0x000064, "Member 'USQFindSessionsCallbackProxy::PingNumRetries' has a wrong offset!");
static_assert(offsetof(USQFindSessionsCallbackProxy, PingTimeout) == 0x000068, "Member 'USQFindSessionsCallbackProxy::PingTimeout' has a wrong offset!");
static_assert(offsetof(USQFindSessionsCallbackProxy, WorldContextObject) == 0x0000E0, "Member 'USQFindSessionsCallbackProxy::WorldContextObject' has a wrong offset!");
static_assert(offsetof(USQFindSessionsCallbackProxy, TagManager) == 0x0000E8, "Member 'USQFindSessionsCallbackProxy::TagManager' has a wrong offset!");
static_assert(offsetof(USQFindSessionsCallbackProxy, PendingResults) == 0x0000F0, "Member 'USQFindSessionsCallbackProxy::PendingResults' has a wrong offset!");
static_assert(offsetof(USQFindSessionsCallbackProxy, ResolvedResults) == 0x000100, "Member 'USQFindSessionsCallbackProxy::ResolvedResults' has a wrong offset!");

// Class Squad.SQFlagScoringRuleset
// 0x0058 (0x02B0 - 0x0258)
class ASQFlagScoringRuleset : public ASQGameRuleSet
{
public:
	float                                         RateOfScoreTick;                                   // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQFlagScoreInfo                       TeamOneFlagScores;                                 // 0x025C(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQFlagScoreInfo                       TeamTwoFlagScores;                                 // 0x0278(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11B0[0x4];                                     // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USQCaptureZoneComponent*>        CaptureZones;                                      // 0x0298(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_11B1[0x8];                                     // 0x02A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnFlagStateChange(class USQCaptureZoneComponent* CaptureZone, uint8 Team);
	void OnFlagTick();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQFlagScoringRuleset">();
	}
	static class ASQFlagScoringRuleset* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQFlagScoringRuleset>();
	}
};
static_assert(alignof(ASQFlagScoringRuleset) == 0x000008, "Wrong alignment on ASQFlagScoringRuleset");
static_assert(sizeof(ASQFlagScoringRuleset) == 0x0002B0, "Wrong size on ASQFlagScoringRuleset");
static_assert(offsetof(ASQFlagScoringRuleset, RateOfScoreTick) == 0x000258, "Member 'ASQFlagScoringRuleset::RateOfScoreTick' has a wrong offset!");
static_assert(offsetof(ASQFlagScoringRuleset, TeamOneFlagScores) == 0x00025C, "Member 'ASQFlagScoringRuleset::TeamOneFlagScores' has a wrong offset!");
static_assert(offsetof(ASQFlagScoringRuleset, TeamTwoFlagScores) == 0x000278, "Member 'ASQFlagScoringRuleset::TeamTwoFlagScores' has a wrong offset!");
static_assert(offsetof(ASQFlagScoringRuleset, CaptureZones) == 0x000298, "Member 'ASQFlagScoringRuleset::CaptureZones' has a wrong offset!");

// Class Squad.SQVehicleTurret
// 0x0010 (0x03E0 - 0x03D0)
class ASQVehicleTurret : public ASQVehicleSeat
{
public:
	uint8                                         Pad_11B3[0x8];                                     // 0x03D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQVehicleWeapon*                       LastEquippedCannonWeapon;                          // 0x03D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool IsCurrentWeaponInputEnabled();

	class USQTurretMovementComponent* GetTurretMovementComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleTurret">();
	}
	static class ASQVehicleTurret* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQVehicleTurret>();
	}
};
static_assert(alignof(ASQVehicleTurret) == 0x000010, "Wrong alignment on ASQVehicleTurret");
static_assert(sizeof(ASQVehicleTurret) == 0x0003E0, "Wrong size on ASQVehicleTurret");
static_assert(offsetof(ASQVehicleTurret, LastEquippedCannonWeapon) == 0x0003D8, "Member 'ASQVehicleTurret::LastEquippedCannonWeapon' has a wrong offset!");

// Class Squad.SQFoliageBender
// 0x0020 (0x0248 - 0x0228)
class ASQFoliageBender final : public AActor
{
public:
	class UMaterialParameterCollection*           FoliageMaterialParameterCollection;                // 0x0228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USphereComponent*                       Sphere;                                            // 0x0230(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StandSpreadMultiplier;                             // 0x0238(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ProneSpreadMultiplier;                             // 0x023C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDrawDebugSpheres;                                 // 0x0240(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDrawDebugPoints;                                  // 0x0241(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_11B4[0x6];                                     // 0x0242(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetSoldierLocationAndSpread(class ASQSoldier* Soldier, float* X, float* Y, float* Z, float* SpreadMultiplier);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQFoliageBender">();
	}
	static class ASQFoliageBender* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQFoliageBender>();
	}
};
static_assert(alignof(ASQFoliageBender) == 0x000008, "Wrong alignment on ASQFoliageBender");
static_assert(sizeof(ASQFoliageBender) == 0x000248, "Wrong size on ASQFoliageBender");
static_assert(offsetof(ASQFoliageBender, FoliageMaterialParameterCollection) == 0x000228, "Member 'ASQFoliageBender::FoliageMaterialParameterCollection' has a wrong offset!");
static_assert(offsetof(ASQFoliageBender, Sphere) == 0x000230, "Member 'ASQFoliageBender::Sphere' has a wrong offset!");
static_assert(offsetof(ASQFoliageBender, StandSpreadMultiplier) == 0x000238, "Member 'ASQFoliageBender::StandSpreadMultiplier' has a wrong offset!");
static_assert(offsetof(ASQFoliageBender, ProneSpreadMultiplier) == 0x00023C, "Member 'ASQFoliageBender::ProneSpreadMultiplier' has a wrong offset!");
static_assert(offsetof(ASQFoliageBender, bDrawDebugSpheres) == 0x000240, "Member 'ASQFoliageBender::bDrawDebugSpheres' has a wrong offset!");
static_assert(offsetof(ASQFoliageBender, bDrawDebugPoints) == 0x000241, "Member 'ASQFoliageBender::bDrawDebugPoints' has a wrong offset!");

// Class Squad.SQForceNetMovementComponent
// 0x0080 (0x0280 - 0x0200)
#pragma pack(push, 0x1)
class alignas(0x10) USQForceNetMovementComponent : public USQNetMoveComponent
{
public:
	uint8                                         Pad_11B5[0x10];                                    // 0x0200(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TorqueInput;                                       // 0x0210(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                ForceInput;                                        // 0x021C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                               CurrentRotationalVelocity;                         // 0x0228(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_11B6[0x24];                                    // 0x0234(0x0024)(Fixing Size After Last Property [ Dumper-7 ])
	class USQForceMovementComponentSettings*      ForceComponentSettings;                            // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                        CenterOfMass;                                      // 0x0260(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_11B7[0x10];                                    // 0x0268(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddForce(const struct FVector& Force);
	void AddForceAtLocation(const struct FVector& Force, const struct FVector& Position, float TorqueMultiplier);
	void AddForceAtLocationWithTorqueMultiplier(const struct FVector& Force, const struct FVector& Position, const struct FVector& TorqueMultiplier);
	void AddPitchTorque(float Amount);
	void AddRollTorque(float Amount);
	void AddTorque(const struct FVector& Torque);
	void AddYawTorque(float Amount);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQForceNetMovementComponent">();
	}
	static class USQForceNetMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQForceNetMovementComponent>();
	}
};
#pragma pack(pop)
static_assert(alignof(USQForceNetMovementComponent) == 0x000010, "Wrong alignment on USQForceNetMovementComponent");
static_assert(sizeof(USQForceNetMovementComponent) == 0x000280, "Wrong size on USQForceNetMovementComponent");
static_assert(offsetof(USQForceNetMovementComponent, TorqueInput) == 0x000210, "Member 'USQForceNetMovementComponent::TorqueInput' has a wrong offset!");
static_assert(offsetof(USQForceNetMovementComponent, ForceInput) == 0x00021C, "Member 'USQForceNetMovementComponent::ForceInput' has a wrong offset!");
static_assert(offsetof(USQForceNetMovementComponent, CurrentRotationalVelocity) == 0x000228, "Member 'USQForceNetMovementComponent::CurrentRotationalVelocity' has a wrong offset!");
static_assert(offsetof(USQForceNetMovementComponent, ForceComponentSettings) == 0x000258, "Member 'USQForceNetMovementComponent::ForceComponentSettings' has a wrong offset!");
static_assert(offsetof(USQForceNetMovementComponent, CenterOfMass) == 0x000260, "Member 'USQForceNetMovementComponent::CenterOfMass' has a wrong offset!");

// Class Squad.SQVehicleWeaponTOW
// 0x0070 (0x0C10 - 0x0BA0)
class ASQVehicleWeaponTOW : public ASQVehicleWeapon
{
public:
	uint8                                         Pad_11B8[0x10];                                    // 0x0BA0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USQVehicleViewWidget>       ViewWidgetClass;                                   // 0x0BB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterial*                              ReticlePPMatCPP;                                   // 0x0BB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FOVMultiplier;                                     // 0x0BC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SceneFringeIntensityInZoom;                        // 0x0BC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PPBlendWeight;                                     // 0x0BC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FireDelay;                                         // 0x0BCC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCameraComponent*                       CameraComponent;                                   // 0x0BD0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                        AimComponent;                                      // 0x0BD8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_11B9[0x18];                                    // 0x0BE0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BlastSocket;                                       // 0x0BF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQBlastComponent*                      BlastComponent;                                    // 0x0C00(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQGuidanceControllerComponent*         GuidanceControllerComponent;                       // 0x0C08(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void BlueprintOnPreFire();
	void DelayedFireWeapon();
	struct FPostProcessSettings GetPostProcessSettings();
	TSubclassOf<class USQVehicleViewWidget> GetReticleClass();
	void ToggleReticleOverlay(const bool bIsAiming);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleWeaponTOW">();
	}
	static class ASQVehicleWeaponTOW* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQVehicleWeaponTOW>();
	}
};
static_assert(alignof(ASQVehicleWeaponTOW) == 0x000010, "Wrong alignment on ASQVehicleWeaponTOW");
static_assert(sizeof(ASQVehicleWeaponTOW) == 0x000C10, "Wrong size on ASQVehicleWeaponTOW");
static_assert(offsetof(ASQVehicleWeaponTOW, ViewWidgetClass) == 0x000BB0, "Member 'ASQVehicleWeaponTOW::ViewWidgetClass' has a wrong offset!");
static_assert(offsetof(ASQVehicleWeaponTOW, ReticlePPMatCPP) == 0x000BB8, "Member 'ASQVehicleWeaponTOW::ReticlePPMatCPP' has a wrong offset!");
static_assert(offsetof(ASQVehicleWeaponTOW, FOVMultiplier) == 0x000BC0, "Member 'ASQVehicleWeaponTOW::FOVMultiplier' has a wrong offset!");
static_assert(offsetof(ASQVehicleWeaponTOW, SceneFringeIntensityInZoom) == 0x000BC4, "Member 'ASQVehicleWeaponTOW::SceneFringeIntensityInZoom' has a wrong offset!");
static_assert(offsetof(ASQVehicleWeaponTOW, PPBlendWeight) == 0x000BC8, "Member 'ASQVehicleWeaponTOW::PPBlendWeight' has a wrong offset!");
static_assert(offsetof(ASQVehicleWeaponTOW, FireDelay) == 0x000BCC, "Member 'ASQVehicleWeaponTOW::FireDelay' has a wrong offset!");
static_assert(offsetof(ASQVehicleWeaponTOW, CameraComponent) == 0x000BD0, "Member 'ASQVehicleWeaponTOW::CameraComponent' has a wrong offset!");
static_assert(offsetof(ASQVehicleWeaponTOW, AimComponent) == 0x000BD8, "Member 'ASQVehicleWeaponTOW::AimComponent' has a wrong offset!");
static_assert(offsetof(ASQVehicleWeaponTOW, BlastSocket) == 0x000BF8, "Member 'ASQVehicleWeaponTOW::BlastSocket' has a wrong offset!");
static_assert(offsetof(ASQVehicleWeaponTOW, BlastComponent) == 0x000C00, "Member 'ASQVehicleWeaponTOW::BlastComponent' has a wrong offset!");
static_assert(offsetof(ASQVehicleWeaponTOW, GuidanceControllerComponent) == 0x000C08, "Member 'ASQVehicleWeaponTOW::GuidanceControllerComponent' has a wrong offset!");

// Class Squad.SQForwardBaseSettings
// 0x0068 (0x00C8 - 0x0060)
class USQForwardBaseSettings final : public USQSettings
{
public:
	int32                                         NumberOfTeammatesNeededToDeploy;                   // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfLogisNeededToDeploy;                       // 0x0064(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExclusionRadius;                                   // 0x0068(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SiegedMinNearbyEnemies;                            // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicketsLostWhenOverrun;                            // 0x0070(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearbyEnemiesRadius;                               // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasSpawning;                                       // 0x0078(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11BA[0x3];                                     // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToEnableSpawning;                              // 0x007C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnPointRadius;                                  // 0x0080(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnOffset;                                       // 0x0084(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealthPercentToDisableSpawns;                      // 0x0090(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseCapture;                                        // 0x0094(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11BB[0x3];                                     // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CaptureTickDuration;                               // 0x0098(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCapturePctPerSecond;                            // 0x009C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapturePctPerSecondPerPlayer;                      // 0x00A0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseResourceGeneration;                             // 0x00A4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11BC[0x3];                                     // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ResourceGenerationTickDuration;                    // 0x00A8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialConstructionPoints;                         // 0x00AC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxConstructionPoints;                             // 0x00B0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CPPerSecond;                                       // 0x00B4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialAmmo;                                       // 0x00B8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAmmo;                                           // 0x00BC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmmoPerSecond;                                     // 0x00C0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11BD[0x4];                                     // 0x00C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool HasInitialResources() const;
	bool HasTimeToEnableSpawning() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQForwardBaseSettings">();
	}
	static class USQForwardBaseSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQForwardBaseSettings>();
	}
};
static_assert(alignof(USQForwardBaseSettings) == 0x000008, "Wrong alignment on USQForwardBaseSettings");
static_assert(sizeof(USQForwardBaseSettings) == 0x0000C8, "Wrong size on USQForwardBaseSettings");
static_assert(offsetof(USQForwardBaseSettings, NumberOfTeammatesNeededToDeploy) == 0x000060, "Member 'USQForwardBaseSettings::NumberOfTeammatesNeededToDeploy' has a wrong offset!");
static_assert(offsetof(USQForwardBaseSettings, NumberOfLogisNeededToDeploy) == 0x000064, "Member 'USQForwardBaseSettings::NumberOfLogisNeededToDeploy' has a wrong offset!");
static_assert(offsetof(USQForwardBaseSettings, ExclusionRadius) == 0x000068, "Member 'USQForwardBaseSettings::ExclusionRadius' has a wrong offset!");
static_assert(offsetof(USQForwardBaseSettings, SiegedMinNearbyEnemies) == 0x00006C, "Member 'USQForwardBaseSettings::SiegedMinNearbyEnemies' has a wrong offset!");
static_assert(offsetof(USQForwardBaseSettings, TicketsLostWhenOverrun) == 0x000070, "Member 'USQForwardBaseSettings::TicketsLostWhenOverrun' has a wrong offset!");
static_assert(offsetof(USQForwardBaseSettings, NearbyEnemiesRadius) == 0x000074, "Member 'USQForwardBaseSettings::NearbyEnemiesRadius' has a wrong offset!");
static_assert(offsetof(USQForwardBaseSettings, HasSpawning) == 0x000078, "Member 'USQForwardBaseSettings::HasSpawning' has a wrong offset!");
static_assert(offsetof(USQForwardBaseSettings, TimeToEnableSpawning) == 0x00007C, "Member 'USQForwardBaseSettings::TimeToEnableSpawning' has a wrong offset!");
static_assert(offsetof(USQForwardBaseSettings, SpawnPointRadius) == 0x000080, "Member 'USQForwardBaseSettings::SpawnPointRadius' has a wrong offset!");
static_assert(offsetof(USQForwardBaseSettings, SpawnOffset) == 0x000084, "Member 'USQForwardBaseSettings::SpawnOffset' has a wrong offset!");
static_assert(offsetof(USQForwardBaseSettings, HealthPercentToDisableSpawns) == 0x000090, "Member 'USQForwardBaseSettings::HealthPercentToDisableSpawns' has a wrong offset!");
static_assert(offsetof(USQForwardBaseSettings, UseCapture) == 0x000094, "Member 'USQForwardBaseSettings::UseCapture' has a wrong offset!");
static_assert(offsetof(USQForwardBaseSettings, CaptureTickDuration) == 0x000098, "Member 'USQForwardBaseSettings::CaptureTickDuration' has a wrong offset!");
static_assert(offsetof(USQForwardBaseSettings, MaxCapturePctPerSecond) == 0x00009C, "Member 'USQForwardBaseSettings::MaxCapturePctPerSecond' has a wrong offset!");
static_assert(offsetof(USQForwardBaseSettings, CapturePctPerSecondPerPlayer) == 0x0000A0, "Member 'USQForwardBaseSettings::CapturePctPerSecondPerPlayer' has a wrong offset!");
static_assert(offsetof(USQForwardBaseSettings, UseResourceGeneration) == 0x0000A4, "Member 'USQForwardBaseSettings::UseResourceGeneration' has a wrong offset!");
static_assert(offsetof(USQForwardBaseSettings, ResourceGenerationTickDuration) == 0x0000A8, "Member 'USQForwardBaseSettings::ResourceGenerationTickDuration' has a wrong offset!");
static_assert(offsetof(USQForwardBaseSettings, InitialConstructionPoints) == 0x0000AC, "Member 'USQForwardBaseSettings::InitialConstructionPoints' has a wrong offset!");
static_assert(offsetof(USQForwardBaseSettings, MaxConstructionPoints) == 0x0000B0, "Member 'USQForwardBaseSettings::MaxConstructionPoints' has a wrong offset!");
static_assert(offsetof(USQForwardBaseSettings, CPPerSecond) == 0x0000B4, "Member 'USQForwardBaseSettings::CPPerSecond' has a wrong offset!");
static_assert(offsetof(USQForwardBaseSettings, InitialAmmo) == 0x0000B8, "Member 'USQForwardBaseSettings::InitialAmmo' has a wrong offset!");
static_assert(offsetof(USQForwardBaseSettings, MaxAmmo) == 0x0000BC, "Member 'USQForwardBaseSettings::MaxAmmo' has a wrong offset!");
static_assert(offsetof(USQForwardBaseSettings, AmmoPerSecond) == 0x0000C0, "Member 'USQForwardBaseSettings::AmmoPerSecond' has a wrong offset!");

// Class Squad.SQFreeLookInterface
// 0x0000 (0x0028 - 0x0028)
class ISQFreeLookInterface final : public IInterface
{
public:
	void SetIsToggleActive(const bool bNewState);

	struct FRotator CalculateFreeLookRotation() const;
	class USQFreeLookComponent* GetFreeLookComponent() const;
	bool GetIsUsingFreeLook() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQFreeLookInterface">();
	}
	static class ISQFreeLookInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISQFreeLookInterface>();
	}
};
static_assert(alignof(ISQFreeLookInterface) == 0x000008, "Wrong alignment on ISQFreeLookInterface");
static_assert(sizeof(ISQFreeLookInterface) == 0x000028, "Wrong size on ISQFreeLookInterface");

// Class Squad.SQGameState
// 0x0480 (0x0718 - 0x0298)
class ASQGameState : public AGameState
{
public:
	FMulticastInlineDelegateProperty_             RS_OnMatchStart;                                   // 0x0298(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bTimerPaused;                                      // 0x02A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTicketBasedGame;                                // 0x02A9(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowPublicClientsToRecord;                       // 0x02AA(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTeamPrepsActive;                                  // 0x02AB(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQLayerSettings                       CurrentLayerInfo;                                  // 0x02AC(0x0020)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11BE[0x4];                                     // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnPlayerJoined;                                    // 0x02D0(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayerRemoved;                                   // 0x02E0(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_11BF[0x18];                                    // 0x02F0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ASQTeamState*>                   TeamStates;                                        // 0x0308(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class ASQTeamState*>                   IndexedTeamStates;                                 // 0x0318(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPublic)
	int32                                         AuthorityNumTeams;                                 // 0x0328(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChangeTeamWaitTime;                                // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQTeamState*                           WinningTeam;                                       // 0x0330(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WinningTeamTickets;                                // 0x0338(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerTickRate;                                    // 0x033C(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   GameModeName;                                      // 0x0340(0x0018)(BlueprintVisible, BlueprintReadOnly, Net, Transient, NativeAccessSpecifierPublic)
	TArray<struct FSQGameModeRules>               GameModeRules;                                     // 0x0358(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPublic)
	class FString                                 NextMapName;                                       // 0x0368(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQGameCommandComponent*                GameCommandComponent;                              // 0x0378(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQGameCommandComponent>    GameCommandComponentClass;                         // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxFireTeamCount;                                  // 0x0388(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxFireTeamSize;                                   // 0x038C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQVotingState*                         VotingState;                                       // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   MapName;                                           // 0x0398(0x0018)(BlueprintVisible, BlueprintReadOnly, Net, Transient, Protected, NativeAccessSpecifierProtected)
	int32                                         MaxPlayers;                                        // 0x03B0(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_11C0[0x4];                                     // 0x03B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ServerName;                                        // 0x03B8(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, RepNotify, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 MessageOfTheDay;                                   // 0x03C8(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQCoreStateConnectionChildActorComponent* CoreStateConnectionChildActorComponent;            // 0x03D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TimeOfCompletion;                                  // 0x03E0(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_11C1[0x14];                                    // 0x03E4(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ServerStartTimeStamp;                              // 0x03F8(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_11C2[0x4];                                     // 0x03FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQMapMarkerManagerComponent*           MapMarkerManagerComponent;                         // 0x0400(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGuid                                  GlobalSessionId;                                   // 0x0408(0x0010)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQGameFlags                           GameFlags;                                         // 0x0418(0x0011)(BlueprintVisible, BlueprintReadOnly, Net, Transient, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C3[0x7];                                     // 0x0429(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQServerSettings                      ServerSettings;                                    // 0x0430(0x02E8)(BlueprintVisible, BlueprintReadOnly, Net, Transient, NativeAccessSpecifierPublic)

public:
	void AddGameModeRules(const TArray<struct FSQGameModeRules>& InGameModeRules);
	void OnRep_CurrentLayerInfo();
	void OnRep_GameModeRules();
	void OnRep_IndexedTeamStates();
	void OnRep_MaxPlayers();
	void OnRep_NeutralTeamInfoClass();
	void OnRep_ServerName();
	void OnRep_ServerStartTimeStamp();
	void RefreshTeamStates();
	void RequestFinishAndExitToMainMenu();
	void SetRemainingTime(int32 Seconds);

	bool CanChangeTeam() const;
	class USQMapMarkerManagerComponent* GetMarkerManager() const;
	int32 GetPlayerCount() const;
	ESQTeamRelationShip GetRelationshipById(const ESQTeam InTeamA, const ESQTeam InTeamIdB) const;
	ESQTeamRelationShip GetRelationShipByIndex(const int32 InTeamIdA, const int32 InTeamIdB) const;
	int32 GetRemainingTime() const;
	bool IsGameReadyToStart() const;
	bool TryGetTeamState(int32 TeamId, class ASQTeamState** OutTeamState) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGameState">();
	}
	static class ASQGameState* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQGameState>();
	}
};
static_assert(alignof(ASQGameState) == 0x000008, "Wrong alignment on ASQGameState");
static_assert(sizeof(ASQGameState) == 0x000718, "Wrong size on ASQGameState");
static_assert(offsetof(ASQGameState, RS_OnMatchStart) == 0x000298, "Member 'ASQGameState::RS_OnMatchStart' has a wrong offset!");
static_assert(offsetof(ASQGameState, bTimerPaused) == 0x0002A8, "Member 'ASQGameState::bTimerPaused' has a wrong offset!");
static_assert(offsetof(ASQGameState, bIsTicketBasedGame) == 0x0002A9, "Member 'ASQGameState::bIsTicketBasedGame' has a wrong offset!");
static_assert(offsetof(ASQGameState, bAllowPublicClientsToRecord) == 0x0002AA, "Member 'ASQGameState::bAllowPublicClientsToRecord' has a wrong offset!");
static_assert(offsetof(ASQGameState, bTeamPrepsActive) == 0x0002AB, "Member 'ASQGameState::bTeamPrepsActive' has a wrong offset!");
static_assert(offsetof(ASQGameState, CurrentLayerInfo) == 0x0002AC, "Member 'ASQGameState::CurrentLayerInfo' has a wrong offset!");
static_assert(offsetof(ASQGameState, OnPlayerJoined) == 0x0002D0, "Member 'ASQGameState::OnPlayerJoined' has a wrong offset!");
static_assert(offsetof(ASQGameState, OnPlayerRemoved) == 0x0002E0, "Member 'ASQGameState::OnPlayerRemoved' has a wrong offset!");
static_assert(offsetof(ASQGameState, TeamStates) == 0x000308, "Member 'ASQGameState::TeamStates' has a wrong offset!");
static_assert(offsetof(ASQGameState, IndexedTeamStates) == 0x000318, "Member 'ASQGameState::IndexedTeamStates' has a wrong offset!");
static_assert(offsetof(ASQGameState, AuthorityNumTeams) == 0x000328, "Member 'ASQGameState::AuthorityNumTeams' has a wrong offset!");
static_assert(offsetof(ASQGameState, ChangeTeamWaitTime) == 0x00032C, "Member 'ASQGameState::ChangeTeamWaitTime' has a wrong offset!");
static_assert(offsetof(ASQGameState, WinningTeam) == 0x000330, "Member 'ASQGameState::WinningTeam' has a wrong offset!");
static_assert(offsetof(ASQGameState, WinningTeamTickets) == 0x000338, "Member 'ASQGameState::WinningTeamTickets' has a wrong offset!");
static_assert(offsetof(ASQGameState, ServerTickRate) == 0x00033C, "Member 'ASQGameState::ServerTickRate' has a wrong offset!");
static_assert(offsetof(ASQGameState, GameModeName) == 0x000340, "Member 'ASQGameState::GameModeName' has a wrong offset!");
static_assert(offsetof(ASQGameState, GameModeRules) == 0x000358, "Member 'ASQGameState::GameModeRules' has a wrong offset!");
static_assert(offsetof(ASQGameState, NextMapName) == 0x000368, "Member 'ASQGameState::NextMapName' has a wrong offset!");
static_assert(offsetof(ASQGameState, GameCommandComponent) == 0x000378, "Member 'ASQGameState::GameCommandComponent' has a wrong offset!");
static_assert(offsetof(ASQGameState, GameCommandComponentClass) == 0x000380, "Member 'ASQGameState::GameCommandComponentClass' has a wrong offset!");
static_assert(offsetof(ASQGameState, MaxFireTeamCount) == 0x000388, "Member 'ASQGameState::MaxFireTeamCount' has a wrong offset!");
static_assert(offsetof(ASQGameState, MaxFireTeamSize) == 0x00038C, "Member 'ASQGameState::MaxFireTeamSize' has a wrong offset!");
static_assert(offsetof(ASQGameState, VotingState) == 0x000390, "Member 'ASQGameState::VotingState' has a wrong offset!");
static_assert(offsetof(ASQGameState, MapName) == 0x000398, "Member 'ASQGameState::MapName' has a wrong offset!");
static_assert(offsetof(ASQGameState, MaxPlayers) == 0x0003B0, "Member 'ASQGameState::MaxPlayers' has a wrong offset!");
static_assert(offsetof(ASQGameState, ServerName) == 0x0003B8, "Member 'ASQGameState::ServerName' has a wrong offset!");
static_assert(offsetof(ASQGameState, MessageOfTheDay) == 0x0003C8, "Member 'ASQGameState::MessageOfTheDay' has a wrong offset!");
static_assert(offsetof(ASQGameState, CoreStateConnectionChildActorComponent) == 0x0003D8, "Member 'ASQGameState::CoreStateConnectionChildActorComponent' has a wrong offset!");
static_assert(offsetof(ASQGameState, TimeOfCompletion) == 0x0003E0, "Member 'ASQGameState::TimeOfCompletion' has a wrong offset!");
static_assert(offsetof(ASQGameState, ServerStartTimeStamp) == 0x0003F8, "Member 'ASQGameState::ServerStartTimeStamp' has a wrong offset!");
static_assert(offsetof(ASQGameState, MapMarkerManagerComponent) == 0x000400, "Member 'ASQGameState::MapMarkerManagerComponent' has a wrong offset!");
static_assert(offsetof(ASQGameState, GlobalSessionId) == 0x000408, "Member 'ASQGameState::GlobalSessionId' has a wrong offset!");
static_assert(offsetof(ASQGameState, GameFlags) == 0x000418, "Member 'ASQGameState::GameFlags' has a wrong offset!");
static_assert(offsetof(ASQGameState, ServerSettings) == 0x000430, "Member 'ASQGameState::ServerSettings' has a wrong offset!");

// Class Squad.SQGameEventRuleset
// 0x0008 (0x0260 - 0x0258)
class ASQGameEventRuleset : public ASQGameRuleSet
{
public:
	ESQKillReportChannel                          JoinChannel;                                       // 0x0258(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQKillReportChannel                          PartChannel;                                       // 0x0259(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C7[0x6];                                     // 0x025A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGameEventRuleset">();
	}
	static class ASQGameEventRuleset* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQGameEventRuleset>();
	}
};
static_assert(alignof(ASQGameEventRuleset) == 0x000008, "Wrong alignment on ASQGameEventRuleset");
static_assert(sizeof(ASQGameEventRuleset) == 0x000260, "Wrong size on ASQGameEventRuleset");
static_assert(offsetof(ASQGameEventRuleset, JoinChannel) == 0x000258, "Member 'ASQGameEventRuleset::JoinChannel' has a wrong offset!");
static_assert(offsetof(ASQGameEventRuleset, PartChannel) == 0x000259, "Member 'ASQGameEventRuleset::PartChannel' has a wrong offset!");

// Class Squad.SQTeamPrep
// 0x0050 (0x0278 - 0x0228)
class ASQTeamPrep : public AActor
{
public:
	int32                                         TeamId;                                            // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C8[0x4];                                     // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    VehicleStagingPrimitive;                           // 0x0230(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C9[0x18];                                    // 0x0238(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StagingTimeInSeconds;                              // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ReplicatedRemainingTime;                           // 0x0254(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_11CA[0x18];                                    // 0x0258(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQSoldier*                             LocalSoldier;                                      // 0x0270(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void CheckOverlap();
	void OnCompBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnCompExit(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void StartCountdown(class FName NewMatchState);

	int32 GetStagingTimeRemaining() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQTeamPrep">();
	}
	static class ASQTeamPrep* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQTeamPrep>();
	}
};
static_assert(alignof(ASQTeamPrep) == 0x000008, "Wrong alignment on ASQTeamPrep");
static_assert(sizeof(ASQTeamPrep) == 0x000278, "Wrong size on ASQTeamPrep");
static_assert(offsetof(ASQTeamPrep, TeamId) == 0x000228, "Member 'ASQTeamPrep::TeamId' has a wrong offset!");
static_assert(offsetof(ASQTeamPrep, VehicleStagingPrimitive) == 0x000230, "Member 'ASQTeamPrep::VehicleStagingPrimitive' has a wrong offset!");
static_assert(offsetof(ASQTeamPrep, StagingTimeInSeconds) == 0x000250, "Member 'ASQTeamPrep::StagingTimeInSeconds' has a wrong offset!");
static_assert(offsetof(ASQTeamPrep, ReplicatedRemainingTime) == 0x000254, "Member 'ASQTeamPrep::ReplicatedRemainingTime' has a wrong offset!");
static_assert(offsetof(ASQTeamPrep, LocalSoldier) == 0x000270, "Member 'ASQTeamPrep::LocalSoldier' has a wrong offset!");

// Class Squad.SQGameInstanceSubsystems
// 0x0020 (0x0050 - 0x0030)
class USQGameInstanceSubsystems final : public UGameInstanceSubsystem
{
public:
	TArray<struct FSQGameSubsystemObject>         SquadGameSubsystemObjects;                         // 0x0030(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	TArray<class UObject*>                        SubsystemInstances;                                // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGameInstanceSubsystems">();
	}
	static class USQGameInstanceSubsystems* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQGameInstanceSubsystems>();
	}
};
static_assert(alignof(USQGameInstanceSubsystems) == 0x000008, "Wrong alignment on USQGameInstanceSubsystems");
static_assert(sizeof(USQGameInstanceSubsystems) == 0x000050, "Wrong size on USQGameInstanceSubsystems");
static_assert(offsetof(USQGameInstanceSubsystems, SquadGameSubsystemObjects) == 0x000030, "Member 'USQGameInstanceSubsystems::SquadGameSubsystemObjects' has a wrong offset!");
static_assert(offsetof(USQGameInstanceSubsystems, SubsystemInstances) == 0x000040, "Member 'USQGameInstanceSubsystems::SubsystemInstances' has a wrong offset!");

// Class Squad.SQGameMode
// 0x0380 (0x0698 - 0x0318)
class ASQGameMode : public AGameMode
{
public:
	bool                                          bTournamentMode;                                   // 0x0318(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11CD[0x3];                                     // 0x0319(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CheckEndMatchConditionsTimeInterval;               // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitialLives;                                      // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartupTime;                                       // 0x0324(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RoundTime;                                         // 0x0328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeBetweenMatches;                                // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeBeforeVote;                                    // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeBetweenMatchesAfterVote;                       // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayAttackDefendText;                          // 0x0338(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11CE[0x7];                                     // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQTeam*                                WinnerTeam;                                        // 0x0340(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQTeam>                    TeamClass;                                         // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQSquad>                   SquadClass;                                        // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class ASQGameRuleSet>>     RuleSetClasses;                                    // 0x0358(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NoClear, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class ASQGameRuleSet*>                 RuleSets;                                          // 0x0368(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class ASQTeam*>                        Teams;                                             // 0x0378(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class ASQTeam*>                        IndexedTeams;                                      // 0x0388(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_11CF[0x50];                                    // 0x0398(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x03E8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D0[0x294];                                   // 0x0400(0x0294)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          ConfigureFactionInProgress;                        // 0x0694(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D1[0x3];                                     // 0x0695(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool AllowTeamChange(class ASQPlayerController* RequestingPlayer, int32 NewTeam);
	TSubclassOf<class ASQSoldier> GetConcretePawnClassForController(class AController* InController);
	bool IsDeployNow(class APlayerController* PC);
	void LogisticsDropOff(class AActor* VehicleActor, float AmmoDroppedOff, float ConstructionDroppedOff);
	void OnCurrentLayerSelected(class USQVoteSession* VoteSession, const struct FSQChoice& Winner);
	void OnFactionSelected(class USQVoteSession* VoteSession, const struct FSQChoice& Winner);
	void OnNextLayerSelected(class USQVoteSession* VoteSession, const struct FSQChoice& Winner);
	void OnNextLevelSelected(class USQVoteSession* VoteSession, const struct FSQChoice& Winner);
	void PlayerBandaged(class AController* Bandager, class AController* BandagedPlayer);
	void PlayerDied(class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, const class UDamageType* DamageType);
	void PlayerHealed(class AController* Healer, class AController* HealedPlayer);
	void PlayerRevived(class AController* Reviver, class AController* RevivedPlayer);
	void PlayerWounded(class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, const class UDamageType* DamageType);
	void RegisterImportantActor(class AActor* Actor);
	void RegisterRuleSet(class ASQGameRuleSet* RuleSet);
	bool TryGetRulesetsOfClass(TSubclassOf<class ASQGameRuleSet> RulesetClass, TArray<class ASQGameRuleSet*>* OutRulesets);
	bool TryToChangePlayersTeam(class ASQPlayerController* PlayerToChange, int32 TeamToChangeTo, bool bForceChange);
	void UnregisterImportantActor(class AActor* Actor);
	void VehicleDestroyed(class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, const class UDamageType* DamageType);

	class FString GetDisplayName() const;
	void GetDisplayNameArray(TArray<class FString>* OutArray) const;
	class FText GetDisplayText() const;
	class ASQTeam* GetTeam(ESQTeam Team) const;
	void OnPlayerChangedTeams(class ASQPlayerController* PlayerWhoSwitched) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGameMode">();
	}
	static class ASQGameMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQGameMode>();
	}
};
static_assert(alignof(ASQGameMode) == 0x000008, "Wrong alignment on ASQGameMode");
static_assert(sizeof(ASQGameMode) == 0x000698, "Wrong size on ASQGameMode");
static_assert(offsetof(ASQGameMode, bTournamentMode) == 0x000318, "Member 'ASQGameMode::bTournamentMode' has a wrong offset!");
static_assert(offsetof(ASQGameMode, CheckEndMatchConditionsTimeInterval) == 0x00031C, "Member 'ASQGameMode::CheckEndMatchConditionsTimeInterval' has a wrong offset!");
static_assert(offsetof(ASQGameMode, InitialLives) == 0x000320, "Member 'ASQGameMode::InitialLives' has a wrong offset!");
static_assert(offsetof(ASQGameMode, StartupTime) == 0x000324, "Member 'ASQGameMode::StartupTime' has a wrong offset!");
static_assert(offsetof(ASQGameMode, RoundTime) == 0x000328, "Member 'ASQGameMode::RoundTime' has a wrong offset!");
static_assert(offsetof(ASQGameMode, TimeBetweenMatches) == 0x00032C, "Member 'ASQGameMode::TimeBetweenMatches' has a wrong offset!");
static_assert(offsetof(ASQGameMode, TimeBeforeVote) == 0x000330, "Member 'ASQGameMode::TimeBeforeVote' has a wrong offset!");
static_assert(offsetof(ASQGameMode, TimeBetweenMatchesAfterVote) == 0x000334, "Member 'ASQGameMode::TimeBetweenMatchesAfterVote' has a wrong offset!");
static_assert(offsetof(ASQGameMode, bDisplayAttackDefendText) == 0x000338, "Member 'ASQGameMode::bDisplayAttackDefendText' has a wrong offset!");
static_assert(offsetof(ASQGameMode, WinnerTeam) == 0x000340, "Member 'ASQGameMode::WinnerTeam' has a wrong offset!");
static_assert(offsetof(ASQGameMode, TeamClass) == 0x000348, "Member 'ASQGameMode::TeamClass' has a wrong offset!");
static_assert(offsetof(ASQGameMode, SquadClass) == 0x000350, "Member 'ASQGameMode::SquadClass' has a wrong offset!");
static_assert(offsetof(ASQGameMode, RuleSetClasses) == 0x000358, "Member 'ASQGameMode::RuleSetClasses' has a wrong offset!");
static_assert(offsetof(ASQGameMode, RuleSets) == 0x000368, "Member 'ASQGameMode::RuleSets' has a wrong offset!");
static_assert(offsetof(ASQGameMode, Teams) == 0x000378, "Member 'ASQGameMode::Teams' has a wrong offset!");
static_assert(offsetof(ASQGameMode, IndexedTeams) == 0x000388, "Member 'ASQGameMode::IndexedTeams' has a wrong offset!");
static_assert(offsetof(ASQGameMode, DisplayName) == 0x0003E8, "Member 'ASQGameMode::DisplayName' has a wrong offset!");
static_assert(offsetof(ASQGameMode, ConfigureFactionInProgress) == 0x000694, "Member 'ASQGameMode::ConfigureFactionInProgress' has a wrong offset!");

// Class Squad.SQTeamStatePrivate
// 0x0030 (0x0258 - 0x0228)
class ASQTeamStatePrivate final : public AInfo
{
public:
	uint8                                         Pad_11D7[0x8];                                     // 0x0228(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ASQSquadStatePrivateToTeam*>     IndexedTeamPrivateSquadStates;                     // 0x0230(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	TArray<class ASQSquadStatePrivateToTeam*>     TeamPrivateSquadStates;                            // 0x0240(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0250(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11D8[0x4];                                     // 0x0254(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_IndexedTeamPrivateSquadStates();

	int32 GetId() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQTeamStatePrivate">();
	}
	static class ASQTeamStatePrivate* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQTeamStatePrivate>();
	}
};
static_assert(alignof(ASQTeamStatePrivate) == 0x000008, "Wrong alignment on ASQTeamStatePrivate");
static_assert(sizeof(ASQTeamStatePrivate) == 0x000258, "Wrong size on ASQTeamStatePrivate");
static_assert(offsetof(ASQTeamStatePrivate, IndexedTeamPrivateSquadStates) == 0x000230, "Member 'ASQTeamStatePrivate::IndexedTeamPrivateSquadStates' has a wrong offset!");
static_assert(offsetof(ASQTeamStatePrivate, TeamPrivateSquadStates) == 0x000240, "Member 'ASQTeamStatePrivate::TeamPrivateSquadStates' has a wrong offset!");
static_assert(offsetof(ASQTeamStatePrivate, ID) == 0x000250, "Member 'ASQTeamStatePrivate::ID' has a wrong offset!");

// Class Squad.SQGameMode_Menu
// 0x0000 (0x0318 - 0x0318)
class ASQGameMode_Menu final : public AGameMode
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGameMode_Menu">();
	}
	static class ASQGameMode_Menu* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQGameMode_Menu>();
	}
};
static_assert(alignof(ASQGameMode_Menu) == 0x000008, "Wrong alignment on ASQGameMode_Menu");
static_assert(sizeof(ASQGameMode_Menu) == 0x000318, "Wrong size on ASQGameMode_Menu");

// Class Squad.SQGameplayService
// 0x0000 (0x0028 - 0x0028)
class USQGameplayService final : public UBlueprintFunctionLibrary
{
public:
	static struct FDateTime GetServerUtcTime();
	static bool TryGetGameMode(const class UObject* WorldContextObject, TSubclassOf<class ASQGameMode> GameModeClass, class ASQGameMode** OutGameMode);
	static bool TryGetGameState(const class UObject* WorldContextObject, TSubclassOf<class ASQGameState> GameStateClass, class ASQGameState** OutGameState);
	static bool TryGetLocalPlayerController(const class UObject* WorldContextObject, class ASQPlayerController** OutPlayerController);
	static bool TryGetLocalPlayerState(const class UObject* WorldContextObject, TSubclassOf<class ASQPlayerState> PlayerStateClass, class ASQPlayerState** OutPlayerState);
	static bool TryGetLocalPlayerTeamId(const class UObject* WorldContextObject, int32* OutTeamId);
	static bool TryGetLocalPlayerTeamState(const class UObject* WorldContextObject, TSubclassOf<class ASQTeamState> TeamStateClass, class ASQTeamState** OutTeamState);
	static bool TryGetPlayerOuterGameMode(const class ASQPlayerController* WorldContextObject, TSubclassOf<class ASQGameMode> GameModeClass, class ASQGameMode** OutGameMode);
	static bool TryGetPlayerOuterGameState(const class ASQPlayerController* WorldContextObject, TSubclassOf<class ASQGameState> GameStateClass, class ASQGameState** OutGameState);
	static bool TryGetTeam(const class UObject* WorldContextObject, int32 TeamId, TSubclassOf<class ASQTeam> TeamClass, class ASQTeam** OutTeam);
	static bool TryGetTeamOuterGameMode(const class ASQTeam* WorldContextObject, TSubclassOf<class ASQGameMode> GameModeClass, class ASQGameMode** OutGameMode);
	static bool TryGetTeamOuterGameState(const class ASQTeam* WorldContextObject, TSubclassOf<class ASQGameState> GameStateClass, class ASQGameState** OutGameState);
	static bool TryGetTeamState(const class UObject* WorldContextObject, int32 TeamId, TSubclassOf<class ASQTeamState> TeamStateClass, class ASQTeamState** OutTeamState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGameplayService">();
	}
	static class USQGameplayService* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQGameplayService>();
	}
};
static_assert(alignof(USQGameplayService) == 0x000008, "Wrong alignment on USQGameplayService");
static_assert(sizeof(USQGameplayService) == 0x000028, "Wrong size on USQGameplayService");

// Class Squad.SQGameSetupFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USQGameSetupFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool CanInjectFactionSetup(class USQFactionSetup* SQFactionSetup, class USQLevel* TargetLevel, class USQLayer* TargetLayer);
	static TArray<class FString> GetAllFactionCombinations(const class USQLayer* FromLayer);
	static TArray<class FString> GetFactionsFromSettingsString(const class FString& InString, const int32& ListIndex);
	static struct FSQLayerSettings GetLayerSettingsFromString(class FString* LayerString);
	static void InjectFactionSetup(class USQFactionSetup* SQFactionSetup, class USQLayer* TargetLayer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGameSetupFunctionLibrary">();
	}
	static class USQGameSetupFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQGameSetupFunctionLibrary>();
	}
};
static_assert(alignof(USQGameSetupFunctionLibrary) == 0x000008, "Wrong alignment on USQGameSetupFunctionLibrary");
static_assert(sizeof(USQGameSetupFunctionLibrary) == 0x000028, "Wrong size on USQGameSetupFunctionLibrary");

// Class Squad.SQGameSubsystemInterface
// 0x0000 (0x0028 - 0x0028)
class ISQGameSubsystemInterface final : public IInterface
{
public:
	void InitializeSubsystem(class USQGameInstance* SquadGameInstance);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGameSubsystemInterface">();
	}
	static class ISQGameSubsystemInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISQGameSubsystemInterface>();
	}
};
static_assert(alignof(ISQGameSubsystemInterface) == 0x000008, "Wrong alignment on ISQGameSubsystemInterface");
static_assert(sizeof(ISQGameSubsystemInterface) == 0x000028, "Wrong size on ISQGameSubsystemInterface");

// Class Squad.SQSquadSelection
// 0x0038 (0x02A0 - 0x0268)
class USQSquadSelection final : public USQUserWidget
{
public:
	class ASQPlayerController*                    OwnerPlayerController;                             // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanel*                           CreateSquadCanvas;                                 // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQCreateSquadButton*                   CreateSquadButton;                                 // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEditableTextBox*                       SquadNameTextBox;                                  // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UScrollBox*                             SquadsList;                                        // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnNewSquadCreated;                                 // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void HideSquadCreationWidgets();
	void InitWidget();
	void LeaveSquad();
	void RethrowSquadCreated();
	void SelfTick();
	void ShowSquadCreationWidgets();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadSelection">();
	}
	static class USQSquadSelection* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSquadSelection>();
	}
};
static_assert(alignof(USQSquadSelection) == 0x000008, "Wrong alignment on USQSquadSelection");
static_assert(sizeof(USQSquadSelection) == 0x0002A0, "Wrong size on USQSquadSelection");
static_assert(offsetof(USQSquadSelection, OwnerPlayerController) == 0x000268, "Member 'USQSquadSelection::OwnerPlayerController' has a wrong offset!");
static_assert(offsetof(USQSquadSelection, CreateSquadCanvas) == 0x000270, "Member 'USQSquadSelection::CreateSquadCanvas' has a wrong offset!");
static_assert(offsetof(USQSquadSelection, CreateSquadButton) == 0x000278, "Member 'USQSquadSelection::CreateSquadButton' has a wrong offset!");
static_assert(offsetof(USQSquadSelection, SquadNameTextBox) == 0x000280, "Member 'USQSquadSelection::SquadNameTextBox' has a wrong offset!");
static_assert(offsetof(USQSquadSelection, SquadsList) == 0x000288, "Member 'USQSquadSelection::SquadsList' has a wrong offset!");
static_assert(offsetof(USQSquadSelection, OnNewSquadCreated) == 0x000290, "Member 'USQSquadSelection::OnNewSquadCreated' has a wrong offset!");

// Class Squad.SQGraphicsLibrary
// 0x0000 (0x0028 - 0x0028)
class USQGraphicsLibrary final : public USQBlueprintLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGraphicsLibrary">();
	}
	static class USQGraphicsLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQGraphicsLibrary>();
	}
};
static_assert(alignof(USQGraphicsLibrary) == 0x000008, "Wrong alignment on USQGraphicsLibrary");
static_assert(sizeof(USQGraphicsLibrary) == 0x000028, "Wrong size on USQGraphicsLibrary");

// Class Squad.SQSquadStateData
// 0x0048 (0x00F0 - 0x00A8)
class USQSquadStateData : public USQCoreStateData
{
public:
	ESQMapMarkerVisibleTo                         Visibility;                                        // 0x00A8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E9[0x7];                                     // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class APawn>>              AdminTypes;                                        // 0x00B0(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bVisibleWhenNeutral;                               // 0x00C0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11EA[0x7];                                     // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQSquadState*                          SquadState;                                        // 0x00C8(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SquadId;                                           // 0x00D0(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamId;                                            // 0x00D4(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11EB[0x8];                                     // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQSquadState*                          CachedSquadState;                                  // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11EC[0x8];                                     // 0x00E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadStateData">();
	}
	static class USQSquadStateData* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSquadStateData>();
	}
};
static_assert(alignof(USQSquadStateData) == 0x000008, "Wrong alignment on USQSquadStateData");
static_assert(sizeof(USQSquadStateData) == 0x0000F0, "Wrong size on USQSquadStateData");
static_assert(offsetof(USQSquadStateData, Visibility) == 0x0000A8, "Member 'USQSquadStateData::Visibility' has a wrong offset!");
static_assert(offsetof(USQSquadStateData, AdminTypes) == 0x0000B0, "Member 'USQSquadStateData::AdminTypes' has a wrong offset!");
static_assert(offsetof(USQSquadStateData, bVisibleWhenNeutral) == 0x0000C0, "Member 'USQSquadStateData::bVisibleWhenNeutral' has a wrong offset!");
static_assert(offsetof(USQSquadStateData, SquadState) == 0x0000C8, "Member 'USQSquadStateData::SquadState' has a wrong offset!");
static_assert(offsetof(USQSquadStateData, SquadId) == 0x0000D0, "Member 'USQSquadStateData::SquadId' has a wrong offset!");
static_assert(offsetof(USQSquadStateData, TeamId) == 0x0000D4, "Member 'USQSquadStateData::TeamId' has a wrong offset!");
static_assert(offsetof(USQSquadStateData, CachedSquadState) == 0x0000E0, "Member 'USQSquadStateData::CachedSquadState' has a wrong offset!");

// Class Squad.SQSquadStateMapData
// 0x0068 (0x0158 - 0x00F0)
class USQSquadStateMapData : public USQSquadStateData
{
public:
	uint8                                         Pad_11ED[0x8];                                     // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USQCoreStateMapWidget>      MapWidgetClass;                                    // 0x00F8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WorldLocationTolerance;                            // 0x0100(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterpolateWorldLocation;                         // 0x0104(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseWorldRotation;                                 // 0x0105(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11EE[0x2];                                     // 0x0106(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         YawTolerance;                                      // 0x0108(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterpolateYaw;                                   // 0x010C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11EF[0x3];                                     // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldLocation;                                     // 0x0110(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x011C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PackedYaw;                                         // 0x0120(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11F0[0xB];                                     // 0x0121(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize                    RepWorldLocation;                                  // 0x012C(0x000C)(Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11F1[0x20];                                    // 0x0138(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadStateMapData">();
	}
	static class USQSquadStateMapData* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSquadStateMapData>();
	}
};
static_assert(alignof(USQSquadStateMapData) == 0x000008, "Wrong alignment on USQSquadStateMapData");
static_assert(sizeof(USQSquadStateMapData) == 0x000158, "Wrong size on USQSquadStateMapData");
static_assert(offsetof(USQSquadStateMapData, MapWidgetClass) == 0x0000F8, "Member 'USQSquadStateMapData::MapWidgetClass' has a wrong offset!");
static_assert(offsetof(USQSquadStateMapData, WorldLocationTolerance) == 0x000100, "Member 'USQSquadStateMapData::WorldLocationTolerance' has a wrong offset!");
static_assert(offsetof(USQSquadStateMapData, bInterpolateWorldLocation) == 0x000104, "Member 'USQSquadStateMapData::bInterpolateWorldLocation' has a wrong offset!");
static_assert(offsetof(USQSquadStateMapData, bUseWorldRotation) == 0x000105, "Member 'USQSquadStateMapData::bUseWorldRotation' has a wrong offset!");
static_assert(offsetof(USQSquadStateMapData, YawTolerance) == 0x000108, "Member 'USQSquadStateMapData::YawTolerance' has a wrong offset!");
static_assert(offsetof(USQSquadStateMapData, bInterpolateYaw) == 0x00010C, "Member 'USQSquadStateMapData::bInterpolateYaw' has a wrong offset!");
static_assert(offsetof(USQSquadStateMapData, WorldLocation) == 0x000110, "Member 'USQSquadStateMapData::WorldLocation' has a wrong offset!");
static_assert(offsetof(USQSquadStateMapData, Yaw) == 0x00011C, "Member 'USQSquadStateMapData::Yaw' has a wrong offset!");
static_assert(offsetof(USQSquadStateMapData, PackedYaw) == 0x000120, "Member 'USQSquadStateMapData::PackedYaw' has a wrong offset!");
static_assert(offsetof(USQSquadStateMapData, RepWorldLocation) == 0x00012C, "Member 'USQSquadStateMapData::RepWorldLocation' has a wrong offset!");

// Class Squad.SQSquadStateDataDeployable
// 0x0008 (0x0160 - 0x0158)
class USQSquadStateDataDeployable : public USQSquadStateMapData
{
public:
	ESQBuildState                                 BuildState;                                        // 0x0158(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11F2[0x7];                                     // 0x0159(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadStateDataDeployable">();
	}
	static class USQSquadStateDataDeployable* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSquadStateDataDeployable>();
	}
};
static_assert(alignof(USQSquadStateDataDeployable) == 0x000008, "Wrong alignment on USQSquadStateDataDeployable");
static_assert(sizeof(USQSquadStateDataDeployable) == 0x000160, "Wrong size on USQSquadStateDataDeployable");
static_assert(offsetof(USQSquadStateDataDeployable, BuildState) == 0x000158, "Member 'USQSquadStateDataDeployable::BuildState' has a wrong offset!");

// Class Squad.RouteSelectorPredicate2
// 0x0000 (0x0030 - 0x0030)
class URouteSelectorPredicate2 final : public URouteSelectorPredicate
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RouteSelectorPredicate2">();
	}
	static class URouteSelectorPredicate2* GetDefaultObj()
	{
		return GetDefaultObjImpl<URouteSelectorPredicate2>();
	}
};
static_assert(alignof(URouteSelectorPredicate2) == 0x000008, "Wrong alignment on URouteSelectorPredicate2");
static_assert(sizeof(URouteSelectorPredicate2) == 0x000030, "Wrong size on URouteSelectorPredicate2");

// Class Squad.SQVehicleCleanupComponent
// 0x0030 (0x00E0 - 0x00B0)
class USQVehicleCleanupComponent final : public UActorComponent
{
public:
	class USQVehicleCleanupDataAsset*             CleanupStaticInfo;                                 // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11F3[0x8];                                     // 0x00B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQVehicle*                             OwnerVehicle;                                      // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_11F4[0x18];                                    // 0x00C8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ResetDestructionTimer();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleCleanupComponent">();
	}
	static class USQVehicleCleanupComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleCleanupComponent>();
	}
};
static_assert(alignof(USQVehicleCleanupComponent) == 0x000008, "Wrong alignment on USQVehicleCleanupComponent");
static_assert(sizeof(USQVehicleCleanupComponent) == 0x0000E0, "Wrong size on USQVehicleCleanupComponent");
static_assert(offsetof(USQVehicleCleanupComponent, CleanupStaticInfo) == 0x0000B0, "Member 'USQVehicleCleanupComponent::CleanupStaticInfo' has a wrong offset!");
static_assert(offsetof(USQVehicleCleanupComponent, OwnerVehicle) == 0x0000C0, "Member 'USQVehicleCleanupComponent::OwnerVehicle' has a wrong offset!");

// Class Squad.RouteCombinerPredicate2
// 0x0000 (0x0028 - 0x0028)
class URouteCombinerPredicate2 final : public URouteCombinerPredicate
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RouteCombinerPredicate2">();
	}
	static class URouteCombinerPredicate2* GetDefaultObj()
	{
		return GetDefaultObjImpl<URouteCombinerPredicate2>();
	}
};
static_assert(alignof(URouteCombinerPredicate2) == 0x000008, "Wrong alignment on URouteCombinerPredicate2");
static_assert(sizeof(URouteCombinerPredicate2) == 0x000028, "Wrong size on URouteCombinerPredicate2");

// Class Squad.SQGraphRAASVisualizerComponent
// 0x0018 (0x00D8 - 0x00C0)
class USQGraphRAASVisualizerComponent final : public USQGraphAASVisualizerComponent
{
public:
	uint8                                         Pad_11F5[0x10];                                    // 0x00C0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RouteIndex;                                        // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11F6[0x4];                                     // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UpdateCachedRoutes();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGraphRAASVisualizerComponent">();
	}
	static class USQGraphRAASVisualizerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQGraphRAASVisualizerComponent>();
	}
};
static_assert(alignof(USQGraphRAASVisualizerComponent) == 0x000008, "Wrong alignment on USQGraphRAASVisualizerComponent");
static_assert(sizeof(USQGraphRAASVisualizerComponent) == 0x0000D8, "Wrong size on USQGraphRAASVisualizerComponent");
static_assert(offsetof(USQGraphRAASVisualizerComponent, RouteIndex) == 0x0000D0, "Member 'USQGraphRAASVisualizerComponent::RouteIndex' has a wrong offset!");

// Class Squad.SQVehicleEmergencyRecoveryComponent
// 0x0098 (0x0148 - 0x00B0)
class USQVehicleEmergencyRecoveryComponent final : public UActorComponent
{
public:
	float                                         EmergencyTeleportCooldownSeconds;                  // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastEmergencyTeleportTimestamp;                    // 0x00B4(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQEmergencyRecoverySettings*           RecoverySettings;                                  // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<ESQVehicleRecoveryMethod>                RecoveryMethodsAvailable;                          // 0x00C0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         HeightOffset;                                      // 0x0110(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PushStrength;                                      // 0x0114(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalBoostStrength;                             // 0x0118(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11F7[0x4];                                     // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             CooldownFinishedDelegate;                          // 0x0120(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             CooldownStartDelegate;                             // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_11F8[0x8];                                     // 0x0140(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CustomRecoveryMulticast(class ASQVehicle* Vehicle, class AActor* Instigator);
	void EmergencyRecovery(class AActor* Instigator, ESQVehicleRecoveryMethod RecoveryMethod, float DesiredYawRotation);
	void OnRep_LastEmergencyTeleportTimestamp();
	void TeleportVehicleMulticast(class ASQVehicle* Vehicle, const struct FVector& Position, const struct FRotator& Rotation);

	bool CanUseEmergencyRecovery(ESQVehicleRecoveryMethod RecoveryMethod) const;
	class ASQVehicle* GetOwningVehicle() const;
	float GetRemainingRecoverCooldown() const;
	bool IsRecoveryOnCooldown() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleEmergencyRecoveryComponent">();
	}
	static class USQVehicleEmergencyRecoveryComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleEmergencyRecoveryComponent>();
	}
};
static_assert(alignof(USQVehicleEmergencyRecoveryComponent) == 0x000008, "Wrong alignment on USQVehicleEmergencyRecoveryComponent");
static_assert(sizeof(USQVehicleEmergencyRecoveryComponent) == 0x000148, "Wrong size on USQVehicleEmergencyRecoveryComponent");
static_assert(offsetof(USQVehicleEmergencyRecoveryComponent, EmergencyTeleportCooldownSeconds) == 0x0000B0, "Member 'USQVehicleEmergencyRecoveryComponent::EmergencyTeleportCooldownSeconds' has a wrong offset!");
static_assert(offsetof(USQVehicleEmergencyRecoveryComponent, LastEmergencyTeleportTimestamp) == 0x0000B4, "Member 'USQVehicleEmergencyRecoveryComponent::LastEmergencyTeleportTimestamp' has a wrong offset!");
static_assert(offsetof(USQVehicleEmergencyRecoveryComponent, RecoverySettings) == 0x0000B8, "Member 'USQVehicleEmergencyRecoveryComponent::RecoverySettings' has a wrong offset!");
static_assert(offsetof(USQVehicleEmergencyRecoveryComponent, RecoveryMethodsAvailable) == 0x0000C0, "Member 'USQVehicleEmergencyRecoveryComponent::RecoveryMethodsAvailable' has a wrong offset!");
static_assert(offsetof(USQVehicleEmergencyRecoveryComponent, HeightOffset) == 0x000110, "Member 'USQVehicleEmergencyRecoveryComponent::HeightOffset' has a wrong offset!");
static_assert(offsetof(USQVehicleEmergencyRecoveryComponent, PushStrength) == 0x000114, "Member 'USQVehicleEmergencyRecoveryComponent::PushStrength' has a wrong offset!");
static_assert(offsetof(USQVehicleEmergencyRecoveryComponent, VerticalBoostStrength) == 0x000118, "Member 'USQVehicleEmergencyRecoveryComponent::VerticalBoostStrength' has a wrong offset!");
static_assert(offsetof(USQVehicleEmergencyRecoveryComponent, CooldownFinishedDelegate) == 0x000120, "Member 'USQVehicleEmergencyRecoveryComponent::CooldownFinishedDelegate' has a wrong offset!");
static_assert(offsetof(USQVehicleEmergencyRecoveryComponent, CooldownStartDelegate) == 0x000130, "Member 'USQVehicleEmergencyRecoveryComponent::CooldownStartDelegate' has a wrong offset!");

// Class Squad.SQGrenadeStaticInfo
// 0x0080 (0x0670 - 0x05F0)
class USQGrenadeStaticInfo : public USQItemStaticInfo
{
public:
	class UAnimMontage*                           WeaponOverhandPinpull1pMontage;                    // 0x05F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           WeaponOverhandPinpull3pMontage;                    // 0x05F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           OverhandPinpull1pMontage;                          // 0x0600(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           OverhandPinpull3pMontage;                          // 0x0608(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           WeaponOverhandThrow1pMontage;                      // 0x0610(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           WeaponOverhandThrow3pMontage;                      // 0x0618(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           OverhandThrow1pMontage;                            // 0x0620(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           OverhandThrow3pMontage;                            // 0x0628(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           WeaponUnderhandPinpull1pMontage;                   // 0x0630(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           WeaponUnderhandPinpull3pMontage;                   // 0x0638(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           UnderhandPinpull1pMontage;                         // 0x0640(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           UnderhandPinpull3pMontage;                         // 0x0648(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           WeaponUnderhandThrow1pMontage;                     // 0x0650(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           WeaponUnderhandThrow3pMontage;                     // 0x0658(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           UnderhandThrow1pMontage;                           // 0x0660(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           UnderhandThrow3pMontage;                           // 0x0668(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGrenadeStaticInfo">();
	}
	static class USQGrenadeStaticInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQGrenadeStaticInfo>();
	}
};
static_assert(alignof(USQGrenadeStaticInfo) == 0x000008, "Wrong alignment on USQGrenadeStaticInfo");
static_assert(sizeof(USQGrenadeStaticInfo) == 0x000670, "Wrong size on USQGrenadeStaticInfo");
static_assert(offsetof(USQGrenadeStaticInfo, WeaponOverhandPinpull1pMontage) == 0x0005F0, "Member 'USQGrenadeStaticInfo::WeaponOverhandPinpull1pMontage' has a wrong offset!");
static_assert(offsetof(USQGrenadeStaticInfo, WeaponOverhandPinpull3pMontage) == 0x0005F8, "Member 'USQGrenadeStaticInfo::WeaponOverhandPinpull3pMontage' has a wrong offset!");
static_assert(offsetof(USQGrenadeStaticInfo, OverhandPinpull1pMontage) == 0x000600, "Member 'USQGrenadeStaticInfo::OverhandPinpull1pMontage' has a wrong offset!");
static_assert(offsetof(USQGrenadeStaticInfo, OverhandPinpull3pMontage) == 0x000608, "Member 'USQGrenadeStaticInfo::OverhandPinpull3pMontage' has a wrong offset!");
static_assert(offsetof(USQGrenadeStaticInfo, WeaponOverhandThrow1pMontage) == 0x000610, "Member 'USQGrenadeStaticInfo::WeaponOverhandThrow1pMontage' has a wrong offset!");
static_assert(offsetof(USQGrenadeStaticInfo, WeaponOverhandThrow3pMontage) == 0x000618, "Member 'USQGrenadeStaticInfo::WeaponOverhandThrow3pMontage' has a wrong offset!");
static_assert(offsetof(USQGrenadeStaticInfo, OverhandThrow1pMontage) == 0x000620, "Member 'USQGrenadeStaticInfo::OverhandThrow1pMontage' has a wrong offset!");
static_assert(offsetof(USQGrenadeStaticInfo, OverhandThrow3pMontage) == 0x000628, "Member 'USQGrenadeStaticInfo::OverhandThrow3pMontage' has a wrong offset!");
static_assert(offsetof(USQGrenadeStaticInfo, WeaponUnderhandPinpull1pMontage) == 0x000630, "Member 'USQGrenadeStaticInfo::WeaponUnderhandPinpull1pMontage' has a wrong offset!");
static_assert(offsetof(USQGrenadeStaticInfo, WeaponUnderhandPinpull3pMontage) == 0x000638, "Member 'USQGrenadeStaticInfo::WeaponUnderhandPinpull3pMontage' has a wrong offset!");
static_assert(offsetof(USQGrenadeStaticInfo, UnderhandPinpull1pMontage) == 0x000640, "Member 'USQGrenadeStaticInfo::UnderhandPinpull1pMontage' has a wrong offset!");
static_assert(offsetof(USQGrenadeStaticInfo, UnderhandPinpull3pMontage) == 0x000648, "Member 'USQGrenadeStaticInfo::UnderhandPinpull3pMontage' has a wrong offset!");
static_assert(offsetof(USQGrenadeStaticInfo, WeaponUnderhandThrow1pMontage) == 0x000650, "Member 'USQGrenadeStaticInfo::WeaponUnderhandThrow1pMontage' has a wrong offset!");
static_assert(offsetof(USQGrenadeStaticInfo, WeaponUnderhandThrow3pMontage) == 0x000658, "Member 'USQGrenadeStaticInfo::WeaponUnderhandThrow3pMontage' has a wrong offset!");
static_assert(offsetof(USQGrenadeStaticInfo, UnderhandThrow1pMontage) == 0x000660, "Member 'USQGrenadeStaticInfo::UnderhandThrow1pMontage' has a wrong offset!");
static_assert(offsetof(USQGrenadeStaticInfo, UnderhandThrow3pMontage) == 0x000668, "Member 'USQGrenadeStaticInfo::UnderhandThrow3pMontage' has a wrong offset!");

// Class Squad.SQGridMarkerBase
// 0x0088 (0x02F0 - 0x0268)
class USQGridMarkerBase final : public USQUserWidget
{
public:
	bool                                          bDrawVerticalNumbers;                              // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDrawHorizontalLetters;                            // 0x0269(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_11FA[0x6];                                     // 0x026A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         GridMarkerFontInfo;                                // 0x0270(0x0058)(Edit, BlueprintVisible, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           GridMarkerFontColor;                               // 0x02C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              GridMarkerFontOffset;                              // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESQTextHorizontalAlignment                    HorizontalAlignment;                               // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESQTextVerticalAlignment                      VerticalAlignment;                                 // 0x02E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_11FB[0x6];                                     // 0x02E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USQMap*                                 OwnerMap;                                          // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static void DrawWidget(class USQGridMarkerBase* MapGridMarker, struct FPaintContext& Context);

	void InitWidget();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGridMarkerBase">();
	}
	static class USQGridMarkerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQGridMarkerBase>();
	}
};
static_assert(alignof(USQGridMarkerBase) == 0x000008, "Wrong alignment on USQGridMarkerBase");
static_assert(sizeof(USQGridMarkerBase) == 0x0002F0, "Wrong size on USQGridMarkerBase");
static_assert(offsetof(USQGridMarkerBase, bDrawVerticalNumbers) == 0x000268, "Member 'USQGridMarkerBase::bDrawVerticalNumbers' has a wrong offset!");
static_assert(offsetof(USQGridMarkerBase, bDrawHorizontalLetters) == 0x000269, "Member 'USQGridMarkerBase::bDrawHorizontalLetters' has a wrong offset!");
static_assert(offsetof(USQGridMarkerBase, GridMarkerFontInfo) == 0x000270, "Member 'USQGridMarkerBase::GridMarkerFontInfo' has a wrong offset!");
static_assert(offsetof(USQGridMarkerBase, GridMarkerFontColor) == 0x0002C8, "Member 'USQGridMarkerBase::GridMarkerFontColor' has a wrong offset!");
static_assert(offsetof(USQGridMarkerBase, GridMarkerFontOffset) == 0x0002D8, "Member 'USQGridMarkerBase::GridMarkerFontOffset' has a wrong offset!");
static_assert(offsetof(USQGridMarkerBase, HorizontalAlignment) == 0x0002E0, "Member 'USQGridMarkerBase::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(USQGridMarkerBase, VerticalAlignment) == 0x0002E1, "Member 'USQGridMarkerBase::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(USQGridMarkerBase, OwnerMap) == 0x0002E8, "Member 'USQGridMarkerBase::OwnerMap' has a wrong offset!");

// Class Squad.SQVehicleMovementCommonSystems
// 0x0010 (0x0038 - 0x0028)
class USQVehicleMovementCommonSystems final : public UObject
{
public:
	class USQWaterMovementComponent*              VehicleWaterMovement;                              // 0x0028(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWheeledVehicleMovementComponent*       OwningMovementComponent;                           // 0x0030(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool TrySpawnWaterMovementComponent(class UObject* Param_Outer, TSubclassOf<class USQWaterMovementComponent> ComponentToSpawn, class USQWaterMovementComponent** OutWaterMovementComponent);

	float TryGetWaterMovementForwardSpeed(float GroundSpeed, int32 WheelCount) const;
	float TryGetWaterMovementMaxRotationSpeed(float OriginalMaxRotationSpeed, int32 WheelCount) const;
	float TryGetWaterMovementRotationSpeed(float OriginalRotationSpeed, int32 WheelCount) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleMovementCommonSystems">();
	}
	static class USQVehicleMovementCommonSystems* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleMovementCommonSystems>();
	}
};
static_assert(alignof(USQVehicleMovementCommonSystems) == 0x000008, "Wrong alignment on USQVehicleMovementCommonSystems");
static_assert(sizeof(USQVehicleMovementCommonSystems) == 0x000038, "Wrong size on USQVehicleMovementCommonSystems");
static_assert(offsetof(USQVehicleMovementCommonSystems, VehicleWaterMovement) == 0x000028, "Member 'USQVehicleMovementCommonSystems::VehicleWaterMovement' has a wrong offset!");
static_assert(offsetof(USQVehicleMovementCommonSystems, OwningMovementComponent) == 0x000030, "Member 'USQVehicleMovementCommonSystems::OwningMovementComponent' has a wrong offset!");

// Class Squad.SQGridMarkerUnit
// 0x0018 (0x0280 - 0x0268)
class USQGridMarkerUnit final : public USQUserWidget
{
public:
	bool                                          bIsVertical;                                       // 0x0268(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11FD[0x3];                                     // 0x0269(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultSize;                                       // 0x026C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanel*                           SizeCanvas;                                        // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             TextBlock;                                         // 0x0278(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetBoxSize(const float NewSize);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGridMarkerUnit">();
	}
	static class USQGridMarkerUnit* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQGridMarkerUnit>();
	}
};
static_assert(alignof(USQGridMarkerUnit) == 0x000008, "Wrong alignment on USQGridMarkerUnit");
static_assert(sizeof(USQGridMarkerUnit) == 0x000280, "Wrong size on USQGridMarkerUnit");
static_assert(offsetof(USQGridMarkerUnit, bIsVertical) == 0x000268, "Member 'USQGridMarkerUnit::bIsVertical' has a wrong offset!");
static_assert(offsetof(USQGridMarkerUnit, DefaultSize) == 0x00026C, "Member 'USQGridMarkerUnit::DefaultSize' has a wrong offset!");
static_assert(offsetof(USQGridMarkerUnit, SizeCanvas) == 0x000270, "Member 'USQGridMarkerUnit::SizeCanvas' has a wrong offset!");
static_assert(offsetof(USQGridMarkerUnit, TextBlock) == 0x000278, "Member 'USQGridMarkerUnit::TextBlock' has a wrong offset!");

// Class Squad.SQGuidanceComponent
// 0x0178 (0x0228 - 0x00B0)
class USQGuidanceComponent final : public UActorComponent
{
public:
	class ASQProjectile*                          Projectile;                                        // 0x00B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQProjectileMovement*                  ProjMovement;                                      // 0x00B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                GuiderOrTarget;                                    // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<ECollisionChannel>                       LineOfSightBlockers;                               // 0x00C8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSet<ECollisionChannel>                       LineOfSightSnaggers;                               // 0x0118(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         AimMaxDistance;                                    // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FOVChangeDistance;                                 // 0x016C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LargeTrackedFOV;                                   // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmallTrackedFOV;                                   // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            TrackedFOVByDistanceCurve;                         // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GuidanceDelay;                                     // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndTargetPoint;                                    // 0x0184(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JitterSeed;                                        // 0x0190(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuidanceLossBehaviour                        GuidanceLossBehaviour;                             // 0x0194(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11FE[0x3];                                     // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnConnectionLost;                                  // 0x0198(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnGuidanceLost;                                    // 0x01A8(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnGuidanceGained;                                  // 0x01B8(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         TimeBeforeDetonationAfterGuidanceLoss;             // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentTrackedFOV;                                 // 0x01CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_11FF[0x58];                                    // 0x01D0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void LoseConnection(const EGuidanceLossReason LossReason);
	void LoseGuidance(const EGuidanceLossReason LossReason);
	void RegainGuidance();
	void StartLaunchPhase(class USQGuidanceControllerComponent* GuidanceController);
	bool TryGainGuidance();

	bool IsBeingGuided() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGuidanceComponent">();
	}
	static class USQGuidanceComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQGuidanceComponent>();
	}
};
static_assert(alignof(USQGuidanceComponent) == 0x000008, "Wrong alignment on USQGuidanceComponent");
static_assert(sizeof(USQGuidanceComponent) == 0x000228, "Wrong size on USQGuidanceComponent");
static_assert(offsetof(USQGuidanceComponent, Projectile) == 0x0000B0, "Member 'USQGuidanceComponent::Projectile' has a wrong offset!");
static_assert(offsetof(USQGuidanceComponent, ProjMovement) == 0x0000B8, "Member 'USQGuidanceComponent::ProjMovement' has a wrong offset!");
static_assert(offsetof(USQGuidanceComponent, GuiderOrTarget) == 0x0000C0, "Member 'USQGuidanceComponent::GuiderOrTarget' has a wrong offset!");
static_assert(offsetof(USQGuidanceComponent, LineOfSightBlockers) == 0x0000C8, "Member 'USQGuidanceComponent::LineOfSightBlockers' has a wrong offset!");
static_assert(offsetof(USQGuidanceComponent, LineOfSightSnaggers) == 0x000118, "Member 'USQGuidanceComponent::LineOfSightSnaggers' has a wrong offset!");
static_assert(offsetof(USQGuidanceComponent, AimMaxDistance) == 0x000168, "Member 'USQGuidanceComponent::AimMaxDistance' has a wrong offset!");
static_assert(offsetof(USQGuidanceComponent, FOVChangeDistance) == 0x00016C, "Member 'USQGuidanceComponent::FOVChangeDistance' has a wrong offset!");
static_assert(offsetof(USQGuidanceComponent, LargeTrackedFOV) == 0x000170, "Member 'USQGuidanceComponent::LargeTrackedFOV' has a wrong offset!");
static_assert(offsetof(USQGuidanceComponent, SmallTrackedFOV) == 0x000174, "Member 'USQGuidanceComponent::SmallTrackedFOV' has a wrong offset!");
static_assert(offsetof(USQGuidanceComponent, TrackedFOVByDistanceCurve) == 0x000178, "Member 'USQGuidanceComponent::TrackedFOVByDistanceCurve' has a wrong offset!");
static_assert(offsetof(USQGuidanceComponent, GuidanceDelay) == 0x000180, "Member 'USQGuidanceComponent::GuidanceDelay' has a wrong offset!");
static_assert(offsetof(USQGuidanceComponent, EndTargetPoint) == 0x000184, "Member 'USQGuidanceComponent::EndTargetPoint' has a wrong offset!");
static_assert(offsetof(USQGuidanceComponent, JitterSeed) == 0x000190, "Member 'USQGuidanceComponent::JitterSeed' has a wrong offset!");
static_assert(offsetof(USQGuidanceComponent, GuidanceLossBehaviour) == 0x000194, "Member 'USQGuidanceComponent::GuidanceLossBehaviour' has a wrong offset!");
static_assert(offsetof(USQGuidanceComponent, OnConnectionLost) == 0x000198, "Member 'USQGuidanceComponent::OnConnectionLost' has a wrong offset!");
static_assert(offsetof(USQGuidanceComponent, OnGuidanceLost) == 0x0001A8, "Member 'USQGuidanceComponent::OnGuidanceLost' has a wrong offset!");
static_assert(offsetof(USQGuidanceComponent, OnGuidanceGained) == 0x0001B8, "Member 'USQGuidanceComponent::OnGuidanceGained' has a wrong offset!");
static_assert(offsetof(USQGuidanceComponent, TimeBeforeDetonationAfterGuidanceLoss) == 0x0001C8, "Member 'USQGuidanceComponent::TimeBeforeDetonationAfterGuidanceLoss' has a wrong offset!");
static_assert(offsetof(USQGuidanceComponent, CurrentTrackedFOV) == 0x0001CC, "Member 'USQGuidanceComponent::CurrentTrackedFOV' has a wrong offset!");

// Class Squad.SQVehicleSettings
// 0x0000 (0x0060 - 0x0060)
class USQVehicleSettings : public USQSettings
{
public:
	bool ShouldCauseSieged(const class ASQGameSpawn* Spawn) const;
	bool TryGetVehicleWithLayer(const class USQLayer* InLayer, TSoftClassPtr<class UClass>* OutVehicle) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleSettings">();
	}
	static class USQVehicleSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleSettings>();
	}
};
static_assert(alignof(USQVehicleSettings) == 0x000008, "Wrong alignment on USQVehicleSettings");
static_assert(sizeof(USQVehicleSettings) == 0x000060, "Wrong size on USQVehicleSettings");

// Class Squad.SQMortarProjectile
// 0x00A0 (0x0518 - 0x0478)
class ASQMortarProjectile : public ASQProjectile
{
public:
	uint8                                         Pad_1202[0x18];                                    // 0x0478(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        SmokeParticleEffect;                               // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NiagaraSmokeParticleEffect;                        // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              SmokeSoundCue;                                     // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SmokeColor;                                        // 0x04A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearGroundTriggerDistance;                         // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinFlightTime;                                     // 0x04BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWatchFlightTime;                                  // 0x04C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldDestroyByLifespan;                          // 0x04C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1203[0x6];                                     // 0x04C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 LastingEffectClass;                                // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpactDamageToApply;                               // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1204[0x28];                                    // 0x04DC(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class ASQLastingEffect>        LastingEffectActor;                                // 0x0504(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1205[0xC];                                     // 0x050C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void SpawnArtilleryProjectile(TSubclassOf<class ASQMortarProjectile> ProjectileClass, class AController* InstigatorController, class AActor* ProjectileOwner, const struct FVector& Location, const struct FRotator& Rotation, float InitialVelocity, bool bCreatedOnServer);

	void BPOnBeginDescending();
	void BPOnNearGroundDistanceReached();
	void CreateSmoke();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMortarProjectile">();
	}
	static class ASQMortarProjectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQMortarProjectile>();
	}
};
static_assert(alignof(ASQMortarProjectile) == 0x000008, "Wrong alignment on ASQMortarProjectile");
static_assert(sizeof(ASQMortarProjectile) == 0x000518, "Wrong size on ASQMortarProjectile");
static_assert(offsetof(ASQMortarProjectile, SmokeParticleEffect) == 0x000490, "Member 'ASQMortarProjectile::SmokeParticleEffect' has a wrong offset!");
static_assert(offsetof(ASQMortarProjectile, NiagaraSmokeParticleEffect) == 0x000498, "Member 'ASQMortarProjectile::NiagaraSmokeParticleEffect' has a wrong offset!");
static_assert(offsetof(ASQMortarProjectile, SmokeSoundCue) == 0x0004A0, "Member 'ASQMortarProjectile::SmokeSoundCue' has a wrong offset!");
static_assert(offsetof(ASQMortarProjectile, SmokeColor) == 0x0004A8, "Member 'ASQMortarProjectile::SmokeColor' has a wrong offset!");
static_assert(offsetof(ASQMortarProjectile, NearGroundTriggerDistance) == 0x0004B8, "Member 'ASQMortarProjectile::NearGroundTriggerDistance' has a wrong offset!");
static_assert(offsetof(ASQMortarProjectile, MinFlightTime) == 0x0004BC, "Member 'ASQMortarProjectile::MinFlightTime' has a wrong offset!");
static_assert(offsetof(ASQMortarProjectile, bWatchFlightTime) == 0x0004C0, "Member 'ASQMortarProjectile::bWatchFlightTime' has a wrong offset!");
static_assert(offsetof(ASQMortarProjectile, bShouldDestroyByLifespan) == 0x0004C1, "Member 'ASQMortarProjectile::bShouldDestroyByLifespan' has a wrong offset!");
static_assert(offsetof(ASQMortarProjectile, LastingEffectClass) == 0x0004C8, "Member 'ASQMortarProjectile::LastingEffectClass' has a wrong offset!");
static_assert(offsetof(ASQMortarProjectile, SocketName) == 0x0004D0, "Member 'ASQMortarProjectile::SocketName' has a wrong offset!");
static_assert(offsetof(ASQMortarProjectile, ImpactDamageToApply) == 0x0004D8, "Member 'ASQMortarProjectile::ImpactDamageToApply' has a wrong offset!");
static_assert(offsetof(ASQMortarProjectile, LastingEffectActor) == 0x000504, "Member 'ASQMortarProjectile::LastingEffectActor' has a wrong offset!");

// Class Squad.SQGuidedProjectile
// 0x0018 (0x0530 - 0x0518)
class ASQGuidedProjectile : public ASQMortarProjectile
{
public:
	class USQGuidanceComponent*                   GuidanceComponent;                                 // 0x0518(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WireDropParamName;                                 // 0x0520(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MuzzlePositionParamName;                           // 0x0528(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnConnectionLost(class USQGuidanceComponent* InGuidanceComponent, const EGuidanceLossReason LossReason);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQGuidedProjectile">();
	}
	static class ASQGuidedProjectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQGuidedProjectile>();
	}
};
static_assert(alignof(ASQGuidedProjectile) == 0x000008, "Wrong alignment on ASQGuidedProjectile");
static_assert(sizeof(ASQGuidedProjectile) == 0x000530, "Wrong size on ASQGuidedProjectile");
static_assert(offsetof(ASQGuidedProjectile, GuidanceComponent) == 0x000518, "Member 'ASQGuidedProjectile::GuidanceComponent' has a wrong offset!");
static_assert(offsetof(ASQGuidedProjectile, WireDropParamName) == 0x000520, "Member 'ASQGuidedProjectile::WireDropParamName' has a wrong offset!");
static_assert(offsetof(ASQGuidedProjectile, MuzzlePositionParamName) == 0x000528, "Member 'ASQGuidedProjectile::MuzzlePositionParamName' has a wrong offset!");

// Class Squad.SQHelicopter2
// 0x0060 (0x0970 - 0x0910)
class ASQHelicopter2 : public ASQVehicle
{
public:
	uint8                                         Pad_1208[0x8];                                     // 0x0908(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USQVehicleCleanupComponent*             VehicleCleanupComponent;                           // 0x0910(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicsToggleThreshold;                            // 0x0918(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDeltaTime;                                      // 0x091C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FixedTimeStep;                                     // 0x0920(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1209[0x4];                                     // 0x0924(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBoxComponent*                          BoxCollider;                                       // 0x0928(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQHelicopterMovementComponent*         MovementComponent;                                 // 0x0930(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQVehicleEngineComponent*              Engine;                                            // 0x0938(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQRotorBladesComponent*                MainRotor;                                         // 0x0940(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQRotorBladesComponent*                TailRotor;                                         // 0x0948(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                   MainBladesCollision;                               // 0x0950(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                   TailBladesCollision;                               // 0x0958(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_120A[0x10];                                    // 0x0960(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EnablePhysicsSimulation(bool bSimulate);
	void MainRotorDestroyedHandler(class USQVehicleComponent* VehicleComponent);

	float GetMainRotorThrust() const;
	int32 GetMaxRPM() const;
	float GetTailRotorThrust() const;
	float GetThrottle() const;
	bool IsLanded() const;
	bool IsMainRotorColliding() const;
	bool IsPhysicsEnabled() const;
	bool IsTailRotorColliding() const;
	struct FRotator SlerpToUpSideDown(float AngleRad) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQHelicopter2">();
	}
	static class ASQHelicopter2* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQHelicopter2>();
	}
};
static_assert(alignof(ASQHelicopter2) == 0x000010, "Wrong alignment on ASQHelicopter2");
static_assert(sizeof(ASQHelicopter2) == 0x000970, "Wrong size on ASQHelicopter2");
static_assert(offsetof(ASQHelicopter2, VehicleCleanupComponent) == 0x000910, "Member 'ASQHelicopter2::VehicleCleanupComponent' has a wrong offset!");
static_assert(offsetof(ASQHelicopter2, PhysicsToggleThreshold) == 0x000918, "Member 'ASQHelicopter2::PhysicsToggleThreshold' has a wrong offset!");
static_assert(offsetof(ASQHelicopter2, MaxDeltaTime) == 0x00091C, "Member 'ASQHelicopter2::MaxDeltaTime' has a wrong offset!");
static_assert(offsetof(ASQHelicopter2, FixedTimeStep) == 0x000920, "Member 'ASQHelicopter2::FixedTimeStep' has a wrong offset!");
static_assert(offsetof(ASQHelicopter2, BoxCollider) == 0x000928, "Member 'ASQHelicopter2::BoxCollider' has a wrong offset!");
static_assert(offsetof(ASQHelicopter2, MovementComponent) == 0x000930, "Member 'ASQHelicopter2::MovementComponent' has a wrong offset!");
static_assert(offsetof(ASQHelicopter2, Engine) == 0x000938, "Member 'ASQHelicopter2::Engine' has a wrong offset!");
static_assert(offsetof(ASQHelicopter2, MainRotor) == 0x000940, "Member 'ASQHelicopter2::MainRotor' has a wrong offset!");
static_assert(offsetof(ASQHelicopter2, TailRotor) == 0x000948, "Member 'ASQHelicopter2::TailRotor' has a wrong offset!");
static_assert(offsetof(ASQHelicopter2, MainBladesCollision) == 0x000950, "Member 'ASQHelicopter2::MainBladesCollision' has a wrong offset!");
static_assert(offsetof(ASQHelicopter2, TailBladesCollision) == 0x000958, "Member 'ASQHelicopter2::TailBladesCollision' has a wrong offset!");

// Class Squad.SQHelicopterInstruments
// 0x0000 (0x0028 - 0x0028)
class ISQHelicopterInstruments final : public IInterface
{
public:
	void SetActivationProgress(float Progress);

	float GetActivationProgress() const;
	float GetForwardSpeed() const;
	float GetLiftInput() const;
	float GetMaxLift() const;
	float GetPitchInput() const;
	float GetRollInput() const;
	float GetYawInput() const;
	bool IsEngineActive() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQHelicopterInstruments">();
	}
	static class ISQHelicopterInstruments* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISQHelicopterInstruments>();
	}
};
static_assert(alignof(ISQHelicopterInstruments) == 0x000008, "Wrong alignment on ISQHelicopterInstruments");
static_assert(sizeof(ISQHelicopterInstruments) == 0x000028, "Wrong size on ISQHelicopterInstruments");

// Class Squad.SQHelicopterMovementComponent
// 0x00C8 (0x0260 - 0x0198)
class USQHelicopterMovementComponent final : public USQMovementComponentBase
{
public:
	float                                         BrakingDecelerationFlying;                         // 0x0198(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFlySpeed;                                       // 0x019C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAcceleration;                                   // 0x01A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AirFriction;                                       // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingFriction;                                   // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingFrictionFactor;                             // 0x01AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearDamping;                                     // 0x01B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_120B[0x4];                                     // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            LinearDampingCurve;                                // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseSeparateBrakingFriction : 1;                   // 0x01C0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_120C[0x3];                                     // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GravityScale;                                      // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnablePhysicsInteraction : 1;                     // 0x01CC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_120D[0x3];                                     // 0x01CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TouchForceFactor;                                  // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTouchForce;                                     // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTouchForce;                                     // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bTouchForceScaledToMass : 1;                       // 0x01DC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_120E[0x3];                                     // 0x01DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PenetrationPullbackDistance;                       // 0x01E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PenetrationOverlapCheckInflation;                  // 0x01E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MoveIgnoreFirstBlockingOverlap;                    // 0x01E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_120F[0x7];                                     // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnImpact;                                          // 0x01F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnRep_Physics;                                     // 0x0200(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         AllowablePositionErrorSquared;                     // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinProxyMovementPredictionSpeed;                   // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnalogInputModifier;                               // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                PendingImpulseToApply;                             // 0x021C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                PendingForceToApply;                               // 0x0228(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bForceMaxAccel : 1;                                // 0x0234(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_1210[0x3];                                     // 0x0235(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  PawnOwner;                                         // 0x0238(0x0008)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPrimitiveComponent*                    UpdatedComponent;                                  // 0x0240(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1211[0x10];                                    // 0x0248(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsSimulatingPhysics;                              // 0x0258(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1212[0x7];                                     // 0x0259(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddForce(const struct FVector& Force);
	void AddImpulse(const struct FVector& Impulse, bool bVelocityChange);
	void AddRotationInput(const struct FRotator& InRotationInput);
	void CapsuleTouched(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnRep_IsSimulatingPhysics();
	void ResetMovementState();

	float GetMaxAcceleration() const;
	float GetMaxBrakingDeceleration() const;
	const struct FRotator GetRotationInput() const;
	bool IsSimulatingPhysics() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQHelicopterMovementComponent">();
	}
	static class USQHelicopterMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQHelicopterMovementComponent>();
	}
};
static_assert(alignof(USQHelicopterMovementComponent) == 0x000008, "Wrong alignment on USQHelicopterMovementComponent");
static_assert(sizeof(USQHelicopterMovementComponent) == 0x000260, "Wrong size on USQHelicopterMovementComponent");
static_assert(offsetof(USQHelicopterMovementComponent, BrakingDecelerationFlying) == 0x000198, "Member 'USQHelicopterMovementComponent::BrakingDecelerationFlying' has a wrong offset!");
static_assert(offsetof(USQHelicopterMovementComponent, MaxFlySpeed) == 0x00019C, "Member 'USQHelicopterMovementComponent::MaxFlySpeed' has a wrong offset!");
static_assert(offsetof(USQHelicopterMovementComponent, MaxAcceleration) == 0x0001A0, "Member 'USQHelicopterMovementComponent::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(USQHelicopterMovementComponent, AirFriction) == 0x0001A4, "Member 'USQHelicopterMovementComponent::AirFriction' has a wrong offset!");
static_assert(offsetof(USQHelicopterMovementComponent, BrakingFriction) == 0x0001A8, "Member 'USQHelicopterMovementComponent::BrakingFriction' has a wrong offset!");
static_assert(offsetof(USQHelicopterMovementComponent, BrakingFrictionFactor) == 0x0001AC, "Member 'USQHelicopterMovementComponent::BrakingFrictionFactor' has a wrong offset!");
static_assert(offsetof(USQHelicopterMovementComponent, LinearDamping) == 0x0001B0, "Member 'USQHelicopterMovementComponent::LinearDamping' has a wrong offset!");
static_assert(offsetof(USQHelicopterMovementComponent, LinearDampingCurve) == 0x0001B8, "Member 'USQHelicopterMovementComponent::LinearDampingCurve' has a wrong offset!");
static_assert(offsetof(USQHelicopterMovementComponent, GravityScale) == 0x0001C4, "Member 'USQHelicopterMovementComponent::GravityScale' has a wrong offset!");
static_assert(offsetof(USQHelicopterMovementComponent, Mass) == 0x0001C8, "Member 'USQHelicopterMovementComponent::Mass' has a wrong offset!");
static_assert(offsetof(USQHelicopterMovementComponent, TouchForceFactor) == 0x0001D0, "Member 'USQHelicopterMovementComponent::TouchForceFactor' has a wrong offset!");
static_assert(offsetof(USQHelicopterMovementComponent, MinTouchForce) == 0x0001D4, "Member 'USQHelicopterMovementComponent::MinTouchForce' has a wrong offset!");
static_assert(offsetof(USQHelicopterMovementComponent, MaxTouchForce) == 0x0001D8, "Member 'USQHelicopterMovementComponent::MaxTouchForce' has a wrong offset!");
static_assert(offsetof(USQHelicopterMovementComponent, PenetrationPullbackDistance) == 0x0001E0, "Member 'USQHelicopterMovementComponent::PenetrationPullbackDistance' has a wrong offset!");
static_assert(offsetof(USQHelicopterMovementComponent, PenetrationOverlapCheckInflation) == 0x0001E4, "Member 'USQHelicopterMovementComponent::PenetrationOverlapCheckInflation' has a wrong offset!");
static_assert(offsetof(USQHelicopterMovementComponent, MoveIgnoreFirstBlockingOverlap) == 0x0001E8, "Member 'USQHelicopterMovementComponent::MoveIgnoreFirstBlockingOverlap' has a wrong offset!");
static_assert(offsetof(USQHelicopterMovementComponent, OnImpact) == 0x0001F0, "Member 'USQHelicopterMovementComponent::OnImpact' has a wrong offset!");
static_assert(offsetof(USQHelicopterMovementComponent, OnRep_Physics) == 0x000200, "Member 'USQHelicopterMovementComponent::OnRep_Physics' has a wrong offset!");
static_assert(offsetof(USQHelicopterMovementComponent, AllowablePositionErrorSquared) == 0x000210, "Member 'USQHelicopterMovementComponent::AllowablePositionErrorSquared' has a wrong offset!");
static_assert(offsetof(USQHelicopterMovementComponent, MinProxyMovementPredictionSpeed) == 0x000214, "Member 'USQHelicopterMovementComponent::MinProxyMovementPredictionSpeed' has a wrong offset!");
static_assert(offsetof(USQHelicopterMovementComponent, AnalogInputModifier) == 0x000218, "Member 'USQHelicopterMovementComponent::AnalogInputModifier' has a wrong offset!");
static_assert(offsetof(USQHelicopterMovementComponent, PendingImpulseToApply) == 0x00021C, "Member 'USQHelicopterMovementComponent::PendingImpulseToApply' has a wrong offset!");
static_assert(offsetof(USQHelicopterMovementComponent, PendingForceToApply) == 0x000228, "Member 'USQHelicopterMovementComponent::PendingForceToApply' has a wrong offset!");
static_assert(offsetof(USQHelicopterMovementComponent, PawnOwner) == 0x000238, "Member 'USQHelicopterMovementComponent::PawnOwner' has a wrong offset!");
static_assert(offsetof(USQHelicopterMovementComponent, UpdatedComponent) == 0x000240, "Member 'USQHelicopterMovementComponent::UpdatedComponent' has a wrong offset!");
static_assert(offsetof(USQHelicopterMovementComponent, bIsSimulatingPhysics) == 0x000258, "Member 'USQHelicopterMovementComponent::bIsSimulatingPhysics' has a wrong offset!");

// Class Squad.SQHUDWidget
// 0x00A8 (0x00D0 - 0x0028)
class USQHUDWidget final : public UObject
{
public:
	TSubclassOf<class UUserWidget>                UMGWidget;                                         // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Position;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OffsetPosition;                                    // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              WidgetOrigin;                                      // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Size;                                              // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZOrder;                                            // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseScreenNormalizedCoordinates;                   // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBypassResolutionScaling;                          // 0x0055(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1215[0x2];                                     // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DesignedResolution;                                // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMaintainOriginalAspectRatio;                      // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1216[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Alpha;                                             // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHidden;                                           // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1217[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQGameState*                           GameState;                                         // 0x0068(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASQHUD*                                 HUD;                                               // 0x0070(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASQPlayerController*                    PlayerController;                                  // 0x0078(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASQPlayerState*                         PlayerState;                                       // 0x0080(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASQSoldier*                             Soldier;                                           // 0x0088(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvas*                                Canvas;                                            // 0x0090(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             DefaultTexture;                                    // 0x0098(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             GradientTexture0;                                  // 0x00A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              CanvasCenter;                                      // 0x00A8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              CanvasSize;                                        // 0x00B0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              DrawingPosition;                                   // 0x00B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              DrawingSize;                                       // 0x00C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DrawingScale;                                      // 0x00C8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1218[0x4];                                     // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Draw(float DeltaTime);
	void Init(class ASQHUD* InHUD);

	void BPDrawMaterial(class UMaterialInterface* Material, float X, float Y, float Width, float Height, float U, float V, float UL, float VL, float DrawingAlpha, const struct FLinearColor& Color, const struct FVector2D& DrawingOffset, float Rotation, const struct FVector2D& RotationPivotPoint) const;
	void BPDrawSpriteTexture(class UTexture* Texture, float X, float Y, float Width, float Height, float TextureX, float TextureY, float TextureXL, float TextureYL, float DrawingAlpha, const struct FLinearColor& Color, const struct FVector2D& DrawingOffset, float Rotation, const struct FVector2D& RotationPivotPoint, bool bIsMask) const;
	struct FVector2D BPDrawText(const class FText& Text, float X, float Y, class UFont* Font, const struct FFontRenderInfo& FontRenderInfo, const struct FLinearColor& Color, float TextScale, float DrawingAlpha, ESQTextHorizontalAlignment HorizontalAlignment, ESQTextVerticalAlignment VerticalAlignment, bool bDrawShadow, const struct FVector2D& ShadowDirection, const struct FLinearColor& ShadowColor, bool bDrawOutline, const struct FLinearColor& OutlineColor) const;
	void BPDrawTexture(class UTexture* Texture, float X, float Y, float Width, float Height, float U, float V, float UL, float VL, float DrawingAlpha, const struct FLinearColor& Color, const struct FVector2D& DrawingOffset, float Rotation, const struct FVector2D& RotationPivotPoint, bool bIsMask) const;
	bool CanDraw() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQHUDWidget">();
	}
	static class USQHUDWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQHUDWidget>();
	}
};
static_assert(alignof(USQHUDWidget) == 0x000008, "Wrong alignment on USQHUDWidget");
static_assert(sizeof(USQHUDWidget) == 0x0000D0, "Wrong size on USQHUDWidget");
static_assert(offsetof(USQHUDWidget, UMGWidget) == 0x000028, "Member 'USQHUDWidget::UMGWidget' has a wrong offset!");
static_assert(offsetof(USQHUDWidget, Position) == 0x000030, "Member 'USQHUDWidget::Position' has a wrong offset!");
static_assert(offsetof(USQHUDWidget, OffsetPosition) == 0x000038, "Member 'USQHUDWidget::OffsetPosition' has a wrong offset!");
static_assert(offsetof(USQHUDWidget, WidgetOrigin) == 0x000040, "Member 'USQHUDWidget::WidgetOrigin' has a wrong offset!");
static_assert(offsetof(USQHUDWidget, Size) == 0x000048, "Member 'USQHUDWidget::Size' has a wrong offset!");
static_assert(offsetof(USQHUDWidget, ZOrder) == 0x000050, "Member 'USQHUDWidget::ZOrder' has a wrong offset!");
static_assert(offsetof(USQHUDWidget, bUseScreenNormalizedCoordinates) == 0x000054, "Member 'USQHUDWidget::bUseScreenNormalizedCoordinates' has a wrong offset!");
static_assert(offsetof(USQHUDWidget, bBypassResolutionScaling) == 0x000055, "Member 'USQHUDWidget::bBypassResolutionScaling' has a wrong offset!");
static_assert(offsetof(USQHUDWidget, DesignedResolution) == 0x000058, "Member 'USQHUDWidget::DesignedResolution' has a wrong offset!");
static_assert(offsetof(USQHUDWidget, bMaintainOriginalAspectRatio) == 0x00005C, "Member 'USQHUDWidget::bMaintainOriginalAspectRatio' has a wrong offset!");
static_assert(offsetof(USQHUDWidget, Alpha) == 0x000060, "Member 'USQHUDWidget::Alpha' has a wrong offset!");
static_assert(offsetof(USQHUDWidget, bHidden) == 0x000064, "Member 'USQHUDWidget::bHidden' has a wrong offset!");
static_assert(offsetof(USQHUDWidget, GameState) == 0x000068, "Member 'USQHUDWidget::GameState' has a wrong offset!");
static_assert(offsetof(USQHUDWidget, HUD) == 0x000070, "Member 'USQHUDWidget::HUD' has a wrong offset!");
static_assert(offsetof(USQHUDWidget, PlayerController) == 0x000078, "Member 'USQHUDWidget::PlayerController' has a wrong offset!");
static_assert(offsetof(USQHUDWidget, PlayerState) == 0x000080, "Member 'USQHUDWidget::PlayerState' has a wrong offset!");
static_assert(offsetof(USQHUDWidget, Soldier) == 0x000088, "Member 'USQHUDWidget::Soldier' has a wrong offset!");
static_assert(offsetof(USQHUDWidget, Canvas) == 0x000090, "Member 'USQHUDWidget::Canvas' has a wrong offset!");
static_assert(offsetof(USQHUDWidget, DefaultTexture) == 0x000098, "Member 'USQHUDWidget::DefaultTexture' has a wrong offset!");
static_assert(offsetof(USQHUDWidget, GradientTexture0) == 0x0000A0, "Member 'USQHUDWidget::GradientTexture0' has a wrong offset!");
static_assert(offsetof(USQHUDWidget, CanvasCenter) == 0x0000A8, "Member 'USQHUDWidget::CanvasCenter' has a wrong offset!");
static_assert(offsetof(USQHUDWidget, CanvasSize) == 0x0000B0, "Member 'USQHUDWidget::CanvasSize' has a wrong offset!");
static_assert(offsetof(USQHUDWidget, DrawingPosition) == 0x0000B8, "Member 'USQHUDWidget::DrawingPosition' has a wrong offset!");
static_assert(offsetof(USQHUDWidget, DrawingSize) == 0x0000C0, "Member 'USQHUDWidget::DrawingSize' has a wrong offset!");
static_assert(offsetof(USQHUDWidget, DrawingScale) == 0x0000C8, "Member 'USQHUDWidget::DrawingScale' has a wrong offset!");

// Class Squad.SQInfantryWeapon
// 0x00B0 (0x0940 - 0x0890)
class ASQInfantryWeapon : public ASQWeapon
{
public:
	struct FRotator                               RecoilAlignmentNewShoulderAlignment;               // 0x0888(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                RecoilAlignmentShoulderTargetOffset;               // 0x0894(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RecoilAlignmentShoulderCurrentOffset;              // 0x08A0(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RecoilAlignmentNewGripAlignment;                   // 0x08AC(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                RecoilAlignmentGripTargetOffset;                   // 0x08B8(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RecoilAlignmentGripCurrentOffset;                  // 0x08C4(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilAlignmentMult;                               // 0x08D0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilMagnitude;                                   // 0x08D4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHoldingBreath;                                  // 0x08D8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121D[0x3];                                     // 0x08D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HoldingBreathSwayFactor;                           // 0x08DC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BulletCountIncrementer;                            // 0x08E0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(float Output)>                 OnHoldBreathEaseUpdateDelegate;                    // 0x08E4(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TDelegate<void(float Output)>                 OnRecoilGripAlignmentUpdateDelegate;               // 0x08F4(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected)
	TDelegate<void(float Output)>                 OnRecoilShoulderAlignmentUpdateDelegate;           // 0x0904(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_121E[0x4];                                     // 0x0914(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     HoldBreathEaseTimeline;                            // 0x0918(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTimelineComponent*                     RecoilGripAlignmentTimeline;                       // 0x0920(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTimelineComponent*                     RecoilShoulderAlignmentTimeline;                   // 0x0928(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_121F[0x10];                                    // 0x0930(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool BlueprintIsAnimationSystemValid();
	void CancelFireOnRestrictedStance(ESQStance Stance);
	void LowStaminaDebuffs();
	void MulticastCancelManualBolting();
	void MulticastStartManualBolting();
	void OnHoldBreathEaseUpdate(float CurveOutput);
	void OnHoldBreathEvent(const bool bIsStartHoldBreath);
	void OnRecoilGripAlignmentUpdate(float CurveOutput);
	void OnRecoilShoulderAlignmentUpdate(float CurveOutput);
	void RecoilAlignmentMultiplierSetup();
	void RecoilAlignmentTargetOffsetSetup(const struct FVector2D& MaxVal, const struct FVector2D& MaxBipodVal, const struct FVector& CurrentOffset, struct FVector* TargetOffset);
	void RecoilAlignmentTimelineEasing(struct FVector* CurrentOffset, const struct FVector& TargetOffset, const struct FVector2D& AngleLimits, struct FRotator* NewAlignment, const float CurveOutput);
	void ServerCancelManualBolting();
	void ServerStartManualBolting();

	class ASQSoldier* GetOwnerSoldier() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQInfantryWeapon">();
	}
	static class ASQInfantryWeapon* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQInfantryWeapon>();
	}
};
static_assert(alignof(ASQInfantryWeapon) == 0x000010, "Wrong alignment on ASQInfantryWeapon");
static_assert(sizeof(ASQInfantryWeapon) == 0x000940, "Wrong size on ASQInfantryWeapon");
static_assert(offsetof(ASQInfantryWeapon, RecoilAlignmentNewShoulderAlignment) == 0x000888, "Member 'ASQInfantryWeapon::RecoilAlignmentNewShoulderAlignment' has a wrong offset!");
static_assert(offsetof(ASQInfantryWeapon, RecoilAlignmentShoulderTargetOffset) == 0x000894, "Member 'ASQInfantryWeapon::RecoilAlignmentShoulderTargetOffset' has a wrong offset!");
static_assert(offsetof(ASQInfantryWeapon, RecoilAlignmentShoulderCurrentOffset) == 0x0008A0, "Member 'ASQInfantryWeapon::RecoilAlignmentShoulderCurrentOffset' has a wrong offset!");
static_assert(offsetof(ASQInfantryWeapon, RecoilAlignmentNewGripAlignment) == 0x0008AC, "Member 'ASQInfantryWeapon::RecoilAlignmentNewGripAlignment' has a wrong offset!");
static_assert(offsetof(ASQInfantryWeapon, RecoilAlignmentGripTargetOffset) == 0x0008B8, "Member 'ASQInfantryWeapon::RecoilAlignmentGripTargetOffset' has a wrong offset!");
static_assert(offsetof(ASQInfantryWeapon, RecoilAlignmentGripCurrentOffset) == 0x0008C4, "Member 'ASQInfantryWeapon::RecoilAlignmentGripCurrentOffset' has a wrong offset!");
static_assert(offsetof(ASQInfantryWeapon, RecoilAlignmentMult) == 0x0008D0, "Member 'ASQInfantryWeapon::RecoilAlignmentMult' has a wrong offset!");
static_assert(offsetof(ASQInfantryWeapon, RecoilMagnitude) == 0x0008D4, "Member 'ASQInfantryWeapon::RecoilMagnitude' has a wrong offset!");
static_assert(offsetof(ASQInfantryWeapon, bIsHoldingBreath) == 0x0008D8, "Member 'ASQInfantryWeapon::bIsHoldingBreath' has a wrong offset!");
static_assert(offsetof(ASQInfantryWeapon, HoldingBreathSwayFactor) == 0x0008DC, "Member 'ASQInfantryWeapon::HoldingBreathSwayFactor' has a wrong offset!");
static_assert(offsetof(ASQInfantryWeapon, BulletCountIncrementer) == 0x0008E0, "Member 'ASQInfantryWeapon::BulletCountIncrementer' has a wrong offset!");
static_assert(offsetof(ASQInfantryWeapon, OnHoldBreathEaseUpdateDelegate) == 0x0008E4, "Member 'ASQInfantryWeapon::OnHoldBreathEaseUpdateDelegate' has a wrong offset!");
static_assert(offsetof(ASQInfantryWeapon, OnRecoilGripAlignmentUpdateDelegate) == 0x0008F4, "Member 'ASQInfantryWeapon::OnRecoilGripAlignmentUpdateDelegate' has a wrong offset!");
static_assert(offsetof(ASQInfantryWeapon, OnRecoilShoulderAlignmentUpdateDelegate) == 0x000904, "Member 'ASQInfantryWeapon::OnRecoilShoulderAlignmentUpdateDelegate' has a wrong offset!");
static_assert(offsetof(ASQInfantryWeapon, HoldBreathEaseTimeline) == 0x000918, "Member 'ASQInfantryWeapon::HoldBreathEaseTimeline' has a wrong offset!");
static_assert(offsetof(ASQInfantryWeapon, RecoilGripAlignmentTimeline) == 0x000920, "Member 'ASQInfantryWeapon::RecoilGripAlignmentTimeline' has a wrong offset!");
static_assert(offsetof(ASQInfantryWeapon, RecoilShoulderAlignmentTimeline) == 0x000928, "Member 'ASQInfantryWeapon::RecoilShoulderAlignmentTimeline' has a wrong offset!");

// Class Squad.SQInputComponent
// 0x0010 (0x0148 - 0x0138)
class USQInputComponent final : public UInputComponent
{
public:
	uint8                                         Pad_1220[0x10];                                    // 0x0138(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQInputComponent">();
	}
	static class USQInputComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQInputComponent>();
	}
};
static_assert(alignof(USQInputComponent) == 0x000008, "Wrong alignment on USQInputComponent");
static_assert(sizeof(USQInputComponent) == 0x000148, "Wrong size on USQInputComponent");

// Class Squad.SQInteractableWidgetItem
// 0x0000 (0x0260 - 0x0260)
class USQInteractableWidgetItem : public UUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQInteractableWidgetItem">();
	}
	static class USQInteractableWidgetItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQInteractableWidgetItem>();
	}
};
static_assert(alignof(USQInteractableWidgetItem) == 0x000008, "Wrong alignment on USQInteractableWidgetItem");
static_assert(sizeof(USQInteractableWidgetItem) == 0x000260, "Wrong size on USQInteractableWidgetItem");

// Class Squad.SQVoteSession
// 0x0068 (0x0090 - 0x0028)
class USQVoteSession : public UObject
{
public:
	struct FSQVote                                Vote;                                              // 0x0028(0x0030)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	struct FSQVoteSessionInfo                     State;                                             // 0x0058(0x0038)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)

public:
	void GetChoiceDescription(const class FName& ChoiceId, struct FSQChoice* OutChoice) const;
	void GetChoicesPerVoteOrder(TArray<class FName>* OutChoiceId) const;
	void GetChoiceState(const class FName& ChoiceId, struct FSQVoteSessionChoiceInfo* OutState) const;
	struct FDataTableRowHandle GetData() const;
	struct FTimespan GetDuration() const;
	class FName GetId() const;
	struct FTimespan GetRemainingTime() const;
	class FName GetWinnerChoiceId() const;
	bool HasFinishedPresentingResults() const;
	bool HasTimedOut() const;
	bool IsRegenerationChoicePossible() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVoteSession">();
	}
	static class USQVoteSession* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVoteSession>();
	}
};
static_assert(alignof(USQVoteSession) == 0x000008, "Wrong alignment on USQVoteSession");
static_assert(sizeof(USQVoteSession) == 0x000090, "Wrong size on USQVoteSession");
static_assert(offsetof(USQVoteSession, Vote) == 0x000028, "Member 'USQVoteSession::Vote' has a wrong offset!");
static_assert(offsetof(USQVoteSession, State) == 0x000058, "Member 'USQVoteSession::State' has a wrong offset!");

// Class Squad.SQVoteSessionClient
// 0x0028 (0x00B8 - 0x0090)
class USQVoteSessionClient final : public USQVoteSession
{
public:
	class FName                                   LastChoice;                                        // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AddVoteSignal;                                     // 0x0098(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_             RemoveVoteSignal;                                  // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPrivate)

public:
	void SendVote(const class FName& ChoiceId, bool Positive);
	void SendVoteByChoice(const struct FSQChoice& Choice, bool Positive);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVoteSessionClient">();
	}
	static class USQVoteSessionClient* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVoteSessionClient>();
	}
};
static_assert(alignof(USQVoteSessionClient) == 0x000008, "Wrong alignment on USQVoteSessionClient");
static_assert(sizeof(USQVoteSessionClient) == 0x0000B8, "Wrong size on USQVoteSessionClient");
static_assert(offsetof(USQVoteSessionClient, LastChoice) == 0x000090, "Member 'USQVoteSessionClient::LastChoice' has a wrong offset!");
static_assert(offsetof(USQVoteSessionClient, AddVoteSignal) == 0x000098, "Member 'USQVoteSessionClient::AddVoteSignal' has a wrong offset!");
static_assert(offsetof(USQVoteSessionClient, RemoveVoteSignal) == 0x0000A8, "Member 'USQVoteSessionClient::RemoveVoteSignal' has a wrong offset!");

// Class Squad.SQInventoryGroupWidget
// 0x0058 (0x02C0 - 0x0268)
class USQInventoryGroupWidget : public USQUserWidget
{
public:
	TArray<class USQInventoryItemWidget*>         ItemsArray;                                        // 0x0268(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UCanvasPanel*                           UnselectedGroupPanel;                              // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHorizontalBox*                         ItemWidgetsHorizontalBox;                          // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 UnselectedImage;                                   // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             GroupNumber;                                       // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 GroupImage;                                        // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             ItemNameTextBlock;                                 // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   GroupName;                                         // 0x02A8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void InitWidget();
	void UpdateState();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQInventoryGroupWidget">();
	}
	static class USQInventoryGroupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQInventoryGroupWidget>();
	}
};
static_assert(alignof(USQInventoryGroupWidget) == 0x000008, "Wrong alignment on USQInventoryGroupWidget");
static_assert(sizeof(USQInventoryGroupWidget) == 0x0002C0, "Wrong size on USQInventoryGroupWidget");
static_assert(offsetof(USQInventoryGroupWidget, ItemsArray) == 0x000268, "Member 'USQInventoryGroupWidget::ItemsArray' has a wrong offset!");
static_assert(offsetof(USQInventoryGroupWidget, UnselectedGroupPanel) == 0x000278, "Member 'USQInventoryGroupWidget::UnselectedGroupPanel' has a wrong offset!");
static_assert(offsetof(USQInventoryGroupWidget, ItemWidgetsHorizontalBox) == 0x000280, "Member 'USQInventoryGroupWidget::ItemWidgetsHorizontalBox' has a wrong offset!");
static_assert(offsetof(USQInventoryGroupWidget, UnselectedImage) == 0x000288, "Member 'USQInventoryGroupWidget::UnselectedImage' has a wrong offset!");
static_assert(offsetof(USQInventoryGroupWidget, GroupNumber) == 0x000290, "Member 'USQInventoryGroupWidget::GroupNumber' has a wrong offset!");
static_assert(offsetof(USQInventoryGroupWidget, GroupImage) == 0x000298, "Member 'USQInventoryGroupWidget::GroupImage' has a wrong offset!");
static_assert(offsetof(USQInventoryGroupWidget, ItemNameTextBlock) == 0x0002A0, "Member 'USQInventoryGroupWidget::ItemNameTextBlock' has a wrong offset!");
static_assert(offsetof(USQInventoryGroupWidget, GroupName) == 0x0002A8, "Member 'USQInventoryGroupWidget::GroupName' has a wrong offset!");

// Class Squad.SQInventoryItemWidget
// 0x0020 (0x0288 - 0x0268)
class USQInventoryItemWidget : public USQUserWidget
{
public:
	class UImage*                                 ItemImage;                                         // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQEquipableItem*                       CurrentItem;                                       // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             MagTextBlock;                                      // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 BackgroundImage;                                   // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void InitWidget();
	void UpdateState();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQInventoryItemWidget">();
	}
	static class USQInventoryItemWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQInventoryItemWidget>();
	}
};
static_assert(alignof(USQInventoryItemWidget) == 0x000008, "Wrong alignment on USQInventoryItemWidget");
static_assert(sizeof(USQInventoryItemWidget) == 0x000288, "Wrong size on USQInventoryItemWidget");
static_assert(offsetof(USQInventoryItemWidget, ItemImage) == 0x000268, "Member 'USQInventoryItemWidget::ItemImage' has a wrong offset!");
static_assert(offsetof(USQInventoryItemWidget, CurrentItem) == 0x000270, "Member 'USQInventoryItemWidget::CurrentItem' has a wrong offset!");
static_assert(offsetof(USQInventoryItemWidget, MagTextBlock) == 0x000278, "Member 'USQInventoryItemWidget::MagTextBlock' has a wrong offset!");
static_assert(offsetof(USQInventoryItemWidget, BackgroundImage) == 0x000280, "Member 'USQInventoryItemWidget::BackgroundImage' has a wrong offset!");

// Class Squad.SQWaterBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USQWaterBlueprintFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static float GetActorImmersionDepthInWater(const class ASQWaterBody* WaterBody, const class AActor* QueryingActor);
	static bool IsAValidWaterBody(const class AActor* ActorToCheck);
	static bool WaterHasValidHit(const class ASQWaterBody* HitWaterBody, const class AActor* ProjectileOwner, const struct FHitResult& InHit);
	static bool WaterHasValidOverlap(const class ASQWaterBody* OverlappedWaterBody, class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQWaterBlueprintFunctionLibrary">();
	}
	static class USQWaterBlueprintFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQWaterBlueprintFunctionLibrary>();
	}
};
static_assert(alignof(USQWaterBlueprintFunctionLibrary) == 0x000008, "Wrong alignment on USQWaterBlueprintFunctionLibrary");
static_assert(sizeof(USQWaterBlueprintFunctionLibrary) == 0x000028, "Wrong size on USQWaterBlueprintFunctionLibrary");

// Class Squad.SQItemAnimInstance
// 0x0000 (0x02E0 - 0x02E0)
class USQItemAnimInstance : public USQAnimInstance
{
public:
	bool                                          bPlay1PAnimNotifiesWhenInFirstPerson;              // 0x02D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlay3PAnimNotifiesWhenInFirstPerson;              // 0x02D9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1228[0x6];                                     // 0x02DA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQItemAnimInstance">();
	}
	static class USQItemAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQItemAnimInstance>();
	}
};
static_assert(alignof(USQItemAnimInstance) == 0x000010, "Wrong alignment on USQItemAnimInstance");
static_assert(sizeof(USQItemAnimInstance) == 0x0002E0, "Wrong size on USQItemAnimInstance");
static_assert(offsetof(USQItemAnimInstance, bPlay1PAnimNotifiesWhenInFirstPerson) == 0x0002D8, "Member 'USQItemAnimInstance::bPlay1PAnimNotifiesWhenInFirstPerson' has a wrong offset!");
static_assert(offsetof(USQItemAnimInstance, bPlay3PAnimNotifiesWhenInFirstPerson) == 0x0002D9, "Member 'USQItemAnimInstance::bPlay3PAnimNotifiesWhenInFirstPerson' has a wrong offset!");

// Class Squad.SQWaterMovementComponent
// 0x0028 (0x0140 - 0x0118)
class USQWaterMovementComponent : public UODKWaterMovementComponent
{
public:
	uint8                                         Pad_1229[0x28];                                    // 0x0118(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQWaterMovementComponent">();
	}
	static class USQWaterMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQWaterMovementComponent>();
	}
};
static_assert(alignof(USQWaterMovementComponent) == 0x000008, "Wrong alignment on USQWaterMovementComponent");
static_assert(sizeof(USQWaterMovementComponent) == 0x000140, "Wrong size on USQWaterMovementComponent");

// Class Squad.SQJoinBeaconClient
// 0x0138 (0x03F0 - 0x02B8)
class ASQJoinBeaconClient final : public AOnlineBeaconClient
{
public:
	int32                                         PlayerCount;                                       // 0x02B8(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QueuePosition;                                     // 0x02BC(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReservedQueueCount;                                // 0x02C0(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PublicQueueCount;                                  // 0x02C4(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReservedMember;                                 // 0x02C8(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasReplicated;                                    // 0x02C9(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122A[0x6];                                     // 0x02CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlueprintSessionResult                CurrentSession;                                    // 0x02D0(0x0108)(BlueprintVisible, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnClientConnectionAccepted;                        // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	double                                        SecondsToKeepAttemptingReconnect;                  // 0x03E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void HostTravelRequestReconnect(int32 TimeLeftInMatch, float SecondsPerRetry);
	void InitConnection(const class FString& ServerURL, const struct FBlueprintSessionResult& ServerSession);
	void LeaveQueue();
	void RequestClientJoin();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQJoinBeaconClient">();
	}
	static class ASQJoinBeaconClient* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQJoinBeaconClient>();
	}
};
static_assert(alignof(ASQJoinBeaconClient) == 0x000008, "Wrong alignment on ASQJoinBeaconClient");
static_assert(sizeof(ASQJoinBeaconClient) == 0x0003F0, "Wrong size on ASQJoinBeaconClient");
static_assert(offsetof(ASQJoinBeaconClient, PlayerCount) == 0x0002B8, "Member 'ASQJoinBeaconClient::PlayerCount' has a wrong offset!");
static_assert(offsetof(ASQJoinBeaconClient, QueuePosition) == 0x0002BC, "Member 'ASQJoinBeaconClient::QueuePosition' has a wrong offset!");
static_assert(offsetof(ASQJoinBeaconClient, ReservedQueueCount) == 0x0002C0, "Member 'ASQJoinBeaconClient::ReservedQueueCount' has a wrong offset!");
static_assert(offsetof(ASQJoinBeaconClient, PublicQueueCount) == 0x0002C4, "Member 'ASQJoinBeaconClient::PublicQueueCount' has a wrong offset!");
static_assert(offsetof(ASQJoinBeaconClient, bIsReservedMember) == 0x0002C8, "Member 'ASQJoinBeaconClient::bIsReservedMember' has a wrong offset!");
static_assert(offsetof(ASQJoinBeaconClient, bHasReplicated) == 0x0002C9, "Member 'ASQJoinBeaconClient::bHasReplicated' has a wrong offset!");
static_assert(offsetof(ASQJoinBeaconClient, CurrentSession) == 0x0002D0, "Member 'ASQJoinBeaconClient::CurrentSession' has a wrong offset!");
static_assert(offsetof(ASQJoinBeaconClient, OnClientConnectionAccepted) == 0x0003D8, "Member 'ASQJoinBeaconClient::OnClientConnectionAccepted' has a wrong offset!");
static_assert(offsetof(ASQJoinBeaconClient, SecondsToKeepAttemptingReconnect) == 0x0003E8, "Member 'ASQJoinBeaconClient::SecondsToKeepAttemptingReconnect' has a wrong offset!");

// Class Squad.SQJoinBeaconHost
// 0x0060 (0x02B0 - 0x0250)
class ASQJoinBeaconHost final : public AOnlineBeaconHostObject
{
public:
	TArray<struct FSQServerSlot>                  PublicQueue;                                       // 0x0250(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQServerSlot>                  ReservedQueue;                                     // 0x0260(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQServerSlot>                  JoiningServerSlots;                                // 0x0270(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_122B[0x20];                                    // 0x0280(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AOnlineBeaconClient*>            ClientsPendingUserData;                            // 0x02A0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQJoinBeaconHost">();
	}
	static class ASQJoinBeaconHost* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQJoinBeaconHost>();
	}
};
static_assert(alignof(ASQJoinBeaconHost) == 0x000008, "Wrong alignment on ASQJoinBeaconHost");
static_assert(sizeof(ASQJoinBeaconHost) == 0x0002B0, "Wrong size on ASQJoinBeaconHost");
static_assert(offsetof(ASQJoinBeaconHost, PublicQueue) == 0x000250, "Member 'ASQJoinBeaconHost::PublicQueue' has a wrong offset!");
static_assert(offsetof(ASQJoinBeaconHost, ReservedQueue) == 0x000260, "Member 'ASQJoinBeaconHost::ReservedQueue' has a wrong offset!");
static_assert(offsetof(ASQJoinBeaconHost, JoiningServerSlots) == 0x000270, "Member 'ASQJoinBeaconHost::JoiningServerSlots' has a wrong offset!");
static_assert(offsetof(ASQJoinBeaconHost, ClientsPendingUserData) == 0x0002A0, "Member 'ASQJoinBeaconHost::ClientsPendingUserData' has a wrong offset!");

// Class Squad.SQWeaponAnimInstance
// 0x0020 (0x0300 - 0x02E0)
class USQWeaponAnimInstance : public USQItemAnimInstance
{
public:
	bool                                          bMagHasAmmo;                                       // 0x02E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWeaponFiring;                                   // 0x02E1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReloading;                                      // 0x02E2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122C[0x1];                                     // 0x02E3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MagHasAmmoAlpha;                                   // 0x02E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NotMagHasAmmoAlpha;                                // 0x02E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentMagRemainingRoundsTime;                     // 0x02EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentMagRemainingRoundsMultiplier;               // 0x02F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustAdsSightItemAnimPos;                         // 0x02F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122D[0x8];                                     // 0x02F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQWeaponAnimInstance">();
	}
	static class USQWeaponAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQWeaponAnimInstance>();
	}
};
static_assert(alignof(USQWeaponAnimInstance) == 0x000010, "Wrong alignment on USQWeaponAnimInstance");
static_assert(sizeof(USQWeaponAnimInstance) == 0x000300, "Wrong size on USQWeaponAnimInstance");
static_assert(offsetof(USQWeaponAnimInstance, bMagHasAmmo) == 0x0002E0, "Member 'USQWeaponAnimInstance::bMagHasAmmo' has a wrong offset!");
static_assert(offsetof(USQWeaponAnimInstance, bIsWeaponFiring) == 0x0002E1, "Member 'USQWeaponAnimInstance::bIsWeaponFiring' has a wrong offset!");
static_assert(offsetof(USQWeaponAnimInstance, bIsReloading) == 0x0002E2, "Member 'USQWeaponAnimInstance::bIsReloading' has a wrong offset!");
static_assert(offsetof(USQWeaponAnimInstance, MagHasAmmoAlpha) == 0x0002E4, "Member 'USQWeaponAnimInstance::MagHasAmmoAlpha' has a wrong offset!");
static_assert(offsetof(USQWeaponAnimInstance, NotMagHasAmmoAlpha) == 0x0002E8, "Member 'USQWeaponAnimInstance::NotMagHasAmmoAlpha' has a wrong offset!");
static_assert(offsetof(USQWeaponAnimInstance, CurrentMagRemainingRoundsTime) == 0x0002EC, "Member 'USQWeaponAnimInstance::CurrentMagRemainingRoundsTime' has a wrong offset!");
static_assert(offsetof(USQWeaponAnimInstance, CurrentMagRemainingRoundsMultiplier) == 0x0002F0, "Member 'USQWeaponAnimInstance::CurrentMagRemainingRoundsMultiplier' has a wrong offset!");
static_assert(offsetof(USQWeaponAnimInstance, AdjustAdsSightItemAnimPos) == 0x0002F4, "Member 'USQWeaponAnimInstance::AdjustAdsSightItemAnimPos' has a wrong offset!");

// Class Squad.SQJoinSessionCallbackProxy
// 0x0150 (0x0180 - 0x0030)
class USQJoinSessionCallbackProxy final : public UOnlineBlueprintCallProxyBase
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFailure;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_122E[0x128];                                   // 0x0050(0x0128)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                WorldContextObject;                                // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static bool IsServerModded(const struct FBlueprintSessionResult& SearchResult, bool* bIsWhitelisted);
	static class USQJoinSessionCallbackProxy* JoinSession(class UObject* Param_WorldContextObject, class APlayerController* PlayerController, const struct FBlueprintSessionResult& SearchResult);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQJoinSessionCallbackProxy">();
	}
	static class USQJoinSessionCallbackProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQJoinSessionCallbackProxy>();
	}
};
static_assert(alignof(USQJoinSessionCallbackProxy) == 0x000008, "Wrong alignment on USQJoinSessionCallbackProxy");
static_assert(sizeof(USQJoinSessionCallbackProxy) == 0x000180, "Wrong size on USQJoinSessionCallbackProxy");
static_assert(offsetof(USQJoinSessionCallbackProxy, OnSuccess) == 0x000030, "Member 'USQJoinSessionCallbackProxy::OnSuccess' has a wrong offset!");
static_assert(offsetof(USQJoinSessionCallbackProxy, OnFailure) == 0x000040, "Member 'USQJoinSessionCallbackProxy::OnFailure' has a wrong offset!");
static_assert(offsetof(USQJoinSessionCallbackProxy, WorldContextObject) == 0x000178, "Member 'USQJoinSessionCallbackProxy::WorldContextObject' has a wrong offset!");

// Class Squad.SQKickBanComponent
// 0x0000 (0x00B0 - 0x00B0)
class USQKickBanComponent final : public UActorComponent
{
public:
	void BanPlayer(const class FString& AdminId, class ASQPlayerController* ToBanPC, const int32 BanSeconds, const class FString& BanReason);
	void KickPlayer(class ASQPlayerController* ToKickPC, const class FString& KickReason);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQKickBanComponent">();
	}
	static class USQKickBanComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQKickBanComponent>();
	}
};
static_assert(alignof(USQKickBanComponent) == 0x000008, "Wrong alignment on USQKickBanComponent");
static_assert(sizeof(USQKickBanComponent) == 0x0000B0, "Wrong size on USQKickBanComponent");

// Class Squad.SQKillDeathRuleset
// 0x00F8 (0x0350 - 0x0258)
class ASQKillDeathRuleset : public ASQGameRuleSet
{
public:
	struct FSQKillDeathSettings                   TeamOneSettings;                                   // 0x0258(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQKillDeathSettings                   TeamTwoSettings;                                   // 0x02A0(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SpawnDelayPenaltyForSuicide;                       // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnDelayPenaltyForTeamKill;                      // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQHealSettings                        TeamOneHealSettings;                               // 0x02F0(0x0024)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQHealSettings                        TeamTwoHealSettings;                               // 0x0314(0x0024)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         TeamkillsBeforeKick;                               // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultPointsForVehicleDestroy;                    // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultShouldDelayScoreForVehicleDestroy;         // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1231[0x3];                                     // 0x0341(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefaultTicketsLostForVehicleDestroy;               // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTKAutoKickEnabled;                                // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1232[0x7];                                     // 0x0349(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQKillDeathRuleset">();
	}
	static class ASQKillDeathRuleset* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQKillDeathRuleset>();
	}
};
static_assert(alignof(ASQKillDeathRuleset) == 0x000008, "Wrong alignment on ASQKillDeathRuleset");
static_assert(sizeof(ASQKillDeathRuleset) == 0x000350, "Wrong size on ASQKillDeathRuleset");
static_assert(offsetof(ASQKillDeathRuleset, TeamOneSettings) == 0x000258, "Member 'ASQKillDeathRuleset::TeamOneSettings' has a wrong offset!");
static_assert(offsetof(ASQKillDeathRuleset, TeamTwoSettings) == 0x0002A0, "Member 'ASQKillDeathRuleset::TeamTwoSettings' has a wrong offset!");
static_assert(offsetof(ASQKillDeathRuleset, SpawnDelayPenaltyForSuicide) == 0x0002E8, "Member 'ASQKillDeathRuleset::SpawnDelayPenaltyForSuicide' has a wrong offset!");
static_assert(offsetof(ASQKillDeathRuleset, SpawnDelayPenaltyForTeamKill) == 0x0002EC, "Member 'ASQKillDeathRuleset::SpawnDelayPenaltyForTeamKill' has a wrong offset!");
static_assert(offsetof(ASQKillDeathRuleset, TeamOneHealSettings) == 0x0002F0, "Member 'ASQKillDeathRuleset::TeamOneHealSettings' has a wrong offset!");
static_assert(offsetof(ASQKillDeathRuleset, TeamTwoHealSettings) == 0x000314, "Member 'ASQKillDeathRuleset::TeamTwoHealSettings' has a wrong offset!");
static_assert(offsetof(ASQKillDeathRuleset, TeamkillsBeforeKick) == 0x000338, "Member 'ASQKillDeathRuleset::TeamkillsBeforeKick' has a wrong offset!");
static_assert(offsetof(ASQKillDeathRuleset, DefaultPointsForVehicleDestroy) == 0x00033C, "Member 'ASQKillDeathRuleset::DefaultPointsForVehicleDestroy' has a wrong offset!");
static_assert(offsetof(ASQKillDeathRuleset, bDefaultShouldDelayScoreForVehicleDestroy) == 0x000340, "Member 'ASQKillDeathRuleset::bDefaultShouldDelayScoreForVehicleDestroy' has a wrong offset!");
static_assert(offsetof(ASQKillDeathRuleset, DefaultTicketsLostForVehicleDestroy) == 0x000344, "Member 'ASQKillDeathRuleset::DefaultTicketsLostForVehicleDestroy' has a wrong offset!");
static_assert(offsetof(ASQKillDeathRuleset, bTKAutoKickEnabled) == 0x000348, "Member 'ASQKillDeathRuleset::bTKAutoKickEnabled' has a wrong offset!");

// Class Squad.SQWheeledVehicleMovementComponentTank
// 0x0130 (0x03E0 - 0x02B0)
class USQWheeledVehicleMovementComponentTank : public UWheeledVehicleMovementComponent
{
public:
	struct FVehicleTankEngineData                 EngineSetup;                                       // 0x02B0(0x00A0)(Edit, NativeAccessSpecifierPublic)
	struct FVehicleTankTransmissionData           TransmissionSetup;                                 // 0x0350(0x0048)(Edit, NativeAccessSpecifierPublic)
	float                                         RawBothTracksThrottleInput;                        // 0x0398(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RawLeftTrackThrottleInput;                         // 0x039C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RawRightTrackThrottleInput;                        // 0x03A0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BothTracksThrottleInput;                           // 0x03A4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LeftTrackThrottleInput;                            // 0x03A8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RightTrackThrottleInput;                           // 0x03AC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<float>                                 WheelSpeeds;                                       // 0x03B0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<float>                                 WheelAngles;                                       // 0x03C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                         LeftTrackSpeed;                                    // 0x03D0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RightTrackSpeed;                                   // 0x03D4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1233[0x8];                                     // 0x03D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBothTracksThrottleInput(float InThrottle);
	void SetLeftTrackThrottleInput(float InThrottle);
	void SetRightTrackThrottleInput(float InThrottle);

	float GetLeftTrackSpeed() const;
	float GetRightTrackSpeed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQWheeledVehicleMovementComponentTank">();
	}
	static class USQWheeledVehicleMovementComponentTank* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQWheeledVehicleMovementComponentTank>();
	}
};
static_assert(alignof(USQWheeledVehicleMovementComponentTank) == 0x000008, "Wrong alignment on USQWheeledVehicleMovementComponentTank");
static_assert(sizeof(USQWheeledVehicleMovementComponentTank) == 0x0003E0, "Wrong size on USQWheeledVehicleMovementComponentTank");
static_assert(offsetof(USQWheeledVehicleMovementComponentTank, EngineSetup) == 0x0002B0, "Member 'USQWheeledVehicleMovementComponentTank::EngineSetup' has a wrong offset!");
static_assert(offsetof(USQWheeledVehicleMovementComponentTank, TransmissionSetup) == 0x000350, "Member 'USQWheeledVehicleMovementComponentTank::TransmissionSetup' has a wrong offset!");
static_assert(offsetof(USQWheeledVehicleMovementComponentTank, RawBothTracksThrottleInput) == 0x000398, "Member 'USQWheeledVehicleMovementComponentTank::RawBothTracksThrottleInput' has a wrong offset!");
static_assert(offsetof(USQWheeledVehicleMovementComponentTank, RawLeftTrackThrottleInput) == 0x00039C, "Member 'USQWheeledVehicleMovementComponentTank::RawLeftTrackThrottleInput' has a wrong offset!");
static_assert(offsetof(USQWheeledVehicleMovementComponentTank, RawRightTrackThrottleInput) == 0x0003A0, "Member 'USQWheeledVehicleMovementComponentTank::RawRightTrackThrottleInput' has a wrong offset!");
static_assert(offsetof(USQWheeledVehicleMovementComponentTank, BothTracksThrottleInput) == 0x0003A4, "Member 'USQWheeledVehicleMovementComponentTank::BothTracksThrottleInput' has a wrong offset!");
static_assert(offsetof(USQWheeledVehicleMovementComponentTank, LeftTrackThrottleInput) == 0x0003A8, "Member 'USQWheeledVehicleMovementComponentTank::LeftTrackThrottleInput' has a wrong offset!");
static_assert(offsetof(USQWheeledVehicleMovementComponentTank, RightTrackThrottleInput) == 0x0003AC, "Member 'USQWheeledVehicleMovementComponentTank::RightTrackThrottleInput' has a wrong offset!");
static_assert(offsetof(USQWheeledVehicleMovementComponentTank, WheelSpeeds) == 0x0003B0, "Member 'USQWheeledVehicleMovementComponentTank::WheelSpeeds' has a wrong offset!");
static_assert(offsetof(USQWheeledVehicleMovementComponentTank, WheelAngles) == 0x0003C0, "Member 'USQWheeledVehicleMovementComponentTank::WheelAngles' has a wrong offset!");
static_assert(offsetof(USQWheeledVehicleMovementComponentTank, LeftTrackSpeed) == 0x0003D0, "Member 'USQWheeledVehicleMovementComponentTank::LeftTrackSpeed' has a wrong offset!");
static_assert(offsetof(USQWheeledVehicleMovementComponentTank, RightTrackSpeed) == 0x0003D4, "Member 'USQWheeledVehicleMovementComponentTank::RightTrackSpeed' has a wrong offset!");

// Class Squad.SQTrackedVehicleMovementComponent
// 0x0028 (0x0408 - 0x03E0)
class USQTrackedVehicleMovementComponent final : public USQWheeledVehicleMovementComponentTank
{
public:
	uint8                                         Pad_1234[0x18];                                    // 0x03E0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class USQVehicleMovementCommonSystems*        CommonSystems;                                     // 0x03F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class USQWaterMovementComponent>  WaterMovementComponentToSpawn;                     // 0x0400(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQTrackedVehicleMovementComponent">();
	}
	static class USQTrackedVehicleMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQTrackedVehicleMovementComponent>();
	}
};
static_assert(alignof(USQTrackedVehicleMovementComponent) == 0x000008, "Wrong alignment on USQTrackedVehicleMovementComponent");
static_assert(sizeof(USQTrackedVehicleMovementComponent) == 0x000408, "Wrong size on USQTrackedVehicleMovementComponent");
static_assert(offsetof(USQTrackedVehicleMovementComponent, CommonSystems) == 0x0003F8, "Member 'USQTrackedVehicleMovementComponent::CommonSystems' has a wrong offset!");
static_assert(offsetof(USQTrackedVehicleMovementComponent, WaterMovementComponentToSpawn) == 0x000400, "Member 'USQTrackedVehicleMovementComponent::WaterMovementComponentToSpawn' has a wrong offset!");

// Class Squad.SQLayerTeamConfig
// 0x0038 (0x0060 - 0x0028)
class USQLayerTeamConfig : public UObject
{
public:
	ESQTeam                                       Index_SQLayerTeamConfig;                           // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1235[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USQFactionSetup>         SpecificFactionSetup;                              // 0x0030(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tickets;                                           // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerPercentage;                                  // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool CanUseFaction(const class USQFactionSetup* SQFaction) const;
	bool EditorOnly_ShouldUseSpecificFaction() const;
	bool GetCompatibleFactionSetups(const class USQLayer* InOuterLayer, const TMap<class FName, class USQFactionSetup*>& InAvailableFactionSetups, TArray<class USQFactionSetup*>* OutCompatibleFactionSetups) const;
	bool HasFactionSetupChoice(const class USQLayer* InOuterLayer, class USQFactionSetup** OutSpecificFaction, const TArray<class FName>& Excluded) const;
	bool TryGetAvailabilityModifierPct(const class USQAvailability* InAvailability, int32* OutModifierPct) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQLayerTeamConfig">();
	}
	static class USQLayerTeamConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQLayerTeamConfig>();
	}
};
static_assert(alignof(USQLayerTeamConfig) == 0x000008, "Wrong alignment on USQLayerTeamConfig");
static_assert(sizeof(USQLayerTeamConfig) == 0x000060, "Wrong size on USQLayerTeamConfig");
static_assert(offsetof(USQLayerTeamConfig, Index_SQLayerTeamConfig) == 0x000028, "Member 'USQLayerTeamConfig::Index_SQLayerTeamConfig' has a wrong offset!");
static_assert(offsetof(USQLayerTeamConfig, SpecificFactionSetup) == 0x000030, "Member 'USQLayerTeamConfig::SpecificFactionSetup' has a wrong offset!");
static_assert(offsetof(USQLayerTeamConfig, Tickets) == 0x000058, "Member 'USQLayerTeamConfig::Tickets' has a wrong offset!");
static_assert(offsetof(USQLayerTeamConfig, PlayerPercentage) == 0x00005C, "Member 'USQLayerTeamConfig::PlayerPercentage' has a wrong offset!");

// Class Squad.SQLevel
// 0x0040 (0x00B0 - 0x0070)
class USQLevel : public USQPrimaryData
{
public:
	TSoftObjectPtr<class UWorld>                  World;                                             // 0x0070(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeverAddToRotation;                                // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_123A[0x7];                                     // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USQLayer*>                       AvailableLayers;                                   // 0x00A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)

public:
	bool CanFactionOperate(class USQFactionSetup* FactionSetup, class USQLayer* Layer) const;
	class FName GetBiomeId() const;
	bool GetMapName(class FString* OutMapName) const;
	bool GetMapPath(class FString* OutMapPath) const;
	bool HasMapName(const class FString& MapName) const;
	bool HasMapPath(const class FString& MapPath) const;
	bool TryGetDescription(class FText* OutDescription) const;
	bool TryGetDisplayName(class FText* OutDisplayName) const;
	bool TryGetLoadingMusic(class USoundBase** OutLoadingMusic) const;
	bool TryGetLoadingScreen(TSoftObjectPtr<class UTexture2D>* OutLoadingScreen, const struct FVector2D& InViewportSize) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQLevel">();
	}
	static class USQLevel* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQLevel>();
	}
};
static_assert(alignof(USQLevel) == 0x000008, "Wrong alignment on USQLevel");
static_assert(sizeof(USQLevel) == 0x0000B0, "Wrong size on USQLevel");
static_assert(offsetof(USQLevel, World) == 0x000070, "Member 'USQLevel::World' has a wrong offset!");
static_assert(offsetof(USQLevel, NeverAddToRotation) == 0x000098, "Member 'USQLevel::NeverAddToRotation' has a wrong offset!");
static_assert(offsetof(USQLevel, AvailableLayers) == 0x0000A0, "Member 'USQLevel::AvailableLayers' has a wrong offset!");

// Class Squad.SQLocalPlayer
// 0x0000 (0x0258 - 0x0258)
class USQLocalPlayer final : public ULocalPlayer
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQLocalPlayer">();
	}
	static class USQLocalPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQLocalPlayer>();
	}
};
static_assert(alignof(USQLocalPlayer) == 0x000008, "Wrong alignment on USQLocalPlayer");
static_assert(sizeof(USQLocalPlayer) == 0x000258, "Wrong size on USQLocalPlayer");

// Class Squad.SQVehicleAmmoBox
// 0x0070 (0x0660 - 0x05F0)
class USQVehicleAmmoBox final : public USQVehicleComponent
{
public:
	struct FSQAmmoReductionConfig                 AmmoReduction;                                     // 0x05F0(0x0020)(Edit, NativeAccessSpecifierPublic)
	int32                                         DamageToParentWhenBurning;                         // 0x0610(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SecondsBetweenDamageEvents;                        // 0x0614(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DamageToParentOnDetonation;                        // 0x0618(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinBurningTimeBeforeDetonation;                    // 0x061C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxBurningTimeBeforeDetonation;                    // 0x0620(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BaseTimeToDetonation;                              // 0x0624(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableDetonationByOverdamage;                     // 0x0628(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1244[0x3];                                     // 0x0629(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverdamageForInstantDetonation;                    // 0x062C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UDamageType>                DetonationDamageType;                              // 0x0630(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UDamageType>                BurningDamageType;                                 // 0x0638(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TimePercentageLeftForDetonation;                   // 0x0640(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1245[0x1C];                                    // 0x0644(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DestroyVehicleWeaponAmmo();
	void Detonate();

	void DestroyWeaponAmmo(class ASQWeapon* Weapon, float TargetAmmoPercentage, bool bAffectCurrentMag) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleAmmoBox">();
	}
	static class USQVehicleAmmoBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleAmmoBox>();
	}
};
static_assert(alignof(USQVehicleAmmoBox) == 0x000010, "Wrong alignment on USQVehicleAmmoBox");
static_assert(sizeof(USQVehicleAmmoBox) == 0x000660, "Wrong size on USQVehicleAmmoBox");
static_assert(offsetof(USQVehicleAmmoBox, AmmoReduction) == 0x0005F0, "Member 'USQVehicleAmmoBox::AmmoReduction' has a wrong offset!");
static_assert(offsetof(USQVehicleAmmoBox, DamageToParentWhenBurning) == 0x000610, "Member 'USQVehicleAmmoBox::DamageToParentWhenBurning' has a wrong offset!");
static_assert(offsetof(USQVehicleAmmoBox, SecondsBetweenDamageEvents) == 0x000614, "Member 'USQVehicleAmmoBox::SecondsBetweenDamageEvents' has a wrong offset!");
static_assert(offsetof(USQVehicleAmmoBox, DamageToParentOnDetonation) == 0x000618, "Member 'USQVehicleAmmoBox::DamageToParentOnDetonation' has a wrong offset!");
static_assert(offsetof(USQVehicleAmmoBox, MinBurningTimeBeforeDetonation) == 0x00061C, "Member 'USQVehicleAmmoBox::MinBurningTimeBeforeDetonation' has a wrong offset!");
static_assert(offsetof(USQVehicleAmmoBox, MaxBurningTimeBeforeDetonation) == 0x000620, "Member 'USQVehicleAmmoBox::MaxBurningTimeBeforeDetonation' has a wrong offset!");
static_assert(offsetof(USQVehicleAmmoBox, BaseTimeToDetonation) == 0x000624, "Member 'USQVehicleAmmoBox::BaseTimeToDetonation' has a wrong offset!");
static_assert(offsetof(USQVehicleAmmoBox, bEnableDetonationByOverdamage) == 0x000628, "Member 'USQVehicleAmmoBox::bEnableDetonationByOverdamage' has a wrong offset!");
static_assert(offsetof(USQVehicleAmmoBox, OverdamageForInstantDetonation) == 0x00062C, "Member 'USQVehicleAmmoBox::OverdamageForInstantDetonation' has a wrong offset!");
static_assert(offsetof(USQVehicleAmmoBox, DetonationDamageType) == 0x000630, "Member 'USQVehicleAmmoBox::DetonationDamageType' has a wrong offset!");
static_assert(offsetof(USQVehicleAmmoBox, BurningDamageType) == 0x000638, "Member 'USQVehicleAmmoBox::BurningDamageType' has a wrong offset!");
static_assert(offsetof(USQVehicleAmmoBox, TimePercentageLeftForDetonation) == 0x000640, "Member 'USQVehicleAmmoBox::TimePercentageLeftForDetonation' has a wrong offset!");

// Class Squad.SQLoginCallbackProxy
// 0x0068 (0x0098 - 0x0030)
class USQLoginCallbackProxy final : public UOnlineBlueprintCallProxyBase
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFailure;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1247[0x40];                                    // 0x0050(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                WorldContextObject;                                // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class FString GetLoginResult(const struct FSQBlueprintLoginResult& Result);
	static class USQLoginCallbackProxy* Login(class UObject* InWorldContextObject, class APlayerController* InPlayerController, const class FString& InLoginName, const class FString& InPassword);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQLoginCallbackProxy">();
	}
	static class USQLoginCallbackProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQLoginCallbackProxy>();
	}
};
static_assert(alignof(USQLoginCallbackProxy) == 0x000008, "Wrong alignment on USQLoginCallbackProxy");
static_assert(sizeof(USQLoginCallbackProxy) == 0x000098, "Wrong size on USQLoginCallbackProxy");
static_assert(offsetof(USQLoginCallbackProxy, OnSuccess) == 0x000030, "Member 'USQLoginCallbackProxy::OnSuccess' has a wrong offset!");
static_assert(offsetof(USQLoginCallbackProxy, OnFailure) == 0x000040, "Member 'USQLoginCallbackProxy::OnFailure' has a wrong offset!");
static_assert(offsetof(USQLoginCallbackProxy, WorldContextObject) == 0x000090, "Member 'USQLoginCallbackProxy::WorldContextObject' has a wrong offset!");

// Class Squad.SQMagazineGroupWidget
// 0x0010 (0x0278 - 0x0268)
class USQMagazineGroupWidget : public USQUserWidget
{
public:
	TArray<class USQMagazineWidget*>              MagazineWidgets;                                   // 0x0268(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void InitWidget();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMagazineGroupWidget">();
	}
	static class USQMagazineGroupWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMagazineGroupWidget>();
	}
};
static_assert(alignof(USQMagazineGroupWidget) == 0x000008, "Wrong alignment on USQMagazineGroupWidget");
static_assert(sizeof(USQMagazineGroupWidget) == 0x000278, "Wrong size on USQMagazineGroupWidget");
static_assert(offsetof(USQMagazineGroupWidget, MagazineWidgets) == 0x000268, "Member 'USQMagazineGroupWidget::MagazineWidgets' has a wrong offset!");

// Class Squad.SQVehicleBurningComponent
// 0x0030 (0x0230 - 0x0200)
class USQVehicleBurningComponent final : public USceneComponent
{
public:
	class FName                                   ParticleAttachBone;                                // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQLastingEffect*                       TemperatureLastingEffect;                          // 0x0200(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1248[0x2];                                     // 0x0208(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsDebugging;                                      // 0x020A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1249[0x1];                                     // 0x020B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VehicleBurnRatePct;                                // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VehicleFlippedBurnRatePct;                         // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VehicleAbandonedBurnRatePct;                       // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SoldierBurnRatePct;                                // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StartBurnHealthPercent;                            // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           EffectTimerHandle;                                 // 0x0220(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           BurnTimerHandle;                                   // 0x0228(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleBurningComponent">();
	}
	static class USQVehicleBurningComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleBurningComponent>();
	}
};
static_assert(alignof(USQVehicleBurningComponent) == 0x000010, "Wrong alignment on USQVehicleBurningComponent");
static_assert(sizeof(USQVehicleBurningComponent) == 0x000230, "Wrong size on USQVehicleBurningComponent");
static_assert(offsetof(USQVehicleBurningComponent, ParticleAttachBone) == 0x0001F8, "Member 'USQVehicleBurningComponent::ParticleAttachBone' has a wrong offset!");
static_assert(offsetof(USQVehicleBurningComponent, TemperatureLastingEffect) == 0x000200, "Member 'USQVehicleBurningComponent::TemperatureLastingEffect' has a wrong offset!");
static_assert(offsetof(USQVehicleBurningComponent, bIsDebugging) == 0x00020A, "Member 'USQVehicleBurningComponent::bIsDebugging' has a wrong offset!");
static_assert(offsetof(USQVehicleBurningComponent, VehicleBurnRatePct) == 0x00020C, "Member 'USQVehicleBurningComponent::VehicleBurnRatePct' has a wrong offset!");
static_assert(offsetof(USQVehicleBurningComponent, VehicleFlippedBurnRatePct) == 0x000210, "Member 'USQVehicleBurningComponent::VehicleFlippedBurnRatePct' has a wrong offset!");
static_assert(offsetof(USQVehicleBurningComponent, VehicleAbandonedBurnRatePct) == 0x000214, "Member 'USQVehicleBurningComponent::VehicleAbandonedBurnRatePct' has a wrong offset!");
static_assert(offsetof(USQVehicleBurningComponent, SoldierBurnRatePct) == 0x000218, "Member 'USQVehicleBurningComponent::SoldierBurnRatePct' has a wrong offset!");
static_assert(offsetof(USQVehicleBurningComponent, StartBurnHealthPercent) == 0x00021C, "Member 'USQVehicleBurningComponent::StartBurnHealthPercent' has a wrong offset!");
static_assert(offsetof(USQVehicleBurningComponent, EffectTimerHandle) == 0x000220, "Member 'USQVehicleBurningComponent::EffectTimerHandle' has a wrong offset!");
static_assert(offsetof(USQVehicleBurningComponent, BurnTimerHandle) == 0x000228, "Member 'USQVehicleBurningComponent::BurnTimerHandle' has a wrong offset!");

// Class Squad.SQMainMenuWidget
// 0x0018 (0x0280 - 0x0268)
class USQMainMenuWidget : public USQUserWidget
{
public:
	FMulticastInlineDelegateProperty_             OnScreenShotModeClicked;                           // 0x0268(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bIsHUDVisible;                                     // 0x0278(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124A[0x7];                                     // 0x0279(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ToggleGameHUD();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMainMenuWidget">();
	}
	static class USQMainMenuWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMainMenuWidget>();
	}
};
static_assert(alignof(USQMainMenuWidget) == 0x000008, "Wrong alignment on USQMainMenuWidget");
static_assert(sizeof(USQMainMenuWidget) == 0x000280, "Wrong size on USQMainMenuWidget");
static_assert(offsetof(USQMainMenuWidget, OnScreenShotModeClicked) == 0x000268, "Member 'USQMainMenuWidget::OnScreenShotModeClicked' has a wrong offset!");
static_assert(offsetof(USQMainMenuWidget, bIsHUDVisible) == 0x000278, "Member 'USQMainMenuWidget::bIsHUDVisible' has a wrong offset!");

// Class Squad.SQMapBoundarySettings
// 0x0058 (0x0088 - 0x0030)
class USQMapBoundarySettings final : public UDataAsset
{
public:
	float                                         DefaultKillTime;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124B[0x4];                                     // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<TSubclassOf<class UObject>, float>       ClassKillTimes;                                    // 0x0038(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapBoundarySettings">();
	}
	static class USQMapBoundarySettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapBoundarySettings>();
	}
};
static_assert(alignof(USQMapBoundarySettings) == 0x000008, "Wrong alignment on USQMapBoundarySettings");
static_assert(sizeof(USQMapBoundarySettings) == 0x000088, "Wrong size on USQMapBoundarySettings");
static_assert(offsetof(USQMapBoundarySettings, DefaultKillTime) == 0x000030, "Member 'USQMapBoundarySettings::DefaultKillTime' has a wrong offset!");
static_assert(offsetof(USQMapBoundarySettings, ClassKillTimes) == 0x000038, "Member 'USQMapBoundarySettings::ClassKillTimes' has a wrong offset!");

// Class Squad.SQMapConversions
// 0x0000 (0x0028 - 0x0028)
class USQMapConversions final : public UBlueprintFunctionLibrary
{
public:
	static class FString MapLocationToGridCoordinateString(const struct FVector2D& MapLocation, const struct FVector2D& NumGridLines);
	static bool MapLocationToScreenLocation(struct FVector2D* OutScreenLocation, const struct FVector2D& MapLocation, const class UPanelWidget* MapBody);
	static bool MapToMapGridLocation(struct FVector2D* OutMapGrid, const struct FVector2D& MapLocation, const struct FVector2D& NumGridLines);
	static bool ScreenLocationToMapLocation(struct FVector2D* OutMapLocation, const struct FVector2D& ScreenLocation, const class UPanelWidget* MapBody);
	static bool WorldToMapGridLocation(struct FVector2D* OutMapGrid, const struct FVector& WorldVectorZeroBased, const struct FBox2D& WorldBoundsZeroBased, const struct FVector2D& MapBoundsScale, const struct FVector2D& NumGridLines);
	static bool WorldToMapLocation(struct FVector2D* OutMapLocation, const struct FVector& WorldLocationZeroBased, const struct FBox2D& WorldBoundsZeroBased, const struct FVector2D& MapBoundsScale);
	static bool WorldToMapVector(struct FVector2D* OutMapVector, const struct FVector& WorldVectorZeroBased, const struct FBox2D& WorldBoundsZeroBased, const struct FVector2D& MapBoundsScale);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapConversions">();
	}
	static class USQMapConversions* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapConversions>();
	}
};
static_assert(alignof(USQMapConversions) == 0x000008, "Wrong alignment on USQMapConversions");
static_assert(sizeof(USQMapConversions) == 0x000028, "Wrong size on USQMapConversions");

// Class Squad.SQMapGrid
// 0x00F0 (0x0358 - 0x0268)
class USQMapGrid final : public USQUserWidget
{
public:
	struct FLinearColor                           MajorGridColor;                                    // 0x0268(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           MinorGridColor;                                    // 0x0278(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TinyGridColor;                                     // 0x0288(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            MajorGridOpacityCurve;                             // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            MinorGridOpacityCurve;                             // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            TinyGridOpacityCurve;                              // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MajorGridWidth;                                    // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinorGridWidth;                                    // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TinyGridWidth;                                     // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LegendPercentageLocation;                          // 0x02BC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LegendTextOffset;                                  // 0x02C4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLegendPercentageSize;                           // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateFontInfo                         LegendScaleFontInfo;                               // 0x02D0(0x0058)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQMap*                                 OwnerMap;                                          // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawGridMarkers;                                  // 0x0330(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1252[0x3];                                     // 0x0331(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              RealMapSize;                                       // 0x0334(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              RealToPixel;                                       // 0x033C(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              PixelSize;                                         // 0x0344(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              LinesNeeded;                                       // 0x034C(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1253[0x4];                                     // 0x0354(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void DrawGrid(class USQMapGrid* MapGrid, struct FPaintContext& Context, const struct FVector2D& Offset, const struct FVector2D& StepSize, const struct FVector2D& GridLinesNeeded, const int32 SkipNumber, const struct FLinearColor& Color, const float Width);
	static void DrawGridMarkers(class USQMapGrid* MapGrid, struct FPaintContext& Context, const struct FVector2D& Offset, const struct FVector2D& StepSize, const struct FVector2D& GridLinesNeeded, const struct FLinearColor& Color);
	static void DrawLegendLine(class USQMapGrid* MapGrid, struct FPaintContext& Context, const struct FVector2D& StepSize, const struct FLinearColor& Color, const float Width, const class FText& LegendText, const float YOffset);
	static void DrawWidget(class USQMapGrid* MapGrid, struct FPaintContext& Context);

	void InitWidget();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapGrid">();
	}
	static class USQMapGrid* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapGrid>();
	}
};
static_assert(alignof(USQMapGrid) == 0x000008, "Wrong alignment on USQMapGrid");
static_assert(sizeof(USQMapGrid) == 0x000358, "Wrong size on USQMapGrid");
static_assert(offsetof(USQMapGrid, MajorGridColor) == 0x000268, "Member 'USQMapGrid::MajorGridColor' has a wrong offset!");
static_assert(offsetof(USQMapGrid, MinorGridColor) == 0x000278, "Member 'USQMapGrid::MinorGridColor' has a wrong offset!");
static_assert(offsetof(USQMapGrid, TinyGridColor) == 0x000288, "Member 'USQMapGrid::TinyGridColor' has a wrong offset!");
static_assert(offsetof(USQMapGrid, MajorGridOpacityCurve) == 0x000298, "Member 'USQMapGrid::MajorGridOpacityCurve' has a wrong offset!");
static_assert(offsetof(USQMapGrid, MinorGridOpacityCurve) == 0x0002A0, "Member 'USQMapGrid::MinorGridOpacityCurve' has a wrong offset!");
static_assert(offsetof(USQMapGrid, TinyGridOpacityCurve) == 0x0002A8, "Member 'USQMapGrid::TinyGridOpacityCurve' has a wrong offset!");
static_assert(offsetof(USQMapGrid, MajorGridWidth) == 0x0002B0, "Member 'USQMapGrid::MajorGridWidth' has a wrong offset!");
static_assert(offsetof(USQMapGrid, MinorGridWidth) == 0x0002B4, "Member 'USQMapGrid::MinorGridWidth' has a wrong offset!");
static_assert(offsetof(USQMapGrid, TinyGridWidth) == 0x0002B8, "Member 'USQMapGrid::TinyGridWidth' has a wrong offset!");
static_assert(offsetof(USQMapGrid, LegendPercentageLocation) == 0x0002BC, "Member 'USQMapGrid::LegendPercentageLocation' has a wrong offset!");
static_assert(offsetof(USQMapGrid, LegendTextOffset) == 0x0002C4, "Member 'USQMapGrid::LegendTextOffset' has a wrong offset!");
static_assert(offsetof(USQMapGrid, MaxLegendPercentageSize) == 0x0002CC, "Member 'USQMapGrid::MaxLegendPercentageSize' has a wrong offset!");
static_assert(offsetof(USQMapGrid, LegendScaleFontInfo) == 0x0002D0, "Member 'USQMapGrid::LegendScaleFontInfo' has a wrong offset!");
static_assert(offsetof(USQMapGrid, OwnerMap) == 0x000328, "Member 'USQMapGrid::OwnerMap' has a wrong offset!");
static_assert(offsetof(USQMapGrid, bDrawGridMarkers) == 0x000330, "Member 'USQMapGrid::bDrawGridMarkers' has a wrong offset!");
static_assert(offsetof(USQMapGrid, RealMapSize) == 0x000334, "Member 'USQMapGrid::RealMapSize' has a wrong offset!");
static_assert(offsetof(USQMapGrid, RealToPixel) == 0x00033C, "Member 'USQMapGrid::RealToPixel' has a wrong offset!");
static_assert(offsetof(USQMapGrid, PixelSize) == 0x000344, "Member 'USQMapGrid::PixelSize' has a wrong offset!");
static_assert(offsetof(USQMapGrid, LinesNeeded) == 0x00034C, "Member 'USQMapGrid::LinesNeeded' has a wrong offset!");

// Class Squad.SQMapMarker
// 0x0028 (0x0260 - 0x0238)
class ASQMapMarker : public ASQTeamActor
{
public:
	uint8                                         Pad_1256[0x8];                                     // 0x0238(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USQMapIconComponent*                    MapIcon;                                           // 0x0240(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQCoreStateComponent*                  StateObject;                                       // 0x0248(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Squad;                                             // 0x0250(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         FireTeamId;                                        // 0x0254(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESQEmotes                                     PlacementEmote;                                    // 0x0258(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1257[0x7];                                     // 0x0259(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	ESQMapMarkerType GetMarkerType();
	void OnRep_Squad();
	void SetFireteamId(int32 Param_FireTeamId);
	void SetMarkerType(ESQMapMarkerType MarkerType);
	void SetMarkerVisibleTo(ESQMapMarkerVisibleTo VisibleTo);
	void SetSquad(int32 Param_Squad);

	int32 GetFireteamId() const;
	int32 GetSquad() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapMarker">();
	}
	static class ASQMapMarker* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQMapMarker>();
	}
};
static_assert(alignof(ASQMapMarker) == 0x000008, "Wrong alignment on ASQMapMarker");
static_assert(sizeof(ASQMapMarker) == 0x000260, "Wrong size on ASQMapMarker");
static_assert(offsetof(ASQMapMarker, MapIcon) == 0x000240, "Member 'ASQMapMarker::MapIcon' has a wrong offset!");
static_assert(offsetof(ASQMapMarker, StateObject) == 0x000248, "Member 'ASQMapMarker::StateObject' has a wrong offset!");
static_assert(offsetof(ASQMapMarker, Squad) == 0x000250, "Member 'ASQMapMarker::Squad' has a wrong offset!");
static_assert(offsetof(ASQMapMarker, FireTeamId) == 0x000254, "Member 'ASQMapMarker::FireTeamId' has a wrong offset!");
static_assert(offsetof(ASQMapMarker, PlacementEmote) == 0x000258, "Member 'ASQMapMarker::PlacementEmote' has a wrong offset!");

// Class Squad.SQMapMarkerDataAsset
// 0x00D0 (0x0100 - 0x0030)
class USQMapMarkerDataAsset final : public UPrimaryDataAsset
{
public:
	struct FSQMapMarkerVisualData                 MarkerVisualData;                                  // 0x0030(0x00C8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsGlobalMarker;                                   // 0x00F8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1258[0x7];                                     // 0x00F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapMarkerDataAsset">();
	}
	static class USQMapMarkerDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapMarkerDataAsset>();
	}
};
static_assert(alignof(USQMapMarkerDataAsset) == 0x000008, "Wrong alignment on USQMapMarkerDataAsset");
static_assert(sizeof(USQMapMarkerDataAsset) == 0x000100, "Wrong size on USQMapMarkerDataAsset");
static_assert(offsetof(USQMapMarkerDataAsset, MarkerVisualData) == 0x000030, "Member 'USQMapMarkerDataAsset::MarkerVisualData' has a wrong offset!");
static_assert(offsetof(USQMapMarkerDataAsset, bIsGlobalMarker) == 0x0000F8, "Member 'USQMapMarkerDataAsset::bIsGlobalMarker' has a wrong offset!");

// Class Squad.SQMapMarkerManagerComponent
// 0x03C0 (0x0470 - 0x00B0)
class alignas(0x10) USQMapMarkerManagerComponent final : public UActorComponent
{
public:
	struct FSQStaticMapMarkerArray                MarkerArray;                                       // 0x00B0(0x0148)(Net, ContainsInstancedReference, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             MapMarkerWidgetCreatedEvent;                       // 0x01F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class USQMapWidgetBase*                       RootWidget;                                        // 0x0208(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ASQHUD*                                 RootHUD;                                           // 0x0210(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         COMarkerTypeLimits[0x8];                           // 0x0218(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         SLMarkerTypeLimits[0x8];                           // 0x0238(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         FTMarkerTypeLimits[0x8];                           // 0x0258(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         WidgetScale;                                       // 0x0278(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1259[0x4];                                     // 0x027C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<uint8, class USQMapMarkerBase*>          RelevantMarkerWidgets;                             // 0x0280(0x0050)(Edit, ExportObject, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<uint8, struct FSQMapMarkerVisualData>    RelevantMarkers;                                   // 0x02D0(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_125A[0x58];                                    // 0x0320(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class APawn>>              AdminTypes;                                        // 0x0378(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_125B[0xE8];                                    // 0x0388(0x00E8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateMapMarker(const struct FSQMapMarkerGameplayData& MarkerGameplayData, bool bIsCommanderMarker);
	void DeleteRelevantMarkers(const TArray<int32>& MapMarkerModifiedIndices);
	void FindMapMarkersByType(TArray<struct FSQMapMarkerGameplayData>* OutMarkers, class USQMapMarkerDataAsset* MarkerType);
	void InitializeRelevantMarkers(const TArray<int32>& MapMarkerModifiedIndices);
	void OnCommanderDemotedEvent(class ASQPlayerState* OldCommander);
	void OnFireteamDeletedEvent(class ASQSquad* Squad, int32 FireTeamId);
	void OnMarkerDeleted(const TArray<int32>& MapMarkerModifiedIndices);
	void OnMarkerReceived(const TArray<int32>& MapMarkerModifiedIndices);
	void OnSquadDeletedEvent(int32 OldSquadId, int32 TeamId);
	void RemoveMapMarker(uint8 ID, bool bHasTimedOut);
	void SetMarkerWidgetScale(float ScaleValue);
	void SetRootHUD(class ASQHUD* NewRootHUD);
	void SetRootWidget(class USQMapWidgetBase* NewRootWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapMarkerManagerComponent">();
	}
	static class USQMapMarkerManagerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapMarkerManagerComponent>();
	}
};
static_assert(alignof(USQMapMarkerManagerComponent) == 0x000010, "Wrong alignment on USQMapMarkerManagerComponent");
static_assert(sizeof(USQMapMarkerManagerComponent) == 0x000470, "Wrong size on USQMapMarkerManagerComponent");
static_assert(offsetof(USQMapMarkerManagerComponent, MarkerArray) == 0x0000B0, "Member 'USQMapMarkerManagerComponent::MarkerArray' has a wrong offset!");
static_assert(offsetof(USQMapMarkerManagerComponent, MapMarkerWidgetCreatedEvent) == 0x0001F8, "Member 'USQMapMarkerManagerComponent::MapMarkerWidgetCreatedEvent' has a wrong offset!");
static_assert(offsetof(USQMapMarkerManagerComponent, RootWidget) == 0x000208, "Member 'USQMapMarkerManagerComponent::RootWidget' has a wrong offset!");
static_assert(offsetof(USQMapMarkerManagerComponent, RootHUD) == 0x000210, "Member 'USQMapMarkerManagerComponent::RootHUD' has a wrong offset!");
static_assert(offsetof(USQMapMarkerManagerComponent, COMarkerTypeLimits) == 0x000218, "Member 'USQMapMarkerManagerComponent::COMarkerTypeLimits' has a wrong offset!");
static_assert(offsetof(USQMapMarkerManagerComponent, SLMarkerTypeLimits) == 0x000238, "Member 'USQMapMarkerManagerComponent::SLMarkerTypeLimits' has a wrong offset!");
static_assert(offsetof(USQMapMarkerManagerComponent, FTMarkerTypeLimits) == 0x000258, "Member 'USQMapMarkerManagerComponent::FTMarkerTypeLimits' has a wrong offset!");
static_assert(offsetof(USQMapMarkerManagerComponent, WidgetScale) == 0x000278, "Member 'USQMapMarkerManagerComponent::WidgetScale' has a wrong offset!");
static_assert(offsetof(USQMapMarkerManagerComponent, RelevantMarkerWidgets) == 0x000280, "Member 'USQMapMarkerManagerComponent::RelevantMarkerWidgets' has a wrong offset!");
static_assert(offsetof(USQMapMarkerManagerComponent, RelevantMarkers) == 0x0002D0, "Member 'USQMapMarkerManagerComponent::RelevantMarkers' has a wrong offset!");
static_assert(offsetof(USQMapMarkerManagerComponent, AdminTypes) == 0x000378, "Member 'USQMapMarkerManagerComponent::AdminTypes' has a wrong offset!");

// Class Squad.SQMapTextComponent
// 0x0018 (0x0120 - 0x0108)
class USQMapTextComponent final : public USQMapItemComponent
{
public:
	class FText                                   Text;                                              // 0x0108(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapTextComponent">();
	}
	static class USQMapTextComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapTextComponent>();
	}
};
static_assert(alignof(USQMapTextComponent) == 0x000008, "Wrong alignment on USQMapTextComponent");
static_assert(sizeof(USQMapTextComponent) == 0x000120, "Wrong size on USQMapTextComponent");
static_assert(offsetof(USQMapTextComponent, Text) == 0x000108, "Member 'USQMapTextComponent::Text' has a wrong offset!");

// Class Squad.SQMapVehicleIconWidget
// 0x0000 (0x0298 - 0x0298)
class USQMapVehicleIconWidget : public USQMapPawnIconWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapVehicleIconWidget">();
	}
	static class USQMapVehicleIconWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapVehicleIconWidget>();
	}
};
static_assert(alignof(USQMapVehicleIconWidget) == 0x000008, "Wrong alignment on USQMapVehicleIconWidget");
static_assert(sizeof(USQMapVehicleIconWidget) == 0x000298, "Wrong size on USQMapVehicleIconWidget");

// Class Squad.SQVehicleEngine
// 0x0010 (0x0600 - 0x05F0)
#pragma pack(push, 0x1)
class alignas(0x10) USQVehicleEngine : public USQVehicleComponent
{
public:
	class UCurveFloat*                            HealthVsDamageCurve;                               // 0x05F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	float GetCurrentEngineTogglePercentage() const;
	float GetCurrentEngineToggleRequiredDuration() const;
	bool IsEngineActive() const;
	bool IsEngineToggleActive() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleEngine">();
	}
	static class USQVehicleEngine* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleEngine>();
	}
};
#pragma pack(pop)
static_assert(alignof(USQVehicleEngine) == 0x000010, "Wrong alignment on USQVehicleEngine");
static_assert(sizeof(USQVehicleEngine) == 0x000600, "Wrong size on USQVehicleEngine");
static_assert(offsetof(USQVehicleEngine, HealthVsDamageCurve) == 0x0005F0, "Member 'USQVehicleEngine::HealthVsDamageCurve' has a wrong offset!");

// Class Squad.SQVehicleEngineComponent
// 0x00F0 (0x06F0 - 0x0600)
class USQVehicleEngineComponent : public USQVehicleEngine
{
public:
	FMulticastInlineDelegateProperty_             OnEngineActiveEvent;                               // 0x05F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	class USoundCue*                              EngineStartSound;                                  // 0x0608(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              EngineCompletedStartSound;                         // 0x0610(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              EngineFailedStartSound;                            // 0x0618(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              EngineStopSound;                                   // 0x0620(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              EngineRPMSound;                                    // 0x0628(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              EngineExhaustSound;                                // 0x0630(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              LandingSound;                                      // 0x0638(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EngineIdleFadeInAfterEngineStartTime;              // 0x0640(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EngineIdleFadeOutAfterEngineStopTime;              // 0x0644(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GearChangingAlphaLerpSpeed;                        // 0x0648(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_125E[0x4];                                     // 0x064C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQEngineMovementSoundObject>   EngineMovementSounds;                              // 0x0650(0x0010)(Edit, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UAudioComponent*                        EngineExhaustStartAC;                              // 0x0660(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        EngineRPMAC;                                       // 0x0668(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        EngineExhaustAC;                                   // 0x0670(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        EngineExhaustStopAC;                               // 0x0678(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        EngineStartAC;                                     // 0x0680(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        EngineCompletedStartAC;                            // 0x0688(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        EngineFailedStartAC;                               // 0x0690(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        EngineStopAC;                                      // 0x0698(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        EngineSpeedAC;                                     // 0x06A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystemComponent*               ExhaustPSC;                                        // 0x06A8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      ExhaustNPSC;                                       // 0x06B0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraShakeBase>           EngineVibrationCameraShake;                        // 0x06B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RPMToShakeScaleCurve;                              // 0x06C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEngineActive;                                   // 0x06C8(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsEngineToggleActive;                             // 0x06C9(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_125F[0x2];                                     // 0x06CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActivateEngineDelay;                               // 0x06CC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DeActivateEngineDelay;                             // 0x06D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1260[0xC];                                     // 0x06D4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraShakeBase*                       VibrationCameraShake;                              // 0x06E0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APlayerCameraManager*                   VibrationCameraManager;                            // 0x06E8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnPlayerEnteredVehicleHandler(class ASQVehicle* Vehicle, class APlayerController* Player, int32 Seat);
	void OnPlayerExitedVehicleHandler(class ASQVehicle* Vehicle, class APlayerController* Player, int32 Seat);
	void OnRep_EngineActive();
	void OnRep_EngineToggleActive();
	void ServerSetEngineActiveInput(bool bNewEngineActive);
	void ServerSetEngineToggleActiveInput(bool bInIsEngineToggleActive);
	void StopEngineImmediately();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleEngineComponent">();
	}
	static class USQVehicleEngineComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleEngineComponent>();
	}
};
static_assert(alignof(USQVehicleEngineComponent) == 0x000010, "Wrong alignment on USQVehicleEngineComponent");
static_assert(sizeof(USQVehicleEngineComponent) == 0x0006F0, "Wrong size on USQVehicleEngineComponent");
static_assert(offsetof(USQVehicleEngineComponent, OnEngineActiveEvent) == 0x0005F8, "Member 'USQVehicleEngineComponent::OnEngineActiveEvent' has a wrong offset!");
static_assert(offsetof(USQVehicleEngineComponent, EngineStartSound) == 0x000608, "Member 'USQVehicleEngineComponent::EngineStartSound' has a wrong offset!");
static_assert(offsetof(USQVehicleEngineComponent, EngineCompletedStartSound) == 0x000610, "Member 'USQVehicleEngineComponent::EngineCompletedStartSound' has a wrong offset!");
static_assert(offsetof(USQVehicleEngineComponent, EngineFailedStartSound) == 0x000618, "Member 'USQVehicleEngineComponent::EngineFailedStartSound' has a wrong offset!");
static_assert(offsetof(USQVehicleEngineComponent, EngineStopSound) == 0x000620, "Member 'USQVehicleEngineComponent::EngineStopSound' has a wrong offset!");
static_assert(offsetof(USQVehicleEngineComponent, EngineRPMSound) == 0x000628, "Member 'USQVehicleEngineComponent::EngineRPMSound' has a wrong offset!");
static_assert(offsetof(USQVehicleEngineComponent, EngineExhaustSound) == 0x000630, "Member 'USQVehicleEngineComponent::EngineExhaustSound' has a wrong offset!");
static_assert(offsetof(USQVehicleEngineComponent, LandingSound) == 0x000638, "Member 'USQVehicleEngineComponent::LandingSound' has a wrong offset!");
static_assert(offsetof(USQVehicleEngineComponent, EngineIdleFadeInAfterEngineStartTime) == 0x000640, "Member 'USQVehicleEngineComponent::EngineIdleFadeInAfterEngineStartTime' has a wrong offset!");
static_assert(offsetof(USQVehicleEngineComponent, EngineIdleFadeOutAfterEngineStopTime) == 0x000644, "Member 'USQVehicleEngineComponent::EngineIdleFadeOutAfterEngineStopTime' has a wrong offset!");
static_assert(offsetof(USQVehicleEngineComponent, GearChangingAlphaLerpSpeed) == 0x000648, "Member 'USQVehicleEngineComponent::GearChangingAlphaLerpSpeed' has a wrong offset!");
static_assert(offsetof(USQVehicleEngineComponent, EngineMovementSounds) == 0x000650, "Member 'USQVehicleEngineComponent::EngineMovementSounds' has a wrong offset!");
static_assert(offsetof(USQVehicleEngineComponent, EngineExhaustStartAC) == 0x000660, "Member 'USQVehicleEngineComponent::EngineExhaustStartAC' has a wrong offset!");
static_assert(offsetof(USQVehicleEngineComponent, EngineRPMAC) == 0x000668, "Member 'USQVehicleEngineComponent::EngineRPMAC' has a wrong offset!");
static_assert(offsetof(USQVehicleEngineComponent, EngineExhaustAC) == 0x000670, "Member 'USQVehicleEngineComponent::EngineExhaustAC' has a wrong offset!");
static_assert(offsetof(USQVehicleEngineComponent, EngineExhaustStopAC) == 0x000678, "Member 'USQVehicleEngineComponent::EngineExhaustStopAC' has a wrong offset!");
static_assert(offsetof(USQVehicleEngineComponent, EngineStartAC) == 0x000680, "Member 'USQVehicleEngineComponent::EngineStartAC' has a wrong offset!");
static_assert(offsetof(USQVehicleEngineComponent, EngineCompletedStartAC) == 0x000688, "Member 'USQVehicleEngineComponent::EngineCompletedStartAC' has a wrong offset!");
static_assert(offsetof(USQVehicleEngineComponent, EngineFailedStartAC) == 0x000690, "Member 'USQVehicleEngineComponent::EngineFailedStartAC' has a wrong offset!");
static_assert(offsetof(USQVehicleEngineComponent, EngineStopAC) == 0x000698, "Member 'USQVehicleEngineComponent::EngineStopAC' has a wrong offset!");
static_assert(offsetof(USQVehicleEngineComponent, EngineSpeedAC) == 0x0006A0, "Member 'USQVehicleEngineComponent::EngineSpeedAC' has a wrong offset!");
static_assert(offsetof(USQVehicleEngineComponent, ExhaustPSC) == 0x0006A8, "Member 'USQVehicleEngineComponent::ExhaustPSC' has a wrong offset!");
static_assert(offsetof(USQVehicleEngineComponent, ExhaustNPSC) == 0x0006B0, "Member 'USQVehicleEngineComponent::ExhaustNPSC' has a wrong offset!");
static_assert(offsetof(USQVehicleEngineComponent, EngineVibrationCameraShake) == 0x0006B8, "Member 'USQVehicleEngineComponent::EngineVibrationCameraShake' has a wrong offset!");
static_assert(offsetof(USQVehicleEngineComponent, RPMToShakeScaleCurve) == 0x0006C0, "Member 'USQVehicleEngineComponent::RPMToShakeScaleCurve' has a wrong offset!");
static_assert(offsetof(USQVehicleEngineComponent, bIsEngineActive) == 0x0006C8, "Member 'USQVehicleEngineComponent::bIsEngineActive' has a wrong offset!");
static_assert(offsetof(USQVehicleEngineComponent, bIsEngineToggleActive) == 0x0006C9, "Member 'USQVehicleEngineComponent::bIsEngineToggleActive' has a wrong offset!");
static_assert(offsetof(USQVehicleEngineComponent, ActivateEngineDelay) == 0x0006CC, "Member 'USQVehicleEngineComponent::ActivateEngineDelay' has a wrong offset!");
static_assert(offsetof(USQVehicleEngineComponent, DeActivateEngineDelay) == 0x0006D0, "Member 'USQVehicleEngineComponent::DeActivateEngineDelay' has a wrong offset!");
static_assert(offsetof(USQVehicleEngineComponent, VibrationCameraShake) == 0x0006E0, "Member 'USQVehicleEngineComponent::VibrationCameraShake' has a wrong offset!");
static_assert(offsetof(USQVehicleEngineComponent, VibrationCameraManager) == 0x0006E8, "Member 'USQVehicleEngineComponent::VibrationCameraManager' has a wrong offset!");

// Class Squad.SQRoleListGroup
// 0x0030 (0x0298 - 0x0268)
class USQRoleListGroup final : public USQUserWidget
{
public:
	ESQRoleTypeEnum                               RoleType;                                          // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1263[0x7];                                     // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   GroupHeaderText;                                   // 0x0270(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UCanvasPanel*                           GroupHeader;                                       // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUniformGridPanel*                      RoleGrid;                                          // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void InitWidget();

	class FText GroupAvailabilityText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRoleListGroup">();
	}
	static class USQRoleListGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRoleListGroup>();
	}
};
static_assert(alignof(USQRoleListGroup) == 0x000008, "Wrong alignment on USQRoleListGroup");
static_assert(sizeof(USQRoleListGroup) == 0x000298, "Wrong size on USQRoleListGroup");
static_assert(offsetof(USQRoleListGroup, RoleType) == 0x000268, "Member 'USQRoleListGroup::RoleType' has a wrong offset!");
static_assert(offsetof(USQRoleListGroup, GroupHeaderText) == 0x000270, "Member 'USQRoleListGroup::GroupHeaderText' has a wrong offset!");
static_assert(offsetof(USQRoleListGroup, GroupHeader) == 0x000288, "Member 'USQRoleListGroup::GroupHeader' has a wrong offset!");
static_assert(offsetof(USQRoleListGroup, RoleGrid) == 0x000290, "Member 'USQRoleListGroup::RoleGrid' has a wrong offset!");

// Class Squad.SQMapWidgetAmmoCrate
// 0x0000 (0x02E0 - 0x02E0)
class USQMapWidgetAmmoCrate : public USQMapWidgetDeployable
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapWidgetAmmoCrate">();
	}
	static class USQMapWidgetAmmoCrate* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapWidgetAmmoCrate>();
	}
};
static_assert(alignof(USQMapWidgetAmmoCrate) == 0x000008, "Wrong alignment on USQMapWidgetAmmoCrate");
static_assert(sizeof(USQMapWidgetAmmoCrate) == 0x0002E0, "Wrong size on USQMapWidgetAmmoCrate");

// Class Squad.SQMapWidgetBase
// 0x0030 (0x0290 - 0x0260)
class USQMapWidgetBase : public UUserWidget
{
public:
	class UPanelWidget*                           MapBody;                                           // 0x0260(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1264[0x28];                                    // 0x0268(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class USQMapMarkerBase* CreateMarkerWidget(const struct FSQMapMarkerVisualData& MapMarkerVisualData);
	bool RemoveMarkerWidget(class USQMapMarkerBase* Target);
	void SetMapBody(class UPanelWidget* NewMapBody);

	class UPanelWidget* GetMapBody() const;
	const struct FVector2D GetMapBoundsScale() const;
	const struct FVector2D GetNumGridLines() const;
	const struct FBox2D GetWorldBounds() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapWidgetBase">();
	}
	static class USQMapWidgetBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapWidgetBase>();
	}
};
static_assert(alignof(USQMapWidgetBase) == 0x000008, "Wrong alignment on USQMapWidgetBase");
static_assert(sizeof(USQMapWidgetBase) == 0x000290, "Wrong size on USQMapWidgetBase");
static_assert(offsetof(USQMapWidgetBase, MapBody) == 0x000260, "Member 'USQMapWidgetBase::MapBody' has a wrong offset!");

// Class Squad.SQRotorWashEffectSender
// 0x0030 (0x0230 - 0x0200)
class USQRotorWashEffectSender : public USceneComponent
{
public:
	TArray<class USQRotorWashEffectListener*>     ActiveListeners;                                   // 0x01F8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	float                                         EffectRadius;                                      // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1266[0x4];                                     // 0x020C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotorWashData                         EmitterData;                                       // 0x0210(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_1267[0x8];                                     // 0x0228(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Initialize();
	void RegisterListener(class USQRotorWashEffectListener* Listener);
	void UnregisterListener(class USQRotorWashEffectListener* Listener);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRotorWashEffectSender">();
	}
	static class USQRotorWashEffectSender* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRotorWashEffectSender>();
	}
};
static_assert(alignof(USQRotorWashEffectSender) == 0x000010, "Wrong alignment on USQRotorWashEffectSender");
static_assert(sizeof(USQRotorWashEffectSender) == 0x000230, "Wrong size on USQRotorWashEffectSender");
static_assert(offsetof(USQRotorWashEffectSender, ActiveListeners) == 0x0001F8, "Member 'USQRotorWashEffectSender::ActiveListeners' has a wrong offset!");
static_assert(offsetof(USQRotorWashEffectSender, EffectRadius) == 0x000208, "Member 'USQRotorWashEffectSender::EffectRadius' has a wrong offset!");
static_assert(offsetof(USQRotorWashEffectSender, EmitterData) == 0x000210, "Member 'USQRotorWashEffectSender::EmitterData' has a wrong offset!");

// Class Squad.SQMapWidgetCameraman
// 0x0000 (0x02E8 - 0x02E8)
class USQMapWidgetCameraman : public USQMapWidgetPawn
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapWidgetCameraman">();
	}
	static class USQMapWidgetCameraman* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapWidgetCameraman>();
	}
};
static_assert(alignof(USQMapWidgetCameraman) == 0x000008, "Wrong alignment on USQMapWidgetCameraman");
static_assert(sizeof(USQMapWidgetCameraman) == 0x0002E8, "Wrong size on USQMapWidgetCameraman");

// Class Squad.SQMapWidgetCaptureZone
// 0x0080 (0x0358 - 0x02D8)
class USQMapWidgetCaptureZone : public USQMapWidget
{
public:
	class FText                                   FlagName;                                          // 0x02D8(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              FlagTexture;                                       // 0x02F0(0x0028)(BlueprintVisible, BlueprintReadOnly, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture2D>              DefaultFlag;                                       // 0x0318(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bUncappable : 1;                                   // 0x0340(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_1268[0x3];                                     // 0x0341(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ESQContestingState                            ContestingState;                                   // 0x0344(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         OwningTeam;                                        // 0x0345(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         CapturingTeam;                                     // 0x0346(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1269[0x1];                                     // 0x0347(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CapturePercent;                                    // 0x0348(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CapturePercentDirection;                           // 0x034C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         TeamKnowledge;                                     // 0x0350(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_126A[0x7];                                     // 0x0351(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCapturePercentChanged();
	void OnCapturePercentDirectionChanged();
	void OnCapturingTeamChanged();
	void OnContestingChanged();
	void OnFlagNameChanged();
	void OnFlagTextureChanged();
	void OnOwningTeamChanged();
	void OnTeamKnowledgeChanged();
	void OnUncappableChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapWidgetCaptureZone">();
	}
	static class USQMapWidgetCaptureZone* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapWidgetCaptureZone>();
	}
};
static_assert(alignof(USQMapWidgetCaptureZone) == 0x000008, "Wrong alignment on USQMapWidgetCaptureZone");
static_assert(sizeof(USQMapWidgetCaptureZone) == 0x000358, "Wrong size on USQMapWidgetCaptureZone");
static_assert(offsetof(USQMapWidgetCaptureZone, FlagName) == 0x0002D8, "Member 'USQMapWidgetCaptureZone::FlagName' has a wrong offset!");
static_assert(offsetof(USQMapWidgetCaptureZone, FlagTexture) == 0x0002F0, "Member 'USQMapWidgetCaptureZone::FlagTexture' has a wrong offset!");
static_assert(offsetof(USQMapWidgetCaptureZone, DefaultFlag) == 0x000318, "Member 'USQMapWidgetCaptureZone::DefaultFlag' has a wrong offset!");
static_assert(offsetof(USQMapWidgetCaptureZone, ContestingState) == 0x000344, "Member 'USQMapWidgetCaptureZone::ContestingState' has a wrong offset!");
static_assert(offsetof(USQMapWidgetCaptureZone, OwningTeam) == 0x000345, "Member 'USQMapWidgetCaptureZone::OwningTeam' has a wrong offset!");
static_assert(offsetof(USQMapWidgetCaptureZone, CapturingTeam) == 0x000346, "Member 'USQMapWidgetCaptureZone::CapturingTeam' has a wrong offset!");
static_assert(offsetof(USQMapWidgetCaptureZone, CapturePercent) == 0x000348, "Member 'USQMapWidgetCaptureZone::CapturePercent' has a wrong offset!");
static_assert(offsetof(USQMapWidgetCaptureZone, CapturePercentDirection) == 0x00034C, "Member 'USQMapWidgetCaptureZone::CapturePercentDirection' has a wrong offset!");
static_assert(offsetof(USQMapWidgetCaptureZone, TeamKnowledge) == 0x000350, "Member 'USQMapWidgetCaptureZone::TeamKnowledge' has a wrong offset!");

// Class Squad.SQMapWidgetDeployableExplosive
// 0x0008 (0x02E8 - 0x02E0)
class USQMapWidgetDeployableExplosive : public USQMapWidgetDeployable
{
public:
	ESQExplosiveType                              ExplosiveType;                                     // 0x02E0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_126B[0x7];                                     // 0x02E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnExplosiveTypeChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapWidgetDeployableExplosive">();
	}
	static class USQMapWidgetDeployableExplosive* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapWidgetDeployableExplosive>();
	}
};
static_assert(alignof(USQMapWidgetDeployableExplosive) == 0x000008, "Wrong alignment on USQMapWidgetDeployableExplosive");
static_assert(sizeof(USQMapWidgetDeployableExplosive) == 0x0002E8, "Wrong size on USQMapWidgetDeployableExplosive");
static_assert(offsetof(USQMapWidgetDeployableExplosive, ExplosiveType) == 0x0002E0, "Member 'USQMapWidgetDeployableExplosive::ExplosiveType' has a wrong offset!");

// Class Squad.SQScoreboard
// 0x00B0 (0x0318 - 0x0268)
class USQScoreboard : public USQUserWidget
{
public:
	class USQScoreboardTeam*                      ScoreboardFriendly;                                // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQScoreboardTeam*                      ScoreboardEnemy;                                   // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerController*                    SQPC;                                              // 0x0278(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQGameState*                           SQGameState;                                       // 0x0280(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           UpdateStateTimerHandle;                            // 0x0288(0x0008)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQScoreboardTeam>          ScoreboardTeamType;                                // 0x0290(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   WinningTeamText;                                   // 0x0298(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   TicketsRemainingText;                              // 0x02B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   DrawText;                                          // 0x02C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UImage*                                 GameTimeClockImage;                                // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             RemainingGameTimeText;                             // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 ScoreboardFlairFlag1;                              // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 ScoreboardFlairFlag2;                              // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             GameResultText;                                    // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             GameResultTicketsRemaining;                        // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanel*                           GameResultCanvas;                                  // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void InitWidget();
	void UpdateState();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQScoreboard">();
	}
	static class USQScoreboard* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQScoreboard>();
	}
};
static_assert(alignof(USQScoreboard) == 0x000008, "Wrong alignment on USQScoreboard");
static_assert(sizeof(USQScoreboard) == 0x000318, "Wrong size on USQScoreboard");
static_assert(offsetof(USQScoreboard, ScoreboardFriendly) == 0x000268, "Member 'USQScoreboard::ScoreboardFriendly' has a wrong offset!");
static_assert(offsetof(USQScoreboard, ScoreboardEnemy) == 0x000270, "Member 'USQScoreboard::ScoreboardEnemy' has a wrong offset!");
static_assert(offsetof(USQScoreboard, SQPC) == 0x000278, "Member 'USQScoreboard::SQPC' has a wrong offset!");
static_assert(offsetof(USQScoreboard, SQGameState) == 0x000280, "Member 'USQScoreboard::SQGameState' has a wrong offset!");
static_assert(offsetof(USQScoreboard, UpdateStateTimerHandle) == 0x000288, "Member 'USQScoreboard::UpdateStateTimerHandle' has a wrong offset!");
static_assert(offsetof(USQScoreboard, ScoreboardTeamType) == 0x000290, "Member 'USQScoreboard::ScoreboardTeamType' has a wrong offset!");
static_assert(offsetof(USQScoreboard, WinningTeamText) == 0x000298, "Member 'USQScoreboard::WinningTeamText' has a wrong offset!");
static_assert(offsetof(USQScoreboard, TicketsRemainingText) == 0x0002B0, "Member 'USQScoreboard::TicketsRemainingText' has a wrong offset!");
static_assert(offsetof(USQScoreboard, DrawText) == 0x0002C8, "Member 'USQScoreboard::DrawText' has a wrong offset!");
static_assert(offsetof(USQScoreboard, GameTimeClockImage) == 0x0002E0, "Member 'USQScoreboard::GameTimeClockImage' has a wrong offset!");
static_assert(offsetof(USQScoreboard, RemainingGameTimeText) == 0x0002E8, "Member 'USQScoreboard::RemainingGameTimeText' has a wrong offset!");
static_assert(offsetof(USQScoreboard, ScoreboardFlairFlag1) == 0x0002F0, "Member 'USQScoreboard::ScoreboardFlairFlag1' has a wrong offset!");
static_assert(offsetof(USQScoreboard, ScoreboardFlairFlag2) == 0x0002F8, "Member 'USQScoreboard::ScoreboardFlairFlag2' has a wrong offset!");
static_assert(offsetof(USQScoreboard, GameResultText) == 0x000300, "Member 'USQScoreboard::GameResultText' has a wrong offset!");
static_assert(offsetof(USQScoreboard, GameResultTicketsRemaining) == 0x000308, "Member 'USQScoreboard::GameResultTicketsRemaining' has a wrong offset!");
static_assert(offsetof(USQScoreboard, GameResultCanvas) == 0x000310, "Member 'USQScoreboard::GameResultCanvas' has a wrong offset!");

// Class Squad.SQMapWidgetSQPawn
// 0x0000 (0x02E8 - 0x02E8)
class USQMapWidgetSQPawn : public USQMapWidgetPawn
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapWidgetSQPawn">();
	}
	static class USQMapWidgetSQPawn* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapWidgetSQPawn>();
	}
};
static_assert(alignof(USQMapWidgetSQPawn) == 0x000008, "Wrong alignment on USQMapWidgetSQPawn");
static_assert(sizeof(USQMapWidgetSQPawn) == 0x0002E8, "Wrong size on USQMapWidgetSQPawn");

// Class Squad.SQRotorBladesComponent
// 0x00D0 (0x06C0 - 0x05F0)
class USQRotorBladesComponent final : public USQVehicleComponent
{
public:
	TSubclassOf<class UCameraShakeBase>           DestructionCameraShake;                            // 0x05F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DestructionShakeScale;                             // 0x05F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionDestructionThrustThreshold;               // 0x05FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0600(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         DamagePerSec;                                      // 0x0610(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMainRotor;                                      // 0x0614(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_126C[0x3];                                     // 0x0615(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoredActors;                                     // 0x0618(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_126D[0x70];                                    // 0x0628(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQHelicopter2*                         Owner;                                             // 0x0698(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInCollision;                                      // 0x06A0(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_126E[0x7];                                     // 0x06A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   OverlapMesh;                                       // 0x06A8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_126F[0x10];                                    // 0x06B0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DamageRotor();
	bool TakeFatalDamage();

	bool IsHealthy() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRotorBladesComponent">();
	}
	static class USQRotorBladesComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRotorBladesComponent>();
	}
};
static_assert(alignof(USQRotorBladesComponent) == 0x000010, "Wrong alignment on USQRotorBladesComponent");
static_assert(sizeof(USQRotorBladesComponent) == 0x0006C0, "Wrong size on USQRotorBladesComponent");
static_assert(offsetof(USQRotorBladesComponent, DestructionCameraShake) == 0x0005F0, "Member 'USQRotorBladesComponent::DestructionCameraShake' has a wrong offset!");
static_assert(offsetof(USQRotorBladesComponent, DestructionShakeScale) == 0x0005F8, "Member 'USQRotorBladesComponent::DestructionShakeScale' has a wrong offset!");
static_assert(offsetof(USQRotorBladesComponent, CollisionDestructionThrustThreshold) == 0x0005FC, "Member 'USQRotorBladesComponent::CollisionDestructionThrustThreshold' has a wrong offset!");
static_assert(offsetof(USQRotorBladesComponent, ObjectTypes) == 0x000600, "Member 'USQRotorBladesComponent::ObjectTypes' has a wrong offset!");
static_assert(offsetof(USQRotorBladesComponent, DamagePerSec) == 0x000610, "Member 'USQRotorBladesComponent::DamagePerSec' has a wrong offset!");
static_assert(offsetof(USQRotorBladesComponent, bIsMainRotor) == 0x000614, "Member 'USQRotorBladesComponent::bIsMainRotor' has a wrong offset!");
static_assert(offsetof(USQRotorBladesComponent, IgnoredActors) == 0x000618, "Member 'USQRotorBladesComponent::IgnoredActors' has a wrong offset!");
static_assert(offsetof(USQRotorBladesComponent, Owner) == 0x000698, "Member 'USQRotorBladesComponent::Owner' has a wrong offset!");
static_assert(offsetof(USQRotorBladesComponent, bInCollision) == 0x0006A0, "Member 'USQRotorBladesComponent::bInCollision' has a wrong offset!");
static_assert(offsetof(USQRotorBladesComponent, OverlapMesh) == 0x0006A8, "Member 'USQRotorBladesComponent::OverlapMesh' has a wrong offset!");

// Class Squad.SQMapWidgetVehicleSeat
// 0x0000 (0x02E8 - 0x02E8)
class USQMapWidgetVehicleSeat : public USQMapWidgetSQPawn
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapWidgetVehicleSeat">();
	}
	static class USQMapWidgetVehicleSeat* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapWidgetVehicleSeat>();
	}
};
static_assert(alignof(USQMapWidgetVehicleSeat) == 0x000008, "Wrong alignment on USQMapWidgetVehicleSeat");
static_assert(sizeof(USQMapWidgetVehicleSeat) == 0x0002E8, "Wrong size on USQMapWidgetVehicleSeat");

// Class Squad.SQMapWidgetVehicle
// 0x0058 (0x0340 - 0x02E8)
class USQMapWidgetVehicle : public USQMapWidgetVehicleSeat
{
public:
	class UTexture2D*                             DefaultIcon;                                       // 0x02E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DefaultIconRotation;                               // 0x02F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1270[0x4];                                     // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQVehicleUIStaticDataAsset*            StaticUIData;                                      // 0x02F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHoldsOccupant;                                    // 0x0300(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHoldsSquadLeader;                                 // 0x0301(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHoldsCommander;                                   // 0x0302(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1271[0x1];                                     // 0x0303(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ClaimingSquadID;                                   // 0x0304(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bIsInClaimingSquad : 1;                            // 0x0308(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_1272[0x7];                                     // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQVehicleOccupantInfo>         VehicleOccupants;                                  // 0x0310(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         SelfInVehicleSeat;                                 // 0x0320(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1273[0x1C];                                    // 0x0324(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnClaimingSquadIDChanged();
	void OnHoldsCommanderChanged();
	void OnHoldsOccupantChanged();
	void OnHoldsSquadLeaderChanged();
	void OnIsInClaimingSquadChanged();
	void OnSelfInVehicleSeatChanged();
	void OnStaticUIDataChanged();
	void OnVehicleOccupantInfoChanged(int32 AtIndex);
	void UpdateHoldsCommander();

	bool IsSelfInVehicle() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapWidgetVehicle">();
	}
	static class USQMapWidgetVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapWidgetVehicle>();
	}
};
static_assert(alignof(USQMapWidgetVehicle) == 0x000008, "Wrong alignment on USQMapWidgetVehicle");
static_assert(sizeof(USQMapWidgetVehicle) == 0x000340, "Wrong size on USQMapWidgetVehicle");
static_assert(offsetof(USQMapWidgetVehicle, DefaultIcon) == 0x0002E8, "Member 'USQMapWidgetVehicle::DefaultIcon' has a wrong offset!");
static_assert(offsetof(USQMapWidgetVehicle, DefaultIconRotation) == 0x0002F0, "Member 'USQMapWidgetVehicle::DefaultIconRotation' has a wrong offset!");
static_assert(offsetof(USQMapWidgetVehicle, StaticUIData) == 0x0002F8, "Member 'USQMapWidgetVehicle::StaticUIData' has a wrong offset!");
static_assert(offsetof(USQMapWidgetVehicle, bHoldsOccupant) == 0x000300, "Member 'USQMapWidgetVehicle::bHoldsOccupant' has a wrong offset!");
static_assert(offsetof(USQMapWidgetVehicle, bHoldsSquadLeader) == 0x000301, "Member 'USQMapWidgetVehicle::bHoldsSquadLeader' has a wrong offset!");
static_assert(offsetof(USQMapWidgetVehicle, bHoldsCommander) == 0x000302, "Member 'USQMapWidgetVehicle::bHoldsCommander' has a wrong offset!");
static_assert(offsetof(USQMapWidgetVehicle, ClaimingSquadID) == 0x000304, "Member 'USQMapWidgetVehicle::ClaimingSquadID' has a wrong offset!");
static_assert(offsetof(USQMapWidgetVehicle, VehicleOccupants) == 0x000310, "Member 'USQMapWidgetVehicle::VehicleOccupants' has a wrong offset!");
static_assert(offsetof(USQMapWidgetVehicle, SelfInVehicleSeat) == 0x000320, "Member 'USQMapWidgetVehicle::SelfInVehicleSeat' has a wrong offset!");

// Class Squad.SQMapWidgetEmplacement
// 0x0020 (0x0360 - 0x0340)
class USQMapWidgetEmplacement : public USQMapWidgetVehicle
{
public:
	int32                                         TeamId;                                            // 0x0340(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1274[0x4];                                     // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class APawn>>              AdminTypes;                                        // 0x0348(0x0010)(Edit, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_1275[0x8];                                     // 0x0358(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTeamIDChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapWidgetEmplacement">();
	}
	static class USQMapWidgetEmplacement* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapWidgetEmplacement>();
	}
};
static_assert(alignof(USQMapWidgetEmplacement) == 0x000008, "Wrong alignment on USQMapWidgetEmplacement");
static_assert(sizeof(USQMapWidgetEmplacement) == 0x000360, "Wrong size on USQMapWidgetEmplacement");
static_assert(offsetof(USQMapWidgetEmplacement, TeamId) == 0x000340, "Member 'USQMapWidgetEmplacement::TeamId' has a wrong offset!");
static_assert(offsetof(USQMapWidgetEmplacement, AdminTypes) == 0x000348, "Member 'USQMapWidgetEmplacement::AdminTypes' has a wrong offset!");

// Class Squad.SQScoreboardTeamScore
// 0x0050 (0x02B8 - 0x0268)
class USQScoreboardTeamScore : public USQUserWidget
{
public:
	class UHorizontalBox*                         EndOfRoundPanel;                                   // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpacer*                                NotEndOfRoundSpacer;                               // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             KillsText;                                         // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             IncapsText;                                        // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             DeathsText;                                        // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             RevivesText;                                       // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             HealsText;                                         // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             TeamworkText;                                      // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             ObjectivesText;                                    // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             ScoreText;                                         // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void InitWidget();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQScoreboardTeamScore">();
	}
	static class USQScoreboardTeamScore* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQScoreboardTeamScore>();
	}
};
static_assert(alignof(USQScoreboardTeamScore) == 0x000008, "Wrong alignment on USQScoreboardTeamScore");
static_assert(sizeof(USQScoreboardTeamScore) == 0x0002B8, "Wrong size on USQScoreboardTeamScore");
static_assert(offsetof(USQScoreboardTeamScore, EndOfRoundPanel) == 0x000268, "Member 'USQScoreboardTeamScore::EndOfRoundPanel' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeamScore, NotEndOfRoundSpacer) == 0x000270, "Member 'USQScoreboardTeamScore::NotEndOfRoundSpacer' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeamScore, KillsText) == 0x000278, "Member 'USQScoreboardTeamScore::KillsText' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeamScore, IncapsText) == 0x000280, "Member 'USQScoreboardTeamScore::IncapsText' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeamScore, DeathsText) == 0x000288, "Member 'USQScoreboardTeamScore::DeathsText' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeamScore, RevivesText) == 0x000290, "Member 'USQScoreboardTeamScore::RevivesText' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeamScore, HealsText) == 0x000298, "Member 'USQScoreboardTeamScore::HealsText' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeamScore, TeamworkText) == 0x0002A0, "Member 'USQScoreboardTeamScore::TeamworkText' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeamScore, ObjectivesText) == 0x0002A8, "Member 'USQScoreboardTeamScore::ObjectivesText' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeamScore, ScoreText) == 0x0002B0, "Member 'USQScoreboardTeamScore::ScoreText' has a wrong offset!");

// Class Squad.SQRestriction_PlayerStatus
// 0x0010 (0x0070 - 0x0060)
class USQRestriction_PlayerStatus final : public USQRestriction_Boolean
{
public:
	TArray<ESQPlayerStatus>                       RequiredStatus;                                    // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRestriction_PlayerStatus">();
	}
	static class USQRestriction_PlayerStatus* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRestriction_PlayerStatus>();
	}
};
static_assert(alignof(USQRestriction_PlayerStatus) == 0x000008, "Wrong alignment on USQRestriction_PlayerStatus");
static_assert(sizeof(USQRestriction_PlayerStatus) == 0x000070, "Wrong size on USQRestriction_PlayerStatus");
static_assert(offsetof(USQRestriction_PlayerStatus, RequiredStatus) == 0x000060, "Member 'USQRestriction_PlayerStatus::RequiredStatus' has a wrong offset!");

// Class Squad.SQMapWidgetHAB
// 0x0008 (0x02E8 - 0x02E0)
class USQMapWidgetHAB : public USQMapWidgetDeployable
{
public:
	uint8                                         bSpawningEnabled : 1;                              // 0x02E0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bSieged : 1;                                       // 0x02E0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_1276[0x3];                                     // 0x02E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActivatedTimeStamp;                                // 0x02E4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnActivatedTimeStampChanged();
	void OnSiegedChanged();
	void OnSpawningEnabledChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapWidgetHAB">();
	}
	static class USQMapWidgetHAB* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapWidgetHAB>();
	}
};
static_assert(alignof(USQMapWidgetHAB) == 0x000008, "Wrong alignment on USQMapWidgetHAB");
static_assert(sizeof(USQMapWidgetHAB) == 0x0002E8, "Wrong size on USQMapWidgetHAB");
static_assert(offsetof(USQMapWidgetHAB, ActivatedTimeStamp) == 0x0002E4, "Member 'USQMapWidgetHAB::ActivatedTimeStamp' has a wrong offset!");

// Class Squad.SQMapWidgetMapMarkerObjective
// 0x0000 (0x02F8 - 0x02F8)
class USQMapWidgetMapMarkerObjective : public USQMapWidgetMapMarker
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapWidgetMapMarkerObjective">();
	}
	static class USQMapWidgetMapMarkerObjective* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapWidgetMapMarkerObjective>();
	}
};
static_assert(alignof(USQMapWidgetMapMarkerObjective) == 0x000008, "Wrong alignment on USQMapWidgetMapMarkerObjective");
static_assert(sizeof(USQMapWidgetMapMarkerObjective) == 0x0002F8, "Wrong size on USQMapWidgetMapMarkerObjective");

// Class Squad.SQSquadStateDataDeployableExplosive
// 0x0008 (0x0168 - 0x0160)
class USQSquadStateDataDeployableExplosive : public USQSquadStateDataDeployable
{
public:
	ESQExplosiveType                              ExplosiveType;                                     // 0x0160(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1277[0x7];                                     // 0x0161(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadStateDataDeployableExplosive">();
	}
	static class USQSquadStateDataDeployableExplosive* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSquadStateDataDeployableExplosive>();
	}
};
static_assert(alignof(USQSquadStateDataDeployableExplosive) == 0x000008, "Wrong alignment on USQSquadStateDataDeployableExplosive");
static_assert(sizeof(USQSquadStateDataDeployableExplosive) == 0x000168, "Wrong size on USQSquadStateDataDeployableExplosive");
static_assert(offsetof(USQSquadStateDataDeployableExplosive, ExplosiveType) == 0x000160, "Member 'USQSquadStateDataDeployableExplosive::ExplosiveType' has a wrong offset!");

// Class Squad.SQSaveGameSettings
// 0x0018 (0x0050 - 0x0038)
class USQSaveGameSettings final : public UDeveloperSettings
{
public:
	TArray<TSoftObjectPtr<class USQEmotesData>>   DefaultEquippedEmotes;                             // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, AdvancedDisplay, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                         MaxNumberOfRecentServers;                          // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1278[0x4];                                     // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSaveGameSettings">();
	}
	static class USQSaveGameSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSaveGameSettings>();
	}
};
static_assert(alignof(USQSaveGameSettings) == 0x000008, "Wrong alignment on USQSaveGameSettings");
static_assert(sizeof(USQSaveGameSettings) == 0x000050, "Wrong size on USQSaveGameSettings");
static_assert(offsetof(USQSaveGameSettings, DefaultEquippedEmotes) == 0x000038, "Member 'USQSaveGameSettings::DefaultEquippedEmotes' has a wrong offset!");
static_assert(offsetof(USQSaveGameSettings, MaxNumberOfRecentServers) == 0x000048, "Member 'USQSaveGameSettings::MaxNumberOfRecentServers' has a wrong offset!");

// Class Squad.SQMapWidgetMapMarkerSpotted
// 0x0000 (0x0300 - 0x0300)
class USQMapWidgetMapMarkerSpotted : public USQMapWidgetMapMarkerSelectable
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapWidgetMapMarkerSpotted">();
	}
	static class USQMapWidgetMapMarkerSpotted* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapWidgetMapMarkerSpotted>();
	}
};
static_assert(alignof(USQMapWidgetMapMarkerSpotted) == 0x000008, "Wrong alignment on USQMapWidgetMapMarkerSpotted");
static_assert(sizeof(USQMapWidgetMapMarkerSpotted) == 0x000300, "Wrong size on USQMapWidgetMapMarkerSpotted");

// Class Squad.SQMapWidgetMapMarkerWaypoint
// 0x0000 (0x0300 - 0x0300)
class USQMapWidgetMapMarkerWaypoint : public USQMapWidgetMapMarkerSelectable
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapWidgetMapMarkerWaypoint">();
	}
	static class USQMapWidgetMapMarkerWaypoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapWidgetMapMarkerWaypoint>();
	}
};
static_assert(alignof(USQMapWidgetMapMarkerWaypoint) == 0x000008, "Wrong alignment on USQMapWidgetMapMarkerWaypoint");
static_assert(sizeof(USQMapWidgetMapMarkerWaypoint) == 0x000300, "Wrong size on USQMapWidgetMapMarkerWaypoint");

// Class Squad.SQSquadStateDataPawn
// 0x0028 (0x0180 - 0x0158)
class USQSquadStateDataPawn : public USQSquadStateMapData
{
public:
	bool                                          bHiddenWhenUnpossessed;                            // 0x0158(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHiddenWhenNotLocallyControlled;                   // 0x0159(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideWidgetWhenUnpossessed;                        // 0x015A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1279[0x1];                                     // 0x015B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraRotaionYawTolerance;                         // 0x015C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerState*                         OwnerPlayerState;                                  // 0x0160(0x0008)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_127A[0x4];                                     // 0x0168(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CachedPlayerId;                                    // 0x016C(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FireTeamIndex;                                     // 0x0170(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_127B[0x4];                                     // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQPlayerState*                         CachedOwnerPlayerState;                            // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadStateDataPawn">();
	}
	static class USQSquadStateDataPawn* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSquadStateDataPawn>();
	}
};
static_assert(alignof(USQSquadStateDataPawn) == 0x000008, "Wrong alignment on USQSquadStateDataPawn");
static_assert(sizeof(USQSquadStateDataPawn) == 0x000180, "Wrong size on USQSquadStateDataPawn");
static_assert(offsetof(USQSquadStateDataPawn, bHiddenWhenUnpossessed) == 0x000158, "Member 'USQSquadStateDataPawn::bHiddenWhenUnpossessed' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataPawn, bHiddenWhenNotLocallyControlled) == 0x000159, "Member 'USQSquadStateDataPawn::bHiddenWhenNotLocallyControlled' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataPawn, bHideWidgetWhenUnpossessed) == 0x00015A, "Member 'USQSquadStateDataPawn::bHideWidgetWhenUnpossessed' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataPawn, CameraRotaionYawTolerance) == 0x00015C, "Member 'USQSquadStateDataPawn::CameraRotaionYawTolerance' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataPawn, OwnerPlayerState) == 0x000160, "Member 'USQSquadStateDataPawn::OwnerPlayerState' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataPawn, CachedPlayerId) == 0x00016C, "Member 'USQSquadStateDataPawn::CachedPlayerId' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataPawn, FireTeamIndex) == 0x000170, "Member 'USQSquadStateDataPawn::FireTeamIndex' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataPawn, CachedOwnerPlayerState) == 0x000178, "Member 'USQSquadStateDataPawn::CachedOwnerPlayerState' has a wrong offset!");

// Class Squad.SQSquadStateDataSQPawn
// 0x0000 (0x0180 - 0x0180)
class USQSquadStateDataSQPawn : public USQSquadStateDataPawn
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadStateDataSQPawn">();
	}
	static class USQSquadStateDataSQPawn* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSquadStateDataSQPawn>();
	}
};
static_assert(alignof(USQSquadStateDataSQPawn) == 0x000008, "Wrong alignment on USQSquadStateDataSQPawn");
static_assert(sizeof(USQSquadStateDataSQPawn) == 0x000180, "Wrong size on USQSquadStateDataSQPawn");

// Class Squad.SQSquadStateDataVehicleSeat
// 0x0000 (0x0180 - 0x0180)
class USQSquadStateDataVehicleSeat : public USQSquadStateDataSQPawn
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadStateDataVehicleSeat">();
	}
	static class USQSquadStateDataVehicleSeat* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSquadStateDataVehicleSeat>();
	}
};
static_assert(alignof(USQSquadStateDataVehicleSeat) == 0x000008, "Wrong alignment on USQSquadStateDataVehicleSeat");
static_assert(sizeof(USQSquadStateDataVehicleSeat) == 0x000180, "Wrong size on USQSquadStateDataVehicleSeat");

// Class Squad.SQSquadStateDataVehicle
// 0x0128 (0x02A8 - 0x0180)
class USQSquadStateDataVehicle : public USQSquadStateDataVehicleSeat
{
public:
	class USQVehicleUIStaticDataAsset*            StaticUIData;                                      // 0x0180(0x0008)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bHoldsOccupant : 1;                                // 0x0188(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHoldsSquadLeader : 1;                             // 0x0188(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_127C[0x3];                                     // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ClaimingSquadID;                                   // 0x018C(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVehicleOccupantsArray                 VehicleOccupants;                                  // 0x0190(0x0118)(Net, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadStateDataVehicle">();
	}
	static class USQSquadStateDataVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSquadStateDataVehicle>();
	}
};
static_assert(alignof(USQSquadStateDataVehicle) == 0x000008, "Wrong alignment on USQSquadStateDataVehicle");
static_assert(sizeof(USQSquadStateDataVehicle) == 0x0002A8, "Wrong size on USQSquadStateDataVehicle");
static_assert(offsetof(USQSquadStateDataVehicle, StaticUIData) == 0x000180, "Member 'USQSquadStateDataVehicle::StaticUIData' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataVehicle, ClaimingSquadID) == 0x00018C, "Member 'USQSquadStateDataVehicle::ClaimingSquadID' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataVehicle, VehicleOccupants) == 0x000190, "Member 'USQSquadStateDataVehicle::VehicleOccupants' has a wrong offset!");

// Class Squad.SQSquadStateDataEmplacement
// 0x0000 (0x02A8 - 0x02A8)
class USQSquadStateDataEmplacement : public USQSquadStateDataVehicle
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadStateDataEmplacement">();
	}
	static class USQSquadStateDataEmplacement* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSquadStateDataEmplacement>();
	}
};
static_assert(alignof(USQSquadStateDataEmplacement) == 0x000008, "Wrong alignment on USQSquadStateDataEmplacement");
static_assert(sizeof(USQSquadStateDataEmplacement) == 0x0002A8, "Wrong size on USQSquadStateDataEmplacement");

// Class Squad.SQMapWidgetRepairStation
// 0x0000 (0x02E0 - 0x02E0)
class USQMapWidgetRepairStation : public USQMapWidgetDeployable
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMapWidgetRepairStation">();
	}
	static class USQMapWidgetRepairStation* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMapWidgetRepairStation>();
	}
};
static_assert(alignof(USQMapWidgetRepairStation) == 0x000008, "Wrong alignment on USQMapWidgetRepairStation");
static_assert(sizeof(USQMapWidgetRepairStation) == 0x0002E0, "Wrong size on USQMapWidgetRepairStation");

// Class Squad.SQMarker
// 0x0000 (0x0228 - 0x0228)
class ASQMarker final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMarker">();
	}
	static class ASQMarker* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQMarker>();
	}
};
static_assert(alignof(ASQMarker) == 0x000008, "Wrong alignment on ASQMarker");
static_assert(sizeof(ASQMarker) == 0x000228, "Wrong size on ASQMarker");

// Class Squad.SQSquadStateDataMapMarker
// 0x0020 (0x0178 - 0x0158)
class USQSquadStateDataMapMarker : public USQSquadStateMapData
{
public:
	class UTexture2D*                             Texture;                                           // 0x0158(0x0008)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Tint;                                              // 0x0160(0x0010)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FireTeamId;                                        // 0x0170(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_127D[0x4];                                     // 0x0174(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadStateDataMapMarker">();
	}
	static class USQSquadStateDataMapMarker* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSquadStateDataMapMarker>();
	}
};
static_assert(alignof(USQSquadStateDataMapMarker) == 0x000008, "Wrong alignment on USQSquadStateDataMapMarker");
static_assert(sizeof(USQSquadStateDataMapMarker) == 0x000178, "Wrong size on USQSquadStateDataMapMarker");
static_assert(offsetof(USQSquadStateDataMapMarker, Texture) == 0x000158, "Member 'USQSquadStateDataMapMarker::Texture' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataMapMarker, Tint) == 0x000160, "Member 'USQSquadStateDataMapMarker::Tint' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataMapMarker, FireTeamId) == 0x000170, "Member 'USQSquadStateDataMapMarker::FireTeamId' has a wrong offset!");

// Class Squad.SQMedicBag
// 0x0088 (0x0530 - 0x04A8)
class ASQMedicBag : public ASQHealingEquipableItem
{
public:
	uint8                                         Pad_127E[0x78];                                    // 0x04A8(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	class USQMedicBagStaticInfo*                  MedicBagStaticInfo;                                // 0x0520(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTimerHandle                           TimerHandle;                                       // 0x0528(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void IncreaseHealth();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMedicBag">();
	}
	static class ASQMedicBag* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQMedicBag>();
	}
};
static_assert(alignof(ASQMedicBag) == 0x000008, "Wrong alignment on ASQMedicBag");
static_assert(sizeof(ASQMedicBag) == 0x000530, "Wrong size on ASQMedicBag");
static_assert(offsetof(ASQMedicBag, MedicBagStaticInfo) == 0x000520, "Member 'ASQMedicBag::MedicBagStaticInfo' has a wrong offset!");
static_assert(offsetof(ASQMedicBag, TimerHandle) == 0x000528, "Member 'ASQMedicBag::TimerHandle' has a wrong offset!");

// Class Squad.SQScriptCondition
// 0x0028 (0x0050 - 0x0028)
class USQScriptCondition final : public UObject
{
public:
	class AActor*                                 ContextObject;                                     // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_127F[0x1C];                                    // 0x0030(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bCurrentValue;                                     // 0x004C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1280[0x3];                                     // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BPInitialize(class AActor* ContextObjectParam);
	void Evaluate();
	void EvaluationResult(const bool bNewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQScriptCondition">();
	}
	static class USQScriptCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQScriptCondition>();
	}
};
static_assert(alignof(USQScriptCondition) == 0x000008, "Wrong alignment on USQScriptCondition");
static_assert(sizeof(USQScriptCondition) == 0x000050, "Wrong size on USQScriptCondition");
static_assert(offsetof(USQScriptCondition, ContextObject) == 0x000028, "Member 'USQScriptCondition::ContextObject' has a wrong offset!");
static_assert(offsetof(USQScriptCondition, bCurrentValue) == 0x00004C, "Member 'USQScriptCondition::bCurrentValue' has a wrong offset!");

// Class Squad.SQMedicBagStaticInfo
// 0x0038 (0x0628 - 0x05F0)
class USQMedicBagStaticInfo : public USQItemStaticInfo
{
public:
	class UAnimMontage*                           Healing1pBeginUseMontage;                          // 0x05F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Healing3pBeginUseMontage;                          // 0x05F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Healing1pEndUseMontage;                            // 0x0600(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Healing3pEndUseMontage;                            // 0x0608(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              HealSelfSound;                                     // 0x0610(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              HealOtherSound;                                    // 0x0618(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealingDelay;                                      // 0x0620(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealingAmount;                                     // 0x0624(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMedicBagStaticInfo">();
	}
	static class USQMedicBagStaticInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMedicBagStaticInfo>();
	}
};
static_assert(alignof(USQMedicBagStaticInfo) == 0x000008, "Wrong alignment on USQMedicBagStaticInfo");
static_assert(sizeof(USQMedicBagStaticInfo) == 0x000628, "Wrong size on USQMedicBagStaticInfo");
static_assert(offsetof(USQMedicBagStaticInfo, Healing1pBeginUseMontage) == 0x0005F0, "Member 'USQMedicBagStaticInfo::Healing1pBeginUseMontage' has a wrong offset!");
static_assert(offsetof(USQMedicBagStaticInfo, Healing3pBeginUseMontage) == 0x0005F8, "Member 'USQMedicBagStaticInfo::Healing3pBeginUseMontage' has a wrong offset!");
static_assert(offsetof(USQMedicBagStaticInfo, Healing1pEndUseMontage) == 0x000600, "Member 'USQMedicBagStaticInfo::Healing1pEndUseMontage' has a wrong offset!");
static_assert(offsetof(USQMedicBagStaticInfo, Healing3pEndUseMontage) == 0x000608, "Member 'USQMedicBagStaticInfo::Healing3pEndUseMontage' has a wrong offset!");
static_assert(offsetof(USQMedicBagStaticInfo, HealSelfSound) == 0x000610, "Member 'USQMedicBagStaticInfo::HealSelfSound' has a wrong offset!");
static_assert(offsetof(USQMedicBagStaticInfo, HealOtherSound) == 0x000618, "Member 'USQMedicBagStaticInfo::HealOtherSound' has a wrong offset!");
static_assert(offsetof(USQMedicBagStaticInfo, HealingDelay) == 0x000620, "Member 'USQMedicBagStaticInfo::HealingDelay' has a wrong offset!");
static_assert(offsetof(USQMedicBagStaticInfo, HealingAmount) == 0x000624, "Member 'USQMedicBagStaticInfo::HealingAmount' has a wrong offset!");

// Class Squad.SQMenuSoundsWidgetStyle
// 0x0038 (0x0068 - 0x0030)
class USQMenuSoundsWidgetStyle final : public USlateWidgetStyleContainerBase
{
public:
	struct FSQMenuSoundsStyle                     SoundsStyle;                                       // 0x0030(0x0038)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMenuSoundsWidgetStyle">();
	}
	static class USQMenuSoundsWidgetStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMenuSoundsWidgetStyle>();
	}
};
static_assert(alignof(USQMenuSoundsWidgetStyle) == 0x000008, "Wrong alignment on USQMenuSoundsWidgetStyle");
static_assert(sizeof(USQMenuSoundsWidgetStyle) == 0x000068, "Wrong size on USQMenuSoundsWidgetStyle");
static_assert(offsetof(USQMenuSoundsWidgetStyle, SoundsStyle) == 0x000030, "Member 'USQMenuSoundsWidgetStyle::SoundsStyle' has a wrong offset!");

// Class Squad.SQSquadStateDataMapMarkerSelectable
// 0x0008 (0x0180 - 0x0178)
class USQSquadStateDataMapMarkerSelectable : public USQSquadStateDataMapMarker
{
public:
	class USQMapIconComponent*                    MapIcon;                                           // 0x0178(0x0008)(ExportObject, Net, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadStateDataMapMarkerSelectable">();
	}
	static class USQSquadStateDataMapMarkerSelectable* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSquadStateDataMapMarkerSelectable>();
	}
};
static_assert(alignof(USQSquadStateDataMapMarkerSelectable) == 0x000008, "Wrong alignment on USQSquadStateDataMapMarkerSelectable");
static_assert(sizeof(USQSquadStateDataMapMarkerSelectable) == 0x000180, "Wrong size on USQSquadStateDataMapMarkerSelectable");
static_assert(offsetof(USQSquadStateDataMapMarkerSelectable, MapIcon) == 0x000178, "Member 'USQSquadStateDataMapMarkerSelectable::MapIcon' has a wrong offset!");

// Class Squad.SQSquadStateDataMapMarkerWaypoint
// 0x0000 (0x0180 - 0x0180)
class USQSquadStateDataMapMarkerWaypoint : public USQSquadStateDataMapMarkerSelectable
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadStateDataMapMarkerWaypoint">();
	}
	static class USQSquadStateDataMapMarkerWaypoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSquadStateDataMapMarkerWaypoint>();
	}
};
static_assert(alignof(USQSquadStateDataMapMarkerWaypoint) == 0x000008, "Wrong alignment on USQSquadStateDataMapMarkerWaypoint");
static_assert(sizeof(USQSquadStateDataMapMarkerWaypoint) == 0x000180, "Wrong size on USQSquadStateDataMapMarkerWaypoint");

// Class Squad.SQRotorVehicleMovementComponent
// 0x0030 (0x02B0 - 0x0280)
class USQRotorVehicleMovementComponent final : public USQForceNetMovementComponent
{
public:
	TArray<class USQRotorSetup*>                  RotorsSetup;                                       // 0x0278(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class USQRotor*>                       Rotors;                                            // 0x0288(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1281[0x18];                                    // 0x0298(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddThrust(int32 RotorIdx, float Thrust);
	void AddThrustByType(const ESQRotorType& RotorType, float Thrust);
	void ToggleRotorLockByType(const ESQRotorType& RotorType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRotorVehicleMovementComponent">();
	}
	static class USQRotorVehicleMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRotorVehicleMovementComponent>();
	}
};
static_assert(alignof(USQRotorVehicleMovementComponent) == 0x000010, "Wrong alignment on USQRotorVehicleMovementComponent");
static_assert(sizeof(USQRotorVehicleMovementComponent) == 0x0002B0, "Wrong size on USQRotorVehicleMovementComponent");
static_assert(offsetof(USQRotorVehicleMovementComponent, RotorsSetup) == 0x000278, "Member 'USQRotorVehicleMovementComponent::RotorsSetup' has a wrong offset!");
static_assert(offsetof(USQRotorVehicleMovementComponent, Rotors) == 0x000288, "Member 'USQRotorVehicleMovementComponent::Rotors' has a wrong offset!");

// Class Squad.SQMeshOwnerInterface
// 0x0000 (0x0028 - 0x0028)
class ISQMeshOwnerInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMeshOwnerInterface">();
	}
	static class ISQMeshOwnerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISQMeshOwnerInterface>();
	}
};
static_assert(alignof(ISQMeshOwnerInterface) == 0x000008, "Wrong alignment on ISQMeshOwnerInterface");
static_assert(sizeof(ISQMeshOwnerInterface) == 0x000028, "Wrong size on ISQMeshOwnerInterface");

// Class Squad.SQMortarViewWidget
// 0x0000 (0x02A0 - 0x02A0)
class USQMortarViewWidget : public USQVehicleViewWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMortarViewWidget">();
	}
	static class USQMortarViewWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMortarViewWidget>();
	}
};
static_assert(alignof(USQMortarViewWidget) == 0x000008, "Wrong alignment on USQMortarViewWidget");
static_assert(sizeof(USQMortarViewWidget) == 0x0002A0, "Wrong size on USQMortarViewWidget");

// Class Squad.MeshMergeFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UMeshMergeFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class USkeletalMesh* MergeMeshes(const struct FSkeletalMeshMergeParams& Params_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MeshMergeFunctionLibrary">();
	}
	static class UMeshMergeFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMeshMergeFunctionLibrary>();
	}
};
static_assert(alignof(UMeshMergeFunctionLibrary) == 0x000008, "Wrong alignment on UMeshMergeFunctionLibrary");
static_assert(sizeof(UMeshMergeFunctionLibrary) == 0x000028, "Wrong size on UMeshMergeFunctionLibrary");

// Class Squad.SQMovementComponentInterface
// 0x0000 (0x0028 - 0x0028)
class ISQMovementComponentInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMovementComponentInterface">();
	}
	static class ISQMovementComponentInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISQMovementComponentInterface>();
	}
};
static_assert(alignof(ISQMovementComponentInterface) == 0x000008, "Wrong alignment on ISQMovementComponentInterface");
static_assert(sizeof(ISQMovementComponentInterface) == 0x000028, "Wrong size on ISQMovementComponentInterface");

// Class Squad.SQSoldierMedicalComponent
// 0x0010 (0x0210 - 0x0200)
class USQSoldierMedicalComponent final : public USceneComponent
{
public:
	float                                         SoldierHealthPerSecond;                            // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstructionPointsPerSecondHealth;                 // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmmoPointsPerSecondHealth;                         // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1283[0xC];                                     // 0x0204(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSoldierMedicalComponent">();
	}
	static class USQSoldierMedicalComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSoldierMedicalComponent>();
	}
};
static_assert(alignof(USQSoldierMedicalComponent) == 0x000010, "Wrong alignment on USQSoldierMedicalComponent");
static_assert(sizeof(USQSoldierMedicalComponent) == 0x000210, "Wrong size on USQSoldierMedicalComponent");
static_assert(offsetof(USQSoldierMedicalComponent, SoldierHealthPerSecond) == 0x0001F8, "Member 'USQSoldierMedicalComponent::SoldierHealthPerSecond' has a wrong offset!");
static_assert(offsetof(USQSoldierMedicalComponent, ConstructionPointsPerSecondHealth) == 0x0001FC, "Member 'USQSoldierMedicalComponent::ConstructionPointsPerSecondHealth' has a wrong offset!");
static_assert(offsetof(USQSoldierMedicalComponent, AmmoPointsPerSecondHealth) == 0x000200, "Member 'USQSoldierMedicalComponent::AmmoPointsPerSecondHealth' has a wrong offset!");

// Class Squad.SQItemSkinCollection
// 0x0118 (0x0148 - 0x0030)
class USQItemSkinCollection : public UDataAsset
{
public:
	ESQSkinOwnershipType                          OwnershipType;                                     // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1284[0x7];                                     // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UODKBazaarItem*                         BazaarItem;                                        // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USQAttachmentSkinBase*>          AttachmentSkins;                                   // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<TSoftClassPtr<class UClass>, class USQAttachmentSkinBase*> AttachmentSkins_Internal;                          // 0x0050(0x0050)(Transient, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    ItemSkinSlot;                                      // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class USQItemSkinCollection*>          MutuallyInclusiveSkins;                            // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSet<TSoftObjectPtr<class USQFaction>>        AllowedFactions;                                   // 0x00C0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	TSubclassOf<class USQItemSkinRestrictions>    Restrictions;                                      // 0x0110(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    RestrictionsData;                                  // 0x0118(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSQSkinUIBadge>                 SkinUIBadges;                                      // 0x0128(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           CustomSkinUIBadgesFromSettings;                    // 0x0138(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	void GetUISkinBadges(TArray<struct FSQSkinUIBadge>& OutBadges);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQItemSkinCollection">();
	}
	static class USQItemSkinCollection* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQItemSkinCollection>();
	}
};
static_assert(alignof(USQItemSkinCollection) == 0x000008, "Wrong alignment on USQItemSkinCollection");
static_assert(sizeof(USQItemSkinCollection) == 0x000148, "Wrong size on USQItemSkinCollection");
static_assert(offsetof(USQItemSkinCollection, OwnershipType) == 0x000030, "Member 'USQItemSkinCollection::OwnershipType' has a wrong offset!");
static_assert(offsetof(USQItemSkinCollection, BazaarItem) == 0x000038, "Member 'USQItemSkinCollection::BazaarItem' has a wrong offset!");
static_assert(offsetof(USQItemSkinCollection, AttachmentSkins) == 0x000040, "Member 'USQItemSkinCollection::AttachmentSkins' has a wrong offset!");
static_assert(offsetof(USQItemSkinCollection, AttachmentSkins_Internal) == 0x000050, "Member 'USQItemSkinCollection::AttachmentSkins_Internal' has a wrong offset!");
static_assert(offsetof(USQItemSkinCollection, ItemSkinSlot) == 0x0000A0, "Member 'USQItemSkinCollection::ItemSkinSlot' has a wrong offset!");
static_assert(offsetof(USQItemSkinCollection, MutuallyInclusiveSkins) == 0x0000B0, "Member 'USQItemSkinCollection::MutuallyInclusiveSkins' has a wrong offset!");
static_assert(offsetof(USQItemSkinCollection, AllowedFactions) == 0x0000C0, "Member 'USQItemSkinCollection::AllowedFactions' has a wrong offset!");
static_assert(offsetof(USQItemSkinCollection, Restrictions) == 0x000110, "Member 'USQItemSkinCollection::Restrictions' has a wrong offset!");
static_assert(offsetof(USQItemSkinCollection, RestrictionsData) == 0x000118, "Member 'USQItemSkinCollection::RestrictionsData' has a wrong offset!");
static_assert(offsetof(USQItemSkinCollection, SkinUIBadges) == 0x000128, "Member 'USQItemSkinCollection::SkinUIBadges' has a wrong offset!");
static_assert(offsetof(USQItemSkinCollection, CustomSkinUIBadgesFromSettings) == 0x000138, "Member 'USQItemSkinCollection::CustomSkinUIBadgesFromSettings' has a wrong offset!");

// Class Squad.SQItemSkinCollection_MaterialSwap
// 0x0010 (0x0158 - 0x0148)
class USQItemSkinCollection_MaterialSwap final : public USQItemSkinCollection
{
public:
	TArray<TSoftObjectPtr<class UMaterialInterface>> SkinMaterials;                                     // 0x0148(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQItemSkinCollection_MaterialSwap">();
	}
	static class USQItemSkinCollection_MaterialSwap* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQItemSkinCollection_MaterialSwap>();
	}
};
static_assert(alignof(USQItemSkinCollection_MaterialSwap) == 0x000008, "Wrong alignment on USQItemSkinCollection_MaterialSwap");
static_assert(sizeof(USQItemSkinCollection_MaterialSwap) == 0x000158, "Wrong size on USQItemSkinCollection_MaterialSwap");
static_assert(offsetof(USQItemSkinCollection_MaterialSwap, SkinMaterials) == 0x000148, "Member 'USQItemSkinCollection_MaterialSwap::SkinMaterials' has a wrong offset!");

// Class Squad.SQMovementComponentManager
// 0x0020 (0x0158 - 0x0138)
class USQMovementComponentManager final : public UPawnMovementComponent
{
public:
	uint8                                         Pad_1285[0x10];                                    // 0x0138(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USQMovementComponentBase*>       ManagedMovementComponents;                         // 0x0148(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, DuplicateTransient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void RegisterComponent(class USQMovementComponentBase* MovementComponent);
	void UnRegisterComponent(class USQMovementComponentBase* MovementComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMovementComponentManager">();
	}
	static class USQMovementComponentManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMovementComponentManager>();
	}
};
static_assert(alignof(USQMovementComponentManager) == 0x000008, "Wrong alignment on USQMovementComponentManager");
static_assert(sizeof(USQMovementComponentManager) == 0x000158, "Wrong size on USQMovementComponentManager");
static_assert(offsetof(USQMovementComponentManager, ManagedMovementComponents) == 0x000148, "Member 'USQMovementComponentManager::ManagedMovementComponents' has a wrong offset!");

// Class Squad.SQMovementComponentNetworker
// 0x0030 (0x00E0 - 0x00B0)
class USQMovementComponentNetworker final : public UActorComponent
{
public:
	TArray<class USQMovementComponentPacked*>     NetworkedComponents;                               // 0x00B0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct FAdjustPositionAndRotationPacket> PendingClientAdjustPositionAndRotation;            // 0x00C0(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct FMovePacket>                    PendingServerMove;                                 // 0x00D0(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	void Client_ReplicateClientAdjustment(const TArray<struct FAdjustPositionAndRotationPacket>& Payload);
	void Server_ReplicateMoveToServer(const TArray<struct FMovePacket>& Payload);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMovementComponentNetworker">();
	}
	static class USQMovementComponentNetworker* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMovementComponentNetworker>();
	}
};
static_assert(alignof(USQMovementComponentNetworker) == 0x000008, "Wrong alignment on USQMovementComponentNetworker");
static_assert(sizeof(USQMovementComponentNetworker) == 0x0000E0, "Wrong size on USQMovementComponentNetworker");
static_assert(offsetof(USQMovementComponentNetworker, NetworkedComponents) == 0x0000B0, "Member 'USQMovementComponentNetworker::NetworkedComponents' has a wrong offset!");
static_assert(offsetof(USQMovementComponentNetworker, PendingClientAdjustPositionAndRotation) == 0x0000C0, "Member 'USQMovementComponentNetworker::PendingClientAdjustPositionAndRotation' has a wrong offset!");
static_assert(offsetof(USQMovementComponentNetworker, PendingServerMove) == 0x0000D0, "Member 'USQMovementComponentNetworker::PendingServerMove' has a wrong offset!");

// Class Squad.SQMovementComponentPacked
// 0x0020 (0x01B8 - 0x0198)
class USQMovementComponentPacked : public USQMovementComponentBase
{
public:
	uint8                                         Pad_1286[0x20];                                    // 0x0198(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClientAdjustRotation(float Timestamp, const struct FRotator& InRotation, const struct FVector& InRotationalVelocity);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMovementComponentPacked">();
	}
	static class USQMovementComponentPacked* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMovementComponentPacked>();
	}
};
static_assert(alignof(USQMovementComponentPacked) == 0x000008, "Wrong alignment on USQMovementComponentPacked");
static_assert(sizeof(USQMovementComponentPacked) == 0x0001B8, "Wrong size on USQMovementComponentPacked");

// Class Squad.SQNetworkPollingComponent
// 0x0048 (0x00F8 - 0x00B0)
class USQNetworkPollingComponent final : public UActorComponent
{
public:
	uint8                                         Pad_1287[0x48];                                    // 0x00B0(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQNetworkPollingComponent">();
	}
	static class USQNetworkPollingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQNetworkPollingComponent>();
	}
};
static_assert(alignof(USQNetworkPollingComponent) == 0x000008, "Wrong alignment on USQNetworkPollingComponent");
static_assert(sizeof(USQNetworkPollingComponent) == 0x0000F8, "Wrong size on USQNetworkPollingComponent");

// Class Squad.SQSoldierRagdollComponent
// 0x00B0 (0x0160 - 0x00B0)
class USQSoldierRagdollComponent final : public UActorComponent
{
public:
	float                                         TimeTillAutoGetUp;                                 // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoGetUpRetryFrequency;                           // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoveryBlendSeconds;                              // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FreezeBodyCheckFrequency;                          // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PelvisBoneName;                                    // 0x00C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RightFootName;                                     // 0x00C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LeftFootName;                                      // 0x00D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsAsset*                          RagdollPhysicsAsset;                               // 0x00D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CorrectionBaseRatio;                               // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CorrectionMaxAddedRatio;                           // 0x00E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ErrorStateSecondsToMaxRatio;                       // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearErrorThreshold;                              // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearVelocitySleepThreshold;                      // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BulletImpactMultiplier;                            // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExplosionImpactMultiplier;                         // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondsWithVehicleCollision;                       // 0x00FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1288[0x1];                                     // 0x0100(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	ESQSoldierRagdollReason                       RagdollState;                                      // 0x0101(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1289[0x2];                                     // 0x0102(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize100                 ServerPelvisLocationZeroBased;                     // 0x0104(0x000C)(BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                UnragdolLocationOffset;                            // 0x0110(0x000C)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_128A[0x14];                                    // 0x011C(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bBodyHasSettled : 1;                               // 0x0130(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_128B[0x7];                                     // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQEquipableItem*                       DroppedWeapon;                                     // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASQSoldier*                             OwnerSoldier;                                      // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_128C[0x10];                                    // 0x0148(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicsHandleComponent*                FreezeBodyConstraintHandle;                        // 0x0158(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnRep_RagdollState();
	void ServerSetRagdollState(ESQSoldierRagdollReason NewRagdollState);
	void SetDragging(const bool bIsDragging);
	void SetRagdollState(ESQSoldierRagdollReason NewRagdollState);

	ESQSoldierRagdollReason GetRagdollState() const;
	bool IsInRagdoll() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSoldierRagdollComponent">();
	}
	static class USQSoldierRagdollComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSoldierRagdollComponent>();
	}
};
static_assert(alignof(USQSoldierRagdollComponent) == 0x000008, "Wrong alignment on USQSoldierRagdollComponent");
static_assert(sizeof(USQSoldierRagdollComponent) == 0x000160, "Wrong size on USQSoldierRagdollComponent");
static_assert(offsetof(USQSoldierRagdollComponent, TimeTillAutoGetUp) == 0x0000B0, "Member 'USQSoldierRagdollComponent::TimeTillAutoGetUp' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollComponent, AutoGetUpRetryFrequency) == 0x0000B4, "Member 'USQSoldierRagdollComponent::AutoGetUpRetryFrequency' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollComponent, RecoveryBlendSeconds) == 0x0000B8, "Member 'USQSoldierRagdollComponent::RecoveryBlendSeconds' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollComponent, FreezeBodyCheckFrequency) == 0x0000BC, "Member 'USQSoldierRagdollComponent::FreezeBodyCheckFrequency' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollComponent, PelvisBoneName) == 0x0000C0, "Member 'USQSoldierRagdollComponent::PelvisBoneName' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollComponent, RightFootName) == 0x0000C8, "Member 'USQSoldierRagdollComponent::RightFootName' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollComponent, LeftFootName) == 0x0000D0, "Member 'USQSoldierRagdollComponent::LeftFootName' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollComponent, RagdollPhysicsAsset) == 0x0000D8, "Member 'USQSoldierRagdollComponent::RagdollPhysicsAsset' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollComponent, CorrectionBaseRatio) == 0x0000E0, "Member 'USQSoldierRagdollComponent::CorrectionBaseRatio' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollComponent, CorrectionMaxAddedRatio) == 0x0000E4, "Member 'USQSoldierRagdollComponent::CorrectionMaxAddedRatio' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollComponent, ErrorStateSecondsToMaxRatio) == 0x0000E8, "Member 'USQSoldierRagdollComponent::ErrorStateSecondsToMaxRatio' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollComponent, LinearErrorThreshold) == 0x0000EC, "Member 'USQSoldierRagdollComponent::LinearErrorThreshold' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollComponent, LinearVelocitySleepThreshold) == 0x0000F0, "Member 'USQSoldierRagdollComponent::LinearVelocitySleepThreshold' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollComponent, BulletImpactMultiplier) == 0x0000F4, "Member 'USQSoldierRagdollComponent::BulletImpactMultiplier' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollComponent, ExplosionImpactMultiplier) == 0x0000F8, "Member 'USQSoldierRagdollComponent::ExplosionImpactMultiplier' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollComponent, SecondsWithVehicleCollision) == 0x0000FC, "Member 'USQSoldierRagdollComponent::SecondsWithVehicleCollision' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollComponent, RagdollState) == 0x000101, "Member 'USQSoldierRagdollComponent::RagdollState' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollComponent, ServerPelvisLocationZeroBased) == 0x000104, "Member 'USQSoldierRagdollComponent::ServerPelvisLocationZeroBased' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollComponent, UnragdolLocationOffset) == 0x000110, "Member 'USQSoldierRagdollComponent::UnragdolLocationOffset' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollComponent, DroppedWeapon) == 0x000138, "Member 'USQSoldierRagdollComponent::DroppedWeapon' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollComponent, OwnerSoldier) == 0x000140, "Member 'USQSoldierRagdollComponent::OwnerSoldier' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollComponent, FreezeBodyConstraintHandle) == 0x000158, "Member 'USQSoldierRagdollComponent::FreezeBodyConstraintHandle' has a wrong offset!");

// Class Squad.SQNoDeployZone
// 0x0028 (0x0258 - 0x0230)
class ASQNoDeployZone : public ATriggerBox
{
public:
	bool                                          UseBlacklisting;                                   // 0x0230(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_128D[0x7];                                     // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class ASQDeployable>>      AllowedDeployableClasses;                          // 0x0238(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class ASQDeployable>>      DisallowedDeployableClasses;                       // 0x0248(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQNoDeployZone">();
	}
	static class ASQNoDeployZone* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQNoDeployZone>();
	}
};
static_assert(alignof(ASQNoDeployZone) == 0x000008, "Wrong alignment on ASQNoDeployZone");
static_assert(sizeof(ASQNoDeployZone) == 0x000258, "Wrong size on ASQNoDeployZone");
static_assert(offsetof(ASQNoDeployZone, UseBlacklisting) == 0x000230, "Member 'ASQNoDeployZone::UseBlacklisting' has a wrong offset!");
static_assert(offsetof(ASQNoDeployZone, AllowedDeployableClasses) == 0x000238, "Member 'ASQNoDeployZone::AllowedDeployableClasses' has a wrong offset!");
static_assert(offsetof(ASQNoDeployZone, DisallowedDeployableClasses) == 0x000248, "Member 'ASQNoDeployZone::DisallowedDeployableClasses' has a wrong offset!");

// Class Squad.SQNotificationData
// 0x0210 (0x0240 - 0x0030)
class USQNotificationData final : public UDataAsset
{
public:
	struct FSQNotificationLayout                  NotificationLayouts[0xB];                          // 0x0030(0x0030)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)

public:
	const struct FSQNotificationLayout GetNotificationLayout(ESQNotificationTypes NotificationType) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQNotificationData">();
	}
	static class USQNotificationData* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQNotificationData>();
	}
};
static_assert(alignof(USQNotificationData) == 0x000008, "Wrong alignment on USQNotificationData");
static_assert(sizeof(USQNotificationData) == 0x000240, "Wrong size on USQNotificationData");
static_assert(offsetof(USQNotificationData, NotificationLayouts) == 0x000030, "Member 'USQNotificationData::NotificationLayouts' has a wrong offset!");

// Class Squad.SQSoldierWaterDamageComponent
// 0x0008 (0x0168 - 0x0160)
class USQSoldierWaterDamageComponent final : public UODKWaterDamageComponent
{
public:
	class UCurveFloat*                            DamageMultiplierCurve;                             // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnWaterDamageBegin();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSoldierWaterDamageComponent">();
	}
	static class USQSoldierWaterDamageComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSoldierWaterDamageComponent>();
	}
};
static_assert(alignof(USQSoldierWaterDamageComponent) == 0x000008, "Wrong alignment on USQSoldierWaterDamageComponent");
static_assert(sizeof(USQSoldierWaterDamageComponent) == 0x000168, "Wrong size on USQSoldierWaterDamageComponent");
static_assert(offsetof(USQSoldierWaterDamageComponent, DamageMultiplierCurve) == 0x000160, "Member 'USQSoldierWaterDamageComponent::DamageMultiplierCurve' has a wrong offset!");

// Class Squad.SQSentryCrashReportSubsystem
// 0x00C8 (0x00F8 - 0x0030)
class USQSentryCrashReportSubsystem final : public USQCrashReportSubsystem
{
public:
	TArray<class FString>                         TagKeys;                                           // 0x0030(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                          bAddTagsToGameData;                                // 0x0040(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_128F[0xB7];                                    // 0x0041(0x00B7)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSentryCrashReportSubsystem">();
	}
	static class USQSentryCrashReportSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSentryCrashReportSubsystem>();
	}
};
static_assert(alignof(USQSentryCrashReportSubsystem) == 0x000008, "Wrong alignment on USQSentryCrashReportSubsystem");
static_assert(sizeof(USQSentryCrashReportSubsystem) == 0x0000F8, "Wrong size on USQSentryCrashReportSubsystem");
static_assert(offsetof(USQSentryCrashReportSubsystem, TagKeys) == 0x000030, "Member 'USQSentryCrashReportSubsystem::TagKeys' has a wrong offset!");
static_assert(offsetof(USQSentryCrashReportSubsystem, bAddTagsToGameData) == 0x000040, "Member 'USQSentryCrashReportSubsystem::bAddTagsToGameData' has a wrong offset!");

// Class Squad.SQNWheeledVehicle
// 0x0000 (0x0B60 - 0x0B60)
class ASQNWheeledVehicle : public ASQWheeledVehicleBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQNWheeledVehicle">();
	}
	static class ASQNWheeledVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQNWheeledVehicle>();
	}
};
static_assert(alignof(ASQNWheeledVehicle) == 0x000010, "Wrong alignment on ASQNWheeledVehicle");
static_assert(sizeof(ASQNWheeledVehicle) == 0x000B60, "Wrong size on ASQNWheeledVehicle");

// Class Squad.WheeledVehicleMovementComponentNW
// 0x0178 (0x0428 - 0x02B0)
class UWheeledVehicleMovementComponentNW : public UWheeledVehicleMovementComponent
{
public:
	struct FVehicleNWEngineData                   EngineSetup;                                       // 0x02B0(0x00A0)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FVehicleNWWheelDifferentialData> DifferentialSetup;                                 // 0x0350(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVehicleNWTransmissionData             TransmissionSetup;                                 // 0x0360(0x0040)(Edit, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     SteeringCurve;                                     // 0x03A0(0x0088)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WheeledVehicleMovementComponentNW">();
	}
	static class UWheeledVehicleMovementComponentNW* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWheeledVehicleMovementComponentNW>();
	}
};
static_assert(alignof(UWheeledVehicleMovementComponentNW) == 0x000008, "Wrong alignment on UWheeledVehicleMovementComponentNW");
static_assert(sizeof(UWheeledVehicleMovementComponentNW) == 0x000428, "Wrong size on UWheeledVehicleMovementComponentNW");
static_assert(offsetof(UWheeledVehicleMovementComponentNW, EngineSetup) == 0x0002B0, "Member 'UWheeledVehicleMovementComponentNW::EngineSetup' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponentNW, DifferentialSetup) == 0x000350, "Member 'UWheeledVehicleMovementComponentNW::DifferentialSetup' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponentNW, TransmissionSetup) == 0x000360, "Member 'UWheeledVehicleMovementComponentNW::TransmissionSetup' has a wrong offset!");
static_assert(offsetof(UWheeledVehicleMovementComponentNW, SteeringCurve) == 0x0003A0, "Member 'UWheeledVehicleMovementComponentNW::SteeringCurve' has a wrong offset!");

// Class Squad.SQRestriction_FOBInRange
// 0x0070 (0x00D0 - 0x0060)
class USQRestriction_FOBInRange final : public USQRestriction_Boolean
{
public:
	float                                         Range;                                             // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1290[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FobRadiusTableColumnName;                          // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<ESQTeamRelationShip>                     TargetTeams;                                       // 0x0078(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         TargetCount;                                       // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1291[0x4];                                     // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetRange(const class USQLayer* Layer) const;
	bool IsAuthorizedWithFOBInRange(class ASQPlayerController* InPlayer, const class ASQForwardBase* InFOBInRange) const;
	bool IsRestrictedWithFOBsInRange(class ASQPlayerController* InPlayer, const TArray<class ASQForwardBase*>& InFOBsInRange) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRestriction_FOBInRange">();
	}
	static class USQRestriction_FOBInRange* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRestriction_FOBInRange>();
	}
};
static_assert(alignof(USQRestriction_FOBInRange) == 0x000008, "Wrong alignment on USQRestriction_FOBInRange");
static_assert(sizeof(USQRestriction_FOBInRange) == 0x0000D0, "Wrong size on USQRestriction_FOBInRange");
static_assert(offsetof(USQRestriction_FOBInRange, Range) == 0x000060, "Member 'USQRestriction_FOBInRange::Range' has a wrong offset!");
static_assert(offsetof(USQRestriction_FOBInRange, FobRadiusTableColumnName) == 0x000068, "Member 'USQRestriction_FOBInRange::FobRadiusTableColumnName' has a wrong offset!");
static_assert(offsetof(USQRestriction_FOBInRange, TargetTeams) == 0x000078, "Member 'USQRestriction_FOBInRange::TargetTeams' has a wrong offset!");
static_assert(offsetof(USQRestriction_FOBInRange, TargetCount) == 0x0000C8, "Member 'USQRestriction_FOBInRange::TargetCount' has a wrong offset!");

// Class Squad.SQNWheeledVehicleMovementComponent
// 0x0068 (0x0490 - 0x0428)
class USQNWheeledVehicleMovementComponent final : public UWheeledVehicleMovementComponentNW
{
public:
	uint8                                         Pad_1295[0x18];                                    // 0x0428(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class USQVehicleMovementCommonSystems*        CommonSystems;                                     // 0x0440(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class USQWaterMovementComponent>  WaterMovementComponentToSpawn;                     // 0x0448(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<int32>                                 WheelShaderCounts;                                 // 0x0450(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bEnableTurboBoost;                                 // 0x0460(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1296[0x3];                                     // 0x0461(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxSpeedAllowedForEngineBoosting;                  // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxSpeedToAssistWheels;                            // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WheelLongForceAssistMultiplier;                    // 0x046C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WheelTorqueAssistMultiplier;                       // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxWheelRPMDuringWheelAssist;                      // 0x0474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1297[0x18];                                    // 0x0478(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQNWheeledVehicleMovementComponent">();
	}
	static class USQNWheeledVehicleMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQNWheeledVehicleMovementComponent>();
	}
};
static_assert(alignof(USQNWheeledVehicleMovementComponent) == 0x000008, "Wrong alignment on USQNWheeledVehicleMovementComponent");
static_assert(sizeof(USQNWheeledVehicleMovementComponent) == 0x000490, "Wrong size on USQNWheeledVehicleMovementComponent");
static_assert(offsetof(USQNWheeledVehicleMovementComponent, CommonSystems) == 0x000440, "Member 'USQNWheeledVehicleMovementComponent::CommonSystems' has a wrong offset!");
static_assert(offsetof(USQNWheeledVehicleMovementComponent, WaterMovementComponentToSpawn) == 0x000448, "Member 'USQNWheeledVehicleMovementComponent::WaterMovementComponentToSpawn' has a wrong offset!");
static_assert(offsetof(USQNWheeledVehicleMovementComponent, WheelShaderCounts) == 0x000450, "Member 'USQNWheeledVehicleMovementComponent::WheelShaderCounts' has a wrong offset!");
static_assert(offsetof(USQNWheeledVehicleMovementComponent, bEnableTurboBoost) == 0x000460, "Member 'USQNWheeledVehicleMovementComponent::bEnableTurboBoost' has a wrong offset!");
static_assert(offsetof(USQNWheeledVehicleMovementComponent, MaxSpeedAllowedForEngineBoosting) == 0x000464, "Member 'USQNWheeledVehicleMovementComponent::MaxSpeedAllowedForEngineBoosting' has a wrong offset!");
static_assert(offsetof(USQNWheeledVehicleMovementComponent, MaxSpeedToAssistWheels) == 0x000468, "Member 'USQNWheeledVehicleMovementComponent::MaxSpeedToAssistWheels' has a wrong offset!");
static_assert(offsetof(USQNWheeledVehicleMovementComponent, WheelLongForceAssistMultiplier) == 0x00046C, "Member 'USQNWheeledVehicleMovementComponent::WheelLongForceAssistMultiplier' has a wrong offset!");
static_assert(offsetof(USQNWheeledVehicleMovementComponent, WheelTorqueAssistMultiplier) == 0x000470, "Member 'USQNWheeledVehicleMovementComponent::WheelTorqueAssistMultiplier' has a wrong offset!");
static_assert(offsetof(USQNWheeledVehicleMovementComponent, MaxWheelRPMDuringWheelAssist) == 0x000474, "Member 'USQNWheeledVehicleMovementComponent::MaxWheelRPMDuringWheelAssist' has a wrong offset!");

// Class Squad.SQSoldierMovement
// 0x01A0 (0x0C90 - 0x0AF0)
class USQSoldierMovement final : public UCharacterMovementComponent
{
public:
	class UCurveFloat*                            SoldierDefaultInclineMovementSpeedCurve;           // 0x0AF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StrafeSpeedMultiplier;                             // 0x0AF8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeaningStandSpeedMultiplier;                       // 0x0AFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeaningCrouchSpeedMultiplier;                      // 0x0B00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackwardsWalkSpeedMultiplier;                      // 0x0B04(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DraggingSpeedMultiplier;                           // 0x0B08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutsidePhysicsSpeedMultiplier;                     // 0x0B0C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimationSpeedLimiter;                             // 0x0B10(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SprintSpeedMultiplier;                             // 0x0B14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSprintAcceleration;                             // 0x0B18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WasRunning;                                        // 0x0B1C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1298[0x3];                                     // 0x0B1D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxWalkSpeedProne;                                 // 0x0B20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProneHalfHeight;                                   // 0x0B24(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCanWalkOffLedgesWhenProne : 1;                    // 0x0B28(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCanSprintWhenCrouched : 1;                        // 0x0B28(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bWantsToProne : 1;                                 // 0x0B28(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bProneMaintainsBaseLocation : 1;                   // 0x0B28(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, DisableEditOnTemplate, EditConst, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1299[0x3];                                     // 0x0B29(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StickyGroundMultiplier;                            // 0x0B2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Stamina;                                           // 0x0B30(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaminaMax;                                        // 0x0B34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HurtStaminaMax;                                    // 0x0B38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TiredThreshold;                                    // 0x0B3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExhaustedThreshold;                                // 0x0B40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExhaustedPenalty;                                  // 0x0B44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStaminaExhausted;                                 // 0x0B48(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129A[0x3];                                     // 0x0B49(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StaminaRegenRate;                                  // 0x0B4C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HurtStaminaRegenRate;                              // 0x0B50(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHurt;                                           // 0x0B54(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129B[0x3];                                     // 0x0B55(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UpdateStaminaFrequency;                            // 0x0B58(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129C[0x4];                                     // 0x0B5C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           StaminaUpdateTimerHandle;                          // 0x0B60(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WalkPenalty;                                       // 0x0B68(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClimbingPenalty;                                   // 0x0B6C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLowStaminaPreventsClimbing;                       // 0x0B70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreventClimbingMidAir;                            // 0x0B71(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129D[0x2];                                     // 0x0B72(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MovePenalty;                                       // 0x0B74(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SprintPenalty;                                     // 0x0B78(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrouchPenalty;                                     // 0x0B7C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrouchSprintPenalty;                               // 0x0B80(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PronePenalty;                                      // 0x0B84(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProneSprintPenalty;                                // 0x0B88(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DraggingPenalty;                                   // 0x0B8C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandLeanPenalty;                                  // 0x0B90(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrouchLeanPenalty;                                 // 0x0B94(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BurstLeanPenalty;                                  // 0x0B98(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandStaminaRegenMultiplier;                       // 0x0B9C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrouchStaminaRegenMultiplier;                      // 0x0BA0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProneStaminaRegenMultiplier;                       // 0x0BA4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129E[0x4];                                     // 0x0BA8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bLimitConsecutiveJumping : 1;                      // 0x0BAC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_129F[0x3];                                     // 0x0BAD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ConsecutiveJumpingPenaltyReductionTime;            // 0x0BB0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A0[0x4];                                     // 0x0BB4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ConsecutiveJumpingVelocityMultipliers;             // 0x0BB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ConsecutiveJumpingArrayIndex;                      // 0x0BC8(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastJumpPenaltyChangeTime;                         // 0x0BCC(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bStaminaLimitsRunning : 1;                         // 0x0BD0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bStaminaLimitsJumping : 1;                         // 0x0BD0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_12A1[0x3];                                     // 0x0BD1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StaminaUseThreshold;                               // 0x0BD4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bJumpingUsesStamina : 1;                           // 0x0BD8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_12A2[0x3];                                     // 0x0BD9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StaminaLossPerJump;                                // 0x0BDC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SoldierWaterMovementSpeedCurve;                    // 0x0BE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SoldierWaterFallSpeedCurve;                        // 0x0BE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SoldierWaterStaminaDrainCurve;                     // 0x0BF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A3[0x8];                                     // 0x0BF8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        ClimbMovePath;                                     // 0x0C00(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<float>                                 ClimbInterpolationTimes;                           // 0x0C10(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         BipodMaxAnglePerIteration;                         // 0x0C20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A4[0x14];                                    // 0x0C24(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQSoldier*                             SquadCharacterOwner;                               // 0x0C38(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ServerUpdateRate;                                  // 0x0C40(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NonRenderedUpdateRate;                             // 0x0C44(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NearByNonRenderedUpdateRate;                       // 0x0C48(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         NearByNonRenderedUpdateRateDistance;               // 0x0C4C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<float>                                 DistanceFactorThesholds;                           // 0x0C50(0x0010)(ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	TArray<class USkinnedMeshComponent*>          SkinnedComponents;                                 // 0x0C60(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_12A5[0x8];                                     // 0x0C70(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         BitPad_41 : 2;                                     // 0x0C78(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bAimDownSights : 1;                                // 0x0C78(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Net, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_12A6[0x17];                                    // 0x0C79(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyStaminaBurstLoss(float Penalty);
	float GetJumpVelocity();
	void SetIsHurt(bool bHurt);
	void UpdateStamina();

	float CalculateStamina(float Penalty, float StanceRegenMultiplier) const;
	bool CanCrouchInCurrentState() const;
	bool CanJump() const;
	bool CanRun() const;
	bool CanSprint() const;
	float GetCrouchWeight() const;
	float GetProneWeight() const;
	float GetWaterDepth() const;
	float GetWaterImmersionPercentage() const;
	bool IsAimingDownSights() const;
	bool IsChestImmersed() const;
	bool IsDragging() const;
	bool IsLeaningLeft() const;
	bool IsLeaningRight() const;
	bool IsProne() const;
	bool IsSprinting() const;
	bool IsSprintPressed() const;
	bool IsStaminaOverThreshold() const;
	bool IsWalkPressed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSoldierMovement">();
	}
	static class USQSoldierMovement* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSoldierMovement>();
	}
};
static_assert(alignof(USQSoldierMovement) == 0x000010, "Wrong alignment on USQSoldierMovement");
static_assert(sizeof(USQSoldierMovement) == 0x000C90, "Wrong size on USQSoldierMovement");
static_assert(offsetof(USQSoldierMovement, SoldierDefaultInclineMovementSpeedCurve) == 0x000AF0, "Member 'USQSoldierMovement::SoldierDefaultInclineMovementSpeedCurve' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, StrafeSpeedMultiplier) == 0x000AF8, "Member 'USQSoldierMovement::StrafeSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, LeaningStandSpeedMultiplier) == 0x000AFC, "Member 'USQSoldierMovement::LeaningStandSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, LeaningCrouchSpeedMultiplier) == 0x000B00, "Member 'USQSoldierMovement::LeaningCrouchSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, BackwardsWalkSpeedMultiplier) == 0x000B04, "Member 'USQSoldierMovement::BackwardsWalkSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, DraggingSpeedMultiplier) == 0x000B08, "Member 'USQSoldierMovement::DraggingSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, OutsidePhysicsSpeedMultiplier) == 0x000B0C, "Member 'USQSoldierMovement::OutsidePhysicsSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, AnimationSpeedLimiter) == 0x000B10, "Member 'USQSoldierMovement::AnimationSpeedLimiter' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, SprintSpeedMultiplier) == 0x000B14, "Member 'USQSoldierMovement::SprintSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, MaxSprintAcceleration) == 0x000B18, "Member 'USQSoldierMovement::MaxSprintAcceleration' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, WasRunning) == 0x000B1C, "Member 'USQSoldierMovement::WasRunning' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, MaxWalkSpeedProne) == 0x000B20, "Member 'USQSoldierMovement::MaxWalkSpeedProne' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, ProneHalfHeight) == 0x000B24, "Member 'USQSoldierMovement::ProneHalfHeight' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, StickyGroundMultiplier) == 0x000B2C, "Member 'USQSoldierMovement::StickyGroundMultiplier' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, Stamina) == 0x000B30, "Member 'USQSoldierMovement::Stamina' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, StaminaMax) == 0x000B34, "Member 'USQSoldierMovement::StaminaMax' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, HurtStaminaMax) == 0x000B38, "Member 'USQSoldierMovement::HurtStaminaMax' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, TiredThreshold) == 0x000B3C, "Member 'USQSoldierMovement::TiredThreshold' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, ExhaustedThreshold) == 0x000B40, "Member 'USQSoldierMovement::ExhaustedThreshold' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, ExhaustedPenalty) == 0x000B44, "Member 'USQSoldierMovement::ExhaustedPenalty' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, bStaminaExhausted) == 0x000B48, "Member 'USQSoldierMovement::bStaminaExhausted' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, StaminaRegenRate) == 0x000B4C, "Member 'USQSoldierMovement::StaminaRegenRate' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, HurtStaminaRegenRate) == 0x000B50, "Member 'USQSoldierMovement::HurtStaminaRegenRate' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, bIsHurt) == 0x000B54, "Member 'USQSoldierMovement::bIsHurt' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, UpdateStaminaFrequency) == 0x000B58, "Member 'USQSoldierMovement::UpdateStaminaFrequency' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, StaminaUpdateTimerHandle) == 0x000B60, "Member 'USQSoldierMovement::StaminaUpdateTimerHandle' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, WalkPenalty) == 0x000B68, "Member 'USQSoldierMovement::WalkPenalty' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, ClimbingPenalty) == 0x000B6C, "Member 'USQSoldierMovement::ClimbingPenalty' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, bLowStaminaPreventsClimbing) == 0x000B70, "Member 'USQSoldierMovement::bLowStaminaPreventsClimbing' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, bPreventClimbingMidAir) == 0x000B71, "Member 'USQSoldierMovement::bPreventClimbingMidAir' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, MovePenalty) == 0x000B74, "Member 'USQSoldierMovement::MovePenalty' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, SprintPenalty) == 0x000B78, "Member 'USQSoldierMovement::SprintPenalty' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, CrouchPenalty) == 0x000B7C, "Member 'USQSoldierMovement::CrouchPenalty' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, CrouchSprintPenalty) == 0x000B80, "Member 'USQSoldierMovement::CrouchSprintPenalty' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, PronePenalty) == 0x000B84, "Member 'USQSoldierMovement::PronePenalty' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, ProneSprintPenalty) == 0x000B88, "Member 'USQSoldierMovement::ProneSprintPenalty' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, DraggingPenalty) == 0x000B8C, "Member 'USQSoldierMovement::DraggingPenalty' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, StandLeanPenalty) == 0x000B90, "Member 'USQSoldierMovement::StandLeanPenalty' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, CrouchLeanPenalty) == 0x000B94, "Member 'USQSoldierMovement::CrouchLeanPenalty' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, BurstLeanPenalty) == 0x000B98, "Member 'USQSoldierMovement::BurstLeanPenalty' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, StandStaminaRegenMultiplier) == 0x000B9C, "Member 'USQSoldierMovement::StandStaminaRegenMultiplier' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, CrouchStaminaRegenMultiplier) == 0x000BA0, "Member 'USQSoldierMovement::CrouchStaminaRegenMultiplier' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, ProneStaminaRegenMultiplier) == 0x000BA4, "Member 'USQSoldierMovement::ProneStaminaRegenMultiplier' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, ConsecutiveJumpingPenaltyReductionTime) == 0x000BB0, "Member 'USQSoldierMovement::ConsecutiveJumpingPenaltyReductionTime' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, ConsecutiveJumpingVelocityMultipliers) == 0x000BB8, "Member 'USQSoldierMovement::ConsecutiveJumpingVelocityMultipliers' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, ConsecutiveJumpingArrayIndex) == 0x000BC8, "Member 'USQSoldierMovement::ConsecutiveJumpingArrayIndex' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, LastJumpPenaltyChangeTime) == 0x000BCC, "Member 'USQSoldierMovement::LastJumpPenaltyChangeTime' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, StaminaUseThreshold) == 0x000BD4, "Member 'USQSoldierMovement::StaminaUseThreshold' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, StaminaLossPerJump) == 0x000BDC, "Member 'USQSoldierMovement::StaminaLossPerJump' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, SoldierWaterMovementSpeedCurve) == 0x000BE0, "Member 'USQSoldierMovement::SoldierWaterMovementSpeedCurve' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, SoldierWaterFallSpeedCurve) == 0x000BE8, "Member 'USQSoldierMovement::SoldierWaterFallSpeedCurve' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, SoldierWaterStaminaDrainCurve) == 0x000BF0, "Member 'USQSoldierMovement::SoldierWaterStaminaDrainCurve' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, ClimbMovePath) == 0x000C00, "Member 'USQSoldierMovement::ClimbMovePath' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, ClimbInterpolationTimes) == 0x000C10, "Member 'USQSoldierMovement::ClimbInterpolationTimes' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, BipodMaxAnglePerIteration) == 0x000C20, "Member 'USQSoldierMovement::BipodMaxAnglePerIteration' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, SquadCharacterOwner) == 0x000C38, "Member 'USQSoldierMovement::SquadCharacterOwner' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, ServerUpdateRate) == 0x000C40, "Member 'USQSoldierMovement::ServerUpdateRate' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, NonRenderedUpdateRate) == 0x000C44, "Member 'USQSoldierMovement::NonRenderedUpdateRate' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, NearByNonRenderedUpdateRate) == 0x000C48, "Member 'USQSoldierMovement::NearByNonRenderedUpdateRate' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, NearByNonRenderedUpdateRateDistance) == 0x000C4C, "Member 'USQSoldierMovement::NearByNonRenderedUpdateRateDistance' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, DistanceFactorThesholds) == 0x000C50, "Member 'USQSoldierMovement::DistanceFactorThesholds' has a wrong offset!");
static_assert(offsetof(USQSoldierMovement, SkinnedComponents) == 0x000C60, "Member 'USQSoldierMovement::SkinnedComponents' has a wrong offset!");

// Class Squad.SQObjective
// 0x00E8 (0x0320 - 0x0238)
class ASQObjective : public ASQTeamActor
{
public:
	uint8                                         Pad_12A7[0x48];                                    // 0x0238(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TicketAdjustmentByObjectiveMeetingTeamUponObjectiveBeingMet; // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicketAdjustmentByOwningTeamUponObjectiveBeingMet; // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicketAdjustmentByOpposingTeamUponObjectiveBeingMet; // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasObjectiveBeenMet;                              // 0x028C(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12A8[0x3];                                     // 0x028D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ObjectiveMetOwningTeamMessage;                     // 0x0290(0x0018)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FText                                   ObjectiveMetOpposingTeamMessage;                   // 0x02A8(0x0018)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FText                                   ObjectiveShownOwningTeamMessage;                   // 0x02C0(0x0018)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class FText                                   ObjectiveShownOpposingTeamMessage;                 // 0x02D8(0x0018)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsKnownToEveryone;                                // 0x02F0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsWaitingToBeShown;                               // 0x02F1(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHiddenUponSpawn;                                  // 0x02F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12A9[0x1];                                     // 0x02F3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              DistanceRangeForAttackMarker;                      // 0x02F4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              DistanceRangeForDefendMarker;                      // 0x02FC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                TeamOneLocationZeroBased;                          // 0x0304(0x000C)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                TeamTwoLocationZeroBased;                          // 0x0310(0x000C)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESQTeam                                       ObjectiveMetByTeam;                                // 0x031C(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12AA[0x3];                                     // 0x031D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FText GetObjectiveMetMessage(class ASQGameRuleSet* RuleSet, ESQTeam InTeam);
	class FText GetObjectiveShownMessage(class ASQGameRuleSet* RuleSet, ESQTeam InTeam);
	void OnMet();
	void OnRep_HasObjectiveBeenMet();
	void SetKnownToEveryone(bool bInIsKnownToEveryone);
	void SetObjectiveMet(bool bObjectiveMet, ESQTeam InTeam);
	void SetWaitingToBeShown(bool bInIsWaitingToBeShown);

	struct FVector GetLocationForTeam(ESQTeam InTeam) const;
	ESQTeam GetObjectiveMetByTeam() const;
	bool HasObjectiveBeenMet() const;
	bool IsKnownToEveryone() const;
	bool IsWaitingToBeShown() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQObjective">();
	}
	static class ASQObjective* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQObjective>();
	}
};
static_assert(alignof(ASQObjective) == 0x000008, "Wrong alignment on ASQObjective");
static_assert(sizeof(ASQObjective) == 0x000320, "Wrong size on ASQObjective");
static_assert(offsetof(ASQObjective, TicketAdjustmentByObjectiveMeetingTeamUponObjectiveBeingMet) == 0x000280, "Member 'ASQObjective::TicketAdjustmentByObjectiveMeetingTeamUponObjectiveBeingMet' has a wrong offset!");
static_assert(offsetof(ASQObjective, TicketAdjustmentByOwningTeamUponObjectiveBeingMet) == 0x000284, "Member 'ASQObjective::TicketAdjustmentByOwningTeamUponObjectiveBeingMet' has a wrong offset!");
static_assert(offsetof(ASQObjective, TicketAdjustmentByOpposingTeamUponObjectiveBeingMet) == 0x000288, "Member 'ASQObjective::TicketAdjustmentByOpposingTeamUponObjectiveBeingMet' has a wrong offset!");
static_assert(offsetof(ASQObjective, bHasObjectiveBeenMet) == 0x00028C, "Member 'ASQObjective::bHasObjectiveBeenMet' has a wrong offset!");
static_assert(offsetof(ASQObjective, ObjectiveMetOwningTeamMessage) == 0x000290, "Member 'ASQObjective::ObjectiveMetOwningTeamMessage' has a wrong offset!");
static_assert(offsetof(ASQObjective, ObjectiveMetOpposingTeamMessage) == 0x0002A8, "Member 'ASQObjective::ObjectiveMetOpposingTeamMessage' has a wrong offset!");
static_assert(offsetof(ASQObjective, ObjectiveShownOwningTeamMessage) == 0x0002C0, "Member 'ASQObjective::ObjectiveShownOwningTeamMessage' has a wrong offset!");
static_assert(offsetof(ASQObjective, ObjectiveShownOpposingTeamMessage) == 0x0002D8, "Member 'ASQObjective::ObjectiveShownOpposingTeamMessage' has a wrong offset!");
static_assert(offsetof(ASQObjective, bIsKnownToEveryone) == 0x0002F0, "Member 'ASQObjective::bIsKnownToEveryone' has a wrong offset!");
static_assert(offsetof(ASQObjective, bIsWaitingToBeShown) == 0x0002F1, "Member 'ASQObjective::bIsWaitingToBeShown' has a wrong offset!");
static_assert(offsetof(ASQObjective, bHiddenUponSpawn) == 0x0002F2, "Member 'ASQObjective::bHiddenUponSpawn' has a wrong offset!");
static_assert(offsetof(ASQObjective, DistanceRangeForAttackMarker) == 0x0002F4, "Member 'ASQObjective::DistanceRangeForAttackMarker' has a wrong offset!");
static_assert(offsetof(ASQObjective, DistanceRangeForDefendMarker) == 0x0002FC, "Member 'ASQObjective::DistanceRangeForDefendMarker' has a wrong offset!");
static_assert(offsetof(ASQObjective, TeamOneLocationZeroBased) == 0x000304, "Member 'ASQObjective::TeamOneLocationZeroBased' has a wrong offset!");
static_assert(offsetof(ASQObjective, TeamTwoLocationZeroBased) == 0x000310, "Member 'ASQObjective::TeamTwoLocationZeroBased' has a wrong offset!");
static_assert(offsetof(ASQObjective, ObjectiveMetByTeam) == 0x00031C, "Member 'ASQObjective::ObjectiveMetByTeam' has a wrong offset!");

// Class Squad.SQObjective_Destroyable
// 0x00F8 (0x0418 - 0x0320)
class ASQObjective_Destroyable final : public ASQObjective
{
public:
	uint8                                         Pad_12AE[0x8];                                     // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   WorldText;                                         // 0x0328(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLinearColor                           WorldTextColor;                                    // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQUsableData                          UsableData;                                        // 0x0350(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bHasBeenDestroyed;                                 // 0x0390(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12AF[0x3];                                     // 0x0391(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Health;                                            // 0x0394(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class USQDamageType>>      AllowableDamageTypes;                              // 0x0398(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UParticleSystem*                        DestroyedParticleEffect;                           // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraSystem*                         NiagaraDestroyedParticleEffect;                    // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class USQShockwave>               DestroyedShockwaveEffect;                          // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundCue*                              DestroyedSound;                                    // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundCue*                              DestroyedDebrisSound;                              // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSQDamageTypeEffects                   DamageEffects;                                     // 0x03D0(0x0028)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class ASQGameSpawn>               SpawnClass;                                        // 0x03F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASQGameSpawn*                           SpawnPoint;                                        // 0x0400(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpawnLocationZOffset;                              // 0x0408(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12B0[0x4];                                     // 0x040C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USQPhysicalMaterialEffects> DefaultEffectsClass;                               // 0x0410(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BPClientObjectiveDestroyed();
	void MulticastPlayDamageEffects(TSubclassOf<class UDamageType> DamageTypeClass);
	void ObjectiveDestroyed(float Damage, const struct FDamageEvent& DamageEvent, class AController* EventInstigator, class AActor* DamageCauser);
	void OnRep_HasBeenDestroyed();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQObjective_Destroyable">();
	}
	static class ASQObjective_Destroyable* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQObjective_Destroyable>();
	}
};
static_assert(alignof(ASQObjective_Destroyable) == 0x000008, "Wrong alignment on ASQObjective_Destroyable");
static_assert(sizeof(ASQObjective_Destroyable) == 0x000418, "Wrong size on ASQObjective_Destroyable");
static_assert(offsetof(ASQObjective_Destroyable, WorldText) == 0x000328, "Member 'ASQObjective_Destroyable::WorldText' has a wrong offset!");
static_assert(offsetof(ASQObjective_Destroyable, WorldTextColor) == 0x000340, "Member 'ASQObjective_Destroyable::WorldTextColor' has a wrong offset!");
static_assert(offsetof(ASQObjective_Destroyable, UsableData) == 0x000350, "Member 'ASQObjective_Destroyable::UsableData' has a wrong offset!");
static_assert(offsetof(ASQObjective_Destroyable, bHasBeenDestroyed) == 0x000390, "Member 'ASQObjective_Destroyable::bHasBeenDestroyed' has a wrong offset!");
static_assert(offsetof(ASQObjective_Destroyable, Health) == 0x000394, "Member 'ASQObjective_Destroyable::Health' has a wrong offset!");
static_assert(offsetof(ASQObjective_Destroyable, AllowableDamageTypes) == 0x000398, "Member 'ASQObjective_Destroyable::AllowableDamageTypes' has a wrong offset!");
static_assert(offsetof(ASQObjective_Destroyable, DestroyedParticleEffect) == 0x0003A8, "Member 'ASQObjective_Destroyable::DestroyedParticleEffect' has a wrong offset!");
static_assert(offsetof(ASQObjective_Destroyable, NiagaraDestroyedParticleEffect) == 0x0003B0, "Member 'ASQObjective_Destroyable::NiagaraDestroyedParticleEffect' has a wrong offset!");
static_assert(offsetof(ASQObjective_Destroyable, DestroyedShockwaveEffect) == 0x0003B8, "Member 'ASQObjective_Destroyable::DestroyedShockwaveEffect' has a wrong offset!");
static_assert(offsetof(ASQObjective_Destroyable, DestroyedSound) == 0x0003C0, "Member 'ASQObjective_Destroyable::DestroyedSound' has a wrong offset!");
static_assert(offsetof(ASQObjective_Destroyable, DestroyedDebrisSound) == 0x0003C8, "Member 'ASQObjective_Destroyable::DestroyedDebrisSound' has a wrong offset!");
static_assert(offsetof(ASQObjective_Destroyable, DamageEffects) == 0x0003D0, "Member 'ASQObjective_Destroyable::DamageEffects' has a wrong offset!");
static_assert(offsetof(ASQObjective_Destroyable, SpawnClass) == 0x0003F8, "Member 'ASQObjective_Destroyable::SpawnClass' has a wrong offset!");
static_assert(offsetof(ASQObjective_Destroyable, SpawnPoint) == 0x000400, "Member 'ASQObjective_Destroyable::SpawnPoint' has a wrong offset!");
static_assert(offsetof(ASQObjective_Destroyable, SpawnLocationZOffset) == 0x000408, "Member 'ASQObjective_Destroyable::SpawnLocationZOffset' has a wrong offset!");
static_assert(offsetof(ASQObjective_Destroyable, DefaultEffectsClass) == 0x000410, "Member 'ASQObjective_Destroyable::DefaultEffectsClass' has a wrong offset!");

// Class Squad.SQObjectiveSpawnLocation
// 0x0000 (0x0228 - 0x0228)
class ASQObjectiveSpawnLocation final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQObjectiveSpawnLocation">();
	}
	static class ASQObjectiveSpawnLocation* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQObjectiveSpawnLocation>();
	}
};
static_assert(alignof(ASQObjectiveSpawnLocation) == 0x000008, "Wrong alignment on ASQObjectiveSpawnLocation");
static_assert(sizeof(ASQObjectiveSpawnLocation) == 0x000228, "Wrong size on ASQObjectiveSpawnLocation");

// Class Squad.SQRichTextBlock
// 0x0B50 (0x0C58 - 0x0108)
class USQRichTextBlock final : public UWidget
{
public:
	FMulticastInlineDelegateProperty_             OnHyperLinkClicked;                                // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0118(0x0018)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	TDelegate<void()>                             TextDelegate;                                      // 0x0130(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FSlateFontInfo                         Font;                                              // 0x0140(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           Color;                                             // 0x0198(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSlateFontInfo                         HyperlinkFont;                                     // 0x01A8(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           HyperlinkColor;                                    // 0x0200(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETextJustify                                  Justification;                                     // 0x0210(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          AutoWrapText;                                      // 0x0211(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12B2[0x2];                                     // 0x0212(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WrapTextAt;                                        // 0x0214(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMargin                                Margin;                                            // 0x0218(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	float                                         LineHeightPercentage;                              // 0x0228(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12B3[0x4];                                     // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   TextWithMarkup;                                    // 0x0230(0x0018)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_12B4[0xA10];                                   // 0x0248(0x0A10)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRichTextBlock">();
	}
	static class USQRichTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRichTextBlock>();
	}
};
static_assert(alignof(USQRichTextBlock) == 0x000008, "Wrong alignment on USQRichTextBlock");
static_assert(sizeof(USQRichTextBlock) == 0x000C58, "Wrong size on USQRichTextBlock");
static_assert(offsetof(USQRichTextBlock, OnHyperLinkClicked) == 0x000108, "Member 'USQRichTextBlock::OnHyperLinkClicked' has a wrong offset!");
static_assert(offsetof(USQRichTextBlock, Text) == 0x000118, "Member 'USQRichTextBlock::Text' has a wrong offset!");
static_assert(offsetof(USQRichTextBlock, TextDelegate) == 0x000130, "Member 'USQRichTextBlock::TextDelegate' has a wrong offset!");
static_assert(offsetof(USQRichTextBlock, Font) == 0x000140, "Member 'USQRichTextBlock::Font' has a wrong offset!");
static_assert(offsetof(USQRichTextBlock, Color) == 0x000198, "Member 'USQRichTextBlock::Color' has a wrong offset!");
static_assert(offsetof(USQRichTextBlock, HyperlinkFont) == 0x0001A8, "Member 'USQRichTextBlock::HyperlinkFont' has a wrong offset!");
static_assert(offsetof(USQRichTextBlock, HyperlinkColor) == 0x000200, "Member 'USQRichTextBlock::HyperlinkColor' has a wrong offset!");
static_assert(offsetof(USQRichTextBlock, Justification) == 0x000210, "Member 'USQRichTextBlock::Justification' has a wrong offset!");
static_assert(offsetof(USQRichTextBlock, AutoWrapText) == 0x000211, "Member 'USQRichTextBlock::AutoWrapText' has a wrong offset!");
static_assert(offsetof(USQRichTextBlock, WrapTextAt) == 0x000214, "Member 'USQRichTextBlock::WrapTextAt' has a wrong offset!");
static_assert(offsetof(USQRichTextBlock, Margin) == 0x000218, "Member 'USQRichTextBlock::Margin' has a wrong offset!");
static_assert(offsetof(USQRichTextBlock, LineHeightPercentage) == 0x000228, "Member 'USQRichTextBlock::LineHeightPercentage' has a wrong offset!");
static_assert(offsetof(USQRichTextBlock, TextWithMarkup) == 0x000230, "Member 'USQRichTextBlock::TextWithMarkup' has a wrong offset!");

// Class Squad.SQShockwave
// 0x00B0 (0x00D8 - 0x0028)
class USQShockwave : public UObject
{
public:
	ESQShockwaveEffectType                        ShockwaveEffectType;                               // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12B5[0x3];                                     // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Strength;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSQShockwaveQualitySetting>     ShockwaveQualitySettings;                          // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSQCameraShake                         CameraShake;                                       // 0x0040(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FSQCameraShake                         SecondaryCameraShake;                              // 0x0060(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         VerticalSteps;                                     // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HorizontalSteps;                                   // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               DefaultRotation;                                   // 0x0088(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                DefaultLocationOffset;                             // 0x0094(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchRange;                                        // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawRange;                                          // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CullingDistance;                                   // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearbyExplosionEventRadius;                        // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSoundsToSpawn;                                  // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxDecalsToSpawn;                                  // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugLines;                                       // 0x00BC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugSpheres;                                     // 0x00BD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12B6[0x2];                                     // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        Emitter;                                           // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NiagaraEmitter;                                    // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQPhysicalMaterialEffects> DefaultEffectsClass;                               // 0x00D0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void Explode(class UWorld* World, class AActor* ProjectileActor, const struct FVector& Location);
	void NearbyExplosionEvent(class AActor* ProjectileActor, const struct FVector& Location, float DistanceFromEffect);

	struct FSQShockwaveQualitySetting GetShockwaveSetting() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQShockwave">();
	}
	static class USQShockwave* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQShockwave>();
	}
};
static_assert(alignof(USQShockwave) == 0x000008, "Wrong alignment on USQShockwave");
static_assert(sizeof(USQShockwave) == 0x0000D8, "Wrong size on USQShockwave");
static_assert(offsetof(USQShockwave, ShockwaveEffectType) == 0x000028, "Member 'USQShockwave::ShockwaveEffectType' has a wrong offset!");
static_assert(offsetof(USQShockwave, Strength) == 0x00002C, "Member 'USQShockwave::Strength' has a wrong offset!");
static_assert(offsetof(USQShockwave, ShockwaveQualitySettings) == 0x000030, "Member 'USQShockwave::ShockwaveQualitySettings' has a wrong offset!");
static_assert(offsetof(USQShockwave, CameraShake) == 0x000040, "Member 'USQShockwave::CameraShake' has a wrong offset!");
static_assert(offsetof(USQShockwave, SecondaryCameraShake) == 0x000060, "Member 'USQShockwave::SecondaryCameraShake' has a wrong offset!");
static_assert(offsetof(USQShockwave, VerticalSteps) == 0x000080, "Member 'USQShockwave::VerticalSteps' has a wrong offset!");
static_assert(offsetof(USQShockwave, HorizontalSteps) == 0x000084, "Member 'USQShockwave::HorizontalSteps' has a wrong offset!");
static_assert(offsetof(USQShockwave, DefaultRotation) == 0x000088, "Member 'USQShockwave::DefaultRotation' has a wrong offset!");
static_assert(offsetof(USQShockwave, DefaultLocationOffset) == 0x000094, "Member 'USQShockwave::DefaultLocationOffset' has a wrong offset!");
static_assert(offsetof(USQShockwave, Range) == 0x0000A0, "Member 'USQShockwave::Range' has a wrong offset!");
static_assert(offsetof(USQShockwave, PitchRange) == 0x0000A4, "Member 'USQShockwave::PitchRange' has a wrong offset!");
static_assert(offsetof(USQShockwave, YawRange) == 0x0000A8, "Member 'USQShockwave::YawRange' has a wrong offset!");
static_assert(offsetof(USQShockwave, CullingDistance) == 0x0000AC, "Member 'USQShockwave::CullingDistance' has a wrong offset!");
static_assert(offsetof(USQShockwave, NearbyExplosionEventRadius) == 0x0000B0, "Member 'USQShockwave::NearbyExplosionEventRadius' has a wrong offset!");
static_assert(offsetof(USQShockwave, MaxSoundsToSpawn) == 0x0000B4, "Member 'USQShockwave::MaxSoundsToSpawn' has a wrong offset!");
static_assert(offsetof(USQShockwave, MaxDecalsToSpawn) == 0x0000B8, "Member 'USQShockwave::MaxDecalsToSpawn' has a wrong offset!");
static_assert(offsetof(USQShockwave, bDebugLines) == 0x0000BC, "Member 'USQShockwave::bDebugLines' has a wrong offset!");
static_assert(offsetof(USQShockwave, bDebugSpheres) == 0x0000BD, "Member 'USQShockwave::bDebugSpheres' has a wrong offset!");
static_assert(offsetof(USQShockwave, Emitter) == 0x0000C0, "Member 'USQShockwave::Emitter' has a wrong offset!");
static_assert(offsetof(USQShockwave, NiagaraEmitter) == 0x0000C8, "Member 'USQShockwave::NiagaraEmitter' has a wrong offset!");
static_assert(offsetof(USQShockwave, DefaultEffectsClass) == 0x0000D0, "Member 'USQShockwave::DefaultEffectsClass' has a wrong offset!");

// Class Squad.SQShockwaveDirected
// 0x0008 (0x00E0 - 0x00D8)
class USQShockwaveDirected : public USQShockwave
{
public:
	bool                                          bFractionalOffsettingForHorizontalSteps;           // 0x00D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12B8[0x7];                                     // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQShockwaveDirected">();
	}
	static class USQShockwaveDirected* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQShockwaveDirected>();
	}
};
static_assert(alignof(USQShockwaveDirected) == 0x000008, "Wrong alignment on USQShockwaveDirected");
static_assert(sizeof(USQShockwaveDirected) == 0x0000E0, "Wrong size on USQShockwaveDirected");
static_assert(offsetof(USQShockwaveDirected, bFractionalOffsettingForHorizontalSteps) == 0x0000D8, "Member 'USQShockwaveDirected::bFractionalOffsettingForHorizontalSteps' has a wrong offset!");

// Class Squad.SQOptionsWidgetStyle
// 0x0038 (0x0068 - 0x0030)
class USQOptionsWidgetStyle final : public USlateWidgetStyleContainerBase
{
public:
	struct FSQOptionsStyle                        OptionsStyle;                                      // 0x0030(0x0038)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQOptionsWidgetStyle">();
	}
	static class USQOptionsWidgetStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQOptionsWidgetStyle>();
	}
};
static_assert(alignof(USQOptionsWidgetStyle) == 0x000008, "Wrong alignment on USQOptionsWidgetStyle");
static_assert(sizeof(USQOptionsWidgetStyle) == 0x000068, "Wrong size on USQOptionsWidgetStyle");
static_assert(offsetof(USQOptionsWidgetStyle, OptionsStyle) == 0x000030, "Member 'USQOptionsWidgetStyle::OptionsStyle' has a wrong offset!");

// Class Squad.SQOrderLines
// 0x0020 (0x02A8 - 0x0288)
class USQOrderLines : public USQMapLattice
{
public:
	bool                                          bShowTeamOrderLines;                               // 0x0288(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12B9[0x3];                                     // 0x0289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SelfSquadLineThickness;                            // 0x028C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OtherSquadLineThickness;                           // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12BA[0x4];                                     // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQMapMarkerManagerComponent*           MapMarkerManagerComponent;                         // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12BB[0x8];                                     // 0x02A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQOrderLines">();
	}
	static class USQOrderLines* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQOrderLines>();
	}
};
static_assert(alignof(USQOrderLines) == 0x000008, "Wrong alignment on USQOrderLines");
static_assert(sizeof(USQOrderLines) == 0x0002A8, "Wrong size on USQOrderLines");
static_assert(offsetof(USQOrderLines, bShowTeamOrderLines) == 0x000288, "Member 'USQOrderLines::bShowTeamOrderLines' has a wrong offset!");
static_assert(offsetof(USQOrderLines, SelfSquadLineThickness) == 0x00028C, "Member 'USQOrderLines::SelfSquadLineThickness' has a wrong offset!");
static_assert(offsetof(USQOrderLines, OtherSquadLineThickness) == 0x000290, "Member 'USQOrderLines::OtherSquadLineThickness' has a wrong offset!");
static_assert(offsetof(USQOrderLines, MapMarkerManagerComponent) == 0x000298, "Member 'USQOrderLines::MapMarkerManagerComponent' has a wrong offset!");

// Class Squad.SQPacketLossWidget
// 0x0030 (0x0298 - 0x0268)
class USQPacketLossWidget final : public USQUserWidget
{
public:
	class UImage*                                 DisplayedImage;                                    // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             DisplayedText;                                     // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     PacketLossMaterial;                                // 0x0278(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShowIndicatorThreasholdFrac;                       // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12BC[0xC];                                     // 0x0284(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               PacketLossMID;                                     // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQPacketLossWidget">();
	}
	static class USQPacketLossWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQPacketLossWidget>();
	}
};
static_assert(alignof(USQPacketLossWidget) == 0x000008, "Wrong alignment on USQPacketLossWidget");
static_assert(sizeof(USQPacketLossWidget) == 0x000298, "Wrong size on USQPacketLossWidget");
static_assert(offsetof(USQPacketLossWidget, DisplayedImage) == 0x000268, "Member 'USQPacketLossWidget::DisplayedImage' has a wrong offset!");
static_assert(offsetof(USQPacketLossWidget, DisplayedText) == 0x000270, "Member 'USQPacketLossWidget::DisplayedText' has a wrong offset!");
static_assert(offsetof(USQPacketLossWidget, PacketLossMaterial) == 0x000278, "Member 'USQPacketLossWidget::PacketLossMaterial' has a wrong offset!");
static_assert(offsetof(USQPacketLossWidget, ShowIndicatorThreasholdFrac) == 0x000280, "Member 'USQPacketLossWidget::ShowIndicatorThreasholdFrac' has a wrong offset!");
static_assert(offsetof(USQPacketLossWidget, PacketLossMID) == 0x000290, "Member 'USQPacketLossWidget::PacketLossMID' has a wrong offset!");

// Class Squad.SQRoleSettings
// 0x0138 (0x0198 - 0x0060)
class USQRoleSettings : public USQSettings
{
public:
	TArray<struct FSQInventoryWeaponGroupData>    Inventory;                                         // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   Role_Specifics_ActionName;                         // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Role_Specifics_ActionName1;                        // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimMontage>            SoldierMenuAnimMontage;                            // 0x0080(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeavingSquadChangesRole;                          // 0x00A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanPlaceRallyPoint;                               // 0x00A9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanSeeHealthStatus;                               // 0x00AA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLeader;                                         // 0x00AB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMedic;                                          // 0x00AC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRecruit;                                        // 0x00AD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanBuild;                                         // 0x00AE(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12BD[0x1];                                     // 0x00AF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x00B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UTexture2D*                             UiIcon;                                            // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             SpecialWeaponIcon;                                 // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Role_Details;                                      // 0x00D8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Role_Specifics;                                    // 0x00F0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSQRoleLimit                           DefaultLimit;                                      // 0x0108(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	ESQRoleTypeEnum                               RoleType;                                          // 0x012C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12BE[0x3];                                     // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   SoldierClass;                                      // 0x0130(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NoClear, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SoldierClassDesert;                                // 0x0158(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NoClear, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSQInventoryWeaponGroupData>    TestInventory;                                     // 0x0180(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	ESQVehicleRoleAbility                         VehicleAbility;                                    // 0x0190(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12BF[0x7];                                     // 0x0191(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CanEnterSeat(class USQVehicleSeatComponent* Seat) const;
	bool CanPlaceRallyPointWithMinimumTeamMate() const;
	bool CanSeeHealthStatus() const;
	void GetRoleDisplayName(class FString* CurrentRoleDisplayName) const;
	bool IsMedic() const;
	bool IsSquadLeader() const;
	bool TryGetSoldierWithLayer(const class USQLayer* InLayer, TSoftClassPtr<class UClass>* OutSoldier) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRoleSettings">();
	}
	static class USQRoleSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRoleSettings>();
	}
};
static_assert(alignof(USQRoleSettings) == 0x000008, "Wrong alignment on USQRoleSettings");
static_assert(sizeof(USQRoleSettings) == 0x000198, "Wrong size on USQRoleSettings");
static_assert(offsetof(USQRoleSettings, Inventory) == 0x000060, "Member 'USQRoleSettings::Inventory' has a wrong offset!");
static_assert(offsetof(USQRoleSettings, Role_Specifics_ActionName) == 0x000070, "Member 'USQRoleSettings::Role_Specifics_ActionName' has a wrong offset!");
static_assert(offsetof(USQRoleSettings, Role_Specifics_ActionName1) == 0x000078, "Member 'USQRoleSettings::Role_Specifics_ActionName1' has a wrong offset!");
static_assert(offsetof(USQRoleSettings, SoldierMenuAnimMontage) == 0x000080, "Member 'USQRoleSettings::SoldierMenuAnimMontage' has a wrong offset!");
static_assert(offsetof(USQRoleSettings, bLeavingSquadChangesRole) == 0x0000A8, "Member 'USQRoleSettings::bLeavingSquadChangesRole' has a wrong offset!");
static_assert(offsetof(USQRoleSettings, bCanPlaceRallyPoint) == 0x0000A9, "Member 'USQRoleSettings::bCanPlaceRallyPoint' has a wrong offset!");
static_assert(offsetof(USQRoleSettings, bCanSeeHealthStatus) == 0x0000AA, "Member 'USQRoleSettings::bCanSeeHealthStatus' has a wrong offset!");
static_assert(offsetof(USQRoleSettings, bIsLeader) == 0x0000AB, "Member 'USQRoleSettings::bIsLeader' has a wrong offset!");
static_assert(offsetof(USQRoleSettings, bIsMedic) == 0x0000AC, "Member 'USQRoleSettings::bIsMedic' has a wrong offset!");
static_assert(offsetof(USQRoleSettings, bIsRecruit) == 0x0000AD, "Member 'USQRoleSettings::bIsRecruit' has a wrong offset!");
static_assert(offsetof(USQRoleSettings, bCanBuild) == 0x0000AE, "Member 'USQRoleSettings::bCanBuild' has a wrong offset!");
static_assert(offsetof(USQRoleSettings, DisplayName) == 0x0000B0, "Member 'USQRoleSettings::DisplayName' has a wrong offset!");
static_assert(offsetof(USQRoleSettings, UiIcon) == 0x0000C8, "Member 'USQRoleSettings::UiIcon' has a wrong offset!");
static_assert(offsetof(USQRoleSettings, SpecialWeaponIcon) == 0x0000D0, "Member 'USQRoleSettings::SpecialWeaponIcon' has a wrong offset!");
static_assert(offsetof(USQRoleSettings, Role_Details) == 0x0000D8, "Member 'USQRoleSettings::Role_Details' has a wrong offset!");
static_assert(offsetof(USQRoleSettings, Role_Specifics) == 0x0000F0, "Member 'USQRoleSettings::Role_Specifics' has a wrong offset!");
static_assert(offsetof(USQRoleSettings, DefaultLimit) == 0x000108, "Member 'USQRoleSettings::DefaultLimit' has a wrong offset!");
static_assert(offsetof(USQRoleSettings, RoleType) == 0x00012C, "Member 'USQRoleSettings::RoleType' has a wrong offset!");
static_assert(offsetof(USQRoleSettings, SoldierClass) == 0x000130, "Member 'USQRoleSettings::SoldierClass' has a wrong offset!");
static_assert(offsetof(USQRoleSettings, SoldierClassDesert) == 0x000158, "Member 'USQRoleSettings::SoldierClassDesert' has a wrong offset!");
static_assert(offsetof(USQRoleSettings, TestInventory) == 0x000180, "Member 'USQRoleSettings::TestInventory' has a wrong offset!");
static_assert(offsetof(USQRoleSettings, VehicleAbility) == 0x000190, "Member 'USQRoleSettings::VehicleAbility' has a wrong offset!");

// Class Squad.SQSoundNodeDistanceDelay
// 0x0010 (0x0058 - 0x0048)
class USQSoundNodeDistanceDelay final : public USoundNode
{
public:
	float                                         SpeedOfSound;                                      // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DelayMax;                                          // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TestDistance;                                      // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12C2[0x4];                                     // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSoundNodeDistanceDelay">();
	}
	static class USQSoundNodeDistanceDelay* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSoundNodeDistanceDelay>();
	}
};
static_assert(alignof(USQSoundNodeDistanceDelay) == 0x000008, "Wrong alignment on USQSoundNodeDistanceDelay");
static_assert(sizeof(USQSoundNodeDistanceDelay) == 0x000058, "Wrong size on USQSoundNodeDistanceDelay");
static_assert(offsetof(USQSoundNodeDistanceDelay, SpeedOfSound) == 0x000048, "Member 'USQSoundNodeDistanceDelay::SpeedOfSound' has a wrong offset!");
static_assert(offsetof(USQSoundNodeDistanceDelay, DelayMax) == 0x00004C, "Member 'USQSoundNodeDistanceDelay::DelayMax' has a wrong offset!");
static_assert(offsetof(USQSoundNodeDistanceDelay, TestDistance) == 0x000050, "Member 'USQSoundNodeDistanceDelay::TestDistance' has a wrong offset!");

// Class Squad.SQPassDamageInterface
// 0x0000 (0x0028 - 0x0028)
class ISQPassDamageInterface final : public IInterface
{
public:
	bool DoesPassDamage() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQPassDamageInterface">();
	}
	static class ISQPassDamageInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISQPassDamageInterface>();
	}
};
static_assert(alignof(ISQPassDamageInterface) == 0x000008, "Wrong alignment on ISQPassDamageInterface");
static_assert(sizeof(ISQPassDamageInterface) == 0x000028, "Wrong size on ISQPassDamageInterface");

// Class Squad.SQPawnInventoryComponent
// 0x0208 (0x02B8 - 0x00B0)
class USQPawnInventoryComponent : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_             EquippedNewItemEvent;                              // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             PlayAnimationEvent;                                // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             PauseAnimationEvent;                               // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             ResumeAnimationEvent;                              // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             SetAnimationPlayRateEvent;                         // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             EndLoopAnimationEvent;                             // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             StopAnimationEvent;                                // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             AmmoChangedEvent;                                  // 0x0120(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class USQItemStaticInfo*                      CurrentItemStaticInfo;                             // 0x0130(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQItemStaticInfo>          DefaultStaticInfoClass;                            // 0x0138(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQEquipableItem*                       CurrentWeapon;                                     // 0x0140(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C3[0x18];                                    // 0x0148(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsInteracting;                                    // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTimingOut;                                      // 0x0161(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C4[0x2];                                     // 0x0162(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentFadeOut;                                    // 0x0164(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeoutDuration;                                   // 0x0168(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeoutDelay;                                      // 0x016C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bClickInventoryToggle : 1;                         // 0x0170(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_12C5[0x3];                                     // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NextItemSlot;                                      // 0x0174(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextItemOffset;                                    // 0x0178(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentWeaponSlot;                                 // 0x017C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentWeaponOffset;                               // 0x0180(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C6[0x4];                                     // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQWeaponGroupData>             Inventory;                                         // 0x0188(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, Protected, NativeAccessSpecifierProtected)
	struct FSQWeaponGroupDataArray                RepInventory;                                      // 0x0198(0x0118)(Net, Transient, RepNotify, Protected, NativeAccessSpecifierProtected)
	class ASQEquipableItem*                       PendingWeapon;                                     // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	int32 AddGroupToInventory(int32 Slot);
	void EndLoopAnimationHandler(class UAnimMontage* WeaponMontage, class UAnimMontage* Soldier1pMontage, class UAnimMontage* Soldier3pMontage, const struct FSQMontageSectionNames& SectionNames);
	class ASQEquipableItem* FindValidWeaponByClass(TSubclassOf<class ASQEquipableItem> WeaponClass);
	class ASQEquipableItem* FindValidWeaponInGroup(int32 WeaponSlot, int32* WeaponOffset);
	bool InsertExistingItemIntoInventory(class ASQEquipableItem* Item, int32 Slot, int32 Offset);
	class ASQEquipableItem* InsertItemIntoInventory(int32 Slot, const struct FSQInventoryData& ItemClass, int32 Offset, bool bSpawnMaxAmmo);
	void OnAmmoChanged();
	void OnNextItem();
	void OnPendingWeaponPawnOwnerChanged(class APawn* NewPawnOwner);
	void OnPrevItem();
	void OnRep_PendingWeapon(class ASQEquipableItem* PreviousPendingWeapon);
	void OnRep_RepInventory();
	void PauseAnimationHandler(class UAnimMontage* WeaponMontage, class UAnimMontage* Soldier1pMontage, class UAnimMontage* Soldier3pMontage);
	void PlayAnimationHandler(class UAnimMontage* WeaponMontage, class UAnimMontage* Soldier1pMontage, class UAnimMontage* Soldier3pMontage);
	bool RemoveGroupFromInventory(int32 Slot);
	void RemoveItemClassFromInventory(TSubclassOf<class ASQEquipableItem> EquipableItemToRemove);
	void RemoveItemFromInventory(int32 Slot, int32 Offset);
	class ASQEquipableItem* RemoveWithoutDestroyingItem(int32 Slot, int32 Offset);
	void ReplaceItemInInventory(int32 Slot, const struct FSQInventoryData& ItemClass, int32 Offset);
	void ResetInventorySwitch();
	void ResumeAnimationHandler(class UAnimMontage* WeaponMontage, class UAnimMontage* Soldier1pMontage, class UAnimMontage* Soldier3pMontage);
	void ServerSwitchWeapon(int32 NewWeaponSlot);
	void ServerSwitchWeapon2(class ASQEquipableItem* NewWeapon);
	void SetAnimationPlayRateHandler(class UAnimMontage* WeaponMontage, class UAnimMontage* Soldier1pMontage, class UAnimMontage* Soldier3pMontage, const float NewPlayRate);
	void SetupStaticInfoBindings(class ASQEquipableItem* Item);
	class ASQEquipableItem* SpawnEquipableItem(const struct FSQInventoryData& ItemClass, bool bSpawnMaxAmmo, const struct FSQPersistedAmmoCount& StartingAmmo);
	void StopAnimationHandler(class UAnimMontage* WeaponMontage, class UAnimMontage* Soldier1pMontage, class UAnimMontage* Soldier3pMontage, const float blendOutTime, const bool bStopAllWeaponAnims);
	bool SwitchItem(int32 ItemSlot);
	bool SwitchWeapon(int32 NewItemSlot);
	bool SwitchWeaponDirectly(int32 NewWeaponSlot, int32 NewWeaponOffset, bool bInstant);
	void UpdateInventorySwitch(int32 NewSlot, int32 NewOffset, bool bInteracting);
	void UpdateStaticItemInfo(class USQItemStaticInfo* InfoObject);

	float CalculateMissingAmmoCost() const;
	bool CalculateRearmCost(float* OutCost, const TScriptInterface<class ISQRearmSource>& RearmSource, const TArray<struct FSQRearmWeaponRequest>& RearmRequest) const;
	const TArray<struct FSQWeaponGroupData> GetInventoryItemGroups() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQPawnInventoryComponent">();
	}
	static class USQPawnInventoryComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQPawnInventoryComponent>();
	}
};
static_assert(alignof(USQPawnInventoryComponent) == 0x000008, "Wrong alignment on USQPawnInventoryComponent");
static_assert(sizeof(USQPawnInventoryComponent) == 0x0002B8, "Wrong size on USQPawnInventoryComponent");
static_assert(offsetof(USQPawnInventoryComponent, EquippedNewItemEvent) == 0x0000B0, "Member 'USQPawnInventoryComponent::EquippedNewItemEvent' has a wrong offset!");
static_assert(offsetof(USQPawnInventoryComponent, PlayAnimationEvent) == 0x0000C0, "Member 'USQPawnInventoryComponent::PlayAnimationEvent' has a wrong offset!");
static_assert(offsetof(USQPawnInventoryComponent, PauseAnimationEvent) == 0x0000D0, "Member 'USQPawnInventoryComponent::PauseAnimationEvent' has a wrong offset!");
static_assert(offsetof(USQPawnInventoryComponent, ResumeAnimationEvent) == 0x0000E0, "Member 'USQPawnInventoryComponent::ResumeAnimationEvent' has a wrong offset!");
static_assert(offsetof(USQPawnInventoryComponent, SetAnimationPlayRateEvent) == 0x0000F0, "Member 'USQPawnInventoryComponent::SetAnimationPlayRateEvent' has a wrong offset!");
static_assert(offsetof(USQPawnInventoryComponent, EndLoopAnimationEvent) == 0x000100, "Member 'USQPawnInventoryComponent::EndLoopAnimationEvent' has a wrong offset!");
static_assert(offsetof(USQPawnInventoryComponent, StopAnimationEvent) == 0x000110, "Member 'USQPawnInventoryComponent::StopAnimationEvent' has a wrong offset!");
static_assert(offsetof(USQPawnInventoryComponent, AmmoChangedEvent) == 0x000120, "Member 'USQPawnInventoryComponent::AmmoChangedEvent' has a wrong offset!");
static_assert(offsetof(USQPawnInventoryComponent, CurrentItemStaticInfo) == 0x000130, "Member 'USQPawnInventoryComponent::CurrentItemStaticInfo' has a wrong offset!");
static_assert(offsetof(USQPawnInventoryComponent, DefaultStaticInfoClass) == 0x000138, "Member 'USQPawnInventoryComponent::DefaultStaticInfoClass' has a wrong offset!");
static_assert(offsetof(USQPawnInventoryComponent, CurrentWeapon) == 0x000140, "Member 'USQPawnInventoryComponent::CurrentWeapon' has a wrong offset!");
static_assert(offsetof(USQPawnInventoryComponent, bIsInteracting) == 0x000160, "Member 'USQPawnInventoryComponent::bIsInteracting' has a wrong offset!");
static_assert(offsetof(USQPawnInventoryComponent, bIsTimingOut) == 0x000161, "Member 'USQPawnInventoryComponent::bIsTimingOut' has a wrong offset!");
static_assert(offsetof(USQPawnInventoryComponent, CurrentFadeOut) == 0x000164, "Member 'USQPawnInventoryComponent::CurrentFadeOut' has a wrong offset!");
static_assert(offsetof(USQPawnInventoryComponent, FadeoutDuration) == 0x000168, "Member 'USQPawnInventoryComponent::FadeoutDuration' has a wrong offset!");
static_assert(offsetof(USQPawnInventoryComponent, FadeoutDelay) == 0x00016C, "Member 'USQPawnInventoryComponent::FadeoutDelay' has a wrong offset!");
static_assert(offsetof(USQPawnInventoryComponent, NextItemSlot) == 0x000174, "Member 'USQPawnInventoryComponent::NextItemSlot' has a wrong offset!");
static_assert(offsetof(USQPawnInventoryComponent, NextItemOffset) == 0x000178, "Member 'USQPawnInventoryComponent::NextItemOffset' has a wrong offset!");
static_assert(offsetof(USQPawnInventoryComponent, CurrentWeaponSlot) == 0x00017C, "Member 'USQPawnInventoryComponent::CurrentWeaponSlot' has a wrong offset!");
static_assert(offsetof(USQPawnInventoryComponent, CurrentWeaponOffset) == 0x000180, "Member 'USQPawnInventoryComponent::CurrentWeaponOffset' has a wrong offset!");
static_assert(offsetof(USQPawnInventoryComponent, Inventory) == 0x000188, "Member 'USQPawnInventoryComponent::Inventory' has a wrong offset!");
static_assert(offsetof(USQPawnInventoryComponent, RepInventory) == 0x000198, "Member 'USQPawnInventoryComponent::RepInventory' has a wrong offset!");
static_assert(offsetof(USQPawnInventoryComponent, PendingWeapon) == 0x0002B0, "Member 'USQPawnInventoryComponent::PendingWeapon' has a wrong offset!");

// Class Squad.SQRotorSetup
// 0x00A0 (0x00D0 - 0x0030)
class USQRotorSetup final : public UDataAsset
{
public:
	class FName                                   RotorName;                                         // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQRotor>                   RotorClass;                                        // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mass;                                              // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ThrustAxis;                                        // 0x0048(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ThrustVectoring;                                   // 0x0054(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThrustCoefficient;                                 // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ThrustSocketName;                                  // 0x0064(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TorqueMultiplier;                                  // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationalTorqueMultiplier;                        // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThrustMultiplier;                                  // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnimatedSocketName;                                // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimationSpeedMultiplier;                          // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQAxis                                       AnimationAxis;                                     // 0x0084(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D7[0x3];                                     // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            StartupAcceleration;                               // 0x0088(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartupAccelerationFactor;                         // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D8[0x4];                                     // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            StoppingDeceleration;                              // 0x0098(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StoppingDecelerationFactor;                        // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D9[0x4];                                     // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            NoInputDeceleration;                               // 0x00A8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecelerationMultiplier;                            // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12DA[0x4];                                     // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            InputAcceleration;                                 // 0x00B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputFactor;                                       // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRPM;                                            // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdleRPM;                                           // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQRotorType                                  RotorType;                                         // 0x00CC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12DB[0x3];                                     // 0x00CD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRotorSetup">();
	}
	static class USQRotorSetup* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRotorSetup>();
	}
};
static_assert(alignof(USQRotorSetup) == 0x000008, "Wrong alignment on USQRotorSetup");
static_assert(sizeof(USQRotorSetup) == 0x0000D0, "Wrong size on USQRotorSetup");
static_assert(offsetof(USQRotorSetup, RotorName) == 0x000030, "Member 'USQRotorSetup::RotorName' has a wrong offset!");
static_assert(offsetof(USQRotorSetup, RotorClass) == 0x000038, "Member 'USQRotorSetup::RotorClass' has a wrong offset!");
static_assert(offsetof(USQRotorSetup, Radius) == 0x000040, "Member 'USQRotorSetup::Radius' has a wrong offset!");
static_assert(offsetof(USQRotorSetup, Mass) == 0x000044, "Member 'USQRotorSetup::Mass' has a wrong offset!");
static_assert(offsetof(USQRotorSetup, ThrustAxis) == 0x000048, "Member 'USQRotorSetup::ThrustAxis' has a wrong offset!");
static_assert(offsetof(USQRotorSetup, ThrustVectoring) == 0x000054, "Member 'USQRotorSetup::ThrustVectoring' has a wrong offset!");
static_assert(offsetof(USQRotorSetup, ThrustCoefficient) == 0x000060, "Member 'USQRotorSetup::ThrustCoefficient' has a wrong offset!");
static_assert(offsetof(USQRotorSetup, ThrustSocketName) == 0x000064, "Member 'USQRotorSetup::ThrustSocketName' has a wrong offset!");
static_assert(offsetof(USQRotorSetup, TorqueMultiplier) == 0x00006C, "Member 'USQRotorSetup::TorqueMultiplier' has a wrong offset!");
static_assert(offsetof(USQRotorSetup, RotationalTorqueMultiplier) == 0x000070, "Member 'USQRotorSetup::RotationalTorqueMultiplier' has a wrong offset!");
static_assert(offsetof(USQRotorSetup, ThrustMultiplier) == 0x000074, "Member 'USQRotorSetup::ThrustMultiplier' has a wrong offset!");
static_assert(offsetof(USQRotorSetup, AnimatedSocketName) == 0x000078, "Member 'USQRotorSetup::AnimatedSocketName' has a wrong offset!");
static_assert(offsetof(USQRotorSetup, AnimationSpeedMultiplier) == 0x000080, "Member 'USQRotorSetup::AnimationSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(USQRotorSetup, AnimationAxis) == 0x000084, "Member 'USQRotorSetup::AnimationAxis' has a wrong offset!");
static_assert(offsetof(USQRotorSetup, StartupAcceleration) == 0x000088, "Member 'USQRotorSetup::StartupAcceleration' has a wrong offset!");
static_assert(offsetof(USQRotorSetup, StartupAccelerationFactor) == 0x000090, "Member 'USQRotorSetup::StartupAccelerationFactor' has a wrong offset!");
static_assert(offsetof(USQRotorSetup, StoppingDeceleration) == 0x000098, "Member 'USQRotorSetup::StoppingDeceleration' has a wrong offset!");
static_assert(offsetof(USQRotorSetup, StoppingDecelerationFactor) == 0x0000A0, "Member 'USQRotorSetup::StoppingDecelerationFactor' has a wrong offset!");
static_assert(offsetof(USQRotorSetup, NoInputDeceleration) == 0x0000A8, "Member 'USQRotorSetup::NoInputDeceleration' has a wrong offset!");
static_assert(offsetof(USQRotorSetup, DecelerationMultiplier) == 0x0000B0, "Member 'USQRotorSetup::DecelerationMultiplier' has a wrong offset!");
static_assert(offsetof(USQRotorSetup, InputAcceleration) == 0x0000B8, "Member 'USQRotorSetup::InputAcceleration' has a wrong offset!");
static_assert(offsetof(USQRotorSetup, InputFactor) == 0x0000C0, "Member 'USQRotorSetup::InputFactor' has a wrong offset!");
static_assert(offsetof(USQRotorSetup, MaxRPM) == 0x0000C4, "Member 'USQRotorSetup::MaxRPM' has a wrong offset!");
static_assert(offsetof(USQRotorSetup, IdleRPM) == 0x0000C8, "Member 'USQRotorSetup::IdleRPM' has a wrong offset!");
static_assert(offsetof(USQRotorSetup, RotorType) == 0x0000CC, "Member 'USQRotorSetup::RotorType' has a wrong offset!");

// Class Squad.SQPerformanceCollectorSubsystem
// 0x00E8 (0x0118 - 0x0030)
class USQPerformanceCollectorSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_12DC[0x4];                                     // 0x0030(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Deep_FrameSamplingFrequency;                       // 0x0034(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Deep_PlayerSamplingFrequency;                      // 0x0038(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Deep_RecordSize;                                   // 0x003C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FrameSamplingFrequency;                            // 0x0040(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PlayerSamplingFrequency;                           // 0x0044(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         RecordSize;                                        // 0x0048(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_12DD[0xCC];                                    // 0x004C(0x00CC)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQPerformanceCollectorSubsystem">();
	}
	static class USQPerformanceCollectorSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQPerformanceCollectorSubsystem>();
	}
};
static_assert(alignof(USQPerformanceCollectorSubsystem) == 0x000008, "Wrong alignment on USQPerformanceCollectorSubsystem");
static_assert(sizeof(USQPerformanceCollectorSubsystem) == 0x000118, "Wrong size on USQPerformanceCollectorSubsystem");
static_assert(offsetof(USQPerformanceCollectorSubsystem, Deep_FrameSamplingFrequency) == 0x000034, "Member 'USQPerformanceCollectorSubsystem::Deep_FrameSamplingFrequency' has a wrong offset!");
static_assert(offsetof(USQPerformanceCollectorSubsystem, Deep_PlayerSamplingFrequency) == 0x000038, "Member 'USQPerformanceCollectorSubsystem::Deep_PlayerSamplingFrequency' has a wrong offset!");
static_assert(offsetof(USQPerformanceCollectorSubsystem, Deep_RecordSize) == 0x00003C, "Member 'USQPerformanceCollectorSubsystem::Deep_RecordSize' has a wrong offset!");
static_assert(offsetof(USQPerformanceCollectorSubsystem, FrameSamplingFrequency) == 0x000040, "Member 'USQPerformanceCollectorSubsystem::FrameSamplingFrequency' has a wrong offset!");
static_assert(offsetof(USQPerformanceCollectorSubsystem, PlayerSamplingFrequency) == 0x000044, "Member 'USQPerformanceCollectorSubsystem::PlayerSamplingFrequency' has a wrong offset!");
static_assert(offsetof(USQPerformanceCollectorSubsystem, RecordSize) == 0x000048, "Member 'USQPerformanceCollectorSubsystem::RecordSize' has a wrong offset!");

// Class Squad.SQPhysicalMaterial
// 0x0018 (0x0098 - 0x0080)
class USQPhysicalMaterial final : public UPhysicalMaterial
{
public:
	bool                                          bConsiderForPenetration;                           // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowPenetration;                                 // 0x0081(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12DE[0x2];                                     // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DamageAbsorbed;                                    // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArmorDamageMultiplier;                             // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageParentActor;                                // 0x008C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12DF[0x3];                                     // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WheelDampingRateMultiplier;                        // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArmorThicknessMillimeters;                         // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	class UMaterialInterface* GetDecal(const struct FSQProjectileImpactEffect& InImpactEffect, class UMaterialInterface* DefaultDecal) const;
	class UNiagaraSystem* GetNiagaraParticle(const struct FSQProjectileImpactEffect& InImpactEffect, class UNiagaraSystem* DefaultParticle) const;
	class UParticleSystem* GetParticle(const struct FSQProjectileImpactEffect& InImpactEffect, class UParticleSystem* DefaultParticle) const;
	class USQShockwave* GetShockwave(const struct FSQProjectileImpactEffect& InImpactEffect, class USQShockwave* DefaultShockwave) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQPhysicalMaterial">();
	}
	static class USQPhysicalMaterial* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQPhysicalMaterial>();
	}
};
static_assert(alignof(USQPhysicalMaterial) == 0x000008, "Wrong alignment on USQPhysicalMaterial");
static_assert(sizeof(USQPhysicalMaterial) == 0x000098, "Wrong size on USQPhysicalMaterial");
static_assert(offsetof(USQPhysicalMaterial, bConsiderForPenetration) == 0x000080, "Member 'USQPhysicalMaterial::bConsiderForPenetration' has a wrong offset!");
static_assert(offsetof(USQPhysicalMaterial, bAllowPenetration) == 0x000081, "Member 'USQPhysicalMaterial::bAllowPenetration' has a wrong offset!");
static_assert(offsetof(USQPhysicalMaterial, DamageAbsorbed) == 0x000084, "Member 'USQPhysicalMaterial::DamageAbsorbed' has a wrong offset!");
static_assert(offsetof(USQPhysicalMaterial, ArmorDamageMultiplier) == 0x000088, "Member 'USQPhysicalMaterial::ArmorDamageMultiplier' has a wrong offset!");
static_assert(offsetof(USQPhysicalMaterial, bDamageParentActor) == 0x00008C, "Member 'USQPhysicalMaterial::bDamageParentActor' has a wrong offset!");
static_assert(offsetof(USQPhysicalMaterial, WheelDampingRateMultiplier) == 0x000090, "Member 'USQPhysicalMaterial::WheelDampingRateMultiplier' has a wrong offset!");
static_assert(offsetof(USQPhysicalMaterial, ArmorThicknessMillimeters) == 0x000094, "Member 'USQPhysicalMaterial::ArmorThicknessMillimeters' has a wrong offset!");

// Class Squad.SQPhysicalMaterialRedirectors
// 0x0050 (0x0080 - 0x0030)
class USQPhysicalMaterialRedirectors final : public UDataAsset
{
public:
	TMap<class USQPhysicalMaterial*, class USQPhysicalMaterial*> Redirectors;                                       // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	class USQPhysicalMaterial* GetRedirector(const class USQPhysicalMaterial* Key) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQPhysicalMaterialRedirectors">();
	}
	static class USQPhysicalMaterialRedirectors* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQPhysicalMaterialRedirectors>();
	}
};
static_assert(alignof(USQPhysicalMaterialRedirectors) == 0x000008, "Wrong alignment on USQPhysicalMaterialRedirectors");
static_assert(sizeof(USQPhysicalMaterialRedirectors) == 0x000080, "Wrong size on USQPhysicalMaterialRedirectors");
static_assert(offsetof(USQPhysicalMaterialRedirectors, Redirectors) == 0x000030, "Member 'USQPhysicalMaterialRedirectors::Redirectors' has a wrong offset!");

// Class Squad.SQSoundNodeRandom
// 0x0070 (0x00B8 - 0x0048)
class USQSoundNodeRandom final : public USoundNode
{
public:
	TArray<TSoftObjectPtr<class USoundWave>>      Sounds;                                            // 0x0048(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<float>                                 Weights;                                           // 0x0058(0x0010)(Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         DurationActual;                                    // 0x0068(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreselectAtLevelLoad;                              // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bRandomizeWithoutReplacement : 1;                  // 0x0070(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_12E0[0x7];                                     // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQSoundWeight>                 RuntimeSounds;                                     // 0x0078(0x0010)(Edit, ZeroConstructor, Transient, EditConst, Protected, NativeAccessSpecifierProtected)
	int32                                         RuntimeNumRandomSoundsUsed;                        // 0x0088(0x0004)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12E1[0x2C];                                    // 0x008C(0x002C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSoundNodeRandom">();
	}
	static class USQSoundNodeRandom* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSoundNodeRandom>();
	}
};
static_assert(alignof(USQSoundNodeRandom) == 0x000008, "Wrong alignment on USQSoundNodeRandom");
static_assert(sizeof(USQSoundNodeRandom) == 0x0000B8, "Wrong size on USQSoundNodeRandom");
static_assert(offsetof(USQSoundNodeRandom, Sounds) == 0x000048, "Member 'USQSoundNodeRandom::Sounds' has a wrong offset!");
static_assert(offsetof(USQSoundNodeRandom, Weights) == 0x000058, "Member 'USQSoundNodeRandom::Weights' has a wrong offset!");
static_assert(offsetof(USQSoundNodeRandom, DurationActual) == 0x000068, "Member 'USQSoundNodeRandom::DurationActual' has a wrong offset!");
static_assert(offsetof(USQSoundNodeRandom, PreselectAtLevelLoad) == 0x00006C, "Member 'USQSoundNodeRandom::PreselectAtLevelLoad' has a wrong offset!");
static_assert(offsetof(USQSoundNodeRandom, RuntimeSounds) == 0x000078, "Member 'USQSoundNodeRandom::RuntimeSounds' has a wrong offset!");
static_assert(offsetof(USQSoundNodeRandom, RuntimeNumRandomSoundsUsed) == 0x000088, "Member 'USQSoundNodeRandom::RuntimeNumRandomSoundsUsed' has a wrong offset!");

// Class Squad.SQPhysicalMaterialEffects
// 0x0058 (0x0080 - 0x0028)
class USQPhysicalMaterialEffects : public UObject
{
public:
	class USQPhysicalMaterialRedirectors*         Redirectors;                                       // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class USQPhysicalMaterial*, struct FSQEffectsSet> Effects;                                           // 0x0030(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	const struct FSQProjectileImpactEffect GetBlastEffect(class USQPhysicalMaterial* Material) const;
	const struct FSQEffectsSet GetEffect(class USQPhysicalMaterial* Material) const;
	const struct FSQExplosionEffect GetExplosionEffect(class USQPhysicalMaterial* Material) const;
	const struct FSQProjectileImpactEffect GetImpactEffect(class USQPhysicalMaterial* Material) const;
	const struct FSQProjectileImpactEffect GetThrowableEffect(class USQPhysicalMaterial* Material) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQPhysicalMaterialEffects">();
	}
	static class USQPhysicalMaterialEffects* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQPhysicalMaterialEffects>();
	}
};
static_assert(alignof(USQPhysicalMaterialEffects) == 0x000008, "Wrong alignment on USQPhysicalMaterialEffects");
static_assert(sizeof(USQPhysicalMaterialEffects) == 0x000080, "Wrong size on USQPhysicalMaterialEffects");
static_assert(offsetof(USQPhysicalMaterialEffects, Redirectors) == 0x000028, "Member 'USQPhysicalMaterialEffects::Redirectors' has a wrong offset!");
static_assert(offsetof(USQPhysicalMaterialEffects, Effects) == 0x000030, "Member 'USQPhysicalMaterialEffects::Effects' has a wrong offset!");

// Class Squad.SQPhysicalMaterialVehiclesEffects
// 0x0100 (0x0128 - 0x0028)
class USQPhysicalMaterialVehiclesEffects : public UObject
{
public:
	class USQPhysicalMaterialRedirectors*         Redirectors;                                       // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class USQPhysicalMaterial*, struct FSQVehicleEffect> Effects;                                           // 0x0030(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class USQPhysicalMaterial*                    WaterEffectPhysMatOverride;                        // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQVehicleEffect                       WaterEffectOverride;                               // 0x0088(0x00A0)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	const struct FSQVehicleEffect GetEffect(const class USQPhysicalMaterial* Material) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQPhysicalMaterialVehiclesEffects">();
	}
	static class USQPhysicalMaterialVehiclesEffects* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQPhysicalMaterialVehiclesEffects>();
	}
};
static_assert(alignof(USQPhysicalMaterialVehiclesEffects) == 0x000008, "Wrong alignment on USQPhysicalMaterialVehiclesEffects");
static_assert(sizeof(USQPhysicalMaterialVehiclesEffects) == 0x000128, "Wrong size on USQPhysicalMaterialVehiclesEffects");
static_assert(offsetof(USQPhysicalMaterialVehiclesEffects, Redirectors) == 0x000028, "Member 'USQPhysicalMaterialVehiclesEffects::Redirectors' has a wrong offset!");
static_assert(offsetof(USQPhysicalMaterialVehiclesEffects, Effects) == 0x000030, "Member 'USQPhysicalMaterialVehiclesEffects::Effects' has a wrong offset!");
static_assert(offsetof(USQPhysicalMaterialVehiclesEffects, WaterEffectPhysMatOverride) == 0x000080, "Member 'USQPhysicalMaterialVehiclesEffects::WaterEffectPhysMatOverride' has a wrong offset!");
static_assert(offsetof(USQPhysicalMaterialVehiclesEffects, WaterEffectOverride) == 0x000088, "Member 'USQPhysicalMaterialVehiclesEffects::WaterEffectOverride' has a wrong offset!");

// Class Squad.SQPhysicalMaterialSoldiersEffects
// 0x00A8 (0x00D0 - 0x0028)
class USQPhysicalMaterialSoldiersEffects : public UObject
{
public:
	class USQPhysicalMaterialRedirectors*         Redirectors;                                       // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class USQPhysicalMaterial*, struct FSQSoldierEffect> Effects;                                           // 0x0030(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class USQPhysicalMaterial*                    WaterEffectPhysMatOverride;                        // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQSoldierEffect                       WaterEffectOverride;                               // 0x0088(0x0048)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	const struct FSQSoldierEffect GetEffect(const class USQPhysicalMaterial* Material) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQPhysicalMaterialSoldiersEffects">();
	}
	static class USQPhysicalMaterialSoldiersEffects* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQPhysicalMaterialSoldiersEffects>();
	}
};
static_assert(alignof(USQPhysicalMaterialSoldiersEffects) == 0x000008, "Wrong alignment on USQPhysicalMaterialSoldiersEffects");
static_assert(sizeof(USQPhysicalMaterialSoldiersEffects) == 0x0000D0, "Wrong size on USQPhysicalMaterialSoldiersEffects");
static_assert(offsetof(USQPhysicalMaterialSoldiersEffects, Redirectors) == 0x000028, "Member 'USQPhysicalMaterialSoldiersEffects::Redirectors' has a wrong offset!");
static_assert(offsetof(USQPhysicalMaterialSoldiersEffects, Effects) == 0x000030, "Member 'USQPhysicalMaterialSoldiersEffects::Effects' has a wrong offset!");
static_assert(offsetof(USQPhysicalMaterialSoldiersEffects, WaterEffectPhysMatOverride) == 0x000080, "Member 'USQPhysicalMaterialSoldiersEffects::WaterEffectPhysMatOverride' has a wrong offset!");
static_assert(offsetof(USQPhysicalMaterialSoldiersEffects, WaterEffectOverride) == 0x000088, "Member 'USQPhysicalMaterialSoldiersEffects::WaterEffectOverride' has a wrong offset!");

// Class Squad.SQSquadMemberList
// 0x0078 (0x02E0 - 0x0268)
class USQSquadMemberList final : public USQUserWidget
{
public:
	TSubclassOf<class USQSquadMemberListItem>     SquadMemberListItemClass;                          // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 BG_IMGCPP;                                         // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 IconImageCPP;                                      // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UButton*                                InviteButtonCPP;                                   // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             InviteButtonTextCPP;                               // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             MemberCountCPP;                                    // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UButton*                                LockButtonCPP;                                     // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             SquadNameCPP;                                      // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             SquadNumberCPP;                                    // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UVerticalBox*                           MemberListBoxCPP;                                  // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASQPlayerController*                    ParentPC;                                          // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12E2[0x18];                                    // 0x02C0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQPlayerState*                         CurrentlyOpenedItemPS;                             // 0x02D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Init();
	void OnInviteButtonClicked();
	void OnLockButtonClicked();
	void RefreshList();
	void RefreshSquadInfo();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadMemberList">();
	}
	static class USQSquadMemberList* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSquadMemberList>();
	}
};
static_assert(alignof(USQSquadMemberList) == 0x000008, "Wrong alignment on USQSquadMemberList");
static_assert(sizeof(USQSquadMemberList) == 0x0002E0, "Wrong size on USQSquadMemberList");
static_assert(offsetof(USQSquadMemberList, SquadMemberListItemClass) == 0x000268, "Member 'USQSquadMemberList::SquadMemberListItemClass' has a wrong offset!");
static_assert(offsetof(USQSquadMemberList, BG_IMGCPP) == 0x000270, "Member 'USQSquadMemberList::BG_IMGCPP' has a wrong offset!");
static_assert(offsetof(USQSquadMemberList, IconImageCPP) == 0x000278, "Member 'USQSquadMemberList::IconImageCPP' has a wrong offset!");
static_assert(offsetof(USQSquadMemberList, InviteButtonCPP) == 0x000280, "Member 'USQSquadMemberList::InviteButtonCPP' has a wrong offset!");
static_assert(offsetof(USQSquadMemberList, InviteButtonTextCPP) == 0x000288, "Member 'USQSquadMemberList::InviteButtonTextCPP' has a wrong offset!");
static_assert(offsetof(USQSquadMemberList, MemberCountCPP) == 0x000290, "Member 'USQSquadMemberList::MemberCountCPP' has a wrong offset!");
static_assert(offsetof(USQSquadMemberList, LockButtonCPP) == 0x000298, "Member 'USQSquadMemberList::LockButtonCPP' has a wrong offset!");
static_assert(offsetof(USQSquadMemberList, SquadNameCPP) == 0x0002A0, "Member 'USQSquadMemberList::SquadNameCPP' has a wrong offset!");
static_assert(offsetof(USQSquadMemberList, SquadNumberCPP) == 0x0002A8, "Member 'USQSquadMemberList::SquadNumberCPP' has a wrong offset!");
static_assert(offsetof(USQSquadMemberList, MemberListBoxCPP) == 0x0002B0, "Member 'USQSquadMemberList::MemberListBoxCPP' has a wrong offset!");
static_assert(offsetof(USQSquadMemberList, ParentPC) == 0x0002B8, "Member 'USQSquadMemberList::ParentPC' has a wrong offset!");
static_assert(offsetof(USQSquadMemberList, CurrentlyOpenedItemPS) == 0x0002D8, "Member 'USQSquadMemberList::CurrentlyOpenedItemPS' has a wrong offset!");

// Class Squad.SQPhysicsVolume
// 0x0000 (0x0270 - 0x0270)
class ASQPhysicsVolume final : public APhysicsVolume
{
public:
	void BPActorEnteredVolume(class AActor* Other);
	void BPActorLeavingVolume(class AActor* Other);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQPhysicsVolume">();
	}
	static class ASQPhysicsVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQPhysicsVolume>();
	}
};
static_assert(alignof(ASQPhysicsVolume) == 0x000008, "Wrong alignment on ASQPhysicsVolume");
static_assert(sizeof(ASQPhysicsVolume) == 0x000270, "Wrong size on ASQPhysicsVolume");

// Class Squad.SQSpawnableItemBase
// 0x0008 (0x0030 - 0x0028)
class USQSpawnableItemBase : public UObject
{
public:
	TSubclassOf<class ASQSpawnableGhost>          GhostClass;                                        // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static void Sort(TArray<class USQSpawnableItemBase*>& ItemArray);

	class FString GetSearchableName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSpawnableItemBase">();
	}
	static class USQSpawnableItemBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSpawnableItemBase>();
	}
};
static_assert(alignof(USQSpawnableItemBase) == 0x000008, "Wrong alignment on USQSpawnableItemBase");
static_assert(sizeof(USQSpawnableItemBase) == 0x000030, "Wrong size on USQSpawnableItemBase");
static_assert(offsetof(USQSpawnableItemBase, GhostClass) == 0x000028, "Member 'USQSpawnableItemBase::GhostClass' has a wrong offset!");

// Class Squad.SQLocalCameraEffectHandler
// 0x0578 (0x05A0 - 0x0028)
class USQLocalCameraEffectHandler : public UObject
{
public:
	uint8                                         Pad_12E3[0x8];                                     // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   Effect;                                            // 0x0030(0x0560)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         BlendValue;                                        // 0x0590(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12E4[0xC];                                     // 0x0594(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_ApplyCameraEffect(float DeltaTime, class ASQSoldier* SoldierToApplyTo);
	void BP_InitCameraEffect(class ASQPlayerController* InPlayerController);
	void BP_SoldierChanged(class ASQSoldier* NewSoldier);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQLocalCameraEffectHandler">();
	}
	static class USQLocalCameraEffectHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQLocalCameraEffectHandler>();
	}
};
static_assert(alignof(USQLocalCameraEffectHandler) == 0x000010, "Wrong alignment on USQLocalCameraEffectHandler");
static_assert(sizeof(USQLocalCameraEffectHandler) == 0x0005A0, "Wrong size on USQLocalCameraEffectHandler");
static_assert(offsetof(USQLocalCameraEffectHandler, Effect) == 0x000030, "Member 'USQLocalCameraEffectHandler::Effect' has a wrong offset!");
static_assert(offsetof(USQLocalCameraEffectHandler, BlendValue) == 0x000590, "Member 'USQLocalCameraEffectHandler::BlendValue' has a wrong offset!");

// Class Squad.SQLocalAudioPlayer
// 0x0008 (0x0030 - 0x0028)
class USQLocalAudioPlayer : public USQLocalAudioEffectHandler
{
public:
	class UAudioComponent*                        PlayingAudioComponent;                             // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void BP_InitAudioEffect(class UAudioComponent* AudioComponent);
	void BP_UpdateAudioComponent(float DeltaTime, class UAudioComponent* AudioComponent, class ASQSoldier* SoldierToApplyTo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQLocalAudioPlayer">();
	}
	static class USQLocalAudioPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQLocalAudioPlayer>();
	}
};
static_assert(alignof(USQLocalAudioPlayer) == 0x000008, "Wrong alignment on USQLocalAudioPlayer");
static_assert(sizeof(USQLocalAudioPlayer) == 0x000030, "Wrong size on USQLocalAudioPlayer");
static_assert(offsetof(USQLocalAudioPlayer, PlayingAudioComponent) == 0x000028, "Member 'USQLocalAudioPlayer::PlayingAudioComponent' has a wrong offset!");

// Class Squad.SQSquadStateDataAmmoCrate
// 0x0000 (0x0160 - 0x0160)
class USQSquadStateDataAmmoCrate : public USQSquadStateDataDeployable
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadStateDataAmmoCrate">();
	}
	static class USQSquadStateDataAmmoCrate* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSquadStateDataAmmoCrate>();
	}
};
static_assert(alignof(USQSquadStateDataAmmoCrate) == 0x000008, "Wrong alignment on USQSquadStateDataAmmoCrate");
static_assert(sizeof(USQSquadStateDataAmmoCrate) == 0x000160, "Wrong size on USQSquadStateDataAmmoCrate");

// Class Squad.SQVehicleComponentBluePrintable
// 0x0000 (0x05F0 - 0x05F0)
class USQVehicleComponentBluePrintable final : public USQVehicleComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleComponentBluePrintable">();
	}
	static class USQVehicleComponentBluePrintable* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleComponentBluePrintable>();
	}
};
static_assert(alignof(USQVehicleComponentBluePrintable) == 0x000010, "Wrong alignment on USQVehicleComponentBluePrintable");
static_assert(sizeof(USQVehicleComponentBluePrintable) == 0x0005F0, "Wrong size on USQVehicleComponentBluePrintable");

// Class Squad.SQPlayerController_Menu
// 0x0000 (0x0B00 - 0x0B00)
class ASQPlayerController_Menu : public ASQPlayerController
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQPlayerController_Menu">();
	}
	static class ASQPlayerController_Menu* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQPlayerController_Menu>();
	}
};
static_assert(alignof(ASQPlayerController_Menu) == 0x000010, "Wrong alignment on ASQPlayerController_Menu");
static_assert(sizeof(ASQPlayerController_Menu) == 0x000B00, "Wrong size on ASQPlayerController_Menu");

// Class Squad.SQSquadRallyPoint
// 0x0010 (0x0438 - 0x0428)
class ASQSquadRallyPoint : public ASQGameRallyPoint
{
public:
	class ASQSquad*                               AuthoritySquad;                                    // 0x0428(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQSquadState*                          SquadState;                                        // 0x0430(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnRep_SquadState();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadRallyPoint">();
	}
	static class ASQSquadRallyPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQSquadRallyPoint>();
	}
};
static_assert(alignof(ASQSquadRallyPoint) == 0x000008, "Wrong alignment on ASQSquadRallyPoint");
static_assert(sizeof(ASQSquadRallyPoint) == 0x000438, "Wrong size on ASQSquadRallyPoint");
static_assert(offsetof(ASQSquadRallyPoint, AuthoritySquad) == 0x000428, "Member 'ASQSquadRallyPoint::AuthoritySquad' has a wrong offset!");
static_assert(offsetof(ASQSquadRallyPoint, SquadState) == 0x000430, "Member 'ASQSquadRallyPoint::SquadState' has a wrong offset!");

// Class Squad.SQPlayerState
// 0x0530 (0x0858 - 0x0328)
class ASQPlayerState final : public APlayerState
{
public:
	uint8                                         Pad_12E7[0x20];                                    // 0x0328(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSquadStateChangedEvent;                          // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_12E8[0x18];                                    // 0x0358(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUseCustomPingReplicationRate;                     // 0x0370(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12E9[0x3];                                     // 0x0371(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SecondsBetweenPingUpdate;                          // 0x0374(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12EA[0x4];                                     // 0x0378(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeBetweenPlayerCacheChecking;                    // 0x037C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12EB[0x28];                                    // 0x0380(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnTeamStateChangedEvent;                           // 0x03A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnRoleChangedEvent;                                // 0x03B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnDeployRoleChangedEvent;                          // 0x03C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_12EC[0x18];                                    // 0x03D8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ASQMapMarker*>                   RelevantMapMarkers;                                // 0x03F0(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	int32                                         TeamId;                                            // 0x0400(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastTeamChangeTime;                                // 0x0404(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12ED[0xA0];                                    // 0x0408(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ASQSoldier*>                     SoldiersOnScreenSortedByNearestDistanceCache;      // 0x04A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class ASQSoldier*>                     SoldiersHaveLineOfSightCache;                      // 0x04B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class ASQSoldier*>                     EnemiesHaveLineOfSightCache;                       // 0x04C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class ASQSoldier*>                     FriendliesHaveLineOfSightCache;                    // 0x04D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class ASQSoldier*>                     AllSoldiersCache;                                  // 0x04E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class ASQSoldier*>                     EnemiesCache;                                      // 0x04F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class ASQSoldier*>                     FriendliesCache;                                   // 0x0508(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class ASQSoldier*>                     AllSoldiersSortedByNearestDistanceCache;           // 0x0518(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class APawn*>                          PawnsOnScreenSortedByNearestDistanceCache;         // 0x0528(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class APawn*>                          PawnsHaveLineOfSightCache;                         // 0x0538(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class APawn*>                          EnemyPawnsHaveLineOfSightCache;                    // 0x0548(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class APawn*>                          FriendlyPawnsHaveLineOfSightCache;                 // 0x0558(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class APawn*>                          AllPawnsCache;                                     // 0x0568(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class APawn*>                          EnemyPawnsCache;                                   // 0x0578(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class APawn*>                          FriendlyPawnsCache;                                // 0x0588(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class APawn*>                          AllPawnsSortedByNearestDistanceCache;              // 0x0598(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class USQVehicleClaim*>                AuthorityVehicleClaimsNotExpired;                  // 0x05A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	struct FDeployableItemsArray                  PlacedDeployablesArray;                            // 0x05B8(0x0118)(Net, Protected, NativeAccessSpecifierProtected)
	struct FPlayerStateDataObject                 PlayerStateData;                                   // 0x06D0(0x0078)(BlueprintVisible, BlueprintReadOnly, Net, NativeAccessSpecifierPublic)
	class USQVehicleSeatComponent*                CurrentSeat;                                       // 0x0748(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASQTeamState*                           TeamState;                                         // 0x0750(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASQSquadState*                          SquadState;                                        // 0x0758(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASQSoldier*                             Soldier;                                           // 0x0760(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APawn*                                  CurrentPawn;                                       // 0x0768(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   CurrentRoleId;                                     // 0x0770(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   DeployRoleId;                                      // 0x0778(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQRoleSettings*                        CurrentRole;                                       // 0x0780(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQRoleSettings*                        DeployRole;                                        // 0x0788(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSQPersistedAmmoState                  PersistedAmmoState;                                // 0x0790(0x0018)(NativeAccessSpecifierPrivate)
	TMap<class UClass*, class UClass*>            ReplacementClassesMap;                             // 0x07A8(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_12EE[0x8];                                     // 0x07F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<int32>                                   OwnedSteamItemIDs;                                 // 0x0800(0x0050)(NativeAccessSpecifierPublic)
	class USQCoreStateComponent*                  StateObject;                                       // 0x0850(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void AddPlacedDeployableItem(class ASQDeployable* Deployable);
	void BlueprintSetPlayerName(const class FString& Param_Name);
	void BPOnRep_PlayerNamePrefix(const class FString& OldPlayerNamePrefix, const class FString& NewPlayerNamePrefix);
	class FString GetPlayerOnlineID();
	void MulticastOnImpact(uint64 ProjectileId, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnClientGetItemCacheSuccess(const struct FODKBazaarCacheCompletedData& Results);
	void OnRep_CurrentPawn();
	void OnRep_CurrentRole();
	void OnRep_CurrentSeat(class USQVehicleSeatComponent* LastSeat);
	void OnRep_DeployRole();
	void OnRep_FireTeamIndex();
	void OnRep_FireTeamPosition();
	void OnRep_PlayerNamePrefix(const class FString& OldPlayerNamePrefix);
	void OnRep_SquadState(class ASQSquadState* OldSquadState);
	void OnRep_TeamState(class ASQTeamState* OldTeamState);
	void OnServerGetItemCacheSuccess(const struct FODKBazaarCacheCompletedData& Results);
	bool RemovedPlacedDeployableItemAt(const int32 Param_Index);
	void ScorePoints(int32 Points, const class FString& Reason, const class FName& ScoreGroup);
	void ScorePointsDelayed(int32 Points, const class FString& Reason, const class FName& ScoreGroup);
	bool SendEquippedSkinsToServer();
	void ServerGetSkinItemsCacheSuccess(const struct FODKBazaarCacheCompletedData& Results);
	void ServerOnImpact(uint64 ProjectileId, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ServerRequestTeamChange(int32 NewTeam);
	void ServerSendEquippedSkins(const TArray<class FName>& ClientEquippedItems);
	void ServerSendInventoryItems(const TArray<class FName>& Items, const TArray<class FName>& ActiveClanMemberItems);
	void ServerSetPlayerNamePrefix(const class FString& NewPlayerNamePrefix);
	void SetClanPatch(class UTexture* InClanPatch);
	void SetCurrentPawn(class APawn* InPawn);
	void SetCurrentRole(class USQRoleSettings* InCurrentRole);
	void SetCurrentSeat(class USQVehicleSeatComponent* InCurrentSeat);
	void SetDeployRole(class USQRoleSettings* InDeployRole);
	void SetHealPoints(const float InHealPoints);
	void SetIsAdmin(const bool bInIsAdmin);
	void SetIsDev(const bool bInIsDev);
	void SetIsMember(const bool bInIsMember);
	void SetIsQA(const bool bInIsQA);
	void SetLives(const int32 InLives);
	void SetNumDeaths(const int32 InNumDeaths);
	void SetNumKills(const int32 InNumKill);
	void SetNumTeamKills(const int32 InNumTeamkills);
	void SetNumWounded(const int32 InWounded);
	void SetNumWounds(const int32 InWounds);
	void SetObjectiveScore(const float InObjectiveScore);
	void SetPlayerNamePrefix(const class FString& NewPlayerNamePrefix);
	void SetRevivedPoints(const float InRevivedPoints);
	void SetSoldier(class ASQSoldier* InSoldier);
	void SetSquadState(class ASQSquadState* NewSquadState);
	void SetSupporterPatch(class UTexture* InSupporterPatch);
	void SetTeamState(class ASQTeamState* NewTeamState);
	void SetTeamWorkScore(const float InTeamWorkScore);
	void UpdateContextVoiceSettings(class ASQSquadState* Squad, class ASQPlayerState* Player);

	class UTexture* GetClanPatch() const;
	class APawn* GetCurrentPawn() const;
	class USQRoleSettings* GetCurrentRole() const;
	class USQVehicleSeatComponent* GetCurrentSeat() const;
	class ASQVehicleSeat* GetCurrentSeatPawn() const;
	class ASQVehicle* GetCurrentVehicle() const;
	class USQRoleSettings* GetDeployRole() const;
	int32 GetFireTeamIndex() const;
	int32 GetFireTeamPosition() const;
	class FString GetFullPlayerName(bool bReturnUnmodified) const;
	float GetHealPoints() const;
	int32 GetLives() const;
	int32 GetNumDeaths() const;
	int32 GetNumKills() const;
	int32 GetNumTeamKills() const;
	int32 GetNumWounded() const;
	int32 GetNumWounds() const;
	float GetObjectiveScore() const;
	class FString GetOnlyPlayerName(bool bReturnUnmodified) const;
	class FString GetOnlyPlayerPrefix(bool bReturnUnmodified) const;
	class ASQDeployable* GetPlacedDeployableAt(int32 Param_Index) const;
	int32 GetPlacedDeployableItemsCount() const;
	class FString GetPlayerNamePrefix() const;
	float GetRevivedPoints() const;
	class FString GetShortPlayerName() const;
	class ASQSoldier* GetSoldier() const;
	class ASQSquadState* GetSquadState() const;
	class UTexture* GetSupporterPatch() const;
	class ASQTeamState* GetTeamState() const;
	float GetTeamWorkScore() const;
	struct FUniqueNetIdRepl GetUniqueNetID() const;
	bool IsAdmin() const;
	bool IsAlive() const;
	bool IsCommander() const;
	bool IsDev() const;
	bool IsFireTeamLeader() const;
	bool IsMember() const;
	bool IsQA() const;
	bool IsSquadLeader() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQPlayerState">();
	}
	static class ASQPlayerState* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQPlayerState>();
	}
};
static_assert(alignof(ASQPlayerState) == 0x000008, "Wrong alignment on ASQPlayerState");
static_assert(sizeof(ASQPlayerState) == 0x000858, "Wrong size on ASQPlayerState");
static_assert(offsetof(ASQPlayerState, OnSquadStateChangedEvent) == 0x000348, "Member 'ASQPlayerState::OnSquadStateChangedEvent' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, bUseCustomPingReplicationRate) == 0x000370, "Member 'ASQPlayerState::bUseCustomPingReplicationRate' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, SecondsBetweenPingUpdate) == 0x000374, "Member 'ASQPlayerState::SecondsBetweenPingUpdate' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, TimeBetweenPlayerCacheChecking) == 0x00037C, "Member 'ASQPlayerState::TimeBetweenPlayerCacheChecking' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, OnTeamStateChangedEvent) == 0x0003A8, "Member 'ASQPlayerState::OnTeamStateChangedEvent' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, OnRoleChangedEvent) == 0x0003B8, "Member 'ASQPlayerState::OnRoleChangedEvent' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, OnDeployRoleChangedEvent) == 0x0003C8, "Member 'ASQPlayerState::OnDeployRoleChangedEvent' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, RelevantMapMarkers) == 0x0003F0, "Member 'ASQPlayerState::RelevantMapMarkers' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, TeamId) == 0x000400, "Member 'ASQPlayerState::TeamId' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, LastTeamChangeTime) == 0x000404, "Member 'ASQPlayerState::LastTeamChangeTime' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, SoldiersOnScreenSortedByNearestDistanceCache) == 0x0004A8, "Member 'ASQPlayerState::SoldiersOnScreenSortedByNearestDistanceCache' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, SoldiersHaveLineOfSightCache) == 0x0004B8, "Member 'ASQPlayerState::SoldiersHaveLineOfSightCache' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, EnemiesHaveLineOfSightCache) == 0x0004C8, "Member 'ASQPlayerState::EnemiesHaveLineOfSightCache' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, FriendliesHaveLineOfSightCache) == 0x0004D8, "Member 'ASQPlayerState::FriendliesHaveLineOfSightCache' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, AllSoldiersCache) == 0x0004E8, "Member 'ASQPlayerState::AllSoldiersCache' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, EnemiesCache) == 0x0004F8, "Member 'ASQPlayerState::EnemiesCache' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, FriendliesCache) == 0x000508, "Member 'ASQPlayerState::FriendliesCache' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, AllSoldiersSortedByNearestDistanceCache) == 0x000518, "Member 'ASQPlayerState::AllSoldiersSortedByNearestDistanceCache' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, PawnsOnScreenSortedByNearestDistanceCache) == 0x000528, "Member 'ASQPlayerState::PawnsOnScreenSortedByNearestDistanceCache' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, PawnsHaveLineOfSightCache) == 0x000538, "Member 'ASQPlayerState::PawnsHaveLineOfSightCache' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, EnemyPawnsHaveLineOfSightCache) == 0x000548, "Member 'ASQPlayerState::EnemyPawnsHaveLineOfSightCache' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, FriendlyPawnsHaveLineOfSightCache) == 0x000558, "Member 'ASQPlayerState::FriendlyPawnsHaveLineOfSightCache' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, AllPawnsCache) == 0x000568, "Member 'ASQPlayerState::AllPawnsCache' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, EnemyPawnsCache) == 0x000578, "Member 'ASQPlayerState::EnemyPawnsCache' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, FriendlyPawnsCache) == 0x000588, "Member 'ASQPlayerState::FriendlyPawnsCache' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, AllPawnsSortedByNearestDistanceCache) == 0x000598, "Member 'ASQPlayerState::AllPawnsSortedByNearestDistanceCache' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, AuthorityVehicleClaimsNotExpired) == 0x0005A8, "Member 'ASQPlayerState::AuthorityVehicleClaimsNotExpired' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, PlacedDeployablesArray) == 0x0005B8, "Member 'ASQPlayerState::PlacedDeployablesArray' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, PlayerStateData) == 0x0006D0, "Member 'ASQPlayerState::PlayerStateData' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, CurrentSeat) == 0x000748, "Member 'ASQPlayerState::CurrentSeat' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, TeamState) == 0x000750, "Member 'ASQPlayerState::TeamState' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, SquadState) == 0x000758, "Member 'ASQPlayerState::SquadState' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, Soldier) == 0x000760, "Member 'ASQPlayerState::Soldier' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, CurrentPawn) == 0x000768, "Member 'ASQPlayerState::CurrentPawn' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, CurrentRoleId) == 0x000770, "Member 'ASQPlayerState::CurrentRoleId' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, DeployRoleId) == 0x000778, "Member 'ASQPlayerState::DeployRoleId' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, CurrentRole) == 0x000780, "Member 'ASQPlayerState::CurrentRole' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, DeployRole) == 0x000788, "Member 'ASQPlayerState::DeployRole' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, PersistedAmmoState) == 0x000790, "Member 'ASQPlayerState::PersistedAmmoState' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, ReplacementClassesMap) == 0x0007A8, "Member 'ASQPlayerState::ReplacementClassesMap' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, OwnedSteamItemIDs) == 0x000800, "Member 'ASQPlayerState::OwnedSteamItemIDs' has a wrong offset!");
static_assert(offsetof(ASQPlayerState, StateObject) == 0x000850, "Member 'ASQPlayerState::StateObject' has a wrong offset!");

// Class Squad.SQVehicleExitPointComponent
// 0x0000 (0x0200 - 0x0200)
class USQVehicleExitPointComponent final : public USceneComponent
{
public:
	bool                                          bIsWaterExitPoint;                                 // 0x01F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12F8[0x7];                                     // 0x01F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CanExit();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleExitPointComponent">();
	}
	static class USQVehicleExitPointComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleExitPointComponent>();
	}
};
static_assert(alignof(USQVehicleExitPointComponent) == 0x000010, "Wrong alignment on USQVehicleExitPointComponent");
static_assert(sizeof(USQVehicleExitPointComponent) == 0x000200, "Wrong size on USQVehicleExitPointComponent");
static_assert(offsetof(USQVehicleExitPointComponent, bIsWaterExitPoint) == 0x0001F8, "Member 'USQVehicleExitPointComponent::bIsWaterExitPoint' has a wrong offset!");

// Class Squad.SQPlayFabProviderClient
// 0x0018 (0x01B8 - 0x01A0)
class USQPlayFabProviderClient final : public USQPlayFabProvider
{
public:
	uint8                                         Pad_12F9[0x18];                                    // 0x01A0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQPlayFabProviderClient">();
	}
	static class USQPlayFabProviderClient* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQPlayFabProviderClient>();
	}
};
static_assert(alignof(USQPlayFabProviderClient) == 0x000008, "Wrong alignment on USQPlayFabProviderClient");
static_assert(sizeof(USQPlayFabProviderClient) == 0x0001B8, "Wrong size on USQPlayFabProviderClient");

// Class Squad.SQPlayFabProviderServer
// 0x0020 (0x01C0 - 0x01A0)
class USQPlayFabProviderServer final : public USQPlayFabProvider
{
public:
	uint8                                         Pad_12FA[0x20];                                    // 0x01A0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQPlayFabProviderServer">();
	}
	static class USQPlayFabProviderServer* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQPlayFabProviderServer>();
	}
};
static_assert(alignof(USQPlayFabProviderServer) == 0x000008, "Wrong alignment on USQPlayFabProviderServer");
static_assert(sizeof(USQPlayFabProviderServer) == 0x0001C0, "Wrong size on USQPlayFabProviderServer");

// Class Squad.SQVehicleMovementComponentInterface
// 0x0000 (0x0028 - 0x0028)
class ISQVehicleMovementComponentInterface final : public IInterface
{
public:
	void SetAllSteeringInputs(float Input);
	void SetAllThrottleInputs(float Input, float MaxThrottle, bool bEngineActive);
	void SetEngineBoostTorqueMultiplier(float InEngineBoostTorqueMultiplier);
	void SetRawSteeringInput(float RawInput);
	void SetRawThrottleInput(float RawInput);
	void SetShouldSimulate(bool InbShouldSimulate);
	void SetSteeringInput(float Input);
	void SetThrottleInput(float Input);

	float GetBrakeInput() const;
	float GetHandbrakeInput() const;
	float GetMaxSpringForce() const;
	float GetRawSteeringInput() const;
	float GetRawThrottleInput() const;
	bool GetShouldSimulate() const;
	float GetSteeringInput() const;
	float GetThrottleInput() const;
	float GetTrueEngineMaxRotationSpeed() const;
	float GetTrueEngineRotationSpeed() const;
	float GetTrueForwardSpeed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleMovementComponentInterface">();
	}
	static class ISQVehicleMovementComponentInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISQVehicleMovementComponentInterface>();
	}
};
static_assert(alignof(ISQVehicleMovementComponentInterface) == 0x000008, "Wrong alignment on ISQVehicleMovementComponentInterface");
static_assert(sizeof(ISQVehicleMovementComponentInterface) == 0x000028, "Wrong size on ISQVehicleMovementComponentInterface");

// Class Squad.SQMovementModeDataAsset
// 0x0088 (0x00B8 - 0x0030)
class USQMovementModeDataAsset final : public UDataAsset
{
public:
	bool                                          bIsHoming;                                         // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12FC[0x3];                                     // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinSteeringSpeed;                                  // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSteeringSpeed;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProjectileCorrectionDistance;                      // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxProjDistanceForCorrectionDistanceNegation;      // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12FD[0x4];                                     // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           ProjectileCorrectionOffsetByDistance;              // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftRightRadius;                                   // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpDownRadius;                                      // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            LeftRightRadiusDistanceCurve;                      // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            UpDownRadiusDistanceCurve;                         // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftRightPeriod;                                   // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpDownPeriod;                                      // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            LeftRightPeriodDistanceCurve;                      // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            UpDownPeriodDistanceCurve;                         // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyJitter;                                      // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12FE[0x3];                                     // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         JitterRadius1;                                     // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JitterPeriod1;                                     // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12FF[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            JitterRadiusDistanceCurve1;                        // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            JitterPeriodDistanceCurve1;                        // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JitterRadius2;                                     // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JitterPeriod2;                                     // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            JitterRadiusDistanceCurve2;                        // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            JitterPeriodDistanceCurve2;                        // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMovementModeDataAsset">();
	}
	static class USQMovementModeDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMovementModeDataAsset>();
	}
};
static_assert(alignof(USQMovementModeDataAsset) == 0x000008, "Wrong alignment on USQMovementModeDataAsset");
static_assert(sizeof(USQMovementModeDataAsset) == 0x0000B8, "Wrong size on USQMovementModeDataAsset");
static_assert(offsetof(USQMovementModeDataAsset, bIsHoming) == 0x000030, "Member 'USQMovementModeDataAsset::bIsHoming' has a wrong offset!");
static_assert(offsetof(USQMovementModeDataAsset, MinSteeringSpeed) == 0x000034, "Member 'USQMovementModeDataAsset::MinSteeringSpeed' has a wrong offset!");
static_assert(offsetof(USQMovementModeDataAsset, MaxSteeringSpeed) == 0x000038, "Member 'USQMovementModeDataAsset::MaxSteeringSpeed' has a wrong offset!");
static_assert(offsetof(USQMovementModeDataAsset, ProjectileCorrectionDistance) == 0x00003C, "Member 'USQMovementModeDataAsset::ProjectileCorrectionDistance' has a wrong offset!");
static_assert(offsetof(USQMovementModeDataAsset, MaxProjDistanceForCorrectionDistanceNegation) == 0x000040, "Member 'USQMovementModeDataAsset::MaxProjDistanceForCorrectionDistanceNegation' has a wrong offset!");
static_assert(offsetof(USQMovementModeDataAsset, ProjectileCorrectionOffsetByDistance) == 0x000048, "Member 'USQMovementModeDataAsset::ProjectileCorrectionOffsetByDistance' has a wrong offset!");
static_assert(offsetof(USQMovementModeDataAsset, LeftRightRadius) == 0x000050, "Member 'USQMovementModeDataAsset::LeftRightRadius' has a wrong offset!");
static_assert(offsetof(USQMovementModeDataAsset, UpDownRadius) == 0x000054, "Member 'USQMovementModeDataAsset::UpDownRadius' has a wrong offset!");
static_assert(offsetof(USQMovementModeDataAsset, LeftRightRadiusDistanceCurve) == 0x000058, "Member 'USQMovementModeDataAsset::LeftRightRadiusDistanceCurve' has a wrong offset!");
static_assert(offsetof(USQMovementModeDataAsset, UpDownRadiusDistanceCurve) == 0x000060, "Member 'USQMovementModeDataAsset::UpDownRadiusDistanceCurve' has a wrong offset!");
static_assert(offsetof(USQMovementModeDataAsset, LeftRightPeriod) == 0x000068, "Member 'USQMovementModeDataAsset::LeftRightPeriod' has a wrong offset!");
static_assert(offsetof(USQMovementModeDataAsset, UpDownPeriod) == 0x00006C, "Member 'USQMovementModeDataAsset::UpDownPeriod' has a wrong offset!");
static_assert(offsetof(USQMovementModeDataAsset, LeftRightPeriodDistanceCurve) == 0x000070, "Member 'USQMovementModeDataAsset::LeftRightPeriodDistanceCurve' has a wrong offset!");
static_assert(offsetof(USQMovementModeDataAsset, UpDownPeriodDistanceCurve) == 0x000078, "Member 'USQMovementModeDataAsset::UpDownPeriodDistanceCurve' has a wrong offset!");
static_assert(offsetof(USQMovementModeDataAsset, bApplyJitter) == 0x000080, "Member 'USQMovementModeDataAsset::bApplyJitter' has a wrong offset!");
static_assert(offsetof(USQMovementModeDataAsset, JitterRadius1) == 0x000084, "Member 'USQMovementModeDataAsset::JitterRadius1' has a wrong offset!");
static_assert(offsetof(USQMovementModeDataAsset, JitterPeriod1) == 0x000088, "Member 'USQMovementModeDataAsset::JitterPeriod1' has a wrong offset!");
static_assert(offsetof(USQMovementModeDataAsset, JitterRadiusDistanceCurve1) == 0x000090, "Member 'USQMovementModeDataAsset::JitterRadiusDistanceCurve1' has a wrong offset!");
static_assert(offsetof(USQMovementModeDataAsset, JitterPeriodDistanceCurve1) == 0x000098, "Member 'USQMovementModeDataAsset::JitterPeriodDistanceCurve1' has a wrong offset!");
static_assert(offsetof(USQMovementModeDataAsset, JitterRadius2) == 0x0000A0, "Member 'USQMovementModeDataAsset::JitterRadius2' has a wrong offset!");
static_assert(offsetof(USQMovementModeDataAsset, JitterPeriod2) == 0x0000A4, "Member 'USQMovementModeDataAsset::JitterPeriod2' has a wrong offset!");
static_assert(offsetof(USQMovementModeDataAsset, JitterRadiusDistanceCurve2) == 0x0000A8, "Member 'USQMovementModeDataAsset::JitterRadiusDistanceCurve2' has a wrong offset!");
static_assert(offsetof(USQMovementModeDataAsset, JitterPeriodDistanceCurve2) == 0x0000B0, "Member 'USQMovementModeDataAsset::JitterPeriodDistanceCurve2' has a wrong offset!");

// Class Squad.SQSquadStateDataCameraman
// 0x0000 (0x0180 - 0x0180)
class USQSquadStateDataCameraman : public USQSquadStateDataPawn
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadStateDataCameraman">();
	}
	static class USQSquadStateDataCameraman* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSquadStateDataCameraman>();
	}
};
static_assert(alignof(USQSquadStateDataCameraman) == 0x000008, "Wrong alignment on USQSquadStateDataCameraman");
static_assert(sizeof(USQSquadStateDataCameraman) == 0x000180, "Wrong size on USQSquadStateDataCameraman");

// Class Squad.SQProjectileMovement
// 0x0090 (0x0260 - 0x01D0)
class USQProjectileMovement final : public UProjectileMovementComponent
{
public:
	class ASQProjectile*                          OwnerProjectile;                                   // 0x01D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQMovementModeDataAsset*               PrimaryMovementMode;                               // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQMovementModeDataAsset*               SecondaryMovementMode;                             // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsingPrimaryMovementMode;                         // 0x01E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1300[0x3];                                     // 0x01E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ConstantAcceleration;                              // 0x01EC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstantAccelerationTimeout;                       // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreGravityDuringConstantAcceleration;          // 0x01FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreGravity;                                    // 0x01FD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1301[0x2];                                     // 0x01FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StartSpawnLocation;                                // 0x0200(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsingEngine;                                      // 0x020C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAdditiveJitter;                                // 0x020D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1302[0x2];                                     // 0x020E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         JitterConsumeRate;                                 // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JitterImpulsePeriod;                               // 0x0214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              JitterAmplitudeRange;                              // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            JitterAmplitudeByDistanceCurve;                    // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CurrentJitterVector;                               // 0x0228(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           JitterGenerationTimer;                             // 0x0230(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1303[0x14];                                    // 0x0238(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRandomStream                          RandStreamJitterAngle;                             // 0x024C(0x0008)(ZeroConstructor, Transient, NoDestructor, NativeAccessSpecifierPrivate)
	struct FRandomStream                          RandStreamJitterAmplitude;                         // 0x0254(0x0008)(ZeroConstructor, Transient, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1304[0x4];                                     // 0x025C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ConsumeJitterImpulse(float InDeltaTime);
	void GenerateJitterImpulse();
	void SetUseAdditiveJitter(bool NewValue);

	class USQMovementModeDataAsset* GetCurrentMovementMode() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQProjectileMovement">();
	}
	static class USQProjectileMovement* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQProjectileMovement>();
	}
};
static_assert(alignof(USQProjectileMovement) == 0x000010, "Wrong alignment on USQProjectileMovement");
static_assert(sizeof(USQProjectileMovement) == 0x000260, "Wrong size on USQProjectileMovement");
static_assert(offsetof(USQProjectileMovement, OwnerProjectile) == 0x0001D0, "Member 'USQProjectileMovement::OwnerProjectile' has a wrong offset!");
static_assert(offsetof(USQProjectileMovement, PrimaryMovementMode) == 0x0001D8, "Member 'USQProjectileMovement::PrimaryMovementMode' has a wrong offset!");
static_assert(offsetof(USQProjectileMovement, SecondaryMovementMode) == 0x0001E0, "Member 'USQProjectileMovement::SecondaryMovementMode' has a wrong offset!");
static_assert(offsetof(USQProjectileMovement, bUsingPrimaryMovementMode) == 0x0001E8, "Member 'USQProjectileMovement::bUsingPrimaryMovementMode' has a wrong offset!");
static_assert(offsetof(USQProjectileMovement, ConstantAcceleration) == 0x0001EC, "Member 'USQProjectileMovement::ConstantAcceleration' has a wrong offset!");
static_assert(offsetof(USQProjectileMovement, ConstantAccelerationTimeout) == 0x0001F8, "Member 'USQProjectileMovement::ConstantAccelerationTimeout' has a wrong offset!");
static_assert(offsetof(USQProjectileMovement, bIgnoreGravityDuringConstantAcceleration) == 0x0001FC, "Member 'USQProjectileMovement::bIgnoreGravityDuringConstantAcceleration' has a wrong offset!");
static_assert(offsetof(USQProjectileMovement, bIgnoreGravity) == 0x0001FD, "Member 'USQProjectileMovement::bIgnoreGravity' has a wrong offset!");
static_assert(offsetof(USQProjectileMovement, StartSpawnLocation) == 0x000200, "Member 'USQProjectileMovement::StartSpawnLocation' has a wrong offset!");
static_assert(offsetof(USQProjectileMovement, bUsingEngine) == 0x00020C, "Member 'USQProjectileMovement::bUsingEngine' has a wrong offset!");
static_assert(offsetof(USQProjectileMovement, bUseAdditiveJitter) == 0x00020D, "Member 'USQProjectileMovement::bUseAdditiveJitter' has a wrong offset!");
static_assert(offsetof(USQProjectileMovement, JitterConsumeRate) == 0x000210, "Member 'USQProjectileMovement::JitterConsumeRate' has a wrong offset!");
static_assert(offsetof(USQProjectileMovement, JitterImpulsePeriod) == 0x000214, "Member 'USQProjectileMovement::JitterImpulsePeriod' has a wrong offset!");
static_assert(offsetof(USQProjectileMovement, JitterAmplitudeRange) == 0x000218, "Member 'USQProjectileMovement::JitterAmplitudeRange' has a wrong offset!");
static_assert(offsetof(USQProjectileMovement, JitterAmplitudeByDistanceCurve) == 0x000220, "Member 'USQProjectileMovement::JitterAmplitudeByDistanceCurve' has a wrong offset!");
static_assert(offsetof(USQProjectileMovement, CurrentJitterVector) == 0x000228, "Member 'USQProjectileMovement::CurrentJitterVector' has a wrong offset!");
static_assert(offsetof(USQProjectileMovement, JitterGenerationTimer) == 0x000230, "Member 'USQProjectileMovement::JitterGenerationTimer' has a wrong offset!");
static_assert(offsetof(USQProjectileMovement, RandStreamJitterAngle) == 0x00024C, "Member 'USQProjectileMovement::RandStreamJitterAngle' has a wrong offset!");
static_assert(offsetof(USQProjectileMovement, RandStreamJitterAmplitude) == 0x000254, "Member 'USQProjectileMovement::RandStreamJitterAmplitude' has a wrong offset!");

// Class Squad.SQVehicleSmokeComponent
// 0x0048 (0x00F8 - 0x00B0)
class USQVehicleSmokeComponent final : public UActorComponent
{
public:
	class ASQProjectile*                          OwningProjectile;                                  // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSpheres;                                        // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleSpan;                                         // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThrowDistance;                                     // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereBlockerLifetime;                             // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnDelay;                                        // 0x00CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Forward;                                           // 0x00D0(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1305[0x1C];                                    // 0x00DC(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SpawnSmokeVolumes();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleSmokeComponent">();
	}
	static class USQVehicleSmokeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleSmokeComponent>();
	}
};
static_assert(alignof(USQVehicleSmokeComponent) == 0x000008, "Wrong alignment on USQVehicleSmokeComponent");
static_assert(sizeof(USQVehicleSmokeComponent) == 0x0000F8, "Wrong size on USQVehicleSmokeComponent");
static_assert(offsetof(USQVehicleSmokeComponent, OwningProjectile) == 0x0000B0, "Member 'USQVehicleSmokeComponent::OwningProjectile' has a wrong offset!");
static_assert(offsetof(USQVehicleSmokeComponent, NumSpheres) == 0x0000B8, "Member 'USQVehicleSmokeComponent::NumSpheres' has a wrong offset!");
static_assert(offsetof(USQVehicleSmokeComponent, SphereRadius) == 0x0000BC, "Member 'USQVehicleSmokeComponent::SphereRadius' has a wrong offset!");
static_assert(offsetof(USQVehicleSmokeComponent, AngleSpan) == 0x0000C0, "Member 'USQVehicleSmokeComponent::AngleSpan' has a wrong offset!");
static_assert(offsetof(USQVehicleSmokeComponent, ThrowDistance) == 0x0000C4, "Member 'USQVehicleSmokeComponent::ThrowDistance' has a wrong offset!");
static_assert(offsetof(USQVehicleSmokeComponent, SphereBlockerLifetime) == 0x0000C8, "Member 'USQVehicleSmokeComponent::SphereBlockerLifetime' has a wrong offset!");
static_assert(offsetof(USQVehicleSmokeComponent, SpawnDelay) == 0x0000CC, "Member 'USQVehicleSmokeComponent::SpawnDelay' has a wrong offset!");
static_assert(offsetof(USQVehicleSmokeComponent, Forward) == 0x0000D0, "Member 'USQVehicleSmokeComponent::Forward' has a wrong offset!");

// Class Squad.SQProjectileRootComponent
// 0x0000 (0x0470 - 0x0470)
class USQProjectileRootComponent final : public USphereComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQProjectileRootComponent">();
	}
	static class USQProjectileRootComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQProjectileRootComponent>();
	}
};
static_assert(alignof(USQProjectileRootComponent) == 0x000010, "Wrong alignment on USQProjectileRootComponent");
static_assert(sizeof(USQProjectileRootComponent) == 0x000470, "Wrong size on USQProjectileRootComponent");

// Class Squad.SQSquad
// 0x04A0 (0x06C8 - 0x0228)
class ASQSquad : public AInfo
{
public:
	TArray<class ASQMapMarker*>                   LatestSpotMarkers;                                 // 0x0228(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class ASQMapMarker*>                   LatestActionMarkers;                               // 0x0238(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class ASQMapMarker*>                   LatestPOIMarkers;                                  // 0x0248(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class ASQMapMarker*>                   LatestFireteamMarkers;                             // 0x0258(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class ASQMapMarker*>                   LatestRequestMarkers;                              // 0x0268(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	class ASQTeam*                                Team;                                              // 0x0278(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQSquadState>              SquadStateClass;                                   // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQSquadStatePrivateToTeam> TeamPrivateSquadStateClass;                        // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQSquadRallyPoint>         SquadRallyPointClass;                              // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQSquadState*                          SquadState;                                        // 0x0298(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQSquadStatePrivateToTeam*             TeamPrivateSquadState;                             // 0x02A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerController*                    Leader;                                            // 0x02A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RejoinSquadDelayAfterKick;                         // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1306[0x4];                                     // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQSquadRallyPoint*                     Rallypoint;                                        // 0x02B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RpMembersToPlaceRadius;                            // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RpEnemiesNearCheckRadius;                          // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RpNeededMembersToPlace;                            // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RpNonSLMemberPunishment;                           // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   RpMembersErrorMessage;                             // 0x02D0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   RpMembersNonSlErrorMessage;                        // 0x02E8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   RpTimerErrorMessage;                               // 0x0300(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   RpEnemiesNearErrorMessage;                         // 0x0318(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   PlayerJoinedMessage;                               // 0x0330(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   PlayerLeftMessage;                                 // 0x0348(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   LeaderChangedMessage;                              // 0x0360(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   RpLeaderChangedTimeMessage;                        // 0x0378(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         RpLastPlacementTime;                               // 0x0390(0x0004)(Edit, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RpTimeToReset;                                     // 0x0394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RpEnemiesNearbyTimeSubtract;                       // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RpLeaderChangedResetTime;                          // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRpUsesLeaderChangeResetTime;                      // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RpUsesResetTimer;                                  // 0x03A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1307[0x2];                                     // 0x03A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ClaimingGracePeriod;                               // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClaimingTotalNumMembersNeededTogether;             // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClaimingMembersTogetherRadius;                     // 0x03AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClaimingNumMembersInSquadForOne;                   // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClaimingNumMembersInSquadForTwo;                   // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClaimingNumMembersInSquadForThree;                 // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClaimingNumMembersInSquadForFour;                  // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClaimingTimeToExpire;                              // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfMembersWithVehicleClaimToMakeSquadPartyToClaim; // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USQVehicleClaim*>                VehicleClaims;                                     // 0x03C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	class FText                                   ActiveVehicleClaimDroppedNearMainBaseMessage;      // 0x03D8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ActiveVehicleClaimDroppedNearFireBaseMessage;      // 0x03F0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ActiveVehicleClaimDroppedOnBattlefieldMessage;     // 0x0408(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ActiveVehicleClaimDestroyedMessage;                // 0x0420(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ActiveVehicleClaimPickedUpMessage;                 // 0x0438(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   NeedLeaderRoleToClaimVehicleMessage;               // 0x0450(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   OverVehicleClaimingLimitMessage;                   // 0x0468(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   OverVehicleClaimingLimitActiveUseDetailsMessage;   // 0x0480(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   OverVehicleClaimingLimitDestroyedDetailsMessage;   // 0x0498(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   OverVehicleClaimingLimitLeftDetailsMessage;        // 0x04B0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   OverVehicleClaimingLimitDestroyedOrLeftDetailsMessage; // 0x04C8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   OverVehicleClaimingLimitDestroyedOrLeftTimerMessage; // 0x04E0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   NotEnoughMembersForClaimingSingleVehicleMessage;   // 0x04F8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   NotEnoughMembersNearToClaimVehicleMessage;         // 0x0510(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   VehicleClaimSuccessMessage;                        // 0x0528(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ClaimGracePeriodFailMessage;                       // 0x0540(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   UnableToReleaseOlderVehicleClaimMessage;           // 0x0558(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   AnotherSquadClaimedOurVehicleMessage;              // 0x0570(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   UnableToApproveVehicleClaimMessage;                // 0x0588(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   KickedFromSquadMessage;                            // 0x05A0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   LeftSquadMessage;                                  // 0x05B8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ForceRecruitKitMessage;                            // 0x05D0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FSQFireTeam>                    FireTeams;                                         // 0x05E8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class USQConfig*                              SquadConfig;                                       // 0x05F8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQVehicle*                             LastVehicleMemberFailedToEnter;                    // 0x0600(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1308[0x50];                                    // 0x0608(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnPlayerJoinSquad;                                 // 0x0658(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayerPartSquad;                                 // 0x0668(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayerBecomeSquadLeader;                         // 0x0678(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFireteamDisbanded;                               // 0x0688(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFireteamUpdated;                                 // 0x0698(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1309[0x20];                                    // 0x06A8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GiveSquadLeader(class ASQPlayerState* PlayerState);
	void OnFireteamChangedEvent__DelegateSignature(class ASQSquad* Squad, int32 FireTeamId);
	void OnPlayerJoinPartSquadEvent__DelegateSignature(class ASQSquad* Squad, class ASQPlayerController* Player);
	void TryApproveVehicleClaim();
	bool TryClaimVehicle(class ASQVehicle* Vehicle);

	TArray<class USQVehicleClaim*> GetBlockingDirectVehicleClaims() const;
	TArray<class USQVehicleClaim*> GetBlockingPartyVehicleClaims() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquad">();
	}
	static class ASQSquad* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQSquad>();
	}
};
static_assert(alignof(ASQSquad) == 0x000008, "Wrong alignment on ASQSquad");
static_assert(sizeof(ASQSquad) == 0x0006C8, "Wrong size on ASQSquad");
static_assert(offsetof(ASQSquad, LatestSpotMarkers) == 0x000228, "Member 'ASQSquad::LatestSpotMarkers' has a wrong offset!");
static_assert(offsetof(ASQSquad, LatestActionMarkers) == 0x000238, "Member 'ASQSquad::LatestActionMarkers' has a wrong offset!");
static_assert(offsetof(ASQSquad, LatestPOIMarkers) == 0x000248, "Member 'ASQSquad::LatestPOIMarkers' has a wrong offset!");
static_assert(offsetof(ASQSquad, LatestFireteamMarkers) == 0x000258, "Member 'ASQSquad::LatestFireteamMarkers' has a wrong offset!");
static_assert(offsetof(ASQSquad, LatestRequestMarkers) == 0x000268, "Member 'ASQSquad::LatestRequestMarkers' has a wrong offset!");
static_assert(offsetof(ASQSquad, Team) == 0x000278, "Member 'ASQSquad::Team' has a wrong offset!");
static_assert(offsetof(ASQSquad, SquadStateClass) == 0x000280, "Member 'ASQSquad::SquadStateClass' has a wrong offset!");
static_assert(offsetof(ASQSquad, TeamPrivateSquadStateClass) == 0x000288, "Member 'ASQSquad::TeamPrivateSquadStateClass' has a wrong offset!");
static_assert(offsetof(ASQSquad, SquadRallyPointClass) == 0x000290, "Member 'ASQSquad::SquadRallyPointClass' has a wrong offset!");
static_assert(offsetof(ASQSquad, SquadState) == 0x000298, "Member 'ASQSquad::SquadState' has a wrong offset!");
static_assert(offsetof(ASQSquad, TeamPrivateSquadState) == 0x0002A0, "Member 'ASQSquad::TeamPrivateSquadState' has a wrong offset!");
static_assert(offsetof(ASQSquad, Leader) == 0x0002A8, "Member 'ASQSquad::Leader' has a wrong offset!");
static_assert(offsetof(ASQSquad, RejoinSquadDelayAfterKick) == 0x0002B0, "Member 'ASQSquad::RejoinSquadDelayAfterKick' has a wrong offset!");
static_assert(offsetof(ASQSquad, Rallypoint) == 0x0002B8, "Member 'ASQSquad::Rallypoint' has a wrong offset!");
static_assert(offsetof(ASQSquad, RpMembersToPlaceRadius) == 0x0002C0, "Member 'ASQSquad::RpMembersToPlaceRadius' has a wrong offset!");
static_assert(offsetof(ASQSquad, RpEnemiesNearCheckRadius) == 0x0002C4, "Member 'ASQSquad::RpEnemiesNearCheckRadius' has a wrong offset!");
static_assert(offsetof(ASQSquad, RpNeededMembersToPlace) == 0x0002C8, "Member 'ASQSquad::RpNeededMembersToPlace' has a wrong offset!");
static_assert(offsetof(ASQSquad, RpNonSLMemberPunishment) == 0x0002CC, "Member 'ASQSquad::RpNonSLMemberPunishment' has a wrong offset!");
static_assert(offsetof(ASQSquad, RpMembersErrorMessage) == 0x0002D0, "Member 'ASQSquad::RpMembersErrorMessage' has a wrong offset!");
static_assert(offsetof(ASQSquad, RpMembersNonSlErrorMessage) == 0x0002E8, "Member 'ASQSquad::RpMembersNonSlErrorMessage' has a wrong offset!");
static_assert(offsetof(ASQSquad, RpTimerErrorMessage) == 0x000300, "Member 'ASQSquad::RpTimerErrorMessage' has a wrong offset!");
static_assert(offsetof(ASQSquad, RpEnemiesNearErrorMessage) == 0x000318, "Member 'ASQSquad::RpEnemiesNearErrorMessage' has a wrong offset!");
static_assert(offsetof(ASQSquad, PlayerJoinedMessage) == 0x000330, "Member 'ASQSquad::PlayerJoinedMessage' has a wrong offset!");
static_assert(offsetof(ASQSquad, PlayerLeftMessage) == 0x000348, "Member 'ASQSquad::PlayerLeftMessage' has a wrong offset!");
static_assert(offsetof(ASQSquad, LeaderChangedMessage) == 0x000360, "Member 'ASQSquad::LeaderChangedMessage' has a wrong offset!");
static_assert(offsetof(ASQSquad, RpLeaderChangedTimeMessage) == 0x000378, "Member 'ASQSquad::RpLeaderChangedTimeMessage' has a wrong offset!");
static_assert(offsetof(ASQSquad, RpLastPlacementTime) == 0x000390, "Member 'ASQSquad::RpLastPlacementTime' has a wrong offset!");
static_assert(offsetof(ASQSquad, RpTimeToReset) == 0x000394, "Member 'ASQSquad::RpTimeToReset' has a wrong offset!");
static_assert(offsetof(ASQSquad, RpEnemiesNearbyTimeSubtract) == 0x000398, "Member 'ASQSquad::RpEnemiesNearbyTimeSubtract' has a wrong offset!");
static_assert(offsetof(ASQSquad, RpLeaderChangedResetTime) == 0x00039C, "Member 'ASQSquad::RpLeaderChangedResetTime' has a wrong offset!");
static_assert(offsetof(ASQSquad, bRpUsesLeaderChangeResetTime) == 0x0003A0, "Member 'ASQSquad::bRpUsesLeaderChangeResetTime' has a wrong offset!");
static_assert(offsetof(ASQSquad, RpUsesResetTimer) == 0x0003A1, "Member 'ASQSquad::RpUsesResetTimer' has a wrong offset!");
static_assert(offsetof(ASQSquad, ClaimingGracePeriod) == 0x0003A4, "Member 'ASQSquad::ClaimingGracePeriod' has a wrong offset!");
static_assert(offsetof(ASQSquad, ClaimingTotalNumMembersNeededTogether) == 0x0003A8, "Member 'ASQSquad::ClaimingTotalNumMembersNeededTogether' has a wrong offset!");
static_assert(offsetof(ASQSquad, ClaimingMembersTogetherRadius) == 0x0003AC, "Member 'ASQSquad::ClaimingMembersTogetherRadius' has a wrong offset!");
static_assert(offsetof(ASQSquad, ClaimingNumMembersInSquadForOne) == 0x0003B0, "Member 'ASQSquad::ClaimingNumMembersInSquadForOne' has a wrong offset!");
static_assert(offsetof(ASQSquad, ClaimingNumMembersInSquadForTwo) == 0x0003B4, "Member 'ASQSquad::ClaimingNumMembersInSquadForTwo' has a wrong offset!");
static_assert(offsetof(ASQSquad, ClaimingNumMembersInSquadForThree) == 0x0003B8, "Member 'ASQSquad::ClaimingNumMembersInSquadForThree' has a wrong offset!");
static_assert(offsetof(ASQSquad, ClaimingNumMembersInSquadForFour) == 0x0003BC, "Member 'ASQSquad::ClaimingNumMembersInSquadForFour' has a wrong offset!");
static_assert(offsetof(ASQSquad, ClaimingTimeToExpire) == 0x0003C0, "Member 'ASQSquad::ClaimingTimeToExpire' has a wrong offset!");
static_assert(offsetof(ASQSquad, NumberOfMembersWithVehicleClaimToMakeSquadPartyToClaim) == 0x0003C4, "Member 'ASQSquad::NumberOfMembersWithVehicleClaimToMakeSquadPartyToClaim' has a wrong offset!");
static_assert(offsetof(ASQSquad, VehicleClaims) == 0x0003C8, "Member 'ASQSquad::VehicleClaims' has a wrong offset!");
static_assert(offsetof(ASQSquad, ActiveVehicleClaimDroppedNearMainBaseMessage) == 0x0003D8, "Member 'ASQSquad::ActiveVehicleClaimDroppedNearMainBaseMessage' has a wrong offset!");
static_assert(offsetof(ASQSquad, ActiveVehicleClaimDroppedNearFireBaseMessage) == 0x0003F0, "Member 'ASQSquad::ActiveVehicleClaimDroppedNearFireBaseMessage' has a wrong offset!");
static_assert(offsetof(ASQSquad, ActiveVehicleClaimDroppedOnBattlefieldMessage) == 0x000408, "Member 'ASQSquad::ActiveVehicleClaimDroppedOnBattlefieldMessage' has a wrong offset!");
static_assert(offsetof(ASQSquad, ActiveVehicleClaimDestroyedMessage) == 0x000420, "Member 'ASQSquad::ActiveVehicleClaimDestroyedMessage' has a wrong offset!");
static_assert(offsetof(ASQSquad, ActiveVehicleClaimPickedUpMessage) == 0x000438, "Member 'ASQSquad::ActiveVehicleClaimPickedUpMessage' has a wrong offset!");
static_assert(offsetof(ASQSquad, NeedLeaderRoleToClaimVehicleMessage) == 0x000450, "Member 'ASQSquad::NeedLeaderRoleToClaimVehicleMessage' has a wrong offset!");
static_assert(offsetof(ASQSquad, OverVehicleClaimingLimitMessage) == 0x000468, "Member 'ASQSquad::OverVehicleClaimingLimitMessage' has a wrong offset!");
static_assert(offsetof(ASQSquad, OverVehicleClaimingLimitActiveUseDetailsMessage) == 0x000480, "Member 'ASQSquad::OverVehicleClaimingLimitActiveUseDetailsMessage' has a wrong offset!");
static_assert(offsetof(ASQSquad, OverVehicleClaimingLimitDestroyedDetailsMessage) == 0x000498, "Member 'ASQSquad::OverVehicleClaimingLimitDestroyedDetailsMessage' has a wrong offset!");
static_assert(offsetof(ASQSquad, OverVehicleClaimingLimitLeftDetailsMessage) == 0x0004B0, "Member 'ASQSquad::OverVehicleClaimingLimitLeftDetailsMessage' has a wrong offset!");
static_assert(offsetof(ASQSquad, OverVehicleClaimingLimitDestroyedOrLeftDetailsMessage) == 0x0004C8, "Member 'ASQSquad::OverVehicleClaimingLimitDestroyedOrLeftDetailsMessage' has a wrong offset!");
static_assert(offsetof(ASQSquad, OverVehicleClaimingLimitDestroyedOrLeftTimerMessage) == 0x0004E0, "Member 'ASQSquad::OverVehicleClaimingLimitDestroyedOrLeftTimerMessage' has a wrong offset!");
static_assert(offsetof(ASQSquad, NotEnoughMembersForClaimingSingleVehicleMessage) == 0x0004F8, "Member 'ASQSquad::NotEnoughMembersForClaimingSingleVehicleMessage' has a wrong offset!");
static_assert(offsetof(ASQSquad, NotEnoughMembersNearToClaimVehicleMessage) == 0x000510, "Member 'ASQSquad::NotEnoughMembersNearToClaimVehicleMessage' has a wrong offset!");
static_assert(offsetof(ASQSquad, VehicleClaimSuccessMessage) == 0x000528, "Member 'ASQSquad::VehicleClaimSuccessMessage' has a wrong offset!");
static_assert(offsetof(ASQSquad, ClaimGracePeriodFailMessage) == 0x000540, "Member 'ASQSquad::ClaimGracePeriodFailMessage' has a wrong offset!");
static_assert(offsetof(ASQSquad, UnableToReleaseOlderVehicleClaimMessage) == 0x000558, "Member 'ASQSquad::UnableToReleaseOlderVehicleClaimMessage' has a wrong offset!");
static_assert(offsetof(ASQSquad, AnotherSquadClaimedOurVehicleMessage) == 0x000570, "Member 'ASQSquad::AnotherSquadClaimedOurVehicleMessage' has a wrong offset!");
static_assert(offsetof(ASQSquad, UnableToApproveVehicleClaimMessage) == 0x000588, "Member 'ASQSquad::UnableToApproveVehicleClaimMessage' has a wrong offset!");
static_assert(offsetof(ASQSquad, KickedFromSquadMessage) == 0x0005A0, "Member 'ASQSquad::KickedFromSquadMessage' has a wrong offset!");
static_assert(offsetof(ASQSquad, LeftSquadMessage) == 0x0005B8, "Member 'ASQSquad::LeftSquadMessage' has a wrong offset!");
static_assert(offsetof(ASQSquad, ForceRecruitKitMessage) == 0x0005D0, "Member 'ASQSquad::ForceRecruitKitMessage' has a wrong offset!");
static_assert(offsetof(ASQSquad, FireTeams) == 0x0005E8, "Member 'ASQSquad::FireTeams' has a wrong offset!");
static_assert(offsetof(ASQSquad, SquadConfig) == 0x0005F8, "Member 'ASQSquad::SquadConfig' has a wrong offset!");
static_assert(offsetof(ASQSquad, LastVehicleMemberFailedToEnter) == 0x000600, "Member 'ASQSquad::LastVehicleMemberFailedToEnter' has a wrong offset!");
static_assert(offsetof(ASQSquad, OnPlayerJoinSquad) == 0x000658, "Member 'ASQSquad::OnPlayerJoinSquad' has a wrong offset!");
static_assert(offsetof(ASQSquad, OnPlayerPartSquad) == 0x000668, "Member 'ASQSquad::OnPlayerPartSquad' has a wrong offset!");
static_assert(offsetof(ASQSquad, OnPlayerBecomeSquadLeader) == 0x000678, "Member 'ASQSquad::OnPlayerBecomeSquadLeader' has a wrong offset!");
static_assert(offsetof(ASQSquad, OnFireteamDisbanded) == 0x000688, "Member 'ASQSquad::OnFireteamDisbanded' has a wrong offset!");
static_assert(offsetof(ASQSquad, OnFireteamUpdated) == 0x000698, "Member 'ASQSquad::OnFireteamUpdated' has a wrong offset!");

// Class Squad.SQProtectionZone
// 0x0158 (0x0380 - 0x0228)
class ASQProtectionZone : public AActor
{
public:
	uint8                                         Pad_130D[0x10];                                    // 0x0228(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UBoxComponent*                          DummyPresetCollisionCPP;                           // 0x0238(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         KillHostileInSeconds;                              // 0x0240(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_130E[0x2C];                                    // 0x0244(0x002C)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         TeamId;                                            // 0x0270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130F[0x7];                                     // 0x0271(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DeployableDestroyedText;                           // 0x0278(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   ProjectileDestroyedText;                           // 0x0290(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   AccessDeniedText;                                  // 0x02A8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   EnemyProtectionZoneText;                           // 0x02C0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<ESQBuffTypes, float>                     BuffsToApplyOnFriendlies;                          // 0x02D8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<ESQBuffTypes, float>                     BuffsToApplyOnEnemies;                             // 0x0328(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bShouldDestroyProjectiles;                         // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldDestroyDeployables;                         // 0x0379(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldPushEnemiesOff;                             // 0x037A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsProtectionZone;                                 // 0x037B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1310[0x4];                                     // 0x037C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CheckOverlap();
	void OnCompBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnCompExit(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQProtectionZone">();
	}
	static class ASQProtectionZone* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQProtectionZone>();
	}
};
static_assert(alignof(ASQProtectionZone) == 0x000008, "Wrong alignment on ASQProtectionZone");
static_assert(sizeof(ASQProtectionZone) == 0x000380, "Wrong size on ASQProtectionZone");
static_assert(offsetof(ASQProtectionZone, DummyPresetCollisionCPP) == 0x000238, "Member 'ASQProtectionZone::DummyPresetCollisionCPP' has a wrong offset!");
static_assert(offsetof(ASQProtectionZone, KillHostileInSeconds) == 0x000240, "Member 'ASQProtectionZone::KillHostileInSeconds' has a wrong offset!");
static_assert(offsetof(ASQProtectionZone, TeamId) == 0x000270, "Member 'ASQProtectionZone::TeamId' has a wrong offset!");
static_assert(offsetof(ASQProtectionZone, DeployableDestroyedText) == 0x000278, "Member 'ASQProtectionZone::DeployableDestroyedText' has a wrong offset!");
static_assert(offsetof(ASQProtectionZone, ProjectileDestroyedText) == 0x000290, "Member 'ASQProtectionZone::ProjectileDestroyedText' has a wrong offset!");
static_assert(offsetof(ASQProtectionZone, AccessDeniedText) == 0x0002A8, "Member 'ASQProtectionZone::AccessDeniedText' has a wrong offset!");
static_assert(offsetof(ASQProtectionZone, EnemyProtectionZoneText) == 0x0002C0, "Member 'ASQProtectionZone::EnemyProtectionZoneText' has a wrong offset!");
static_assert(offsetof(ASQProtectionZone, BuffsToApplyOnFriendlies) == 0x0002D8, "Member 'ASQProtectionZone::BuffsToApplyOnFriendlies' has a wrong offset!");
static_assert(offsetof(ASQProtectionZone, BuffsToApplyOnEnemies) == 0x000328, "Member 'ASQProtectionZone::BuffsToApplyOnEnemies' has a wrong offset!");
static_assert(offsetof(ASQProtectionZone, bShouldDestroyProjectiles) == 0x000378, "Member 'ASQProtectionZone::bShouldDestroyProjectiles' has a wrong offset!");
static_assert(offsetof(ASQProtectionZone, bShouldDestroyDeployables) == 0x000379, "Member 'ASQProtectionZone::bShouldDestroyDeployables' has a wrong offset!");
static_assert(offsetof(ASQProtectionZone, bShouldPushEnemiesOff) == 0x00037A, "Member 'ASQProtectionZone::bShouldPushEnemiesOff' has a wrong offset!");
static_assert(offsetof(ASQProtectionZone, bIsProtectionZone) == 0x00037B, "Member 'ASQProtectionZone::bIsProtectionZone' has a wrong offset!");

// Class Squad.SQQuickPlaySearch
// 0x0080 (0x00A8 - 0x0028)
class USQQuickPlaySearch : public UObject
{
public:
	int32                                         MaxPingBucket;                                     // 0x0028(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayGameModesNum;                               // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinResultsSimpleSearch;                            // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinResultsMultiChoiceSearch;                       // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSearchCompleted;                                 // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FBlueprintSessionResult>        ValidResults;                                      // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class USQFindSessionsCallbackProxy*           CurrentCallback;                                   // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USQServerTagManager*                    TagManager;                                        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USQSessionInfo*                         ExcludeServer;                                     // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1313[0x8];                                     // 0x0070(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USQSessionInfo*                         CachedCheckedSession;                              // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USQGameUserSettings*                    UsedSettingsPtr;                                   // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTimerHandle                           RetryHandle;                                       // 0x0088(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FBlueprintSessionResult>        BackupResults;                                     // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1314[0x8];                                     // 0x00A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CancelSearch();
	class USQGameInstance* GetSquadGameInstance();
	bool IsSessionFilteredOut(const struct FBlueprintSessionResult& Session);
	void OnFindSessionsCancelled();
	void OnFindSessionsCompleted(const TArray<struct FBlueprintSessionResult>& Results, bool bSuccess);
	void OnFindSessionsNewSessionUpdate(const struct FBlueprintSessionResult& SessionResult);
	class UPlayFabJsonObject* PreferencesToJson();
	void RunSearch();
	void SetShowEmptyServers(bool bNewValue);
	void SetShowFullServers(bool bNewValue);
	void SetShowModdedServers(bool bNewValue);
	bool SimplifyFilters();
	void SortResults(const TArray<class FString>& Favorites);
	bool UpdateTags(const TArray<class FName>& Tags);

	bool IsSearching() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQQuickPlaySearch">();
	}
	static class USQQuickPlaySearch* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQQuickPlaySearch>();
	}
};
static_assert(alignof(USQQuickPlaySearch) == 0x000008, "Wrong alignment on USQQuickPlaySearch");
static_assert(sizeof(USQQuickPlaySearch) == 0x0000A8, "Wrong size on USQQuickPlaySearch");
static_assert(offsetof(USQQuickPlaySearch, MaxPingBucket) == 0x000028, "Member 'USQQuickPlaySearch::MaxPingBucket' has a wrong offset!");
static_assert(offsetof(USQQuickPlaySearch, DisplayGameModesNum) == 0x00002C, "Member 'USQQuickPlaySearch::DisplayGameModesNum' has a wrong offset!");
static_assert(offsetof(USQQuickPlaySearch, MinResultsSimpleSearch) == 0x000030, "Member 'USQQuickPlaySearch::MinResultsSimpleSearch' has a wrong offset!");
static_assert(offsetof(USQQuickPlaySearch, MinResultsMultiChoiceSearch) == 0x000034, "Member 'USQQuickPlaySearch::MinResultsMultiChoiceSearch' has a wrong offset!");
static_assert(offsetof(USQQuickPlaySearch, OnSearchCompleted) == 0x000038, "Member 'USQQuickPlaySearch::OnSearchCompleted' has a wrong offset!");
static_assert(offsetof(USQQuickPlaySearch, ValidResults) == 0x000048, "Member 'USQQuickPlaySearch::ValidResults' has a wrong offset!");
static_assert(offsetof(USQQuickPlaySearch, CurrentCallback) == 0x000058, "Member 'USQQuickPlaySearch::CurrentCallback' has a wrong offset!");
static_assert(offsetof(USQQuickPlaySearch, TagManager) == 0x000060, "Member 'USQQuickPlaySearch::TagManager' has a wrong offset!");
static_assert(offsetof(USQQuickPlaySearch, ExcludeServer) == 0x000068, "Member 'USQQuickPlaySearch::ExcludeServer' has a wrong offset!");
static_assert(offsetof(USQQuickPlaySearch, CachedCheckedSession) == 0x000078, "Member 'USQQuickPlaySearch::CachedCheckedSession' has a wrong offset!");
static_assert(offsetof(USQQuickPlaySearch, UsedSettingsPtr) == 0x000080, "Member 'USQQuickPlaySearch::UsedSettingsPtr' has a wrong offset!");
static_assert(offsetof(USQQuickPlaySearch, RetryHandle) == 0x000088, "Member 'USQQuickPlaySearch::RetryHandle' has a wrong offset!");
static_assert(offsetof(USQQuickPlaySearch, BackupResults) == 0x000090, "Member 'USQQuickPlaySearch::BackupResults' has a wrong offset!");

// Class Squad.SQSquadStateDataRepairStation
// 0x0000 (0x0160 - 0x0160)
class USQSquadStateDataRepairStation : public USQSquadStateDataDeployable
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadStateDataRepairStation">();
	}
	static class USQSquadStateDataRepairStation* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSquadStateDataRepairStation>();
	}
};
static_assert(alignof(USQSquadStateDataRepairStation) == 0x000008, "Wrong alignment on USQSquadStateDataRepairStation");
static_assert(sizeof(USQSquadStateDataRepairStation) == 0x000160, "Wrong size on USQSquadStateDataRepairStation");

// Class Squad.SQSquadStateDataHAB
// 0x0008 (0x0168 - 0x0160)
class USQSquadStateDataHAB : public USQSquadStateDataDeployable
{
public:
	uint8                                         bSieged : 1;                                       // 0x0160(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSpawningEnabled : 1;                              // 0x0160(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1318[0x3];                                     // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActivatedTimeStamp;                                // 0x0164(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadStateDataHAB">();
	}
	static class USQSquadStateDataHAB* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSquadStateDataHAB>();
	}
};
static_assert(alignof(USQSquadStateDataHAB) == 0x000008, "Wrong alignment on USQSquadStateDataHAB");
static_assert(sizeof(USQSquadStateDataHAB) == 0x000168, "Wrong size on USQSquadStateDataHAB");
static_assert(offsetof(USQSquadStateDataHAB, ActivatedTimeStamp) == 0x000164, "Member 'USQSquadStateDataHAB::ActivatedTimeStamp' has a wrong offset!");

// Class Squad.SQRadialCenterRoleButton
// 0x0030 (0x0478 - 0x0448)
class USQRadialCenterRoleButton : public USQRadialIconButton
{
public:
	bool                                          bIsUnavailable;                                    // 0x0448(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1319[0x3];                                     // 0x0449(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Cost;                                              // 0x044C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             CostBlock;                                         // 0x0450(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQRoleSettings*                        ReferenceRole;                                     // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class ISQRearmSource>        RearmSource;                                       // 0x0460(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class ASQPlayerController*                    OwnerPlayerController;                             // 0x0470(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRadialCenterRoleButton">();
	}
	static class USQRadialCenterRoleButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRadialCenterRoleButton>();
	}
};
static_assert(alignof(USQRadialCenterRoleButton) == 0x000008, "Wrong alignment on USQRadialCenterRoleButton");
static_assert(sizeof(USQRadialCenterRoleButton) == 0x000478, "Wrong size on USQRadialCenterRoleButton");
static_assert(offsetof(USQRadialCenterRoleButton, bIsUnavailable) == 0x000448, "Member 'USQRadialCenterRoleButton::bIsUnavailable' has a wrong offset!");
static_assert(offsetof(USQRadialCenterRoleButton, Cost) == 0x00044C, "Member 'USQRadialCenterRoleButton::Cost' has a wrong offset!");
static_assert(offsetof(USQRadialCenterRoleButton, CostBlock) == 0x000450, "Member 'USQRadialCenterRoleButton::CostBlock' has a wrong offset!");
static_assert(offsetof(USQRadialCenterRoleButton, ReferenceRole) == 0x000458, "Member 'USQRadialCenterRoleButton::ReferenceRole' has a wrong offset!");
static_assert(offsetof(USQRadialCenterRoleButton, RearmSource) == 0x000460, "Member 'USQRadialCenterRoleButton::RearmSource' has a wrong offset!");
static_assert(offsetof(USQRadialCenterRoleButton, OwnerPlayerController) == 0x000470, "Member 'USQRadialCenterRoleButton::OwnerPlayerController' has a wrong offset!");

// Class Squad.SQStagingTimerText
// 0x0038 (0x0298 - 0x0260)
class USQStagingTimerText : public UUserWidget
{
public:
	int32                                         NearZeroThreshold;                                 // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131A[0x4];                                     // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQTeamPrep*                            TeamPrepRef;                                       // 0x0268(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             TextBlockCPP;                                      // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FText                                   StagingPhaseText;                                  // 0x0278(0x0018)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_131B[0x8];                                     // 0x0290(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnFellBelowThreshold();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQStagingTimerText">();
	}
	static class USQStagingTimerText* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQStagingTimerText>();
	}
};
static_assert(alignof(USQStagingTimerText) == 0x000008, "Wrong alignment on USQStagingTimerText");
static_assert(sizeof(USQStagingTimerText) == 0x000298, "Wrong size on USQStagingTimerText");
static_assert(offsetof(USQStagingTimerText, NearZeroThreshold) == 0x000260, "Member 'USQStagingTimerText::NearZeroThreshold' has a wrong offset!");
static_assert(offsetof(USQStagingTimerText, TeamPrepRef) == 0x000268, "Member 'USQStagingTimerText::TeamPrepRef' has a wrong offset!");
static_assert(offsetof(USQStagingTimerText, TextBlockCPP) == 0x000270, "Member 'USQStagingTimerText::TextBlockCPP' has a wrong offset!");
static_assert(offsetof(USQStagingTimerText, StagingPhaseText) == 0x000278, "Member 'USQStagingTimerText::StagingPhaseText' has a wrong offset!");

// Class Squad.SQRadialIconToggleButton
// 0x0018 (0x0460 - 0x0448)
class USQRadialIconToggleButton : public USQRadialIconButton
{
public:
	bool                                          bToggled;                                          // 0x0448(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131C[0x3];                                     // 0x0449(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           InnerHoverToggledColor;                            // 0x044C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131D[0x4];                                     // 0x045C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnToggleChanged();
	void Toggle();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRadialIconToggleButton">();
	}
	static class USQRadialIconToggleButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRadialIconToggleButton>();
	}
};
static_assert(alignof(USQRadialIconToggleButton) == 0x000008, "Wrong alignment on USQRadialIconToggleButton");
static_assert(sizeof(USQRadialIconToggleButton) == 0x000460, "Wrong size on USQRadialIconToggleButton");
static_assert(offsetof(USQRadialIconToggleButton, bToggled) == 0x000448, "Member 'USQRadialIconToggleButton::bToggled' has a wrong offset!");
static_assert(offsetof(USQRadialIconToggleButton, InnerHoverToggledColor) == 0x00044C, "Member 'USQRadialIconToggleButton::InnerHoverToggledColor' has a wrong offset!");

// Class Squad.SQScoreboardSquad
// 0x00D8 (0x0340 - 0x0268)
class USQScoreboardSquad : public USQUserWidget
{
public:
	class ASQPlayerController*                    SQPC;                                              // 0x0268(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQSquadState*                          SquadState;                                        // 0x0270(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPlayerWidgetPair>              DisplayedPlayers;                                  // 0x0278(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bShowAllStats;                                     // 0x0288(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAccumulativeLifetimeScores;                    // 0x0289(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131E[0x2];                                     // 0x028A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           OwnSquadColor;                                     // 0x028C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FriendlySquadColor;                                // 0x029C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EnemySquadColor;                                   // 0x02AC(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFriendlyScoreboard;                             // 0x02BC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131F[0x3];                                     // 0x02BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USQScoreboardPlayer>        ScoreboardPlayerType;                              // 0x02C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHorizontalBox*                         EndOfRoundHorizontalBox;                           // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGridPanel*                             PlayersGrid;                                       // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpacer*                                NotEndOfRoundSpacer;                               // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             SquadNumberText;                                   // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             SquadNameText;                                     // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             SquadKillsText;                                    // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             SquadIncapsText;                                   // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             SquadDeathsText;                                   // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             SquadRevivesText;                                  // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             SquadHealsText;                                    // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             SquadTeamworkText;                                 // 0x0318(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             SquadObjectiveText;                                // 0x0320(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             SquadScoreText;                                    // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 SquadColorImage;                                   // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 SquadTalkingImage;                                 // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void InitWidget();
	void UpdateState();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQScoreboardSquad">();
	}
	static class USQScoreboardSquad* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQScoreboardSquad>();
	}
};
static_assert(alignof(USQScoreboardSquad) == 0x000008, "Wrong alignment on USQScoreboardSquad");
static_assert(sizeof(USQScoreboardSquad) == 0x000340, "Wrong size on USQScoreboardSquad");
static_assert(offsetof(USQScoreboardSquad, SQPC) == 0x000268, "Member 'USQScoreboardSquad::SQPC' has a wrong offset!");
static_assert(offsetof(USQScoreboardSquad, SquadState) == 0x000270, "Member 'USQScoreboardSquad::SquadState' has a wrong offset!");
static_assert(offsetof(USQScoreboardSquad, DisplayedPlayers) == 0x000278, "Member 'USQScoreboardSquad::DisplayedPlayers' has a wrong offset!");
static_assert(offsetof(USQScoreboardSquad, bShowAllStats) == 0x000288, "Member 'USQScoreboardSquad::bShowAllStats' has a wrong offset!");
static_assert(offsetof(USQScoreboardSquad, bUseAccumulativeLifetimeScores) == 0x000289, "Member 'USQScoreboardSquad::bUseAccumulativeLifetimeScores' has a wrong offset!");
static_assert(offsetof(USQScoreboardSquad, OwnSquadColor) == 0x00028C, "Member 'USQScoreboardSquad::OwnSquadColor' has a wrong offset!");
static_assert(offsetof(USQScoreboardSquad, FriendlySquadColor) == 0x00029C, "Member 'USQScoreboardSquad::FriendlySquadColor' has a wrong offset!");
static_assert(offsetof(USQScoreboardSquad, EnemySquadColor) == 0x0002AC, "Member 'USQScoreboardSquad::EnemySquadColor' has a wrong offset!");
static_assert(offsetof(USQScoreboardSquad, bIsFriendlyScoreboard) == 0x0002BC, "Member 'USQScoreboardSquad::bIsFriendlyScoreboard' has a wrong offset!");
static_assert(offsetof(USQScoreboardSquad, ScoreboardPlayerType) == 0x0002C0, "Member 'USQScoreboardSquad::ScoreboardPlayerType' has a wrong offset!");
static_assert(offsetof(USQScoreboardSquad, EndOfRoundHorizontalBox) == 0x0002C8, "Member 'USQScoreboardSquad::EndOfRoundHorizontalBox' has a wrong offset!");
static_assert(offsetof(USQScoreboardSquad, PlayersGrid) == 0x0002D0, "Member 'USQScoreboardSquad::PlayersGrid' has a wrong offset!");
static_assert(offsetof(USQScoreboardSquad, NotEndOfRoundSpacer) == 0x0002D8, "Member 'USQScoreboardSquad::NotEndOfRoundSpacer' has a wrong offset!");
static_assert(offsetof(USQScoreboardSquad, SquadNumberText) == 0x0002E0, "Member 'USQScoreboardSquad::SquadNumberText' has a wrong offset!");
static_assert(offsetof(USQScoreboardSquad, SquadNameText) == 0x0002E8, "Member 'USQScoreboardSquad::SquadNameText' has a wrong offset!");
static_assert(offsetof(USQScoreboardSquad, SquadKillsText) == 0x0002F0, "Member 'USQScoreboardSquad::SquadKillsText' has a wrong offset!");
static_assert(offsetof(USQScoreboardSquad, SquadIncapsText) == 0x0002F8, "Member 'USQScoreboardSquad::SquadIncapsText' has a wrong offset!");
static_assert(offsetof(USQScoreboardSquad, SquadDeathsText) == 0x000300, "Member 'USQScoreboardSquad::SquadDeathsText' has a wrong offset!");
static_assert(offsetof(USQScoreboardSquad, SquadRevivesText) == 0x000308, "Member 'USQScoreboardSquad::SquadRevivesText' has a wrong offset!");
static_assert(offsetof(USQScoreboardSquad, SquadHealsText) == 0x000310, "Member 'USQScoreboardSquad::SquadHealsText' has a wrong offset!");
static_assert(offsetof(USQScoreboardSquad, SquadTeamworkText) == 0x000318, "Member 'USQScoreboardSquad::SquadTeamworkText' has a wrong offset!");
static_assert(offsetof(USQScoreboardSquad, SquadObjectiveText) == 0x000320, "Member 'USQScoreboardSquad::SquadObjectiveText' has a wrong offset!");
static_assert(offsetof(USQScoreboardSquad, SquadScoreText) == 0x000328, "Member 'USQScoreboardSquad::SquadScoreText' has a wrong offset!");
static_assert(offsetof(USQScoreboardSquad, SquadColorImage) == 0x000330, "Member 'USQScoreboardSquad::SquadColorImage' has a wrong offset!");
static_assert(offsetof(USQScoreboardSquad, SquadTalkingImage) == 0x000338, "Member 'USQScoreboardSquad::SquadTalkingImage' has a wrong offset!");

// Class Squad.SQRandomizer
// 0x0018 (0x0240 - 0x0228)
class ASQRandomizer : public AActor
{
public:
	class USceneComponent*                        Root;                                              // 0x0228(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomSeed;                                        // 0x0230(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1320[0xC];                                     // 0x0234(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BPBeginSeededPlay();
	float BPFRandRange(float Min, float Max);
	struct FLinearColor BPRandColor(const struct FLinearColor& BaseColor, bool bRandomizeRed, float MinRed, float MaxRed, bool bRandomizeGreen, float MinGreen, float MaxGreen, bool bRandomizeBlue, float MinBlue, float MaxBlue, bool bRandomizeAlpha, float MinAlpha, float MaxAlpha);
	struct FLinearColor BPRandHSVColor(const struct FLinearColor& BaseColor, bool bRandomizeHue, float MinHue, float MaxHue, bool bRandomizeSaturation, float MinSaturation, float MaxSaturation, bool bRandomizeValue, float MinValue, float MaxValue, bool bRandomizeAlpha, float MinAlpha, float MaxAlpha);
	int32 BPRandRange(int32 Min, int32 Max);
	void OnRep_RandomSeed();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRandomizer">();
	}
	static class ASQRandomizer* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQRandomizer>();
	}
};
static_assert(alignof(ASQRandomizer) == 0x000008, "Wrong alignment on ASQRandomizer");
static_assert(sizeof(ASQRandomizer) == 0x000240, "Wrong size on ASQRandomizer");
static_assert(offsetof(ASQRandomizer, Root) == 0x000228, "Member 'ASQRandomizer::Root' has a wrong offset!");
static_assert(offsetof(ASQRandomizer, RandomSeed) == 0x000230, "Member 'ASQRandomizer::RandomSeed' has a wrong offset!");

// Class Squad.SQRandomizer_SceneComponent
// 0x0000 (0x0240 - 0x0240)
class ASQRandomizer_SceneComponent final : public ASQRandomizer
{
public:
	void DisableAllComponents();
	void ShowRandomComponent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRandomizer_SceneComponent">();
	}
	static class ASQRandomizer_SceneComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQRandomizer_SceneComponent>();
	}
};
static_assert(alignof(ASQRandomizer_SceneComponent) == 0x000008, "Wrong alignment on ASQRandomizer_SceneComponent");
static_assert(sizeof(ASQRandomizer_SceneComponent) == 0x000240, "Wrong size on ASQRandomizer_SceneComponent");

// Class Squad.SQSteamInventoryUIBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USQSteamInventoryUIBlueprintFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class USQSteamInventoryUI* GetSteamInventory(class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSteamInventoryUIBlueprintFunctionLibrary">();
	}
	static class USQSteamInventoryUIBlueprintFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSteamInventoryUIBlueprintFunctionLibrary>();
	}
};
static_assert(alignof(USQSteamInventoryUIBlueprintFunctionLibrary) == 0x000008, "Wrong alignment on USQSteamInventoryUIBlueprintFunctionLibrary");
static_assert(sizeof(USQSteamInventoryUIBlueprintFunctionLibrary) == 0x000028, "Wrong size on USQSteamInventoryUIBlueprintFunctionLibrary");

// Class Squad.SQRandomizer_StaticMesh
// 0x0018 (0x0258 - 0x0240)
class ASQRandomizer_StaticMesh final : public ASQRandomizer
{
public:
	class UStaticMeshComponent*                   MeshComponent;                                     // 0x0240(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UStaticMesh*>                    Meshes;                                            // 0x0248(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void SetMesh(int32 Param_Index);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRandomizer_StaticMesh">();
	}
	static class ASQRandomizer_StaticMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQRandomizer_StaticMesh>();
	}
};
static_assert(alignof(ASQRandomizer_StaticMesh) == 0x000008, "Wrong alignment on ASQRandomizer_StaticMesh");
static_assert(sizeof(ASQRandomizer_StaticMesh) == 0x000258, "Wrong size on ASQRandomizer_StaticMesh");
static_assert(offsetof(ASQRandomizer_StaticMesh, MeshComponent) == 0x000240, "Member 'ASQRandomizer_StaticMesh::MeshComponent' has a wrong offset!");
static_assert(offsetof(ASQRandomizer_StaticMesh, Meshes) == 0x000248, "Member 'ASQRandomizer_StaticMesh::Meshes' has a wrong offset!");

// Class Squad.SQSquadStateDataSpawnPoint
// 0x0018 (0x0170 - 0x0158)
class USQSquadStateDataSpawnPoint : public USQSquadStateMapData
{
public:
	class ASQGameSpawn*                           OwningGameSpawn;                                   // 0x0158(0x0008)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQSpawnPointType                             SpawnPointType;                                    // 0x0160(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1329[0x3];                                     // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bSieged : 1;                                       // 0x0164(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSpawningEnabled : 1;                              // 0x0164(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_132A[0x3];                                     // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActivatedTimeStamp;                                // 0x0168(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_132B[0x4];                                     // 0x016C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadStateDataSpawnPoint">();
	}
	static class USQSquadStateDataSpawnPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSquadStateDataSpawnPoint>();
	}
};
static_assert(alignof(USQSquadStateDataSpawnPoint) == 0x000008, "Wrong alignment on USQSquadStateDataSpawnPoint");
static_assert(sizeof(USQSquadStateDataSpawnPoint) == 0x000170, "Wrong size on USQSquadStateDataSpawnPoint");
static_assert(offsetof(USQSquadStateDataSpawnPoint, OwningGameSpawn) == 0x000158, "Member 'USQSquadStateDataSpawnPoint::OwningGameSpawn' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataSpawnPoint, SpawnPointType) == 0x000160, "Member 'USQSquadStateDataSpawnPoint::SpawnPointType' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataSpawnPoint, ActivatedTimeStamp) == 0x000168, "Member 'USQSquadStateDataSpawnPoint::ActivatedTimeStamp' has a wrong offset!");

// Class Squad.SQReconnectionCacheSubsystem
// 0x0020 (0x0050 - 0x0030)
class USQReconnectionCacheSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_132C[0x18];                                    // 0x0030(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NonSeamlessReconnectionTimeout;                    // 0x0048(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_132D[0x4];                                     // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQReconnectionCacheSubsystem">();
	}
	static class USQReconnectionCacheSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQReconnectionCacheSubsystem>();
	}
};
static_assert(alignof(USQReconnectionCacheSubsystem) == 0x000008, "Wrong alignment on USQReconnectionCacheSubsystem");
static_assert(sizeof(USQReconnectionCacheSubsystem) == 0x000050, "Wrong size on USQReconnectionCacheSubsystem");
static_assert(offsetof(USQReconnectionCacheSubsystem, NonSeamlessReconnectionTimeout) == 0x000048, "Member 'USQReconnectionCacheSubsystem::NonSeamlessReconnectionTimeout' has a wrong offset!");

// Class Squad.SQSuppressionInfo
// 0x0038 (0x0060 - 0x0028)
class USQSuppressionInfo : public UObject
{
public:
	float                                         SuppressionPower;                                  // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_132E[0x4];                                     // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            PowerToDistanceCurve;                              // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSuppressionThreshold;                           // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ObstructedClosenessMult;                           // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SuppressSwayFactorRelease;                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddSuppressSway;                                   // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSuppressSwayFactor;                             // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSuppressSwayFactor;                             // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LofSuppressRange;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LofSuppressInterpSpeed;                            // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LofSuppressAlphaFactor;                            // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LofSuppressRotationAlphaRelease;                   // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSuppressionInfo">();
	}
	static class USQSuppressionInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSuppressionInfo>();
	}
};
static_assert(alignof(USQSuppressionInfo) == 0x000008, "Wrong alignment on USQSuppressionInfo");
static_assert(sizeof(USQSuppressionInfo) == 0x000060, "Wrong size on USQSuppressionInfo");
static_assert(offsetof(USQSuppressionInfo, SuppressionPower) == 0x000028, "Member 'USQSuppressionInfo::SuppressionPower' has a wrong offset!");
static_assert(offsetof(USQSuppressionInfo, PowerToDistanceCurve) == 0x000030, "Member 'USQSuppressionInfo::PowerToDistanceCurve' has a wrong offset!");
static_assert(offsetof(USQSuppressionInfo, MaxSuppressionThreshold) == 0x000038, "Member 'USQSuppressionInfo::MaxSuppressionThreshold' has a wrong offset!");
static_assert(offsetof(USQSuppressionInfo, ObstructedClosenessMult) == 0x00003C, "Member 'USQSuppressionInfo::ObstructedClosenessMult' has a wrong offset!");
static_assert(offsetof(USQSuppressionInfo, SuppressSwayFactorRelease) == 0x000040, "Member 'USQSuppressionInfo::SuppressSwayFactorRelease' has a wrong offset!");
static_assert(offsetof(USQSuppressionInfo, AddSuppressSway) == 0x000044, "Member 'USQSuppressionInfo::AddSuppressSway' has a wrong offset!");
static_assert(offsetof(USQSuppressionInfo, MinSuppressSwayFactor) == 0x000048, "Member 'USQSuppressionInfo::MinSuppressSwayFactor' has a wrong offset!");
static_assert(offsetof(USQSuppressionInfo, MaxSuppressSwayFactor) == 0x00004C, "Member 'USQSuppressionInfo::MaxSuppressSwayFactor' has a wrong offset!");
static_assert(offsetof(USQSuppressionInfo, LofSuppressRange) == 0x000050, "Member 'USQSuppressionInfo::LofSuppressRange' has a wrong offset!");
static_assert(offsetof(USQSuppressionInfo, LofSuppressInterpSpeed) == 0x000054, "Member 'USQSuppressionInfo::LofSuppressInterpSpeed' has a wrong offset!");
static_assert(offsetof(USQSuppressionInfo, LofSuppressAlphaFactor) == 0x000058, "Member 'USQSuppressionInfo::LofSuppressAlphaFactor' has a wrong offset!");
static_assert(offsetof(USQSuppressionInfo, LofSuppressRotationAlphaRelease) == 0x00005C, "Member 'USQSuppressionInfo::LofSuppressRotationAlphaRelease' has a wrong offset!");

// Class Squad.SQRepairTool
// 0x0018 (0x04A8 - 0x0490)
class ASQRepairTool : public ASQRepairEquipable
{
public:
	class USQRepairToolStaticInfo*                RepairToolStaticInfo;                              // 0x0490(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTimerHandle                           TimerHandle;                                       // 0x0498(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bUseHammer;                                        // 0x04A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_132F[0x7];                                     // 0x04A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ServerStartRepairing(class ASQVehicle* RepairedVehicle);
	void ServerStopRepairing();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRepairTool">();
	}
	static class ASQRepairTool* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQRepairTool>();
	}
};
static_assert(alignof(ASQRepairTool) == 0x000008, "Wrong alignment on ASQRepairTool");
static_assert(sizeof(ASQRepairTool) == 0x0004A8, "Wrong size on ASQRepairTool");
static_assert(offsetof(ASQRepairTool, RepairToolStaticInfo) == 0x000490, "Member 'ASQRepairTool::RepairToolStaticInfo' has a wrong offset!");
static_assert(offsetof(ASQRepairTool, TimerHandle) == 0x000498, "Member 'ASQRepairTool::TimerHandle' has a wrong offset!");
static_assert(offsetof(ASQRepairTool, bUseHammer) == 0x0004A0, "Member 'ASQRepairTool::bUseHammer' has a wrong offset!");

// Class Squad.SQRepairToolStaticInfo
// 0x0070 (0x0660 - 0x05F0)
class USQRepairToolStaticInfo : public USQItemStaticInfo
{
public:
	class UAnimMontage*                           RepairingWeaponBeginUseMontage;                    // 0x05F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Repairing1pBeginUseMontage;                        // 0x05F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Repairing3pBeginUseMontage;                        // 0x0600(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           RepairingWeaponEndUseMontage;                      // 0x0608(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Repairing1pEndUseMontage;                          // 0x0610(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Repairing3pEndUseMontage;                          // 0x0618(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           AltRepairingWeaponBeginUseMontage;                 // 0x0620(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           AltRepairing1pBeginUseMontage;                     // 0x0628(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           AltRepairing3pBeginUseMontage;                     // 0x0630(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           AltRepairingWeaponEndUseMontage;                   // 0x0638(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           AltRepairing1pEndUseMontage;                       // 0x0640(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           AltRepairing3pEndUseMontage;                       // 0x0648(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              RepairingSound;                                    // 0x0650(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RepairingInterval;                                 // 0x0658(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RepairAmount;                                      // 0x065C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRepairToolStaticInfo">();
	}
	static class USQRepairToolStaticInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRepairToolStaticInfo>();
	}
};
static_assert(alignof(USQRepairToolStaticInfo) == 0x000008, "Wrong alignment on USQRepairToolStaticInfo");
static_assert(sizeof(USQRepairToolStaticInfo) == 0x000660, "Wrong size on USQRepairToolStaticInfo");
static_assert(offsetof(USQRepairToolStaticInfo, RepairingWeaponBeginUseMontage) == 0x0005F0, "Member 'USQRepairToolStaticInfo::RepairingWeaponBeginUseMontage' has a wrong offset!");
static_assert(offsetof(USQRepairToolStaticInfo, Repairing1pBeginUseMontage) == 0x0005F8, "Member 'USQRepairToolStaticInfo::Repairing1pBeginUseMontage' has a wrong offset!");
static_assert(offsetof(USQRepairToolStaticInfo, Repairing3pBeginUseMontage) == 0x000600, "Member 'USQRepairToolStaticInfo::Repairing3pBeginUseMontage' has a wrong offset!");
static_assert(offsetof(USQRepairToolStaticInfo, RepairingWeaponEndUseMontage) == 0x000608, "Member 'USQRepairToolStaticInfo::RepairingWeaponEndUseMontage' has a wrong offset!");
static_assert(offsetof(USQRepairToolStaticInfo, Repairing1pEndUseMontage) == 0x000610, "Member 'USQRepairToolStaticInfo::Repairing1pEndUseMontage' has a wrong offset!");
static_assert(offsetof(USQRepairToolStaticInfo, Repairing3pEndUseMontage) == 0x000618, "Member 'USQRepairToolStaticInfo::Repairing3pEndUseMontage' has a wrong offset!");
static_assert(offsetof(USQRepairToolStaticInfo, AltRepairingWeaponBeginUseMontage) == 0x000620, "Member 'USQRepairToolStaticInfo::AltRepairingWeaponBeginUseMontage' has a wrong offset!");
static_assert(offsetof(USQRepairToolStaticInfo, AltRepairing1pBeginUseMontage) == 0x000628, "Member 'USQRepairToolStaticInfo::AltRepairing1pBeginUseMontage' has a wrong offset!");
static_assert(offsetof(USQRepairToolStaticInfo, AltRepairing3pBeginUseMontage) == 0x000630, "Member 'USQRepairToolStaticInfo::AltRepairing3pBeginUseMontage' has a wrong offset!");
static_assert(offsetof(USQRepairToolStaticInfo, AltRepairingWeaponEndUseMontage) == 0x000638, "Member 'USQRepairToolStaticInfo::AltRepairingWeaponEndUseMontage' has a wrong offset!");
static_assert(offsetof(USQRepairToolStaticInfo, AltRepairing1pEndUseMontage) == 0x000640, "Member 'USQRepairToolStaticInfo::AltRepairing1pEndUseMontage' has a wrong offset!");
static_assert(offsetof(USQRepairToolStaticInfo, AltRepairing3pEndUseMontage) == 0x000648, "Member 'USQRepairToolStaticInfo::AltRepairing3pEndUseMontage' has a wrong offset!");
static_assert(offsetof(USQRepairToolStaticInfo, RepairingSound) == 0x000650, "Member 'USQRepairToolStaticInfo::RepairingSound' has a wrong offset!");
static_assert(offsetof(USQRepairToolStaticInfo, RepairingInterval) == 0x000658, "Member 'USQRepairToolStaticInfo::RepairingInterval' has a wrong offset!");
static_assert(offsetof(USQRepairToolStaticInfo, RepairAmount) == 0x00065C, "Member 'USQRepairToolStaticInfo::RepairAmount' has a wrong offset!");

// Class Squad.SQReplaySubsystem
// 0x0048 (0x0078 - 0x0030)
class USQReplaySubsystem final : public UGameInstanceSubsystem
{
public:
	class FString                                 DatedReplaySubDirectory;                           // 0x0030(0x0010)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 NamedReplaySubDirectory;                           // 0x0040(0x0010)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseMultithreading;                                // 0x0050(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1330[0x27];                                    // 0x0051(0x0027)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool IsValidReplayPath(const class FString& ReplayPath);

	bool DeleteReplay(const class FString& ReplayPath, bool bIsNamedReplay);
	void GetListOfDatedReplays(TArray<class FString>* OutReplayPaths, bool bIncludePath, bool bIncludeExtension);
	void GetListOfNamedReplays(TArray<class FString>* OutReplayPaths, bool bIncludePath, bool bIncludeExtension);
	ESQRenameReplayResponse NameDatedReplay(const class FString& ReplayName, const class FString& NewReplayName);
	void PlayExistingReplay(const class FString& ReplayToPlay, bool bIsNamedReplay);
	ESQRenameReplayResponse RenameNamedReplay(const class FString& ReplayName, const class FString& NewReplayName);
	bool StartRecordingDatedReplay();
	bool StartRecordingNamedReplay(const class FString& ReplayName);
	void StopRecordingReplay();
	void UpdateSubsystemSettings();

	bool CanRecordOnServer() const;
	bool GetIsRecording() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQReplaySubsystem">();
	}
	static class USQReplaySubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQReplaySubsystem>();
	}
};
static_assert(alignof(USQReplaySubsystem) == 0x000008, "Wrong alignment on USQReplaySubsystem");
static_assert(sizeof(USQReplaySubsystem) == 0x000078, "Wrong size on USQReplaySubsystem");
static_assert(offsetof(USQReplaySubsystem, DatedReplaySubDirectory) == 0x000030, "Member 'USQReplaySubsystem::DatedReplaySubDirectory' has a wrong offset!");
static_assert(offsetof(USQReplaySubsystem, NamedReplaySubDirectory) == 0x000040, "Member 'USQReplaySubsystem::NamedReplaySubDirectory' has a wrong offset!");
static_assert(offsetof(USQReplaySubsystem, bUseMultithreading) == 0x000050, "Member 'USQReplaySubsystem::bUseMultithreading' has a wrong offset!");

// Class Squad.SQReplicationGraph
// 0x0300 (0x07B0 - 0x04B0)
class USQReplicationGraph final : public UReplicationGraph
{
public:
	TArray<class UClass*>                         SpatializedClasses;                                // 0x04A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UClass*>                         NonSpatializedChildClasses;                        // 0x04B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UClass*>                         AlwaysRelevantClasses;                             // 0x04C8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UReplicationGraphNode_ActorList*        AlwaysRelevantNode;                                // 0x04D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReplicationGraphNode_GridSpatialization2D* GridNode;                                          // 0x04E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, class USQReplicationGraphNode_GridSpatialization2DEx*> TeamGridNodes;                                     // 0x04E8(0x0050)(NativeAccessSpecifierPublic)
	TMap<int32, class UReplicationGraphNode_ActorList*> TeamAlwaysRelevantNodes;                           // 0x0538(0x0050)(NativeAccessSpecifierPublic)
	TMap<struct FTeamSquadId, class UReplicationGraphNode_ActorList*> TeamSquadsAlwaysRelevantNodes;                     // 0x0588(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_1339[0x50];                                    // 0x05D8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class UReplicationGraphNode_DynamicSpatialFrequency* DynamicSpatialFrequencyNode;                       // 0x0628(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_133A[0x180];                                   // 0x0630(0x0180)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQReplicationGraph">();
	}
	static class USQReplicationGraph* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQReplicationGraph>();
	}
};
static_assert(alignof(USQReplicationGraph) == 0x000010, "Wrong alignment on USQReplicationGraph");
static_assert(sizeof(USQReplicationGraph) == 0x0007B0, "Wrong size on USQReplicationGraph");
static_assert(offsetof(USQReplicationGraph, SpatializedClasses) == 0x0004A8, "Member 'USQReplicationGraph::SpatializedClasses' has a wrong offset!");
static_assert(offsetof(USQReplicationGraph, NonSpatializedChildClasses) == 0x0004B8, "Member 'USQReplicationGraph::NonSpatializedChildClasses' has a wrong offset!");
static_assert(offsetof(USQReplicationGraph, AlwaysRelevantClasses) == 0x0004C8, "Member 'USQReplicationGraph::AlwaysRelevantClasses' has a wrong offset!");
static_assert(offsetof(USQReplicationGraph, AlwaysRelevantNode) == 0x0004D8, "Member 'USQReplicationGraph::AlwaysRelevantNode' has a wrong offset!");
static_assert(offsetof(USQReplicationGraph, GridNode) == 0x0004E0, "Member 'USQReplicationGraph::GridNode' has a wrong offset!");
static_assert(offsetof(USQReplicationGraph, TeamGridNodes) == 0x0004E8, "Member 'USQReplicationGraph::TeamGridNodes' has a wrong offset!");
static_assert(offsetof(USQReplicationGraph, TeamAlwaysRelevantNodes) == 0x000538, "Member 'USQReplicationGraph::TeamAlwaysRelevantNodes' has a wrong offset!");
static_assert(offsetof(USQReplicationGraph, TeamSquadsAlwaysRelevantNodes) == 0x000588, "Member 'USQReplicationGraph::TeamSquadsAlwaysRelevantNodes' has a wrong offset!");
static_assert(offsetof(USQReplicationGraph, DynamicSpatialFrequencyNode) == 0x000628, "Member 'USQReplicationGraph::DynamicSpatialFrequencyNode' has a wrong offset!");

// Class Squad.SQReplicationGraphNode_PlayerStateFrequencyLimiter
// 0x0028 (0x0078 - 0x0050)
class USQReplicationGraphNode_PlayerStateFrequencyLimiter final : public UReplicationGraphNode
{
public:
	uint8                                         Pad_133B[0x28];                                    // 0x0050(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQReplicationGraphNode_PlayerStateFrequencyLimiter">();
	}
	static class USQReplicationGraphNode_PlayerStateFrequencyLimiter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQReplicationGraphNode_PlayerStateFrequencyLimiter>();
	}
};
static_assert(alignof(USQReplicationGraphNode_PlayerStateFrequencyLimiter) == 0x000008, "Wrong alignment on USQReplicationGraphNode_PlayerStateFrequencyLimiter");
static_assert(sizeof(USQReplicationGraphNode_PlayerStateFrequencyLimiter) == 0x000078, "Wrong size on USQReplicationGraphNode_PlayerStateFrequencyLimiter");

// Class Squad.SQReplicationGraphNode_GridSpatialization2DEx
// 0x0060 (0x0290 - 0x0230)
class alignas(0x10) USQReplicationGraphNode_GridSpatialization2DEx final : public UReplicationGraphNode_GridSpatialization2D
{
public:
	uint8                                         Pad_133C[0x8];                                     // 0x0230(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UNetReplicationGraphConnection*>   AvoidCullingConnections;                           // 0x0238(0x0050)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_133D[0x8];                                     // 0x0288(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQReplicationGraphNode_GridSpatialization2DEx">();
	}
	static class USQReplicationGraphNode_GridSpatialization2DEx* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQReplicationGraphNode_GridSpatialization2DEx>();
	}
};
static_assert(alignof(USQReplicationGraphNode_GridSpatialization2DEx) == 0x000010, "Wrong alignment on USQReplicationGraphNode_GridSpatialization2DEx");
static_assert(sizeof(USQReplicationGraphNode_GridSpatialization2DEx) == 0x000290, "Wrong size on USQReplicationGraphNode_GridSpatialization2DEx");
static_assert(offsetof(USQReplicationGraphNode_GridSpatialization2DEx, AvoidCullingConnections) == 0x000238, "Member 'USQReplicationGraphNode_GridSpatialization2DEx::AvoidCullingConnections' has a wrong offset!");

// Class Squad.SQSoundNodeWavePlayer
// 0x0018 (0x0060 - 0x0048)
class USQSoundNodeWavePlayer final : public USoundNode
{
public:
	class USoundWave*                             SoundWave;                                         // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bLooping : 1;                                      // 0x0050(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRandomizeStartTime : 1;                           // 0x0050(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_133E[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartMin;                                          // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartMax;                                          // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_133F[0x4];                                     // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSoundNodeWavePlayer">();
	}
	static class USQSoundNodeWavePlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSoundNodeWavePlayer>();
	}
};
static_assert(alignof(USQSoundNodeWavePlayer) == 0x000008, "Wrong alignment on USQSoundNodeWavePlayer");
static_assert(sizeof(USQSoundNodeWavePlayer) == 0x000060, "Wrong size on USQSoundNodeWavePlayer");
static_assert(offsetof(USQSoundNodeWavePlayer, SoundWave) == 0x000048, "Member 'USQSoundNodeWavePlayer::SoundWave' has a wrong offset!");
static_assert(offsetof(USQSoundNodeWavePlayer, StartMin) == 0x000054, "Member 'USQSoundNodeWavePlayer::StartMin' has a wrong offset!");
static_assert(offsetof(USQSoundNodeWavePlayer, StartMax) == 0x000058, "Member 'USQSoundNodeWavePlayer::StartMax' has a wrong offset!");

// Class Squad.SQReplicationKeyInterface
// 0x0000 (0x0028 - 0x0028)
class ISQReplicationKeyInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQReplicationKeyInterface">();
	}
	static class ISQReplicationKeyInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISQReplicationKeyInterface>();
	}
};
static_assert(alignof(ISQReplicationKeyInterface) == 0x000008, "Wrong alignment on ISQReplicationKeyInterface");
static_assert(sizeof(ISQReplicationKeyInterface) == 0x000028, "Wrong size on ISQReplicationKeyInterface");

// Class Squad.SQRestriction_Cost
// 0x0000 (0x0060 - 0x0060)
class USQRestriction_Cost : public USQRestriction
{
public:
	bool CanPlayerBuy(class ASQPlayerController* InPlayer, struct FDataTableRowHandle* OutRestrictionReason) const;
	bool CanTeamBuy(class ASQTeam* InTeam, struct FDataTableRowHandle* OutRestrictionReason) const;
	bool HasPlayerBasedCost() const;
	bool HasTeamBasedCost() const;
	void PayCostForPlayer(class ASQPlayerController* InPlayer) const;
	void PayCostForTeam(class ASQTeam* InTeam) const;
	void RefundCostForPlayer(class ASQPlayerController* InPlayer, int32 InPercentage) const;
	void RefundCostForTeam(class ASQTeam* InTeam, int32 InPercentage) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRestriction_Cost">();
	}
	static class USQRestriction_Cost* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRestriction_Cost>();
	}
};
static_assert(alignof(USQRestriction_Cost) == 0x000008, "Wrong alignment on USQRestriction_Cost");
static_assert(sizeof(USQRestriction_Cost) == 0x000060, "Wrong size on USQRestriction_Cost");

// Class Squad.SQSoundWaveLooping
// 0x0050 (0x03C0 - 0x0370)
class USQSoundWaveLooping final : public USoundWave
{
public:
	uint8                                         Pad_1344[0x38];                                    // 0x0370(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USoundWave*>                     LoopingSounds;                                     // 0x03A8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1345[0x8];                                     // 0x03B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSoundWaveLooping">();
	}
	static class USQSoundWaveLooping* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSoundWaveLooping>();
	}
};
static_assert(alignof(USQSoundWaveLooping) == 0x000008, "Wrong alignment on USQSoundWaveLooping");
static_assert(sizeof(USQSoundWaveLooping) == 0x0003C0, "Wrong size on USQSoundWaveLooping");
static_assert(offsetof(USQSoundWaveLooping, LoopingSounds) == 0x0003A8, "Member 'USQSoundWaveLooping::LoopingSounds' has a wrong offset!");

// Class Squad.SQRestriction_Count
// 0x0018 (0x0078 - 0x0060)
class USQRestriction_Count : public USQRestriction
{
public:
	int32                                         BaseAvailability;                                  // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUniqueUsage;                                     // 0x0064(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1346[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USQCountParameterBase*>          Parameters;                                        // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	void GetAvailabilityForPlayer(class ASQPlayerController* InPlayer, int32* OutAvailable, struct FDataTableRowHandle* OutRestrictionReason) const;
	void GetAvailabilityForTeam(class ASQTeam* InTeam, int32* OutAvailable, struct FDataTableRowHandle* OutRestrictionReason) const;
	void OnPlayerAddUsage(class ASQPlayerController* InPlayer, int32* OutAddedUsage) const;
	void OnPlayerRemoveUsage(class ASQPlayerController* InPlayer, int32* OutRemovedUsage) const;
	void OnTeamAddUsage(class ASQTeam* InTeam, int32* OutAddedUsage) const;
	void OnTeamRemoveUsage(class ASQTeam* InTeam, int32* OutRemovedUsage) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRestriction_Count">();
	}
	static class USQRestriction_Count* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRestriction_Count>();
	}
};
static_assert(alignof(USQRestriction_Count) == 0x000008, "Wrong alignment on USQRestriction_Count");
static_assert(sizeof(USQRestriction_Count) == 0x000078, "Wrong size on USQRestriction_Count");
static_assert(offsetof(USQRestriction_Count, BaseAvailability) == 0x000060, "Member 'USQRestriction_Count::BaseAvailability' has a wrong offset!");
static_assert(offsetof(USQRestriction_Count, IsUniqueUsage) == 0x000064, "Member 'USQRestriction_Count::IsUniqueUsage' has a wrong offset!");
static_assert(offsetof(USQRestriction_Count, Parameters) == 0x000068, "Member 'USQRestriction_Count::Parameters' has a wrong offset!");

// Class Squad.SQRestriction_DeployableInRange
// 0x0070 (0x00D0 - 0x0060)
class USQRestriction_DeployableInRange final : public USQRestriction_Boolean
{
public:
	float                                         Range;                                             // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134D[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<ESQTeamRelationShip>                     TargetTeams;                                       // 0x0068(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         TargetCount;                                       // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134E[0x4];                                     // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ESQBuildState>                         TargetBuildState;                                  // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	bool IsAuthorizedWithDeployableInRange(class ASQPlayerController* InPlayer, const class ASQDeployable* InDeployableInRange) const;
	bool IsRestrictedWithDeployablesInRange(class ASQPlayerController* InPlayer, const TArray<class ASQDeployable*>& InDeployablesInRange) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRestriction_DeployableInRange">();
	}
	static class USQRestriction_DeployableInRange* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRestriction_DeployableInRange>();
	}
};
static_assert(alignof(USQRestriction_DeployableInRange) == 0x000008, "Wrong alignment on USQRestriction_DeployableInRange");
static_assert(sizeof(USQRestriction_DeployableInRange) == 0x0000D0, "Wrong size on USQRestriction_DeployableInRange");
static_assert(offsetof(USQRestriction_DeployableInRange, Range) == 0x000060, "Member 'USQRestriction_DeployableInRange::Range' has a wrong offset!");
static_assert(offsetof(USQRestriction_DeployableInRange, TargetTeams) == 0x000068, "Member 'USQRestriction_DeployableInRange::TargetTeams' has a wrong offset!");
static_assert(offsetof(USQRestriction_DeployableInRange, TargetCount) == 0x0000B8, "Member 'USQRestriction_DeployableInRange::TargetCount' has a wrong offset!");
static_assert(offsetof(USQRestriction_DeployableInRange, TargetBuildState) == 0x0000C0, "Member 'USQRestriction_DeployableInRange::TargetBuildState' has a wrong offset!");

// Class Squad.SQRestriction_PlayerInRange
// 0x0060 (0x00C0 - 0x0060)
class USQRestriction_PlayerInRange : public USQRestriction_Boolean
{
public:
	float                                         Range;                                             // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1351[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<ESQTeamRelationShip>                     TargetTeams;                                       // 0x0068(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         TargetCount;                                       // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1352[0x4];                                     // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsAuthorizedWithPlayerInRange(class ASQPlayerController* InPlayer, const class ASQPlayerState* InPlayerInRange) const;
	bool IsRestrictedWithPlayersInRange(class ASQPlayerController* InPlayer, const TArray<class ASQPlayerState*>& InPlayersInRange) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRestriction_PlayerInRange">();
	}
	static class USQRestriction_PlayerInRange* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRestriction_PlayerInRange>();
	}
};
static_assert(alignof(USQRestriction_PlayerInRange) == 0x000008, "Wrong alignment on USQRestriction_PlayerInRange");
static_assert(sizeof(USQRestriction_PlayerInRange) == 0x0000C0, "Wrong size on USQRestriction_PlayerInRange");
static_assert(offsetof(USQRestriction_PlayerInRange, Range) == 0x000060, "Member 'USQRestriction_PlayerInRange::Range' has a wrong offset!");
static_assert(offsetof(USQRestriction_PlayerInRange, TargetTeams) == 0x000068, "Member 'USQRestriction_PlayerInRange::TargetTeams' has a wrong offset!");
static_assert(offsetof(USQRestriction_PlayerInRange, TargetCount) == 0x0000B8, "Member 'USQRestriction_PlayerInRange::TargetCount' has a wrong offset!");

// Class Squad.SQRestriction_VehicleInRange
// 0x0060 (0x00C0 - 0x0060)
class USQRestriction_VehicleInRange : public USQRestriction_Boolean
{
public:
	float                                         Range;                                             // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1355[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<ESQTeamRelationShip>                     TargetTeams;                                       // 0x0068(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         TargetCount;                                       // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1356[0x4];                                     // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsAuthorizedWithVehicleInRange(class ASQPlayerController* InPlayer, const class ASQVehicle* InVehicleInRange) const;
	bool IsRestrictedWithVehiclesInRange(class ASQPlayerController* InPlayer, const TArray<class ASQVehicle*>& InVehiclesInRange) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRestriction_VehicleInRange">();
	}
	static class USQRestriction_VehicleInRange* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRestriction_VehicleInRange>();
	}
};
static_assert(alignof(USQRestriction_VehicleInRange) == 0x000008, "Wrong alignment on USQRestriction_VehicleInRange");
static_assert(sizeof(USQRestriction_VehicleInRange) == 0x0000C0, "Wrong size on USQRestriction_VehicleInRange");
static_assert(offsetof(USQRestriction_VehicleInRange, Range) == 0x000060, "Member 'USQRestriction_VehicleInRange::Range' has a wrong offset!");
static_assert(offsetof(USQRestriction_VehicleInRange, TargetTeams) == 0x000068, "Member 'USQRestriction_VehicleInRange::TargetTeams' has a wrong offset!");
static_assert(offsetof(USQRestriction_VehicleInRange, TargetCount) == 0x0000B8, "Member 'USQRestriction_VehicleInRange::TargetCount' has a wrong offset!");

// Class Squad.SQRoleList
// 0x0098 (0x0300 - 0x0268)
class USQRoleList final : public USQUserWidget
{
public:
	bool                                          bCanRunTick;                                       // 0x0268(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1359[0x7];                                     // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USQRoleListGroup*>               RoleGroupWidgets;                                  // 0x0270(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class USQRoleListUnit*>                RoleUnitWidgets;                                   // 0x0280(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         GridColumns;                                       // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135A[0x4];                                     // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQPlayerState*                         OwnerPlayerState;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerController*                    OwnerController;                                   // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class FString>                           CachedRoles;                                       // 0x02A8(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TSubclassOf<class USQRoleListUnit>            RoleWidgetType;                                    // 0x02F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void DisableAllRoleTicks();
	void InitWidget();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRoleList">();
	}
	static class USQRoleList* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRoleList>();
	}
};
static_assert(alignof(USQRoleList) == 0x000008, "Wrong alignment on USQRoleList");
static_assert(sizeof(USQRoleList) == 0x000300, "Wrong size on USQRoleList");
static_assert(offsetof(USQRoleList, bCanRunTick) == 0x000268, "Member 'USQRoleList::bCanRunTick' has a wrong offset!");
static_assert(offsetof(USQRoleList, RoleGroupWidgets) == 0x000270, "Member 'USQRoleList::RoleGroupWidgets' has a wrong offset!");
static_assert(offsetof(USQRoleList, RoleUnitWidgets) == 0x000280, "Member 'USQRoleList::RoleUnitWidgets' has a wrong offset!");
static_assert(offsetof(USQRoleList, GridColumns) == 0x000290, "Member 'USQRoleList::GridColumns' has a wrong offset!");
static_assert(offsetof(USQRoleList, OwnerPlayerState) == 0x000298, "Member 'USQRoleList::OwnerPlayerState' has a wrong offset!");
static_assert(offsetof(USQRoleList, OwnerController) == 0x0002A0, "Member 'USQRoleList::OwnerController' has a wrong offset!");
static_assert(offsetof(USQRoleList, CachedRoles) == 0x0002A8, "Member 'USQRoleList::CachedRoles' has a wrong offset!");
static_assert(offsetof(USQRoleList, RoleWidgetType) == 0x0002F8, "Member 'USQRoleList::RoleWidgetType' has a wrong offset!");

// Class Squad.SQRoleListUnit
// 0x00D0 (0x0338 - 0x0268)
class USQRoleListUnit final : public USQUserWidget
{
public:
	bool                                          bCanTick;                                          // 0x0268(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135B[0x7];                                     // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanel*                           SizeCanvas;                                        // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 MainBgImage;                                       // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 KitNameBgImage;                                    // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 KitIcon;                                           // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 SpecialIcon;                                       // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             KitNameTextBlock;                                  // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             KitCountTeamTextBlock;                             // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             KitCountTextBlock;                                 // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                RoleToolTipWidgetClass;                            // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BgColorSelectedRole;                               // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BgColorNotAvaliable;                               // 0x02C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BgColorNotSelectedRole;                            // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorKitIconAvailable;                             // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorKitIconUnavailable;                           // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             SquadLeaderAbilityIcon;                            // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             MedicAbilityIcon;                                  // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQRoleSettings*                        RoleReference;                                     // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerController*                    OwnerPlayerController;                             // 0x0320(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       OpenAnimation;                                     // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              MouseEnterSoundCue;                                // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void InitWidget();
	void SelfTick();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRoleListUnit">();
	}
	static class USQRoleListUnit* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRoleListUnit>();
	}
};
static_assert(alignof(USQRoleListUnit) == 0x000008, "Wrong alignment on USQRoleListUnit");
static_assert(sizeof(USQRoleListUnit) == 0x000338, "Wrong size on USQRoleListUnit");
static_assert(offsetof(USQRoleListUnit, bCanTick) == 0x000268, "Member 'USQRoleListUnit::bCanTick' has a wrong offset!");
static_assert(offsetof(USQRoleListUnit, SizeCanvas) == 0x000270, "Member 'USQRoleListUnit::SizeCanvas' has a wrong offset!");
static_assert(offsetof(USQRoleListUnit, MainBgImage) == 0x000278, "Member 'USQRoleListUnit::MainBgImage' has a wrong offset!");
static_assert(offsetof(USQRoleListUnit, KitNameBgImage) == 0x000280, "Member 'USQRoleListUnit::KitNameBgImage' has a wrong offset!");
static_assert(offsetof(USQRoleListUnit, KitIcon) == 0x000288, "Member 'USQRoleListUnit::KitIcon' has a wrong offset!");
static_assert(offsetof(USQRoleListUnit, SpecialIcon) == 0x000290, "Member 'USQRoleListUnit::SpecialIcon' has a wrong offset!");
static_assert(offsetof(USQRoleListUnit, KitNameTextBlock) == 0x000298, "Member 'USQRoleListUnit::KitNameTextBlock' has a wrong offset!");
static_assert(offsetof(USQRoleListUnit, KitCountTeamTextBlock) == 0x0002A0, "Member 'USQRoleListUnit::KitCountTeamTextBlock' has a wrong offset!");
static_assert(offsetof(USQRoleListUnit, KitCountTextBlock) == 0x0002A8, "Member 'USQRoleListUnit::KitCountTextBlock' has a wrong offset!");
static_assert(offsetof(USQRoleListUnit, RoleToolTipWidgetClass) == 0x0002B0, "Member 'USQRoleListUnit::RoleToolTipWidgetClass' has a wrong offset!");
static_assert(offsetof(USQRoleListUnit, BgColorSelectedRole) == 0x0002B8, "Member 'USQRoleListUnit::BgColorSelectedRole' has a wrong offset!");
static_assert(offsetof(USQRoleListUnit, BgColorNotAvaliable) == 0x0002C8, "Member 'USQRoleListUnit::BgColorNotAvaliable' has a wrong offset!");
static_assert(offsetof(USQRoleListUnit, BgColorNotSelectedRole) == 0x0002D8, "Member 'USQRoleListUnit::BgColorNotSelectedRole' has a wrong offset!");
static_assert(offsetof(USQRoleListUnit, ColorKitIconAvailable) == 0x0002E8, "Member 'USQRoleListUnit::ColorKitIconAvailable' has a wrong offset!");
static_assert(offsetof(USQRoleListUnit, ColorKitIconUnavailable) == 0x0002F8, "Member 'USQRoleListUnit::ColorKitIconUnavailable' has a wrong offset!");
static_assert(offsetof(USQRoleListUnit, SquadLeaderAbilityIcon) == 0x000308, "Member 'USQRoleListUnit::SquadLeaderAbilityIcon' has a wrong offset!");
static_assert(offsetof(USQRoleListUnit, MedicAbilityIcon) == 0x000310, "Member 'USQRoleListUnit::MedicAbilityIcon' has a wrong offset!");
static_assert(offsetof(USQRoleListUnit, RoleReference) == 0x000318, "Member 'USQRoleListUnit::RoleReference' has a wrong offset!");
static_assert(offsetof(USQRoleListUnit, OwnerPlayerController) == 0x000320, "Member 'USQRoleListUnit::OwnerPlayerController' has a wrong offset!");
static_assert(offsetof(USQRoleListUnit, OpenAnimation) == 0x000328, "Member 'USQRoleListUnit::OpenAnimation' has a wrong offset!");
static_assert(offsetof(USQRoleListUnit, MouseEnterSoundCue) == 0x000330, "Member 'USQRoleListUnit::MouseEnterSoundCue' has a wrong offset!");

// Class Squad.SQRotatingMovementComponent
// 0x00A0 (0x0258 - 0x01B8)
class USQRotatingMovementComponent final : public USQMovementComponentPacked
{
public:
	class USceneComponent*                        UpdatedComponent;                                  // 0x01B8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputMultiplier;                                   // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ErrorTolerance;                                    // 0x01C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularDeltaCombineThreshold;                      // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQRotationConstraints                 RotationConstraints;                               // 0x01CC(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_135C[0x30];                                    // 0x01E8(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQRotationRepMovement                 RotationReplicatedMovement;                        // 0x0218(0x0040)(Net, RepNotify, Protected, NativeAccessSpecifierProtected)

public:
	void AddRotationInput(const struct FRotator& InRotationInput);
	void OnRep_RotationReplicatedMovement();

	struct FRotator GetCurrentRotationVelocity() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRotatingMovementComponent">();
	}
	static class USQRotatingMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRotatingMovementComponent>();
	}
};
static_assert(alignof(USQRotatingMovementComponent) == 0x000008, "Wrong alignment on USQRotatingMovementComponent");
static_assert(sizeof(USQRotatingMovementComponent) == 0x000258, "Wrong size on USQRotatingMovementComponent");
static_assert(offsetof(USQRotatingMovementComponent, UpdatedComponent) == 0x0001B8, "Member 'USQRotatingMovementComponent::UpdatedComponent' has a wrong offset!");
static_assert(offsetof(USQRotatingMovementComponent, InputMultiplier) == 0x0001C0, "Member 'USQRotatingMovementComponent::InputMultiplier' has a wrong offset!");
static_assert(offsetof(USQRotatingMovementComponent, ErrorTolerance) == 0x0001C4, "Member 'USQRotatingMovementComponent::ErrorTolerance' has a wrong offset!");
static_assert(offsetof(USQRotatingMovementComponent, AngularDeltaCombineThreshold) == 0x0001C8, "Member 'USQRotatingMovementComponent::AngularDeltaCombineThreshold' has a wrong offset!");
static_assert(offsetof(USQRotatingMovementComponent, RotationConstraints) == 0x0001CC, "Member 'USQRotatingMovementComponent::RotationConstraints' has a wrong offset!");
static_assert(offsetof(USQRotatingMovementComponent, RotationReplicatedMovement) == 0x000218, "Member 'USQRotatingMovementComponent::RotationReplicatedMovement' has a wrong offset!");

// Class Squad.SQRotationMovementAudioComponent
// 0x0070 (0x08D0 - 0x0860)
class USQRotationMovementAudioComponent final : public UAudioComponent
{
public:
	class USQMovementComponentBase*               PitchMovementComponent;                            // 0x0860(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQMovementComponentBase*               YawMovementComponent;                              // 0x0868(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQRotationMovementState                      RotationMovementState;                             // 0x0870(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135D[0x7];                                     // 0x0871(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             StartingSound;                                     // 0x0878(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             MovingSound;                                       // 0x0880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             StoppingSound;                                     // 0x0888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowIdleDuration;                                  // 0x0890(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowIdleTickInterval;                              // 0x0894(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdleFadeOutDuration;                               // 0x0898(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartingDuration;                                  // 0x089C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovingToStoppingDuration;                          // 0x08A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StoppingDuration;                                  // 0x08A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135E[0x28];                                    // 0x08A8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRotationMovementAudioComponent">();
	}
	static class USQRotationMovementAudioComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRotationMovementAudioComponent>();
	}
};
static_assert(alignof(USQRotationMovementAudioComponent) == 0x000010, "Wrong alignment on USQRotationMovementAudioComponent");
static_assert(sizeof(USQRotationMovementAudioComponent) == 0x0008D0, "Wrong size on USQRotationMovementAudioComponent");
static_assert(offsetof(USQRotationMovementAudioComponent, PitchMovementComponent) == 0x000860, "Member 'USQRotationMovementAudioComponent::PitchMovementComponent' has a wrong offset!");
static_assert(offsetof(USQRotationMovementAudioComponent, YawMovementComponent) == 0x000868, "Member 'USQRotationMovementAudioComponent::YawMovementComponent' has a wrong offset!");
static_assert(offsetof(USQRotationMovementAudioComponent, RotationMovementState) == 0x000870, "Member 'USQRotationMovementAudioComponent::RotationMovementState' has a wrong offset!");
static_assert(offsetof(USQRotationMovementAudioComponent, StartingSound) == 0x000878, "Member 'USQRotationMovementAudioComponent::StartingSound' has a wrong offset!");
static_assert(offsetof(USQRotationMovementAudioComponent, MovingSound) == 0x000880, "Member 'USQRotationMovementAudioComponent::MovingSound' has a wrong offset!");
static_assert(offsetof(USQRotationMovementAudioComponent, StoppingSound) == 0x000888, "Member 'USQRotationMovementAudioComponent::StoppingSound' has a wrong offset!");
static_assert(offsetof(USQRotationMovementAudioComponent, SlowIdleDuration) == 0x000890, "Member 'USQRotationMovementAudioComponent::SlowIdleDuration' has a wrong offset!");
static_assert(offsetof(USQRotationMovementAudioComponent, SlowIdleTickInterval) == 0x000894, "Member 'USQRotationMovementAudioComponent::SlowIdleTickInterval' has a wrong offset!");
static_assert(offsetof(USQRotationMovementAudioComponent, IdleFadeOutDuration) == 0x000898, "Member 'USQRotationMovementAudioComponent::IdleFadeOutDuration' has a wrong offset!");
static_assert(offsetof(USQRotationMovementAudioComponent, StartingDuration) == 0x00089C, "Member 'USQRotationMovementAudioComponent::StartingDuration' has a wrong offset!");
static_assert(offsetof(USQRotationMovementAudioComponent, MovingToStoppingDuration) == 0x0008A0, "Member 'USQRotationMovementAudioComponent::MovingToStoppingDuration' has a wrong offset!");
static_assert(offsetof(USQRotationMovementAudioComponent, StoppingDuration) == 0x0008A4, "Member 'USQRotationMovementAudioComponent::StoppingDuration' has a wrong offset!");

// Class Squad.SQRotor
// 0x0038 (0x0060 - 0x0028)
class USQRotor final : public UObject
{
public:
	class USQRotorSetup*                          RotorSetup;                                        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135F[0x28];                                    // 0x0030(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                WorldContextObject;                                // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRotor">();
	}
	static class USQRotor* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRotor>();
	}
};
static_assert(alignof(USQRotor) == 0x000008, "Wrong alignment on USQRotor");
static_assert(sizeof(USQRotor) == 0x000060, "Wrong size on USQRotor");
static_assert(offsetof(USQRotor, RotorSetup) == 0x000028, "Member 'USQRotor::RotorSetup' has a wrong offset!");
static_assert(offsetof(USQRotor, WorldContextObject) == 0x000058, "Member 'USQRotor::WorldContextObject' has a wrong offset!");

// Class Squad.SQRotorComponent
// 0x0000 (0x06F0 - 0x06F0)
class USQRotorComponent final : public USQVehicleEngineComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRotorComponent">();
	}
	static class USQRotorComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRotorComponent>();
	}
};
static_assert(alignof(USQRotorComponent) == 0x000010, "Wrong alignment on USQRotorComponent");
static_assert(sizeof(USQRotorComponent) == 0x0006F0, "Wrong size on USQRotorComponent");

// Class Squad.SQRotorWashEffectListener
// 0x0018 (0x00C8 - 0x00B0)
class USQRotorWashEffectListener : public UActorComponent
{
public:
	TArray<class USQRotorWashEffectSender*>       ActiveEmitters;                                    // 0x00B0(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         EmitterCullDistance;                               // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1360[0x4];                                     // 0x00C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BPEmitterRegistered(class USQRotorWashEffectSender* Emitter);
	void BPEmitterUnregistered(class USQRotorWashEffectSender* Emitter);
	void GetEmittersCulled(TArray<class USQRotorWashEffectSender*>& OutEmitters);
	void RegisterRotorWashEffectEmitter(class USQRotorWashEffectSender* Emitter);
	void SetEmitterCullDistance(float NewCullDistance);
	void UnregisterRotorWashEffectEmitter(class USQRotorWashEffectSender* Emitter);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRotorWashEffectListener">();
	}
	static class USQRotorWashEffectListener* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRotorWashEffectListener>();
	}
};
static_assert(alignof(USQRotorWashEffectListener) == 0x000008, "Wrong alignment on USQRotorWashEffectListener");
static_assert(sizeof(USQRotorWashEffectListener) == 0x0000C8, "Wrong size on USQRotorWashEffectListener");
static_assert(offsetof(USQRotorWashEffectListener, ActiveEmitters) == 0x0000B0, "Member 'USQRotorWashEffectListener::ActiveEmitters' has a wrong offset!");
static_assert(offsetof(USQRotorWashEffectListener, EmitterCullDistance) == 0x0000C0, "Member 'USQRotorWashEffectListener::EmitterCullDistance' has a wrong offset!");

// Class Squad.SQRulesetState
// 0x0008 (0x0230 - 0x0228)
class ASQRulesetState : public AInfo
{
public:
	bool                                          bRulesetEnabled;                                   // 0x0228(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1361[0x7];                                     // 0x0229(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRulesetState">();
	}
	static class ASQRulesetState* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQRulesetState>();
	}
};
static_assert(alignof(ASQRulesetState) == 0x000008, "Wrong alignment on ASQRulesetState");
static_assert(sizeof(ASQRulesetState) == 0x000230, "Wrong size on ASQRulesetState");
static_assert(offsetof(ASQRulesetState, bRulesetEnabled) == 0x000228, "Member 'ASQRulesetState::bRulesetEnabled' has a wrong offset!");

// Class Squad.SQSaveGameWrapper
// 0x0030 (0x0058 - 0x0028)
class USQSaveGameWrapper : public UObject
{
public:
	TSubclassOf<class USaveGame>                  SaveGameClass;                                     // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 SlotName;                                          // 0x0030(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bClientOnly;                                       // 0x0040(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1362[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USaveGame*                              SaveGame;                                          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1363[0x8];                                     // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Save();
	void SetSavedGame(class USaveGame* NewSaveGame);

	class USaveGame* GetSavedGame() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSaveGameWrapper">();
	}
	static class USQSaveGameWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSaveGameWrapper>();
	}
};
static_assert(alignof(USQSaveGameWrapper) == 0x000008, "Wrong alignment on USQSaveGameWrapper");
static_assert(sizeof(USQSaveGameWrapper) == 0x000058, "Wrong size on USQSaveGameWrapper");
static_assert(offsetof(USQSaveGameWrapper, SaveGameClass) == 0x000028, "Member 'USQSaveGameWrapper::SaveGameClass' has a wrong offset!");
static_assert(offsetof(USQSaveGameWrapper, SlotName) == 0x000030, "Member 'USQSaveGameWrapper::SlotName' has a wrong offset!");
static_assert(offsetof(USQSaveGameWrapper, bClientOnly) == 0x000040, "Member 'USQSaveGameWrapper::bClientOnly' has a wrong offset!");
static_assert(offsetof(USQSaveGameWrapper, SaveGame) == 0x000048, "Member 'USQSaveGameWrapper::SaveGame' has a wrong offset!");

// Class Squad.SQScoreboardPlayer
// 0x01A0 (0x0408 - 0x0268)
class USQScoreboardPlayer : public USQUserWidget
{
public:
	uint8                                         Pad_1364[0x10];                                    // 0x0268(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class USQStatefulButton*                      TalkingButton;                                     // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASQPlayerController*                    SQPC;                                              // 0x0280(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerState*                         SQPlayerState;                                     // 0x0288(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerState*                         OwnerSQPlayerState;                                // 0x0290(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1365[0x18];                                    // 0x0298(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           SelfColor;                                         // 0x02B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           OtherColor;                                        // 0x02C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BleedingColor;                                     // 0x02D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           IncapColor;                                        // 0x02E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DeadColor;                                         // 0x02F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             BleedingTexture;                                   // 0x0300(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             IncapTexture;                                      // 0x0308(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             DeadTexture;                                       // 0x0310(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   HealthTooltipDead;                                 // 0x0318(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   HealthTooltipIncap;                                // 0x0330(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FText                                   HealthTooltipBleeding;                             // 0x0348(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bShowAllStats;                                     // 0x0360(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFriendlyScoreboard;                             // 0x0361(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsShowingDeveloperTag;                            // 0x0362(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1366[0x5];                                     // 0x0363(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanel*                           LeaderPanel;                                       // 0x0368(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHorizontalBox*                         EndOfRoundPanel;                                   // 0x0370(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpacer*                                NotEndOfRoundSpacer;                               // 0x0378(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             LeaderText;                                        // 0x0380(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             PlayerNamePrefixText;                              // 0x0388(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             PlayerNameText;                                    // 0x0390(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             KillsText;                                         // 0x0398(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             IncapsText;                                        // 0x03A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             DeathsText;                                        // 0x03A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             RevivesText;                                       // 0x03B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             HealsText;                                         // 0x03B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             TeamworkText;                                      // 0x03C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             ObjectivesText;                                    // 0x03C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             ScoreText;                                         // 0x03D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             PingText;                                          // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 LeaderTypeImage;                                   // 0x03E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 FireteamImage;                                     // 0x03E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 HealthStateImage;                                  // 0x03F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 VehicleImage;                                      // 0x03F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 RoleImage;                                         // 0x0400(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ChangeVoipColor(ESQVoiceChannel Channel);
	class UTexture2D* GetRoleIcon();
	void InitWidget();
	void OnMutePlayer(int32 CurrentState);
	void UpdateState();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQScoreboardPlayer">();
	}
	static class USQScoreboardPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQScoreboardPlayer>();
	}
};
static_assert(alignof(USQScoreboardPlayer) == 0x000008, "Wrong alignment on USQScoreboardPlayer");
static_assert(sizeof(USQScoreboardPlayer) == 0x000408, "Wrong size on USQScoreboardPlayer");
static_assert(offsetof(USQScoreboardPlayer, TalkingButton) == 0x000278, "Member 'USQScoreboardPlayer::TalkingButton' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, SQPC) == 0x000280, "Member 'USQScoreboardPlayer::SQPC' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, SQPlayerState) == 0x000288, "Member 'USQScoreboardPlayer::SQPlayerState' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, OwnerSQPlayerState) == 0x000290, "Member 'USQScoreboardPlayer::OwnerSQPlayerState' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, SelfColor) == 0x0002B0, "Member 'USQScoreboardPlayer::SelfColor' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, OtherColor) == 0x0002C0, "Member 'USQScoreboardPlayer::OtherColor' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, BleedingColor) == 0x0002D0, "Member 'USQScoreboardPlayer::BleedingColor' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, IncapColor) == 0x0002E0, "Member 'USQScoreboardPlayer::IncapColor' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, DeadColor) == 0x0002F0, "Member 'USQScoreboardPlayer::DeadColor' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, BleedingTexture) == 0x000300, "Member 'USQScoreboardPlayer::BleedingTexture' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, IncapTexture) == 0x000308, "Member 'USQScoreboardPlayer::IncapTexture' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, DeadTexture) == 0x000310, "Member 'USQScoreboardPlayer::DeadTexture' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, HealthTooltipDead) == 0x000318, "Member 'USQScoreboardPlayer::HealthTooltipDead' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, HealthTooltipIncap) == 0x000330, "Member 'USQScoreboardPlayer::HealthTooltipIncap' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, HealthTooltipBleeding) == 0x000348, "Member 'USQScoreboardPlayer::HealthTooltipBleeding' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, bShowAllStats) == 0x000360, "Member 'USQScoreboardPlayer::bShowAllStats' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, bIsFriendlyScoreboard) == 0x000361, "Member 'USQScoreboardPlayer::bIsFriendlyScoreboard' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, bIsShowingDeveloperTag) == 0x000362, "Member 'USQScoreboardPlayer::bIsShowingDeveloperTag' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, LeaderPanel) == 0x000368, "Member 'USQScoreboardPlayer::LeaderPanel' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, EndOfRoundPanel) == 0x000370, "Member 'USQScoreboardPlayer::EndOfRoundPanel' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, NotEndOfRoundSpacer) == 0x000378, "Member 'USQScoreboardPlayer::NotEndOfRoundSpacer' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, LeaderText) == 0x000380, "Member 'USQScoreboardPlayer::LeaderText' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, PlayerNamePrefixText) == 0x000388, "Member 'USQScoreboardPlayer::PlayerNamePrefixText' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, PlayerNameText) == 0x000390, "Member 'USQScoreboardPlayer::PlayerNameText' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, KillsText) == 0x000398, "Member 'USQScoreboardPlayer::KillsText' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, IncapsText) == 0x0003A0, "Member 'USQScoreboardPlayer::IncapsText' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, DeathsText) == 0x0003A8, "Member 'USQScoreboardPlayer::DeathsText' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, RevivesText) == 0x0003B0, "Member 'USQScoreboardPlayer::RevivesText' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, HealsText) == 0x0003B8, "Member 'USQScoreboardPlayer::HealsText' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, TeamworkText) == 0x0003C0, "Member 'USQScoreboardPlayer::TeamworkText' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, ObjectivesText) == 0x0003C8, "Member 'USQScoreboardPlayer::ObjectivesText' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, ScoreText) == 0x0003D0, "Member 'USQScoreboardPlayer::ScoreText' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, PingText) == 0x0003D8, "Member 'USQScoreboardPlayer::PingText' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, LeaderTypeImage) == 0x0003E0, "Member 'USQScoreboardPlayer::LeaderTypeImage' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, FireteamImage) == 0x0003E8, "Member 'USQScoreboardPlayer::FireteamImage' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, HealthStateImage) == 0x0003F0, "Member 'USQScoreboardPlayer::HealthStateImage' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, VehicleImage) == 0x0003F8, "Member 'USQScoreboardPlayer::VehicleImage' has a wrong offset!");
static_assert(offsetof(USQScoreboardPlayer, RoleImage) == 0x000400, "Member 'USQScoreboardPlayer::RoleImage' has a wrong offset!");

// Class Squad.SQScoreboardTeam
// 0x0178 (0x03E0 - 0x0268)
class USQScoreboardTeam : public USQUserWidget
{
public:
	class USQScoreboardTeamScore*                 ScoreboardTeamScore;                               // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHorizontalBox*                         EndOfRoundHorizontalBox;                           // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVerticalBox*                           TopVerticalBox;                                    // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpacer*                                NotEndOfRoundSpacer;                               // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpacer*                                EnemyTeamPingAligner;                              // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHorizontalBox*                         TeamHorizontalBox;                                 // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGridPanel*                             SquadsGrid;                                        // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanel*                           NonSquadPlayersCanvasPanel;                        // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGridPanel*                             PlayersGrid;                                       // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBorder*                                ColoredHeaderTabImage;                             // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 RemainingTicketsImage;                             // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 ColoredHeaderBarImage;                             // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 FlagImage;                                         // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             PlayerNumberText;                                  // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             RemainingTicketsText;                              // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             TeamNameText;                                      // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerController*                    SQPC;                                              // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerState*                         SQPlayerState;                                     // 0x02F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQTeamState*                           SQTeamState;                                       // 0x02F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQGameState*                           SQGameState;                                       // 0x0300(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQScoreboardPlayer*                    OwnerPlayerWidget;                                 // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQScoreboardSquad*                     OwnerPlayerSquadWidget;                            // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamKills;                                         // 0x0318(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamDeaths;                                        // 0x031C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamIncaps;                                        // 0x0320(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamWounds;                                        // 0x0324(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamRevives;                                       // 0x0328(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamHeals;                                         // 0x032C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamTeamKills;                                     // 0x0330(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamTeamwork;                                      // 0x0334(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamObjective;                                     // 0x0338(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamScore;                                         // 0x033C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FriendlyTeamColor;                                 // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EnemyTeamColor;                                    // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFriendlyScoreboard;                             // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowAllStats;                                     // 0x0361(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1367[0x2];                                     // 0x0362(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EndOfRoundEnemyWidth;                              // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DuringRoundEnemyWidth;                             // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1368[0x4];                                     // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   RemainingTicketsTextString;                        // 0x0370(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   PlayersText;                                       // 0x0388(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FSquadWidgetPair>               DisplayedSquads;                                   // 0x03A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FPlayerWidgetPair>              DisplayedPlayers;                                  // 0x03B0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FSQRemoteTalkerDisplayInfo>     FormerTalkers;                                     // 0x03C0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class USQScoreboardSquad>         ScoreboardSquadType;                               // 0x03D0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USQScoreboardPlayer>        ScoreboardPlayerType;                              // 0x03D8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void CleanDataForWidget();
	void CreateNewPlayer(class ASQTeamState* Team, class ASQPlayerState* Player);
	void CreateNewSquad(class ASQSquadState* NewSquad);
	void InitWidget();
	void SortSquads();
	void ToggleShowAllStats();
	void UpdateAllSpeakers(const TArray<struct FSQRemoteTalkerDisplayInfo>& CurrentTalkers);
	void UpdatePlayerJoinedSquad(class ASQPlayerState* Player);
	void UpdatePlayers();
	void UpdateSquads();
	void UpdateState();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQScoreboardTeam">();
	}
	static class USQScoreboardTeam* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQScoreboardTeam>();
	}
};
static_assert(alignof(USQScoreboardTeam) == 0x000008, "Wrong alignment on USQScoreboardTeam");
static_assert(sizeof(USQScoreboardTeam) == 0x0003E0, "Wrong size on USQScoreboardTeam");
static_assert(offsetof(USQScoreboardTeam, ScoreboardTeamScore) == 0x000268, "Member 'USQScoreboardTeam::ScoreboardTeamScore' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, EndOfRoundHorizontalBox) == 0x000270, "Member 'USQScoreboardTeam::EndOfRoundHorizontalBox' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, TopVerticalBox) == 0x000278, "Member 'USQScoreboardTeam::TopVerticalBox' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, NotEndOfRoundSpacer) == 0x000280, "Member 'USQScoreboardTeam::NotEndOfRoundSpacer' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, EnemyTeamPingAligner) == 0x000288, "Member 'USQScoreboardTeam::EnemyTeamPingAligner' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, TeamHorizontalBox) == 0x000290, "Member 'USQScoreboardTeam::TeamHorizontalBox' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, SquadsGrid) == 0x000298, "Member 'USQScoreboardTeam::SquadsGrid' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, NonSquadPlayersCanvasPanel) == 0x0002A0, "Member 'USQScoreboardTeam::NonSquadPlayersCanvasPanel' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, PlayersGrid) == 0x0002A8, "Member 'USQScoreboardTeam::PlayersGrid' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, ColoredHeaderTabImage) == 0x0002B0, "Member 'USQScoreboardTeam::ColoredHeaderTabImage' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, RemainingTicketsImage) == 0x0002B8, "Member 'USQScoreboardTeam::RemainingTicketsImage' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, ColoredHeaderBarImage) == 0x0002C0, "Member 'USQScoreboardTeam::ColoredHeaderBarImage' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, FlagImage) == 0x0002C8, "Member 'USQScoreboardTeam::FlagImage' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, PlayerNumberText) == 0x0002D0, "Member 'USQScoreboardTeam::PlayerNumberText' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, RemainingTicketsText) == 0x0002D8, "Member 'USQScoreboardTeam::RemainingTicketsText' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, TeamNameText) == 0x0002E0, "Member 'USQScoreboardTeam::TeamNameText' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, SQPC) == 0x0002E8, "Member 'USQScoreboardTeam::SQPC' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, SQPlayerState) == 0x0002F0, "Member 'USQScoreboardTeam::SQPlayerState' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, SQTeamState) == 0x0002F8, "Member 'USQScoreboardTeam::SQTeamState' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, SQGameState) == 0x000300, "Member 'USQScoreboardTeam::SQGameState' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, OwnerPlayerWidget) == 0x000308, "Member 'USQScoreboardTeam::OwnerPlayerWidget' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, OwnerPlayerSquadWidget) == 0x000310, "Member 'USQScoreboardTeam::OwnerPlayerSquadWidget' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, TeamKills) == 0x000318, "Member 'USQScoreboardTeam::TeamKills' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, TeamDeaths) == 0x00031C, "Member 'USQScoreboardTeam::TeamDeaths' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, TeamIncaps) == 0x000320, "Member 'USQScoreboardTeam::TeamIncaps' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, TeamWounds) == 0x000324, "Member 'USQScoreboardTeam::TeamWounds' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, TeamRevives) == 0x000328, "Member 'USQScoreboardTeam::TeamRevives' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, TeamHeals) == 0x00032C, "Member 'USQScoreboardTeam::TeamHeals' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, TeamTeamKills) == 0x000330, "Member 'USQScoreboardTeam::TeamTeamKills' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, TeamTeamwork) == 0x000334, "Member 'USQScoreboardTeam::TeamTeamwork' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, TeamObjective) == 0x000338, "Member 'USQScoreboardTeam::TeamObjective' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, TeamScore) == 0x00033C, "Member 'USQScoreboardTeam::TeamScore' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, FriendlyTeamColor) == 0x000340, "Member 'USQScoreboardTeam::FriendlyTeamColor' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, EnemyTeamColor) == 0x000350, "Member 'USQScoreboardTeam::EnemyTeamColor' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, bIsFriendlyScoreboard) == 0x000360, "Member 'USQScoreboardTeam::bIsFriendlyScoreboard' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, bShowAllStats) == 0x000361, "Member 'USQScoreboardTeam::bShowAllStats' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, EndOfRoundEnemyWidth) == 0x000364, "Member 'USQScoreboardTeam::EndOfRoundEnemyWidth' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, DuringRoundEnemyWidth) == 0x000368, "Member 'USQScoreboardTeam::DuringRoundEnemyWidth' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, RemainingTicketsTextString) == 0x000370, "Member 'USQScoreboardTeam::RemainingTicketsTextString' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, PlayersText) == 0x000388, "Member 'USQScoreboardTeam::PlayersText' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, DisplayedSquads) == 0x0003A0, "Member 'USQScoreboardTeam::DisplayedSquads' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, DisplayedPlayers) == 0x0003B0, "Member 'USQScoreboardTeam::DisplayedPlayers' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, FormerTalkers) == 0x0003C0, "Member 'USQScoreboardTeam::FormerTalkers' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, ScoreboardSquadType) == 0x0003D0, "Member 'USQScoreboardTeam::ScoreboardSquadType' has a wrong offset!");
static_assert(offsetof(USQScoreboardTeam, ScoreboardPlayerType) == 0x0003D8, "Member 'USQScoreboardTeam::ScoreboardPlayerType' has a wrong offset!");

// Class Squad.SQScoreboardWidgetStyle
// 0x0108 (0x0138 - 0x0030)
class USQScoreboardWidgetStyle final : public USlateWidgetStyleContainerBase
{
public:
	struct FSQScoreboardStyle                     ScoreboardStyle;                                   // 0x0030(0x0108)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQScoreboardWidgetStyle">();
	}
	static class USQScoreboardWidgetStyle* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQScoreboardWidgetStyle>();
	}
};
static_assert(alignof(USQScoreboardWidgetStyle) == 0x000008, "Wrong alignment on USQScoreboardWidgetStyle");
static_assert(sizeof(USQScoreboardWidgetStyle) == 0x000138, "Wrong size on USQScoreboardWidgetStyle");
static_assert(offsetof(USQScoreboardWidgetStyle, ScoreboardStyle) == 0x000030, "Member 'USQScoreboardWidgetStyle::ScoreboardStyle' has a wrong offset!");

// Class Squad.SQScriptAction
// 0x0008 (0x0030 - 0x0028)
class USQScriptAction final : public UObject
{
public:
	int32                                         MaxActionExecutions;                               // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1369[0x4];                                     // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BPExecute(class AActor* ContextObject);
	void Cancel();
	void Execute(class AActor* Context);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQScriptAction">();
	}
	static class USQScriptAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQScriptAction>();
	}
};
static_assert(alignof(USQScriptAction) == 0x000008, "Wrong alignment on USQScriptAction");
static_assert(sizeof(USQScriptAction) == 0x000030, "Wrong size on USQScriptAction");
static_assert(offsetof(USQScriptAction, MaxActionExecutions) == 0x000028, "Member 'USQScriptAction::MaxActionExecutions' has a wrong offset!");

// Class Squad.SQServerBrowserWidget
// 0x0060 (0x02C8 - 0x0268)
class USQServerBrowserWidget : public USQUserWidget
{
public:
	ESQSortStates                                 ServerNameSortedState;                             // 0x0268(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQSortStates                                 MapNameSortedState;                                // 0x0269(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQSortStates                                 GameModeSortedState;                               // 0x026A(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQSortStates                                 NumPlayersSortedState;                             // 0x026B(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQSortStates                                 PingSortedState;                                   // 0x026C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_136A[0x3];                                     // 0x026D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USQServerListItemWidget*>        SessionList;                                       // 0x0270(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UUserWidget*>                    SessionSortList;                                   // 0x0280(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bCanStartNewFindSessions;                          // 0x0290(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_136B[0x3];                                     // 0x0291(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PingFilterAmount;                                  // 0x0294(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USQFindSessionsCallbackProxy*           CurrentCallback;                                   // 0x0298(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_136C[0x28];                                    // 0x02A0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FString GetCurrentSearchString();
	void OnFailure();
	void OnFindSessionsCancelled();
	void OnFindSessionsCompleted(const TArray<struct FBlueprintSessionResult>& Results, bool bSuccess);
	void OnFindSessionsNewSessionUpdate(const struct FBlueprintSessionResult& SessionResult);
	void OnSuccess(const TArray<struct FBlueprintSessionResult>& Results);
	void OnUpdateSession(const TArray<struct FBlueprintSessionResult>& Results);
	void ResetSortedState();
	void SortByName(ESQSortLevels SortByColumn, bool bIsAscending);
	void SortGameMode(bool bIsAscending);
	void SortMapName(bool bIsAscending);
	void SortNumPlayers(bool bIsAscending);
	void SortPing(bool bIsAscending);
	void SortServerName(bool bIsAscending);
	void StartFindSessions(bool bWithFilters, bool bIsLicensedServerSearch, bool bIsFavoriteServerSearch, bool bIsRecentServerSearch);
	void UpdateIndexes();
	void UpdateSortedState(ESQSortLevels SortLevel);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQServerBrowserWidget">();
	}
	static class USQServerBrowserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQServerBrowserWidget>();
	}
};
static_assert(alignof(USQServerBrowserWidget) == 0x000008, "Wrong alignment on USQServerBrowserWidget");
static_assert(sizeof(USQServerBrowserWidget) == 0x0002C8, "Wrong size on USQServerBrowserWidget");
static_assert(offsetof(USQServerBrowserWidget, ServerNameSortedState) == 0x000268, "Member 'USQServerBrowserWidget::ServerNameSortedState' has a wrong offset!");
static_assert(offsetof(USQServerBrowserWidget, MapNameSortedState) == 0x000269, "Member 'USQServerBrowserWidget::MapNameSortedState' has a wrong offset!");
static_assert(offsetof(USQServerBrowserWidget, GameModeSortedState) == 0x00026A, "Member 'USQServerBrowserWidget::GameModeSortedState' has a wrong offset!");
static_assert(offsetof(USQServerBrowserWidget, NumPlayersSortedState) == 0x00026B, "Member 'USQServerBrowserWidget::NumPlayersSortedState' has a wrong offset!");
static_assert(offsetof(USQServerBrowserWidget, PingSortedState) == 0x00026C, "Member 'USQServerBrowserWidget::PingSortedState' has a wrong offset!");
static_assert(offsetof(USQServerBrowserWidget, SessionList) == 0x000270, "Member 'USQServerBrowserWidget::SessionList' has a wrong offset!");
static_assert(offsetof(USQServerBrowserWidget, SessionSortList) == 0x000280, "Member 'USQServerBrowserWidget::SessionSortList' has a wrong offset!");
static_assert(offsetof(USQServerBrowserWidget, bCanStartNewFindSessions) == 0x000290, "Member 'USQServerBrowserWidget::bCanStartNewFindSessions' has a wrong offset!");
static_assert(offsetof(USQServerBrowserWidget, PingFilterAmount) == 0x000294, "Member 'USQServerBrowserWidget::PingFilterAmount' has a wrong offset!");
static_assert(offsetof(USQServerBrowserWidget, CurrentCallback) == 0x000298, "Member 'USQServerBrowserWidget::CurrentCallback' has a wrong offset!");

// Class Squad.SQSessionInfo
// 0x0220 (0x0248 - 0x0028)
class USQSessionInfo final : public UObject
{
public:
	struct FBlueprintSessionResult                SessionResult;                                     // 0x0028(0x0108)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 ServerName;                                        // 0x0130(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAnticheatProtected;                               // 0x0140(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsModded;                                         // 0x0141(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWhitelisted;                                    // 0x0142(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_136E[0x5];                                     // 0x0143(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameVersion;                                       // 0x0148(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQSessionFlagStruct                   SessionFlagStruct;                                 // 0x0158(0x0008)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ServerHealth;                                      // 0x0160(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLicensedServer;                                   // 0x0164(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_136F[0x3];                                     // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MatchTimeout;                                      // 0x0168(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPasswordProtected;                                // 0x016C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1370[0x3];                                     // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NextLayerName;                                     // 0x0170(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LayerNameString;                                   // 0x0180(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQLayer*                               Layer;                                             // 0x0190(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   LayerName;                                         // 0x0198(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FTimespan                              PlayedTime;                                        // 0x01B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQFactionSetup*                        TeamOneFactionSetup;                               // 0x01B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQFactionSetup*                        TeamTwoFactionSetup;                               // 0x01C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   GameMode;                                          // 0x01C8(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 GameModeString;                                    // 0x01E0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ping;                                              // 0x01F0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPlayers;                                        // 0x01F4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNumPlayers;                                     // 0x01F8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumReservedSlots;                                  // 0x01FC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumQueuedTotal;                                    // 0x0200(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumQueuedPublic;                                   // 0x0204(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PublicQueueLimit;                                  // 0x0208(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumQueuedReservedMembers;                          // 0x020C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQModInfoRequest                      ModDetailsRequest;                                 // 0x0210(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FSQModLoadProgress>             ModLoadProgressArray;                              // 0x0228(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQServerTag>                   ServerTags;                                        // 0x0238(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	TArray<struct FSQModLoadProgress> CheckMissingMods();
	bool SetSession(const struct FBlueprintSessionResult& Result);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSessionInfo">();
	}
	static class USQSessionInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSessionInfo>();
	}
};
static_assert(alignof(USQSessionInfo) == 0x000008, "Wrong alignment on USQSessionInfo");
static_assert(sizeof(USQSessionInfo) == 0x000248, "Wrong size on USQSessionInfo");
static_assert(offsetof(USQSessionInfo, SessionResult) == 0x000028, "Member 'USQSessionInfo::SessionResult' has a wrong offset!");
static_assert(offsetof(USQSessionInfo, ServerName) == 0x000130, "Member 'USQSessionInfo::ServerName' has a wrong offset!");
static_assert(offsetof(USQSessionInfo, bAnticheatProtected) == 0x000140, "Member 'USQSessionInfo::bAnticheatProtected' has a wrong offset!");
static_assert(offsetof(USQSessionInfo, bIsModded) == 0x000141, "Member 'USQSessionInfo::bIsModded' has a wrong offset!");
static_assert(offsetof(USQSessionInfo, bIsWhitelisted) == 0x000142, "Member 'USQSessionInfo::bIsWhitelisted' has a wrong offset!");
static_assert(offsetof(USQSessionInfo, GameVersion) == 0x000148, "Member 'USQSessionInfo::GameVersion' has a wrong offset!");
static_assert(offsetof(USQSessionInfo, SessionFlagStruct) == 0x000158, "Member 'USQSessionInfo::SessionFlagStruct' has a wrong offset!");
static_assert(offsetof(USQSessionInfo, ServerHealth) == 0x000160, "Member 'USQSessionInfo::ServerHealth' has a wrong offset!");
static_assert(offsetof(USQSessionInfo, bLicensedServer) == 0x000164, "Member 'USQSessionInfo::bLicensedServer' has a wrong offset!");
static_assert(offsetof(USQSessionInfo, MatchTimeout) == 0x000168, "Member 'USQSessionInfo::MatchTimeout' has a wrong offset!");
static_assert(offsetof(USQSessionInfo, bPasswordProtected) == 0x00016C, "Member 'USQSessionInfo::bPasswordProtected' has a wrong offset!");
static_assert(offsetof(USQSessionInfo, NextLayerName) == 0x000170, "Member 'USQSessionInfo::NextLayerName' has a wrong offset!");
static_assert(offsetof(USQSessionInfo, LayerNameString) == 0x000180, "Member 'USQSessionInfo::LayerNameString' has a wrong offset!");
static_assert(offsetof(USQSessionInfo, Layer) == 0x000190, "Member 'USQSessionInfo::Layer' has a wrong offset!");
static_assert(offsetof(USQSessionInfo, LayerName) == 0x000198, "Member 'USQSessionInfo::LayerName' has a wrong offset!");
static_assert(offsetof(USQSessionInfo, PlayedTime) == 0x0001B0, "Member 'USQSessionInfo::PlayedTime' has a wrong offset!");
static_assert(offsetof(USQSessionInfo, TeamOneFactionSetup) == 0x0001B8, "Member 'USQSessionInfo::TeamOneFactionSetup' has a wrong offset!");
static_assert(offsetof(USQSessionInfo, TeamTwoFactionSetup) == 0x0001C0, "Member 'USQSessionInfo::TeamTwoFactionSetup' has a wrong offset!");
static_assert(offsetof(USQSessionInfo, GameMode) == 0x0001C8, "Member 'USQSessionInfo::GameMode' has a wrong offset!");
static_assert(offsetof(USQSessionInfo, GameModeString) == 0x0001E0, "Member 'USQSessionInfo::GameModeString' has a wrong offset!");
static_assert(offsetof(USQSessionInfo, Ping) == 0x0001F0, "Member 'USQSessionInfo::Ping' has a wrong offset!");
static_assert(offsetof(USQSessionInfo, NumPlayers) == 0x0001F4, "Member 'USQSessionInfo::NumPlayers' has a wrong offset!");
static_assert(offsetof(USQSessionInfo, MaxNumPlayers) == 0x0001F8, "Member 'USQSessionInfo::MaxNumPlayers' has a wrong offset!");
static_assert(offsetof(USQSessionInfo, NumReservedSlots) == 0x0001FC, "Member 'USQSessionInfo::NumReservedSlots' has a wrong offset!");
static_assert(offsetof(USQSessionInfo, NumQueuedTotal) == 0x000200, "Member 'USQSessionInfo::NumQueuedTotal' has a wrong offset!");
static_assert(offsetof(USQSessionInfo, NumQueuedPublic) == 0x000204, "Member 'USQSessionInfo::NumQueuedPublic' has a wrong offset!");
static_assert(offsetof(USQSessionInfo, PublicQueueLimit) == 0x000208, "Member 'USQSessionInfo::PublicQueueLimit' has a wrong offset!");
static_assert(offsetof(USQSessionInfo, NumQueuedReservedMembers) == 0x00020C, "Member 'USQSessionInfo::NumQueuedReservedMembers' has a wrong offset!");
static_assert(offsetof(USQSessionInfo, ModDetailsRequest) == 0x000210, "Member 'USQSessionInfo::ModDetailsRequest' has a wrong offset!");
static_assert(offsetof(USQSessionInfo, ModLoadProgressArray) == 0x000228, "Member 'USQSessionInfo::ModLoadProgressArray' has a wrong offset!");
static_assert(offsetof(USQSessionInfo, ServerTags) == 0x000238, "Member 'USQSessionInfo::ServerTags' has a wrong offset!");

// Class Squad.SQSettingsService
// 0x0000 (0x0028 - 0x0028)
class USQSettingsService final : public UBlueprintFunctionLibrary
{
public:
	static bool TryGetAvailableFactions(const class UObject* WorldContextObject, TSubclassOf<class USQFaction> FactionClass, TArray<class USQFaction*>* OutAvailableFactions);
	static bool TryGetAvailableFactionSetups(const class UObject* WorldContextObject, TSubclassOf<class USQFactionSetup> FactionSetupClass, TArray<class USQFactionSetup*>* OutAvailableFactionSetups);
	static bool TryGetAvailableLayers(const class UObject* WorldContextObject, TSubclassOf<class USQLayer> LayerClass, TArray<class USQLayer*>* OutAvailableLayers);
	static bool TryGetAvailableLevels(const class UObject* WorldContextObject, TSubclassOf<class USQLevel> LevelClass, TArray<class USQLevel*>* OutAvailableLevels);
	static bool TryGetCurrentFaction(const class UObject* WorldContextObject, int32 TeamId, TSubclassOf<class USQFaction> FactionClass, class USQFaction** OutFaction);
	static bool TryGetCurrentFactionSetup(const class UObject* WorldContextObject, int32 TeamId, TSubclassOf<class USQFactionSetup> FactionSetupClass, class USQFactionSetup** OutFactionSetup);
	static bool TryGetCurrentLayer(const class UObject* WorldContextObject, TSubclassOf<class USQLayer> LayerClass, class USQLayer** OutLayer);
	static bool TryGetCurrentLevel(const class UObject* WorldContextObject, TSubclassOf<class USQLevel> LevelClass, class USQLevel** OutLevel);
	static bool TryGetFaction(const class UObject* WorldContextObject, class FName FactionID, TSubclassOf<class USQFaction> FactionClass, class USQFaction** OutFaction);
	static bool TryGetFactionSetup(const class UObject* WorldContextObject, class FName FactionSetupId, TSubclassOf<class USQFactionSetup> FactionSetupClass, class USQFactionSetup** OutFactionSetup);
	static bool TryGetLocalPlayerFaction(const class UObject* WorldContextObject, TSubclassOf<class USQFaction> FactionClass, class USQFaction** OutFaction);
	static bool TryGetLocalPlayerFactionSetup(const class UObject* WorldContextObject, TSubclassOf<class USQFactionSetup> FactionSetupClass, class USQFactionSetup** OutFactionSetup);
	static bool TryGetLocalPlayerTeamLayerConfig(const class UObject* WorldContextObject, TSubclassOf<class USQLayerTeamConfig> LayerTeamConfigClass, class USQLayerTeamConfig** OutTeamConfig);
	static bool TryGetTeamLayerConfig(const class UObject* WorldContextObject, int32 TeamId, TSubclassOf<class USQLayerTeamConfig> LayerTeamConfigClass, class USQLayerTeamConfig** OutTeamConfig);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSettingsService">();
	}
	static class USQSettingsService* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSettingsService>();
	}
};
static_assert(alignof(USQSettingsService) == 0x000008, "Wrong alignment on USQSettingsService");
static_assert(sizeof(USQSettingsService) == 0x000028, "Wrong size on USQSettingsService");

// Class Squad.SQSettingsSubsystem
// 0x0020 (0x0050 - 0x0030)
class USQSettingsSubsystem final : public UGameInstanceSubsystem
{
public:
	FMulticastInlineDelegateProperty_             OnKeybindChanged;                                  // 0x0030(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnScopeClarityToggled;                             // 0x0040(0x0010)(ZeroConstructor, Transient, InstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSettingsSubsystem">();
	}
	static class USQSettingsSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSettingsSubsystem>();
	}
};
static_assert(alignof(USQSettingsSubsystem) == 0x000008, "Wrong alignment on USQSettingsSubsystem");
static_assert(sizeof(USQSettingsSubsystem) == 0x000050, "Wrong size on USQSettingsSubsystem");
static_assert(offsetof(USQSettingsSubsystem, OnKeybindChanged) == 0x000030, "Member 'USQSettingsSubsystem::OnKeybindChanged' has a wrong offset!");
static_assert(offsetof(USQSettingsSubsystem, OnScopeClarityToggled) == 0x000040, "Member 'USQSettingsSubsystem::OnScopeClarityToggled' has a wrong offset!");

// Class Squad.SQShovelStaticInfo
// 0x0030 (0x0620 - 0x05F0)
class USQShovelStaticInfo : public USQItemStaticInfo
{
public:
	class UAnimMontage*                           DigWeaponMontage;                                  // 0x05F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Dig1pMontage;                                      // 0x05F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Dig3pMontage;                                      // 0x0600(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           DestroyWeaponMontage;                              // 0x0608(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Destroy1pMontage;                                  // 0x0610(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Destroy3pMontage;                                  // 0x0618(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQShovelStaticInfo">();
	}
	static class USQShovelStaticInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQShovelStaticInfo>();
	}
};
static_assert(alignof(USQShovelStaticInfo) == 0x000008, "Wrong alignment on USQShovelStaticInfo");
static_assert(sizeof(USQShovelStaticInfo) == 0x000620, "Wrong size on USQShovelStaticInfo");
static_assert(offsetof(USQShovelStaticInfo, DigWeaponMontage) == 0x0005F0, "Member 'USQShovelStaticInfo::DigWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQShovelStaticInfo, Dig1pMontage) == 0x0005F8, "Member 'USQShovelStaticInfo::Dig1pMontage' has a wrong offset!");
static_assert(offsetof(USQShovelStaticInfo, Dig3pMontage) == 0x000600, "Member 'USQShovelStaticInfo::Dig3pMontage' has a wrong offset!");
static_assert(offsetof(USQShovelStaticInfo, DestroyWeaponMontage) == 0x000608, "Member 'USQShovelStaticInfo::DestroyWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQShovelStaticInfo, Destroy1pMontage) == 0x000610, "Member 'USQShovelStaticInfo::Destroy1pMontage' has a wrong offset!");
static_assert(offsetof(USQShovelStaticInfo, Destroy3pMontage) == 0x000618, "Member 'USQShovelStaticInfo::Destroy3pMontage' has a wrong offset!");

// Class Squad.SQSignificanceManager
// 0x0000 (0x0120 - 0x0120)
class USQSignificanceManager final : public USignificanceManager
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSignificanceManager">();
	}
	static class USQSignificanceManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSignificanceManager>();
	}
};
static_assert(alignof(USQSignificanceManager) == 0x000008, "Wrong alignment on USQSignificanceManager");
static_assert(sizeof(USQSignificanceManager) == 0x000120, "Wrong size on USQSignificanceManager");

// Class Squad.SQSimpleMovementComponent
// 0x0040 (0x01D8 - 0x0198)
class USQSimpleMovementComponent final : public USQMovementComponentBase
{
public:
	TScriptInterface<class ISQMeshOwnerInterface> UpdatedMeshOwner;                                  // 0x0198(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1383[0x24];                                    // 0x01A8(0x0024)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LocationInputAcceleration;                         // 0x01CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationInputAcceleration;                         // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1384[0x4];                                     // 0x01D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddMoveInput(const struct FVector& InMoveInput);
	void AddRotationInput(const struct FRotator& InRotationInput);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSimpleMovementComponent">();
	}
	static class USQSimpleMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSimpleMovementComponent>();
	}
};
static_assert(alignof(USQSimpleMovementComponent) == 0x000008, "Wrong alignment on USQSimpleMovementComponent");
static_assert(sizeof(USQSimpleMovementComponent) == 0x0001D8, "Wrong size on USQSimpleMovementComponent");
static_assert(offsetof(USQSimpleMovementComponent, UpdatedMeshOwner) == 0x000198, "Member 'USQSimpleMovementComponent::UpdatedMeshOwner' has a wrong offset!");
static_assert(offsetof(USQSimpleMovementComponent, LocationInputAcceleration) == 0x0001CC, "Member 'USQSimpleMovementComponent::LocationInputAcceleration' has a wrong offset!");
static_assert(offsetof(USQSimpleMovementComponent, RotationInputAcceleration) == 0x0001D0, "Member 'USQSimpleMovementComponent::RotationInputAcceleration' has a wrong offset!");

// Class Squad.SQSmokeGrenade
// 0x0010 (0x0580 - 0x0570)
class ASQSmokeGrenade : public ASQGrenade
{
public:
	struct FLinearColor                           SmokeColor;                                        // 0x0570(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSmokeGrenade">();
	}
	static class ASQSmokeGrenade* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQSmokeGrenade>();
	}
};
static_assert(alignof(ASQSmokeGrenade) == 0x000008, "Wrong alignment on ASQSmokeGrenade");
static_assert(sizeof(ASQSmokeGrenade) == 0x000580, "Wrong size on ASQSmokeGrenade");
static_assert(offsetof(ASQSmokeGrenade, SmokeColor) == 0x000570, "Member 'ASQSmokeGrenade::SmokeColor' has a wrong offset!");

// Class Squad.SQSmokeGrenadeProjectile
// 0x0040 (0x04F8 - 0x04B8)
class ASQSmokeGrenadeProjectile : public ASQGrenadeProjectile
{
public:
	uint8                                         Pad_1385[0x8];                                     // 0x04B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               SmokeCloud;                                        // 0x04C0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      NiagaraSmokeCloud;                                 // 0x04C8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        SmokeSound;                                        // 0x04D0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SmokeColor;                                        // 0x04D8(0x0010)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResyncAllowedLeeway;                               // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResyncTimeDilation;                                // 0x04EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeDetonated;                                     // 0x04F0(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1386[0x4];                                     // 0x04F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ResetTimeDilation();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSmokeGrenadeProjectile">();
	}
	static class ASQSmokeGrenadeProjectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQSmokeGrenadeProjectile>();
	}
};
static_assert(alignof(ASQSmokeGrenadeProjectile) == 0x000008, "Wrong alignment on ASQSmokeGrenadeProjectile");
static_assert(sizeof(ASQSmokeGrenadeProjectile) == 0x0004F8, "Wrong size on ASQSmokeGrenadeProjectile");
static_assert(offsetof(ASQSmokeGrenadeProjectile, SmokeCloud) == 0x0004C0, "Member 'ASQSmokeGrenadeProjectile::SmokeCloud' has a wrong offset!");
static_assert(offsetof(ASQSmokeGrenadeProjectile, NiagaraSmokeCloud) == 0x0004C8, "Member 'ASQSmokeGrenadeProjectile::NiagaraSmokeCloud' has a wrong offset!");
static_assert(offsetof(ASQSmokeGrenadeProjectile, SmokeSound) == 0x0004D0, "Member 'ASQSmokeGrenadeProjectile::SmokeSound' has a wrong offset!");
static_assert(offsetof(ASQSmokeGrenadeProjectile, SmokeColor) == 0x0004D8, "Member 'ASQSmokeGrenadeProjectile::SmokeColor' has a wrong offset!");
static_assert(offsetof(ASQSmokeGrenadeProjectile, ResyncAllowedLeeway) == 0x0004E8, "Member 'ASQSmokeGrenadeProjectile::ResyncAllowedLeeway' has a wrong offset!");
static_assert(offsetof(ASQSmokeGrenadeProjectile, ResyncTimeDilation) == 0x0004EC, "Member 'ASQSmokeGrenadeProjectile::ResyncTimeDilation' has a wrong offset!");
static_assert(offsetof(ASQSmokeGrenadeProjectile, TimeDetonated) == 0x0004F0, "Member 'ASQSmokeGrenadeProjectile::TimeDetonated' has a wrong offset!");

// Class Squad.SQSoldierStaticInfo
// 0x0030 (0x0060 - 0x0030)
class USQSoldierStaticInfo final : public UDataAsset
{
public:
	float                                         MaximumReviveTime;                                 // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReviveRecoveryPerSecond;                           // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizontalFallingDamageMultiplier;                 // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumHorizontalSafeFallingSpeed;                 // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DamageRevivePenaltyCurve;                          // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrabbingDistance;                                  // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DraggingDropThresholdAngle;                        // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrabbingSphereRadius;                              // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinBipodPronePitch;                                // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxBipodPronePitch;                                // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1387[0x4];                                     // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSoldierStaticInfo">();
	}
	static class USQSoldierStaticInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSoldierStaticInfo>();
	}
};
static_assert(alignof(USQSoldierStaticInfo) == 0x000008, "Wrong alignment on USQSoldierStaticInfo");
static_assert(sizeof(USQSoldierStaticInfo) == 0x000060, "Wrong size on USQSoldierStaticInfo");
static_assert(offsetof(USQSoldierStaticInfo, MaximumReviveTime) == 0x000030, "Member 'USQSoldierStaticInfo::MaximumReviveTime' has a wrong offset!");
static_assert(offsetof(USQSoldierStaticInfo, ReviveRecoveryPerSecond) == 0x000034, "Member 'USQSoldierStaticInfo::ReviveRecoveryPerSecond' has a wrong offset!");
static_assert(offsetof(USQSoldierStaticInfo, HorizontalFallingDamageMultiplier) == 0x000038, "Member 'USQSoldierStaticInfo::HorizontalFallingDamageMultiplier' has a wrong offset!");
static_assert(offsetof(USQSoldierStaticInfo, MaximumHorizontalSafeFallingSpeed) == 0x00003C, "Member 'USQSoldierStaticInfo::MaximumHorizontalSafeFallingSpeed' has a wrong offset!");
static_assert(offsetof(USQSoldierStaticInfo, DamageRevivePenaltyCurve) == 0x000040, "Member 'USQSoldierStaticInfo::DamageRevivePenaltyCurve' has a wrong offset!");
static_assert(offsetof(USQSoldierStaticInfo, GrabbingDistance) == 0x000048, "Member 'USQSoldierStaticInfo::GrabbingDistance' has a wrong offset!");
static_assert(offsetof(USQSoldierStaticInfo, DraggingDropThresholdAngle) == 0x00004C, "Member 'USQSoldierStaticInfo::DraggingDropThresholdAngle' has a wrong offset!");
static_assert(offsetof(USQSoldierStaticInfo, GrabbingSphereRadius) == 0x000050, "Member 'USQSoldierStaticInfo::GrabbingSphereRadius' has a wrong offset!");
static_assert(offsetof(USQSoldierStaticInfo, MinBipodPronePitch) == 0x000054, "Member 'USQSoldierStaticInfo::MinBipodPronePitch' has a wrong offset!");
static_assert(offsetof(USQSoldierStaticInfo, MaxBipodPronePitch) == 0x000058, "Member 'USQSoldierStaticInfo::MaxBipodPronePitch' has a wrong offset!");

// Class Squad.SQSoldierRagdollAudioComponent
// 0x0070 (0x08D0 - 0x0860)
class USQSoldierRagdollAudioComponent final : public UAudioComponent
{
public:
	class UDataTable*                             RagdollHitEffectsTable;                            // 0x0860(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RagdollHitEffectsTable_DefaultRow;                 // 0x0868(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistanceToPlayAudioFromLocalPlayer;             // 0x0870(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTimeBetweenHits;                                // 0x0874(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           Impact_StrengthVolumeInterpolation;                // 0x0878(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Impact_ForceInputRange;                            // 0x0880(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Impact_ForceOutputRange;                           // 0x0888(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Scrape_VelocityInputRange;                         // 0x0890(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Scrape_VelocityOutputRange;                        // 0x0898(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scrape_FadeoutDelay;                               // 0x08A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scrape_FadeoutDuration;                            // 0x08A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Scrape_ParameterName;                              // 0x08A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScrape_ParameterIsVolume;                         // 0x08B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1388[0x3];                                     // 0x08B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AfterDeathDeactivateTime;                          // 0x08B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1389[0x18];                                    // 0x08B8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSoldierRagdollAudioComponent">();
	}
	static class USQSoldierRagdollAudioComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSoldierRagdollAudioComponent>();
	}
};
static_assert(alignof(USQSoldierRagdollAudioComponent) == 0x000010, "Wrong alignment on USQSoldierRagdollAudioComponent");
static_assert(sizeof(USQSoldierRagdollAudioComponent) == 0x0008D0, "Wrong size on USQSoldierRagdollAudioComponent");
static_assert(offsetof(USQSoldierRagdollAudioComponent, RagdollHitEffectsTable) == 0x000860, "Member 'USQSoldierRagdollAudioComponent::RagdollHitEffectsTable' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollAudioComponent, RagdollHitEffectsTable_DefaultRow) == 0x000868, "Member 'USQSoldierRagdollAudioComponent::RagdollHitEffectsTable_DefaultRow' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollAudioComponent, MaxDistanceToPlayAudioFromLocalPlayer) == 0x000870, "Member 'USQSoldierRagdollAudioComponent::MaxDistanceToPlayAudioFromLocalPlayer' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollAudioComponent, MinTimeBetweenHits) == 0x000874, "Member 'USQSoldierRagdollAudioComponent::MinTimeBetweenHits' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollAudioComponent, Impact_StrengthVolumeInterpolation) == 0x000878, "Member 'USQSoldierRagdollAudioComponent::Impact_StrengthVolumeInterpolation' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollAudioComponent, Impact_ForceInputRange) == 0x000880, "Member 'USQSoldierRagdollAudioComponent::Impact_ForceInputRange' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollAudioComponent, Impact_ForceOutputRange) == 0x000888, "Member 'USQSoldierRagdollAudioComponent::Impact_ForceOutputRange' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollAudioComponent, Scrape_VelocityInputRange) == 0x000890, "Member 'USQSoldierRagdollAudioComponent::Scrape_VelocityInputRange' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollAudioComponent, Scrape_VelocityOutputRange) == 0x000898, "Member 'USQSoldierRagdollAudioComponent::Scrape_VelocityOutputRange' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollAudioComponent, Scrape_FadeoutDelay) == 0x0008A0, "Member 'USQSoldierRagdollAudioComponent::Scrape_FadeoutDelay' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollAudioComponent, Scrape_FadeoutDuration) == 0x0008A4, "Member 'USQSoldierRagdollAudioComponent::Scrape_FadeoutDuration' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollAudioComponent, Scrape_ParameterName) == 0x0008A8, "Member 'USQSoldierRagdollAudioComponent::Scrape_ParameterName' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollAudioComponent, bScrape_ParameterIsVolume) == 0x0008B0, "Member 'USQSoldierRagdollAudioComponent::bScrape_ParameterIsVolume' has a wrong offset!");
static_assert(offsetof(USQSoldierRagdollAudioComponent, AfterDeathDeactivateTime) == 0x0008B4, "Member 'USQSoldierRagdollAudioComponent::AfterDeathDeactivateTime' has a wrong offset!");

// Class Squad.SQSoundNodeEmitterListenerAudioVolumeSwitch
// 0x0008 (0x0050 - 0x0048)
class USQSoundNodeEmitterListenerAudioVolumeSwitch final : public USoundNode
{
public:
	ESQAudioVolumeType                            TestAudioVolumeType;                               // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsListener;                                       // 0x0049(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_138A[0x6];                                     // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSoundNodeEmitterListenerAudioVolumeSwitch">();
	}
	static class USQSoundNodeEmitterListenerAudioVolumeSwitch* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSoundNodeEmitterListenerAudioVolumeSwitch>();
	}
};
static_assert(alignof(USQSoundNodeEmitterListenerAudioVolumeSwitch) == 0x000008, "Wrong alignment on USQSoundNodeEmitterListenerAudioVolumeSwitch");
static_assert(sizeof(USQSoundNodeEmitterListenerAudioVolumeSwitch) == 0x000050, "Wrong size on USQSoundNodeEmitterListenerAudioVolumeSwitch");
static_assert(offsetof(USQSoundNodeEmitterListenerAudioVolumeSwitch, TestAudioVolumeType) == 0x000048, "Member 'USQSoundNodeEmitterListenerAudioVolumeSwitch::TestAudioVolumeType' has a wrong offset!");
static_assert(offsetof(USQSoundNodeEmitterListenerAudioVolumeSwitch, bIsListener) == 0x000049, "Member 'USQSoundNodeEmitterListenerAudioVolumeSwitch::bIsListener' has a wrong offset!");

// Class Squad.SQSoundNodeFixedDistanceCrossFade
// 0x0018 (0x0060 - 0x0048)
class USQSoundNodeFixedDistanceCrossFade final : public USoundNode
{
public:
	TArray<struct FSQDistanceDatum>               CrossFadeInput;                                    // 0x0048(0x0010)(Edit, ExportObject, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         TestDistance;                                      // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_138B[0x4];                                     // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSoundNodeFixedDistanceCrossFade">();
	}
	static class USQSoundNodeFixedDistanceCrossFade* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSoundNodeFixedDistanceCrossFade>();
	}
};
static_assert(alignof(USQSoundNodeFixedDistanceCrossFade) == 0x000008, "Wrong alignment on USQSoundNodeFixedDistanceCrossFade");
static_assert(sizeof(USQSoundNodeFixedDistanceCrossFade) == 0x000060, "Wrong size on USQSoundNodeFixedDistanceCrossFade");
static_assert(offsetof(USQSoundNodeFixedDistanceCrossFade, CrossFadeInput) == 0x000048, "Member 'USQSoundNodeFixedDistanceCrossFade::CrossFadeInput' has a wrong offset!");
static_assert(offsetof(USQSoundNodeFixedDistanceCrossFade, TestDistance) == 0x000058, "Member 'USQSoundNodeFixedDistanceCrossFade::TestDistance' has a wrong offset!");

// Class Squad.SQSoundNodeFixedDistanceSwitch
// 0x0028 (0x0070 - 0x0048)
class USQSoundNodeFixedDistanceSwitch final : public USoundNode
{
public:
	TArray<float>                                 TransitionDistancesInMeters;                       // 0x0048(0x0010)(Edit, ExportObject, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 InputVolumes;                                      // 0x0058(0x0010)(Edit, ExportObject, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         TestDistance;                                      // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_138C[0x4];                                     // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSoundNodeFixedDistanceSwitch">();
	}
	static class USQSoundNodeFixedDistanceSwitch* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSoundNodeFixedDistanceSwitch>();
	}
};
static_assert(alignof(USQSoundNodeFixedDistanceSwitch) == 0x000008, "Wrong alignment on USQSoundNodeFixedDistanceSwitch");
static_assert(sizeof(USQSoundNodeFixedDistanceSwitch) == 0x000070, "Wrong size on USQSoundNodeFixedDistanceSwitch");
static_assert(offsetof(USQSoundNodeFixedDistanceSwitch, TransitionDistancesInMeters) == 0x000048, "Member 'USQSoundNodeFixedDistanceSwitch::TransitionDistancesInMeters' has a wrong offset!");
static_assert(offsetof(USQSoundNodeFixedDistanceSwitch, InputVolumes) == 0x000058, "Member 'USQSoundNodeFixedDistanceSwitch::InputVolumes' has a wrong offset!");
static_assert(offsetof(USQSoundNodeFixedDistanceSwitch, TestDistance) == 0x000068, "Member 'USQSoundNodeFixedDistanceSwitch::TestDistance' has a wrong offset!");

// Class Squad.SQSoundNodeFlyBy
// 0x0018 (0x0060 - 0x0048)
class USQSoundNodeFlyBy final : public USoundNode
{
public:
	float                                         SpeedOfSound;                                      // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MidpointTime;                                      // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DopplerIntensity;                                  // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseListenerLocationForSoundSource;                // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideSpatialization;                           // 0x0055(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSpatialization;                                // 0x0056(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_138D[0x1];                                     // 0x0057(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TestPitchRelativeVelocityInMeters;                 // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TestStartTime;                                     // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSoundNodeFlyBy">();
	}
	static class USQSoundNodeFlyBy* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSoundNodeFlyBy>();
	}
};
static_assert(alignof(USQSoundNodeFlyBy) == 0x000008, "Wrong alignment on USQSoundNodeFlyBy");
static_assert(sizeof(USQSoundNodeFlyBy) == 0x000060, "Wrong size on USQSoundNodeFlyBy");
static_assert(offsetof(USQSoundNodeFlyBy, SpeedOfSound) == 0x000048, "Member 'USQSoundNodeFlyBy::SpeedOfSound' has a wrong offset!");
static_assert(offsetof(USQSoundNodeFlyBy, MidpointTime) == 0x00004C, "Member 'USQSoundNodeFlyBy::MidpointTime' has a wrong offset!");
static_assert(offsetof(USQSoundNodeFlyBy, DopplerIntensity) == 0x000050, "Member 'USQSoundNodeFlyBy::DopplerIntensity' has a wrong offset!");
static_assert(offsetof(USQSoundNodeFlyBy, bUseListenerLocationForSoundSource) == 0x000054, "Member 'USQSoundNodeFlyBy::bUseListenerLocationForSoundSource' has a wrong offset!");
static_assert(offsetof(USQSoundNodeFlyBy, bOverrideSpatialization) == 0x000055, "Member 'USQSoundNodeFlyBy::bOverrideSpatialization' has a wrong offset!");
static_assert(offsetof(USQSoundNodeFlyBy, bUseSpatialization) == 0x000056, "Member 'USQSoundNodeFlyBy::bUseSpatialization' has a wrong offset!");
static_assert(offsetof(USQSoundNodeFlyBy, TestPitchRelativeVelocityInMeters) == 0x000058, "Member 'USQSoundNodeFlyBy::TestPitchRelativeVelocityInMeters' has a wrong offset!");
static_assert(offsetof(USQSoundNodeFlyBy, TestStartTime) == 0x00005C, "Member 'USQSoundNodeFlyBy::TestStartTime' has a wrong offset!");

// Class Squad.SQSoundNodeListenerType
// 0x0008 (0x0050 - 0x0048)
class USQSoundNodeListenerType final : public USoundNode
{
public:
	bool                                          bLooping;                                          // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRestartSoundWaveWhenListenerTypeChanges;          // 0x0049(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_138E[0x2];                                     // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ListenerTypeCheckFrequency;                        // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSoundNodeListenerType">();
	}
	static class USQSoundNodeListenerType* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSoundNodeListenerType>();
	}
};
static_assert(alignof(USQSoundNodeListenerType) == 0x000008, "Wrong alignment on USQSoundNodeListenerType");
static_assert(sizeof(USQSoundNodeListenerType) == 0x000050, "Wrong size on USQSoundNodeListenerType");
static_assert(offsetof(USQSoundNodeListenerType, bLooping) == 0x000048, "Member 'USQSoundNodeListenerType::bLooping' has a wrong offset!");
static_assert(offsetof(USQSoundNodeListenerType, bRestartSoundWaveWhenListenerTypeChanges) == 0x000049, "Member 'USQSoundNodeListenerType::bRestartSoundWaveWhenListenerTypeChanges' has a wrong offset!");
static_assert(offsetof(USQSoundNodeListenerType, ListenerTypeCheckFrequency) == 0x00004C, "Member 'USQSoundNodeListenerType::ListenerTypeCheckFrequency' has a wrong offset!");

// Class Squad.SQSoundNodeLooping
// 0x0070 (0x00B8 - 0x0048)
class USQSoundNodeLooping final : public USoundNode
{
public:
	bool                                          bIgnoreStartingBufferRequests;                     // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_138F[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StoppingBoolParameterName;                         // 0x004C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ContinueFiringBoolParameterName;                   // 0x0054(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   QueuedSoundMaxLimitParameterName;                  // 0x005C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1390[0x4];                                     // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USoundWave*>                     StartingSounds;                                    // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class USoundWave*>                     LoopingSounds;                                     // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class USoundWave*>                     FinishingSounds;                                   // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MinSamplesToInject;                                // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSamplesToInject;                                // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SampleRate;                                        // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateStereoSoundWave;                            // 0x00A4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1391[0x3];                                     // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundConcurrency*                      SoundConcurrencySettings;                          // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDuration;                                       // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TestShotCount;                                     // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSoundNodeLooping">();
	}
	static class USQSoundNodeLooping* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSoundNodeLooping>();
	}
};
static_assert(alignof(USQSoundNodeLooping) == 0x000008, "Wrong alignment on USQSoundNodeLooping");
static_assert(sizeof(USQSoundNodeLooping) == 0x0000B8, "Wrong size on USQSoundNodeLooping");
static_assert(offsetof(USQSoundNodeLooping, bIgnoreStartingBufferRequests) == 0x000048, "Member 'USQSoundNodeLooping::bIgnoreStartingBufferRequests' has a wrong offset!");
static_assert(offsetof(USQSoundNodeLooping, StoppingBoolParameterName) == 0x00004C, "Member 'USQSoundNodeLooping::StoppingBoolParameterName' has a wrong offset!");
static_assert(offsetof(USQSoundNodeLooping, ContinueFiringBoolParameterName) == 0x000054, "Member 'USQSoundNodeLooping::ContinueFiringBoolParameterName' has a wrong offset!");
static_assert(offsetof(USQSoundNodeLooping, QueuedSoundMaxLimitParameterName) == 0x00005C, "Member 'USQSoundNodeLooping::QueuedSoundMaxLimitParameterName' has a wrong offset!");
static_assert(offsetof(USQSoundNodeLooping, StartingSounds) == 0x000068, "Member 'USQSoundNodeLooping::StartingSounds' has a wrong offset!");
static_assert(offsetof(USQSoundNodeLooping, LoopingSounds) == 0x000078, "Member 'USQSoundNodeLooping::LoopingSounds' has a wrong offset!");
static_assert(offsetof(USQSoundNodeLooping, FinishingSounds) == 0x000088, "Member 'USQSoundNodeLooping::FinishingSounds' has a wrong offset!");
static_assert(offsetof(USQSoundNodeLooping, MinSamplesToInject) == 0x000098, "Member 'USQSoundNodeLooping::MinSamplesToInject' has a wrong offset!");
static_assert(offsetof(USQSoundNodeLooping, MaxSamplesToInject) == 0x00009C, "Member 'USQSoundNodeLooping::MaxSamplesToInject' has a wrong offset!");
static_assert(offsetof(USQSoundNodeLooping, SampleRate) == 0x0000A0, "Member 'USQSoundNodeLooping::SampleRate' has a wrong offset!");
static_assert(offsetof(USQSoundNodeLooping, bCreateStereoSoundWave) == 0x0000A4, "Member 'USQSoundNodeLooping::bCreateStereoSoundWave' has a wrong offset!");
static_assert(offsetof(USQSoundNodeLooping, SoundConcurrencySettings) == 0x0000A8, "Member 'USQSoundNodeLooping::SoundConcurrencySettings' has a wrong offset!");
static_assert(offsetof(USQSoundNodeLooping, MaxDuration) == 0x0000B0, "Member 'USQSoundNodeLooping::MaxDuration' has a wrong offset!");
static_assert(offsetof(USQSoundNodeLooping, TestShotCount) == 0x0000B4, "Member 'USQSoundNodeLooping::TestShotCount' has a wrong offset!");

// Class Squad.SQSoundNodePhysMatSwitch
// 0x0018 (0x0060 - 0x0048)
class USQSoundNodePhysMatSwitch final : public USoundNode
{
public:
	int32                                         TestPhysMatIndex;                                  // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayDefaultSoundIfPinIsEmpty;                     // 0x004C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1392[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPhysicalMaterial*>              PhysMatInputs;                                     // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSoundNodePhysMatSwitch">();
	}
	static class USQSoundNodePhysMatSwitch* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSoundNodePhysMatSwitch>();
	}
};
static_assert(alignof(USQSoundNodePhysMatSwitch) == 0x000008, "Wrong alignment on USQSoundNodePhysMatSwitch");
static_assert(sizeof(USQSoundNodePhysMatSwitch) == 0x000060, "Wrong size on USQSoundNodePhysMatSwitch");
static_assert(offsetof(USQSoundNodePhysMatSwitch, TestPhysMatIndex) == 0x000048, "Member 'USQSoundNodePhysMatSwitch::TestPhysMatIndex' has a wrong offset!");
static_assert(offsetof(USQSoundNodePhysMatSwitch, bPlayDefaultSoundIfPinIsEmpty) == 0x00004C, "Member 'USQSoundNodePhysMatSwitch::bPlayDefaultSoundIfPinIsEmpty' has a wrong offset!");
static_assert(offsetof(USQSoundNodePhysMatSwitch, PhysMatInputs) == 0x000050, "Member 'USQSoundNodePhysMatSwitch::PhysMatInputs' has a wrong offset!");

// Class Squad.SQSoundNodeRandomStart
// 0x0008 (0x0050 - 0x0048)
class USQSoundNodeRandomStart final : public USoundNode
{
public:
	float                                         StartMin;                                          // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartMax;                                          // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSoundNodeRandomStart">();
	}
	static class USQSoundNodeRandomStart* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSoundNodeRandomStart>();
	}
};
static_assert(alignof(USQSoundNodeRandomStart) == 0x000008, "Wrong alignment on USQSoundNodeRandomStart");
static_assert(sizeof(USQSoundNodeRandomStart) == 0x000050, "Wrong size on USQSoundNodeRandomStart");
static_assert(offsetof(USQSoundNodeRandomStart, StartMin) == 0x000048, "Member 'USQSoundNodeRandomStart::StartMin' has a wrong offset!");
static_assert(offsetof(USQSoundNodeRandomStart, StartMax) == 0x00004C, "Member 'USQSoundNodeRandomStart::StartMax' has a wrong offset!");

// Class Squad.SQSoundSplineActor
// 0x0028 (0x0250 - 0x0228)
class ASQSoundSplineActor : public AActor
{
public:
	class USplineComponent*                       Spline;                                            // 0x0228(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USphereComponent*                       Sphere;                                            // 0x0230(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDrawDebugSphere;                                  // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDrawDebugPoints;                                  // 0x0239(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1393[0x2];                                     // 0x023A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceAccuracy;                                  // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioComponent*                        Sound;                                             // 0x0240(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APlayerCameraManager*                   CachedPlayerCameraManager;                         // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSoundSplineActor">();
	}
	static class ASQSoundSplineActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQSoundSplineActor>();
	}
};
static_assert(alignof(ASQSoundSplineActor) == 0x000008, "Wrong alignment on ASQSoundSplineActor");
static_assert(sizeof(ASQSoundSplineActor) == 0x000250, "Wrong size on ASQSoundSplineActor");
static_assert(offsetof(ASQSoundSplineActor, Spline) == 0x000228, "Member 'ASQSoundSplineActor::Spline' has a wrong offset!");
static_assert(offsetof(ASQSoundSplineActor, Sphere) == 0x000230, "Member 'ASQSoundSplineActor::Sphere' has a wrong offset!");
static_assert(offsetof(ASQSoundSplineActor, bDrawDebugSphere) == 0x000238, "Member 'ASQSoundSplineActor::bDrawDebugSphere' has a wrong offset!");
static_assert(offsetof(ASQSoundSplineActor, bDrawDebugPoints) == 0x000239, "Member 'ASQSoundSplineActor::bDrawDebugPoints' has a wrong offset!");
static_assert(offsetof(ASQSoundSplineActor, DistanceAccuracy) == 0x00023C, "Member 'ASQSoundSplineActor::DistanceAccuracy' has a wrong offset!");
static_assert(offsetof(ASQSoundSplineActor, Sound) == 0x000240, "Member 'ASQSoundSplineActor::Sound' has a wrong offset!");
static_assert(offsetof(ASQSoundSplineActor, CachedPlayerCameraManager) == 0x000248, "Member 'ASQSoundSplineActor::CachedPlayerCameraManager' has a wrong offset!");

// Class Squad.SQSpawnableGhost
// 0x0018 (0x0240 - 0x0228)
class ASQSpawnableGhost : public AActor
{
public:
	bool                                          Confirmed;                                         // 0x0228(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1394[0x7];                                     // 0x0229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQSpawnableItemBase*                   SpawnableItem;                                     // 0x0230(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQDeveloperCameraMan*                  DeveloperCameraMan;                                // 0x0238(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ConfirmPlacement();
	bool ConfirmRequirements();
	bool IsFullyLoaded();
	void Spawn();
	bool SpawnIfReady();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSpawnableGhost">();
	}
	static class ASQSpawnableGhost* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQSpawnableGhost>();
	}
};
static_assert(alignof(ASQSpawnableGhost) == 0x000008, "Wrong alignment on ASQSpawnableGhost");
static_assert(sizeof(ASQSpawnableGhost) == 0x000240, "Wrong size on ASQSpawnableGhost");
static_assert(offsetof(ASQSpawnableGhost, Confirmed) == 0x000228, "Member 'ASQSpawnableGhost::Confirmed' has a wrong offset!");
static_assert(offsetof(ASQSpawnableGhost, SpawnableItem) == 0x000230, "Member 'ASQSpawnableGhost::SpawnableItem' has a wrong offset!");
static_assert(offsetof(ASQSpawnableGhost, DeveloperCameraMan) == 0x000238, "Member 'ASQSpawnableGhost::DeveloperCameraMan' has a wrong offset!");

// Class Squad.SQSpectatorMan
// 0x0040 (0x02F0 - 0x02B0)
class ASQSpectatorMan final : public ASpectatorPawn
{
public:
	uint8                                         Pad_1395[0x8];                                     // 0x02B0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	ESQListenerType                               ListenerType;                                      // 0x02B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1396[0x7];                                     // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USpringArmComponent*                    SpringArm;                                         // 0x02C0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraComponent*                       FirstPersonCameraComponent;                        // 0x02C8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               CameraManHUDIconTexture;                           // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTryingToGainAltitude;                           // 0x02D8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTryingToLoseAltitude;                           // 0x02D9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1397[0x16];                                    // 0x02DA(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DrawHUD(class ASQHUD* SquadHUD, class UCanvas* Canvas);
	void ServerSetDecelerationTarget(float InDecelerationTarget);
	void ServerSetFlySpeedTarget(float InFlySpeedTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSpectatorMan">();
	}
	static class ASQSpectatorMan* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQSpectatorMan>();
	}
};
static_assert(alignof(ASQSpectatorMan) == 0x000008, "Wrong alignment on ASQSpectatorMan");
static_assert(sizeof(ASQSpectatorMan) == 0x0002F0, "Wrong size on ASQSpectatorMan");
static_assert(offsetof(ASQSpectatorMan, ListenerType) == 0x0002B8, "Member 'ASQSpectatorMan::ListenerType' has a wrong offset!");
static_assert(offsetof(ASQSpectatorMan, SpringArm) == 0x0002C0, "Member 'ASQSpectatorMan::SpringArm' has a wrong offset!");
static_assert(offsetof(ASQSpectatorMan, FirstPersonCameraComponent) == 0x0002C8, "Member 'ASQSpectatorMan::FirstPersonCameraComponent' has a wrong offset!");
static_assert(offsetof(ASQSpectatorMan, CameraManHUDIconTexture) == 0x0002D0, "Member 'ASQSpectatorMan::CameraManHUDIconTexture' has a wrong offset!");
static_assert(offsetof(ASQSpectatorMan, bIsTryingToGainAltitude) == 0x0002D8, "Member 'ASQSpectatorMan::bIsTryingToGainAltitude' has a wrong offset!");
static_assert(offsetof(ASQSpectatorMan, bIsTryingToLoseAltitude) == 0x0002D9, "Member 'ASQSpectatorMan::bIsTryingToLoseAltitude' has a wrong offset!");

// Class Squad.SQSquadList
// 0x0018 (0x0280 - 0x0268)
class USQSquadList final : public USQUserWidget
{
public:
	bool                                          bIsOpening;                                        // 0x0268(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsClosing;                                        // 0x0269(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1398[0x6];                                     // 0x026A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQPlayerState*                         OwnerPlayerState;                                  // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerController*                    OwnerPlayerController;                             // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void InitWidget();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadList">();
	}
	static class USQSquadList* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSquadList>();
	}
};
static_assert(alignof(USQSquadList) == 0x000008, "Wrong alignment on USQSquadList");
static_assert(sizeof(USQSquadList) == 0x000280, "Wrong size on USQSquadList");
static_assert(offsetof(USQSquadList, bIsOpening) == 0x000268, "Member 'USQSquadList::bIsOpening' has a wrong offset!");
static_assert(offsetof(USQSquadList, bIsClosing) == 0x000269, "Member 'USQSquadList::bIsClosing' has a wrong offset!");
static_assert(offsetof(USQSquadList, OwnerPlayerState) == 0x000270, "Member 'USQSquadList::OwnerPlayerState' has a wrong offset!");
static_assert(offsetof(USQSquadList, OwnerPlayerController) == 0x000278, "Member 'USQSquadList::OwnerPlayerController' has a wrong offset!");

// Class Squad.SQSquadMemberListItem
// 0x00B0 (0x0318 - 0x0268)
class USQSquadMemberListItem final : public USQUserWidget
{
public:
	TArray<class UTexture2D*>                     RankTextures;                                      // 0x0268(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UButton*                                ActionMenuBtnCPP;                                  // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UButton*                                PromoteToSLBtnCPP;                                 // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UButton*                                KickBtnCPP;                                        // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UButton*                                SLInviteBtnCPP;                                    // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UVerticalBox*>                   MenuPanelsCPP;                                     // 0x0298(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UImage*                                 KitBGCPP;                                          // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 KitIconCPP;                                        // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             NamePCPP;                                          // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 NameBGCPP;                                         // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 RankBGCPP;                                         // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 RankIconCPP;                                       // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 VehicleBGCPP;                                      // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 VehicleIconCPP;                                    // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 WeaponIconCPP;                                     // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             PlayerNameCPP;                                     // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASQPlayerState*                         PlayerStateIdentifier;                             // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1399[0x4];                                     // 0x0300(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsHovering;                                       // 0x0304(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_139A[0xB];                                     // 0x0305(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	class USQSquadMemberList*                     Manager;                                           // 0x0310(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BPInitWidgetRefs();
	void InitEventHandlers();
	void OnActionButton();
	void OnKick();
	void OnPromoteToSL();
	void OnSLInvite();
	void ShowActionMenu(int32 MenuIdx);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadMemberListItem">();
	}
	static class USQSquadMemberListItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSquadMemberListItem>();
	}
};
static_assert(alignof(USQSquadMemberListItem) == 0x000008, "Wrong alignment on USQSquadMemberListItem");
static_assert(sizeof(USQSquadMemberListItem) == 0x000318, "Wrong size on USQSquadMemberListItem");
static_assert(offsetof(USQSquadMemberListItem, RankTextures) == 0x000268, "Member 'USQSquadMemberListItem::RankTextures' has a wrong offset!");
static_assert(offsetof(USQSquadMemberListItem, ActionMenuBtnCPP) == 0x000278, "Member 'USQSquadMemberListItem::ActionMenuBtnCPP' has a wrong offset!");
static_assert(offsetof(USQSquadMemberListItem, PromoteToSLBtnCPP) == 0x000280, "Member 'USQSquadMemberListItem::PromoteToSLBtnCPP' has a wrong offset!");
static_assert(offsetof(USQSquadMemberListItem, KickBtnCPP) == 0x000288, "Member 'USQSquadMemberListItem::KickBtnCPP' has a wrong offset!");
static_assert(offsetof(USQSquadMemberListItem, SLInviteBtnCPP) == 0x000290, "Member 'USQSquadMemberListItem::SLInviteBtnCPP' has a wrong offset!");
static_assert(offsetof(USQSquadMemberListItem, MenuPanelsCPP) == 0x000298, "Member 'USQSquadMemberListItem::MenuPanelsCPP' has a wrong offset!");
static_assert(offsetof(USQSquadMemberListItem, KitBGCPP) == 0x0002A8, "Member 'USQSquadMemberListItem::KitBGCPP' has a wrong offset!");
static_assert(offsetof(USQSquadMemberListItem, KitIconCPP) == 0x0002B0, "Member 'USQSquadMemberListItem::KitIconCPP' has a wrong offset!");
static_assert(offsetof(USQSquadMemberListItem, NamePCPP) == 0x0002B8, "Member 'USQSquadMemberListItem::NamePCPP' has a wrong offset!");
static_assert(offsetof(USQSquadMemberListItem, NameBGCPP) == 0x0002C0, "Member 'USQSquadMemberListItem::NameBGCPP' has a wrong offset!");
static_assert(offsetof(USQSquadMemberListItem, RankBGCPP) == 0x0002C8, "Member 'USQSquadMemberListItem::RankBGCPP' has a wrong offset!");
static_assert(offsetof(USQSquadMemberListItem, RankIconCPP) == 0x0002D0, "Member 'USQSquadMemberListItem::RankIconCPP' has a wrong offset!");
static_assert(offsetof(USQSquadMemberListItem, VehicleBGCPP) == 0x0002D8, "Member 'USQSquadMemberListItem::VehicleBGCPP' has a wrong offset!");
static_assert(offsetof(USQSquadMemberListItem, VehicleIconCPP) == 0x0002E0, "Member 'USQSquadMemberListItem::VehicleIconCPP' has a wrong offset!");
static_assert(offsetof(USQSquadMemberListItem, WeaponIconCPP) == 0x0002E8, "Member 'USQSquadMemberListItem::WeaponIconCPP' has a wrong offset!");
static_assert(offsetof(USQSquadMemberListItem, PlayerNameCPP) == 0x0002F0, "Member 'USQSquadMemberListItem::PlayerNameCPP' has a wrong offset!");
static_assert(offsetof(USQSquadMemberListItem, PlayerStateIdentifier) == 0x0002F8, "Member 'USQSquadMemberListItem::PlayerStateIdentifier' has a wrong offset!");
static_assert(offsetof(USQSquadMemberListItem, bIsHovering) == 0x000304, "Member 'USQSquadMemberListItem::bIsHovering' has a wrong offset!");
static_assert(offsetof(USQSquadMemberListItem, Manager) == 0x000310, "Member 'USQSquadMemberListItem::Manager' has a wrong offset!");

// Class Squad.SQSquadState
// 0x0128 (0x0350 - 0x0228)
class ASQSquadState final : public AInfo
{
public:
	class ASQSquad*                               AuthoritySquad;                                    // 0x0228(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSize;                                           // 0x0230(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumKills;                                          // 0x0234(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumDeaths;                                         // 0x0238(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWoundeds;                                       // 0x023C(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWounds;                                         // 0x0240(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumTeamkills;                                      // 0x0244(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Score;                                             // 0x0248(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeamWorkScore;                                     // 0x024C(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ObjectiveScore;                                    // 0x0250(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealPoints;                                        // 0x0254(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RevivedPoints;                                     // 0x0258(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139B[0x4];                                     // 0x025C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQCoreStateComponent*                  StateObject;                                       // 0x0260(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCommandSquad;                                   // 0x0268(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139C[0x37];                                    // 0x0269(0x0037)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x02A0(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         TeamId;                                            // 0x02A4(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class ASQPlayerState*>                 PlayerStates;                                      // 0x02A8(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate)
	class ASQPlayerState*                         LeaderState;                                       // 0x02B8(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FText                                   Name_SQSquadState;                                 // 0x02C0(0x0018)(BlueprintVisible, BlueprintReadOnly, Net, Transient, RepNotify, NativeAccessSpecifierPrivate)
	bool                                          bIsLocked;                                         // 0x02D8(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_139D[0x3];                                     // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CreationTimeStamp;                                 // 0x02DC(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 SquadCreatorName;                                  // 0x02E0(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 SquadCreatorSteamID;                               // 0x02F0(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_139E[0x50];                                    // 0x0300(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddPlayerState(class ASQPlayerState* PlayerState);
	void BroadcastLeaderChangeEvent(class ASQPlayerState* PlayerState);
	void BroadcastPlayerJoinEvent(class ASQPlayerState* PlayerState);
	void BroadcastPlayerLeaveEvent(class ASQPlayerState* PlayerState);
	void OnRep_Id();
	void OnRep_IsLocked();
	void OnRep_LeaderState(class ASQPlayerState* LastLeaderState);
	void OnRep_Name();
	void OnRep_PlayerStates();
	void OnRep_TeamId();
	void RemovePlayerState(class ASQPlayerState* PlayerState);
	void ScorePoints(int32 Points, const class FString& Reason, const class FName& ScoreGroup);
	void ScorePointsDelayed(int32 Points, const class FString& Reason, const class FName& ScoreGroup);

	int32 GetPlayerCount() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadState">();
	}
	static class ASQSquadState* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQSquadState>();
	}
};
static_assert(alignof(ASQSquadState) == 0x000008, "Wrong alignment on ASQSquadState");
static_assert(sizeof(ASQSquadState) == 0x000350, "Wrong size on ASQSquadState");
static_assert(offsetof(ASQSquadState, AuthoritySquad) == 0x000228, "Member 'ASQSquadState::AuthoritySquad' has a wrong offset!");
static_assert(offsetof(ASQSquadState, MaxSize) == 0x000230, "Member 'ASQSquadState::MaxSize' has a wrong offset!");
static_assert(offsetof(ASQSquadState, NumKills) == 0x000234, "Member 'ASQSquadState::NumKills' has a wrong offset!");
static_assert(offsetof(ASQSquadState, NumDeaths) == 0x000238, "Member 'ASQSquadState::NumDeaths' has a wrong offset!");
static_assert(offsetof(ASQSquadState, NumWoundeds) == 0x00023C, "Member 'ASQSquadState::NumWoundeds' has a wrong offset!");
static_assert(offsetof(ASQSquadState, NumWounds) == 0x000240, "Member 'ASQSquadState::NumWounds' has a wrong offset!");
static_assert(offsetof(ASQSquadState, NumTeamkills) == 0x000244, "Member 'ASQSquadState::NumTeamkills' has a wrong offset!");
static_assert(offsetof(ASQSquadState, Score) == 0x000248, "Member 'ASQSquadState::Score' has a wrong offset!");
static_assert(offsetof(ASQSquadState, TeamWorkScore) == 0x00024C, "Member 'ASQSquadState::TeamWorkScore' has a wrong offset!");
static_assert(offsetof(ASQSquadState, ObjectiveScore) == 0x000250, "Member 'ASQSquadState::ObjectiveScore' has a wrong offset!");
static_assert(offsetof(ASQSquadState, HealPoints) == 0x000254, "Member 'ASQSquadState::HealPoints' has a wrong offset!");
static_assert(offsetof(ASQSquadState, RevivedPoints) == 0x000258, "Member 'ASQSquadState::RevivedPoints' has a wrong offset!");
static_assert(offsetof(ASQSquadState, StateObject) == 0x000260, "Member 'ASQSquadState::StateObject' has a wrong offset!");
static_assert(offsetof(ASQSquadState, bIsCommandSquad) == 0x000268, "Member 'ASQSquadState::bIsCommandSquad' has a wrong offset!");
static_assert(offsetof(ASQSquadState, ID) == 0x0002A0, "Member 'ASQSquadState::ID' has a wrong offset!");
static_assert(offsetof(ASQSquadState, TeamId) == 0x0002A4, "Member 'ASQSquadState::TeamId' has a wrong offset!");
static_assert(offsetof(ASQSquadState, PlayerStates) == 0x0002A8, "Member 'ASQSquadState::PlayerStates' has a wrong offset!");
static_assert(offsetof(ASQSquadState, LeaderState) == 0x0002B8, "Member 'ASQSquadState::LeaderState' has a wrong offset!");
static_assert(offsetof(ASQSquadState, Name_SQSquadState) == 0x0002C0, "Member 'ASQSquadState::Name_SQSquadState' has a wrong offset!");
static_assert(offsetof(ASQSquadState, bIsLocked) == 0x0002D8, "Member 'ASQSquadState::bIsLocked' has a wrong offset!");
static_assert(offsetof(ASQSquadState, CreationTimeStamp) == 0x0002DC, "Member 'ASQSquadState::CreationTimeStamp' has a wrong offset!");
static_assert(offsetof(ASQSquadState, SquadCreatorName) == 0x0002E0, "Member 'ASQSquadState::SquadCreatorName' has a wrong offset!");
static_assert(offsetof(ASQSquadState, SquadCreatorSteamID) == 0x0002F0, "Member 'ASQSquadState::SquadCreatorSteamID' has a wrong offset!");

// Class Squad.SQSquadStateDataCaptureZone
// 0x0088 (0x01E0 - 0x0158)
class USQSquadStateDataCaptureZone : public USQSquadStateMapData
{
public:
	class FText                                   FlagName;                                          // 0x0158(0x0018)(Net, NativeAccessSpecifierPublic)
	uint8                                         bUncappable : 1;                                   // 0x0170(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_13A1[0x7];                                     // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              FlagTexture;                                       // 0x0178(0x0028)(Net, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              NeutralFlag;                                       // 0x01A0(0x0028)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OwningTeam;                                        // 0x01C8(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CapturingTeam;                                     // 0x01C9(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A2[0x2];                                     // 0x01CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        TeamCapturabilities;                               // 0x01CC(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        TeamKnowledge;                                     // 0x01D0(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapturePercent;                                    // 0x01D4(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CapturePercentDirection;                           // 0x01D8(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A3[0x4];                                     // 0x01DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadStateDataCaptureZone">();
	}
	static class USQSquadStateDataCaptureZone* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSquadStateDataCaptureZone>();
	}
};
static_assert(alignof(USQSquadStateDataCaptureZone) == 0x000008, "Wrong alignment on USQSquadStateDataCaptureZone");
static_assert(sizeof(USQSquadStateDataCaptureZone) == 0x0001E0, "Wrong size on USQSquadStateDataCaptureZone");
static_assert(offsetof(USQSquadStateDataCaptureZone, FlagName) == 0x000158, "Member 'USQSquadStateDataCaptureZone::FlagName' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataCaptureZone, FlagTexture) == 0x000178, "Member 'USQSquadStateDataCaptureZone::FlagTexture' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataCaptureZone, NeutralFlag) == 0x0001A0, "Member 'USQSquadStateDataCaptureZone::NeutralFlag' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataCaptureZone, OwningTeam) == 0x0001C8, "Member 'USQSquadStateDataCaptureZone::OwningTeam' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataCaptureZone, CapturingTeam) == 0x0001C9, "Member 'USQSquadStateDataCaptureZone::CapturingTeam' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataCaptureZone, TeamCapturabilities) == 0x0001CC, "Member 'USQSquadStateDataCaptureZone::TeamCapturabilities' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataCaptureZone, TeamKnowledge) == 0x0001D0, "Member 'USQSquadStateDataCaptureZone::TeamKnowledge' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataCaptureZone, CapturePercent) == 0x0001D4, "Member 'USQSquadStateDataCaptureZone::CapturePercent' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataCaptureZone, CapturePercentDirection) == 0x0001D8, "Member 'USQSquadStateDataCaptureZone::CapturePercentDirection' has a wrong offset!");

// Class Squad.SQSquadStateDataForwardBase
// 0x0018 (0x0178 - 0x0160)
class USQSquadStateDataForwardBase : public USQSquadStateDataDeployable
{
public:
	uint8                                         bCanSpawn : 1;                                     // 0x0160(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSieged : 1;                                       // 0x0160(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsBleeding : 1;                                   // 0x0160(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_13A4[0x3];                                     // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinActivatedTimeStamp;                             // 0x0164(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExclusionRadius;                                   // 0x0168(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstructionRadius;                                // 0x016C(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmmoPoints;                                        // 0x0170(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstructionPoints;                                // 0x0174(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadStateDataForwardBase">();
	}
	static class USQSquadStateDataForwardBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSquadStateDataForwardBase>();
	}
};
static_assert(alignof(USQSquadStateDataForwardBase) == 0x000008, "Wrong alignment on USQSquadStateDataForwardBase");
static_assert(sizeof(USQSquadStateDataForwardBase) == 0x000178, "Wrong size on USQSquadStateDataForwardBase");
static_assert(offsetof(USQSquadStateDataForwardBase, MinActivatedTimeStamp) == 0x000164, "Member 'USQSquadStateDataForwardBase::MinActivatedTimeStamp' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataForwardBase, ExclusionRadius) == 0x000168, "Member 'USQSquadStateDataForwardBase::ExclusionRadius' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataForwardBase, ConstructionRadius) == 0x00016C, "Member 'USQSquadStateDataForwardBase::ConstructionRadius' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataForwardBase, AmmoPoints) == 0x000170, "Member 'USQSquadStateDataForwardBase::AmmoPoints' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataForwardBase, ConstructionPoints) == 0x000174, "Member 'USQSquadStateDataForwardBase::ConstructionPoints' has a wrong offset!");

// Class Squad.SQSquadStateDataHABInterface
// 0x0000 (0x0028 - 0x0028)
class ISQSquadStateDataHABInterface final : public IInterface
{
public:
	class ASQGameSpawn* GetGameSpawn();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadStateDataHABInterface">();
	}
	static class ISQSquadStateDataHABInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISQSquadStateDataHABInterface>();
	}
};
static_assert(alignof(ISQSquadStateDataHABInterface) == 0x000008, "Wrong alignment on ISQSquadStateDataHABInterface");
static_assert(sizeof(ISQSquadStateDataHABInterface) == 0x000028, "Wrong size on ISQSquadStateDataHABInterface");

// Class Squad.SQSquadStateDataMapMarkerObjective
// 0x0000 (0x0178 - 0x0178)
class USQSquadStateDataMapMarkerObjective : public USQSquadStateDataMapMarker
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadStateDataMapMarkerObjective">();
	}
	static class USQSquadStateDataMapMarkerObjective* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSquadStateDataMapMarkerObjective>();
	}
};
static_assert(alignof(USQSquadStateDataMapMarkerObjective) == 0x000008, "Wrong alignment on USQSquadStateDataMapMarkerObjective");
static_assert(sizeof(USQSquadStateDataMapMarkerObjective) == 0x000178, "Wrong size on USQSquadStateDataMapMarkerObjective");

// Class Squad.SQSquadStateDataMapMarkerSpotted
// 0x0000 (0x0180 - 0x0180)
class USQSquadStateDataMapMarkerSpotted : public USQSquadStateDataMapMarkerSelectable
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadStateDataMapMarkerSpotted">();
	}
	static class USQSquadStateDataMapMarkerSpotted* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSquadStateDataMapMarkerSpotted>();
	}
};
static_assert(alignof(USQSquadStateDataMapMarkerSpotted) == 0x000008, "Wrong alignment on USQSquadStateDataMapMarkerSpotted");
static_assert(sizeof(USQSquadStateDataMapMarkerSpotted) == 0x000180, "Wrong size on USQSquadStateDataMapMarkerSpotted");

// Class Squad.SQSquadStateDataPlayerState
// 0x0060 (0x0150 - 0x00F0)
class USQSquadStateDataPlayerState : public USQSquadStateData
{
public:
	uint8                                         bIsSquadLeader : 1;                                // 0x00F0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsFireTeamLeader : 1;                             // 0x00F0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_13A5[0x3];                                     // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FireTeamIndex;                                     // 0x00F4(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FireTeamPosition;                                  // 0x00F8(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A6[0x4];                                     // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USQRoleSettings*                        DeployRole;                                        // 0x0100(0x0008)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQVehicleUIStaticDataAsset*            CurrentVehicleData;                                // 0x0108(0x0008)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerState*                         PlayerState;                                       // 0x0110(0x0008)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerId;                                          // 0x0118(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQCoreStateId                         SelectionComponentId;                              // 0x011C(0x0002)(Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESQVoiceChannel                               VoipChannel;                                       // 0x011E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMuted;                                          // 0x011F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13A7[0x30];                                    // 0x0120(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FString GetPlayerName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadStateDataPlayerState">();
	}
	static class USQSquadStateDataPlayerState* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSquadStateDataPlayerState>();
	}
};
static_assert(alignof(USQSquadStateDataPlayerState) == 0x000008, "Wrong alignment on USQSquadStateDataPlayerState");
static_assert(sizeof(USQSquadStateDataPlayerState) == 0x000150, "Wrong size on USQSquadStateDataPlayerState");
static_assert(offsetof(USQSquadStateDataPlayerState, FireTeamIndex) == 0x0000F4, "Member 'USQSquadStateDataPlayerState::FireTeamIndex' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataPlayerState, FireTeamPosition) == 0x0000F8, "Member 'USQSquadStateDataPlayerState::FireTeamPosition' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataPlayerState, DeployRole) == 0x000100, "Member 'USQSquadStateDataPlayerState::DeployRole' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataPlayerState, CurrentVehicleData) == 0x000108, "Member 'USQSquadStateDataPlayerState::CurrentVehicleData' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataPlayerState, PlayerState) == 0x000110, "Member 'USQSquadStateDataPlayerState::PlayerState' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataPlayerState, PlayerId) == 0x000118, "Member 'USQSquadStateDataPlayerState::PlayerId' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataPlayerState, SelectionComponentId) == 0x00011C, "Member 'USQSquadStateDataPlayerState::SelectionComponentId' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataPlayerState, VoipChannel) == 0x00011E, "Member 'USQSquadStateDataPlayerState::VoipChannel' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataPlayerState, bIsMuted) == 0x00011F, "Member 'USQSquadStateDataPlayerState::bIsMuted' has a wrong offset!");

// Class Squad.SQSquadStateDataRallyPoint
// 0x0008 (0x0178 - 0x0170)
class USQSquadStateDataRallyPoint final : public USQSquadStateDataSpawnPoint
{
public:
	int32                                         NumberOfSpawns;                                    // 0x0170(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13A8[0x4];                                     // 0x0174(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadStateDataRallyPoint">();
	}
	static class USQSquadStateDataRallyPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSquadStateDataRallyPoint>();
	}
};
static_assert(alignof(USQSquadStateDataRallyPoint) == 0x000008, "Wrong alignment on USQSquadStateDataRallyPoint");
static_assert(sizeof(USQSquadStateDataRallyPoint) == 0x000178, "Wrong size on USQSquadStateDataRallyPoint");
static_assert(offsetof(USQSquadStateDataRallyPoint, NumberOfSpawns) == 0x000170, "Member 'USQSquadStateDataRallyPoint::NumberOfSpawns' has a wrong offset!");

// Class Squad.SQSquadStateDataSoldier
// 0x0030 (0x01B0 - 0x0180)
class USQSquadStateDataSoldier : public USQSquadStateDataPawn
{
public:
	float                                         HealthStatusRange;                                 // 0x0180(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsBleeding : 1;                                   // 0x0184(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsWounded : 1;                                    // 0x0184(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsAlive : 1;                                      // 0x0184(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsInVehicle : 1;                                  // 0x0184(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsUsingFreeLook : 1;                              // 0x0184(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsMedic : 1;                                      // 0x0184(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_13A9[0x3];                                     // 0x0185(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQSoldierInfo                         SoldierInfo;                                       // 0x0188(0x0028)(Net, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadStateDataSoldier">();
	}
	static class USQSquadStateDataSoldier* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSquadStateDataSoldier>();
	}
};
static_assert(alignof(USQSquadStateDataSoldier) == 0x000008, "Wrong alignment on USQSquadStateDataSoldier");
static_assert(sizeof(USQSquadStateDataSoldier) == 0x0001B0, "Wrong size on USQSquadStateDataSoldier");
static_assert(offsetof(USQSquadStateDataSoldier, HealthStatusRange) == 0x000180, "Member 'USQSquadStateDataSoldier::HealthStatusRange' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataSoldier, SoldierInfo) == 0x000188, "Member 'USQSquadStateDataSoldier::SoldierInfo' has a wrong offset!");

// Class Squad.SQSquadStateDataSquadState
// 0x0028 (0x0118 - 0x00F0)
class USQSquadStateDataSquadState : public USQSquadStateData
{
public:
	class FString                                 SquadName;                                         // 0x00F0(0x0010)(Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LeaderName;                                        // 0x0100(0x0010)(Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MemberNum;                                         // 0x0110(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13AA[0x3];                                     // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bIsLocked : 1;                                     // 0x0114(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsCommandSquad : 1;                               // 0x0114(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_13AB[0x3];                                     // 0x0115(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadStateDataSquadState">();
	}
	static class USQSquadStateDataSquadState* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSquadStateDataSquadState>();
	}
};
static_assert(alignof(USQSquadStateDataSquadState) == 0x000008, "Wrong alignment on USQSquadStateDataSquadState");
static_assert(sizeof(USQSquadStateDataSquadState) == 0x000118, "Wrong size on USQSquadStateDataSquadState");
static_assert(offsetof(USQSquadStateDataSquadState, SquadName) == 0x0000F0, "Member 'USQSquadStateDataSquadState::SquadName' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataSquadState, LeaderName) == 0x000100, "Member 'USQSquadStateDataSquadState::LeaderName' has a wrong offset!");
static_assert(offsetof(USQSquadStateDataSquadState, MemberNum) == 0x000110, "Member 'USQSquadStateDataSquadState::MemberNum' has a wrong offset!");

// Class Squad.SQSquadStatePrivateToTeam
// 0x0020 (0x0248 - 0x0228)
class ASQSquadStatePrivateToTeam final : public AInfo
{
public:
	uint8                                         Pad_13AC[0x8];                                     // 0x0228(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQSquad*                               AuthoritySquad;                                    // 0x0230(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQTeamStatePrivate*                    PrivateTeamState;                                  // 0x0238(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQSquadState*                          SquadState;                                        // 0x0240(0x0008)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSquadStatePrivateToTeam">();
	}
	static class ASQSquadStatePrivateToTeam* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQSquadStatePrivateToTeam>();
	}
};
static_assert(alignof(ASQSquadStatePrivateToTeam) == 0x000008, "Wrong alignment on ASQSquadStatePrivateToTeam");
static_assert(sizeof(ASQSquadStatePrivateToTeam) == 0x000248, "Wrong size on ASQSquadStatePrivateToTeam");
static_assert(offsetof(ASQSquadStatePrivateToTeam, AuthoritySquad) == 0x000230, "Member 'ASQSquadStatePrivateToTeam::AuthoritySquad' has a wrong offset!");
static_assert(offsetof(ASQSquadStatePrivateToTeam, PrivateTeamState) == 0x000238, "Member 'ASQSquadStatePrivateToTeam::PrivateTeamState' has a wrong offset!");
static_assert(offsetof(ASQSquadStatePrivateToTeam, SquadState) == 0x000240, "Member 'ASQSquadStatePrivateToTeam::SquadState' has a wrong offset!");

// Class Squad.SQStatefulButton
// 0x0058 (0x02C0 - 0x0268)
class USQStatefulButton : public USQUserWidget
{
public:
	TArray<class UTexture2D*>                     StateImages;                                       // 0x0268(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FLinearColor                           NormalTint;                                        // 0x0278(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           HoveredTint;                                       // 0x0288(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 CurrentImage;                                      // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsHovering;                                       // 0x02A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13AD[0x3];                                     // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HoveringColorBlend;                                // 0x02A4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HoverColorBlendSpeed;                              // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13AE[0x14];                                    // 0x02AC(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeImage(int32 ImageIndex);
	int32 GetCurrentState();
	void OnPressed();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQStatefulButton">();
	}
	static class USQStatefulButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQStatefulButton>();
	}
};
static_assert(alignof(USQStatefulButton) == 0x000008, "Wrong alignment on USQStatefulButton");
static_assert(sizeof(USQStatefulButton) == 0x0002C0, "Wrong size on USQStatefulButton");
static_assert(offsetof(USQStatefulButton, StateImages) == 0x000268, "Member 'USQStatefulButton::StateImages' has a wrong offset!");
static_assert(offsetof(USQStatefulButton, NormalTint) == 0x000278, "Member 'USQStatefulButton::NormalTint' has a wrong offset!");
static_assert(offsetof(USQStatefulButton, HoveredTint) == 0x000288, "Member 'USQStatefulButton::HoveredTint' has a wrong offset!");
static_assert(offsetof(USQStatefulButton, CurrentImage) == 0x000298, "Member 'USQStatefulButton::CurrentImage' has a wrong offset!");
static_assert(offsetof(USQStatefulButton, bIsHovering) == 0x0002A0, "Member 'USQStatefulButton::bIsHovering' has a wrong offset!");
static_assert(offsetof(USQStatefulButton, HoveringColorBlend) == 0x0002A4, "Member 'USQStatefulButton::HoveringColorBlend' has a wrong offset!");
static_assert(offsetof(USQStatefulButton, HoverColorBlendSpeed) == 0x0002A8, "Member 'USQStatefulButton::HoverColorBlendSpeed' has a wrong offset!");

// Class Squad.SQStaticTurretMovementComponent
// 0x0020 (0x0220 - 0x0200)
class USQStaticTurretMovementComponent final : public USQNetMoveComponent
{
public:
	bool                                          bApplyRotationToUpdatedComponent;                  // 0x0200(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13AF[0x7];                                     // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        YawComponent;                                      // 0x0208(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        PitchComponent;                                    // 0x0210(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13B0[0x8];                                     // 0x0218(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQStaticTurretMovementComponent">();
	}
	static class USQStaticTurretMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQStaticTurretMovementComponent>();
	}
};
static_assert(alignof(USQStaticTurretMovementComponent) == 0x000010, "Wrong alignment on USQStaticTurretMovementComponent");
static_assert(sizeof(USQStaticTurretMovementComponent) == 0x000220, "Wrong size on USQStaticTurretMovementComponent");
static_assert(offsetof(USQStaticTurretMovementComponent, bApplyRotationToUpdatedComponent) == 0x000200, "Member 'USQStaticTurretMovementComponent::bApplyRotationToUpdatedComponent' has a wrong offset!");
static_assert(offsetof(USQStaticTurretMovementComponent, YawComponent) == 0x000208, "Member 'USQStaticTurretMovementComponent::YawComponent' has a wrong offset!");
static_assert(offsetof(USQStaticTurretMovementComponent, PitchComponent) == 0x000210, "Member 'USQStaticTurretMovementComponent::PitchComponent' has a wrong offset!");

// Class Squad.SQSteamInventoryUI
// 0x00B0 (0x00E0 - 0x0030)
class USQSteamInventoryUI final : public UGameInstanceSubsystem
{
public:
	FMulticastInlineDelegateProperty_             OnCachedSteamItems;                                // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMap<int32, class USQSteamItem*>              CachedSteamIds;                                    // 0x0040(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_13B1[0x50];                                    // 0x0090(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CacheSteamItems();
	class USQSteamItem* GetFirstIncompatibleItem(const class USQSteamItem* ItemToCheckFor, bool bEnabledOnly);
	TArray<class USQSteamItem*> GetIncompatibleItems(const class USQSteamItem* ItemToCheckFor, bool bEnabledOnly);
	TArray<class USQSteamItem*> GetItemsOfClass(const TSubclassOf<class USQSteamItem> ItemClass);
	void OnGetCacheSuccess(const struct FODKBazaarCacheCompletedData& Results);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSteamInventoryUI">();
	}
	static class USQSteamInventoryUI* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSteamInventoryUI>();
	}
};
static_assert(alignof(USQSteamInventoryUI) == 0x000008, "Wrong alignment on USQSteamInventoryUI");
static_assert(sizeof(USQSteamInventoryUI) == 0x0000E0, "Wrong size on USQSteamInventoryUI");
static_assert(offsetof(USQSteamInventoryUI, OnCachedSteamItems) == 0x000030, "Member 'USQSteamInventoryUI::OnCachedSteamItems' has a wrong offset!");
static_assert(offsetof(USQSteamInventoryUI, CachedSteamIds) == 0x000040, "Member 'USQSteamInventoryUI::CachedSteamIds' has a wrong offset!");

// Class Squad.SQSteamItem
// 0x0018 (0x0040 - 0x0028)
class USQSteamItem : public UObject
{
public:
	int32                                         SteamId;                                           // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13B4[0x3];                                     // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnStateChanged;                                    // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	bool SetEnabled(bool bNewEnable, bool bOverrideIncompatibles);

	bool IsCompatibleWith(const class USQSteamItem* OtherItem) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSteamItem">();
	}
	static class USQSteamItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSteamItem>();
	}
};
static_assert(alignof(USQSteamItem) == 0x000008, "Wrong alignment on USQSteamItem");
static_assert(sizeof(USQSteamItem) == 0x000040, "Wrong size on USQSteamItem");
static_assert(offsetof(USQSteamItem, SteamId) == 0x000028, "Member 'USQSteamItem::SteamId' has a wrong offset!");
static_assert(offsetof(USQSteamItem, bEnabled) == 0x00002C, "Member 'USQSteamItem::bEnabled' has a wrong offset!");
static_assert(offsetof(USQSteamItem, OnStateChanged) == 0x000030, "Member 'USQSteamItem::OnStateChanged' has a wrong offset!");

// Class Squad.SQSupporterPatchData
// 0x0040 (0x0080 - 0x0040)
class USQSupporterPatchData final : public USQSteamItem
{
public:
	struct FSQPatchItem                           PatchData;                                         // 0x0040(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSupporterPatchData">();
	}
	static class USQSupporterPatchData* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSupporterPatchData>();
	}
};
static_assert(alignof(USQSupporterPatchData) == 0x000008, "Wrong alignment on USQSupporterPatchData");
static_assert(sizeof(USQSupporterPatchData) == 0x000080, "Wrong size on USQSupporterPatchData");
static_assert(offsetof(USQSupporterPatchData, PatchData) == 0x000040, "Member 'USQSupporterPatchData::PatchData' has a wrong offset!");

// Class Squad.SQMainPatchData
// 0x0040 (0x0080 - 0x0040)
class USQMainPatchData final : public USQSteamItem
{
public:
	struct FSQPatchItem                           PatchData;                                         // 0x0040(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQMainPatchData">();
	}
	static class USQMainPatchData* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQMainPatchData>();
	}
};
static_assert(alignof(USQMainPatchData) == 0x000008, "Wrong alignment on USQMainPatchData");
static_assert(sizeof(USQMainPatchData) == 0x000080, "Wrong size on USQMainPatchData");
static_assert(offsetof(USQMainPatchData, PatchData) == 0x000040, "Member 'USQMainPatchData::PatchData' has a wrong offset!");

// Class Squad.SQRadialSuppressionInfo
// 0x0018 (0x0078 - 0x0060)
class USQRadialSuppressionInfo : public USQSuppressionInfo
{
public:
	class UCurveFloat*                            ImpactSuppressionDistanceCurve;                    // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpactSuppressionPower;                            // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InnerRadius;                                       // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterRadius;                                       // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuppressFriendlies;                               // 0x0074(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13B6[0x3];                                     // 0x0075(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQRadialSuppressionInfo">();
	}
	static class USQRadialSuppressionInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQRadialSuppressionInfo>();
	}
};
static_assert(alignof(USQRadialSuppressionInfo) == 0x000008, "Wrong alignment on USQRadialSuppressionInfo");
static_assert(sizeof(USQRadialSuppressionInfo) == 0x000078, "Wrong size on USQRadialSuppressionInfo");
static_assert(offsetof(USQRadialSuppressionInfo, ImpactSuppressionDistanceCurve) == 0x000060, "Member 'USQRadialSuppressionInfo::ImpactSuppressionDistanceCurve' has a wrong offset!");
static_assert(offsetof(USQRadialSuppressionInfo, ImpactSuppressionPower) == 0x000068, "Member 'USQRadialSuppressionInfo::ImpactSuppressionPower' has a wrong offset!");
static_assert(offsetof(USQRadialSuppressionInfo, InnerRadius) == 0x00006C, "Member 'USQRadialSuppressionInfo::InnerRadius' has a wrong offset!");
static_assert(offsetof(USQRadialSuppressionInfo, OuterRadius) == 0x000070, "Member 'USQRadialSuppressionInfo::OuterRadius' has a wrong offset!");
static_assert(offsetof(USQRadialSuppressionInfo, bSuppressFriendlies) == 0x000074, "Member 'USQRadialSuppressionInfo::bSuppressFriendlies' has a wrong offset!");

// Class Squad.SQSwitchTeamButton
// 0x0008 (0x0328 - 0x0320)
class USQSwitchTeamButton final : public USQBaseButton
{
public:
	class ASQPlayerController*                    OwnerPlayerController;                             // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSwitchTeamButton">();
	}
	static class USQSwitchTeamButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSwitchTeamButton>();
	}
};
static_assert(alignof(USQSwitchTeamButton) == 0x000008, "Wrong alignment on USQSwitchTeamButton");
static_assert(sizeof(USQSwitchTeamButton) == 0x000328, "Wrong size on USQSwitchTeamButton");
static_assert(offsetof(USQSwitchTeamButton, OwnerPlayerController) == 0x000320, "Member 'USQSwitchTeamButton::OwnerPlayerController' has a wrong offset!");

// Class Squad.SQTabButton
// 0x0028 (0x0348 - 0x0320)
class USQTabButton final : public USQBaseButton
{
public:
	uint8                                         Pad_13B7[0x8];                                     // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetSwitcher*                        ParentWidgetSwitcher;                              // 0x0328(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 MainBgImage;                                       // 0x0330(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             TabTextBlock;                                      // 0x0338(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerState*                         OwnerPlayerState;                                  // 0x0340(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQTabButton">();
	}
	static class USQTabButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQTabButton>();
	}
};
static_assert(alignof(USQTabButton) == 0x000008, "Wrong alignment on USQTabButton");
static_assert(sizeof(USQTabButton) == 0x000348, "Wrong size on USQTabButton");
static_assert(offsetof(USQTabButton, ParentWidgetSwitcher) == 0x000328, "Member 'USQTabButton::ParentWidgetSwitcher' has a wrong offset!");
static_assert(offsetof(USQTabButton, MainBgImage) == 0x000330, "Member 'USQTabButton::MainBgImage' has a wrong offset!");
static_assert(offsetof(USQTabButton, TabTextBlock) == 0x000338, "Member 'USQTabButton::TabTextBlock' has a wrong offset!");
static_assert(offsetof(USQTabButton, OwnerPlayerState) == 0x000340, "Member 'USQTabButton::OwnerPlayerState' has a wrong offset!");

// Class Squad.SQTeamDataCacher
// 0x0098 (0x0148 - 0x00B0)
class USQTeamDataCacher final : public UActorComponent
{
public:
	bool                                          bHasLoadedRequiredAssets;                          // 0x00B0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13B8[0x17];                                    // 0x00B1(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         LoadedClasses;                                     // 0x00C8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class UObject*>                        LoadedCDOs;                                        // 0x00D8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_13B9[0x60];                                    // 0x00E8(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQTeamDataCacher">();
	}
	static class USQTeamDataCacher* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQTeamDataCacher>();
	}
};
static_assert(alignof(USQTeamDataCacher) == 0x000008, "Wrong alignment on USQTeamDataCacher");
static_assert(sizeof(USQTeamDataCacher) == 0x000148, "Wrong size on USQTeamDataCacher");
static_assert(offsetof(USQTeamDataCacher, bHasLoadedRequiredAssets) == 0x0000B0, "Member 'USQTeamDataCacher::bHasLoadedRequiredAssets' has a wrong offset!");
static_assert(offsetof(USQTeamDataCacher, LoadedClasses) == 0x0000C8, "Member 'USQTeamDataCacher::LoadedClasses' has a wrong offset!");
static_assert(offsetof(USQTeamDataCacher, LoadedCDOs) == 0x0000D8, "Member 'USQTeamDataCacher::LoadedCDOs' has a wrong offset!");

// Class Squad.SQTeamInfo
// 0x0358 (0x0380 - 0x0028)
class USQTeamInfo : public UObject
{
public:
	class FString                                 ShortName;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_SQTeamInfo;                                   // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoClear, NativeAccessSpecifierPublic)
	class FText                                   CommanderRequirementsText;                         // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoClear, NativeAccessSpecifierPublic)
	bool                                          bBuddyRallyPointEnabled;                           // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13BA[0x7];                                     // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ASQSoldier>                 SoldierClass;                                      // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            RallyPointMesh;                                    // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USQRoleSettings*>                Roles;                                             // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQRoleGroupLimit>              GroupLimits;                                       // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQDeployableLimit>             DeployableFOBLimits;                               // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class USQRoleSettings*                        DefaultRole;                                       // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQRoleSettings*                        LeaveSquadRole;                                    // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             MapFlag;                                           // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             HudFlag;                                           // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             HudBadge;                                          // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             TeamImage;                                         // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQCommanderSounds                     CommanderSoundsList;                               // 0x00F0(0x0140)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSQTeamEventSounds                     TeamEventSoundsList;                               // 0x0230(0x00C8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSQMedicCalls                          MedicCall;                                         // 0x02F8(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FSQObjectiveSounds>             ObjectiveSoundsList;                               // 0x0370(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQTeamInfo">();
	}
	static class USQTeamInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQTeamInfo>();
	}
};
static_assert(alignof(USQTeamInfo) == 0x000008, "Wrong alignment on USQTeamInfo");
static_assert(sizeof(USQTeamInfo) == 0x000380, "Wrong size on USQTeamInfo");
static_assert(offsetof(USQTeamInfo, ShortName) == 0x000028, "Member 'USQTeamInfo::ShortName' has a wrong offset!");
static_assert(offsetof(USQTeamInfo, Name_SQTeamInfo) == 0x000038, "Member 'USQTeamInfo::Name_SQTeamInfo' has a wrong offset!");
static_assert(offsetof(USQTeamInfo, Description) == 0x000048, "Member 'USQTeamInfo::Description' has a wrong offset!");
static_assert(offsetof(USQTeamInfo, CommanderRequirementsText) == 0x000060, "Member 'USQTeamInfo::CommanderRequirementsText' has a wrong offset!");
static_assert(offsetof(USQTeamInfo, bBuddyRallyPointEnabled) == 0x000078, "Member 'USQTeamInfo::bBuddyRallyPointEnabled' has a wrong offset!");
static_assert(offsetof(USQTeamInfo, SoldierClass) == 0x000080, "Member 'USQTeamInfo::SoldierClass' has a wrong offset!");
static_assert(offsetof(USQTeamInfo, RallyPointMesh) == 0x000088, "Member 'USQTeamInfo::RallyPointMesh' has a wrong offset!");
static_assert(offsetof(USQTeamInfo, Roles) == 0x000090, "Member 'USQTeamInfo::Roles' has a wrong offset!");
static_assert(offsetof(USQTeamInfo, GroupLimits) == 0x0000A0, "Member 'USQTeamInfo::GroupLimits' has a wrong offset!");
static_assert(offsetof(USQTeamInfo, DeployableFOBLimits) == 0x0000B0, "Member 'USQTeamInfo::DeployableFOBLimits' has a wrong offset!");
static_assert(offsetof(USQTeamInfo, DefaultRole) == 0x0000C0, "Member 'USQTeamInfo::DefaultRole' has a wrong offset!");
static_assert(offsetof(USQTeamInfo, LeaveSquadRole) == 0x0000C8, "Member 'USQTeamInfo::LeaveSquadRole' has a wrong offset!");
static_assert(offsetof(USQTeamInfo, MapFlag) == 0x0000D0, "Member 'USQTeamInfo::MapFlag' has a wrong offset!");
static_assert(offsetof(USQTeamInfo, HudFlag) == 0x0000D8, "Member 'USQTeamInfo::HudFlag' has a wrong offset!");
static_assert(offsetof(USQTeamInfo, HudBadge) == 0x0000E0, "Member 'USQTeamInfo::HudBadge' has a wrong offset!");
static_assert(offsetof(USQTeamInfo, TeamImage) == 0x0000E8, "Member 'USQTeamInfo::TeamImage' has a wrong offset!");
static_assert(offsetof(USQTeamInfo, CommanderSoundsList) == 0x0000F0, "Member 'USQTeamInfo::CommanderSoundsList' has a wrong offset!");
static_assert(offsetof(USQTeamInfo, TeamEventSoundsList) == 0x000230, "Member 'USQTeamInfo::TeamEventSoundsList' has a wrong offset!");
static_assert(offsetof(USQTeamInfo, MedicCall) == 0x0002F8, "Member 'USQTeamInfo::MedicCall' has a wrong offset!");
static_assert(offsetof(USQTeamInfo, ObjectiveSoundsList) == 0x000370, "Member 'USQTeamInfo::ObjectiveSoundsList' has a wrong offset!");

// Class Squad.SQTeamInterface
// 0x0000 (0x0028 - 0x0028)
class ISQTeamInterface final : public IInterface
{
public:
	void OnTeamChange(int32 PreviousTeam);

	int32 GetTeamId() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQTeamInterface">();
	}
	static class ISQTeamInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISQTeamInterface>();
	}
};
static_assert(alignof(ISQTeamInterface) == 0x000008, "Wrong alignment on ISQTeamInterface");
static_assert(sizeof(ISQTeamInterface) == 0x000028, "Wrong size on ISQTeamInterface");

// Class Squad.SQTeamSpawnGroup
// 0x0010 (0x0410 - 0x0400)
class ASQTeamSpawnGroup final : public ASQGameSpawn
{
public:
	TArray<class ASQTeamSpawnPoint*>              SpawnPoints;                                       // 0x0400(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQTeamSpawnGroup">();
	}
	static class ASQTeamSpawnGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQTeamSpawnGroup>();
	}
};
static_assert(alignof(ASQTeamSpawnGroup) == 0x000008, "Wrong alignment on ASQTeamSpawnGroup");
static_assert(sizeof(ASQTeamSpawnGroup) == 0x000410, "Wrong size on ASQTeamSpawnGroup");
static_assert(offsetof(ASQTeamSpawnGroup, SpawnPoints) == 0x000400, "Member 'ASQTeamSpawnGroup::SpawnPoints' has a wrong offset!");

// Class Squad.SQTeamSpawnPoint
// 0x0008 (0x0408 - 0x0400)
class ASQTeamSpawnPoint final : public ASQGameSpawn
{
public:
	class ASQTeamSpawnGroup*                      Group;                                             // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQTeamSpawnPoint">();
	}
	static class ASQTeamSpawnPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQTeamSpawnPoint>();
	}
};
static_assert(alignof(ASQTeamSpawnPoint) == 0x000008, "Wrong alignment on ASQTeamSpawnPoint");
static_assert(sizeof(ASQTeamSpawnPoint) == 0x000408, "Wrong size on ASQTeamSpawnPoint");
static_assert(offsetof(ASQTeamSpawnPoint, Group) == 0x000400, "Member 'ASQTeamSpawnPoint::Group' has a wrong offset!");

// Class Squad.SQTeamState
// 0x01B0 (0x03D8 - 0x0228)
class ASQTeamState final : public AInfo
{
public:
	int32                                         Tickets;                                           // 0x0228(0x0004)(BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13BB[0x4];                                     // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQTeam*                                AuthorityTeam;                                     // 0x0230(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQTeamDataCacher*                      DataCacher;                                        // 0x0238(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0240(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Score;                                             // 0x0244(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeamWorkScore;                                     // 0x0248(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ObjectiveScore;                                    // 0x024C(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumKills;                                          // 0x0250(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumDeaths;                                         // 0x0254(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWoundeds;                                       // 0x0258(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumWounds;                                         // 0x025C(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumTeamkills;                                      // 0x0260(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealPoints;                                        // 0x0264(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RevivedPoints;                                     // 0x0268(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13BC[0x24];                                    // 0x026C(0x0024)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ASQSquadState*>                  IndexedSquadStates;                                // 0x0290(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	TArray<class ASQSquadState*>                  SquadStates;                                       // 0x02A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_13BD[0x40];                                    // 0x02B0(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ASQPlayerState*>                 PlayerStates;                                      // 0x02F0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class ASQCommanderState*                      CommanderState;                                    // 0x0300(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FactionSetupId;                                    // 0x0308(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQFactionSetup*                        FactionSetup;                                      // 0x0310(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnDeployableTeamAvailabilityUpdate;                // 0x0318(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnDeployablePersonalAvailabilityUpdate;            // 0x0328(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnRoleTeamAvailabilityUpdate;                      // 0x0338(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnRolePersonalAvailabilityUpdate;                  // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnActionTeamAvailabilityUpdate;                    // 0x0358(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnActionPersonalAvailabilityUpdate;                // 0x0368(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnVehicleTeamAvailabilityUpdate;                   // 0x0378(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnVehiclePersonalAvailabilityUpdate;               // 0x0388(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FSQAvailabilityState_Deployable> DeployableAvailabilities;                          // 0x0398(0x0010)(Net, ZeroConstructor, Transient, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FSQAvailabilityState_Role>      RoleAvailabilities;                                // 0x03A8(0x0010)(Net, ZeroConstructor, Transient, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FSQAvailabilityState_Action>    ActionAvailabilities;                              // 0x03B8(0x0010)(Net, ZeroConstructor, Transient, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FSQAvailabilityState_Vehicle>   VehicleAvailabilities;                             // 0x03C8(0x0010)(Net, ZeroConstructor, Transient, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void AddPlayerState(class ASQPlayerState* PlayerState);
	void AdjustTickets(int32 InDelta);
	int32 GetFirstAvailableSquadId();
	void OnRep_ActionsAvailabilities();
	void OnRep_DeployableAvailabilities();
	void OnRep_FactionSetup();
	void OnRep_IndexedSquadStates();
	void OnRep_RoleAvailabilities();
	void OnRep_VehicleAvailabilities();
	void RefreshSquadStates();
	void RemovePlayerState(class ASQPlayerState* PlayerState);
	void ScorePoints(int32 Points, const class FString& Reason, const class FName& ScoreGroup);
	void ScorePointsDelayed(int32 Points, const class FString& Reason, const class FName& ScoreGroup);
	void SetTickets(int32 InTickets);

	void GetActions(class ASQPlayerController* InPlayer, TArray<struct FSQAvailabilityState_Action>* OutActions) const;
	class USQRoleSettings* GetDefaultRole() const;
	class USQRoleSettings* GetDefaultSquadLeaderRole() const;
	void GetDeployables(class ASQPlayerController* InPlayer, TArray<struct FSQAvailabilityState_Deployable>* OutDeployables) const;
	void GetDeployablesForTeam(TArray<struct FSQAvailabilityState_Deployable>* OutDeployables) const;
	class USQFaction* GetFaction() const;
	class FString GetFactionDisplayName() const;
	class FName GetFactionId() const;
	class FString GetFactionSetupDisplayName() const;
	class USQRoleSettings* GetLeaveSquadRole() const;
	int32 GetPlayerCount() const;
	void GetRoles(class ASQPlayerController* InPlayer, TArray<struct FSQAvailabilityState_Role>* OutRoles) const;
	void GetRolesForRearm(class ASQPlayerController* InPlayer, const TScriptInterface<class ISQRearmSource>& InRearmSource, TArray<struct FSQAvailabilityState_Role>* OutRoles) const;
	int32 GetTickets() const;
	void GetVehicles(class ASQPlayerController* InPlayer, TArray<struct FSQAvailabilityState_Vehicle>* OutVehicles) const;
	void GetVehiclesForTeam(TArray<struct FSQAvailabilityState_Vehicle>* OutVehicles) const;
	bool IsConfigured() const;
	bool TryGetActionAvailability(class ASQPlayerController* InPlayer, const class USQActionSettings* InActionSetting, struct FSQAvailabilityState_Action* OutUpdatedActionState) const;
	bool TryGetActiveRoleAvailability(class ASQPlayerController* InPlayer, struct FSQAvailabilityState_Role* OutActiveRoleState) const;
	bool TryGetDeployableAvailability(class ASQPlayerController* InPlayer, const class USQDeployableSettings* InDeployableSetting, struct FSQAvailabilityState_Deployable* OutUpdatedDeployableState) const;
	bool TryGetFactionDisplayName(class FText* OutDisplayName) const;
	bool TryGetFactionSetupDisplayName(class FText* OutDisplayName) const;
	bool TryGetFactionShortName(class FText* OutShortName) const;
	bool TryGetRoleAvailability(class ASQPlayerController* InPlayer, const class USQRoleSettings* InRoleSetting, struct FSQAvailabilityState_Role* OutUpdatedRoleState) const;
	bool TryGetRoleRearmAvailability(class ASQPlayerController* InPlayer, const TScriptInterface<class ISQRearmSource>& InRearmSource, const class USQRoleSettings* InRoleSetting, struct FSQAvailabilityState_Role* OutUpdatedRoleState, float* OutCost) const;
	bool TryGetVehicleAvailability(class ASQPlayerController* InPlayer, const class USQVehicleSettings* InVehicleSetting, struct FSQAvailabilityState_Vehicle* OutUpdatedVehicleState) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQTeamState">();
	}
	static class ASQTeamState* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQTeamState>();
	}
};
static_assert(alignof(ASQTeamState) == 0x000008, "Wrong alignment on ASQTeamState");
static_assert(sizeof(ASQTeamState) == 0x0003D8, "Wrong size on ASQTeamState");
static_assert(offsetof(ASQTeamState, Tickets) == 0x000228, "Member 'ASQTeamState::Tickets' has a wrong offset!");
static_assert(offsetof(ASQTeamState, AuthorityTeam) == 0x000230, "Member 'ASQTeamState::AuthorityTeam' has a wrong offset!");
static_assert(offsetof(ASQTeamState, DataCacher) == 0x000238, "Member 'ASQTeamState::DataCacher' has a wrong offset!");
static_assert(offsetof(ASQTeamState, ID) == 0x000240, "Member 'ASQTeamState::ID' has a wrong offset!");
static_assert(offsetof(ASQTeamState, Score) == 0x000244, "Member 'ASQTeamState::Score' has a wrong offset!");
static_assert(offsetof(ASQTeamState, TeamWorkScore) == 0x000248, "Member 'ASQTeamState::TeamWorkScore' has a wrong offset!");
static_assert(offsetof(ASQTeamState, ObjectiveScore) == 0x00024C, "Member 'ASQTeamState::ObjectiveScore' has a wrong offset!");
static_assert(offsetof(ASQTeamState, NumKills) == 0x000250, "Member 'ASQTeamState::NumKills' has a wrong offset!");
static_assert(offsetof(ASQTeamState, NumDeaths) == 0x000254, "Member 'ASQTeamState::NumDeaths' has a wrong offset!");
static_assert(offsetof(ASQTeamState, NumWoundeds) == 0x000258, "Member 'ASQTeamState::NumWoundeds' has a wrong offset!");
static_assert(offsetof(ASQTeamState, NumWounds) == 0x00025C, "Member 'ASQTeamState::NumWounds' has a wrong offset!");
static_assert(offsetof(ASQTeamState, NumTeamkills) == 0x000260, "Member 'ASQTeamState::NumTeamkills' has a wrong offset!");
static_assert(offsetof(ASQTeamState, HealPoints) == 0x000264, "Member 'ASQTeamState::HealPoints' has a wrong offset!");
static_assert(offsetof(ASQTeamState, RevivedPoints) == 0x000268, "Member 'ASQTeamState::RevivedPoints' has a wrong offset!");
static_assert(offsetof(ASQTeamState, IndexedSquadStates) == 0x000290, "Member 'ASQTeamState::IndexedSquadStates' has a wrong offset!");
static_assert(offsetof(ASQTeamState, SquadStates) == 0x0002A0, "Member 'ASQTeamState::SquadStates' has a wrong offset!");
static_assert(offsetof(ASQTeamState, PlayerStates) == 0x0002F0, "Member 'ASQTeamState::PlayerStates' has a wrong offset!");
static_assert(offsetof(ASQTeamState, CommanderState) == 0x000300, "Member 'ASQTeamState::CommanderState' has a wrong offset!");
static_assert(offsetof(ASQTeamState, FactionSetupId) == 0x000308, "Member 'ASQTeamState::FactionSetupId' has a wrong offset!");
static_assert(offsetof(ASQTeamState, FactionSetup) == 0x000310, "Member 'ASQTeamState::FactionSetup' has a wrong offset!");
static_assert(offsetof(ASQTeamState, OnDeployableTeamAvailabilityUpdate) == 0x000318, "Member 'ASQTeamState::OnDeployableTeamAvailabilityUpdate' has a wrong offset!");
static_assert(offsetof(ASQTeamState, OnDeployablePersonalAvailabilityUpdate) == 0x000328, "Member 'ASQTeamState::OnDeployablePersonalAvailabilityUpdate' has a wrong offset!");
static_assert(offsetof(ASQTeamState, OnRoleTeamAvailabilityUpdate) == 0x000338, "Member 'ASQTeamState::OnRoleTeamAvailabilityUpdate' has a wrong offset!");
static_assert(offsetof(ASQTeamState, OnRolePersonalAvailabilityUpdate) == 0x000348, "Member 'ASQTeamState::OnRolePersonalAvailabilityUpdate' has a wrong offset!");
static_assert(offsetof(ASQTeamState, OnActionTeamAvailabilityUpdate) == 0x000358, "Member 'ASQTeamState::OnActionTeamAvailabilityUpdate' has a wrong offset!");
static_assert(offsetof(ASQTeamState, OnActionPersonalAvailabilityUpdate) == 0x000368, "Member 'ASQTeamState::OnActionPersonalAvailabilityUpdate' has a wrong offset!");
static_assert(offsetof(ASQTeamState, OnVehicleTeamAvailabilityUpdate) == 0x000378, "Member 'ASQTeamState::OnVehicleTeamAvailabilityUpdate' has a wrong offset!");
static_assert(offsetof(ASQTeamState, OnVehiclePersonalAvailabilityUpdate) == 0x000388, "Member 'ASQTeamState::OnVehiclePersonalAvailabilityUpdate' has a wrong offset!");
static_assert(offsetof(ASQTeamState, DeployableAvailabilities) == 0x000398, "Member 'ASQTeamState::DeployableAvailabilities' has a wrong offset!");
static_assert(offsetof(ASQTeamState, RoleAvailabilities) == 0x0003A8, "Member 'ASQTeamState::RoleAvailabilities' has a wrong offset!");
static_assert(offsetof(ASQTeamState, ActionAvailabilities) == 0x0003B8, "Member 'ASQTeamState::ActionAvailabilities' has a wrong offset!");
static_assert(offsetof(ASQTeamState, VehicleAvailabilities) == 0x0003C8, "Member 'ASQTeamState::VehicleAvailabilities' has a wrong offset!");

// Class Squad.SQTemperatureComponent
// 0x0040 (0x0240 - 0x0200)
class USQTemperatureComponent final : public USceneComponent
{
public:
	class ASQLastingEffect*                       TemperatureLastingEffect;                          // 0x01F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTemperatureIncrementEvent;                       // 0x0200(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         IncrementalTriggerTemperature;                     // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TemperatureRange;                                  // 0x0214(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TemperatureDrift;                                  // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            LastTempChanger;                                   // 0x0220(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentTemperature;                                // 0x0228(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HigherTempTrigger;                                 // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowerTempTrigger;                                  // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C9[0xC];                                     // 0x0234(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AdjustTemperature(float DegressOfAdjustment, class AController* TempChanger);
	void OnRep_CurrentTemperature(float PreviousTemperature);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQTemperatureComponent">();
	}
	static class USQTemperatureComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQTemperatureComponent>();
	}
};
static_assert(alignof(USQTemperatureComponent) == 0x000010, "Wrong alignment on USQTemperatureComponent");
static_assert(sizeof(USQTemperatureComponent) == 0x000240, "Wrong size on USQTemperatureComponent");
static_assert(offsetof(USQTemperatureComponent, TemperatureLastingEffect) == 0x0001F8, "Member 'USQTemperatureComponent::TemperatureLastingEffect' has a wrong offset!");
static_assert(offsetof(USQTemperatureComponent, OnTemperatureIncrementEvent) == 0x000200, "Member 'USQTemperatureComponent::OnTemperatureIncrementEvent' has a wrong offset!");
static_assert(offsetof(USQTemperatureComponent, IncrementalTriggerTemperature) == 0x000210, "Member 'USQTemperatureComponent::IncrementalTriggerTemperature' has a wrong offset!");
static_assert(offsetof(USQTemperatureComponent, TemperatureRange) == 0x000214, "Member 'USQTemperatureComponent::TemperatureRange' has a wrong offset!");
static_assert(offsetof(USQTemperatureComponent, TemperatureDrift) == 0x00021C, "Member 'USQTemperatureComponent::TemperatureDrift' has a wrong offset!");
static_assert(offsetof(USQTemperatureComponent, LastTempChanger) == 0x000220, "Member 'USQTemperatureComponent::LastTempChanger' has a wrong offset!");
static_assert(offsetof(USQTemperatureComponent, CurrentTemperature) == 0x000228, "Member 'USQTemperatureComponent::CurrentTemperature' has a wrong offset!");
static_assert(offsetof(USQTemperatureComponent, HigherTempTrigger) == 0x00022C, "Member 'USQTemperatureComponent::HigherTempTrigger' has a wrong offset!");
static_assert(offsetof(USQTemperatureComponent, LowerTempTrigger) == 0x000230, "Member 'USQTemperatureComponent::LowerTempTrigger' has a wrong offset!");

// Class Squad.SQToastWidget
// 0x0030 (0x0290 - 0x0260)
class USQToastWidget : public UUserWidget
{
public:
	FMulticastInlineDelegateProperty_             ToastTextUpdated;                                  // 0x0260(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FText                                   ToastText;                                         // 0x0270(0x0018)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	float                                         InitialLifetime;                                   // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13CB[0x4];                                     // 0x028C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetLifetime(float InLifetime);
	void SetToastText(const class FText& InToastText);
	void ToastTextUpdatedEvent__DelegateSignature(const class FText& Param_ToastText);

	class FText GetToastText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQToastWidget">();
	}
	static class USQToastWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQToastWidget>();
	}
};
static_assert(alignof(USQToastWidget) == 0x000008, "Wrong alignment on USQToastWidget");
static_assert(sizeof(USQToastWidget) == 0x000290, "Wrong size on USQToastWidget");
static_assert(offsetof(USQToastWidget, ToastTextUpdated) == 0x000260, "Member 'USQToastWidget::ToastTextUpdated' has a wrong offset!");
static_assert(offsetof(USQToastWidget, ToastText) == 0x000270, "Member 'USQToastWidget::ToastText' has a wrong offset!");
static_assert(offsetof(USQToastWidget, InitialLifetime) == 0x000288, "Member 'USQToastWidget::InitialLifetime' has a wrong offset!");

// Class Squad.SQToolTipBaseWidget
// 0x0010 (0x0270 - 0x0260)
class USQToolTipBaseWidget : public UUserWidget
{
public:
	class USQMap*                                 OwnerMap;                                          // 0x0260(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQMapIconWidget*                       ParentWidget;                                      // 0x0268(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQToolTipBaseWidget">();
	}
	static class USQToolTipBaseWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQToolTipBaseWidget>();
	}
};
static_assert(alignof(USQToolTipBaseWidget) == 0x000008, "Wrong alignment on USQToolTipBaseWidget");
static_assert(sizeof(USQToolTipBaseWidget) == 0x000270, "Wrong size on USQToolTipBaseWidget");
static_assert(offsetof(USQToolTipBaseWidget, OwnerMap) == 0x000260, "Member 'USQToolTipBaseWidget::OwnerMap' has a wrong offset!");
static_assert(offsetof(USQToolTipBaseWidget, ParentWidget) == 0x000268, "Member 'USQToolTipBaseWidget::ParentWidget' has a wrong offset!");

// Class Squad.SQTournamentModeRuleset
// 0x0010 (0x0268 - 0x0258)
class ASQTournamentModeRuleset final : public ASQGameRuleSet
{
public:
	TArray<struct FSQSettingsRestriction>         Restrictions;                                      // 0x0258(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQTournamentModeRuleset">();
	}
	static class ASQTournamentModeRuleset* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQTournamentModeRuleset>();
	}
};
static_assert(alignof(ASQTournamentModeRuleset) == 0x000008, "Wrong alignment on ASQTournamentModeRuleset");
static_assert(sizeof(ASQTournamentModeRuleset) == 0x000268, "Wrong size on ASQTournamentModeRuleset");
static_assert(offsetof(ASQTournamentModeRuleset, Restrictions) == 0x000258, "Member 'ASQTournamentModeRuleset::Restrictions' has a wrong offset!");

// Class Squad.SQTournamentModeRulesetState
// 0x0018 (0x0248 - 0x0230)
class ASQTournamentModeRulesetState final : public ASQRulesetState
{
public:
	TArray<struct FSQSettingsRestriction>         Restrictions;                                      // 0x0230(0x0010)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	uint8                                         Pad_13CC[0x8];                                     // 0x0240(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_Restrictions();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQTournamentModeRulesetState">();
	}
	static class ASQTournamentModeRulesetState* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQTournamentModeRulesetState>();
	}
};
static_assert(alignof(ASQTournamentModeRulesetState) == 0x000008, "Wrong alignment on ASQTournamentModeRulesetState");
static_assert(sizeof(ASQTournamentModeRulesetState) == 0x000248, "Wrong size on ASQTournamentModeRulesetState");
static_assert(offsetof(ASQTournamentModeRulesetState, Restrictions) == 0x000230, "Member 'ASQTournamentModeRulesetState::Restrictions' has a wrong offset!");

// Class Squad.SQTrackedVehicle
// 0x0000 (0x0B60 - 0x0B60)
class ASQTrackedVehicle : public ASQGroundVehicle
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQTrackedVehicle">();
	}
	static class ASQTrackedVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQTrackedVehicle>();
	}
};
static_assert(alignof(ASQTrackedVehicle) == 0x000010, "Wrong alignment on ASQTrackedVehicle");
static_assert(sizeof(ASQTrackedVehicle) == 0x000B60, "Wrong size on ASQTrackedVehicle");

// Class Squad.SQVelocityRotatingMovementComponent
// 0x00F8 (0x02B0 - 0x01B8)
class USQVelocityRotatingMovementComponent : public USQMovementComponentPacked
{
public:
	float                                         AngularDeltaCombineThreshold;                      // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13CD[0x4];                                     // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        UpdatedComponent;                                  // 0x01C0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InputAccelerationMultiplier;                       // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoInputDecelerationMultiplier;                     // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecelerationMultiplier;                            // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StabilizationSpeed;                                // 0x01D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQRotationConstraints                 RotationConstraints;                               // 0x01DC(0x001C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ParentYawToMinPitch;                               // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ParentYawToMaxPitch;                               // 0x0200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQVelocityRotatingMovementComponent*   HeadingParentComponent;                            // 0x0208(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13CE[0x48];                                    // 0x0210(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQRotationVelocityRepMovement         RotationReplicatedMovement;                        // 0x0258(0x0050)(Net, RepNotify, Protected, NativeAccessSpecifierProtected)
	bool                                          IsDisabled;                                        // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13CF[0x7];                                     // 0x02A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddRotationInput(const struct FRotator& InRotationInput);
	void ClientSetStabilizationTargetHeading(const struct FRotator& InTargetHeading);
	void OnRep_RotationReplicatedMovement();
	void ServerSetStabilizationTargetHeading(const struct FRotator& InTargetHeading);
	void SetStabilizationEnabled(bool bInIsStabilizationEnabled);
	void SetStabilizationTargetHeading(const struct FRotator& InTargetHeading);
	bool ToggleStabilization();

	struct FVector GetCurrentLocation() const;
	struct FRotator GetCurrentRotation() const;
	struct FQuat GetWorldRotation() const;
	bool IsStabilizationEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVelocityRotatingMovementComponent">();
	}
	static class USQVelocityRotatingMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVelocityRotatingMovementComponent>();
	}
};
static_assert(alignof(USQVelocityRotatingMovementComponent) == 0x000008, "Wrong alignment on USQVelocityRotatingMovementComponent");
static_assert(sizeof(USQVelocityRotatingMovementComponent) == 0x0002B0, "Wrong size on USQVelocityRotatingMovementComponent");
static_assert(offsetof(USQVelocityRotatingMovementComponent, AngularDeltaCombineThreshold) == 0x0001B8, "Member 'USQVelocityRotatingMovementComponent::AngularDeltaCombineThreshold' has a wrong offset!");
static_assert(offsetof(USQVelocityRotatingMovementComponent, UpdatedComponent) == 0x0001C0, "Member 'USQVelocityRotatingMovementComponent::UpdatedComponent' has a wrong offset!");
static_assert(offsetof(USQVelocityRotatingMovementComponent, InputAccelerationMultiplier) == 0x0001C8, "Member 'USQVelocityRotatingMovementComponent::InputAccelerationMultiplier' has a wrong offset!");
static_assert(offsetof(USQVelocityRotatingMovementComponent, NoInputDecelerationMultiplier) == 0x0001D0, "Member 'USQVelocityRotatingMovementComponent::NoInputDecelerationMultiplier' has a wrong offset!");
static_assert(offsetof(USQVelocityRotatingMovementComponent, DecelerationMultiplier) == 0x0001D4, "Member 'USQVelocityRotatingMovementComponent::DecelerationMultiplier' has a wrong offset!");
static_assert(offsetof(USQVelocityRotatingMovementComponent, StabilizationSpeed) == 0x0001D8, "Member 'USQVelocityRotatingMovementComponent::StabilizationSpeed' has a wrong offset!");
static_assert(offsetof(USQVelocityRotatingMovementComponent, RotationConstraints) == 0x0001DC, "Member 'USQVelocityRotatingMovementComponent::RotationConstraints' has a wrong offset!");
static_assert(offsetof(USQVelocityRotatingMovementComponent, ParentYawToMinPitch) == 0x0001F8, "Member 'USQVelocityRotatingMovementComponent::ParentYawToMinPitch' has a wrong offset!");
static_assert(offsetof(USQVelocityRotatingMovementComponent, ParentYawToMaxPitch) == 0x000200, "Member 'USQVelocityRotatingMovementComponent::ParentYawToMaxPitch' has a wrong offset!");
static_assert(offsetof(USQVelocityRotatingMovementComponent, HeadingParentComponent) == 0x000208, "Member 'USQVelocityRotatingMovementComponent::HeadingParentComponent' has a wrong offset!");
static_assert(offsetof(USQVelocityRotatingMovementComponent, RotationReplicatedMovement) == 0x000258, "Member 'USQVelocityRotatingMovementComponent::RotationReplicatedMovement' has a wrong offset!");
static_assert(offsetof(USQVelocityRotatingMovementComponent, IsDisabled) == 0x0002A8, "Member 'USQVelocityRotatingMovementComponent::IsDisabled' has a wrong offset!");

// Class Squad.SQTurretMovementComponent
// 0x0030 (0x02E0 - 0x02B0)
class USQTurretMovementComponent final : public USQVelocityRotatingMovementComponent
{
public:
	class USceneComponent*                        UpdatedPitchComponent;                             // 0x02B0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        UpdatedYawComponent;                               // 0x02B8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawStabilizationSpeed;                             // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchStabilizationSpeed;                           // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxYawSpeed;                                       // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPitchSpeed;                                     // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasAcceleration;                                  // 0x02D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13D0[0xF];                                     // 0x02D1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQTurretMovementComponent">();
	}
	static class USQTurretMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQTurretMovementComponent>();
	}
};
static_assert(alignof(USQTurretMovementComponent) == 0x000008, "Wrong alignment on USQTurretMovementComponent");
static_assert(sizeof(USQTurretMovementComponent) == 0x0002E0, "Wrong size on USQTurretMovementComponent");
static_assert(offsetof(USQTurretMovementComponent, UpdatedPitchComponent) == 0x0002B0, "Member 'USQTurretMovementComponent::UpdatedPitchComponent' has a wrong offset!");
static_assert(offsetof(USQTurretMovementComponent, UpdatedYawComponent) == 0x0002B8, "Member 'USQTurretMovementComponent::UpdatedYawComponent' has a wrong offset!");
static_assert(offsetof(USQTurretMovementComponent, YawStabilizationSpeed) == 0x0002C0, "Member 'USQTurretMovementComponent::YawStabilizationSpeed' has a wrong offset!");
static_assert(offsetof(USQTurretMovementComponent, PitchStabilizationSpeed) == 0x0002C4, "Member 'USQTurretMovementComponent::PitchStabilizationSpeed' has a wrong offset!");
static_assert(offsetof(USQTurretMovementComponent, MaxYawSpeed) == 0x0002C8, "Member 'USQTurretMovementComponent::MaxYawSpeed' has a wrong offset!");
static_assert(offsetof(USQTurretMovementComponent, MaxPitchSpeed) == 0x0002CC, "Member 'USQTurretMovementComponent::MaxPitchSpeed' has a wrong offset!");
static_assert(offsetof(USQTurretMovementComponent, bHasAcceleration) == 0x0002D0, "Member 'USQTurretMovementComponent::bHasAcceleration' has a wrong offset!");

// Class Squad.SQUISettings
// 0x0058 (0x0090 - 0x0038)
class USQUISettings final : public UDeveloperSettings
{
public:
	struct FColor                                 Yellow;                                            // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Grey;                                              // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Other;                                             // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NeutralColor;                                      // 0x0044(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FriendlyColor;                                     // 0x0054(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           EnemyColor;                                        // 0x0064(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SquadColor;                                        // 0x0074(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13D1[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AActor>                     WorldIconClass;                                    // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQUISettings">();
	}
	static class USQUISettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQUISettings>();
	}
};
static_assert(alignof(USQUISettings) == 0x000008, "Wrong alignment on USQUISettings");
static_assert(sizeof(USQUISettings) == 0x000090, "Wrong size on USQUISettings");
static_assert(offsetof(USQUISettings, Yellow) == 0x000038, "Member 'USQUISettings::Yellow' has a wrong offset!");
static_assert(offsetof(USQUISettings, Grey) == 0x00003C, "Member 'USQUISettings::Grey' has a wrong offset!");
static_assert(offsetof(USQUISettings, Other) == 0x000040, "Member 'USQUISettings::Other' has a wrong offset!");
static_assert(offsetof(USQUISettings, NeutralColor) == 0x000044, "Member 'USQUISettings::NeutralColor' has a wrong offset!");
static_assert(offsetof(USQUISettings, FriendlyColor) == 0x000054, "Member 'USQUISettings::FriendlyColor' has a wrong offset!");
static_assert(offsetof(USQUISettings, EnemyColor) == 0x000064, "Member 'USQUISettings::EnemyColor' has a wrong offset!");
static_assert(offsetof(USQUISettings, SquadColor) == 0x000074, "Member 'USQUISettings::SquadColor' has a wrong offset!");
static_assert(offsetof(USQUISettings, WorldIconClass) == 0x000088, "Member 'USQUISettings::WorldIconClass' has a wrong offset!");

// Class Squad.SQUpdateSessionsCallbackProxy
// 0x0120 (0x0150 - 0x0030)
class USQUpdateSessionsCallbackProxy final : public UOnlineBlueprintCallProxyBase
{
public:
	FMulticastInlineDelegateProperty_             OnSuccess;                                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFailure;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_13D2[0xF8];                                    // 0x0050(0x00F8)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                WorldContextObject;                                // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static bool GetAnticheatProtected(const struct FBlueprintSessionResult& Result);
	static int32 GetCurrentPlayers(const struct FBlueprintSessionResult& Result);
	static class FString GetGameMode(const struct FBlueprintSessionResult& Result);
	static class FString GetGameVersion(const struct FBlueprintSessionResult& Result);
	static bool GetLicensedServer(class UObject* Param_WorldContextObject, const struct FBlueprintSessionResult& Result);
	static class FString GetMapName(const struct FBlueprintSessionResult& Result);
	static int32 GetMatchTimeout(const struct FBlueprintSessionResult& Result);
	static int32 GetMaxPlayers(const struct FBlueprintSessionResult& Result);
	static bool GetPasswordProtected(const struct FBlueprintSessionResult& Result);
	static int32 GetPingInMs(const struct FBlueprintSessionResult& Result);
	static class FString GetSearchKeywords(const struct FBlueprintSessionResult& Result);
	static class FString GetServerName(const struct FBlueprintSessionResult& Result);
	static struct FSQSessionFlagStruct GetSessionFlagStruct(const struct FBlueprintSessionResult& Result);
	static class USQUpdateSessionsCallbackProxy* UpdateSession(class UObject* Param_WorldContextObject, class APlayerController* PlayerController, class FName SessionName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQUpdateSessionsCallbackProxy">();
	}
	static class USQUpdateSessionsCallbackProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQUpdateSessionsCallbackProxy>();
	}
};
static_assert(alignof(USQUpdateSessionsCallbackProxy) == 0x000008, "Wrong alignment on USQUpdateSessionsCallbackProxy");
static_assert(sizeof(USQUpdateSessionsCallbackProxy) == 0x000150, "Wrong size on USQUpdateSessionsCallbackProxy");
static_assert(offsetof(USQUpdateSessionsCallbackProxy, OnSuccess) == 0x000030, "Member 'USQUpdateSessionsCallbackProxy::OnSuccess' has a wrong offset!");
static_assert(offsetof(USQUpdateSessionsCallbackProxy, OnFailure) == 0x000040, "Member 'USQUpdateSessionsCallbackProxy::OnFailure' has a wrong offset!");
static_assert(offsetof(USQUpdateSessionsCallbackProxy, WorldContextObject) == 0x000148, "Member 'USQUpdateSessionsCallbackProxy::WorldContextObject' has a wrong offset!");

// Class Squad.SQUsable
// 0x0000 (0x0028 - 0x0028)
class ISQUsable final : public IInterface
{
public:
	void BPDisplayPrompt(class AController* User);
	void BPHidePrompt();
	void BPOnUsed(class AController* User);
	void BPStopUsed(class AController* User);
	int32 GetInterfaceTeam();
	struct FSQUsableData GetUsableData();
	void ServerOnUsed(class AController* User);
	void ServerStopUsed(class AController* User);
	bool ShouldDisplayPrompt(class AController* User);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQUsable">();
	}
	static class ISQUsable* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISQUsable>();
	}
};
static_assert(alignof(ISQUsable) == 0x000008, "Wrong alignment on ISQUsable");
static_assert(sizeof(ISQUsable) == 0x000028, "Wrong size on ISQUsable");

// Class Squad.SQUserWidget_StoreCard
// 0x0048 (0x02A8 - 0x0260)
class USQUserWidget_StoreCard : public UUserWidget
{
public:
	class UButton*                                BundleButton;                                      // 0x0260(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 BundleImage;                                       // 0x0268(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             BundleName;                                        // 0x0270(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             BundleDescription;                                 // 0x0278(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBorder*                                BundleSaleBadge;                                   // 0x0280(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBorder*                                BundleNewBadge;                                    // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBorder*                                BundleOwnedBadge;                                  // 0x0290(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13DB[0x8];                                     // 0x0298(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UODKBazaarBundle*                       BazaarBundle;                                      // 0x02A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnClick();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQUserWidget_StoreCard">();
	}
	static class USQUserWidget_StoreCard* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQUserWidget_StoreCard>();
	}
};
static_assert(alignof(USQUserWidget_StoreCard) == 0x000008, "Wrong alignment on USQUserWidget_StoreCard");
static_assert(sizeof(USQUserWidget_StoreCard) == 0x0002A8, "Wrong size on USQUserWidget_StoreCard");
static_assert(offsetof(USQUserWidget_StoreCard, BundleButton) == 0x000260, "Member 'USQUserWidget_StoreCard::BundleButton' has a wrong offset!");
static_assert(offsetof(USQUserWidget_StoreCard, BundleImage) == 0x000268, "Member 'USQUserWidget_StoreCard::BundleImage' has a wrong offset!");
static_assert(offsetof(USQUserWidget_StoreCard, BundleName) == 0x000270, "Member 'USQUserWidget_StoreCard::BundleName' has a wrong offset!");
static_assert(offsetof(USQUserWidget_StoreCard, BundleDescription) == 0x000278, "Member 'USQUserWidget_StoreCard::BundleDescription' has a wrong offset!");
static_assert(offsetof(USQUserWidget_StoreCard, BundleSaleBadge) == 0x000280, "Member 'USQUserWidget_StoreCard::BundleSaleBadge' has a wrong offset!");
static_assert(offsetof(USQUserWidget_StoreCard, BundleNewBadge) == 0x000288, "Member 'USQUserWidget_StoreCard::BundleNewBadge' has a wrong offset!");
static_assert(offsetof(USQUserWidget_StoreCard, BundleOwnedBadge) == 0x000290, "Member 'USQUserWidget_StoreCard::BundleOwnedBadge' has a wrong offset!");
static_assert(offsetof(USQUserWidget_StoreCard, BazaarBundle) == 0x0002A0, "Member 'USQUserWidget_StoreCard::BazaarBundle' has a wrong offset!");

// Class Squad.SQUserWidget_StoreScreen
// 0x0050 (0x02B0 - 0x0260)
class USQUserWidget_StoreScreen : public UUserWidget
{
public:
	FMulticastInlineDelegateProperty_             OnNewBundleDelegate;                               // 0x0260(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TDelegate<void(struct FODKBazaarPurchaseCompletedData& PurchaseData)> OnPurchase;                                        // 0x0270(0x0010)(ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         NumberOfColumns;                                   // 0x0280(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBundleCategory                               CurrentCategory;                                   // 0x0284(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowOwnedBundles;                                 // 0x0285(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13DC[0x2];                                     // 0x0286(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UUniformGridPanel*                      StoreGrid;                                         // 0x0288(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UODKBazaarBundle*>               StoreBundles;                                      // 0x0290(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class UODKBazaarBundle*                       PreviewBundle;                                     // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class USQUserWidget_StoreCard>    StoreCardClass;                                    // 0x02A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnPurchaseCompleted(const struct FODKBazaarPurchaseCompletedData& PurchaseCompletedData);
	void PreviewBundleScreen(const class UODKBazaarBundle* BazaarBundle);
	void RefreshStoreLoadout(EBundleCategory CategoryToDisplay);
	void SetupWidget(const struct FTitleData& TitleData);
	void ToggleShowOwnedBundles(bool bNewShowOwnedBundles);
	void TryGotoPurchaseForBundle(class UODKBazaarBundle* BazaarBundle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQUserWidget_StoreScreen">();
	}
	static class USQUserWidget_StoreScreen* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQUserWidget_StoreScreen>();
	}
};
static_assert(alignof(USQUserWidget_StoreScreen) == 0x000008, "Wrong alignment on USQUserWidget_StoreScreen");
static_assert(sizeof(USQUserWidget_StoreScreen) == 0x0002B0, "Wrong size on USQUserWidget_StoreScreen");
static_assert(offsetof(USQUserWidget_StoreScreen, OnNewBundleDelegate) == 0x000260, "Member 'USQUserWidget_StoreScreen::OnNewBundleDelegate' has a wrong offset!");
static_assert(offsetof(USQUserWidget_StoreScreen, OnPurchase) == 0x000270, "Member 'USQUserWidget_StoreScreen::OnPurchase' has a wrong offset!");
static_assert(offsetof(USQUserWidget_StoreScreen, NumberOfColumns) == 0x000280, "Member 'USQUserWidget_StoreScreen::NumberOfColumns' has a wrong offset!");
static_assert(offsetof(USQUserWidget_StoreScreen, CurrentCategory) == 0x000284, "Member 'USQUserWidget_StoreScreen::CurrentCategory' has a wrong offset!");
static_assert(offsetof(USQUserWidget_StoreScreen, bShowOwnedBundles) == 0x000285, "Member 'USQUserWidget_StoreScreen::bShowOwnedBundles' has a wrong offset!");
static_assert(offsetof(USQUserWidget_StoreScreen, StoreGrid) == 0x000288, "Member 'USQUserWidget_StoreScreen::StoreGrid' has a wrong offset!");
static_assert(offsetof(USQUserWidget_StoreScreen, StoreBundles) == 0x000290, "Member 'USQUserWidget_StoreScreen::StoreBundles' has a wrong offset!");
static_assert(offsetof(USQUserWidget_StoreScreen, PreviewBundle) == 0x0002A0, "Member 'USQUserWidget_StoreScreen::PreviewBundle' has a wrong offset!");
static_assert(offsetof(USQUserWidget_StoreScreen, StoreCardClass) == 0x0002A8, "Member 'USQUserWidget_StoreScreen::StoreCardClass' has a wrong offset!");

// Class Squad.SQVehicleBuoyancyComponent
// 0x0010 (0x0270 - 0x0260)
class USQVehicleBuoyancyComponent final : public USQBuoyancyComponent
{
public:
	bool                                          bUseDefaults;                                      // 0x0260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13DD[0x7];                                     // 0x0261(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWheeledVehicleMovementComponent*       VehicleMovementComponent;                          // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ResetToDefaults();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleBuoyancyComponent">();
	}
	static class USQVehicleBuoyancyComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleBuoyancyComponent>();
	}
};
static_assert(alignof(USQVehicleBuoyancyComponent) == 0x000010, "Wrong alignment on USQVehicleBuoyancyComponent");
static_assert(sizeof(USQVehicleBuoyancyComponent) == 0x000270, "Wrong size on USQVehicleBuoyancyComponent");
static_assert(offsetof(USQVehicleBuoyancyComponent, bUseDefaults) == 0x000260, "Member 'USQVehicleBuoyancyComponent::bUseDefaults' has a wrong offset!");
static_assert(offsetof(USQVehicleBuoyancyComponent, VehicleMovementComponent) == 0x000268, "Member 'USQVehicleBuoyancyComponent::VehicleMovementComponent' has a wrong offset!");

// Class Squad.SQVehicleCenterOfMassFXComponent
// 0x0050 (0x0530 - 0x04E0)
class USQVehicleCenterOfMassFXComponent final : public UStaticMeshComponent
{
public:
	class UParticleSystem*                        WaterEntryEffect;                                  // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NiagaraWaterEntryEffect;                           // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        WaterExitEffect;                                   // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NiagaraWaterExitEffect;                            // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              WaterEntrySound;                                   // 0x0500(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              WaterExitSound;                                    // 0x0508(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnBeginOverlapDelegate;                            // 0x0510(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnEndOverlapDelegate;                              // 0x0520(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void OnCenterOfMassFXComponentBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnCenterOfMassFXComponentEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleCenterOfMassFXComponent">();
	}
	static class USQVehicleCenterOfMassFXComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleCenterOfMassFXComponent>();
	}
};
static_assert(alignof(USQVehicleCenterOfMassFXComponent) == 0x000010, "Wrong alignment on USQVehicleCenterOfMassFXComponent");
static_assert(sizeof(USQVehicleCenterOfMassFXComponent) == 0x000530, "Wrong size on USQVehicleCenterOfMassFXComponent");
static_assert(offsetof(USQVehicleCenterOfMassFXComponent, WaterEntryEffect) == 0x0004E0, "Member 'USQVehicleCenterOfMassFXComponent::WaterEntryEffect' has a wrong offset!");
static_assert(offsetof(USQVehicleCenterOfMassFXComponent, NiagaraWaterEntryEffect) == 0x0004E8, "Member 'USQVehicleCenterOfMassFXComponent::NiagaraWaterEntryEffect' has a wrong offset!");
static_assert(offsetof(USQVehicleCenterOfMassFXComponent, WaterExitEffect) == 0x0004F0, "Member 'USQVehicleCenterOfMassFXComponent::WaterExitEffect' has a wrong offset!");
static_assert(offsetof(USQVehicleCenterOfMassFXComponent, NiagaraWaterExitEffect) == 0x0004F8, "Member 'USQVehicleCenterOfMassFXComponent::NiagaraWaterExitEffect' has a wrong offset!");
static_assert(offsetof(USQVehicleCenterOfMassFXComponent, WaterEntrySound) == 0x000500, "Member 'USQVehicleCenterOfMassFXComponent::WaterEntrySound' has a wrong offset!");
static_assert(offsetof(USQVehicleCenterOfMassFXComponent, WaterExitSound) == 0x000508, "Member 'USQVehicleCenterOfMassFXComponent::WaterExitSound' has a wrong offset!");
static_assert(offsetof(USQVehicleCenterOfMassFXComponent, OnBeginOverlapDelegate) == 0x000510, "Member 'USQVehicleCenterOfMassFXComponent::OnBeginOverlapDelegate' has a wrong offset!");
static_assert(offsetof(USQVehicleCenterOfMassFXComponent, OnEndOverlapDelegate) == 0x000520, "Member 'USQVehicleCenterOfMassFXComponent::OnEndOverlapDelegate' has a wrong offset!");

// Class Squad.SQVehicleClaim
// 0x0038 (0x0060 - 0x0028)
class USQVehicleClaim final : public UObject
{
public:
	class ASQVehicle*                             VehicleClaimed;                                    // 0x0028(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASQSquad*                               ClaimingSquad;                                     // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class ASQPlayerState*>                 PlayersPartyToClaim;                               // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, Protected, NativeAccessSpecifierProtected)
	ESQVehicleClaimStatus                         Status;                                            // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13E0[0x3];                                     // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeOfClaim;                                       // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TimeOfExpiration;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bExpired;                                          // 0x0054(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13E1[0x3];                                     // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ExpirationTimerHandle;                             // 0x0058(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class ASQSquad* GetClaimingSquad() const;
	ESQVehicleClaimStatus GetStatus() const;
	float GetTimeOfClaim() const;
	float GetTimeUntilExpiration() const;
	class ASQVehicle* GetVehicleClaimed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleClaim">();
	}
	static class USQVehicleClaim* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleClaim>();
	}
};
static_assert(alignof(USQVehicleClaim) == 0x000008, "Wrong alignment on USQVehicleClaim");
static_assert(sizeof(USQVehicleClaim) == 0x000060, "Wrong size on USQVehicleClaim");
static_assert(offsetof(USQVehicleClaim, VehicleClaimed) == 0x000028, "Member 'USQVehicleClaim::VehicleClaimed' has a wrong offset!");
static_assert(offsetof(USQVehicleClaim, ClaimingSquad) == 0x000030, "Member 'USQVehicleClaim::ClaimingSquad' has a wrong offset!");
static_assert(offsetof(USQVehicleClaim, PlayersPartyToClaim) == 0x000038, "Member 'USQVehicleClaim::PlayersPartyToClaim' has a wrong offset!");
static_assert(offsetof(USQVehicleClaim, Status) == 0x000048, "Member 'USQVehicleClaim::Status' has a wrong offset!");
static_assert(offsetof(USQVehicleClaim, TimeOfClaim) == 0x00004C, "Member 'USQVehicleClaim::TimeOfClaim' has a wrong offset!");
static_assert(offsetof(USQVehicleClaim, TimeOfExpiration) == 0x000050, "Member 'USQVehicleClaim::TimeOfExpiration' has a wrong offset!");
static_assert(offsetof(USQVehicleClaim, bExpired) == 0x000054, "Member 'USQVehicleClaim::bExpired' has a wrong offset!");
static_assert(offsetof(USQVehicleClaim, ExpirationTimerHandle) == 0x000058, "Member 'USQVehicleClaim::ExpirationTimerHandle' has a wrong offset!");

// Class Squad.SQVehicleCleanupDataAsset
// 0x0030 (0x0060 - 0x0030)
class USQVehicleCleanupDataAsset final : public UDataAsset
{
public:
	TArray<EObjectTypeQuery>                      ObjectCollisionTypes;                              // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class AActor>>             ObjectClasses;                                     // 0x0040(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         ScanRadius;                                        // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScanFrequency;                                     // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelfDestructionTime;                               // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13E2[0x4];                                     // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleCleanupDataAsset">();
	}
	static class USQVehicleCleanupDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleCleanupDataAsset>();
	}
};
static_assert(alignof(USQVehicleCleanupDataAsset) == 0x000008, "Wrong alignment on USQVehicleCleanupDataAsset");
static_assert(sizeof(USQVehicleCleanupDataAsset) == 0x000060, "Wrong size on USQVehicleCleanupDataAsset");
static_assert(offsetof(USQVehicleCleanupDataAsset, ObjectCollisionTypes) == 0x000030, "Member 'USQVehicleCleanupDataAsset::ObjectCollisionTypes' has a wrong offset!");
static_assert(offsetof(USQVehicleCleanupDataAsset, ObjectClasses) == 0x000040, "Member 'USQVehicleCleanupDataAsset::ObjectClasses' has a wrong offset!");
static_assert(offsetof(USQVehicleCleanupDataAsset, ScanRadius) == 0x000050, "Member 'USQVehicleCleanupDataAsset::ScanRadius' has a wrong offset!");
static_assert(offsetof(USQVehicleCleanupDataAsset, ScanFrequency) == 0x000054, "Member 'USQVehicleCleanupDataAsset::ScanFrequency' has a wrong offset!");
static_assert(offsetof(USQVehicleCleanupDataAsset, SelfDestructionTime) == 0x000058, "Member 'USQVehicleCleanupDataAsset::SelfDestructionTime' has a wrong offset!");

// Class Squad.SQVehicleDepotComponent
// 0x0070 (0x0270 - 0x0200)
class USQVehicleDepotComponent final : public USceneComponent
{
public:
	uint8                                         Pad_13E3[0x8];                                     // 0x01F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SecondsPerMag;                                     // 0x0200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VehicleHealthPerSecond;                            // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstructionPointsPerSecondRepair;                 // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoldierHealthPerSecond;                            // 0x020C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class ASQVehicle*, float>                TimeInRearm;                                       // 0x0210(0x0050)(Transient, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         CurrentOverlappedActors;                           // 0x0260(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleDepotComponent">();
	}
	static class USQVehicleDepotComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleDepotComponent>();
	}
};
static_assert(alignof(USQVehicleDepotComponent) == 0x000010, "Wrong alignment on USQVehicleDepotComponent");
static_assert(sizeof(USQVehicleDepotComponent) == 0x000270, "Wrong size on USQVehicleDepotComponent");
static_assert(offsetof(USQVehicleDepotComponent, SecondsPerMag) == 0x000200, "Member 'USQVehicleDepotComponent::SecondsPerMag' has a wrong offset!");
static_assert(offsetof(USQVehicleDepotComponent, VehicleHealthPerSecond) == 0x000204, "Member 'USQVehicleDepotComponent::VehicleHealthPerSecond' has a wrong offset!");
static_assert(offsetof(USQVehicleDepotComponent, ConstructionPointsPerSecondRepair) == 0x000208, "Member 'USQVehicleDepotComponent::ConstructionPointsPerSecondRepair' has a wrong offset!");
static_assert(offsetof(USQVehicleDepotComponent, SoldierHealthPerSecond) == 0x00020C, "Member 'USQVehicleDepotComponent::SoldierHealthPerSecond' has a wrong offset!");
static_assert(offsetof(USQVehicleDepotComponent, TimeInRearm) == 0x000210, "Member 'USQVehicleDepotComponent::TimeInRearm' has a wrong offset!");
static_assert(offsetof(USQVehicleDepotComponent, CurrentOverlappedActors) == 0x000260, "Member 'USQVehicleDepotComponent::CurrentOverlappedActors' has a wrong offset!");

// Class Squad.SQEmergencyRecoverySettings
// 0x0060 (0x0090 - 0x0030)
class USQEmergencyRecoverySettings : public UDataAsset
{
public:
	TSet<ESQVehicleRecoveryMethod>                RecoveryMethodsAvailable;                          // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         HeightOffset;                                      // 0x0080(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PushStrength;                                      // 0x0084(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VerticalBoostStrength;                             // 0x0088(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplicateCustomRecoveryFunction;                  // 0x008C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13E4[0x3];                                     // 0x008D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool EmergencyRecoveryCustom(class ASQVehicle* Vehicle, class AActor* Instigator);

	bool CanUseEmergencyRecovery(const class USQVehicleEmergencyRecoveryComponent* RecoveryComponent, ESQVehicleRecoveryMethod RecoveryMethod) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQEmergencyRecoverySettings">();
	}
	static class USQEmergencyRecoverySettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQEmergencyRecoverySettings>();
	}
};
static_assert(alignof(USQEmergencyRecoverySettings) == 0x000008, "Wrong alignment on USQEmergencyRecoverySettings");
static_assert(sizeof(USQEmergencyRecoverySettings) == 0x000090, "Wrong size on USQEmergencyRecoverySettings");
static_assert(offsetof(USQEmergencyRecoverySettings, RecoveryMethodsAvailable) == 0x000030, "Member 'USQEmergencyRecoverySettings::RecoveryMethodsAvailable' has a wrong offset!");
static_assert(offsetof(USQEmergencyRecoverySettings, HeightOffset) == 0x000080, "Member 'USQEmergencyRecoverySettings::HeightOffset' has a wrong offset!");
static_assert(offsetof(USQEmergencyRecoverySettings, PushStrength) == 0x000084, "Member 'USQEmergencyRecoverySettings::PushStrength' has a wrong offset!");
static_assert(offsetof(USQEmergencyRecoverySettings, VerticalBoostStrength) == 0x000088, "Member 'USQEmergencyRecoverySettings::VerticalBoostStrength' has a wrong offset!");
static_assert(offsetof(USQEmergencyRecoverySettings, bReplicateCustomRecoveryFunction) == 0x00008C, "Member 'USQEmergencyRecoverySettings::bReplicateCustomRecoveryFunction' has a wrong offset!");

// Class Squad.SQVehicleGasCan
// 0x0020 (0x0610 - 0x05F0)
class USQVehicleGasCan final : public USQVehicleComponent
{
public:
	float                                         BaseDamage;                                        // 0x05F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinimumDamage;                                     // 0x05F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         KillZoneRadius;                                    // 0x05F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DamageInnerRadius;                                 // 0x05FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DamageOuterRadius;                                 // 0x0600(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DamageFalloff;                                     // 0x0604(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13E7[0x8];                                     // 0x0608(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleGasCan">();
	}
	static class USQVehicleGasCan* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleGasCan>();
	}
};
static_assert(alignof(USQVehicleGasCan) == 0x000010, "Wrong alignment on USQVehicleGasCan");
static_assert(sizeof(USQVehicleGasCan) == 0x000610, "Wrong size on USQVehicleGasCan");
static_assert(offsetof(USQVehicleGasCan, BaseDamage) == 0x0005F0, "Member 'USQVehicleGasCan::BaseDamage' has a wrong offset!");
static_assert(offsetof(USQVehicleGasCan, MinimumDamage) == 0x0005F4, "Member 'USQVehicleGasCan::MinimumDamage' has a wrong offset!");
static_assert(offsetof(USQVehicleGasCan, KillZoneRadius) == 0x0005F8, "Member 'USQVehicleGasCan::KillZoneRadius' has a wrong offset!");
static_assert(offsetof(USQVehicleGasCan, DamageInnerRadius) == 0x0005FC, "Member 'USQVehicleGasCan::DamageInnerRadius' has a wrong offset!");
static_assert(offsetof(USQVehicleGasCan, DamageOuterRadius) == 0x000600, "Member 'USQVehicleGasCan::DamageOuterRadius' has a wrong offset!");
static_assert(offsetof(USQVehicleGasCan, DamageFalloff) == 0x000604, "Member 'USQVehicleGasCan::DamageFalloff' has a wrong offset!");

// Class Squad.SQVehicleInventoryComponent
// 0x0010 (0x02C8 - 0x02B8)
class USQVehicleInventoryComponent : public USQPawnInventoryComponent
{
public:
	TArray<struct FSQVehicleWeaponConfig>         Weapons;                                           // 0x02B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleInventoryComponent">();
	}
	static class USQVehicleInventoryComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleInventoryComponent>();
	}
};
static_assert(alignof(USQVehicleInventoryComponent) == 0x000008, "Wrong alignment on USQVehicleInventoryComponent");
static_assert(sizeof(USQVehicleInventoryComponent) == 0x0002C8, "Wrong size on USQVehicleInventoryComponent");
static_assert(offsetof(USQVehicleInventoryComponent, Weapons) == 0x0002B8, "Member 'USQVehicleInventoryComponent::Weapons' has a wrong offset!");

// Class Squad.SQVehicleResourceWeaponInventoryComponent
// 0x0068 (0x0330 - 0x02C8)
class USQVehicleResourceWeaponInventoryComponent final : public USQVehicleInventoryComponent
{
public:
	FMulticastInlineDelegateProperty_             OnResourcesChangedEvent;                           // 0x02C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bSpawnWithMaxResources;                            // 0x02D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13E8[0x27];                                    // 0x02D9(0x0027)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentConstructionAmount;                         // 0x0300(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentAmmoAmount;                                 // 0x0304(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TotalSharedResourceAmount;                         // 0x0308(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13E9[0x4];                                     // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class ASQVehicleResource>> ResourceClasses;                                   // 0x0310(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class ASQVehicleResource*>             Resources;                                         // 0x0320(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void OnRep_ResourcesChanged();
	void SetStaticMeshResourcesAmmo(const TArray<class UStaticMeshComponent*>& InStaticMeshResources);
	void SetStaticMeshResourcesConstruction(const TArray<class UStaticMeshComponent*>& InStaticMeshResources);
	void UpdateVisibilities();

	class ASQVehicleResource* FindAmmoWeapon() const;
	class ASQVehicleResource* FindConstructionWeapon() const;
	int32 GetAmmoPoints() const;
	int32 GetCurrentSharedResourceAmount() const;
	int32 GetTotalSharedResourceAmount() const;
	bool HasConstructionWeapon() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleResourceWeaponInventoryComponent">();
	}
	static class USQVehicleResourceWeaponInventoryComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleResourceWeaponInventoryComponent>();
	}
};
static_assert(alignof(USQVehicleResourceWeaponInventoryComponent) == 0x000008, "Wrong alignment on USQVehicleResourceWeaponInventoryComponent");
static_assert(sizeof(USQVehicleResourceWeaponInventoryComponent) == 0x000330, "Wrong size on USQVehicleResourceWeaponInventoryComponent");
static_assert(offsetof(USQVehicleResourceWeaponInventoryComponent, OnResourcesChangedEvent) == 0x0002C8, "Member 'USQVehicleResourceWeaponInventoryComponent::OnResourcesChangedEvent' has a wrong offset!");
static_assert(offsetof(USQVehicleResourceWeaponInventoryComponent, bSpawnWithMaxResources) == 0x0002D8, "Member 'USQVehicleResourceWeaponInventoryComponent::bSpawnWithMaxResources' has a wrong offset!");
static_assert(offsetof(USQVehicleResourceWeaponInventoryComponent, CurrentConstructionAmount) == 0x000300, "Member 'USQVehicleResourceWeaponInventoryComponent::CurrentConstructionAmount' has a wrong offset!");
static_assert(offsetof(USQVehicleResourceWeaponInventoryComponent, CurrentAmmoAmount) == 0x000304, "Member 'USQVehicleResourceWeaponInventoryComponent::CurrentAmmoAmount' has a wrong offset!");
static_assert(offsetof(USQVehicleResourceWeaponInventoryComponent, TotalSharedResourceAmount) == 0x000308, "Member 'USQVehicleResourceWeaponInventoryComponent::TotalSharedResourceAmount' has a wrong offset!");
static_assert(offsetof(USQVehicleResourceWeaponInventoryComponent, ResourceClasses) == 0x000310, "Member 'USQVehicleResourceWeaponInventoryComponent::ResourceClasses' has a wrong offset!");
static_assert(offsetof(USQVehicleResourceWeaponInventoryComponent, Resources) == 0x000320, "Member 'USQVehicleResourceWeaponInventoryComponent::Resources' has a wrong offset!");

// Class Squad.SQVehicleSeatComponent
// 0x0080 (0x0280 - 0x0200)
class USQVehicleSeatComponent final : public USceneComponent
{
public:
	struct FSQVehicleSeatConfig                   SeatConfig;                                        // 0x01F8(0x0058)(Edit, BlueprintVisible, BlueprintReadOnly, Net, EditConst, NativeAccessSpecifierPublic)
	int32                                         AnimationSeatState;                                // 0x0250(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13EA[0x4];                                     // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQVehicleSeat*                         SeatPawn;                                          // 0x0258(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQPlayerState*                         SeatedPlayer;                                      // 0x0260(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQSoldier*                             SeatedSoldier;                                     // 0x0268(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13EB[0x10];                                    // 0x0270(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CanSeatBeRepaired(ESQRepairSource RepairSource);
	void ChangeSeatState(int32 StateIndex);
	void OnRep_AnimationSeatState();
	void OnRep_SeatPawn();

	class ASQVehicleSeat* GetSeatPawn() const;
	class ASQEquipableItem* GetSeatPawnEquipableItem() const;
	class USQVehicleInventoryComponent* GetSeatPawnInventory() const;
	ESQSoldierSeatState GetSoldierSeatState() const;
	bool TransitionComplete() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleSeatComponent">();
	}
	static class USQVehicleSeatComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleSeatComponent>();
	}
};
static_assert(alignof(USQVehicleSeatComponent) == 0x000010, "Wrong alignment on USQVehicleSeatComponent");
static_assert(sizeof(USQVehicleSeatComponent) == 0x000280, "Wrong size on USQVehicleSeatComponent");
static_assert(offsetof(USQVehicleSeatComponent, SeatConfig) == 0x0001F8, "Member 'USQVehicleSeatComponent::SeatConfig' has a wrong offset!");
static_assert(offsetof(USQVehicleSeatComponent, AnimationSeatState) == 0x000250, "Member 'USQVehicleSeatComponent::AnimationSeatState' has a wrong offset!");
static_assert(offsetof(USQVehicleSeatComponent, SeatPawn) == 0x000258, "Member 'USQVehicleSeatComponent::SeatPawn' has a wrong offset!");
static_assert(offsetof(USQVehicleSeatComponent, SeatedPlayer) == 0x000260, "Member 'USQVehicleSeatComponent::SeatedPlayer' has a wrong offset!");
static_assert(offsetof(USQVehicleSeatComponent, SeatedSoldier) == 0x000268, "Member 'USQVehicleSeatComponent::SeatedSoldier' has a wrong offset!");

// Class Squad.SQVehicleSpawner
// 0x0040 (0x0300 - 0x02C0)
class ASQVehicleSpawner : public ASQSpawner
{
public:
	ESQTeam                                       NeutralCopyVehicleFromTeam;                        // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13EC[0x7];                                     // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USQVehicleSettings>      SpecificVehicle;                                   // 0x02C8(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USQVehicleSettings*                     CachedSpecificVehicle;                             // 0x02F0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_13ED[0x8];                                     // 0x02F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitializeSpecificVehicleSetting();
	void OnVehicleLoaded(TSoftClassPtr<class UClass> InVehicleReference, const struct FSQVehicleSettingEntry& InVehicleSetting);
	void OnVehicleSpawned(class ASQVehicle* OutVehicle);
	void StartLoadAndSpawnVehicle(const struct FSQVehicleSettingEntry& InVehicleSettings);

	bool CanSpawnVehicle(const class USQVehicleSettings* InAvailableVehicle) const;
	int32 GetVehiclePriority(const struct FSQAvailabilityState_Vehicle& InAvailableVehicle) const;
	void GetVehicleReference(class USQVehicleSettings* InVehicleSettings, TSoftClassPtr<class UClass>* OutVehicleReference) const;
	bool GetVehicleToSpawn(const TArray<struct FSQAvailabilityState_Vehicle>& InVehicleAvailabilityStates, struct FSQAvailabilityState_Vehicle* OutSelectedVehicle, int32* OutSelectedIndex) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleSpawner">();
	}
	static class ASQVehicleSpawner* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQVehicleSpawner>();
	}
};
static_assert(alignof(ASQVehicleSpawner) == 0x000010, "Wrong alignment on ASQVehicleSpawner");
static_assert(sizeof(ASQVehicleSpawner) == 0x000300, "Wrong size on ASQVehicleSpawner");
static_assert(offsetof(ASQVehicleSpawner, NeutralCopyVehicleFromTeam) == 0x0002C0, "Member 'ASQVehicleSpawner::NeutralCopyVehicleFromTeam' has a wrong offset!");
static_assert(offsetof(ASQVehicleSpawner, SpecificVehicle) == 0x0002C8, "Member 'ASQVehicleSpawner::SpecificVehicle' has a wrong offset!");
static_assert(offsetof(ASQVehicleSpawner, CachedSpecificVehicle) == 0x0002F0, "Member 'ASQVehicleSpawner::CachedSpecificVehicle' has a wrong offset!");

// Class Squad.SQVehicleSpawnerSettings
// 0x0000 (0x0060 - 0x0060)
class USQVehicleSpawnerSettings : public USQSettings
{
public:
	bool IsVehicleMatching(const class USQVehicleSettings* InAvailableVehicle) const;
	bool SelectVehicleToSpawn(const TArray<struct FSQAvailabilityState_Vehicle>& InVehicles, struct FSQAvailabilityState_Vehicle* OutSelectVehicle) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleSpawnerSettings">();
	}
	static class USQVehicleSpawnerSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleSpawnerSettings>();
	}
};
static_assert(alignof(USQVehicleSpawnerSettings) == 0x000008, "Wrong alignment on USQVehicleSpawnerSettings");
static_assert(sizeof(USQVehicleSpawnerSettings) == 0x000060, "Wrong size on USQVehicleSpawnerSettings");

// Class Squad.SQVehicleTrack
// 0x0000 (0x0610 - 0x0610)
class USQVehicleTrack final : public USQDriveTrainComponent
{
public:
	bool                                          bRightSideTrack;                                   // 0x0608(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLeftSideTrack;                                    // 0x0609(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13F3[0x6];                                     // 0x060A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleTrack">();
	}
	static class USQVehicleTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleTrack>();
	}
};
static_assert(alignof(USQVehicleTrack) == 0x000010, "Wrong alignment on USQVehicleTrack");
static_assert(sizeof(USQVehicleTrack) == 0x000610, "Wrong size on USQVehicleTrack");
static_assert(offsetof(USQVehicleTrack, bRightSideTrack) == 0x000608, "Member 'USQVehicleTrack::bRightSideTrack' has a wrong offset!");
static_assert(offsetof(USQVehicleTrack, bLeftSideTrack) == 0x000609, "Member 'USQVehicleTrack::bLeftSideTrack' has a wrong offset!");

// Class Squad.SQVehicleTurretClosedTop
// 0x0070 (0x0450 - 0x03E0)
class ASQVehicleTurretClosedTop : public ASQVehicleTurret
{
public:
	uint8                                         Pad_13F4[0x8];                                     // 0x03E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bCanStabilize;                                     // 0x03E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13F5[0x3];                                     // 0x03E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HealthToEnableStabilizer;                          // 0x03EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundBase*                             StabilizationToggleSound;                          // 0x03F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         GunLineOfSightSeatIndex;                           // 0x03F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13F6[0x4];                                     // 0x03FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USQVehicleViewWidget>       TurretOverlay;                                     // 0x0400(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentZoom;                                       // 0x0408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13F7[0x4];                                     // 0x040C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ZoomLevels;                                        // 0x0410(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class USoundBase*                             ZoomToggleSound;                                   // 0x0420(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ZoomToggleSoundPitch;                              // 0x0428(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13F8[0x24];                                    // 0x042C(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BP_OnVehicleZoom();
	void ResetZoom();

	bool IsStabilizationEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleTurretClosedTop">();
	}
	static class ASQVehicleTurretClosedTop* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQVehicleTurretClosedTop>();
	}
};
static_assert(alignof(ASQVehicleTurretClosedTop) == 0x000010, "Wrong alignment on ASQVehicleTurretClosedTop");
static_assert(sizeof(ASQVehicleTurretClosedTop) == 0x000450, "Wrong size on ASQVehicleTurretClosedTop");
static_assert(offsetof(ASQVehicleTurretClosedTop, bCanStabilize) == 0x0003E8, "Member 'ASQVehicleTurretClosedTop::bCanStabilize' has a wrong offset!");
static_assert(offsetof(ASQVehicleTurretClosedTop, HealthToEnableStabilizer) == 0x0003EC, "Member 'ASQVehicleTurretClosedTop::HealthToEnableStabilizer' has a wrong offset!");
static_assert(offsetof(ASQVehicleTurretClosedTop, StabilizationToggleSound) == 0x0003F0, "Member 'ASQVehicleTurretClosedTop::StabilizationToggleSound' has a wrong offset!");
static_assert(offsetof(ASQVehicleTurretClosedTop, GunLineOfSightSeatIndex) == 0x0003F8, "Member 'ASQVehicleTurretClosedTop::GunLineOfSightSeatIndex' has a wrong offset!");
static_assert(offsetof(ASQVehicleTurretClosedTop, TurretOverlay) == 0x000400, "Member 'ASQVehicleTurretClosedTop::TurretOverlay' has a wrong offset!");
static_assert(offsetof(ASQVehicleTurretClosedTop, CurrentZoom) == 0x000408, "Member 'ASQVehicleTurretClosedTop::CurrentZoom' has a wrong offset!");
static_assert(offsetof(ASQVehicleTurretClosedTop, ZoomLevels) == 0x000410, "Member 'ASQVehicleTurretClosedTop::ZoomLevels' has a wrong offset!");
static_assert(offsetof(ASQVehicleTurretClosedTop, ZoomToggleSound) == 0x000420, "Member 'ASQVehicleTurretClosedTop::ZoomToggleSound' has a wrong offset!");
static_assert(offsetof(ASQVehicleTurretClosedTop, ZoomToggleSoundPitch) == 0x000428, "Member 'ASQVehicleTurretClosedTop::ZoomToggleSoundPitch' has a wrong offset!");

// Class Squad.SQVehicleTurretOpenTop
// 0x0000 (0x03E0 - 0x03E0)
class ASQVehicleTurretOpenTop : public ASQVehicleTurret
{
public:
	void GotoBaseMagnification();
	void ResetZoomParent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleTurretOpenTop">();
	}
	static class ASQVehicleTurretOpenTop* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQVehicleTurretOpenTop>();
	}
};
static_assert(alignof(ASQVehicleTurretOpenTop) == 0x000010, "Wrong alignment on ASQVehicleTurretOpenTop");
static_assert(sizeof(ASQVehicleTurretOpenTop) == 0x0003E0, "Wrong size on ASQVehicleTurretOpenTop");

// Class Squad.SQVehicleWeaponAnimInstance
// 0x0010 (0x02D0 - 0x02C0)
class USQVehicleWeaponAnimInstance : public UAnimInstance
{
public:
	float                                         Pitch;                                             // 0x02B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Yaw;                                               // 0x02BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentMagRemainingRoundsTime;                     // 0x02C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentMagRemainingRoundsMultiplier;               // 0x02C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13F9[0x8];                                     // 0x02C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleWeaponAnimInstance">();
	}
	static class USQVehicleWeaponAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleWeaponAnimInstance>();
	}
};
static_assert(alignof(USQVehicleWeaponAnimInstance) == 0x000010, "Wrong alignment on USQVehicleWeaponAnimInstance");
static_assert(sizeof(USQVehicleWeaponAnimInstance) == 0x0002D0, "Wrong size on USQVehicleWeaponAnimInstance");
static_assert(offsetof(USQVehicleWeaponAnimInstance, Pitch) == 0x0002B8, "Member 'USQVehicleWeaponAnimInstance::Pitch' has a wrong offset!");
static_assert(offsetof(USQVehicleWeaponAnimInstance, Yaw) == 0x0002BC, "Member 'USQVehicleWeaponAnimInstance::Yaw' has a wrong offset!");
static_assert(offsetof(USQVehicleWeaponAnimInstance, CurrentMagRemainingRoundsTime) == 0x0002C0, "Member 'USQVehicleWeaponAnimInstance::CurrentMagRemainingRoundsTime' has a wrong offset!");
static_assert(offsetof(USQVehicleWeaponAnimInstance, CurrentMagRemainingRoundsMultiplier) == 0x0002C4, "Member 'USQVehicleWeaponAnimInstance::CurrentMagRemainingRoundsMultiplier' has a wrong offset!");

// Class Squad.SQVehicleWheel
// 0x0000 (0x0610 - 0x0610)
class USQVehicleWheel final : public USQDriveTrainComponent
{
public:
	class FName                                   BoneName;                                          // 0x0608(0x0008)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class FName GetBoneName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleWheel">();
	}
	static class USQVehicleWheel* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleWheel>();
	}
};
static_assert(alignof(USQVehicleWheel) == 0x000010, "Wrong alignment on USQVehicleWheel");
static_assert(sizeof(USQVehicleWheel) == 0x000610, "Wrong size on USQVehicleWheel");
static_assert(offsetof(USQVehicleWheel, BoneName) == 0x000608, "Member 'USQVehicleWheel::BoneName' has a wrong offset!");

// Class Squad.SQVehicleWheel_Front
// 0x0000 (0x00F8 - 0x00F8)
class USQVehicleWheel_Front : public UVehicleWheel
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleWheel_Front">();
	}
	static class USQVehicleWheel_Front* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleWheel_Front>();
	}
};
static_assert(alignof(USQVehicleWheel_Front) == 0x000008, "Wrong alignment on USQVehicleWheel_Front");
static_assert(sizeof(USQVehicleWheel_Front) == 0x0000F8, "Wrong size on USQVehicleWheel_Front");

// Class Squad.SQVehicleWheel_Rear
// 0x0000 (0x00F8 - 0x00F8)
class USQVehicleWheel_Rear : public USQVehicleWheel_Front
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleWheel_Rear">();
	}
	static class USQVehicleWheel_Rear* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleWheel_Rear>();
	}
};
static_assert(alignof(USQVehicleWheel_Rear) == 0x000008, "Wrong alignment on USQVehicleWheel_Rear");
static_assert(sizeof(USQVehicleWheel_Rear) == 0x0000F8, "Wrong size on USQVehicleWheel_Rear");

// Class Squad.SQVehicleWheel_Tracked
// 0x0010 (0x0108 - 0x00F8)
class USQVehicleWheel_Tracked : public UVehicleWheel
{
public:
	struct FVector                                SuspensionDirection;                               // 0x00F8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13FA[0x4];                                     // 0x0104(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleWheel_Tracked">();
	}
	static class USQVehicleWheel_Tracked* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleWheel_Tracked>();
	}
};
static_assert(alignof(USQVehicleWheel_Tracked) == 0x000008, "Wrong alignment on USQVehicleWheel_Tracked");
static_assert(sizeof(USQVehicleWheel_Tracked) == 0x000108, "Wrong size on USQVehicleWheel_Tracked");
static_assert(offsetof(USQVehicleWheel_Tracked, SuspensionDirection) == 0x0000F8, "Member 'USQVehicleWheel_Tracked::SuspensionDirection' has a wrong offset!");

// Class Squad.SQVoteSessionAuthority
// 0x0088 (0x0118 - 0x0090)
class USQVoteSessionAuthority final : public USQVoteSession
{
public:
	ESQAdminAccessLevels                          AccessFilter;                                      // 0x0090(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13FB[0x7];                                     // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 TeamFilter;                                        // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class USQVotingComponent*>             Voters;                                            // 0x00A8(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class FName>                           RecordedVotes;                                     // 0x00B8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             RS_OnResult;                                       // 0x00C8(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             RS_OnPresentationEnded;                            // 0x00D8(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          HasChanges;                                        // 0x00E8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFinished;                                        // 0x00E9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasPresentationEnded;                              // 0x00EA(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13FC[0x1];                                     // 0x00EB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WinnerId;                                          // 0x00EC(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13FD[0x24];                                    // 0x00F4(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddVote(const class FName& ChoiceId, const class USQVotingComponent* Voter);
	void AddVoter(class USQVotingComponent* Voter, bool NotifyVoter);
	void BP_Tick(float DeltaTime);
	void Cancel();
	void EndPresentation();
	class FName Finalize();
	bool OnAddVote(const class FName& ChoiceId, const class USQVotingComponent* Voter, int32* AddedVotes);
	bool OnAddVoter(const class USQVotingComponent* Voter, int32* OutAddVotesCount);
	int32 OnRemoveVote(const class FName& ChoiceId, const class USQVotingComponent* Voter);
	int32 OnRemoveVoter(const class USQVotingComponent* Voter);
	int32 OnRemoveVotesFrom(const class USQVotingComponent* Voter);
	void PropagateChanges();
	void RemoveVote(const class FName& ChoiceId, const class USQVotingComponent* Voter);
	void RemoveVoter(class USQVotingComponent* Voter);
	void Start(const class UObject* WorldContextObject, const struct FSQVote& VoteTemplate, const TArray<class USQVotingComponent*>& InitialVoters);

	bool AreAllVoteRecieved() const;
	class UWorld* GetWorld() const;
	bool ShouldFinalize() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVoteSessionAuthority">();
	}
	static class USQVoteSessionAuthority* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVoteSessionAuthority>();
	}
};
static_assert(alignof(USQVoteSessionAuthority) == 0x000008, "Wrong alignment on USQVoteSessionAuthority");
static_assert(sizeof(USQVoteSessionAuthority) == 0x000118, "Wrong size on USQVoteSessionAuthority");
static_assert(offsetof(USQVoteSessionAuthority, AccessFilter) == 0x000090, "Member 'USQVoteSessionAuthority::AccessFilter' has a wrong offset!");
static_assert(offsetof(USQVoteSessionAuthority, TeamFilter) == 0x000098, "Member 'USQVoteSessionAuthority::TeamFilter' has a wrong offset!");
static_assert(offsetof(USQVoteSessionAuthority, Voters) == 0x0000A8, "Member 'USQVoteSessionAuthority::Voters' has a wrong offset!");
static_assert(offsetof(USQVoteSessionAuthority, RecordedVotes) == 0x0000B8, "Member 'USQVoteSessionAuthority::RecordedVotes' has a wrong offset!");
static_assert(offsetof(USQVoteSessionAuthority, RS_OnResult) == 0x0000C8, "Member 'USQVoteSessionAuthority::RS_OnResult' has a wrong offset!");
static_assert(offsetof(USQVoteSessionAuthority, RS_OnPresentationEnded) == 0x0000D8, "Member 'USQVoteSessionAuthority::RS_OnPresentationEnded' has a wrong offset!");
static_assert(offsetof(USQVoteSessionAuthority, HasChanges) == 0x0000E8, "Member 'USQVoteSessionAuthority::HasChanges' has a wrong offset!");
static_assert(offsetof(USQVoteSessionAuthority, IsFinished) == 0x0000E9, "Member 'USQVoteSessionAuthority::IsFinished' has a wrong offset!");
static_assert(offsetof(USQVoteSessionAuthority, HasPresentationEnded) == 0x0000EA, "Member 'USQVoteSessionAuthority::HasPresentationEnded' has a wrong offset!");
static_assert(offsetof(USQVoteSessionAuthority, WinnerId) == 0x0000EC, "Member 'USQVoteSessionAuthority::WinnerId' has a wrong offset!");

// Class Squad.SQVotingComponent
// 0x00A8 (0x0158 - 0x00B0)
class USQVotingComponent : public UActorComponent
{
public:
	class FName                                   PlayerName;                                        // 0x00B0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FSQVoteStateContainer>          ActiveVoteStates;                                  // 0x00B8(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, class USQVoteSession*>      ActiveVotes;                                       // 0x00C8(0x0050)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             RS_OnVoteStart;                                    // 0x0118(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             RS_OnVoteUpdate;                                   // 0x0128(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             RS_OnVoteEnded;                                    // 0x0138(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             RS_OnVoteDisplayResults;                           // 0x0148(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void AddVoteByIds(const class FName& VoteId, const class FName& ChoiceId);
	void OnVoteEnded(class USQVoteSessionClient* VoteSession, const struct FSQChoice& Winner);
	void OnVoteInput(const int32 ChoiceIndex);
	void OnVoteStarted(class USQVoteSessionClient* VoteSession, bool bWithVoteAccess);
	void OnVoteUpdated(class USQVoteSessionClient* VoteSession);
	void RemoveVoteByIds(const class FName& VoteId, const class FName& ChoiceId);
	void Server_AddVoteByIds(const class FName& VoteId, const class FName& ChoiceId);
	void Server_RemoveVoteByIds(const class FName& VoteId, const class FName& ChoiceId);

	bool CanVoteInCurrentPhase() const;
	class FName GetPlayerIdentifier() const;
	bool HasVoteInProgress() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVotingComponent">();
	}
	static class USQVotingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVotingComponent>();
	}
};
static_assert(alignof(USQVotingComponent) == 0x000008, "Wrong alignment on USQVotingComponent");
static_assert(sizeof(USQVotingComponent) == 0x000158, "Wrong size on USQVotingComponent");
static_assert(offsetof(USQVotingComponent, PlayerName) == 0x0000B0, "Member 'USQVotingComponent::PlayerName' has a wrong offset!");
static_assert(offsetof(USQVotingComponent, ActiveVoteStates) == 0x0000B8, "Member 'USQVotingComponent::ActiveVoteStates' has a wrong offset!");
static_assert(offsetof(USQVotingComponent, ActiveVotes) == 0x0000C8, "Member 'USQVotingComponent::ActiveVotes' has a wrong offset!");
static_assert(offsetof(USQVotingComponent, RS_OnVoteStart) == 0x000118, "Member 'USQVotingComponent::RS_OnVoteStart' has a wrong offset!");
static_assert(offsetof(USQVotingComponent, RS_OnVoteUpdate) == 0x000128, "Member 'USQVotingComponent::RS_OnVoteUpdate' has a wrong offset!");
static_assert(offsetof(USQVotingComponent, RS_OnVoteEnded) == 0x000138, "Member 'USQVotingComponent::RS_OnVoteEnded' has a wrong offset!");
static_assert(offsetof(USQVotingComponent, RS_OnVoteDisplayResults) == 0x000148, "Member 'USQVotingComponent::RS_OnVoteDisplayResults' has a wrong offset!");

// Class Squad.SQVotingService
// 0x0000 (0x0028 - 0x0028)
class USQVotingService final : public UBlueprintFunctionLibrary
{
public:
	static class USQVotingComponent* GetLocalVotingComponent(const class UObject* WorldContextObject);
	static bool IsAnyFactionVoteInProgress(const class UObject* WorldContextObject);
	static bool IsAnyVoteInProgress(const class UObject* WorldContextObject);
	static bool IsEndMatchVoteInProgress(const class UObject* WorldContextObject);
	static bool IsFactionVoteId(const class FName& InVoteId, int32* OutTeamId);
	static bool IsFactionVoteInProgress(const class UObject* WorldContextObject, const int32 TeamId);
	static bool IsGenericVoteInProgress(const class UObject* WorldContextObject);
	static bool IsLayerVoteId(const class FName& InVoteId);
	static bool IsLayerVoteInProgress(const class UObject* WorldContextObject);
	static bool IsLevelVoteId(const class FName& InVoteId);
	static bool IsLevelVoteInProgress(const class UObject* WorldContextObject);
	static bool IsUsingFactionVote(const class UObject* WorldContextObject);
	static bool IsUsingLayerVote(const class UObject* WorldContextObject);
	static bool IsUsingLevelVote(const class UObject* WorldContextObject);
	static void JoinPlayerToCurrentVotes(const class UObject* WorldContextObject, class APlayerController* NewPlayer);
	static void RemovePlayerFromCurrentVotes(const class UObject* WorldContextObject, class APlayerController* LeavingPlayer);
	static bool StartVote_FactionSetup(const class UObject* WorldContextObject, const int32 TeamId, const TArray<class USQFactionSetup*>& InFactionsSetups, class USQVoteSessionAuthority** OutAuthoritySession);
	static void StartVote_FullSequence(const class UObject* WorldContextObject);
	static bool StartVote_Generic(const class UObject* WorldContextObject, const struct FSQVoteConfig& InVoteConfig, const TArray<struct FSQChoice>& InChoices, class USQVoteSessionAuthority** OutAuthoritySession);
	static bool StartVote_Layer(const class UObject* WorldContextObject, const TArray<class USQLayer*>& InLayers, class USQVoteSessionAuthority** OutAuthoritySession);
	static bool StartVote_Level(const class UObject* WorldContextObject, const TArray<class USQLevel*>& InLevels, class USQVoteSessionAuthority** OutAuthoritySession);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVotingService">();
	}
	static class USQVotingService* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVotingService>();
	}
};
static_assert(alignof(USQVotingService) == 0x000008, "Wrong alignment on USQVotingService");
static_assert(sizeof(USQVotingService) == 0x000028, "Wrong size on USQVotingService");

// Class Squad.SQVotingState
// 0x00A0 (0x0150 - 0x00B0)
class USQVotingState final : public UActorComponent
{
public:
	TArray<class USQVoteSessionAuthority*>        ActiveVotes;                                       // 0x00B0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FSQLayerSettingsPair>           SequenceLayers;                                    // 0x00C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         TimeBetweenVotes;                                  // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RegenerateVotesTimeInfo;                           // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQVoteStatus                          LayerResult;                                       // 0x00D8(0x0030)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1417[0x1];                                     // 0x0108(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bLevelVoteInProgress : 1;                          // 0x0109(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEndMapVoteInProgress : 1;                         // 0x0109(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bLayerVoteInProgress : 1;                          // 0x0109(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bGenericVoteProgress : 1;                          // 0x0109(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1418[0x6];                                     // 0x010A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 FactionVotesInProgress;                            // 0x0110(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	uint8                                         bEndMatchVoteEnabled : 1;                          // 0x0120(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisplayVoteCount : 1;                             // 0x0120(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisplayEnemyInfo : 1;                             // 0x0120(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1419[0x7];                                     // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnResultsUpdated;                                  // 0x0128(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_141A[0x10];                                    // 0x0138(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class USQLayer*                               ChoosenLayerRef;                                   // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ApplySlomoFactor(float TimeDilationFactor);
	void HandleSequenceResult(class USQVoteSession* VoteSession, const struct FSQChoice& Winner);
	void JoinPlayerToCurrentVotes(class APlayerController* NewPlayer);
	void LoadConfigSettings();
	void OnRep_LayerResult();
	void PlayCurrentSequenceIndex();
	void RemovePlayerFromCurrentVotes(class APlayerController* LeavingPlayer);
	void StartFullSequenceVote();
	bool StartVote_FactionSetup(const int32 TeamId, const TArray<class USQFactionSetup*>& InFactionsSetups, class USQVoteSessionAuthority** OutAuthoritySession, const TArray<class FName>& OverrideIDs);
	bool StartVote_Generic(const struct FSQVoteConfig& InVoteConfig, const TArray<struct FSQChoice>& InChoices, class USQVoteSessionAuthority** OutAuthoritySession);
	bool StartVote_Layer(const TArray<class USQLayer*>& InLayers, class USQVoteSessionAuthority** OutAuthoritySession, const TArray<class FName>& OverrideIDs);
	bool StartVote_Level(const TArray<class USQLevel*>& InLevels, class USQVoteSessionAuthority** OutAuthoritySession);

	void GetLayersVotingPool(TArray<struct FSQLayerSettingsPair>* OutLayers, int32* PoolSize) const;
	bool HasAnyVoteInProgress() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVotingState">();
	}
	static class USQVotingState* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVotingState>();
	}
};
static_assert(alignof(USQVotingState) == 0x000008, "Wrong alignment on USQVotingState");
static_assert(sizeof(USQVotingState) == 0x000150, "Wrong size on USQVotingState");
static_assert(offsetof(USQVotingState, ActiveVotes) == 0x0000B0, "Member 'USQVotingState::ActiveVotes' has a wrong offset!");
static_assert(offsetof(USQVotingState, SequenceLayers) == 0x0000C0, "Member 'USQVotingState::SequenceLayers' has a wrong offset!");
static_assert(offsetof(USQVotingState, TimeBetweenVotes) == 0x0000D0, "Member 'USQVotingState::TimeBetweenVotes' has a wrong offset!");
static_assert(offsetof(USQVotingState, RegenerateVotesTimeInfo) == 0x0000D4, "Member 'USQVotingState::RegenerateVotesTimeInfo' has a wrong offset!");
static_assert(offsetof(USQVotingState, LayerResult) == 0x0000D8, "Member 'USQVotingState::LayerResult' has a wrong offset!");
static_assert(offsetof(USQVotingState, FactionVotesInProgress) == 0x000110, "Member 'USQVotingState::FactionVotesInProgress' has a wrong offset!");
static_assert(offsetof(USQVotingState, OnResultsUpdated) == 0x000128, "Member 'USQVotingState::OnResultsUpdated' has a wrong offset!");
static_assert(offsetof(USQVotingState, ChoosenLayerRef) == 0x000148, "Member 'USQVotingState::ChoosenLayerRef' has a wrong offset!");

// Class Squad.SQWaterDamageComponent
// 0x0000 (0x0160 - 0x0160)
class USQWaterDamageComponent final : public UODKWaterDamageComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQWaterDamageComponent">();
	}
	static class USQWaterDamageComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQWaterDamageComponent>();
	}
};
static_assert(alignof(USQWaterDamageComponent) == 0x000008, "Wrong alignment on USQWaterDamageComponent");
static_assert(sizeof(USQWaterDamageComponent) == 0x000160, "Wrong size on USQWaterDamageComponent");

// Class Squad.SQWaterDampeningComponent
// 0x0000 (0x0130 - 0x0130)
class USQWaterDampeningComponent final : public USQWaterPointTestComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQWaterDampeningComponent">();
	}
	static class USQWaterDampeningComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQWaterDampeningComponent>();
	}
};
static_assert(alignof(USQWaterDampeningComponent) == 0x000008, "Wrong alignment on USQWaterDampeningComponent");
static_assert(sizeof(USQWaterDampeningComponent) == 0x000130, "Wrong size on USQWaterDampeningComponent");

// Class Squad.SQWaterSeatEjectionComponent
// 0x0000 (0x0130 - 0x0130)
class USQWaterSeatEjectionComponent final : public USQWaterPointTestComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQWaterSeatEjectionComponent">();
	}
	static class USQWaterSeatEjectionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQWaterSeatEjectionComponent>();
	}
};
static_assert(alignof(USQWaterSeatEjectionComponent) == 0x000008, "Wrong alignment on USQWaterSeatEjectionComponent");
static_assert(sizeof(USQWaterSeatEjectionComponent) == 0x000130, "Wrong size on USQWaterSeatEjectionComponent");

// Class Squad.SQWaterVolume
// 0x0018 (0x0288 - 0x0270)
class ASQWaterVolume final : public APhysicsVolume
{
public:
	float                                         WaterForce;                                        // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1421[0x4];                                     // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class ASQSoldier>>      SoldiersInVolume;                                  // 0x0278(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQWaterVolume">();
	}
	static class ASQWaterVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQWaterVolume>();
	}
};
static_assert(alignof(ASQWaterVolume) == 0x000008, "Wrong alignment on ASQWaterVolume");
static_assert(sizeof(ASQWaterVolume) == 0x000288, "Wrong size on ASQWaterVolume");
static_assert(offsetof(ASQWaterVolume, WaterForce) == 0x000270, "Member 'ASQWaterVolume::WaterForce' has a wrong offset!");
static_assert(offsetof(ASQWaterVolume, SoldiersInVolume) == 0x000278, "Member 'ASQWaterVolume::SoldiersInVolume' has a wrong offset!");

// Class Squad.ADSPostProcessSettings
// 0x0580 (0x05B0 - 0x0030)
class UADSPostProcessSettings final : public UDataAsset
{
public:
	class UCurveFloat*                            BlendCurve;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxBlurAmount;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BlurSteps;                                         // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlurDist;                                          // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PinholeSize;                                       // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PinholeFadeSize;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1422[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   PPSettings;                                        // 0x0050(0x0560)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ADSPostProcessSettings">();
	}
	static class UADSPostProcessSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UADSPostProcessSettings>();
	}
};
static_assert(alignof(UADSPostProcessSettings) == 0x000010, "Wrong alignment on UADSPostProcessSettings");
static_assert(sizeof(UADSPostProcessSettings) == 0x0005B0, "Wrong size on UADSPostProcessSettings");
static_assert(offsetof(UADSPostProcessSettings, BlendCurve) == 0x000030, "Member 'UADSPostProcessSettings::BlendCurve' has a wrong offset!");
static_assert(offsetof(UADSPostProcessSettings, MaxBlurAmount) == 0x000038, "Member 'UADSPostProcessSettings::MaxBlurAmount' has a wrong offset!");
static_assert(offsetof(UADSPostProcessSettings, BlurSteps) == 0x00003C, "Member 'UADSPostProcessSettings::BlurSteps' has a wrong offset!");
static_assert(offsetof(UADSPostProcessSettings, BlurDist) == 0x000040, "Member 'UADSPostProcessSettings::BlurDist' has a wrong offset!");
static_assert(offsetof(UADSPostProcessSettings, PinholeSize) == 0x000044, "Member 'UADSPostProcessSettings::PinholeSize' has a wrong offset!");
static_assert(offsetof(UADSPostProcessSettings, PinholeFadeSize) == 0x000048, "Member 'UADSPostProcessSettings::PinholeFadeSize' has a wrong offset!");
static_assert(offsetof(UADSPostProcessSettings, PPSettings) == 0x000050, "Member 'UADSPostProcessSettings::PPSettings' has a wrong offset!");

// Class Squad.SQWeaponAttachment
// 0x0020 (0x0500 - 0x04E0)
#pragma pack(push, 0x1)
class alignas(0x10) USQWeaponAttachment : public UStaticMeshComponent
{
public:
	class FName                                   SocketName;                                        // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASQWeapon*                              AttachedWeapon;                                    // 0x04E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowIn1P;                                         // 0x04F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowIn3P;                                         // 0x04F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1423[0x6];                                     // 0x04F2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQWeaponAttachment">();
	}
	static class USQWeaponAttachment* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQWeaponAttachment>();
	}
};
#pragma pack(pop)
static_assert(alignof(USQWeaponAttachment) == 0x000010, "Wrong alignment on USQWeaponAttachment");
static_assert(sizeof(USQWeaponAttachment) == 0x000500, "Wrong size on USQWeaponAttachment");
static_assert(offsetof(USQWeaponAttachment, SocketName) == 0x0004E0, "Member 'USQWeaponAttachment::SocketName' has a wrong offset!");
static_assert(offsetof(USQWeaponAttachment, AttachedWeapon) == 0x0004E8, "Member 'USQWeaponAttachment::AttachedWeapon' has a wrong offset!");
static_assert(offsetof(USQWeaponAttachment, bShowIn1P) == 0x0004F0, "Member 'USQWeaponAttachment::bShowIn1P' has a wrong offset!");
static_assert(offsetof(USQWeaponAttachment, bShowIn3P) == 0x0004F1, "Member 'USQWeaponAttachment::bShowIn3P' has a wrong offset!");

// Class Squad.SQWeaponAttachment_Scope
// 0x00A0 (0x05A0 - 0x0500)
class USQWeaponAttachment_Scope : public USQWeaponAttachment
{
public:
	float                                         MeshTransitionPercentage;                          // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1424[0x4];                                     // 0x04FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            ADSMesh;                                           // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1425[0x8];                                     // 0x0508(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ADSMeshTransform;                                  // 0x0510(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UStaticMesh*                            NonADSMesh;                                        // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1426[0x8];                                     // 0x0548(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             NonADSMeshTransform;                               // 0x0550(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSQMeshTransitionSettings>      InToADSMeshTransitionSettings;                     // 0x0580(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSQMeshTransitionSettings>      OutFromADSMeshTransitionSettings;                  // 0x0590(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	void HideADSMesh();
	void SetMeshTransitionSetting(const struct FSQMeshTransitionSettings& MeshTransitionSetting);
	void ShowADSMesh();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQWeaponAttachment_Scope">();
	}
	static class USQWeaponAttachment_Scope* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQWeaponAttachment_Scope>();
	}
};
static_assert(alignof(USQWeaponAttachment_Scope) == 0x000010, "Wrong alignment on USQWeaponAttachment_Scope");
static_assert(sizeof(USQWeaponAttachment_Scope) == 0x0005A0, "Wrong size on USQWeaponAttachment_Scope");
static_assert(offsetof(USQWeaponAttachment_Scope, MeshTransitionPercentage) == 0x0004F8, "Member 'USQWeaponAttachment_Scope::MeshTransitionPercentage' has a wrong offset!");
static_assert(offsetof(USQWeaponAttachment_Scope, ADSMesh) == 0x000500, "Member 'USQWeaponAttachment_Scope::ADSMesh' has a wrong offset!");
static_assert(offsetof(USQWeaponAttachment_Scope, ADSMeshTransform) == 0x000510, "Member 'USQWeaponAttachment_Scope::ADSMeshTransform' has a wrong offset!");
static_assert(offsetof(USQWeaponAttachment_Scope, NonADSMesh) == 0x000540, "Member 'USQWeaponAttachment_Scope::NonADSMesh' has a wrong offset!");
static_assert(offsetof(USQWeaponAttachment_Scope, NonADSMeshTransform) == 0x000550, "Member 'USQWeaponAttachment_Scope::NonADSMeshTransform' has a wrong offset!");
static_assert(offsetof(USQWeaponAttachment_Scope, InToADSMeshTransitionSettings) == 0x000580, "Member 'USQWeaponAttachment_Scope::InToADSMeshTransitionSettings' has a wrong offset!");
static_assert(offsetof(USQWeaponAttachment_Scope, OutFromADSMeshTransitionSettings) == 0x000590, "Member 'USQWeaponAttachment_Scope::OutFromADSMeshTransitionSettings' has a wrong offset!");

// Class Squad.SQItemSkinRestrictions
// 0x0000 (0x0028 - 0x0028)
class USQItemSkinRestrictions : public UObject
{
public:
	bool IsValidForCurrentConditions(const struct FSQItemSkinRestrictionParameters& Params_0) const;
	void OverrideConflictingSkins(const struct FSQItemSkinRestrictionParameters& Params_0) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQItemSkinRestrictions">();
	}
	static class USQItemSkinRestrictions* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQItemSkinRestrictions>();
	}
};
static_assert(alignof(USQItemSkinRestrictions) == 0x000008, "Wrong alignment on USQItemSkinRestrictions");
static_assert(sizeof(USQItemSkinRestrictions) == 0x000028, "Wrong size on USQItemSkinRestrictions");

// Class Squad.SQAttachmentSkinBase
// 0x0000 (0x0030 - 0x0030)
class USQAttachmentSkinBase : public UDataAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAttachmentSkinBase">();
	}
	static class USQAttachmentSkinBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQAttachmentSkinBase>();
	}
};
static_assert(alignof(USQAttachmentSkinBase) == 0x000008, "Wrong alignment on USQAttachmentSkinBase");
static_assert(sizeof(USQAttachmentSkinBase) == 0x000030, "Wrong size on USQAttachmentSkinBase");

// Class Squad.SQAttachmentSkin
// 0x0050 (0x0080 - 0x0030)
class USQAttachmentSkin final : public USQAttachmentSkinBase
{
public:
	TArray<TSoftClassPtr<class UClass>>           WeaponAttachmentTypes;                             // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bRemoveMesh;                                       // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1428[0x7];                                     // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UStaticMesh>             Mesh;                                              // 0x0048(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UMaterialInterface>> SkinMaterials;                                     // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAttachmentSkin">();
	}
	static class USQAttachmentSkin* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQAttachmentSkin>();
	}
};
static_assert(alignof(USQAttachmentSkin) == 0x000008, "Wrong alignment on USQAttachmentSkin");
static_assert(sizeof(USQAttachmentSkin) == 0x000080, "Wrong size on USQAttachmentSkin");
static_assert(offsetof(USQAttachmentSkin, WeaponAttachmentTypes) == 0x000030, "Member 'USQAttachmentSkin::WeaponAttachmentTypes' has a wrong offset!");
static_assert(offsetof(USQAttachmentSkin, bRemoveMesh) == 0x000040, "Member 'USQAttachmentSkin::bRemoveMesh' has a wrong offset!");
static_assert(offsetof(USQAttachmentSkin, Mesh) == 0x000048, "Member 'USQAttachmentSkin::Mesh' has a wrong offset!");
static_assert(offsetof(USQAttachmentSkin, SkinMaterials) == 0x000070, "Member 'USQAttachmentSkin::SkinMaterials' has a wrong offset!");

// Class Squad.SQAttachmentSkin_Combined
// 0x0010 (0x0040 - 0x0030)
class USQAttachmentSkin_Combined final : public USQAttachmentSkinBase
{
public:
	TArray<struct FSQAttachmentSkin_Combined_Entry> Attachments;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQAttachmentSkin_Combined">();
	}
	static class USQAttachmentSkin_Combined* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQAttachmentSkin_Combined>();
	}
};
static_assert(alignof(USQAttachmentSkin_Combined) == 0x000008, "Wrong alignment on USQAttachmentSkin_Combined");
static_assert(sizeof(USQAttachmentSkin_Combined) == 0x000040, "Wrong size on USQAttachmentSkin_Combined");
static_assert(offsetof(USQAttachmentSkin_Combined, Attachments) == 0x000030, "Member 'USQAttachmentSkin_Combined::Attachments' has a wrong offset!");

// Class Squad.SQItemSkinCollection_MeshMerge
// 0x0040 (0x0188 - 0x0148)
class USQItemSkinCollection_MeshMerge final : public USQItemSkinCollection
{
public:
	TArray<TSoftObjectPtr<class USkeletalMesh>>   Meshes;                                            // 0x0148(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class USkeleton>               TargetSkeleton;                                    // 0x0158(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          CachedMergedMesh;                                  // 0x0180(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQItemSkinCollection_MeshMerge">();
	}
	static class USQItemSkinCollection_MeshMerge* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQItemSkinCollection_MeshMerge>();
	}
};
static_assert(alignof(USQItemSkinCollection_MeshMerge) == 0x000008, "Wrong alignment on USQItemSkinCollection_MeshMerge");
static_assert(sizeof(USQItemSkinCollection_MeshMerge) == 0x000188, "Wrong size on USQItemSkinCollection_MeshMerge");
static_assert(offsetof(USQItemSkinCollection_MeshMerge, Meshes) == 0x000148, "Member 'USQItemSkinCollection_MeshMerge::Meshes' has a wrong offset!");
static_assert(offsetof(USQItemSkinCollection_MeshMerge, TargetSkeleton) == 0x000158, "Member 'USQItemSkinCollection_MeshMerge::TargetSkeleton' has a wrong offset!");
static_assert(offsetof(USQItemSkinCollection_MeshMerge, CachedMergedMesh) == 0x000180, "Member 'USQItemSkinCollection_MeshMerge::CachedMergedMesh' has a wrong offset!");

// Class Squad.SQItemSkinSettings
// 0x0108 (0x0140 - 0x0038)
class USQItemSkinSettings final : public UDeveloperSettings
{
public:
	TSoftObjectPtr<class UDataTable>              ItemSkinCollections;                               // 0x0038(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UDataTable>              ItemSkinSlots;                                     // 0x0060(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         SkinDataTableGlobalIgnoreStrings;                  // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TSubclassOf<class USQItemSkinRestrictions>    FallbackItemSkinRestrictionObjectType;             // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FSQSkinUIBadge>      BiomeGenericSkinUIBadges;                          // 0x00A0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)
	TMap<class FName, struct FSQSkinUIBadge>      CustomGenericSkinUIBadges;                         // 0x00F0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQItemSkinSettings">();
	}
	static class USQItemSkinSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQItemSkinSettings>();
	}
};
static_assert(alignof(USQItemSkinSettings) == 0x000008, "Wrong alignment on USQItemSkinSettings");
static_assert(sizeof(USQItemSkinSettings) == 0x000140, "Wrong size on USQItemSkinSettings");
static_assert(offsetof(USQItemSkinSettings, ItemSkinCollections) == 0x000038, "Member 'USQItemSkinSettings::ItemSkinCollections' has a wrong offset!");
static_assert(offsetof(USQItemSkinSettings, ItemSkinSlots) == 0x000060, "Member 'USQItemSkinSettings::ItemSkinSlots' has a wrong offset!");
static_assert(offsetof(USQItemSkinSettings, SkinDataTableGlobalIgnoreStrings) == 0x000088, "Member 'USQItemSkinSettings::SkinDataTableGlobalIgnoreStrings' has a wrong offset!");
static_assert(offsetof(USQItemSkinSettings, FallbackItemSkinRestrictionObjectType) == 0x000098, "Member 'USQItemSkinSettings::FallbackItemSkinRestrictionObjectType' has a wrong offset!");
static_assert(offsetof(USQItemSkinSettings, BiomeGenericSkinUIBadges) == 0x0000A0, "Member 'USQItemSkinSettings::BiomeGenericSkinUIBadges' has a wrong offset!");
static_assert(offsetof(USQItemSkinSettings, CustomGenericSkinUIBadges) == 0x0000F0, "Member 'USQItemSkinSettings::CustomGenericSkinUIBadges' has a wrong offset!");

// Class Squad.SQItemSkinSubsystem
// 0x0010 (0x0040 - 0x0030)
class USQItemSkinSubsystem final : public UGameInstanceSubsystem
{
public:
	class UDataTable*                             ItemSkinCollections;                               // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             ItemSkinSlots;                                     // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	TSubclassOf<class USQItemSkinRestrictions> GetFallbackRestrictionsObject() const;
	bool GetSkinCollectionsForBundle(TArray<class USQItemSkinCollection*>& OutputArray, class UODKBazaarItem* Item) const;
	bool GetSkinDisplayClassForBundle(class UClass** OutputPtr, class UODKBazaarItem* Item) const;
	struct FSQSkinUIBadge GetSkinUIBadgeForKey(const class FName& Key, bool bCustomBadge) const;
	TArray<struct FSQSkinUIBadge> GetSkinUIBadgesForKeys(const TArray<class FName>& Keys, bool bCustomBadges) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQItemSkinSubsystem">();
	}
	static class USQItemSkinSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQItemSkinSubsystem>();
	}
};
static_assert(alignof(USQItemSkinSubsystem) == 0x000008, "Wrong alignment on USQItemSkinSubsystem");
static_assert(sizeof(USQItemSkinSubsystem) == 0x000040, "Wrong size on USQItemSkinSubsystem");
static_assert(offsetof(USQItemSkinSubsystem, ItemSkinCollections) == 0x000030, "Member 'USQItemSkinSubsystem::ItemSkinCollections' has a wrong offset!");
static_assert(offsetof(USQItemSkinSubsystem, ItemSkinSlots) == 0x000038, "Member 'USQItemSkinSubsystem::ItemSkinSlots' has a wrong offset!");

// Class Squad.SQSkinBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class USQSkinBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool AreAllSkinsOwned(class ASQPlayerState* PlayerState, const TArray<class FName>& SkinNames);
	static bool AreAllSkinsUsableInContext(class ASQPlayerState* PlayerState, const TArray<class FName>& SkinNames);
	static bool AreSkinsUsingSameSkinSlot(const class FName& Skin1, const class FName& Skin2);
	static void FilterSkinsOwned(class ASQPlayerState* PlayerState, TArray<class FName>& SkinNames);
	static void FilterSkinsUnowned(class ASQPlayerState* PlayerState, TArray<class FName>& SkinNames);
	static void FilterSkinsUsableInContext(class ASQPlayerState* PlayerState, TArray<class FName>& SkinNames);
	static void FilterSkinsUsingSameSkinSlots(TArray<class FName>& SkinNames);
	static const class USQItemSkinCollection* FindSkin(const class FName& SkinName);
	static TArray<class FName> GetAllSkinNames();
	static TArray<class FName> GetAllSkinsForFaction(class UObject* WCO, const class FName& FactionName, bool bIncludeIfNoFactions);
	static bool GetIsSkinEnabledForFaction(const class FName& Faction, const class FName& SkinName);
	static const class UDataTable* GetSkinDataTable();
	static TSoftClassPtr<class UClass> GetUserInterfacePreviewWeapon(const struct FSQItemSkinSlot& SkinSlot);
	static bool IsSkinOwned(class ASQPlayerState* PlayerState, const class FName& SkinName);
	static bool IsSkinUsableInContext(class ASQPlayerState* PlayerState, const class FName& SkinName);
	static ESQSkinEnableResult SetSkinEnabledForFaction(class ASQPlayerState* PlayerState, const class FName& Faction, const class FName& SkinName, bool bEnable, bool bRemoveNonUniqueSkinGroups);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQSkinBlueprintLibrary">();
	}
	static class USQSkinBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQSkinBlueprintLibrary>();
	}
};
static_assert(alignof(USQSkinBlueprintLibrary) == 0x000008, "Wrong alignment on USQSkinBlueprintLibrary");
static_assert(sizeof(USQSkinBlueprintLibrary) == 0x000028, "Wrong size on USQSkinBlueprintLibrary");

// Class Squad.SQWeaponSkinWidget
// 0x0070 (0x02D0 - 0x0260)
class USQWeaponSkinWidget : public UUserWidget
{
public:
	uint8                                         Pad_1435[0x8];                                     // 0x0260(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSelected;                                        // 0x0268(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnHovered;                                         // 0x0278(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	bool                                          bIsEquipped;                                       // 0x0288(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1436[0x7];                                     // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQItemSkinCollection*                  WeaponSkinData;                                    // 0x0290(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FactionName;                                       // 0x0298(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WeaponSkinName;                                    // 0x02A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 ItemIcon;                                          // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             WeaponName;                                        // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             SkinName;                                          // 0x02B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBorder*                                BundleNewBadge;                                    // 0x02C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UButton*                                ItemButton;                                        // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnHover();

	bool IsNew() const;
	bool IsOwned() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQWeaponSkinWidget">();
	}
	static class USQWeaponSkinWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQWeaponSkinWidget>();
	}
};
static_assert(alignof(USQWeaponSkinWidget) == 0x000008, "Wrong alignment on USQWeaponSkinWidget");
static_assert(sizeof(USQWeaponSkinWidget) == 0x0002D0, "Wrong size on USQWeaponSkinWidget");
static_assert(offsetof(USQWeaponSkinWidget, OnSelected) == 0x000268, "Member 'USQWeaponSkinWidget::OnSelected' has a wrong offset!");
static_assert(offsetof(USQWeaponSkinWidget, OnHovered) == 0x000278, "Member 'USQWeaponSkinWidget::OnHovered' has a wrong offset!");
static_assert(offsetof(USQWeaponSkinWidget, bIsEquipped) == 0x000288, "Member 'USQWeaponSkinWidget::bIsEquipped' has a wrong offset!");
static_assert(offsetof(USQWeaponSkinWidget, WeaponSkinData) == 0x000290, "Member 'USQWeaponSkinWidget::WeaponSkinData' has a wrong offset!");
static_assert(offsetof(USQWeaponSkinWidget, FactionName) == 0x000298, "Member 'USQWeaponSkinWidget::FactionName' has a wrong offset!");
static_assert(offsetof(USQWeaponSkinWidget, WeaponSkinName) == 0x0002A0, "Member 'USQWeaponSkinWidget::WeaponSkinName' has a wrong offset!");
static_assert(offsetof(USQWeaponSkinWidget, ItemIcon) == 0x0002A8, "Member 'USQWeaponSkinWidget::ItemIcon' has a wrong offset!");
static_assert(offsetof(USQWeaponSkinWidget, WeaponName) == 0x0002B0, "Member 'USQWeaponSkinWidget::WeaponName' has a wrong offset!");
static_assert(offsetof(USQWeaponSkinWidget, SkinName) == 0x0002B8, "Member 'USQWeaponSkinWidget::SkinName' has a wrong offset!");
static_assert(offsetof(USQWeaponSkinWidget, BundleNewBadge) == 0x0002C0, "Member 'USQWeaponSkinWidget::BundleNewBadge' has a wrong offset!");
static_assert(offsetof(USQWeaponSkinWidget, ItemButton) == 0x0002C8, "Member 'USQWeaponSkinWidget::ItemButton' has a wrong offset!");

// Class Squad.SQWeaponStaticInfo
// 0x0798 (0x0D88 - 0x05F0)
class USQWeaponStaticInfo : public USQItemStaticInfo
{
public:
	int32                                         CurrentVersion;                                    // 0x05F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1437[0x4];                                     // 0x05F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ReloadBipodWeaponMontage;                          // 0x05F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReloadBipod1pMontage;                              // 0x0600(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReloadBipod3pMontage;                              // 0x0608(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReloadDryWeaponMontage;                            // 0x0610(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReloadDry1pMontage;                                // 0x0618(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReloadDry3pMontage;                                // 0x0620(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReloadDryBipodWeaponMontage;                       // 0x0628(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReloadDryBipod1pMontage;                           // 0x0630(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReloadDryBipod3pMontage;                           // 0x0638(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAnimMontage*>                   RandomFire1pMontage;                               // 0x0640(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UAnimMontage*                           FireAdd3pMontage;                                  // 0x0650(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           FireTriggerWeaponMontage;                          // 0x0658(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           FireTrigger1pMontage;                              // 0x0660(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           FireTrigger3pMontage;                              // 0x0668(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           FireSway1pMontage;                                 // 0x0670(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           FireSway1pBlendInMontage;                          // 0x0678(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           FireAds1pMontage;                                  // 0x0680(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           FireAds3pMontage;                                  // 0x0688(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           FireBipodWeaponMontage;                            // 0x0690(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           FireBipod1pMontage;                                // 0x0698(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           FireBipod3pMontage;                                // 0x06A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           FireAddBipod1pMontage;                             // 0x06A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           FireAddBipod3pMontage;                             // 0x06B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQMontageSectionNames                 BipodEndLoopSectionNames;                          // 0x06B8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class UAnimMontage*                           BipodWeaponMontage;                                // 0x06E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Bipod1pMontage;                                    // 0x06E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Bipod3pMontage;                                    // 0x06F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           FiremodeBipodMontage;                              // 0x06F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           FiremodeBipodWeaponMontage;                        // 0x0700(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           FiremodeMontage;                                   // 0x0708(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           FiremodeWeaponMontage;                             // 0x0710(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           BobbingAimProneSway1pMontage;                      // 0x0718(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           BobbingAim1pMontage;                               // 0x0720(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MuzzleFlashEffectSocket;                           // 0x0728(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        MuzzleFlashEffect1P;                               // 0x0730(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NiagaraMuzzleFlashEffect1P;                        // 0x0738(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        MuzzleFlashEffect3P;                               // 0x0740(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NiagaraMuzzleFlashEffect3P;                        // 0x0748(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMuzzleFlashUseLastingEffect;                      // 0x0750(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1438[0x7];                                     // 0x0751(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ASQLastingEffect>           MuzzleFlashLastingEffect1p;                        // 0x0758(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQLastingEffect>           MuzzleFlashLastingEffect3p;                        // 0x0760(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShellEjectionCullDistanceInMeters;                 // 0x0768(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ShellEjectionEffectSocket;                         // 0x076C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1439[0x4];                                     // 0x0774(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        ShellEjectionEffect1p;                             // 0x0778(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NiagaraShellEjectionEffect1p;                      // 0x0780(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        ShellEjectionEffect3p;                             // 0x0788(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         NiagaraShellEjectionEffect3p;                      // 0x0790(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BackBlastEffectSocket;                             // 0x0798(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQLastingEffect>           BackBlastLastingEffect1p;                          // 0x07A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ASQLastingEffect>           BackBlastLastingEffect3p;                          // 0x07A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               BackBlastLastingEffectAdditionalRotation;          // 0x07B0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RecoilCameraOffsetFactor;                          // 0x07BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilCameraOffsetInterpSpeed;                     // 0x07C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilLofCameraOffsetLimit;                        // 0x07C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilLofAttackInterpSpeed;                        // 0x07C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilCanReleaseInterpSpeed;                       // 0x07CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilLofReleaseInterpSpeed;                       // 0x07D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilWeaponRelLocFactor;                          // 0x07D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilCameraShotInterpSpeed;                       // 0x07D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilAdsCameraShotInterpSpeed;                    // 0x07DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RecoilShoulderAlignmentCurve;                      // 0x07E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            RecoilGripAlignmentCurve;                          // 0x07E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveRecoilFactorRelease;                           // 0x07F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddMoveRecoil;                                     // 0x07F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxMoveRecoilFactor;                               // 0x07F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinMoveRecoilFactor;                               // 0x07FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilAlignmentMovementAddative;                   // 0x0800(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilAlignmentMovementExponent;                   // 0x0804(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowStaminaRecoilFactor;                            // 0x0808(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FullStaminaRecoilFactor;                           // 0x080C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilAlignmentStaminaAddative;                    // 0x0810(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilAlignmentStaminaExponent;                    // 0x0814(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RecoilAlignmentShoulderMax;                        // 0x0818(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RecoilAlignmentShoulderAngleLimits;                // 0x0820(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RecoilAlignmentGripMax;                            // 0x0828(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RecoilAlignmentGripAngleLimits;                    // 0x0830(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilAlignmentMultiplierMax;                      // 0x0838(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_143A[0x4];                                     // 0x083C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  FiringModesFlipFlopToggle;                         // 0x0840(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                ProneAdsRecoilMean;                                // 0x0850(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ProneAdsRecoilSigma;                               // 0x085C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ProneRecoilMean;                                   // 0x0868(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ProneRecoilSigma;                                  // 0x0874(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilAlignmentProneMultiplier;                    // 0x0880(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CrouchAdsRecoilMean;                               // 0x0884(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CrouchAdsRecoilSigma;                              // 0x0890(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CrouchRecoilMean;                                  // 0x089C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CrouchRecoilSigma;                                 // 0x08A8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilAlignmentCrouchMultiplier;                   // 0x08B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StandAdsRecoilMean;                                // 0x08B8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StandAdsRecoilSigma;                               // 0x08C4(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StandRecoilMean;                                   // 0x08D0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StandRecoilSigma;                                  // 0x08DC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilAlignmentStandMultiplier;                    // 0x08E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ProneTransitionRecoilMean;                         // 0x08EC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ProneTransitionRecoilSigma;                        // 0x08F8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BipodAdsRecoilMean;                                // 0x0904(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BipodAdsRecoilSigma;                               // 0x0910(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BipodRecoilMean;                                   // 0x091C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BipodRecoilSigma;                                  // 0x0928(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RecoilAlignmentBipodShoulderMax;                   // 0x0934(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RecoilAlignmentBipodShoulderAngleLimits;           // 0x093C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RecoilAlignmentBipodGripMax;                       // 0x0944(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RecoilAlignmentBipodGripAngleLimits;               // 0x094C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoilAlignmentBipodMultiplier;                    // 0x0954(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecoilAlignmentNoFlipFlopWhenBipoded;             // 0x0958(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecoilAlignmentBipodUseSeparateConfig;            // 0x0959(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_143B[0x2];                                     // 0x095A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeviationVisuFbInterpSpeed_YZ;                     // 0x095C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeviationVisuFbInterpSpeed_Final;                  // 0x0960(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeviationVisuFbMax;                                // 0x0964(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinShotDeviationFactor;                            // 0x0968(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxShotDeviationFactor;                            // 0x096C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddShotDeviationFactor;                            // 0x0970(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddShotDeviationFactorAds;                         // 0x0974(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShotDeviationFactorRelease;                        // 0x0978(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowStaminaDeviationFactor;                         // 0x097C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FullStaminaDeviationFactor;                        // 0x0980(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveDeviationFactorRelease;                        // 0x0984(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddMoveDeviation;                                  // 0x0988(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxMoveDeviationFactor;                            // 0x098C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinMoveDeviationFactor;                            // 0x0990(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinBipodAdsDeviation;                              // 0x0994(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinBipodDeviation;                                 // 0x0998(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinProneAdsDeviation;                              // 0x099C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinProneDeviation;                                 // 0x09A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinCrouchAdsDeviation;                             // 0x09A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinCrouchDeviation;                                // 0x09A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinStandAdsDeviation;                              // 0x09AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinStandDeviation;                                 // 0x09B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinProneTransitionDeviation;                       // 0x09B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSplitRandomization;                               // 0x09B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_143C[0x3];                                     // 0x09B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSQSwayData                            SwayData;                                          // 0x09BC(0x0094)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FSQSwayData                            SwayAlignmentData;                                 // 0x0A50(0x0094)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_143D[0x4];                                     // 0x0AE4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            HoldBreathEaseCurve;                               // 0x0AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HoldBreathEaseInPlayRate;                          // 0x0AF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HoldBreathEaseOutPlayRate;                         // 0x0AF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwayInterpSpeed_YZ;                                // 0x0AF8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwayInterpSpeed_Final;                             // 0x0AFC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HasSway;                                           // 0x0B00(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveSwayFactorRelease;                             // 0x0B04(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddMoveSway;                                       // 0x0B08(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinMoveSwayFactor;                                 // 0x0B0C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxMoveSwayFactor;                                 // 0x0B10(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowStaminaSwayFactor;                              // 0x0B14(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FullStaminaSwayFactor;                             // 0x0B18(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HoldingBreathSwayFactor;                           // 0x0B1C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProneAdsSwayMin;                                   // 0x0B20(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProneSwayMin;                                      // 0x0B24(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrouchAdsSwayMin;                                  // 0x0B28(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrouchSwayMin;                                     // 0x0B2C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandAdsSwayMin;                                   // 0x0B30(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandSwayMin;                                      // 0x0B34(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProneTransitionSwayMin;                            // 0x0B38(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasBipod;                                         // 0x0B3C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_143E[0x3];                                     // 0x0B3D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BipodLength;                                       // 0x0B40(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BipodHeightRaw;                                    // 0x0B44(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasAdjustableSight;                               // 0x0B48(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_143F[0x3];                                     // 0x0B49(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StandTime;                                         // 0x0B4C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrouchTime;                                        // 0x0B50(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProneTime;                                         // 0x0B54(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BipodTime;                                         // 0x0B58(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeanHeadWhenAds;                                  // 0x0B5C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1440[0x3];                                     // 0x0B5D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSQAdjustableSightMontageSet>   AdsSightsAnim;                                     // 0x0B60(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UAnimMontage*                           BaseAds1pMontage;                                  // 0x0B70(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           AdsTransition1pMontage;                            // 0x0B78(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           FromAdsTransition1pMontage;                        // 0x0B80(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AdjustableAdsSightItemAnim;                        // 0x0B88(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustableAdsSightItemFrameRate;                   // 0x0B90(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasAdsTransition;                                 // 0x0B94(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1441[0x3];                                     // 0x0B95(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RecoilAnimBlendTime;                               // 0x0B98(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Aim1pWeaponMeshPosition;                           // 0x0B9C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Aim1pWeaponMeshRescale;                            // 0x0BA8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1442[0x4];                                     // 0x0BB4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DefaultZeroingText;                                // 0x0BB8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         SeparateAdsFov;                                    // 0x0BD0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ClearSightsMaxOffset;                              // 0x0BD4(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ClearSightsMaxRoll;                                // 0x0BE0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ClearSightsMaxInput;                               // 0x0BEC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClearSightsMinInput;                               // 0x0BF0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1443[0x4];                                     // 0x0BF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            SwayClearSightsBlendCurve;                         // 0x0BF8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClearSightInterpSpeed;                             // 0x0C00(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClearSightSwayWeight;                              // 0x0C04(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           ADSPunchWeaponAlignmentCurve;                      // 0x0C08(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           ADSPunchCameraLocationCurve;                       // 0x0C10(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           ADSPunchCameraRotationCurve;                       // 0x0C18(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableSuppressionXAxisCameraLocationPunch;        // 0x0C20(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1444[0x3];                                     // 0x0C21(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ADSSuppressionPunchCameraLocationMultiplier;       // 0x0C24(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ADSSuppressionPunchCameraRotationMultiplier;       // 0x0C28(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ADSSuppressionPunchWeaponAlignmentMultiplier;      // 0x0C2C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Steady1pHipFireDuration;                           // 0x0C30(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1445[0x4];                                     // 0x0C34(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           FallingWeaponPunchCurve;                           // 0x0C38(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCameraShakeBase>           FireCameraShake;                                   // 0x0C40(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FreeAimHorizontalThreshold;                        // 0x0C48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FreeAimLimitVertical;                              // 0x0C4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FreeAimLimitHorizontal;                            // 0x0C50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FreeAimNonAdsInterpSpeed;                          // 0x0C54(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FreeAimAdsInterpSpeed;                             // 0x0C58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlaySoundOnMagEmpty;                              // 0x0C5C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1446[0x3];                                     // 0x0C5D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlaySoundOnEmptyUse;                               // 0x0C60(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlaySoundOnEmptyAltUse;                            // 0x0C64(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              ToggleFiremodeSound1P;                             // 0x0C68(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              ToggleFiremodeSound3P;                             // 0x0C70(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              FromAdsSound1p;                                    // 0x0C78(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              FromAdsSound3p;                                    // 0x0C80(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              ToAdsSound1p;                                      // 0x0C88(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              ToAdsSound3p;                                      // 0x0C90(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              SightSwitchingSound1p;                             // 0x0C98(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              SightSwitchingSound3p;                             // 0x0CA0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              MagEmptySound1p;                                   // 0x0CA8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              MagEmptySound3p;                                   // 0x0CB0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              EmptyUseSound1p;                                   // 0x0CB8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              EmptyUseSound3p;                                   // 0x0CC0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              EmptyAltUseSound1p;                                // 0x0CC8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              EmptyAltUseSound3p;                                // 0x0CD0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundCue*                              ChangeMagnificationSound;                          // 0x0CD8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ChangeMagnificationPunchAngle;                     // 0x0CE0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           ChangeMagnificationAlignmentPunchCurve;            // 0x0CE8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           ChangeMagnificationLocationPunchCurve;             // 0x0CF0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQMontageSectionNames                 BobbingAimEndLoopSectionNames;                     // 0x0CF8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   AimDirectionSocketName;                            // 0x0D20(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowZeroingInHud;                                 // 0x0D28(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequiresManualBolt;                               // 0x0D29(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1447[0x2];                                     // 0x0D2A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ManualBoltingCompletionTime;                       // 0x0D2C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ManualBoltingWeaponMontage;                        // 0x0D30(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ManualBolting1pMontage;                            // 0x0D38(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ManualBolting3pMontage;                            // 0x0D40(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ManualBoltingBipodWeaponMontage;                   // 0x0D48(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ManualBoltingBipod1pMontage;                       // 0x0D50(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ManualBoltingBipod3pMontage;                       // 0x0D58(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreventFreelookWhileADS;                          // 0x0D60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequireAdsToShoot;                                // 0x0D61(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FireStanceRestriction;                             // 0x0D62(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowVaultAndLowClimbShooting;                    // 0x0D63(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeedRequiredForUse;                            // 0x0D64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1448[0x18];                                    // 0x0D68(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ClampSpeedWhileReloading;                          // 0x0D80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLimitLeanAngle;                                   // 0x0D84(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCancelReloadOnSprint;                             // 0x0D85(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCancelReloadOnJumpVaultClimb;                     // 0x0D86(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1449[0x1];                                     // 0x0D87(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQWeaponStaticInfo">();
	}
	static class USQWeaponStaticInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQWeaponStaticInfo>();
	}
};
static_assert(alignof(USQWeaponStaticInfo) == 0x000008, "Wrong alignment on USQWeaponStaticInfo");
static_assert(sizeof(USQWeaponStaticInfo) == 0x000D88, "Wrong size on USQWeaponStaticInfo");
static_assert(offsetof(USQWeaponStaticInfo, CurrentVersion) == 0x0005F0, "Member 'USQWeaponStaticInfo::CurrentVersion' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ReloadBipodWeaponMontage) == 0x0005F8, "Member 'USQWeaponStaticInfo::ReloadBipodWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ReloadBipod1pMontage) == 0x000600, "Member 'USQWeaponStaticInfo::ReloadBipod1pMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ReloadBipod3pMontage) == 0x000608, "Member 'USQWeaponStaticInfo::ReloadBipod3pMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ReloadDryWeaponMontage) == 0x000610, "Member 'USQWeaponStaticInfo::ReloadDryWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ReloadDry1pMontage) == 0x000618, "Member 'USQWeaponStaticInfo::ReloadDry1pMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ReloadDry3pMontage) == 0x000620, "Member 'USQWeaponStaticInfo::ReloadDry3pMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ReloadDryBipodWeaponMontage) == 0x000628, "Member 'USQWeaponStaticInfo::ReloadDryBipodWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ReloadDryBipod1pMontage) == 0x000630, "Member 'USQWeaponStaticInfo::ReloadDryBipod1pMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ReloadDryBipod3pMontage) == 0x000638, "Member 'USQWeaponStaticInfo::ReloadDryBipod3pMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, RandomFire1pMontage) == 0x000640, "Member 'USQWeaponStaticInfo::RandomFire1pMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FireAdd3pMontage) == 0x000650, "Member 'USQWeaponStaticInfo::FireAdd3pMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FireTriggerWeaponMontage) == 0x000658, "Member 'USQWeaponStaticInfo::FireTriggerWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FireTrigger1pMontage) == 0x000660, "Member 'USQWeaponStaticInfo::FireTrigger1pMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FireTrigger3pMontage) == 0x000668, "Member 'USQWeaponStaticInfo::FireTrigger3pMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FireSway1pMontage) == 0x000670, "Member 'USQWeaponStaticInfo::FireSway1pMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FireSway1pBlendInMontage) == 0x000678, "Member 'USQWeaponStaticInfo::FireSway1pBlendInMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FireAds1pMontage) == 0x000680, "Member 'USQWeaponStaticInfo::FireAds1pMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FireAds3pMontage) == 0x000688, "Member 'USQWeaponStaticInfo::FireAds3pMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FireBipodWeaponMontage) == 0x000690, "Member 'USQWeaponStaticInfo::FireBipodWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FireBipod1pMontage) == 0x000698, "Member 'USQWeaponStaticInfo::FireBipod1pMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FireBipod3pMontage) == 0x0006A0, "Member 'USQWeaponStaticInfo::FireBipod3pMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FireAddBipod1pMontage) == 0x0006A8, "Member 'USQWeaponStaticInfo::FireAddBipod1pMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FireAddBipod3pMontage) == 0x0006B0, "Member 'USQWeaponStaticInfo::FireAddBipod3pMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, BipodEndLoopSectionNames) == 0x0006B8, "Member 'USQWeaponStaticInfo::BipodEndLoopSectionNames' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, BipodWeaponMontage) == 0x0006E0, "Member 'USQWeaponStaticInfo::BipodWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, Bipod1pMontage) == 0x0006E8, "Member 'USQWeaponStaticInfo::Bipod1pMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, Bipod3pMontage) == 0x0006F0, "Member 'USQWeaponStaticInfo::Bipod3pMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FiremodeBipodMontage) == 0x0006F8, "Member 'USQWeaponStaticInfo::FiremodeBipodMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FiremodeBipodWeaponMontage) == 0x000700, "Member 'USQWeaponStaticInfo::FiremodeBipodWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FiremodeMontage) == 0x000708, "Member 'USQWeaponStaticInfo::FiremodeMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FiremodeWeaponMontage) == 0x000710, "Member 'USQWeaponStaticInfo::FiremodeWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, BobbingAimProneSway1pMontage) == 0x000718, "Member 'USQWeaponStaticInfo::BobbingAimProneSway1pMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, BobbingAim1pMontage) == 0x000720, "Member 'USQWeaponStaticInfo::BobbingAim1pMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, MuzzleFlashEffectSocket) == 0x000728, "Member 'USQWeaponStaticInfo::MuzzleFlashEffectSocket' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, MuzzleFlashEffect1P) == 0x000730, "Member 'USQWeaponStaticInfo::MuzzleFlashEffect1P' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, NiagaraMuzzleFlashEffect1P) == 0x000738, "Member 'USQWeaponStaticInfo::NiagaraMuzzleFlashEffect1P' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, MuzzleFlashEffect3P) == 0x000740, "Member 'USQWeaponStaticInfo::MuzzleFlashEffect3P' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, NiagaraMuzzleFlashEffect3P) == 0x000748, "Member 'USQWeaponStaticInfo::NiagaraMuzzleFlashEffect3P' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, bMuzzleFlashUseLastingEffect) == 0x000750, "Member 'USQWeaponStaticInfo::bMuzzleFlashUseLastingEffect' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, MuzzleFlashLastingEffect1p) == 0x000758, "Member 'USQWeaponStaticInfo::MuzzleFlashLastingEffect1p' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, MuzzleFlashLastingEffect3p) == 0x000760, "Member 'USQWeaponStaticInfo::MuzzleFlashLastingEffect3p' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ShellEjectionCullDistanceInMeters) == 0x000768, "Member 'USQWeaponStaticInfo::ShellEjectionCullDistanceInMeters' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ShellEjectionEffectSocket) == 0x00076C, "Member 'USQWeaponStaticInfo::ShellEjectionEffectSocket' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ShellEjectionEffect1p) == 0x000778, "Member 'USQWeaponStaticInfo::ShellEjectionEffect1p' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, NiagaraShellEjectionEffect1p) == 0x000780, "Member 'USQWeaponStaticInfo::NiagaraShellEjectionEffect1p' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ShellEjectionEffect3p) == 0x000788, "Member 'USQWeaponStaticInfo::ShellEjectionEffect3p' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, NiagaraShellEjectionEffect3p) == 0x000790, "Member 'USQWeaponStaticInfo::NiagaraShellEjectionEffect3p' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, BackBlastEffectSocket) == 0x000798, "Member 'USQWeaponStaticInfo::BackBlastEffectSocket' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, BackBlastLastingEffect1p) == 0x0007A0, "Member 'USQWeaponStaticInfo::BackBlastLastingEffect1p' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, BackBlastLastingEffect3p) == 0x0007A8, "Member 'USQWeaponStaticInfo::BackBlastLastingEffect3p' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, BackBlastLastingEffectAdditionalRotation) == 0x0007B0, "Member 'USQWeaponStaticInfo::BackBlastLastingEffectAdditionalRotation' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, RecoilCameraOffsetFactor) == 0x0007BC, "Member 'USQWeaponStaticInfo::RecoilCameraOffsetFactor' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, RecoilCameraOffsetInterpSpeed) == 0x0007C0, "Member 'USQWeaponStaticInfo::RecoilCameraOffsetInterpSpeed' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, RecoilLofCameraOffsetLimit) == 0x0007C4, "Member 'USQWeaponStaticInfo::RecoilLofCameraOffsetLimit' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, RecoilLofAttackInterpSpeed) == 0x0007C8, "Member 'USQWeaponStaticInfo::RecoilLofAttackInterpSpeed' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, RecoilCanReleaseInterpSpeed) == 0x0007CC, "Member 'USQWeaponStaticInfo::RecoilCanReleaseInterpSpeed' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, RecoilLofReleaseInterpSpeed) == 0x0007D0, "Member 'USQWeaponStaticInfo::RecoilLofReleaseInterpSpeed' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, RecoilWeaponRelLocFactor) == 0x0007D4, "Member 'USQWeaponStaticInfo::RecoilWeaponRelLocFactor' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, RecoilCameraShotInterpSpeed) == 0x0007D8, "Member 'USQWeaponStaticInfo::RecoilCameraShotInterpSpeed' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, RecoilAdsCameraShotInterpSpeed) == 0x0007DC, "Member 'USQWeaponStaticInfo::RecoilAdsCameraShotInterpSpeed' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, RecoilShoulderAlignmentCurve) == 0x0007E0, "Member 'USQWeaponStaticInfo::RecoilShoulderAlignmentCurve' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, RecoilGripAlignmentCurve) == 0x0007E8, "Member 'USQWeaponStaticInfo::RecoilGripAlignmentCurve' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, MoveRecoilFactorRelease) == 0x0007F0, "Member 'USQWeaponStaticInfo::MoveRecoilFactorRelease' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, AddMoveRecoil) == 0x0007F4, "Member 'USQWeaponStaticInfo::AddMoveRecoil' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, MaxMoveRecoilFactor) == 0x0007F8, "Member 'USQWeaponStaticInfo::MaxMoveRecoilFactor' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, MinMoveRecoilFactor) == 0x0007FC, "Member 'USQWeaponStaticInfo::MinMoveRecoilFactor' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, RecoilAlignmentMovementAddative) == 0x000800, "Member 'USQWeaponStaticInfo::RecoilAlignmentMovementAddative' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, RecoilAlignmentMovementExponent) == 0x000804, "Member 'USQWeaponStaticInfo::RecoilAlignmentMovementExponent' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, LowStaminaRecoilFactor) == 0x000808, "Member 'USQWeaponStaticInfo::LowStaminaRecoilFactor' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FullStaminaRecoilFactor) == 0x00080C, "Member 'USQWeaponStaticInfo::FullStaminaRecoilFactor' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, RecoilAlignmentStaminaAddative) == 0x000810, "Member 'USQWeaponStaticInfo::RecoilAlignmentStaminaAddative' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, RecoilAlignmentStaminaExponent) == 0x000814, "Member 'USQWeaponStaticInfo::RecoilAlignmentStaminaExponent' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, RecoilAlignmentShoulderMax) == 0x000818, "Member 'USQWeaponStaticInfo::RecoilAlignmentShoulderMax' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, RecoilAlignmentShoulderAngleLimits) == 0x000820, "Member 'USQWeaponStaticInfo::RecoilAlignmentShoulderAngleLimits' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, RecoilAlignmentGripMax) == 0x000828, "Member 'USQWeaponStaticInfo::RecoilAlignmentGripMax' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, RecoilAlignmentGripAngleLimits) == 0x000830, "Member 'USQWeaponStaticInfo::RecoilAlignmentGripAngleLimits' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, RecoilAlignmentMultiplierMax) == 0x000838, "Member 'USQWeaponStaticInfo::RecoilAlignmentMultiplierMax' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FiringModesFlipFlopToggle) == 0x000840, "Member 'USQWeaponStaticInfo::FiringModesFlipFlopToggle' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ProneAdsRecoilMean) == 0x000850, "Member 'USQWeaponStaticInfo::ProneAdsRecoilMean' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ProneAdsRecoilSigma) == 0x00085C, "Member 'USQWeaponStaticInfo::ProneAdsRecoilSigma' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ProneRecoilMean) == 0x000868, "Member 'USQWeaponStaticInfo::ProneRecoilMean' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ProneRecoilSigma) == 0x000874, "Member 'USQWeaponStaticInfo::ProneRecoilSigma' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, RecoilAlignmentProneMultiplier) == 0x000880, "Member 'USQWeaponStaticInfo::RecoilAlignmentProneMultiplier' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, CrouchAdsRecoilMean) == 0x000884, "Member 'USQWeaponStaticInfo::CrouchAdsRecoilMean' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, CrouchAdsRecoilSigma) == 0x000890, "Member 'USQWeaponStaticInfo::CrouchAdsRecoilSigma' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, CrouchRecoilMean) == 0x00089C, "Member 'USQWeaponStaticInfo::CrouchRecoilMean' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, CrouchRecoilSigma) == 0x0008A8, "Member 'USQWeaponStaticInfo::CrouchRecoilSigma' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, RecoilAlignmentCrouchMultiplier) == 0x0008B4, "Member 'USQWeaponStaticInfo::RecoilAlignmentCrouchMultiplier' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, StandAdsRecoilMean) == 0x0008B8, "Member 'USQWeaponStaticInfo::StandAdsRecoilMean' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, StandAdsRecoilSigma) == 0x0008C4, "Member 'USQWeaponStaticInfo::StandAdsRecoilSigma' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, StandRecoilMean) == 0x0008D0, "Member 'USQWeaponStaticInfo::StandRecoilMean' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, StandRecoilSigma) == 0x0008DC, "Member 'USQWeaponStaticInfo::StandRecoilSigma' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, RecoilAlignmentStandMultiplier) == 0x0008E8, "Member 'USQWeaponStaticInfo::RecoilAlignmentStandMultiplier' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ProneTransitionRecoilMean) == 0x0008EC, "Member 'USQWeaponStaticInfo::ProneTransitionRecoilMean' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ProneTransitionRecoilSigma) == 0x0008F8, "Member 'USQWeaponStaticInfo::ProneTransitionRecoilSigma' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, BipodAdsRecoilMean) == 0x000904, "Member 'USQWeaponStaticInfo::BipodAdsRecoilMean' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, BipodAdsRecoilSigma) == 0x000910, "Member 'USQWeaponStaticInfo::BipodAdsRecoilSigma' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, BipodRecoilMean) == 0x00091C, "Member 'USQWeaponStaticInfo::BipodRecoilMean' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, BipodRecoilSigma) == 0x000928, "Member 'USQWeaponStaticInfo::BipodRecoilSigma' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, RecoilAlignmentBipodShoulderMax) == 0x000934, "Member 'USQWeaponStaticInfo::RecoilAlignmentBipodShoulderMax' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, RecoilAlignmentBipodShoulderAngleLimits) == 0x00093C, "Member 'USQWeaponStaticInfo::RecoilAlignmentBipodShoulderAngleLimits' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, RecoilAlignmentBipodGripMax) == 0x000944, "Member 'USQWeaponStaticInfo::RecoilAlignmentBipodGripMax' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, RecoilAlignmentBipodGripAngleLimits) == 0x00094C, "Member 'USQWeaponStaticInfo::RecoilAlignmentBipodGripAngleLimits' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, RecoilAlignmentBipodMultiplier) == 0x000954, "Member 'USQWeaponStaticInfo::RecoilAlignmentBipodMultiplier' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, bRecoilAlignmentNoFlipFlopWhenBipoded) == 0x000958, "Member 'USQWeaponStaticInfo::bRecoilAlignmentNoFlipFlopWhenBipoded' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, bRecoilAlignmentBipodUseSeparateConfig) == 0x000959, "Member 'USQWeaponStaticInfo::bRecoilAlignmentBipodUseSeparateConfig' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, DeviationVisuFbInterpSpeed_YZ) == 0x00095C, "Member 'USQWeaponStaticInfo::DeviationVisuFbInterpSpeed_YZ' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, DeviationVisuFbInterpSpeed_Final) == 0x000960, "Member 'USQWeaponStaticInfo::DeviationVisuFbInterpSpeed_Final' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, DeviationVisuFbMax) == 0x000964, "Member 'USQWeaponStaticInfo::DeviationVisuFbMax' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, MinShotDeviationFactor) == 0x000968, "Member 'USQWeaponStaticInfo::MinShotDeviationFactor' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, MaxShotDeviationFactor) == 0x00096C, "Member 'USQWeaponStaticInfo::MaxShotDeviationFactor' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, AddShotDeviationFactor) == 0x000970, "Member 'USQWeaponStaticInfo::AddShotDeviationFactor' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, AddShotDeviationFactorAds) == 0x000974, "Member 'USQWeaponStaticInfo::AddShotDeviationFactorAds' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ShotDeviationFactorRelease) == 0x000978, "Member 'USQWeaponStaticInfo::ShotDeviationFactorRelease' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, LowStaminaDeviationFactor) == 0x00097C, "Member 'USQWeaponStaticInfo::LowStaminaDeviationFactor' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FullStaminaDeviationFactor) == 0x000980, "Member 'USQWeaponStaticInfo::FullStaminaDeviationFactor' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, MoveDeviationFactorRelease) == 0x000984, "Member 'USQWeaponStaticInfo::MoveDeviationFactorRelease' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, AddMoveDeviation) == 0x000988, "Member 'USQWeaponStaticInfo::AddMoveDeviation' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, MaxMoveDeviationFactor) == 0x00098C, "Member 'USQWeaponStaticInfo::MaxMoveDeviationFactor' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, MinMoveDeviationFactor) == 0x000990, "Member 'USQWeaponStaticInfo::MinMoveDeviationFactor' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, MinBipodAdsDeviation) == 0x000994, "Member 'USQWeaponStaticInfo::MinBipodAdsDeviation' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, MinBipodDeviation) == 0x000998, "Member 'USQWeaponStaticInfo::MinBipodDeviation' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, MinProneAdsDeviation) == 0x00099C, "Member 'USQWeaponStaticInfo::MinProneAdsDeviation' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, MinProneDeviation) == 0x0009A0, "Member 'USQWeaponStaticInfo::MinProneDeviation' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, MinCrouchAdsDeviation) == 0x0009A4, "Member 'USQWeaponStaticInfo::MinCrouchAdsDeviation' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, MinCrouchDeviation) == 0x0009A8, "Member 'USQWeaponStaticInfo::MinCrouchDeviation' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, MinStandAdsDeviation) == 0x0009AC, "Member 'USQWeaponStaticInfo::MinStandAdsDeviation' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, MinStandDeviation) == 0x0009B0, "Member 'USQWeaponStaticInfo::MinStandDeviation' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, MinProneTransitionDeviation) == 0x0009B4, "Member 'USQWeaponStaticInfo::MinProneTransitionDeviation' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, bSplitRandomization) == 0x0009B8, "Member 'USQWeaponStaticInfo::bSplitRandomization' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, SwayData) == 0x0009BC, "Member 'USQWeaponStaticInfo::SwayData' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, SwayAlignmentData) == 0x000A50, "Member 'USQWeaponStaticInfo::SwayAlignmentData' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, HoldBreathEaseCurve) == 0x000AE8, "Member 'USQWeaponStaticInfo::HoldBreathEaseCurve' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, HoldBreathEaseInPlayRate) == 0x000AF0, "Member 'USQWeaponStaticInfo::HoldBreathEaseInPlayRate' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, HoldBreathEaseOutPlayRate) == 0x000AF4, "Member 'USQWeaponStaticInfo::HoldBreathEaseOutPlayRate' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, SwayInterpSpeed_YZ) == 0x000AF8, "Member 'USQWeaponStaticInfo::SwayInterpSpeed_YZ' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, SwayInterpSpeed_Final) == 0x000AFC, "Member 'USQWeaponStaticInfo::SwayInterpSpeed_Final' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, HasSway) == 0x000B00, "Member 'USQWeaponStaticInfo::HasSway' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, MoveSwayFactorRelease) == 0x000B04, "Member 'USQWeaponStaticInfo::MoveSwayFactorRelease' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, AddMoveSway) == 0x000B08, "Member 'USQWeaponStaticInfo::AddMoveSway' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, MinMoveSwayFactor) == 0x000B0C, "Member 'USQWeaponStaticInfo::MinMoveSwayFactor' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, MaxMoveSwayFactor) == 0x000B10, "Member 'USQWeaponStaticInfo::MaxMoveSwayFactor' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, LowStaminaSwayFactor) == 0x000B14, "Member 'USQWeaponStaticInfo::LowStaminaSwayFactor' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FullStaminaSwayFactor) == 0x000B18, "Member 'USQWeaponStaticInfo::FullStaminaSwayFactor' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, HoldingBreathSwayFactor) == 0x000B1C, "Member 'USQWeaponStaticInfo::HoldingBreathSwayFactor' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ProneAdsSwayMin) == 0x000B20, "Member 'USQWeaponStaticInfo::ProneAdsSwayMin' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ProneSwayMin) == 0x000B24, "Member 'USQWeaponStaticInfo::ProneSwayMin' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, CrouchAdsSwayMin) == 0x000B28, "Member 'USQWeaponStaticInfo::CrouchAdsSwayMin' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, CrouchSwayMin) == 0x000B2C, "Member 'USQWeaponStaticInfo::CrouchSwayMin' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, StandAdsSwayMin) == 0x000B30, "Member 'USQWeaponStaticInfo::StandAdsSwayMin' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, StandSwayMin) == 0x000B34, "Member 'USQWeaponStaticInfo::StandSwayMin' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ProneTransitionSwayMin) == 0x000B38, "Member 'USQWeaponStaticInfo::ProneTransitionSwayMin' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, bHasBipod) == 0x000B3C, "Member 'USQWeaponStaticInfo::bHasBipod' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, BipodLength) == 0x000B40, "Member 'USQWeaponStaticInfo::BipodLength' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, BipodHeightRaw) == 0x000B44, "Member 'USQWeaponStaticInfo::BipodHeightRaw' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, bHasAdjustableSight) == 0x000B48, "Member 'USQWeaponStaticInfo::bHasAdjustableSight' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, StandTime) == 0x000B4C, "Member 'USQWeaponStaticInfo::StandTime' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, CrouchTime) == 0x000B50, "Member 'USQWeaponStaticInfo::CrouchTime' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ProneTime) == 0x000B54, "Member 'USQWeaponStaticInfo::ProneTime' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, BipodTime) == 0x000B58, "Member 'USQWeaponStaticInfo::BipodTime' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, bLeanHeadWhenAds) == 0x000B5C, "Member 'USQWeaponStaticInfo::bLeanHeadWhenAds' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, AdsSightsAnim) == 0x000B60, "Member 'USQWeaponStaticInfo::AdsSightsAnim' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, BaseAds1pMontage) == 0x000B70, "Member 'USQWeaponStaticInfo::BaseAds1pMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, AdsTransition1pMontage) == 0x000B78, "Member 'USQWeaponStaticInfo::AdsTransition1pMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FromAdsTransition1pMontage) == 0x000B80, "Member 'USQWeaponStaticInfo::FromAdsTransition1pMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, AdjustableAdsSightItemAnim) == 0x000B88, "Member 'USQWeaponStaticInfo::AdjustableAdsSightItemAnim' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, AdjustableAdsSightItemFrameRate) == 0x000B90, "Member 'USQWeaponStaticInfo::AdjustableAdsSightItemFrameRate' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, bHasAdsTransition) == 0x000B94, "Member 'USQWeaponStaticInfo::bHasAdsTransition' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, RecoilAnimBlendTime) == 0x000B98, "Member 'USQWeaponStaticInfo::RecoilAnimBlendTime' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, Aim1pWeaponMeshPosition) == 0x000B9C, "Member 'USQWeaponStaticInfo::Aim1pWeaponMeshPosition' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, Aim1pWeaponMeshRescale) == 0x000BA8, "Member 'USQWeaponStaticInfo::Aim1pWeaponMeshRescale' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, DefaultZeroingText) == 0x000BB8, "Member 'USQWeaponStaticInfo::DefaultZeroingText' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, SeparateAdsFov) == 0x000BD0, "Member 'USQWeaponStaticInfo::SeparateAdsFov' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ClearSightsMaxOffset) == 0x000BD4, "Member 'USQWeaponStaticInfo::ClearSightsMaxOffset' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ClearSightsMaxRoll) == 0x000BE0, "Member 'USQWeaponStaticInfo::ClearSightsMaxRoll' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ClearSightsMaxInput) == 0x000BEC, "Member 'USQWeaponStaticInfo::ClearSightsMaxInput' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ClearSightsMinInput) == 0x000BF0, "Member 'USQWeaponStaticInfo::ClearSightsMinInput' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, SwayClearSightsBlendCurve) == 0x000BF8, "Member 'USQWeaponStaticInfo::SwayClearSightsBlendCurve' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ClearSightInterpSpeed) == 0x000C00, "Member 'USQWeaponStaticInfo::ClearSightInterpSpeed' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ClearSightSwayWeight) == 0x000C04, "Member 'USQWeaponStaticInfo::ClearSightSwayWeight' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ADSPunchWeaponAlignmentCurve) == 0x000C08, "Member 'USQWeaponStaticInfo::ADSPunchWeaponAlignmentCurve' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ADSPunchCameraLocationCurve) == 0x000C10, "Member 'USQWeaponStaticInfo::ADSPunchCameraLocationCurve' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ADSPunchCameraRotationCurve) == 0x000C18, "Member 'USQWeaponStaticInfo::ADSPunchCameraRotationCurve' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, DisableSuppressionXAxisCameraLocationPunch) == 0x000C20, "Member 'USQWeaponStaticInfo::DisableSuppressionXAxisCameraLocationPunch' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ADSSuppressionPunchCameraLocationMultiplier) == 0x000C24, "Member 'USQWeaponStaticInfo::ADSSuppressionPunchCameraLocationMultiplier' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ADSSuppressionPunchCameraRotationMultiplier) == 0x000C28, "Member 'USQWeaponStaticInfo::ADSSuppressionPunchCameraRotationMultiplier' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ADSSuppressionPunchWeaponAlignmentMultiplier) == 0x000C2C, "Member 'USQWeaponStaticInfo::ADSSuppressionPunchWeaponAlignmentMultiplier' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, Steady1pHipFireDuration) == 0x000C30, "Member 'USQWeaponStaticInfo::Steady1pHipFireDuration' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FallingWeaponPunchCurve) == 0x000C38, "Member 'USQWeaponStaticInfo::FallingWeaponPunchCurve' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FireCameraShake) == 0x000C40, "Member 'USQWeaponStaticInfo::FireCameraShake' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FreeAimHorizontalThreshold) == 0x000C48, "Member 'USQWeaponStaticInfo::FreeAimHorizontalThreshold' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FreeAimLimitVertical) == 0x000C4C, "Member 'USQWeaponStaticInfo::FreeAimLimitVertical' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FreeAimLimitHorizontal) == 0x000C50, "Member 'USQWeaponStaticInfo::FreeAimLimitHorizontal' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FreeAimNonAdsInterpSpeed) == 0x000C54, "Member 'USQWeaponStaticInfo::FreeAimNonAdsInterpSpeed' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FreeAimAdsInterpSpeed) == 0x000C58, "Member 'USQWeaponStaticInfo::FreeAimAdsInterpSpeed' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, bPlaySoundOnMagEmpty) == 0x000C5C, "Member 'USQWeaponStaticInfo::bPlaySoundOnMagEmpty' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, PlaySoundOnEmptyUse) == 0x000C60, "Member 'USQWeaponStaticInfo::PlaySoundOnEmptyUse' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, PlaySoundOnEmptyAltUse) == 0x000C64, "Member 'USQWeaponStaticInfo::PlaySoundOnEmptyAltUse' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ToggleFiremodeSound1P) == 0x000C68, "Member 'USQWeaponStaticInfo::ToggleFiremodeSound1P' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ToggleFiremodeSound3P) == 0x000C70, "Member 'USQWeaponStaticInfo::ToggleFiremodeSound3P' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FromAdsSound1p) == 0x000C78, "Member 'USQWeaponStaticInfo::FromAdsSound1p' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FromAdsSound3p) == 0x000C80, "Member 'USQWeaponStaticInfo::FromAdsSound3p' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ToAdsSound1p) == 0x000C88, "Member 'USQWeaponStaticInfo::ToAdsSound1p' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ToAdsSound3p) == 0x000C90, "Member 'USQWeaponStaticInfo::ToAdsSound3p' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, SightSwitchingSound1p) == 0x000C98, "Member 'USQWeaponStaticInfo::SightSwitchingSound1p' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, SightSwitchingSound3p) == 0x000CA0, "Member 'USQWeaponStaticInfo::SightSwitchingSound3p' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, MagEmptySound1p) == 0x000CA8, "Member 'USQWeaponStaticInfo::MagEmptySound1p' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, MagEmptySound3p) == 0x000CB0, "Member 'USQWeaponStaticInfo::MagEmptySound3p' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, EmptyUseSound1p) == 0x000CB8, "Member 'USQWeaponStaticInfo::EmptyUseSound1p' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, EmptyUseSound3p) == 0x000CC0, "Member 'USQWeaponStaticInfo::EmptyUseSound3p' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, EmptyAltUseSound1p) == 0x000CC8, "Member 'USQWeaponStaticInfo::EmptyAltUseSound1p' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, EmptyAltUseSound3p) == 0x000CD0, "Member 'USQWeaponStaticInfo::EmptyAltUseSound3p' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ChangeMagnificationSound) == 0x000CD8, "Member 'USQWeaponStaticInfo::ChangeMagnificationSound' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ChangeMagnificationPunchAngle) == 0x000CE0, "Member 'USQWeaponStaticInfo::ChangeMagnificationPunchAngle' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ChangeMagnificationAlignmentPunchCurve) == 0x000CE8, "Member 'USQWeaponStaticInfo::ChangeMagnificationAlignmentPunchCurve' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ChangeMagnificationLocationPunchCurve) == 0x000CF0, "Member 'USQWeaponStaticInfo::ChangeMagnificationLocationPunchCurve' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, BobbingAimEndLoopSectionNames) == 0x000CF8, "Member 'USQWeaponStaticInfo::BobbingAimEndLoopSectionNames' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, AimDirectionSocketName) == 0x000D20, "Member 'USQWeaponStaticInfo::AimDirectionSocketName' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, bShowZeroingInHud) == 0x000D28, "Member 'USQWeaponStaticInfo::bShowZeroingInHud' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, bRequiresManualBolt) == 0x000D29, "Member 'USQWeaponStaticInfo::bRequiresManualBolt' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ManualBoltingCompletionTime) == 0x000D2C, "Member 'USQWeaponStaticInfo::ManualBoltingCompletionTime' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ManualBoltingWeaponMontage) == 0x000D30, "Member 'USQWeaponStaticInfo::ManualBoltingWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ManualBolting1pMontage) == 0x000D38, "Member 'USQWeaponStaticInfo::ManualBolting1pMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ManualBolting3pMontage) == 0x000D40, "Member 'USQWeaponStaticInfo::ManualBolting3pMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ManualBoltingBipodWeaponMontage) == 0x000D48, "Member 'USQWeaponStaticInfo::ManualBoltingBipodWeaponMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ManualBoltingBipod1pMontage) == 0x000D50, "Member 'USQWeaponStaticInfo::ManualBoltingBipod1pMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ManualBoltingBipod3pMontage) == 0x000D58, "Member 'USQWeaponStaticInfo::ManualBoltingBipod3pMontage' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, bPreventFreelookWhileADS) == 0x000D60, "Member 'USQWeaponStaticInfo::bPreventFreelookWhileADS' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, bRequireAdsToShoot) == 0x000D61, "Member 'USQWeaponStaticInfo::bRequireAdsToShoot' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, FireStanceRestriction) == 0x000D62, "Member 'USQWeaponStaticInfo::FireStanceRestriction' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, bAllowVaultAndLowClimbShooting) == 0x000D63, "Member 'USQWeaponStaticInfo::bAllowVaultAndLowClimbShooting' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, MaxSpeedRequiredForUse) == 0x000D64, "Member 'USQWeaponStaticInfo::MaxSpeedRequiredForUse' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, ClampSpeedWhileReloading) == 0x000D80, "Member 'USQWeaponStaticInfo::ClampSpeedWhileReloading' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, bLimitLeanAngle) == 0x000D84, "Member 'USQWeaponStaticInfo::bLimitLeanAngle' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, bCancelReloadOnSprint) == 0x000D85, "Member 'USQWeaponStaticInfo::bCancelReloadOnSprint' has a wrong offset!");
static_assert(offsetof(USQWeaponStaticInfo, bCancelReloadOnJumpVaultClimb) == 0x000D86, "Member 'USQWeaponStaticInfo::bCancelReloadOnJumpVaultClimb' has a wrong offset!");

// Class Squad.SQWheeledVehicle
// 0x0000 (0x0B60 - 0x0B60)
class ASQWheeledVehicle : public ASQWheeledVehicleBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQWheeledVehicle">();
	}
	static class ASQWheeledVehicle* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQWheeledVehicle>();
	}
};
static_assert(alignof(ASQWheeledVehicle) == 0x000010, "Wrong alignment on ASQWheeledVehicle");
static_assert(sizeof(ASQWheeledVehicle) == 0x000B60, "Wrong size on ASQWheeledVehicle");

// Class Squad.SQWheeledVehicleMovementComponent
// 0x0028 (0x0460 - 0x0438)
class USQWheeledVehicleMovementComponent final : public UWheeledVehicleMovementComponent4W
{
public:
	uint8                                         Pad_144A[0x18];                                    // 0x0438(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class USQVehicleMovementCommonSystems*        CommonSystems;                                     // 0x0450(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class USQWaterMovementComponent>  WaterMovementComponentToSpawn;                     // 0x0458(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQWheeledVehicleMovementComponent">();
	}
	static class USQWheeledVehicleMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQWheeledVehicleMovementComponent>();
	}
};
static_assert(alignof(USQWheeledVehicleMovementComponent) == 0x000008, "Wrong alignment on USQWheeledVehicleMovementComponent");
static_assert(sizeof(USQWheeledVehicleMovementComponent) == 0x000460, "Wrong size on USQWheeledVehicleMovementComponent");
static_assert(offsetof(USQWheeledVehicleMovementComponent, CommonSystems) == 0x000450, "Member 'USQWheeledVehicleMovementComponent::CommonSystems' has a wrong offset!");
static_assert(offsetof(USQWheeledVehicleMovementComponent, WaterMovementComponentToSpawn) == 0x000458, "Member 'USQWheeledVehicleMovementComponent::WaterMovementComponentToSpawn' has a wrong offset!");

// Class Squad.SQWidget_RadialEntry
// 0x0028 (0x0288 - 0x0260)
class USQWidget_RadialEntry : public UUserWidget
{
public:
	class UImage*                                 RadialEntry;                                       // 0x0260(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 RadialEntryIcon;                                   // 0x0268(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SectionIndex;                                      // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_144B[0x4];                                     // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               MIDRadialEntry;                                    // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectionSize;                                       // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SectionAngle;                                      // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQWidget_RadialEntry">();
	}
	static class USQWidget_RadialEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQWidget_RadialEntry>();
	}
};
static_assert(alignof(USQWidget_RadialEntry) == 0x000008, "Wrong alignment on USQWidget_RadialEntry");
static_assert(sizeof(USQWidget_RadialEntry) == 0x000288, "Wrong size on USQWidget_RadialEntry");
static_assert(offsetof(USQWidget_RadialEntry, RadialEntry) == 0x000260, "Member 'USQWidget_RadialEntry::RadialEntry' has a wrong offset!");
static_assert(offsetof(USQWidget_RadialEntry, RadialEntryIcon) == 0x000268, "Member 'USQWidget_RadialEntry::RadialEntryIcon' has a wrong offset!");
static_assert(offsetof(USQWidget_RadialEntry, SectionIndex) == 0x000270, "Member 'USQWidget_RadialEntry::SectionIndex' has a wrong offset!");
static_assert(offsetof(USQWidget_RadialEntry, MIDRadialEntry) == 0x000278, "Member 'USQWidget_RadialEntry::MIDRadialEntry' has a wrong offset!");
static_assert(offsetof(USQWidget_RadialEntry, SectionSize) == 0x000280, "Member 'USQWidget_RadialEntry::SectionSize' has a wrong offset!");
static_assert(offsetof(USQWidget_RadialEntry, SectionAngle) == 0x000284, "Member 'USQWidget_RadialEntry::SectionAngle' has a wrong offset!");

// Class Squad.SQWidget_RadialWheel
// 0x0058 (0x02B8 - 0x0260)
class USQWidget_RadialWheel : public UUserWidget
{
public:
	class UImage*                                 RadialMenu;                                        // 0x0260(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                           RadialCanvas;                                      // 0x0268(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class USQWidget_RadialEntry>      StoreCardClass;                                    // 0x0270(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectionCount;                                      // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_144C[0x4];                                     // 0x027C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               MIDRadialMenu;                                     // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectionSize;                                       // 0x0288(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_144D[0x24];                                    // 0x028C(0x0024)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentSectionAngle;                               // 0x02B0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentHoveredIndex;                               // 0x02B4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	float GetCurrentSection(float CurrentAngle);
	void GetSectionBounds(int32 InSectionCount);

	float GetProperRotation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQWidget_RadialWheel">();
	}
	static class USQWidget_RadialWheel* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQWidget_RadialWheel>();
	}
};
static_assert(alignof(USQWidget_RadialWheel) == 0x000008, "Wrong alignment on USQWidget_RadialWheel");
static_assert(sizeof(USQWidget_RadialWheel) == 0x0002B8, "Wrong size on USQWidget_RadialWheel");
static_assert(offsetof(USQWidget_RadialWheel, RadialMenu) == 0x000260, "Member 'USQWidget_RadialWheel::RadialMenu' has a wrong offset!");
static_assert(offsetof(USQWidget_RadialWheel, RadialCanvas) == 0x000268, "Member 'USQWidget_RadialWheel::RadialCanvas' has a wrong offset!");
static_assert(offsetof(USQWidget_RadialWheel, StoreCardClass) == 0x000270, "Member 'USQWidget_RadialWheel::StoreCardClass' has a wrong offset!");
static_assert(offsetof(USQWidget_RadialWheel, SectionCount) == 0x000278, "Member 'USQWidget_RadialWheel::SectionCount' has a wrong offset!");
static_assert(offsetof(USQWidget_RadialWheel, MIDRadialMenu) == 0x000280, "Member 'USQWidget_RadialWheel::MIDRadialMenu' has a wrong offset!");
static_assert(offsetof(USQWidget_RadialWheel, SectionSize) == 0x000288, "Member 'USQWidget_RadialWheel::SectionSize' has a wrong offset!");
static_assert(offsetof(USQWidget_RadialWheel, CurrentSectionAngle) == 0x0002B0, "Member 'USQWidget_RadialWheel::CurrentSectionAngle' has a wrong offset!");
static_assert(offsetof(USQWidget_RadialWheel, CurrentHoveredIndex) == 0x0002B4, "Member 'USQWidget_RadialWheel::CurrentHoveredIndex' has a wrong offset!");

// Class Squad.SQWorldSettings
// 0x05F8 (0x09A0 - 0x03A8)
class ASQWorldSettings final : public AWorldSettings
{
public:
	struct FVector2D                              MapGridSpacing;                                    // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 MapTextureCornerZero;                              // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 MapTextureCornerOne;                               // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSQMinimapMakerSettings                MinimapMakerSettings;                              // 0x03C0(0x0580)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class AActor*                                 MapCameraLocation;                                 // 0x0940(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class ASQGameRuleSet>>     MapRulesets;                                       // 0x0948(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class FText                                   DisplayTitle;                                      // 0x0958(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMapTextureChange;                                // 0x0970(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTimeDilationChange;                              // 0x0980(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         SeaLevel;                                          // 0x0990(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HelicoptersAltitudeThreshold;                      // 0x0994(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               MapTexture;                                        // 0x0998(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetMapTexture(class UTexture* Value);

	bool CanSwitchTo3rdPerson() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQWorldSettings">();
	}
	static class ASQWorldSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASQWorldSettings>();
	}
};
static_assert(alignof(ASQWorldSettings) == 0x000010, "Wrong alignment on ASQWorldSettings");
static_assert(sizeof(ASQWorldSettings) == 0x0009A0, "Wrong size on ASQWorldSettings");
static_assert(offsetof(ASQWorldSettings, MapGridSpacing) == 0x0003A8, "Member 'ASQWorldSettings::MapGridSpacing' has a wrong offset!");
static_assert(offsetof(ASQWorldSettings, MapTextureCornerZero) == 0x0003B0, "Member 'ASQWorldSettings::MapTextureCornerZero' has a wrong offset!");
static_assert(offsetof(ASQWorldSettings, MapTextureCornerOne) == 0x0003B8, "Member 'ASQWorldSettings::MapTextureCornerOne' has a wrong offset!");
static_assert(offsetof(ASQWorldSettings, MinimapMakerSettings) == 0x0003C0, "Member 'ASQWorldSettings::MinimapMakerSettings' has a wrong offset!");
static_assert(offsetof(ASQWorldSettings, MapCameraLocation) == 0x000940, "Member 'ASQWorldSettings::MapCameraLocation' has a wrong offset!");
static_assert(offsetof(ASQWorldSettings, MapRulesets) == 0x000948, "Member 'ASQWorldSettings::MapRulesets' has a wrong offset!");
static_assert(offsetof(ASQWorldSettings, DisplayTitle) == 0x000958, "Member 'ASQWorldSettings::DisplayTitle' has a wrong offset!");
static_assert(offsetof(ASQWorldSettings, OnMapTextureChange) == 0x000970, "Member 'ASQWorldSettings::OnMapTextureChange' has a wrong offset!");
static_assert(offsetof(ASQWorldSettings, OnTimeDilationChange) == 0x000980, "Member 'ASQWorldSettings::OnTimeDilationChange' has a wrong offset!");
static_assert(offsetof(ASQWorldSettings, SeaLevel) == 0x000990, "Member 'ASQWorldSettings::SeaLevel' has a wrong offset!");
static_assert(offsetof(ASQWorldSettings, HelicoptersAltitudeThreshold) == 0x000994, "Member 'ASQWorldSettings::HelicoptersAltitudeThreshold' has a wrong offset!");
static_assert(offsetof(ASQWorldSettings, MapTexture) == 0x000998, "Member 'ASQWorldSettings::MapTexture' has a wrong offset!");

// Class Squad.SQVehicleWreckTurret
// 0x0020 (0x0500 - 0x04E0)
class USQVehicleWreckTurret : public UStaticMeshComponent
{
public:
	int32                                         ClearTime;                                         // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReplicatedTurretRotation;                          // 0x04E4(0x000C)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FRotator                               ReplicatedBarrelRotation;                          // 0x04F0(0x000C)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_144E[0x4];                                     // 0x04FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleWreckTurret">();
	}
	static class USQVehicleWreckTurret* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleWreckTurret>();
	}
};
static_assert(alignof(USQVehicleWreckTurret) == 0x000010, "Wrong alignment on USQVehicleWreckTurret");
static_assert(sizeof(USQVehicleWreckTurret) == 0x000500, "Wrong size on USQVehicleWreckTurret");
static_assert(offsetof(USQVehicleWreckTurret, ClearTime) == 0x0004E0, "Member 'USQVehicleWreckTurret::ClearTime' has a wrong offset!");
static_assert(offsetof(USQVehicleWreckTurret, ReplicatedTurretRotation) == 0x0004E4, "Member 'USQVehicleWreckTurret::ReplicatedTurretRotation' has a wrong offset!");
static_assert(offsetof(USQVehicleWreckTurret, ReplicatedBarrelRotation) == 0x0004F0, "Member 'USQVehicleWreckTurret::ReplicatedBarrelRotation' has a wrong offset!");

// Class Squad.SQVehicleWreckTurretAmmocook
// 0x0040 (0x0540 - 0x0500)
class USQVehicleWreckTurretAmmocook final : public USQVehicleWreckTurret
{
public:
	float                                         BlastForce;                                        // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConeAngle;                                         // 0x0504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              BlastXOffset;                                      // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              BlastYOffset;                                      // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BlastDirection;                                    // 0x0518(0x000C)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                Offset;                                            // 0x0524(0x000C)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTimerHandle                           ClearTimerHandle;                                  // 0x0530(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_144F[0x8];                                     // 0x0538(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BlastTurret();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SQVehicleWreckTurretAmmocook">();
	}
	static class USQVehicleWreckTurretAmmocook* GetDefaultObj()
	{
		return GetDefaultObjImpl<USQVehicleWreckTurretAmmocook>();
	}
};
static_assert(alignof(USQVehicleWreckTurretAmmocook) == 0x000010, "Wrong alignment on USQVehicleWreckTurretAmmocook");
static_assert(sizeof(USQVehicleWreckTurretAmmocook) == 0x000540, "Wrong size on USQVehicleWreckTurretAmmocook");
static_assert(offsetof(USQVehicleWreckTurretAmmocook, BlastForce) == 0x000500, "Member 'USQVehicleWreckTurretAmmocook::BlastForce' has a wrong offset!");
static_assert(offsetof(USQVehicleWreckTurretAmmocook, ConeAngle) == 0x000504, "Member 'USQVehicleWreckTurretAmmocook::ConeAngle' has a wrong offset!");
static_assert(offsetof(USQVehicleWreckTurretAmmocook, BlastXOffset) == 0x000508, "Member 'USQVehicleWreckTurretAmmocook::BlastXOffset' has a wrong offset!");
static_assert(offsetof(USQVehicleWreckTurretAmmocook, BlastYOffset) == 0x000510, "Member 'USQVehicleWreckTurretAmmocook::BlastYOffset' has a wrong offset!");
static_assert(offsetof(USQVehicleWreckTurretAmmocook, BlastDirection) == 0x000518, "Member 'USQVehicleWreckTurretAmmocook::BlastDirection' has a wrong offset!");
static_assert(offsetof(USQVehicleWreckTurretAmmocook, Offset) == 0x000524, "Member 'USQVehicleWreckTurretAmmocook::Offset' has a wrong offset!");
static_assert(offsetof(USQVehicleWreckTurretAmmocook, ClearTimerHandle) == 0x000530, "Member 'USQVehicleWreckTurretAmmocook::ClearTimerHandle' has a wrong offset!");

}

