#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SquadRallyPoint

#include "Basic.hpp"

#include "Squad_structs.hpp"
#include "Squad_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SquadRallyPoint.BP_SquadRallyPoint_C
// 0x0058 (0x0490 - 0x0438)
class ABP_SquadRallyPoint_C final : public ASQSquadRallyPoint
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0438(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          InteractBox;                                       // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Rally_Static_Sound;                                // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FSQUsableData                          Data;                                              // 0x0450(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_SquadRallyPoint(int32 EntryPoint);
	void Pickup_Item(class APlayerController* Player);
	void BPOnUsed(class AController* User);
	void BPHidePrompt();
	void BPDisplayPrompt(class AController* User);
	void ServerStopUsed(class AController* User);
	void ServerOnUsed(class AController* User);
	void BPStopUsed(class AController* User);
	void Player_Left_Radius(class APlayerController* Player);
	void Player_Enter_Radius(class APlayerController* Player, bool Can_Pickup);
	struct FSQUsableData GetUsableData();
	int32 GetInterfaceTeam();
	bool ShouldDisplayPrompt(class AController* User);
	bool UnbindEventToAmmoUpdated(const TDelegate<void()>& Delegate);
	class FString GetRearmSuccessString();
	class FString GetRearmNoAmmoString();
	bool ConsumeAmmo(float AmmoRequired);
	bool BindEventToAmmoUpdated(const TDelegate<void()>& Delegate);

	ESQRearmType GetRearmType() const;
	float GetAmmo() const;
	bool CanRearmWeapon(const class ASQEquipableItem* Weapon) const;
	bool CanRearmPawn(const class APawn* Rearmer) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SquadRallyPoint_C">();
	}
	static class ABP_SquadRallyPoint_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SquadRallyPoint_C>();
	}
};
static_assert(alignof(ABP_SquadRallyPoint_C) == 0x000008, "Wrong alignment on ABP_SquadRallyPoint_C");
static_assert(sizeof(ABP_SquadRallyPoint_C) == 0x000490, "Wrong size on ABP_SquadRallyPoint_C");
static_assert(offsetof(ABP_SquadRallyPoint_C, UberGraphFrame) == 0x000438, "Member 'ABP_SquadRallyPoint_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SquadRallyPoint_C, InteractBox) == 0x000440, "Member 'ABP_SquadRallyPoint_C::InteractBox' has a wrong offset!");
static_assert(offsetof(ABP_SquadRallyPoint_C, Rally_Static_Sound) == 0x000448, "Member 'ABP_SquadRallyPoint_C::Rally_Static_Sound' has a wrong offset!");
static_assert(offsetof(ABP_SquadRallyPoint_C, Data) == 0x000450, "Member 'ABP_SquadRallyPoint_C::Data' has a wrong offset!");

}

