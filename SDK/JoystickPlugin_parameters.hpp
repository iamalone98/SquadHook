#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: JoystickPlugin

#include "Basic.hpp"

#include "JoystickPlugin_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function JoystickPlugin.JoystickFunctions.GetJoystick
// 0x0060 (0x0060 - 0x0000)
struct JoystickFunctions_GetJoystick final
{
public:
	int32                                         DeviceID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE7[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJoystickInfo                          ReturnValue;                                       // 0x0008(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JoystickFunctions_GetJoystick) == 0x000008, "Wrong alignment on JoystickFunctions_GetJoystick");
static_assert(sizeof(JoystickFunctions_GetJoystick) == 0x000060, "Wrong size on JoystickFunctions_GetJoystick");
static_assert(offsetof(JoystickFunctions_GetJoystick, DeviceID) == 0x000000, "Member 'JoystickFunctions_GetJoystick::DeviceID' has a wrong offset!");
static_assert(offsetof(JoystickFunctions_GetJoystick, ReturnValue) == 0x000008, "Member 'JoystickFunctions_GetJoystick::ReturnValue' has a wrong offset!");

// Function JoystickPlugin.JoystickFunctions.GetJoystickState
// 0x0050 (0x0050 - 0x0000)
struct JoystickFunctions_GetJoystickState final
{
public:
	int32                                         DeviceID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE8[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJoystickState                         ReturnValue;                                       // 0x0008(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JoystickFunctions_GetJoystickState) == 0x000008, "Wrong alignment on JoystickFunctions_GetJoystickState");
static_assert(sizeof(JoystickFunctions_GetJoystickState) == 0x000050, "Wrong size on JoystickFunctions_GetJoystickState");
static_assert(offsetof(JoystickFunctions_GetJoystickState, DeviceID) == 0x000000, "Member 'JoystickFunctions_GetJoystickState::DeviceID' has a wrong offset!");
static_assert(offsetof(JoystickFunctions_GetJoystickState, ReturnValue) == 0x000008, "Member 'JoystickFunctions_GetJoystickState::ReturnValue' has a wrong offset!");

// Function JoystickPlugin.JoystickFunctions.GetPreviousJoystickState
// 0x0050 (0x0050 - 0x0000)
struct JoystickFunctions_GetPreviousJoystickState final
{
public:
	int32                                         DeviceID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DE9[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJoystickState                         ReturnValue;                                       // 0x0008(0x0048)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JoystickFunctions_GetPreviousJoystickState) == 0x000008, "Wrong alignment on JoystickFunctions_GetPreviousJoystickState");
static_assert(sizeof(JoystickFunctions_GetPreviousJoystickState) == 0x000050, "Wrong size on JoystickFunctions_GetPreviousJoystickState");
static_assert(offsetof(JoystickFunctions_GetPreviousJoystickState, DeviceID) == 0x000000, "Member 'JoystickFunctions_GetPreviousJoystickState::DeviceID' has a wrong offset!");
static_assert(offsetof(JoystickFunctions_GetPreviousJoystickState, ReturnValue) == 0x000008, "Member 'JoystickFunctions_GetPreviousJoystickState::ReturnValue' has a wrong offset!");

// Function JoystickPlugin.JoystickFunctions.IgnoreGameControllers
// 0x0001 (0x0001 - 0x0000)
struct JoystickFunctions_IgnoreGameControllers final
{
public:
	bool                                          bIgnore;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JoystickFunctions_IgnoreGameControllers) == 0x000001, "Wrong alignment on JoystickFunctions_IgnoreGameControllers");
static_assert(sizeof(JoystickFunctions_IgnoreGameControllers) == 0x000001, "Wrong size on JoystickFunctions_IgnoreGameControllers");
static_assert(offsetof(JoystickFunctions_IgnoreGameControllers, bIgnore) == 0x000000, "Member 'JoystickFunctions_IgnoreGameControllers::bIgnore' has a wrong offset!");

// Function JoystickPlugin.JoystickFunctions.JoystickCount
// 0x0004 (0x0004 - 0x0000)
struct JoystickFunctions_JoystickCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JoystickFunctions_JoystickCount) == 0x000004, "Wrong alignment on JoystickFunctions_JoystickCount");
static_assert(sizeof(JoystickFunctions_JoystickCount) == 0x000004, "Wrong size on JoystickFunctions_JoystickCount");
static_assert(offsetof(JoystickFunctions_JoystickCount, ReturnValue) == 0x000000, "Member 'JoystickFunctions_JoystickCount::ReturnValue' has a wrong offset!");

// Function JoystickPlugin.JoystickFunctions.MapJoystickDeviceToPlayer
// 0x0008 (0x0008 - 0x0000)
struct JoystickFunctions_MapJoystickDeviceToPlayer final
{
public:
	int32                                         DeviceID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Player;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JoystickFunctions_MapJoystickDeviceToPlayer) == 0x000004, "Wrong alignment on JoystickFunctions_MapJoystickDeviceToPlayer");
static_assert(sizeof(JoystickFunctions_MapJoystickDeviceToPlayer) == 0x000008, "Wrong size on JoystickFunctions_MapJoystickDeviceToPlayer");
static_assert(offsetof(JoystickFunctions_MapJoystickDeviceToPlayer, DeviceID) == 0x000000, "Member 'JoystickFunctions_MapJoystickDeviceToPlayer::DeviceID' has a wrong offset!");
static_assert(offsetof(JoystickFunctions_MapJoystickDeviceToPlayer, Player) == 0x000004, "Member 'JoystickFunctions_MapJoystickDeviceToPlayer::Player' has a wrong offset!");

// Function JoystickPlugin.JoystickFunctions.POVAxis
// 0x000C (0x000C - 0x0000)
struct JoystickFunctions_POVAxis final
{
public:
	EJoystickPOVDirection                         Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DEA[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JoystickFunctions_POVAxis) == 0x000004, "Wrong alignment on JoystickFunctions_POVAxis");
static_assert(sizeof(JoystickFunctions_POVAxis) == 0x00000C, "Wrong size on JoystickFunctions_POVAxis");
static_assert(offsetof(JoystickFunctions_POVAxis, Direction) == 0x000000, "Member 'JoystickFunctions_POVAxis::Direction' has a wrong offset!");
static_assert(offsetof(JoystickFunctions_POVAxis, ReturnValue) == 0x000004, "Member 'JoystickFunctions_POVAxis::ReturnValue' has a wrong offset!");

// Function JoystickPlugin.JoystickFunctions.RegisterForJoystickEvents
// 0x0008 (0x0008 - 0x0000)
struct JoystickFunctions_RegisterForJoystickEvents final
{
public:
	class UObject*                                Listener;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JoystickFunctions_RegisterForJoystickEvents) == 0x000008, "Wrong alignment on JoystickFunctions_RegisterForJoystickEvents");
static_assert(sizeof(JoystickFunctions_RegisterForJoystickEvents) == 0x000008, "Wrong size on JoystickFunctions_RegisterForJoystickEvents");
static_assert(offsetof(JoystickFunctions_RegisterForJoystickEvents, Listener) == 0x000000, "Member 'JoystickFunctions_RegisterForJoystickEvents::Listener' has a wrong offset!");

// Function JoystickPlugin.JoystickInterface.JoystickAxisChanged
// 0x00A0 (0x00A0 - 0x0000)
struct JoystickInterface_JoystickAxisChanged final
{
public:
	int32                                         Axis;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValuePrev;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DEB[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJoystickState                         State;                                             // 0x0010(0x0048)(Parm, NativeAccessSpecifierPublic)
	struct FJoystickState                         Prev;                                              // 0x0058(0x0048)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JoystickInterface_JoystickAxisChanged) == 0x000008, "Wrong alignment on JoystickInterface_JoystickAxisChanged");
static_assert(sizeof(JoystickInterface_JoystickAxisChanged) == 0x0000A0, "Wrong size on JoystickInterface_JoystickAxisChanged");
static_assert(offsetof(JoystickInterface_JoystickAxisChanged, Axis) == 0x000000, "Member 'JoystickInterface_JoystickAxisChanged::Axis' has a wrong offset!");
static_assert(offsetof(JoystickInterface_JoystickAxisChanged, Value) == 0x000004, "Member 'JoystickInterface_JoystickAxisChanged::Value' has a wrong offset!");
static_assert(offsetof(JoystickInterface_JoystickAxisChanged, ValuePrev) == 0x000008, "Member 'JoystickInterface_JoystickAxisChanged::ValuePrev' has a wrong offset!");
static_assert(offsetof(JoystickInterface_JoystickAxisChanged, State) == 0x000010, "Member 'JoystickInterface_JoystickAxisChanged::State' has a wrong offset!");
static_assert(offsetof(JoystickInterface_JoystickAxisChanged, Prev) == 0x000058, "Member 'JoystickInterface_JoystickAxisChanged::Prev' has a wrong offset!");

// Function JoystickPlugin.JoystickInterface.JoystickBallMoved
// 0x0058 (0x0058 - 0x0000)
struct JoystickInterface_JoystickBallMoved final
{
public:
	int32                                         Ball;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Delta;                                             // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DEC[0x4];                                     // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJoystickState                         State;                                             // 0x0010(0x0048)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JoystickInterface_JoystickBallMoved) == 0x000008, "Wrong alignment on JoystickInterface_JoystickBallMoved");
static_assert(sizeof(JoystickInterface_JoystickBallMoved) == 0x000058, "Wrong size on JoystickInterface_JoystickBallMoved");
static_assert(offsetof(JoystickInterface_JoystickBallMoved, Ball) == 0x000000, "Member 'JoystickInterface_JoystickBallMoved::Ball' has a wrong offset!");
static_assert(offsetof(JoystickInterface_JoystickBallMoved, Delta) == 0x000004, "Member 'JoystickInterface_JoystickBallMoved::Delta' has a wrong offset!");
static_assert(offsetof(JoystickInterface_JoystickBallMoved, State) == 0x000010, "Member 'JoystickInterface_JoystickBallMoved::State' has a wrong offset!");

// Function JoystickPlugin.JoystickInterface.JoystickButtonPressed
// 0x0050 (0x0050 - 0x0000)
struct JoystickInterface_JoystickButtonPressed final
{
public:
	int32                                         Button;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DED[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJoystickState                         State;                                             // 0x0008(0x0048)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JoystickInterface_JoystickButtonPressed) == 0x000008, "Wrong alignment on JoystickInterface_JoystickButtonPressed");
static_assert(sizeof(JoystickInterface_JoystickButtonPressed) == 0x000050, "Wrong size on JoystickInterface_JoystickButtonPressed");
static_assert(offsetof(JoystickInterface_JoystickButtonPressed, Button) == 0x000000, "Member 'JoystickInterface_JoystickButtonPressed::Button' has a wrong offset!");
static_assert(offsetof(JoystickInterface_JoystickButtonPressed, State) == 0x000008, "Member 'JoystickInterface_JoystickButtonPressed::State' has a wrong offset!");

// Function JoystickPlugin.JoystickInterface.JoystickButtonReleased
// 0x0050 (0x0050 - 0x0000)
struct JoystickInterface_JoystickButtonReleased final
{
public:
	int32                                         Button;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DEE[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJoystickState                         State;                                             // 0x0008(0x0048)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JoystickInterface_JoystickButtonReleased) == 0x000008, "Wrong alignment on JoystickInterface_JoystickButtonReleased");
static_assert(sizeof(JoystickInterface_JoystickButtonReleased) == 0x000050, "Wrong size on JoystickInterface_JoystickButtonReleased");
static_assert(offsetof(JoystickInterface_JoystickButtonReleased, Button) == 0x000000, "Member 'JoystickInterface_JoystickButtonReleased::Button' has a wrong offset!");
static_assert(offsetof(JoystickInterface_JoystickButtonReleased, State) == 0x000008, "Member 'JoystickInterface_JoystickButtonReleased::State' has a wrong offset!");

// Function JoystickPlugin.JoystickInterface.JoystickHatChanged
// 0x0050 (0x0050 - 0x0000)
struct JoystickInterface_JoystickHatChanged final
{
public:
	int32                                         Hat;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EJoystickPOVDirection                         Value;                                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DEF[0x3];                                     // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJoystickState                         State;                                             // 0x0008(0x0048)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(JoystickInterface_JoystickHatChanged) == 0x000008, "Wrong alignment on JoystickInterface_JoystickHatChanged");
static_assert(sizeof(JoystickInterface_JoystickHatChanged) == 0x000050, "Wrong size on JoystickInterface_JoystickHatChanged");
static_assert(offsetof(JoystickInterface_JoystickHatChanged, Hat) == 0x000000, "Member 'JoystickInterface_JoystickHatChanged::Hat' has a wrong offset!");
static_assert(offsetof(JoystickInterface_JoystickHatChanged, Value) == 0x000004, "Member 'JoystickInterface_JoystickHatChanged::Value' has a wrong offset!");
static_assert(offsetof(JoystickInterface_JoystickHatChanged, State) == 0x000008, "Member 'JoystickInterface_JoystickHatChanged::State' has a wrong offset!");

// Function JoystickPlugin.JoystickInterface.JoystickPluggedIn
// 0x0004 (0x0004 - 0x0000)
struct JoystickInterface_JoystickPluggedIn final
{
public:
	int32                                         DeviceID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JoystickInterface_JoystickPluggedIn) == 0x000004, "Wrong alignment on JoystickInterface_JoystickPluggedIn");
static_assert(sizeof(JoystickInterface_JoystickPluggedIn) == 0x000004, "Wrong size on JoystickInterface_JoystickPluggedIn");
static_assert(offsetof(JoystickInterface_JoystickPluggedIn, DeviceID) == 0x000000, "Member 'JoystickInterface_JoystickPluggedIn::DeviceID' has a wrong offset!");

// Function JoystickPlugin.JoystickInterface.JoystickUnplugged
// 0x0004 (0x0004 - 0x0000)
struct JoystickInterface_JoystickUnplugged final
{
public:
	int32                                         DeviceID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(JoystickInterface_JoystickUnplugged) == 0x000004, "Wrong alignment on JoystickInterface_JoystickUnplugged");
static_assert(sizeof(JoystickInterface_JoystickUnplugged) == 0x000004, "Wrong size on JoystickInterface_JoystickUnplugged");
static_assert(offsetof(JoystickInterface_JoystickUnplugged, DeviceID) == 0x000000, "Member 'JoystickInterface_JoystickUnplugged::DeviceID' has a wrong offset!");

}

