#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Deployable_GenericExplosives

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Squad_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Deployable_GenericExplosives.BP_Deployable_GenericExplosives_C
// 0x00B0 (0x0500 - 0x0450)
class ABP_Deployable_GenericExplosives_C : public ASQDeployableItem
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0450(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USQMapIconComponent*                    SQMapIcon;                                         // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       ShovelSphere;                                      // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 IED;                                               // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Ied_halfbuilt;                                     // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Ied_unbuilt;                                       // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 DamageType;                                        // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 LastingEffect;                                     // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BaseDamage;                                        // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MinimumDamage;                                     // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         KillZoneRadius;                                    // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageInnerRadius;                                 // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageOuterRadius;                                 // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DamageFalloff;                                     // 0x04A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DetonateTimer;                                     // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CF0[0x4];                                     // 0x04AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 SecondaryExplosionDamageType;                      // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SecondaryExplosionBaseDmg;                         // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SecondaryExplosionMinDamage;                       // 0x04BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SecondaryExplosionKillZone;                        // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SecondaryExplosionInnerRadius;                     // 0x04C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SecondaryExplosionOuterRadius;                     // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SecondaryExplosionDamageFalloff;                   // 0x04CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PrimaryOnlyDamageMeshes;                           // 0x04D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          SecondaryOnlyDamageMeshes;                         // 0x04D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CF1[0x6];                                     // 0x04D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              DetonationServerTime;                              // 0x04D8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           DetonationTimer;                                   // 0x04E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 SuppressionInfoClass;                              // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHasExploded;                                      // 0x04F0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4CF2[0x7];                                     // 0x04F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              DetonationDateTime;                                // 0x04F8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_Deployable_GenericExplosives(int32 EntryPoint);
	void PlayExplosionEffects();
	void Detonate();
	void ReceiveBeginPlay();
	void RemovedFromPlayersPlacedList();
	void OnDestroyEvent();
	void SetupDetonation(float Detonation_Delay);
	void ApplyDamage();
	void OnRep_DetonationServerTime();
	bool ShouldDisplayPrompt(class AController* User);
	void ApplyExplosiveSuppression();
	void MakeDetonationTimeFromDelay(float InDelay, struct FDateTime* OutDateTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Deployable_GenericExplosives_C">();
	}
	static class ABP_Deployable_GenericExplosives_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Deployable_GenericExplosives_C>();
	}
};
static_assert(alignof(ABP_Deployable_GenericExplosives_C) == 0x000008, "Wrong alignment on ABP_Deployable_GenericExplosives_C");
static_assert(sizeof(ABP_Deployable_GenericExplosives_C) == 0x000500, "Wrong size on ABP_Deployable_GenericExplosives_C");
static_assert(offsetof(ABP_Deployable_GenericExplosives_C, UberGraphFrame) == 0x000450, "Member 'ABP_Deployable_GenericExplosives_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericExplosives_C, SQMapIcon) == 0x000458, "Member 'ABP_Deployable_GenericExplosives_C::SQMapIcon' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericExplosives_C, ShovelSphere) == 0x000460, "Member 'ABP_Deployable_GenericExplosives_C::ShovelSphere' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericExplosives_C, IED) == 0x000468, "Member 'ABP_Deployable_GenericExplosives_C::IED' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericExplosives_C, Ied_halfbuilt) == 0x000470, "Member 'ABP_Deployable_GenericExplosives_C::Ied_halfbuilt' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericExplosives_C, Ied_unbuilt) == 0x000478, "Member 'ABP_Deployable_GenericExplosives_C::Ied_unbuilt' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericExplosives_C, DamageType) == 0x000480, "Member 'ABP_Deployable_GenericExplosives_C::DamageType' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericExplosives_C, LastingEffect) == 0x000488, "Member 'ABP_Deployable_GenericExplosives_C::LastingEffect' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericExplosives_C, BaseDamage) == 0x000490, "Member 'ABP_Deployable_GenericExplosives_C::BaseDamage' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericExplosives_C, MinimumDamage) == 0x000494, "Member 'ABP_Deployable_GenericExplosives_C::MinimumDamage' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericExplosives_C, KillZoneRadius) == 0x000498, "Member 'ABP_Deployable_GenericExplosives_C::KillZoneRadius' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericExplosives_C, DamageInnerRadius) == 0x00049C, "Member 'ABP_Deployable_GenericExplosives_C::DamageInnerRadius' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericExplosives_C, DamageOuterRadius) == 0x0004A0, "Member 'ABP_Deployable_GenericExplosives_C::DamageOuterRadius' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericExplosives_C, DamageFalloff) == 0x0004A4, "Member 'ABP_Deployable_GenericExplosives_C::DamageFalloff' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericExplosives_C, DetonateTimer) == 0x0004A8, "Member 'ABP_Deployable_GenericExplosives_C::DetonateTimer' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericExplosives_C, SecondaryExplosionDamageType) == 0x0004B0, "Member 'ABP_Deployable_GenericExplosives_C::SecondaryExplosionDamageType' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericExplosives_C, SecondaryExplosionBaseDmg) == 0x0004B8, "Member 'ABP_Deployable_GenericExplosives_C::SecondaryExplosionBaseDmg' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericExplosives_C, SecondaryExplosionMinDamage) == 0x0004BC, "Member 'ABP_Deployable_GenericExplosives_C::SecondaryExplosionMinDamage' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericExplosives_C, SecondaryExplosionKillZone) == 0x0004C0, "Member 'ABP_Deployable_GenericExplosives_C::SecondaryExplosionKillZone' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericExplosives_C, SecondaryExplosionInnerRadius) == 0x0004C4, "Member 'ABP_Deployable_GenericExplosives_C::SecondaryExplosionInnerRadius' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericExplosives_C, SecondaryExplosionOuterRadius) == 0x0004C8, "Member 'ABP_Deployable_GenericExplosives_C::SecondaryExplosionOuterRadius' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericExplosives_C, SecondaryExplosionDamageFalloff) == 0x0004CC, "Member 'ABP_Deployable_GenericExplosives_C::SecondaryExplosionDamageFalloff' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericExplosives_C, PrimaryOnlyDamageMeshes) == 0x0004D0, "Member 'ABP_Deployable_GenericExplosives_C::PrimaryOnlyDamageMeshes' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericExplosives_C, SecondaryOnlyDamageMeshes) == 0x0004D1, "Member 'ABP_Deployable_GenericExplosives_C::SecondaryOnlyDamageMeshes' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericExplosives_C, DetonationServerTime) == 0x0004D8, "Member 'ABP_Deployable_GenericExplosives_C::DetonationServerTime' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericExplosives_C, DetonationTimer) == 0x0004E0, "Member 'ABP_Deployable_GenericExplosives_C::DetonationTimer' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericExplosives_C, SuppressionInfoClass) == 0x0004E8, "Member 'ABP_Deployable_GenericExplosives_C::SuppressionInfoClass' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericExplosives_C, bHasExploded) == 0x0004F0, "Member 'ABP_Deployable_GenericExplosives_C::bHasExploded' has a wrong offset!");
static_assert(offsetof(ABP_Deployable_GenericExplosives_C, DetonationDateTime) == 0x0004F8, "Member 'ABP_Deployable_GenericExplosives_C::DetonationDateTime' has a wrong offset!");

}

