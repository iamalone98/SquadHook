#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PrefabAsset

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "PrefabAsset_structs.hpp"


namespace SDK
{

// Class PrefabAsset.PrefabExporter
// 0x0000 (0x0078 - 0x0078)
class UPrefabExporter : public UExporter
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrefabExporter">();
	}
	static class UPrefabExporter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrefabExporter>();
	}
};
static_assert(alignof(UPrefabExporter) == 0x000008, "Wrong alignment on UPrefabExporter");
static_assert(sizeof(UPrefabExporter) == 0x000078, "Wrong size on UPrefabExporter");

// Class PrefabAsset.PrefabObjectExporterT3D
// 0x0000 (0x0078 - 0x0078)
class UPrefabObjectExporterT3D final : public UPrefabExporter
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrefabObjectExporterT3D">();
	}
	static class UPrefabObjectExporterT3D* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrefabObjectExporterT3D>();
	}
};
static_assert(alignof(UPrefabObjectExporterT3D) == 0x000008, "Wrong alignment on UPrefabObjectExporterT3D");
static_assert(sizeof(UPrefabObjectExporterT3D) == 0x000078, "Wrong size on UPrefabObjectExporterT3D");

// Class PrefabAsset.PrefabActor
// 0x0008 (0x0230 - 0x0228)
class APrefabActor final : public AActor
{
public:
	class UPrefabComponent*                       PrefabComponent;                                   // 0x0228(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void DestroyPrefabActor(bool bDestroyAttachedChildren);
	void SetMobility(EComponentMobility InMobility);
	void SetPrefab(class UPrefabAsset* NewPrefab, bool bForceRevertEvenDisconnected);

	class UPrefabAsset* GetPrefab() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrefabActor">();
	}
	static class APrefabActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<APrefabActor>();
	}
};
static_assert(alignof(APrefabActor) == 0x000008, "Wrong alignment on APrefabActor");
static_assert(sizeof(APrefabActor) == 0x000230, "Wrong size on APrefabActor");
static_assert(offsetof(APrefabActor, PrefabComponent) == 0x000228, "Member 'APrefabActor::PrefabComponent' has a wrong offset!");

// Class PrefabAsset.PrefabAsset
// 0x00A8 (0x00D0 - 0x0028)
class UPrefabAsset : public UObject
{
public:
	TMap<class FString, struct FSoftObjectPath>   AssetReferences;                                   // 0x0028(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        GeneratedBlueprintAssetReference;                  // 0x0078(0x0018)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  PrefabId;                                          // 0x0090(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 PrefabContent;                                     // 0x00A0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 PrefabHash;                                        // 0x00B0(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NumActors;                                         // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                PrefabPivot;                                       // 0x00C4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrefabAsset">();
	}
	static class UPrefabAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrefabAsset>();
	}
};
static_assert(alignof(UPrefabAsset) == 0x000008, "Wrong alignment on UPrefabAsset");
static_assert(sizeof(UPrefabAsset) == 0x0000D0, "Wrong size on UPrefabAsset");
static_assert(offsetof(UPrefabAsset, AssetReferences) == 0x000028, "Member 'UPrefabAsset::AssetReferences' has a wrong offset!");
static_assert(offsetof(UPrefabAsset, GeneratedBlueprintAssetReference) == 0x000078, "Member 'UPrefabAsset::GeneratedBlueprintAssetReference' has a wrong offset!");
static_assert(offsetof(UPrefabAsset, PrefabId) == 0x000090, "Member 'UPrefabAsset::PrefabId' has a wrong offset!");
static_assert(offsetof(UPrefabAsset, PrefabContent) == 0x0000A0, "Member 'UPrefabAsset::PrefabContent' has a wrong offset!");
static_assert(offsetof(UPrefabAsset, PrefabHash) == 0x0000B0, "Member 'UPrefabAsset::PrefabHash' has a wrong offset!");
static_assert(offsetof(UPrefabAsset, NumActors) == 0x0000C0, "Member 'UPrefabAsset::NumActors' has a wrong offset!");
static_assert(offsetof(UPrefabAsset, PrefabPivot) == 0x0000C4, "Member 'UPrefabAsset::PrefabPivot' has a wrong offset!");

// Class PrefabAsset.PrefabVariantAsset
// 0x0008 (0x00D8 - 0x00D0)
class UPrefabVariantAsset final : public UPrefabAsset
{
public:
	class UPrefabAsset*                           Parent;                                            // 0x00D0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrefabVariantAsset">();
	}
	static class UPrefabVariantAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrefabVariantAsset>();
	}
};
static_assert(alignof(UPrefabVariantAsset) == 0x000008, "Wrong alignment on UPrefabVariantAsset");
static_assert(sizeof(UPrefabVariantAsset) == 0x0000D8, "Wrong size on UPrefabVariantAsset");
static_assert(offsetof(UPrefabVariantAsset, Parent) == 0x0000D0, "Member 'UPrefabVariantAsset::Parent' has a wrong offset!");

// Class PrefabAsset.PrefabComponent
// 0x0080 (0x04D0 - 0x0450)
class UPrefabComponent final : public UPrimitiveComponent
{
public:
	uint8                                         bConnected : 1;                                    // 0x0450(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bLockSelection : 1;                                // 0x0450(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1DF2[0x7];                                     // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrefabAsset*                           Prefab;                                            // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlueprint*                             GeneratedBlueprint;                                // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class AActor*>              PrefabInstancesMap;                                // 0x0468(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<struct FPrefabVariantRule>             VariantRulesOverwrite;                             // 0x04B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         bTransient : 1;                                    // 0x04C8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1DF3[0x7];                                     // 0x04C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrefabComponent">();
	}
	static class UPrefabComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrefabComponent>();
	}
};
static_assert(alignof(UPrefabComponent) == 0x000010, "Wrong alignment on UPrefabComponent");
static_assert(sizeof(UPrefabComponent) == 0x0004D0, "Wrong size on UPrefabComponent");
static_assert(offsetof(UPrefabComponent, Prefab) == 0x000458, "Member 'UPrefabComponent::Prefab' has a wrong offset!");
static_assert(offsetof(UPrefabComponent, GeneratedBlueprint) == 0x000460, "Member 'UPrefabComponent::GeneratedBlueprint' has a wrong offset!");
static_assert(offsetof(UPrefabComponent, PrefabInstancesMap) == 0x000468, "Member 'UPrefabComponent::PrefabInstancesMap' has a wrong offset!");
static_assert(offsetof(UPrefabComponent, VariantRulesOverwrite) == 0x0004B8, "Member 'UPrefabComponent::VariantRulesOverwrite' has a wrong offset!");

// Class PrefabAsset.PrefabFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UPrefabFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class APrefabActor* SpawnPrefab(const class UObject* WorldContextObject, class UPrefabAsset* PrefabAsset, const struct FTransform& SpawnTransform, TArray<class AActor*>* OutSpawnPrefabInstances, bool bSpawnInstancesOnly, ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, class AActor* Owner);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrefabFunctionLibrary">();
	}
	static class UPrefabFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrefabFunctionLibrary>();
	}
};
static_assert(alignof(UPrefabFunctionLibrary) == 0x000008, "Wrong alignment on UPrefabFunctionLibrary");
static_assert(sizeof(UPrefabFunctionLibrary) == 0x000028, "Wrong size on UPrefabFunctionLibrary");

// Class PrefabAsset.PrefabLevelExporter
// 0x0010 (0x0088 - 0x0078)
class UPrefabLevelExporter final : public UPrefabExporter
{
public:
	uint8                                         Pad_1DF6[0x10];                                    // 0x0078(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrefabLevelExporter">();
	}
	static class UPrefabLevelExporter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrefabLevelExporter>();
	}
};
static_assert(alignof(UPrefabLevelExporter) == 0x000008, "Wrong alignment on UPrefabLevelExporter");
static_assert(sizeof(UPrefabLevelExporter) == 0x000088, "Wrong size on UPrefabLevelExporter");

// Class PrefabAsset.PrefabToolSettings
// 0x00E8 (0x0110 - 0x0028)
class UPrefabToolSettings final : public UObject
{
public:
	bool                                          bReplaceActorsWithCreatedPrefab;                   // 0x0028(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoIncludeAttachedActorsWhenCreateNewPrefab;     // 0x0029(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNestedPrefabSupport;                              // 0x002A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestorePrefabActorCollapseStatusAfterPIE;         // 0x002B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCollapseAllPrefabActorsAfterMapOpened;            // 0x002C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoveActorsInWorldAfterSetPrefabPivot;             // 0x002D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDuplicateNoRevertWithOffset;                      // 0x002E(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF7[0x1];                                     // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NewPrefabNamePattern;                              // 0x0030(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DuplicateLevelForPackagingPostfix;                 // 0x0040(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSaveCurrentLevelBeforeDuplicate;                  // 0x0050(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF8[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EPTUITheme                                    UITheme;                                           // 0x0054(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateAllPrefabActorsWhenOpenMap;                 // 0x0058(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckPrefabChangeBeforeUpdateAllPrefabActorsWhenOpenMap; // 0x0059(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateAllPrefabActorsWhenApply;                   // 0x005A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyToNestedPrefab;                              // 0x005B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableApplyFromDisconnectedPrefabActor;           // 0x005C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTryQuickApplyFirstWhenApply;                      // 0x005D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoAddRemoveVariantActorPrefix;                  // 0x005E(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DF9[0x1];                                     // 0x005F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VariantActorPrefix;                                // 0x0060(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePrefabComponentVisualizer;                  // 0x0070(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPrefabVisualizerType                         PrefabComponentVisualizerType;                     // 0x0071(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayPrefabComponentVisualizerEvenNotSelected;  // 0x0072(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DFA[0x1];                                     // 0x0073(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 PrefabViewVisualizerColor;                         // 0x0074(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 TargetActorColor;                                  // 0x0078(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 UnLockedConnectedColor;                            // 0x007C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 LockedConnectedColor;                              // 0x0080(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 UnLockedDisConnectedColor;                         // 0x0084(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 LockedDisConnectedColor;                           // 0x0088(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 UnLockedNoPrefabAssignedColor;                     // 0x008C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 LockedNoPrefabAssignedColor;                       // 0x0090(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DFB[0x4];                                     // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        PrefabMaterialPath;                                // 0x0098(0x0018)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DFC[0x28];                                    // 0x00B0(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bShadedPrefabViewVisualizer;                       // 0x00D8(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockPrefabSelectionByDefault;                     // 0x00D9(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableLockPrefabSelectionFeature;                // 0x00DA(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceApplyPerInstanceVertexColor;                 // 0x00DB(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHideChildActorsInPIEIfHiddenInEditor;             // 0x00DC(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanToggleChildActorVisibilityInPIE;               // 0x00DD(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DFD[0x1];                                     // 0x00DE(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIgnoreLayersInPrefab;                             // 0x00DF(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportGenerateBlueprint;                         // 0x00E0(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHarvestComponentsWhenGeneratingBlueprint;         // 0x00E1(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseActorNameAsVariableNameWhenGeneratingBlueprint; // 0x00E2(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceMobilityToMovableWhenGeneratingBlueprint;    // 0x00E3(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DFE[0x4];                                     // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class AActor>>             IgnoreActorClassesWhenGeneratingBlueprint;         // 0x00E8(0x0010)(Edit, ZeroConstructor, Config, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class FName>                           IgnoreActorTagsWhenGeneratingBlueprint;            // 0x00F8(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                          bFlashPrefabWindowForTargetPrefabActor;            // 0x0108(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePrefabTextEditor;                           // 0x0109(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugMode;                                        // 0x010A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableThumbnailRender;                           // 0x010B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowPrefabInstanceTagInPrefabToolWindow;          // 0x010C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipActorReferenceReplacement;                    // 0x010D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DFF[0x2];                                     // 0x010E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PrefabToolSettings">();
	}
	static class UPrefabToolSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPrefabToolSettings>();
	}
};
static_assert(alignof(UPrefabToolSettings) == 0x000008, "Wrong alignment on UPrefabToolSettings");
static_assert(sizeof(UPrefabToolSettings) == 0x000110, "Wrong size on UPrefabToolSettings");
static_assert(offsetof(UPrefabToolSettings, bReplaceActorsWithCreatedPrefab) == 0x000028, "Member 'UPrefabToolSettings::bReplaceActorsWithCreatedPrefab' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bAutoIncludeAttachedActorsWhenCreateNewPrefab) == 0x000029, "Member 'UPrefabToolSettings::bAutoIncludeAttachedActorsWhenCreateNewPrefab' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bNestedPrefabSupport) == 0x00002A, "Member 'UPrefabToolSettings::bNestedPrefabSupport' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bRestorePrefabActorCollapseStatusAfterPIE) == 0x00002B, "Member 'UPrefabToolSettings::bRestorePrefabActorCollapseStatusAfterPIE' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bCollapseAllPrefabActorsAfterMapOpened) == 0x00002C, "Member 'UPrefabToolSettings::bCollapseAllPrefabActorsAfterMapOpened' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bMoveActorsInWorldAfterSetPrefabPivot) == 0x00002D, "Member 'UPrefabToolSettings::bMoveActorsInWorldAfterSetPrefabPivot' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bDuplicateNoRevertWithOffset) == 0x00002E, "Member 'UPrefabToolSettings::bDuplicateNoRevertWithOffset' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, NewPrefabNamePattern) == 0x000030, "Member 'UPrefabToolSettings::NewPrefabNamePattern' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, DuplicateLevelForPackagingPostfix) == 0x000040, "Member 'UPrefabToolSettings::DuplicateLevelForPackagingPostfix' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bSaveCurrentLevelBeforeDuplicate) == 0x000050, "Member 'UPrefabToolSettings::bSaveCurrentLevelBeforeDuplicate' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, UITheme) == 0x000054, "Member 'UPrefabToolSettings::UITheme' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bUpdateAllPrefabActorsWhenOpenMap) == 0x000058, "Member 'UPrefabToolSettings::bUpdateAllPrefabActorsWhenOpenMap' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bCheckPrefabChangeBeforeUpdateAllPrefabActorsWhenOpenMap) == 0x000059, "Member 'UPrefabToolSettings::bCheckPrefabChangeBeforeUpdateAllPrefabActorsWhenOpenMap' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bUpdateAllPrefabActorsWhenApply) == 0x00005A, "Member 'UPrefabToolSettings::bUpdateAllPrefabActorsWhenApply' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bApplyToNestedPrefab) == 0x00005B, "Member 'UPrefabToolSettings::bApplyToNestedPrefab' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bEnableApplyFromDisconnectedPrefabActor) == 0x00005C, "Member 'UPrefabToolSettings::bEnableApplyFromDisconnectedPrefabActor' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bTryQuickApplyFirstWhenApply) == 0x00005D, "Member 'UPrefabToolSettings::bTryQuickApplyFirstWhenApply' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bAutoAddRemoveVariantActorPrefix) == 0x00005E, "Member 'UPrefabToolSettings::bAutoAddRemoveVariantActorPrefix' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, VariantActorPrefix) == 0x000060, "Member 'UPrefabToolSettings::VariantActorPrefix' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bEnablePrefabComponentVisualizer) == 0x000070, "Member 'UPrefabToolSettings::bEnablePrefabComponentVisualizer' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, PrefabComponentVisualizerType) == 0x000071, "Member 'UPrefabToolSettings::PrefabComponentVisualizerType' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bDisplayPrefabComponentVisualizerEvenNotSelected) == 0x000072, "Member 'UPrefabToolSettings::bDisplayPrefabComponentVisualizerEvenNotSelected' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, PrefabViewVisualizerColor) == 0x000074, "Member 'UPrefabToolSettings::PrefabViewVisualizerColor' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, TargetActorColor) == 0x000078, "Member 'UPrefabToolSettings::TargetActorColor' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, UnLockedConnectedColor) == 0x00007C, "Member 'UPrefabToolSettings::UnLockedConnectedColor' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, LockedConnectedColor) == 0x000080, "Member 'UPrefabToolSettings::LockedConnectedColor' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, UnLockedDisConnectedColor) == 0x000084, "Member 'UPrefabToolSettings::UnLockedDisConnectedColor' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, LockedDisConnectedColor) == 0x000088, "Member 'UPrefabToolSettings::LockedDisConnectedColor' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, UnLockedNoPrefabAssignedColor) == 0x00008C, "Member 'UPrefabToolSettings::UnLockedNoPrefabAssignedColor' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, LockedNoPrefabAssignedColor) == 0x000090, "Member 'UPrefabToolSettings::LockedNoPrefabAssignedColor' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, PrefabMaterialPath) == 0x000098, "Member 'UPrefabToolSettings::PrefabMaterialPath' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bShadedPrefabViewVisualizer) == 0x0000D8, "Member 'UPrefabToolSettings::bShadedPrefabViewVisualizer' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bLockPrefabSelectionByDefault) == 0x0000D9, "Member 'UPrefabToolSettings::bLockPrefabSelectionByDefault' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bDisableLockPrefabSelectionFeature) == 0x0000DA, "Member 'UPrefabToolSettings::bDisableLockPrefabSelectionFeature' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bForceApplyPerInstanceVertexColor) == 0x0000DB, "Member 'UPrefabToolSettings::bForceApplyPerInstanceVertexColor' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bHideChildActorsInPIEIfHiddenInEditor) == 0x0000DC, "Member 'UPrefabToolSettings::bHideChildActorsInPIEIfHiddenInEditor' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bCanToggleChildActorVisibilityInPIE) == 0x0000DD, "Member 'UPrefabToolSettings::bCanToggleChildActorVisibilityInPIE' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bIgnoreLayersInPrefab) == 0x0000DF, "Member 'UPrefabToolSettings::bIgnoreLayersInPrefab' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bSupportGenerateBlueprint) == 0x0000E0, "Member 'UPrefabToolSettings::bSupportGenerateBlueprint' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bHarvestComponentsWhenGeneratingBlueprint) == 0x0000E1, "Member 'UPrefabToolSettings::bHarvestComponentsWhenGeneratingBlueprint' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bUseActorNameAsVariableNameWhenGeneratingBlueprint) == 0x0000E2, "Member 'UPrefabToolSettings::bUseActorNameAsVariableNameWhenGeneratingBlueprint' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bForceMobilityToMovableWhenGeneratingBlueprint) == 0x0000E3, "Member 'UPrefabToolSettings::bForceMobilityToMovableWhenGeneratingBlueprint' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, IgnoreActorClassesWhenGeneratingBlueprint) == 0x0000E8, "Member 'UPrefabToolSettings::IgnoreActorClassesWhenGeneratingBlueprint' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, IgnoreActorTagsWhenGeneratingBlueprint) == 0x0000F8, "Member 'UPrefabToolSettings::IgnoreActorTagsWhenGeneratingBlueprint' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bFlashPrefabWindowForTargetPrefabActor) == 0x000108, "Member 'UPrefabToolSettings::bFlashPrefabWindowForTargetPrefabActor' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bEnablePrefabTextEditor) == 0x000109, "Member 'UPrefabToolSettings::bEnablePrefabTextEditor' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bDebugMode) == 0x00010A, "Member 'UPrefabToolSettings::bDebugMode' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bDisableThumbnailRender) == 0x00010B, "Member 'UPrefabToolSettings::bDisableThumbnailRender' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bShowPrefabInstanceTagInPrefabToolWindow) == 0x00010C, "Member 'UPrefabToolSettings::bShowPrefabInstanceTagInPrefabToolWindow' has a wrong offset!");
static_assert(offsetof(UPrefabToolSettings, bSkipActorReferenceReplacement) == 0x00010D, "Member 'UPrefabToolSettings::bSkipActorReferenceReplacement' has a wrong offset!");

}

