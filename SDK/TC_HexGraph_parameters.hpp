#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TC_HexGraph

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function TC_HexGraph.TC_HexGraph_C.ExecuteUbergraph_TC_HexGraph
// 0x0078 (0x0078 - 0x0000)
struct TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B7E[0x4];                                     // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ATC_HexZone_C*>                  CallFunc_GetAllActorsOfClass_OutActors;            // 0x0008(0x0010)(ReferenceParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B7F[0x7];                                     // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USQCaptureZoneComponent*                K2Node_CustomEvent_CaptureZone;                    // 0x0030(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         K2Node_CustomEvent_Team;                           // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B80[0x7];                                     // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATC_HexZone_C*                          CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B81[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATC_HexZone_C*                          CallFunc_Array_Get_Item_1;                         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B82[0x3];                                     // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B83[0x3];                                     // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph) == 0x000008, "Wrong alignment on TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph");
static_assert(sizeof(TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph) == 0x000078, "Wrong size on TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph");
static_assert(offsetof(TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph, EntryPoint) == 0x000000, "Member 'TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph::EntryPoint' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph, CallFunc_GetAllActorsOfClass_OutActors) == 0x000008, "Member 'TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph, Temp_int_Array_Index_Variable) == 0x000018, "Member 'TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph, Temp_int_Array_Index_Variable_1) == 0x000024, "Member 'TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph, CallFunc_HasAuthority_ReturnValue) == 0x000028, "Member 'TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph, K2Node_CustomEvent_CaptureZone) == 0x000030, "Member 'TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph::K2Node_CustomEvent_CaptureZone' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph, K2Node_CustomEvent_Team) == 0x000038, "Member 'TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph::K2Node_CustomEvent_Team' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph, CallFunc_Array_Get_Item) == 0x000040, "Member 'TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph, CallFunc_Array_Get_Item_1) == 0x000050, "Member 'TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph, CallFunc_Array_Length_ReturnValue_1) == 0x000058, "Member 'TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph, CallFunc_Less_IntInt_ReturnValue) == 0x00005C, "Member 'TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000060, "Member 'TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph, CallFunc_Add_IntInt_ReturnValue_1) == 0x000064, "Member 'TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph, Temp_int_Loop_Counter_Variable_1) == 0x000068, "Member 'TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph, CallFunc_Less_IntInt_ReturnValue_1) == 0x00006C, "Member 'TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph, CallFunc_Add_IntInt_ReturnValue_2) == 0x000070, "Member 'TC_HexGraph_C_ExecuteUbergraph_TC_HexGraph::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");

// Function TC_HexGraph.TC_HexGraph_C.State Changed
// 0x0010 (0x0010 - 0x0000)
struct TC_HexGraph_C_State_Changed final
{
public:
	class USQCaptureZoneComponent*                CaptureZone;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Team;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TC_HexGraph_C_State_Changed) == 0x000008, "Wrong alignment on TC_HexGraph_C_State_Changed");
static_assert(sizeof(TC_HexGraph_C_State_Changed) == 0x000010, "Wrong size on TC_HexGraph_C_State_Changed");
static_assert(offsetof(TC_HexGraph_C_State_Changed, CaptureZone) == 0x000000, "Member 'TC_HexGraph_C_State_Changed::CaptureZone' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_State_Changed, Team) == 0x000008, "Member 'TC_HexGraph_C_State_Changed::Team' has a wrong offset!");

// Function TC_HexGraph.TC_HexGraph_C.UserConstructionScript
// 0x0350 (0x0350 - 0x0000)
struct TC_HexGraph_C_UserConstructionScript final
{
public:
	TArray<class ATC_HexZone_C*>                  L_TC_Zones;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class UChildActorComponent*>           L_Spawned_Child_Zones;                             // 0x0010(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	float                                         Hex_Height;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Hex_Width;                                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Hex_Base_Scale;                                    // 0x0028(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Current_Length_Index;                              // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Current_Width_Index;                               // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable;                               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0044(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0088(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B84[0x6];                                     // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_Array_Get_Item;                           // 0x00A0(0x0030)(IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x00D4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x00E0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x00EC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B85[0x7];                                     // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0100(0x0030)(IsPlainOldData, NoDestructor)
	class UChildActorComponent*                   CallFunc_AddComponent_ReturnValue;                 // 0x0130(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0138(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UChildActorComponent*                   CallFunc_Array_Get_Item_1;                         // 0x0160(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B86[0x3];                                     // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ATC_HexZone_C*                          K2Node_DynamicCast_AsTC_Hex_Zone;                  // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B87[0x3];                                     // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0184(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0185(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0186(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B88[0x1];                                     // 0x0187(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Array_Get_Item_2;                         // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B89[0x3];                                     // 0x0195(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue;           // 0x0198(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_FloatToVector_ReturnValue;           // 0x01A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_1;                          // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_1;                          // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_1;                          // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_2;                          // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_2;                          // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_2;                          // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x01C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue;                         // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_2;                 // 0x01D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x01E4(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_2;        // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_3;        // 0x0284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_4;        // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_5;        // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_6;        // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_3;                          // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_3;                          // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_3;                          // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Abs_ReturnValue;                          // 0x02A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_4;                          // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_4;                          // 0x02AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_4;                          // 0x02B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x02B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B8A[0x3];                                     // 0x02B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Round_ReturnValue;                        // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x02C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_5;                          // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_5;                          // 0x02CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_5;                          // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X_6;                          // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y_6;                          // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z_6;                          // 0x02DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B8B[0x3];                                     // 0x02E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue_1;                        // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_2;          // 0x02EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_3;                 // 0x02F0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue_1;                      // 0x02FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0300(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B8C[0x4];                                     // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0310(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Can_Spawn_Hex_Can_Spawn;                  // 0x0340(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B8D[0x3];                                     // 0x0341(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0344(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TC_HexGraph_C_UserConstructionScript) == 0x000010, "Wrong alignment on TC_HexGraph_C_UserConstructionScript");
static_assert(sizeof(TC_HexGraph_C_UserConstructionScript) == 0x000350, "Wrong size on TC_HexGraph_C_UserConstructionScript");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, L_TC_Zones) == 0x000000, "Member 'TC_HexGraph_C_UserConstructionScript::L_TC_Zones' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, L_Spawned_Child_Zones) == 0x000010, "Member 'TC_HexGraph_C_UserConstructionScript::L_Spawned_Child_Zones' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, Hex_Height) == 0x000020, "Member 'TC_HexGraph_C_UserConstructionScript::Hex_Height' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, Hex_Width) == 0x000024, "Member 'TC_HexGraph_C_UserConstructionScript::Hex_Width' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, Hex_Base_Scale) == 0x000028, "Member 'TC_HexGraph_C_UserConstructionScript::Hex_Base_Scale' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, Current_Length_Index) == 0x000034, "Member 'TC_HexGraph_C_UserConstructionScript::Current_Length_Index' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, Current_Width_Index) == 0x000038, "Member 'TC_HexGraph_C_UserConstructionScript::Current_Width_Index' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, Temp_int_Variable) == 0x00003C, "Member 'TC_HexGraph_C_UserConstructionScript::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, Temp_float_Variable) == 0x000040, "Member 'TC_HexGraph_C_UserConstructionScript::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, Temp_float_Variable_1) == 0x000044, "Member 'TC_HexGraph_C_UserConstructionScript::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, Temp_int_Array_Index_Variable) == 0x000048, "Member 'TC_HexGraph_C_UserConstructionScript::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, Temp_int_Loop_Counter_Variable) == 0x00004C, "Member 'TC_HexGraph_C_UserConstructionScript::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Add_IntInt_ReturnValue) == 0x000050, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, Temp_int_Array_Index_Variable_1) == 0x000054, "Member 'TC_HexGraph_C_UserConstructionScript::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, Temp_int_Variable_1) == 0x000058, "Member 'TC_HexGraph_C_UserConstructionScript::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Add_IntInt_ReturnValue_1) == 0x00005C, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, Temp_int_Loop_Counter_Variable_1) == 0x000060, "Member 'TC_HexGraph_C_UserConstructionScript::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, Temp_int_Variable_2) == 0x000064, "Member 'TC_HexGraph_C_UserConstructionScript::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Add_IntInt_ReturnValue_2) == 0x000068, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Add_IntInt_ReturnValue_3) == 0x00006C, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, Temp_int_Loop_Counter_Variable_2) == 0x000070, "Member 'TC_HexGraph_C_UserConstructionScript::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Add_IntInt_ReturnValue_4) == 0x000074, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_BreakVector_X) == 0x000078, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_BreakVector_Y) == 0x00007C, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_BreakVector_Z) == 0x000080, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x000084, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_MakeVector_ReturnValue) == 0x000088, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Array_Length_ReturnValue) == 0x000094, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Less_IntInt_ReturnValue) == 0x000098, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_K2_SetActorRotation_ReturnValue) == 0x000099, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Array_Get_Item) == 0x0000A0, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Array_Length_ReturnValue_1) == 0x0000D0, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_BreakTransform_Location) == 0x0000D4, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_BreakTransform_Rotation) == 0x0000E0, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_BreakTransform_Scale) == 0x0000EC, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000F8, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_MakeTransform_ReturnValue) == 0x000100, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_AddComponent_ReturnValue) == 0x000130, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000138, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Array_Add_ReturnValue) == 0x000144, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_BreakRotator_Roll) == 0x000148, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_BreakRotator_Pitch) == 0x00014C, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_BreakRotator_Yaw) == 0x000150, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_MakeRotator_ReturnValue) == 0x000154, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Array_Get_Item_1) == 0x000160, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Array_Length_ReturnValue_2) == 0x000168, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Less_IntInt_ReturnValue_2) == 0x00016C, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, K2Node_DynamicCast_AsTC_Hex_Zone) == 0x000170, "Member 'TC_HexGraph_C_UserConstructionScript::K2Node_DynamicCast_AsTC_Hex_Zone' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, K2Node_DynamicCast_bSuccess) == 0x000178, "Member 'TC_HexGraph_C_UserConstructionScript::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Array_Length_ReturnValue_3) == 0x00017C, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Array_Add_ReturnValue_1) == 0x000180, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Greater_IntInt_ReturnValue) == 0x000184, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000185, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000186, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, Temp_int_Array_Index_Variable_2) == 0x000188, "Member 'TC_HexGraph_C_UserConstructionScript::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Array_Get_Item_2) == 0x00018C, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Percent_IntInt_ReturnValue) == 0x000190, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000194, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Divide_VectorFloat_ReturnValue) == 0x000198, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Divide_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Conv_FloatToVector_ReturnValue) == 0x0001A4, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Conv_FloatToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_BreakVector_X_1) == 0x0001B0, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_BreakVector_Y_1) == 0x0001B4, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_BreakVector_Z_1) == 0x0001B8, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_BreakVector_X_2) == 0x0001BC, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_BreakVector_X_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_BreakVector_Y_2) == 0x0001C0, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_BreakVector_Y_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_BreakVector_Z_2) == 0x0001C4, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_BreakVector_Z_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_MakeVector_ReturnValue_1) == 0x0001C8, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_FMax_ReturnValue) == 0x0001D4, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_MakeVector_ReturnValue_2) == 0x0001D8, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_MakeVector_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x0001E4, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Divide_FloatFloat_ReturnValue) == 0x00026C, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000270, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, K2Node_Select_Default) == 0x000274, "Member 'TC_HexGraph_C_UserConstructionScript::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000278, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00027C, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Multiply_FloatFloat_ReturnValue_2) == 0x000280, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Multiply_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Multiply_FloatFloat_ReturnValue_3) == 0x000284, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Multiply_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Multiply_FloatFloat_ReturnValue_4) == 0x000288, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Multiply_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x00028C, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Multiply_FloatFloat_ReturnValue_5) == 0x000290, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Multiply_FloatFloat_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Multiply_FloatFloat_ReturnValue_6) == 0x000294, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Multiply_FloatFloat_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_BreakVector_X_3) == 0x000298, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_BreakVector_X_3' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_BreakVector_Y_3) == 0x00029C, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_BreakVector_Y_3' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_BreakVector_Z_3) == 0x0002A0, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_BreakVector_Z_3' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Abs_ReturnValue) == 0x0002A4, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_BreakVector_X_4) == 0x0002A8, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_BreakVector_X_4' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_BreakVector_Y_4) == 0x0002AC, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_BreakVector_Y_4' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_BreakVector_Z_4) == 0x0002B0, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_BreakVector_Z_4' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x0002B4, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0002B8, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Round_ReturnValue) == 0x0002BC, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_SelectFloat_ReturnValue) == 0x0002C0, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Add_FloatFloat_ReturnValue) == 0x0002C4, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_BreakVector_X_5) == 0x0002C8, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_BreakVector_X_5' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_BreakVector_Y_5) == 0x0002CC, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_BreakVector_Y_5' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_BreakVector_Z_5) == 0x0002D0, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_BreakVector_Z_5' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_BreakVector_X_6) == 0x0002D4, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_BreakVector_X_6' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_BreakVector_Y_6) == 0x0002D8, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_BreakVector_Y_6' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_BreakVector_Z_6) == 0x0002DC, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_BreakVector_Z_6' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x0002E0, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Abs_ReturnValue_1) == 0x0002E4, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_SelectFloat_ReturnValue_1) == 0x0002E8, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Divide_FloatFloat_ReturnValue_2) == 0x0002EC, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Divide_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_MakeVector_ReturnValue_3) == 0x0002F0, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_MakeVector_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Round_ReturnValue_1) == 0x0002FC, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Round_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000300, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_MakeTransform_ReturnValue_1) == 0x000310, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Can_Spawn_Hex_Can_Spawn) == 0x000340, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Can_Spawn_Hex_Can_Spawn' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_UserConstructionScript, CallFunc_Array_Add_ReturnValue_2) == 0x000344, "Member 'TC_HexGraph_C_UserConstructionScript::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");

// Function TC_HexGraph.TC_HexGraph_C.Can Spawn Hex
// 0x00C0 (0x00C0 - 0x0000)
struct TC_HexGraph_C_Can_Spawn_Hex final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x000C)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Can_Spawn;                                         // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B8E[0x3];                                     // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                World_Loc;                                         // 0x0010(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FindInputKeyClosestToWorldLocation_ReturnValue; // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B8F[0x3];                                     // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue; // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue_1; // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B90[0x8];                                     // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0050(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformLocation_ReturnValue;            // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue; // 0x0094(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00A0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TC_HexGraph_C_Can_Spawn_Hex) == 0x000010, "Wrong alignment on TC_HexGraph_C_Can_Spawn_Hex");
static_assert(sizeof(TC_HexGraph_C_Can_Spawn_Hex) == 0x0000C0, "Wrong size on TC_HexGraph_C_Can_Spawn_Hex");
static_assert(offsetof(TC_HexGraph_C_Can_Spawn_Hex, WorldLocation) == 0x000000, "Member 'TC_HexGraph_C_Can_Spawn_Hex::WorldLocation' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Can_Spawn_Hex, Can_Spawn) == 0x00000C, "Member 'TC_HexGraph_C_Can_Spawn_Hex::Can_Spawn' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Can_Spawn_Hex, World_Loc) == 0x000010, "Member 'TC_HexGraph_C_Can_Spawn_Hex::World_Loc' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Can_Spawn_Hex, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x00001C, "Member 'TC_HexGraph_C_Can_Spawn_Hex::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Can_Spawn_Hex, CallFunc_FindInputKeyClosestToWorldLocation_ReturnValue) == 0x000020, "Member 'TC_HexGraph_C_Can_Spawn_Hex::CallFunc_FindInputKeyClosestToWorldLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Can_Spawn_Hex, CallFunc_Greater_IntInt_ReturnValue) == 0x000024, "Member 'TC_HexGraph_C_Can_Spawn_Hex::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Can_Spawn_Hex, CallFunc_Add_FloatFloat_ReturnValue) == 0x000028, "Member 'TC_HexGraph_C_Can_Spawn_Hex::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Can_Spawn_Hex, CallFunc_FTrunc_ReturnValue) == 0x00002C, "Member 'TC_HexGraph_C_Can_Spawn_Hex::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Can_Spawn_Hex, CallFunc_FTrunc_ReturnValue_1) == 0x000030, "Member 'TC_HexGraph_C_Can_Spawn_Hex::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Can_Spawn_Hex, CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue) == 0x000034, "Member 'TC_HexGraph_C_Can_Spawn_Hex::CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Can_Spawn_Hex, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000038, "Member 'TC_HexGraph_C_Can_Spawn_Hex::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Can_Spawn_Hex, CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue_1) == 0x00003C, "Member 'TC_HexGraph_C_Can_Spawn_Hex::CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Can_Spawn_Hex, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000040, "Member 'TC_HexGraph_C_Can_Spawn_Hex::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Can_Spawn_Hex, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x000044, "Member 'TC_HexGraph_C_Can_Spawn_Hex::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Can_Spawn_Hex, CallFunc_GetTransform_ReturnValue) == 0x000050, "Member 'TC_HexGraph_C_Can_Spawn_Hex::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Can_Spawn_Hex, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000080, "Member 'TC_HexGraph_C_Can_Spawn_Hex::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Can_Spawn_Hex, CallFunc_TransformLocation_ReturnValue) == 0x000084, "Member 'TC_HexGraph_C_Can_Spawn_Hex::CallFunc_TransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Can_Spawn_Hex, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x000090, "Member 'TC_HexGraph_C_Can_Spawn_Hex::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Can_Spawn_Hex, CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue) == 0x000094, "Member 'TC_HexGraph_C_Can_Spawn_Hex::CallFunc_GetLocationAtDistanceAlongSpline_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Can_Spawn_Hex, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000A0, "Member 'TC_HexGraph_C_Can_Spawn_Hex::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Can_Spawn_Hex, CallFunc_VSize_ReturnValue) == 0x0000AC, "Member 'TC_HexGraph_C_Can_Spawn_Hex::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Can_Spawn_Hex, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0000B0, "Member 'TC_HexGraph_C_Can_Spawn_Hex::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");

// Function TC_HexGraph.TC_HexGraph_C.Create Hex Zones
// 0x0120 (0x0120 - 0x0000)
struct TC_HexGraph_C_Create_Hex_Zones final
{
public:
	TArray<class ATC_HexZone_C*>                  L_Hex_Zones;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Current_Width_Index;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Current_Length_Index;                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B91[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class ATC_HexZone_C*                    Temp_object_Variable;                              // 0x0028(0x0008)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_Array_Get_Item;                           // 0x0030(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B92[0x2];                                     // 0x008E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B93[0xC];                                     // 0x0094(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x00A0(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_TransformLocation_ReturnValue;            // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B94[0x4];                                     // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x00E0(0x0030)(IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATC_HexZone_C*                          CallFunc_FinishSpawningActor_ReturnValue;          // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TC_HexGraph_C_Create_Hex_Zones) == 0x000010, "Wrong alignment on TC_HexGraph_C_Create_Hex_Zones");
static_assert(sizeof(TC_HexGraph_C_Create_Hex_Zones) == 0x000120, "Wrong size on TC_HexGraph_C_Create_Hex_Zones");
static_assert(offsetof(TC_HexGraph_C_Create_Hex_Zones, L_Hex_Zones) == 0x000000, "Member 'TC_HexGraph_C_Create_Hex_Zones::L_Hex_Zones' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Create_Hex_Zones, Current_Width_Index) == 0x000010, "Member 'TC_HexGraph_C_Create_Hex_Zones::Current_Width_Index' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Create_Hex_Zones, Current_Length_Index) == 0x000014, "Member 'TC_HexGraph_C_Create_Hex_Zones::Current_Length_Index' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Create_Hex_Zones, Temp_int_Array_Index_Variable) == 0x000018, "Member 'TC_HexGraph_C_Create_Hex_Zones::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Create_Hex_Zones, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'TC_HexGraph_C_Create_Hex_Zones::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Create_Hex_Zones, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'TC_HexGraph_C_Create_Hex_Zones::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Create_Hex_Zones, Temp_object_Variable) == 0x000028, "Member 'TC_HexGraph_C_Create_Hex_Zones::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Create_Hex_Zones, CallFunc_Array_Get_Item) == 0x000030, "Member 'TC_HexGraph_C_Create_Hex_Zones::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Create_Hex_Zones, CallFunc_BreakTransform_Location) == 0x000060, "Member 'TC_HexGraph_C_Create_Hex_Zones::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Create_Hex_Zones, CallFunc_BreakTransform_Rotation) == 0x00006C, "Member 'TC_HexGraph_C_Create_Hex_Zones::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Create_Hex_Zones, CallFunc_BreakTransform_Scale) == 0x000078, "Member 'TC_HexGraph_C_Create_Hex_Zones::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Create_Hex_Zones, CallFunc_Array_Length_ReturnValue) == 0x000084, "Member 'TC_HexGraph_C_Create_Hex_Zones::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Create_Hex_Zones, CallFunc_Array_Length_ReturnValue_1) == 0x000088, "Member 'TC_HexGraph_C_Create_Hex_Zones::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Create_Hex_Zones, CallFunc_Greater_IntInt_ReturnValue) == 0x00008C, "Member 'TC_HexGraph_C_Create_Hex_Zones::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Create_Hex_Zones, CallFunc_Less_IntInt_ReturnValue) == 0x00008D, "Member 'TC_HexGraph_C_Create_Hex_Zones::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Create_Hex_Zones, CallFunc_Array_Add_ReturnValue) == 0x000090, "Member 'TC_HexGraph_C_Create_Hex_Zones::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Create_Hex_Zones, CallFunc_GetTransform_ReturnValue) == 0x0000A0, "Member 'TC_HexGraph_C_Create_Hex_Zones::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Create_Hex_Zones, CallFunc_TransformLocation_ReturnValue) == 0x0000D0, "Member 'TC_HexGraph_C_Create_Hex_Zones::CallFunc_TransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Create_Hex_Zones, CallFunc_MakeTransform_ReturnValue) == 0x0000E0, "Member 'TC_HexGraph_C_Create_Hex_Zones::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Create_Hex_Zones, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x000110, "Member 'TC_HexGraph_C_Create_Hex_Zones::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Create_Hex_Zones, CallFunc_FinishSpawningActor_ReturnValue) == 0x000118, "Member 'TC_HexGraph_C_Create_Hex_Zones::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");

// Function TC_HexGraph.TC_HexGraph_C.Destroy Hex Zones
// 0x0040 (0x0040 - 0x0000)
struct TC_HexGraph_C_Destroy_Hex_Zones final
{
public:
	TArray<class AActor*>                         L_Children;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B95[0x4];                                     // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetAttachedActors_OutActors;              // 0x0020(0x0010)(ReferenceParm)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TC_HexGraph_C_Destroy_Hex_Zones) == 0x000008, "Wrong alignment on TC_HexGraph_C_Destroy_Hex_Zones");
static_assert(sizeof(TC_HexGraph_C_Destroy_Hex_Zones) == 0x000040, "Wrong size on TC_HexGraph_C_Destroy_Hex_Zones");
static_assert(offsetof(TC_HexGraph_C_Destroy_Hex_Zones, L_Children) == 0x000000, "Member 'TC_HexGraph_C_Destroy_Hex_Zones::L_Children' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Destroy_Hex_Zones, Temp_int_Array_Index_Variable) == 0x000010, "Member 'TC_HexGraph_C_Destroy_Hex_Zones::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Destroy_Hex_Zones, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'TC_HexGraph_C_Destroy_Hex_Zones::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Destroy_Hex_Zones, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'TC_HexGraph_C_Destroy_Hex_Zones::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Destroy_Hex_Zones, CallFunc_GetAttachedActors_OutActors) == 0x000020, "Member 'TC_HexGraph_C_Destroy_Hex_Zones::CallFunc_GetAttachedActors_OutActors' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Destroy_Hex_Zones, CallFunc_Array_Get_Item) == 0x000030, "Member 'TC_HexGraph_C_Destroy_Hex_Zones::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Destroy_Hex_Zones, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'TC_HexGraph_C_Destroy_Hex_Zones::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Destroy_Hex_Zones, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'TC_HexGraph_C_Destroy_Hex_Zones::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function TC_HexGraph.TC_HexGraph_C.Init Play Hex Data
// 0x00B0 (0x00B0 - 0x0000)
struct TC_HexGraph_C_Init_Play_Hex_Data final
{
public:
	TArray<class ATC_HexZone_C*>                  L_In_Zones;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class ATC_HexZone_C*>                  L_Sorted_Hexes;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B96[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATC_HexZone_C*                          CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B97[0x3];                                     // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Round_ReturnValue;                        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class USQCaptureZoneComponent* CaptureZone, uint8 Team)> K2Node_CreateDelegate_OutputDelegate;              // 0x005C(0x0010)(ZeroConstructor, NoDestructor)
	uint8                                         Pad_2B98[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATC_HexZone_C*                          CallFunc_Array_Get_Item_1;                         // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATC_HexZone_C*                          CallFunc_Array_Get_Item_2;                         // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B99[0x3];                                     // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B9A[0x4];                                     // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ATC_HexZone_C*>                  CallFunc_GetAllActorsOfClass_OutActors;            // 0x0098(0x0010)(ReferenceParm)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TC_HexGraph_C_Init_Play_Hex_Data) == 0x000008, "Wrong alignment on TC_HexGraph_C_Init_Play_Hex_Data");
static_assert(sizeof(TC_HexGraph_C_Init_Play_Hex_Data) == 0x0000B0, "Wrong size on TC_HexGraph_C_Init_Play_Hex_Data");
static_assert(offsetof(TC_HexGraph_C_Init_Play_Hex_Data, L_In_Zones) == 0x000000, "Member 'TC_HexGraph_C_Init_Play_Hex_Data::L_In_Zones' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Play_Hex_Data, L_Sorted_Hexes) == 0x000010, "Member 'TC_HexGraph_C_Init_Play_Hex_Data::L_Sorted_Hexes' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Play_Hex_Data, Temp_int_Array_Index_Variable) == 0x000020, "Member 'TC_HexGraph_C_Init_Play_Hex_Data::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Play_Hex_Data, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'TC_HexGraph_C_Init_Play_Hex_Data::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Play_Hex_Data, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'TC_HexGraph_C_Init_Play_Hex_Data::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Play_Hex_Data, Temp_int_Array_Index_Variable_1) == 0x00002C, "Member 'TC_HexGraph_C_Init_Play_Hex_Data::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Play_Hex_Data, Temp_int_Loop_Counter_Variable_1) == 0x000030, "Member 'TC_HexGraph_C_Init_Play_Hex_Data::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Play_Hex_Data, CallFunc_Add_IntInt_ReturnValue_1) == 0x000034, "Member 'TC_HexGraph_C_Init_Play_Hex_Data::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Play_Hex_Data, Temp_int_Array_Index_Variable_2) == 0x000038, "Member 'TC_HexGraph_C_Init_Play_Hex_Data::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Play_Hex_Data, CallFunc_Array_Get_Item) == 0x000040, "Member 'TC_HexGraph_C_Init_Play_Hex_Data::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Play_Hex_Data, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'TC_HexGraph_C_Init_Play_Hex_Data::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Play_Hex_Data, CallFunc_Array_Length_ReturnValue_1) == 0x00004C, "Member 'TC_HexGraph_C_Init_Play_Hex_Data::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Play_Hex_Data, CallFunc_Less_IntInt_ReturnValue) == 0x000050, "Member 'TC_HexGraph_C_Init_Play_Hex_Data::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Play_Hex_Data, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000054, "Member 'TC_HexGraph_C_Init_Play_Hex_Data::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Play_Hex_Data, CallFunc_Round_ReturnValue) == 0x000058, "Member 'TC_HexGraph_C_Init_Play_Hex_Data::CallFunc_Round_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Play_Hex_Data, K2Node_CreateDelegate_OutputDelegate) == 0x00005C, "Member 'TC_HexGraph_C_Init_Play_Hex_Data::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Play_Hex_Data, CallFunc_Array_Get_Item_1) == 0x000070, "Member 'TC_HexGraph_C_Init_Play_Hex_Data::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Play_Hex_Data, CallFunc_Array_Length_ReturnValue_2) == 0x000078, "Member 'TC_HexGraph_C_Init_Play_Hex_Data::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Play_Hex_Data, Temp_int_Loop_Counter_Variable_2) == 0x00007C, "Member 'TC_HexGraph_C_Init_Play_Hex_Data::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Play_Hex_Data, CallFunc_Array_Get_Item_2) == 0x000080, "Member 'TC_HexGraph_C_Init_Play_Hex_Data::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Play_Hex_Data, CallFunc_Less_IntInt_ReturnValue_1) == 0x000088, "Member 'TC_HexGraph_C_Init_Play_Hex_Data::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Play_Hex_Data, CallFunc_Add_IntInt_ReturnValue_2) == 0x00008C, "Member 'TC_HexGraph_C_Init_Play_Hex_Data::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Play_Hex_Data, CallFunc_Array_Length_ReturnValue_3) == 0x000090, "Member 'TC_HexGraph_C_Init_Play_Hex_Data::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Play_Hex_Data, CallFunc_GetAllActorsOfClass_OutActors) == 0x000098, "Member 'TC_HexGraph_C_Init_Play_Hex_Data::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Play_Hex_Data, CallFunc_Less_IntInt_ReturnValue_2) == 0x0000A8, "Member 'TC_HexGraph_C_Init_Play_Hex_Data::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");

// Function TC_HexGraph.TC_HexGraph_C.Clamp Ownership
// 0x001C (0x001C - 0x0000)
struct TC_HexGraph_C_Clamp_Ownership final
{
public:
	float                                         CallFunc_FMax_ReturnValue;                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FMax_ReturnValue_1;                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B9B[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TC_HexGraph_C_Clamp_Ownership) == 0x000004, "Wrong alignment on TC_HexGraph_C_Clamp_Ownership");
static_assert(sizeof(TC_HexGraph_C_Clamp_Ownership) == 0x00001C, "Wrong size on TC_HexGraph_C_Clamp_Ownership");
static_assert(offsetof(TC_HexGraph_C_Clamp_Ownership, CallFunc_FMax_ReturnValue) == 0x000000, "Member 'TC_HexGraph_C_Clamp_Ownership::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Clamp_Ownership, CallFunc_FMax_ReturnValue_1) == 0x000004, "Member 'TC_HexGraph_C_Clamp_Ownership::CallFunc_FMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Clamp_Ownership, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000008, "Member 'TC_HexGraph_C_Clamp_Ownership::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Clamp_Ownership, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x00000C, "Member 'TC_HexGraph_C_Clamp_Ownership::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Clamp_Ownership, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000010, "Member 'TC_HexGraph_C_Clamp_Ownership::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Clamp_Ownership, CallFunc_Add_FloatFloat_ReturnValue) == 0x000014, "Member 'TC_HexGraph_C_Clamp_Ownership::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Clamp_Ownership, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000018, "Member 'TC_HexGraph_C_Clamp_Ownership::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function TC_HexGraph.TC_HexGraph_C.Get Team Zone Capture
// 0x0018 (0x0018 - 0x0000)
struct TC_HexGraph_C_Get_Team_Zone_Capture final
{
public:
	int32                                         Team;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Num_Zones_Owned;                                   // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Percentage_Owned;                                  // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TC_HexGraph_C_Get_Team_Zone_Capture) == 0x000004, "Wrong alignment on TC_HexGraph_C_Get_Team_Zone_Capture");
static_assert(sizeof(TC_HexGraph_C_Get_Team_Zone_Capture) == 0x000018, "Wrong size on TC_HexGraph_C_Get_Team_Zone_Capture");
static_assert(offsetof(TC_HexGraph_C_Get_Team_Zone_Capture, Team) == 0x000000, "Member 'TC_HexGraph_C_Get_Team_Zone_Capture::Team' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Team_Zone_Capture, Num_Zones_Owned) == 0x000004, "Member 'TC_HexGraph_C_Get_Team_Zone_Capture::Num_Zones_Owned' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Team_Zone_Capture, Percentage_Owned) == 0x000008, "Member 'TC_HexGraph_C_Get_Team_Zone_Capture::Percentage_Owned' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Team_Zone_Capture, CallFunc_Conv_IntToFloat_ReturnValue) == 0x00000C, "Member 'TC_HexGraph_C_Get_Team_Zone_Capture::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Team_Zone_Capture, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000010, "Member 'TC_HexGraph_C_Get_Team_Zone_Capture::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Team_Zone_Capture, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000014, "Member 'TC_HexGraph_C_Get_Team_Zone_Capture::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");

// Function TC_HexGraph.TC_HexGraph_C.Get Start Zones
// 0x0010 (0x0010 - 0x0000)
struct TC_HexGraph_C_Get_Start_Zones final
{
public:
	class ATC_HexZone_C*                          Start_Team_1;                                      // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATC_HexZone_C*                          Start_Team_2;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TC_HexGraph_C_Get_Start_Zones) == 0x000008, "Wrong alignment on TC_HexGraph_C_Get_Start_Zones");
static_assert(sizeof(TC_HexGraph_C_Get_Start_Zones) == 0x000010, "Wrong size on TC_HexGraph_C_Get_Start_Zones");
static_assert(offsetof(TC_HexGraph_C_Get_Start_Zones, Start_Team_1) == 0x000000, "Member 'TC_HexGraph_C_Get_Start_Zones::Start_Team_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Start_Zones, Start_Team_2) == 0x000008, "Member 'TC_HexGraph_C_Get_Start_Zones::Start_Team_2' has a wrong offset!");

// Function TC_HexGraph.TC_HexGraph_C.Init Start Zones
// 0x0098 (0x0098 - 0x0000)
struct TC_HexGraph_C_Init_Start_Zones final
{
public:
	TArray<class ATC_HexZone_C*>                  L_Neutral_Team;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class ATC_HexZone_C*>                  L_Team_2;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class ATC_HexZone_C*>                  L_Team_1;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class ATC_HexZone_C*>                  CallFunc_Get_Valid_Anchor_Hexes_Out_Team_1_Hexes;  // 0x0030(0x0010)(ReferenceParm)
	TArray<class ATC_HexZone_C*>                  CallFunc_Get_Valid_Anchor_Hexes_Out_Team_2_Hexes;  // 0x0040(0x0010)(ReferenceParm)
	class ATC_HexZone_C*                          CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATC_HexZone_C*                          CallFunc_Array_Get_Item_1;                         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B9C[0x3];                                     // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B9D[0x4];                                     // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATC_HexZone_C*                          CallFunc_Array_Get_Item_2;                         // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2B9E[0x3];                                     // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomInteger_ReturnValue_1;              // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B9F[0x4];                                     // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATC_HexZone_C*                          CallFunc_Array_Get_Item_3;                         // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TC_HexGraph_C_Init_Start_Zones) == 0x000008, "Wrong alignment on TC_HexGraph_C_Init_Start_Zones");
static_assert(sizeof(TC_HexGraph_C_Init_Start_Zones) == 0x000098, "Wrong size on TC_HexGraph_C_Init_Start_Zones");
static_assert(offsetof(TC_HexGraph_C_Init_Start_Zones, L_Neutral_Team) == 0x000000, "Member 'TC_HexGraph_C_Init_Start_Zones::L_Neutral_Team' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Start_Zones, L_Team_2) == 0x000010, "Member 'TC_HexGraph_C_Init_Start_Zones::L_Team_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Start_Zones, L_Team_1) == 0x000020, "Member 'TC_HexGraph_C_Init_Start_Zones::L_Team_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Start_Zones, CallFunc_Get_Valid_Anchor_Hexes_Out_Team_1_Hexes) == 0x000030, "Member 'TC_HexGraph_C_Init_Start_Zones::CallFunc_Get_Valid_Anchor_Hexes_Out_Team_1_Hexes' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Start_Zones, CallFunc_Get_Valid_Anchor_Hexes_Out_Team_2_Hexes) == 0x000040, "Member 'TC_HexGraph_C_Init_Start_Zones::CallFunc_Get_Valid_Anchor_Hexes_Out_Team_2_Hexes' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Start_Zones, CallFunc_Array_Get_Item) == 0x000050, "Member 'TC_HexGraph_C_Init_Start_Zones::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Start_Zones, CallFunc_Array_Get_Item_1) == 0x000058, "Member 'TC_HexGraph_C_Init_Start_Zones::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Start_Zones, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'TC_HexGraph_C_Init_Start_Zones::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Start_Zones, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000064, "Member 'TC_HexGraph_C_Init_Start_Zones::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Start_Zones, CallFunc_RandomInteger_ReturnValue) == 0x000068, "Member 'TC_HexGraph_C_Init_Start_Zones::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Start_Zones, CallFunc_Array_Get_Item_2) == 0x000070, "Member 'TC_HexGraph_C_Init_Start_Zones::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Start_Zones, CallFunc_Array_Length_ReturnValue_1) == 0x000078, "Member 'TC_HexGraph_C_Init_Start_Zones::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Start_Zones, CallFunc_IsValid_ReturnValue) == 0x00007C, "Member 'TC_HexGraph_C_Init_Start_Zones::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Start_Zones, CallFunc_RandomInteger_ReturnValue_1) == 0x000080, "Member 'TC_HexGraph_C_Init_Start_Zones::CallFunc_RandomInteger_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Start_Zones, CallFunc_Array_Get_Item_3) == 0x000088, "Member 'TC_HexGraph_C_Init_Start_Zones::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Start_Zones, CallFunc_IsValid_ReturnValue_1) == 0x000090, "Member 'TC_HexGraph_C_Init_Start_Zones::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Init_Start_Zones, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x000091, "Member 'TC_HexGraph_C_Init_Start_Zones::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");

// Function TC_HexGraph.TC_HexGraph_C.Refresh Zones
// 0x0028 (0x0028 - 0x0000)
struct TC_HexGraph_C_Refresh_Zones final
{
public:
	TArray<class ATC_HexZone_C*>                  L_Hex_Zones;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Current_Width_Index;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Current_Length_Index;                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ATC_HexZone_C*>                  CallFunc_GetAllActorsOfClass_OutActors;            // 0x0018(0x0010)(ReferenceParm)
};
static_assert(alignof(TC_HexGraph_C_Refresh_Zones) == 0x000008, "Wrong alignment on TC_HexGraph_C_Refresh_Zones");
static_assert(sizeof(TC_HexGraph_C_Refresh_Zones) == 0x000028, "Wrong size on TC_HexGraph_C_Refresh_Zones");
static_assert(offsetof(TC_HexGraph_C_Refresh_Zones, L_Hex_Zones) == 0x000000, "Member 'TC_HexGraph_C_Refresh_Zones::L_Hex_Zones' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Refresh_Zones, Current_Width_Index) == 0x000010, "Member 'TC_HexGraph_C_Refresh_Zones::Current_Width_Index' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Refresh_Zones, Current_Length_Index) == 0x000014, "Member 'TC_HexGraph_C_Refresh_Zones::Current_Length_Index' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Refresh_Zones, CallFunc_GetAllActorsOfClass_OutActors) == 0x000018, "Member 'TC_HexGraph_C_Refresh_Zones::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");

// Function TC_HexGraph.TC_HexGraph_C.Construct Hex Data
// 0x0078 (0x0078 - 0x0000)
struct TC_HexGraph_C_Construct_Hex_Data final
{
public:
	TArray<class ATC_HexZone_C*>                  In_Zones;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class ATC_HexZone_C*>                  L_In_Zones;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BA0[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATC_HexZone_C*                          CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATC_HexZone_C*                          CallFunc_Array_Get_Item_1;                         // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BA1[0x7];                                     // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ATC_HexZone_C*                          CallFunc_Array_Get_Item_2;                         // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BA2[0x2];                                     // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TC_HexGraph_C_Construct_Hex_Data) == 0x000008, "Wrong alignment on TC_HexGraph_C_Construct_Hex_Data");
static_assert(sizeof(TC_HexGraph_C_Construct_Hex_Data) == 0x000078, "Wrong size on TC_HexGraph_C_Construct_Hex_Data");
static_assert(offsetof(TC_HexGraph_C_Construct_Hex_Data, In_Zones) == 0x000000, "Member 'TC_HexGraph_C_Construct_Hex_Data::In_Zones' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Construct_Hex_Data, L_In_Zones) == 0x000010, "Member 'TC_HexGraph_C_Construct_Hex_Data::L_In_Zones' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Construct_Hex_Data, Temp_int_Array_Index_Variable) == 0x000020, "Member 'TC_HexGraph_C_Construct_Hex_Data::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Construct_Hex_Data, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'TC_HexGraph_C_Construct_Hex_Data::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Construct_Hex_Data, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'TC_HexGraph_C_Construct_Hex_Data::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Construct_Hex_Data, Temp_int_Array_Index_Variable_1) == 0x00002C, "Member 'TC_HexGraph_C_Construct_Hex_Data::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Construct_Hex_Data, Temp_int_Loop_Counter_Variable_1) == 0x000030, "Member 'TC_HexGraph_C_Construct_Hex_Data::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Construct_Hex_Data, CallFunc_Add_IntInt_ReturnValue_1) == 0x000034, "Member 'TC_HexGraph_C_Construct_Hex_Data::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Construct_Hex_Data, Temp_int_Array_Index_Variable_2) == 0x000038, "Member 'TC_HexGraph_C_Construct_Hex_Data::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Construct_Hex_Data, CallFunc_Array_Get_Item) == 0x000040, "Member 'TC_HexGraph_C_Construct_Hex_Data::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Construct_Hex_Data, CallFunc_Array_Get_Item_1) == 0x000048, "Member 'TC_HexGraph_C_Construct_Hex_Data::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Construct_Hex_Data, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'TC_HexGraph_C_Construct_Hex_Data::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Construct_Hex_Data, CallFunc_Array_Length_ReturnValue_1) == 0x000054, "Member 'TC_HexGraph_C_Construct_Hex_Data::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Construct_Hex_Data, CallFunc_Less_IntInt_ReturnValue) == 0x000058, "Member 'TC_HexGraph_C_Construct_Hex_Data::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Construct_Hex_Data, CallFunc_Array_Get_Item_2) == 0x000060, "Member 'TC_HexGraph_C_Construct_Hex_Data::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Construct_Hex_Data, CallFunc_Array_Length_ReturnValue_2) == 0x000068, "Member 'TC_HexGraph_C_Construct_Hex_Data::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Construct_Hex_Data, Temp_int_Loop_Counter_Variable_2) == 0x00006C, "Member 'TC_HexGraph_C_Construct_Hex_Data::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Construct_Hex_Data, CallFunc_Less_IntInt_ReturnValue_1) == 0x000070, "Member 'TC_HexGraph_C_Construct_Hex_Data::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Construct_Hex_Data, CallFunc_Less_IntInt_ReturnValue_2) == 0x000071, "Member 'TC_HexGraph_C_Construct_Hex_Data::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Construct_Hex_Data, CallFunc_Add_IntInt_ReturnValue_2) == 0x000074, "Member 'TC_HexGraph_C_Construct_Hex_Data::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");

// Function TC_HexGraph.TC_HexGraph_C.Check Win Condition
// 0x0080 (0x0080 - 0x0000)
struct TC_HexGraph_C_Check_Win_Condition final
{
public:
	int32                                         Team_B_Num;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Team_A_Num;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BA3[0x3];                                     // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATC_HexZone_C*                          CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_1;            // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_GetValidValue_ReturnValue;                // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x003E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BA4[0x1];                                     // 0x003F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQGameMode*                            CallFunc_GetSquadGameMode_Return_Value;            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BA5[0x4];                                     // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ASQGameState*                           CallFunc_GetSquadGameState_Return_Value;           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_2;            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue_3;            // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue_1;          // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue_1;    // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BA6[0x1];                                     // 0x006B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASQTeamState*                           CallFunc_Array_Get_Item_1;                         // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TC_HexGraph_C_Check_Win_Condition) == 0x000008, "Wrong alignment on TC_HexGraph_C_Check_Win_Condition");
static_assert(sizeof(TC_HexGraph_C_Check_Win_Condition) == 0x000080, "Wrong size on TC_HexGraph_C_Check_Win_Condition");
static_assert(offsetof(TC_HexGraph_C_Check_Win_Condition, Team_B_Num) == 0x000000, "Member 'TC_HexGraph_C_Check_Win_Condition::Team_B_Num' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Check_Win_Condition, Team_A_Num) == 0x000004, "Member 'TC_HexGraph_C_Check_Win_Condition::Team_A_Num' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Check_Win_Condition, Temp_int_Variable) == 0x000008, "Member 'TC_HexGraph_C_Check_Win_Condition::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Check_Win_Condition, Temp_int_Variable_1) == 0x00000C, "Member 'TC_HexGraph_C_Check_Win_Condition::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Check_Win_Condition, Temp_int_Variable_2) == 0x000010, "Member 'TC_HexGraph_C_Check_Win_Condition::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Check_Win_Condition, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'TC_HexGraph_C_Check_Win_Condition::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Check_Win_Condition, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'TC_HexGraph_C_Check_Win_Condition::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Check_Win_Condition, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'TC_HexGraph_C_Check_Win_Condition::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Check_Win_Condition, Temp_bool_Variable) == 0x000020, "Member 'TC_HexGraph_C_Check_Win_Condition::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Check_Win_Condition, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'TC_HexGraph_C_Check_Win_Condition::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Check_Win_Condition, CallFunc_Array_Get_Item) == 0x000028, "Member 'TC_HexGraph_C_Check_Win_Condition::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Check_Win_Condition, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000030, "Member 'TC_HexGraph_C_Check_Win_Condition::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Check_Win_Condition, CallFunc_Conv_IntToFloat_ReturnValue_1) == 0x000034, "Member 'TC_HexGraph_C_Check_Win_Condition::CallFunc_Conv_IntToFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Check_Win_Condition, CallFunc_Array_Length_ReturnValue_1) == 0x000038, "Member 'TC_HexGraph_C_Check_Win_Condition::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Check_Win_Condition, CallFunc_GetValidValue_ReturnValue) == 0x00003C, "Member 'TC_HexGraph_C_Check_Win_Condition::CallFunc_GetValidValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Check_Win_Condition, CallFunc_Less_IntInt_ReturnValue) == 0x00003D, "Member 'TC_HexGraph_C_Check_Win_Condition::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Check_Win_Condition, K2Node_SwitchEnum_CmpSuccess) == 0x00003E, "Member 'TC_HexGraph_C_Check_Win_Condition::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Check_Win_Condition, CallFunc_GetSquadGameMode_Return_Value) == 0x000040, "Member 'TC_HexGraph_C_Check_Win_Condition::CallFunc_GetSquadGameMode_Return_Value' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Check_Win_Condition, Temp_int_Variable_3) == 0x000048, "Member 'TC_HexGraph_C_Check_Win_Condition::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Check_Win_Condition, CallFunc_GetSquadGameState_Return_Value) == 0x000050, "Member 'TC_HexGraph_C_Check_Win_Condition::CallFunc_GetSquadGameState_Return_Value' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Check_Win_Condition, CallFunc_Conv_IntToFloat_ReturnValue_2) == 0x000058, "Member 'TC_HexGraph_C_Check_Win_Condition::CallFunc_Conv_IntToFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Check_Win_Condition, CallFunc_Conv_IntToFloat_ReturnValue_3) == 0x00005C, "Member 'TC_HexGraph_C_Check_Win_Condition::CallFunc_Conv_IntToFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Check_Win_Condition, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000060, "Member 'TC_HexGraph_C_Check_Win_Condition::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Check_Win_Condition, CallFunc_Divide_FloatFloat_ReturnValue_1) == 0x000064, "Member 'TC_HexGraph_C_Check_Win_Condition::CallFunc_Divide_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Check_Win_Condition, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000068, "Member 'TC_HexGraph_C_Check_Win_Condition::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Check_Win_Condition, CallFunc_GreaterEqual_FloatFloat_ReturnValue_1) == 0x000069, "Member 'TC_HexGraph_C_Check_Win_Condition::CallFunc_GreaterEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Check_Win_Condition, CallFunc_BooleanOR_ReturnValue) == 0x00006A, "Member 'TC_HexGraph_C_Check_Win_Condition::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Check_Win_Condition, K2Node_Select_Default) == 0x00006C, "Member 'TC_HexGraph_C_Check_Win_Condition::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Check_Win_Condition, CallFunc_Array_Get_Item_1) == 0x000070, "Member 'TC_HexGraph_C_Check_Win_Condition::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Check_Win_Condition, CallFunc_Add_IntInt_ReturnValue_1) == 0x000078, "Member 'TC_HexGraph_C_Check_Win_Condition::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Check_Win_Condition, CallFunc_Add_IntInt_ReturnValue_2) == 0x00007C, "Member 'TC_HexGraph_C_Check_Win_Condition::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");

// Function TC_HexGraph.TC_HexGraph_C.Update Anchor Flags
// 0x00B8 (0x00B8 - 0x0000)
struct TC_HexGraph_C_Update_Anchor_Flags final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BA7[0x3];                                     // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0010(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BA8[0x3];                                     // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BA9[0x4];                                     // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  K2Node_MakeArray_Array;                            // 0x0028(0x0010)(ReferenceParm)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BAA[0x4];                                     // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATC_HexZone_C*                          CallFunc_Array_Get_Item;                           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BAB[0x3];                                     // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BAC[0x4];                                     // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ATC_HexZone_C*>                  K2Node_MakeArray_Array_1;                          // 0x0058(0x0010)(ReferenceParm)
	TArray<class ATC_HexZone_C*>                  K2Node_MakeArray_Array_2;                          // 0x0068(0x0010)(ReferenceParm)
	TArray<class ATC_HexZone_C*>                  CallFunc_Get_Neighbour_Chain_Out_Chain;            // 0x0078(0x0010)(ReferenceParm)
	TArray<class ATC_HexZone_C*>                  CallFunc_Get_Neighbour_Chain_Out_Chain_1;          // 0x0088(0x0010)(ReferenceParm)
	class ATC_HexZone_C*                          CallFunc_Array_Get_Item_1;                         // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATC_HexZone_C*                          CallFunc_Array_Get_Item_2;                         // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(TC_HexGraph_C_Update_Anchor_Flags) == 0x000008, "Wrong alignment on TC_HexGraph_C_Update_Anchor_Flags");
static_assert(sizeof(TC_HexGraph_C_Update_Anchor_Flags) == 0x0000B8, "Wrong size on TC_HexGraph_C_Update_Anchor_Flags");
static_assert(offsetof(TC_HexGraph_C_Update_Anchor_Flags, Temp_bool_Variable) == 0x000000, "Member 'TC_HexGraph_C_Update_Anchor_Flags::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Update_Anchor_Flags, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'TC_HexGraph_C_Update_Anchor_Flags::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Update_Anchor_Flags, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'TC_HexGraph_C_Update_Anchor_Flags::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Update_Anchor_Flags, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'TC_HexGraph_C_Update_Anchor_Flags::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Update_Anchor_Flags, Temp_bool_Variable_1) == 0x000010, "Member 'TC_HexGraph_C_Update_Anchor_Flags::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Update_Anchor_Flags, Temp_int_Array_Index_Variable_1) == 0x000014, "Member 'TC_HexGraph_C_Update_Anchor_Flags::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Update_Anchor_Flags, Temp_int_Loop_Counter_Variable_1) == 0x000018, "Member 'TC_HexGraph_C_Update_Anchor_Flags::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Update_Anchor_Flags, CallFunc_Add_IntInt_ReturnValue_1) == 0x00001C, "Member 'TC_HexGraph_C_Update_Anchor_Flags::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Update_Anchor_Flags, Temp_int_Array_Index_Variable_2) == 0x000020, "Member 'TC_HexGraph_C_Update_Anchor_Flags::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Update_Anchor_Flags, K2Node_MakeArray_Array) == 0x000028, "Member 'TC_HexGraph_C_Update_Anchor_Flags::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Update_Anchor_Flags, Temp_int_Loop_Counter_Variable_2) == 0x000038, "Member 'TC_HexGraph_C_Update_Anchor_Flags::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Update_Anchor_Flags, CallFunc_Array_Get_Item) == 0x000040, "Member 'TC_HexGraph_C_Update_Anchor_Flags::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Update_Anchor_Flags, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'TC_HexGraph_C_Update_Anchor_Flags::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Update_Anchor_Flags, CallFunc_Less_IntInt_ReturnValue) == 0x00004C, "Member 'TC_HexGraph_C_Update_Anchor_Flags::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Update_Anchor_Flags, CallFunc_Add_IntInt_ReturnValue_2) == 0x000050, "Member 'TC_HexGraph_C_Update_Anchor_Flags::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Update_Anchor_Flags, K2Node_MakeArray_Array_1) == 0x000058, "Member 'TC_HexGraph_C_Update_Anchor_Flags::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Update_Anchor_Flags, K2Node_MakeArray_Array_2) == 0x000068, "Member 'TC_HexGraph_C_Update_Anchor_Flags::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Update_Anchor_Flags, CallFunc_Get_Neighbour_Chain_Out_Chain) == 0x000078, "Member 'TC_HexGraph_C_Update_Anchor_Flags::CallFunc_Get_Neighbour_Chain_Out_Chain' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Update_Anchor_Flags, CallFunc_Get_Neighbour_Chain_Out_Chain_1) == 0x000088, "Member 'TC_HexGraph_C_Update_Anchor_Flags::CallFunc_Get_Neighbour_Chain_Out_Chain_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Update_Anchor_Flags, CallFunc_Array_Get_Item_1) == 0x000098, "Member 'TC_HexGraph_C_Update_Anchor_Flags::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Update_Anchor_Flags, CallFunc_Array_Get_Item_2) == 0x0000A0, "Member 'TC_HexGraph_C_Update_Anchor_Flags::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Update_Anchor_Flags, CallFunc_Array_Length_ReturnValue_1) == 0x0000A8, "Member 'TC_HexGraph_C_Update_Anchor_Flags::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Update_Anchor_Flags, CallFunc_Array_Length_ReturnValue_2) == 0x0000AC, "Member 'TC_HexGraph_C_Update_Anchor_Flags::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Update_Anchor_Flags, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000B0, "Member 'TC_HexGraph_C_Update_Anchor_Flags::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Update_Anchor_Flags, CallFunc_Less_IntInt_ReturnValue_2) == 0x0000B1, "Member 'TC_HexGraph_C_Update_Anchor_Flags::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");

// Function TC_HexGraph.TC_HexGraph_C.Get Neighbour Chain
// 0x0088 (0x0088 - 0x0000)
struct TC_HexGraph_C_Get_Neighbour_Chain final
{
public:
	TArray<class ATC_HexZone_C*>                  Chain;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	int32                                         Team;                                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BAD[0x4];                                     // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATC_HexZone_C*                          Zone;                                              // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ATC_HexZone_C*>                  Out_Chain;                                         // 0x0020(0x0010)(Parm, OutParm)
	class ATC_HexZone_C*                          L_Hex;                                             // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ATC_HexZone_C*>                  L_Chain;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATC_HexZone_C*                          CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue;               // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x005D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x005E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BAE[0x1];                                     // 0x005F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Conv_IntToByte_ReturnValue_1;             // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0066(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0067(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BAF[0x7];                                     // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ATC_HexZone_C*>                  CallFunc_Get_Neighbour_Chain_Out_Chain;            // 0x0070(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TC_HexGraph_C_Get_Neighbour_Chain) == 0x000008, "Wrong alignment on TC_HexGraph_C_Get_Neighbour_Chain");
static_assert(sizeof(TC_HexGraph_C_Get_Neighbour_Chain) == 0x000088, "Wrong size on TC_HexGraph_C_Get_Neighbour_Chain");
static_assert(offsetof(TC_HexGraph_C_Get_Neighbour_Chain, Chain) == 0x000000, "Member 'TC_HexGraph_C_Get_Neighbour_Chain::Chain' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Neighbour_Chain, Team) == 0x000010, "Member 'TC_HexGraph_C_Get_Neighbour_Chain::Team' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Neighbour_Chain, Zone) == 0x000018, "Member 'TC_HexGraph_C_Get_Neighbour_Chain::Zone' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Neighbour_Chain, Out_Chain) == 0x000020, "Member 'TC_HexGraph_C_Get_Neighbour_Chain::Out_Chain' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Neighbour_Chain, L_Hex) == 0x000030, "Member 'TC_HexGraph_C_Get_Neighbour_Chain::L_Hex' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Neighbour_Chain, L_Chain) == 0x000038, "Member 'TC_HexGraph_C_Get_Neighbour_Chain::L_Chain' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Neighbour_Chain, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'TC_HexGraph_C_Get_Neighbour_Chain::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Neighbour_Chain, Temp_int_Array_Index_Variable) == 0x00004C, "Member 'TC_HexGraph_C_Get_Neighbour_Chain::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Neighbour_Chain, CallFunc_Array_Get_Item) == 0x000050, "Member 'TC_HexGraph_C_Get_Neighbour_Chain::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Neighbour_Chain, Temp_int_Loop_Counter_Variable) == 0x000058, "Member 'TC_HexGraph_C_Get_Neighbour_Chain::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Neighbour_Chain, CallFunc_Conv_IntToByte_ReturnValue) == 0x00005C, "Member 'TC_HexGraph_C_Get_Neighbour_Chain::CallFunc_Conv_IntToByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Neighbour_Chain, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00005D, "Member 'TC_HexGraph_C_Get_Neighbour_Chain::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Neighbour_Chain, CallFunc_Less_IntInt_ReturnValue) == 0x00005E, "Member 'TC_HexGraph_C_Get_Neighbour_Chain::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Neighbour_Chain, CallFunc_Add_IntInt_ReturnValue) == 0x000060, "Member 'TC_HexGraph_C_Get_Neighbour_Chain::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Neighbour_Chain, CallFunc_Conv_IntToByte_ReturnValue_1) == 0x000064, "Member 'TC_HexGraph_C_Get_Neighbour_Chain::CallFunc_Conv_IntToByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Neighbour_Chain, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000065, "Member 'TC_HexGraph_C_Get_Neighbour_Chain::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Neighbour_Chain, CallFunc_Array_Contains_ReturnValue) == 0x000066, "Member 'TC_HexGraph_C_Get_Neighbour_Chain::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Neighbour_Chain, CallFunc_Not_PreBool_ReturnValue) == 0x000067, "Member 'TC_HexGraph_C_Get_Neighbour_Chain::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Neighbour_Chain, CallFunc_BooleanAND_ReturnValue) == 0x000068, "Member 'TC_HexGraph_C_Get_Neighbour_Chain::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Neighbour_Chain, CallFunc_Get_Neighbour_Chain_Out_Chain) == 0x000070, "Member 'TC_HexGraph_C_Get_Neighbour_Chain::CallFunc_Get_Neighbour_Chain_Out_Chain' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Neighbour_Chain, CallFunc_Array_AddUnique_ReturnValue) == 0x000080, "Member 'TC_HexGraph_C_Get_Neighbour_Chain::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function TC_HexGraph.TC_HexGraph_C.Get Valid Anchor Hexes
// 0x0108 (0x0108 - 0x0000)
struct TC_HexGraph_C_Get_Valid_Anchor_Hexes final
{
public:
	TArray<class ATC_HexZone_C*>                  Out_Team_1_Hexes;                                  // 0x0000(0x0010)(Parm, OutParm)
	TArray<class ATC_HexZone_C*>                  Out_Team_2_Hexes;                                  // 0x0010(0x0010)(Parm, OutParm)
	TArray<class ATC_HexZone_C*>                  L_T2;                                              // 0x0020(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	class ATC_HexZone_C*                          L_Hex;                                             // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ATC_HexZone_C*>                  L_T1;                                              // 0x0038(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ATC_HexZone_C*                          CallFunc_Array_Get_Item;                           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BB0[0x3];                                     // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue_1;         // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BB1[0x2];                                     // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BB2[0x2];                                     // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0080(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BB3[0x4];                                     // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ATC_HexZone_C*                          CallFunc_Array_Get_Item_1;                         // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetSplineLength_ReturnValue;              // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BB4[0x3];                                     // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetNumberOfSplinePoints_ReturnValue;      // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FindInputKeyClosestToWorldLocation_ReturnValue; // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BB5[0x3];                                     // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x00B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue; // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_1;        // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue_1;                     // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue_1; // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BB6[0x3];                                     // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue_2;        // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue_1;             // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Variable;                                // 0x00EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x00EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2BB7[0x4];                                     // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ATC_HexZone_C*>                  K2Node_Select_Default;                             // 0x00F0(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(TC_HexGraph_C_Get_Valid_Anchor_Hexes) == 0x000008, "Wrong alignment on TC_HexGraph_C_Get_Valid_Anchor_Hexes");
static_assert(sizeof(TC_HexGraph_C_Get_Valid_Anchor_Hexes) == 0x000108, "Wrong size on TC_HexGraph_C_Get_Valid_Anchor_Hexes");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, Out_Team_1_Hexes) == 0x000000, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::Out_Team_1_Hexes' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, Out_Team_2_Hexes) == 0x000010, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::Out_Team_2_Hexes' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, L_T2) == 0x000020, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::L_T2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, L_Hex) == 0x000030, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::L_Hex' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, L_T1) == 0x000038, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::L_T1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, Temp_int_Loop_Counter_Variable) == 0x000048, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_Add_IntInt_ReturnValue) == 0x00004C, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, Temp_int_Array_Index_Variable) == 0x000050, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, Temp_int_Array_Index_Variable_1) == 0x000054, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_Array_Get_Item) == 0x000058, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000060, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_Array_Length_ReturnValue) == 0x000064, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000068, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, K2Node_SwitchInteger_CmpSuccess) == 0x00006C, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_Array_IsValidIndex_ReturnValue_1) == 0x00006D, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_Array_IsValidIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_Array_Add_ReturnValue) == 0x000070, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_Array_Add_ReturnValue_1) == 0x000074, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000078, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000079, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00007C, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000080, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_Array_Get_Item_1) == 0x000090, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_GetSplineLength_ReturnValue) == 0x000098, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_GetSplineLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_Array_Length_ReturnValue_1) == 0x00009C, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_Less_IntInt_ReturnValue) == 0x0000A0, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_GetNumberOfSplinePoints_ReturnValue) == 0x0000A4, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_GetNumberOfSplinePoints_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_FindInputKeyClosestToWorldLocation_ReturnValue) == 0x0000A8, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_FindInputKeyClosestToWorldLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_Greater_IntInt_ReturnValue) == 0x0000AC, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_FTrunc_ReturnValue) == 0x0000B0, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_Conv_IntToFloat_ReturnValue) == 0x0000B4, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue) == 0x0000B8, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_Subtract_FloatFloat_ReturnValue_1) == 0x0000BC, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_Subtract_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_Add_FloatFloat_ReturnValue) == 0x0000C0, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, Temp_int_Loop_Counter_Variable_1) == 0x0000C4, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_FTrunc_ReturnValue_1) == 0x0000C8, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_FTrunc_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue_1) == 0x0000CC, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_GetDistanceAlongSplineAtSplinePoint_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000D0, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_Subtract_FloatFloat_ReturnValue_2) == 0x0000D4, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_Subtract_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000D8, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_Add_IntInt_ReturnValue_1) == 0x0000DC, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_Add_FloatFloat_ReturnValue_1) == 0x0000E0, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_Add_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_Divide_FloatFloat_ReturnValue) == 0x0000E4, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x0000E8, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x0000E9, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, Temp_bool_Variable) == 0x0000EA, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_BooleanOR_ReturnValue) == 0x0000EB, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, K2Node_Select_Default) == 0x0000F0, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(TC_HexGraph_C_Get_Valid_Anchor_Hexes, CallFunc_Array_Add_ReturnValue_2) == 0x000100, "Member 'TC_HexGraph_C_Get_Valid_Anchor_Hexes::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");

}

