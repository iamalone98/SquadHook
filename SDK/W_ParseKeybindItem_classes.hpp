#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_ParseKeybindItem

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_ParseKeybindItem.W_ParseKeybindItem_C
// 0x00D0 (0x0330 - 0x0260)
class UW_ParseKeybindItem_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBorder*                                Border_1;                                          // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             KeybindText;                                       // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                PaddingBorder;                                     // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_1;                                         // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   KeyBind;                                           // 0x0288(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	int32                                         Font_Size;                                         // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43B4[0x4];                                     // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         New_Font;                                          // 0x02A8(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FLinearColor                           BG_Color;                                          // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                Text_Padding;                                      // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMargin                                Internal_Padding;                                  // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_W_ParseKeybindItem(int32 EntryPoint);
	void PreConstruct(bool IsDesignTime);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Parse_Keybind(const class FString& InString, class FText* Short_Name);
	void Get_Short_Name(class FName Action_Name, class FText* Short_Name);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_ParseKeybindItem_C">();
	}
	static class UW_ParseKeybindItem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_ParseKeybindItem_C>();
	}
};
static_assert(alignof(UW_ParseKeybindItem_C) == 0x000008, "Wrong alignment on UW_ParseKeybindItem_C");
static_assert(sizeof(UW_ParseKeybindItem_C) == 0x000330, "Wrong size on UW_ParseKeybindItem_C");
static_assert(offsetof(UW_ParseKeybindItem_C, UberGraphFrame) == 0x000260, "Member 'UW_ParseKeybindItem_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_ParseKeybindItem_C, Border_1) == 0x000268, "Member 'UW_ParseKeybindItem_C::Border_1' has a wrong offset!");
static_assert(offsetof(UW_ParseKeybindItem_C, KeybindText) == 0x000270, "Member 'UW_ParseKeybindItem_C::KeybindText' has a wrong offset!");
static_assert(offsetof(UW_ParseKeybindItem_C, PaddingBorder) == 0x000278, "Member 'UW_ParseKeybindItem_C::PaddingBorder' has a wrong offset!");
static_assert(offsetof(UW_ParseKeybindItem_C, SizeBox_1) == 0x000280, "Member 'UW_ParseKeybindItem_C::SizeBox_1' has a wrong offset!");
static_assert(offsetof(UW_ParseKeybindItem_C, KeyBind) == 0x000288, "Member 'UW_ParseKeybindItem_C::KeyBind' has a wrong offset!");
static_assert(offsetof(UW_ParseKeybindItem_C, Font_Size) == 0x0002A0, "Member 'UW_ParseKeybindItem_C::Font_Size' has a wrong offset!");
static_assert(offsetof(UW_ParseKeybindItem_C, New_Font) == 0x0002A8, "Member 'UW_ParseKeybindItem_C::New_Font' has a wrong offset!");
static_assert(offsetof(UW_ParseKeybindItem_C, BG_Color) == 0x000300, "Member 'UW_ParseKeybindItem_C::BG_Color' has a wrong offset!");
static_assert(offsetof(UW_ParseKeybindItem_C, Text_Padding) == 0x000310, "Member 'UW_ParseKeybindItem_C::Text_Padding' has a wrong offset!");
static_assert(offsetof(UW_ParseKeybindItem_C, Internal_Padding) == 0x000320, "Member 'UW_ParseKeybindItem_C::Internal_Padding' has a wrong offset!");

}

