#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AudioWindow

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ScreenResolutionStruct_structs.hpp"
#include "MediaAssets_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass AudioWindow.AudioWindow_C
// 0x00F0 (0x0350 - 0x0260)
class UAudioWindow_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USettingsComboboxItem_C*                AudioInputDevice;                                  // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingsComboboxItem_C*                AUDIOOUTPUTDEVICE;                                 // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingsItem_GraphicsToggle_C*         AUDIOQUALITY;                                      // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingsItem_Slider_LR_C*              COMMANDVOICEBALANCE;                               // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingsItem_Slider_C*                 COMMANDVOICEVOLUME;                                // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingsItem_Slider_C*                 EffectsVolume;                                     // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingsItem_Slider_C*                 LOCALVOICEVOLUME;                                  // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingsItem_Slider_C*                 MasterVolume;                                      // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingsItem_Slider_C*                 MusicVolume;                                       // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingsItem_Slider_C*                 OUTOFGAMEVOLUME;                                   // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingsItem_Slider_C*                 PrioritySpeakerDucking;                            // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScrollBox*                             ScrollBox;                                         // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Separator0;                                        // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Separator1;                                        // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingsItem_Slider_LR_C*              SQUADVOICEBALANCE;                                 // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingsItem_Slider_C*                 SquadVoiceVolume;                                  // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingsItem_TickBox_C*                ToggleCOMMANDBEEP;                                 // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingsItem_TickBox_C*                ToggleLeaderOnlyBias;                              // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingsItem_TickBox_C*                ToggleRADIOFILTER;                                 // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingsItem_TickBox_C*                ToggleSQUADBEEP;                                   // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USettingsItem_Slider_C*                 UIVolume;                                          // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_MicrophoneVolume_C*                  W_MicrophoneVolume;                                // 0x0310(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<struct FScreenResolutionStruct>        ScreenResolutions;                                 // 0x0318(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FScreenResolutionStruct>        ValidResolutions;                                  // 0x0328(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         CheckForNewInputDevicesLoopPeriod;                 // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35D4[0x4];                                     // 0x033C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMediaCaptureDevice>            Cached_Input_Devices;                              // 0x0340(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_AudioWindow(int32 EntryPoint);
	void TimerUpdateInputDevices();
	void Construct();
	void BndEvt__AUDIOINPUTDEVICE_K2Node_ComponentBoundEvent_3_OnValueChanged__DelegateSignature(const class FString& Option, int32 Param_Index);
	void BndEvt__AUDIOOUTPUTDEVICE_K2Node_ComponentBoundEvent_1_OnValueChanged__DelegateSignature(const class FString& Option, int32 Param_Index);
	void BndEvt__ToggleLeaderOnlyBias_K2Node_ComponentBoundEvent_0_OnClicked__DelegateSignature(bool bSelected, class USettingsItem_TickBox_C* Button);
	void BndEvt__PrioritySpeakerDucking_K2Node_ComponentBoundEvent_1_OnValueChanged__DelegateSignature(float Value);
	void BndEvt__SquadVoiceBias_K2Node_ComponentBoundEvent_2_OnValueChanged__DelegateSignature(float Value);
	void BndEvt__CommandVoiceBias_K2Node_ComponentBoundEvent_0_OnValueChanged__DelegateSignature(float Value);
	void BndEvt__MUSICNEW_K2Node_ComponentBoundEvent_27_OnCaptureEnd__DelegateSignature(float Value);
	void Default();
	void Revert();
	void Apply();
	void BndEvt__LOCALVOICENEW_K2Node_ComponentBoundEvent_45_OnValueChanged__DelegateSignature(float Value);
	void BndEvt__VOICENEW_K2Node_ComponentBoundEvent_30_OnValueChanged__DelegateSignature(float Value);
	void BndEvt__COMMANDVOICENEW_K2Node_ComponentBoundEvent_27_OnValueChanged__DelegateSignature(float Value);
	void BndEvt__OUTOFGAMENEW_K2Node_ComponentBoundEvent_150_OnValueChanged__DelegateSignature(float Value);
	void BndEvt__UINEW_K2Node_ComponentBoundEvent_82_OnValueChanged__DelegateSignature(float Value);
	void BndEvt__EFFECTSNEW_K2Node_ComponentBoundEvent_49_OnValueChanged__DelegateSignature(float Value);
	void BndEvt__MASTERNEW_K2Node_ComponentBoundEvent_33_OnValueChanged__DelegateSignature(float Value);
	void BndEvt__ToggleRADIO_K2Node_ComponentBoundEvent_10_OnClicked__DelegateSignature(bool bSelected, class USettingsItem_TickBox_C* Button);
	void BndEvt__ToggleSQUADBEEP_K2Node_ComponentBoundEvent_9_OnClicked__DelegateSignature(bool bSelected, class USettingsItem_TickBox_C* Button);
	void BndEvt__ToggleCOMMANDBEEP_K2Node_ComponentBoundEvent_8_OnClicked__DelegateSignature(bool bSelected, class USettingsItem_TickBox_C* Button);
	void BndEvt__AUDIONEW_K2Node_ComponentBoundEvent_51_OnButtonClick__DelegateSignature(int32 ButtonNumber, class USettingsItem_GraphicsToggle_C* ToggleItem);
	void UpdateButtons();
	class UWidget* Get_OUTOFGAMENEW_ToolTipWidget_0();
	class UWidget* Get_ToggleCOMMANDBEEP_ToolTipWidget_0();
	class UWidget* Get_ToggleSQUADBEEP_ToolTipWidget_0();
	void Update_Input_Devices();
	class UWidget* Get_AUDIOQUALITY_ToolTipWidget_0();
	class UWidget* Get_AUDIOOUTPUTDEVICE_ToolTipWidget_0();
	class UWidget* Get_AUDIOINPUTDEVICE_ToolTipWidget_0();
	class UWidget* Get_COMMANDVOICEVOLUME_ToolTipWidget_0();
	class UWidget* Get_COMMANDVOICEBALANCE_ToolTipWidget_0();
	class UWidget* Get_SQUADVOICEVOLUME_ToolTipWidget_0();
	class UWidget* Get_SQUADVOICEBALANCE_ToolTipWidget_0();
	class UWidget* Get_LOCALVOICEVOLUME_ToolTipWidget_0();
	class UWidget* Get_PrioritySpeakerDucking_ToolTipWidget_0();
	class UWidget* Get_ToggleRADIOFILTER_ToolTipWidget_0();
	class UWidget* Get_ToggleLeaderOnlyBias_ToolTipWidget_0();
	void Update_Output_Devices();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AudioWindow_C">();
	}
	static class UAudioWindow_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioWindow_C>();
	}
};
static_assert(alignof(UAudioWindow_C) == 0x000008, "Wrong alignment on UAudioWindow_C");
static_assert(sizeof(UAudioWindow_C) == 0x000350, "Wrong size on UAudioWindow_C");
static_assert(offsetof(UAudioWindow_C, UberGraphFrame) == 0x000260, "Member 'UAudioWindow_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAudioWindow_C, AudioInputDevice) == 0x000268, "Member 'UAudioWindow_C::AudioInputDevice' has a wrong offset!");
static_assert(offsetof(UAudioWindow_C, AUDIOOUTPUTDEVICE) == 0x000270, "Member 'UAudioWindow_C::AUDIOOUTPUTDEVICE' has a wrong offset!");
static_assert(offsetof(UAudioWindow_C, AUDIOQUALITY) == 0x000278, "Member 'UAudioWindow_C::AUDIOQUALITY' has a wrong offset!");
static_assert(offsetof(UAudioWindow_C, COMMANDVOICEBALANCE) == 0x000280, "Member 'UAudioWindow_C::COMMANDVOICEBALANCE' has a wrong offset!");
static_assert(offsetof(UAudioWindow_C, COMMANDVOICEVOLUME) == 0x000288, "Member 'UAudioWindow_C::COMMANDVOICEVOLUME' has a wrong offset!");
static_assert(offsetof(UAudioWindow_C, EffectsVolume) == 0x000290, "Member 'UAudioWindow_C::EffectsVolume' has a wrong offset!");
static_assert(offsetof(UAudioWindow_C, LOCALVOICEVOLUME) == 0x000298, "Member 'UAudioWindow_C::LOCALVOICEVOLUME' has a wrong offset!");
static_assert(offsetof(UAudioWindow_C, MasterVolume) == 0x0002A0, "Member 'UAudioWindow_C::MasterVolume' has a wrong offset!");
static_assert(offsetof(UAudioWindow_C, MusicVolume) == 0x0002A8, "Member 'UAudioWindow_C::MusicVolume' has a wrong offset!");
static_assert(offsetof(UAudioWindow_C, OUTOFGAMEVOLUME) == 0x0002B0, "Member 'UAudioWindow_C::OUTOFGAMEVOLUME' has a wrong offset!");
static_assert(offsetof(UAudioWindow_C, PrioritySpeakerDucking) == 0x0002B8, "Member 'UAudioWindow_C::PrioritySpeakerDucking' has a wrong offset!");
static_assert(offsetof(UAudioWindow_C, ScrollBox) == 0x0002C0, "Member 'UAudioWindow_C::ScrollBox' has a wrong offset!");
static_assert(offsetof(UAudioWindow_C, Separator0) == 0x0002C8, "Member 'UAudioWindow_C::Separator0' has a wrong offset!");
static_assert(offsetof(UAudioWindow_C, Separator1) == 0x0002D0, "Member 'UAudioWindow_C::Separator1' has a wrong offset!");
static_assert(offsetof(UAudioWindow_C, SQUADVOICEBALANCE) == 0x0002D8, "Member 'UAudioWindow_C::SQUADVOICEBALANCE' has a wrong offset!");
static_assert(offsetof(UAudioWindow_C, SquadVoiceVolume) == 0x0002E0, "Member 'UAudioWindow_C::SquadVoiceVolume' has a wrong offset!");
static_assert(offsetof(UAudioWindow_C, ToggleCOMMANDBEEP) == 0x0002E8, "Member 'UAudioWindow_C::ToggleCOMMANDBEEP' has a wrong offset!");
static_assert(offsetof(UAudioWindow_C, ToggleLeaderOnlyBias) == 0x0002F0, "Member 'UAudioWindow_C::ToggleLeaderOnlyBias' has a wrong offset!");
static_assert(offsetof(UAudioWindow_C, ToggleRADIOFILTER) == 0x0002F8, "Member 'UAudioWindow_C::ToggleRADIOFILTER' has a wrong offset!");
static_assert(offsetof(UAudioWindow_C, ToggleSQUADBEEP) == 0x000300, "Member 'UAudioWindow_C::ToggleSQUADBEEP' has a wrong offset!");
static_assert(offsetof(UAudioWindow_C, UIVolume) == 0x000308, "Member 'UAudioWindow_C::UIVolume' has a wrong offset!");
static_assert(offsetof(UAudioWindow_C, W_MicrophoneVolume) == 0x000310, "Member 'UAudioWindow_C::W_MicrophoneVolume' has a wrong offset!");
static_assert(offsetof(UAudioWindow_C, ScreenResolutions) == 0x000318, "Member 'UAudioWindow_C::ScreenResolutions' has a wrong offset!");
static_assert(offsetof(UAudioWindow_C, ValidResolutions) == 0x000328, "Member 'UAudioWindow_C::ValidResolutions' has a wrong offset!");
static_assert(offsetof(UAudioWindow_C, CheckForNewInputDevicesLoopPeriod) == 0x000338, "Member 'UAudioWindow_C::CheckForNewInputDevicesLoopPeriod' has a wrong offset!");
static_assert(offsetof(UAudioWindow_C, Cached_Input_Devices) == 0x000340, "Member 'UAudioWindow_C::Cached_Input_Devices' has a wrong offset!");

}

