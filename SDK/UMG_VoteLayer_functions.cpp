#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UMG_VoteLayer

#include "Basic.hpp"

#include "UMG_VoteLayer_classes.hpp"
#include "UMG_VoteLayer_parameters.hpp"


namespace SDK
{

// Function UMG_VoteLayer.UMG_VoteLayer_C.LayerInfoRequested__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             LayerID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUMG_VoteLayer_C::LayerInfoRequested__DelegateSignature(class FName LayerID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMG_VoteLayer_C", "LayerInfoRequested__DelegateSignature");

	Params::UMG_VoteLayer_C_LayerInfoRequested__DelegateSignature Parms{};

	Parms.LayerID = LayerID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UMG_VoteLayer.UMG_VoteLayer_C.ExecuteUbergraph_UMG_VoteLayer
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUMG_VoteLayer_C::ExecuteUbergraph_UMG_VoteLayer(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMG_VoteLayer_C", "ExecuteUbergraph_UMG_VoteLayer");

	Params::UMG_VoteLayer_C_ExecuteUbergraph_UMG_VoteLayer Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UMG_VoteLayer.UMG_VoteLayer_C.OnVoteUpdatedByID
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ChoiceId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUMG_VoteLayer_C::OnVoteUpdatedByID(class FName ChoiceId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMG_VoteLayer_C", "OnVoteUpdatedByID");

	Params::UMG_VoteLayer_C_OnVoteUpdatedByID Parms{};

	Parms.ChoiceId = ChoiceId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UMG_VoteLayer.UMG_VoteLayer_C.OnSetup
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             TeamName                                               (BlueprintVisible, BlueprintReadOnly, Parm)
// class FName                             Param_PlayerName                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUMG_VoteLayer_C::OnSetup(const class FText& TeamName, class FName Param_PlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMG_VoteLayer_C", "OnSetup");

	Params::UMG_VoteLayer_C_OnSetup Parms{};

	Parms.TeamName = std::move(TeamName);
	Parms.Param_PlayerName = Param_PlayerName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UMG_VoteLayer.UMG_VoteLayer_C.SetVoteScreenActive
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Activated                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUMG_VoteLayer_C::SetVoteScreenActive(bool Activated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMG_VoteLayer_C", "SetVoteScreenActive");

	Params::UMG_VoteLayer_C_SetVoteScreenActive Parms{};

	Parms.Activated = Activated;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UMG_VoteLayer.UMG_VoteLayer_C.OnVoteEnded
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQVoteSessionClient*             VoteSession                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSQChoice                        Winner                                                 (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UUMG_VoteLayer_C::OnVoteEnded(class USQVoteSessionClient* VoteSession, const struct FSQChoice& Winner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMG_VoteLayer_C", "OnVoteEnded");

	Params::UMG_VoteLayer_C_OnVoteEnded Parms{};

	Parms.VoteSession = VoteSession;
	Parms.Winner = std::move(Winner);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UMG_VoteLayer.UMG_VoteLayer_C.OnVoteUpdated
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQVoteSessionClient*             VoteSession                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerCurrentVoteCount                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUMG_VoteLayer_C::OnVoteUpdated(class USQVoteSessionClient* VoteSession, int32 PlayerCurrentVoteCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMG_VoteLayer_C", "OnVoteUpdated");

	Params::UMG_VoteLayer_C_OnVoteUpdated Parms{};

	Parms.VoteSession = VoteSession;
	Parms.PlayerCurrentVoteCount = PlayerCurrentVoteCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UMG_VoteLayer.UMG_VoteLayer_C.OnVoteStarted
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQVoteSessionClient*             VoteSession                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    VotePossible                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUMG_VoteLayer_C::OnVoteStarted(class USQVoteSessionClient* VoteSession, bool VotePossible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMG_VoteLayer_C", "OnVoteStarted");

	Params::UMG_VoteLayer_C_OnVoteStarted Parms{};

	Parms.VoteSession = VoteSession;
	Parms.VotePossible = VotePossible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UMG_VoteLayer.UMG_VoteLayer_C.Generate Items
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQVoteSessionClient*             Vote_Session                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUMG_VoteLayer_C::Generate_Items(class USQVoteSessionClient* Vote_Session)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMG_VoteLayer_C", "Generate Items");

	Params::UMG_VoteLayer_C_Generate_Items Parms{};

	Parms.Vote_Session = Vote_Session;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UMG_VoteLayer.UMG_VoteLayer_C.Update Choices
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQVoteSessionClient*             Vote_Session                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Player_Current_Vote_Count                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUMG_VoteLayer_C::Update_Choices(class USQVoteSessionClient* Vote_Session, int32 Player_Current_Vote_Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMG_VoteLayer_C", "Update Choices");

	Params::UMG_VoteLayer_C_Update_Choices Parms{};

	Parms.Vote_Session = Vote_Session;
	Parms.Player_Current_Vote_Count = Player_Current_Vote_Count;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UMG_VoteLayer.UMG_VoteLayer_C.Display Result
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USQVoteSession*                   VoteSession                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSQChoice                        SQChoice                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)

void UUMG_VoteLayer_C::Display_Result(class USQVoteSession* VoteSession, const struct FSQChoice& SQChoice)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMG_VoteLayer_C", "Display Result");

	Params::UMG_VoteLayer_C_Display_Result Parms{};

	Parms.VoteSession = VoteSession;
	Parms.SQChoice = std::move(SQChoice);

	UObject::ProcessEvent(Func, &Parms);
}


// Function UMG_VoteLayer.UMG_VoteLayer_C.OnChoiceSelected
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Choice                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUMG_VoteLayer_C::OnChoiceSelected(class FName Choice)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMG_VoteLayer_C", "OnChoiceSelected");

	Params::UMG_VoteLayer_C_OnChoiceSelected Parms{};

	Parms.Choice = Choice;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UMG_VoteLayer.UMG_VoteLayer_C.UpdateChoiceByID
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ChoiceId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUMG_VoteLayer_C::UpdateChoiceByID(class FName ChoiceId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMG_VoteLayer_C", "UpdateChoiceByID");

	Params::UMG_VoteLayer_C_UpdateChoiceByID Parms{};

	Parms.ChoiceId = ChoiceId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UMG_VoteLayer.UMG_VoteLayer_C.OnInfoSelected
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ChoiceId                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUMG_VoteLayer_C::OnInfoSelected(class FName ChoiceId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMG_VoteLayer_C", "OnInfoSelected");

	Params::UMG_VoteLayer_C_OnInfoSelected Parms{};

	Parms.ChoiceId = ChoiceId;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UMG_VoteLayer.UMG_VoteLayer_C.GetLayerInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_SQLayer_C*                    InLayer                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText                             DisplayName                                            (Parm, OutParm)
// TSoftObjectPtr<class UTexture2D>        Thumbnail                                              (Parm, OutParm, HasGetValueTypeHash)

void UUMG_VoteLayer_C::GetLayerInfo(class UBP_SQLayer_C* InLayer, class FText* DisplayName, TSoftObjectPtr<class UTexture2D>* Thumbnail)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMG_VoteLayer_C", "GetLayerInfo");

	Params::UMG_VoteLayer_C_GetLayerInfo Parms{};

	Parms.InLayer = InLayer;

	UObject::ProcessEvent(Func, &Parms);

	if (DisplayName != nullptr)
		*DisplayName = std::move(Parms.DisplayName);

	if (Thumbnail != nullptr)
		*Thumbnail = Parms.Thumbnail;
}

}

