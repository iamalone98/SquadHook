#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UMG_VoteLevelEntry

#include "Basic.hpp"

#include "UMG_VoteLevelEntry_classes.hpp"
#include "UMG_VoteLevelEntry_parameters.hpp"


namespace SDK
{

// Function UMG_VoteLevelEntry.UMG_VoteLevelEntry_C.ExecuteUbergraph_UMG_VoteLevelEntry
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUMG_VoteLevelEntry_C::ExecuteUbergraph_UMG_VoteLevelEntry(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMG_VoteLevelEntry_C", "ExecuteUbergraph_UMG_VoteLevelEntry");

	Params::UMG_VoteLevelEntry_C_ExecuteUbergraph_UMG_VoteLevelEntry Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UMG_VoteLevelEntry.UMG_VoteLevelEntry_C.InitItem
// (BlueprintCallable, BlueprintEvent)

void UUMG_VoteLevelEntry_C::InitItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMG_VoteLevelEntry_C", "InitItem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function UMG_VoteLevelEntry.UMG_VoteLevelEntry_C.OnEndVote
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsWinner                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUMG_VoteLevelEntry_C::OnEndVote(bool IsWinner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMG_VoteLevelEntry_C", "OnEndVote");

	Params::UMG_VoteLevelEntry_C_OnEndVote Parms{};

	Parms.IsWinner = IsWinner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UMG_VoteLevelEntry.UMG_VoteLevelEntry_C.OnUpdateVote
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_VoteCount                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HasVotedFor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUMG_VoteLevelEntry_C::OnUpdateVote(int32 Param_VoteCount, bool HasVotedFor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMG_VoteLevelEntry_C", "OnUpdateVote");

	Params::UMG_VoteLevelEntry_C_OnUpdateVote Parms{};

	Parms.Param_VoteCount = Param_VoteCount;
	Parms.HasVotedFor = HasVotedFor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UMG_VoteLevelEntry.UMG_VoteLevelEntry_C.UpdateStatus
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Vote_Count                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Has_Voted_For                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UUMG_VoteLevelEntry_C::UpdateStatus(int32 Vote_Count, bool Has_Voted_For)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMG_VoteLevelEntry_C", "UpdateStatus");

	Params::UMG_VoteLevelEntry_C_UpdateStatus Parms{};

	Parms.Vote_Count = Vote_Count;
	Parms.Has_Voted_For = Has_Voted_For;

	UObject::ProcessEvent(Func, &Parms);
}


// Function UMG_VoteLevelEntry.UMG_VoteLevelEntry_C.InitDescription
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UUMG_VoteLevelEntry_C::InitDescription()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UMG_VoteLevelEntry_C", "InitDescription");

	UObject::ProcessEvent(Func, nullptr);
}

}

