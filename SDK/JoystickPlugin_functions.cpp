#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: JoystickPlugin

#include "Basic.hpp"

#include "JoystickPlugin_classes.hpp"
#include "JoystickPlugin_parameters.hpp"


namespace SDK
{

// Function JoystickPlugin.JoystickFunctions.GetJoystick
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   DeviceID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FJoystickInfo                    ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FJoystickInfo UJoystickFunctions::GetJoystick(int32 DeviceID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JoystickFunctions", "GetJoystick");

	Params::JoystickFunctions_GetJoystick Parms{};

	Parms.DeviceID = DeviceID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JoystickPlugin.JoystickFunctions.GetJoystickState
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   DeviceID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FJoystickState                   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FJoystickState UJoystickFunctions::GetJoystickState(int32 DeviceID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JoystickFunctions", "GetJoystickState");

	Params::JoystickFunctions_GetJoystickState Parms{};

	Parms.DeviceID = DeviceID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JoystickPlugin.JoystickFunctions.GetPreviousJoystickState
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   DeviceID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FJoystickState                   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FJoystickState UJoystickFunctions::GetPreviousJoystickState(int32 DeviceID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JoystickFunctions", "GetPreviousJoystickState");

	Params::JoystickFunctions_GetPreviousJoystickState Parms{};

	Parms.DeviceID = DeviceID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JoystickPlugin.JoystickFunctions.IgnoreGameControllers
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bIgnore                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJoystickFunctions::IgnoreGameControllers(bool bIgnore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JoystickFunctions", "IgnoreGameControllers");

	Params::JoystickFunctions_IgnoreGameControllers Parms{};

	Parms.bIgnore = bIgnore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JoystickPlugin.JoystickFunctions.JoystickCount
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UJoystickFunctions::JoystickCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JoystickFunctions", "JoystickCount");

	Params::JoystickFunctions_JoystickCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JoystickPlugin.JoystickFunctions.MapJoystickDeviceToPlayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   DeviceID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJoystickFunctions::MapJoystickDeviceToPlayer(int32 DeviceID, int32 Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JoystickFunctions", "MapJoystickDeviceToPlayer");

	Params::JoystickFunctions_MapJoystickDeviceToPlayer Parms{};

	Parms.DeviceID = DeviceID;
	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JoystickPlugin.JoystickFunctions.POVAxis
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EJoystickPOVDirection                   Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UJoystickFunctions::POVAxis(EJoystickPOVDirection Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JoystickFunctions", "POVAxis");

	Params::JoystickFunctions_POVAxis Parms{};

	Parms.Direction = Direction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JoystickPlugin.JoystickFunctions.RegisterForJoystickEvents
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Listener                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJoystickFunctions::RegisterForJoystickEvents(class UObject* Listener)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("JoystickFunctions", "RegisterForJoystickEvents");

	Params::JoystickFunctions_RegisterForJoystickEvents Parms{};

	Parms.Listener = Listener;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JoystickPlugin.JoystickInterface.JoystickAxisChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   Axis                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ValuePrev                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FJoystickState                   State                                                  (Parm, NativeAccessSpecifierPublic)
// struct FJoystickState                   Prev                                                   (Parm, NativeAccessSpecifierPublic)

void IJoystickInterface::JoystickAxisChanged(int32 Axis, float Value, float ValuePrev, const struct FJoystickState& State, const struct FJoystickState& Prev)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JoystickInterface", "JoystickAxisChanged");

	Params::JoystickInterface_JoystickAxisChanged Parms{};

	Parms.Axis = Axis;
	Parms.Value = Value;
	Parms.ValuePrev = ValuePrev;
	Parms.State = std::move(State);
	Parms.Prev = std::move(Prev);

	UObject::ProcessEvent(Func, &Parms);
}


// Function JoystickPlugin.JoystickInterface.JoystickBallMoved
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// int32                                   Ball                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        Delta                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FJoystickState                   State                                                  (Parm, NativeAccessSpecifierPublic)

void IJoystickInterface::JoystickBallMoved(int32 Ball, const struct FVector2D& Delta, const struct FJoystickState& State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JoystickInterface", "JoystickBallMoved");

	Params::JoystickInterface_JoystickBallMoved Parms{};

	Parms.Ball = Ball;
	Parms.Delta = std::move(Delta);
	Parms.State = std::move(State);

	UObject::ProcessEvent(Func, &Parms);
}


// Function JoystickPlugin.JoystickInterface.JoystickButtonPressed
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   Button                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FJoystickState                   State                                                  (Parm, NativeAccessSpecifierPublic)

void IJoystickInterface::JoystickButtonPressed(int32 Button, const struct FJoystickState& State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JoystickInterface", "JoystickButtonPressed");

	Params::JoystickInterface_JoystickButtonPressed Parms{};

	Parms.Button = Button;
	Parms.State = std::move(State);

	UObject::ProcessEvent(Func, &Parms);
}


// Function JoystickPlugin.JoystickInterface.JoystickButtonReleased
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   Button                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FJoystickState                   State                                                  (Parm, NativeAccessSpecifierPublic)

void IJoystickInterface::JoystickButtonReleased(int32 Button, const struct FJoystickState& State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JoystickInterface", "JoystickButtonReleased");

	Params::JoystickInterface_JoystickButtonReleased Parms{};

	Parms.Button = Button;
	Parms.State = std::move(State);

	UObject::ProcessEvent(Func, &Parms);
}


// Function JoystickPlugin.JoystickInterface.JoystickHatChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   Hat                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EJoystickPOVDirection                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FJoystickState                   State                                                  (Parm, NativeAccessSpecifierPublic)

void IJoystickInterface::JoystickHatChanged(int32 Hat, EJoystickPOVDirection Value, const struct FJoystickState& State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JoystickInterface", "JoystickHatChanged");

	Params::JoystickInterface_JoystickHatChanged Parms{};

	Parms.Hat = Hat;
	Parms.Value = Value;
	Parms.State = std::move(State);

	UObject::ProcessEvent(Func, &Parms);
}


// Function JoystickPlugin.JoystickInterface.JoystickPluggedIn
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   DeviceID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IJoystickInterface::JoystickPluggedIn(int32 DeviceID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JoystickInterface", "JoystickPluggedIn");

	Params::JoystickInterface_JoystickPluggedIn Parms{};

	Parms.DeviceID = DeviceID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function JoystickPlugin.JoystickInterface.JoystickUnplugged
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   DeviceID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IJoystickInterface::JoystickUnplugged(int32 DeviceID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JoystickInterface", "JoystickUnplugged");

	Params::JoystickInterface_JoystickUnplugged Parms{};

	Parms.DeviceID = DeviceID;

	UObject::ProcessEvent(Func, &Parms);
}

}

