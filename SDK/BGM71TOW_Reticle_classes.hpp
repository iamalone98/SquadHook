#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BGM71TOW_Reticle

#include "Basic.hpp"

#include "BP_GenericATGMReticleWidget_classes.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass BGM71TOW_Reticle.BGM71TOW_Reticle_C
// 0x0068 (0x0348 - 0x02E0)
class UBGM71TOW_Reticle_C final : public UBP_GenericATGMReticleWidget_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BGM71TOW_Reticle_C;                 // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCanvasPanel*                           CanvasPanel_18;                                    // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             Rangefinder_text;                                  // 0x02F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 UnzoomedImage;                                     // 0x02F8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 UnzoomedImage_Glow;                                // 0x0300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ZoomedImage;                                       // 0x0308(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FRotator                               LastRot;                                           // 0x0310(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         OffsetX;                                           // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               RotInterp;                                         // 0x0320(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4EA7[0x4];                                     // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ParentWeapon;                                      // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OffsetY;                                           // 0x0338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Range;                                             // 0x033C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ASQVehicleWeaponTOW*                    As_SQVehicle_Weapon_TOW;                           // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BGM71TOW_Reticle(int32 EntryPoint);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void Construct();
	void RangeFinder();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BGM71TOW_Reticle_C">();
	}
	static class UBGM71TOW_Reticle_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBGM71TOW_Reticle_C>();
	}
};
static_assert(alignof(UBGM71TOW_Reticle_C) == 0x000008, "Wrong alignment on UBGM71TOW_Reticle_C");
static_assert(sizeof(UBGM71TOW_Reticle_C) == 0x000348, "Wrong size on UBGM71TOW_Reticle_C");
static_assert(offsetof(UBGM71TOW_Reticle_C, UberGraphFrame_BGM71TOW_Reticle_C) == 0x0002E0, "Member 'UBGM71TOW_Reticle_C::UberGraphFrame_BGM71TOW_Reticle_C' has a wrong offset!");
static_assert(offsetof(UBGM71TOW_Reticle_C, CanvasPanel_18) == 0x0002E8, "Member 'UBGM71TOW_Reticle_C::CanvasPanel_18' has a wrong offset!");
static_assert(offsetof(UBGM71TOW_Reticle_C, Rangefinder_text) == 0x0002F0, "Member 'UBGM71TOW_Reticle_C::Rangefinder_text' has a wrong offset!");
static_assert(offsetof(UBGM71TOW_Reticle_C, UnzoomedImage) == 0x0002F8, "Member 'UBGM71TOW_Reticle_C::UnzoomedImage' has a wrong offset!");
static_assert(offsetof(UBGM71TOW_Reticle_C, UnzoomedImage_Glow) == 0x000300, "Member 'UBGM71TOW_Reticle_C::UnzoomedImage_Glow' has a wrong offset!");
static_assert(offsetof(UBGM71TOW_Reticle_C, ZoomedImage) == 0x000308, "Member 'UBGM71TOW_Reticle_C::ZoomedImage' has a wrong offset!");
static_assert(offsetof(UBGM71TOW_Reticle_C, LastRot) == 0x000310, "Member 'UBGM71TOW_Reticle_C::LastRot' has a wrong offset!");
static_assert(offsetof(UBGM71TOW_Reticle_C, OffsetX) == 0x00031C, "Member 'UBGM71TOW_Reticle_C::OffsetX' has a wrong offset!");
static_assert(offsetof(UBGM71TOW_Reticle_C, RotInterp) == 0x000320, "Member 'UBGM71TOW_Reticle_C::RotInterp' has a wrong offset!");
static_assert(offsetof(UBGM71TOW_Reticle_C, ParentWeapon) == 0x000330, "Member 'UBGM71TOW_Reticle_C::ParentWeapon' has a wrong offset!");
static_assert(offsetof(UBGM71TOW_Reticle_C, OffsetY) == 0x000338, "Member 'UBGM71TOW_Reticle_C::OffsetY' has a wrong offset!");
static_assert(offsetof(UBGM71TOW_Reticle_C, Range) == 0x00033C, "Member 'UBGM71TOW_Reticle_C::Range' has a wrong offset!");
static_assert(offsetof(UBGM71TOW_Reticle_C, As_SQVehicle_Weapon_TOW) == 0x000340, "Member 'UBGM71TOW_Reticle_C::As_SQVehicle_Weapon_TOW' has a wrong offset!");

}

