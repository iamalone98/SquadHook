#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TCScalableBleedComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass TCScalableBleedComponent.TCScalableBleedComponent_C
// 0x00A0 (0x0150 - 0x00B0)
class UTCScalableBleedComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<float>                                 BleedThresholds;                                   // 0x00B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bInterpolateBleedValues;                           // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4345[0x7];                                     // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<float, int32>                            BleedScaleMap;                                     // 0x00D0(0x0050)(Edit, BlueprintVisible)
	int32                                         Minimum_of_Hexes_Required_for_Bleed;               // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4346[0x4];                                     // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Current_Bleed;                                     // 0x0128(0x0010)(Edit, BlueprintVisible, Net)
	TArray<class ATC_HexZone_C*>                  All_TC_Zones;                                      // 0x0138(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UCurveFloat*                            Ticket_Bleed_Curve;                                // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_TCScalableBleedComponent(int32 EntryPoint);
	void Apply_Bleed_Per_Minute();
	void ReceiveBeginPlay();
	void Update_Bleed_Count();
	void Initialise_TC_Bleed_Component(TArray<class ATC_HexZone_C*>& Param_All_TC_Zones);
	void Get_Current_Bleed(int32 Team_ID, int32* Bleed_Per_Min);
	void InitBleedThresholds();
	void CalcBleedValue(int32 Zones_captured, int32* Bleed_Value);
	void CalcBleedValue_Curve(int32 Zones_captured, int32* Bleed_Value);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"TCScalableBleedComponent_C">();
	}
	static class UTCScalableBleedComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTCScalableBleedComponent_C>();
	}
};
static_assert(alignof(UTCScalableBleedComponent_C) == 0x000008, "Wrong alignment on UTCScalableBleedComponent_C");
static_assert(sizeof(UTCScalableBleedComponent_C) == 0x000150, "Wrong size on UTCScalableBleedComponent_C");
static_assert(offsetof(UTCScalableBleedComponent_C, UberGraphFrame) == 0x0000B0, "Member 'UTCScalableBleedComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UTCScalableBleedComponent_C, BleedThresholds) == 0x0000B8, "Member 'UTCScalableBleedComponent_C::BleedThresholds' has a wrong offset!");
static_assert(offsetof(UTCScalableBleedComponent_C, bInterpolateBleedValues) == 0x0000C8, "Member 'UTCScalableBleedComponent_C::bInterpolateBleedValues' has a wrong offset!");
static_assert(offsetof(UTCScalableBleedComponent_C, BleedScaleMap) == 0x0000D0, "Member 'UTCScalableBleedComponent_C::BleedScaleMap' has a wrong offset!");
static_assert(offsetof(UTCScalableBleedComponent_C, Minimum_of_Hexes_Required_for_Bleed) == 0x000120, "Member 'UTCScalableBleedComponent_C::Minimum_of_Hexes_Required_for_Bleed' has a wrong offset!");
static_assert(offsetof(UTCScalableBleedComponent_C, Current_Bleed) == 0x000128, "Member 'UTCScalableBleedComponent_C::Current_Bleed' has a wrong offset!");
static_assert(offsetof(UTCScalableBleedComponent_C, All_TC_Zones) == 0x000138, "Member 'UTCScalableBleedComponent_C::All_TC_Zones' has a wrong offset!");
static_assert(offsetof(UTCScalableBleedComponent_C, Ticket_Bleed_Curve) == 0x000148, "Member 'UTCScalableBleedComponent_C::Ticket_Bleed_Curve' has a wrong offset!");

}

