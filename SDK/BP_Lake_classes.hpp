#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Lake

#include "Basic.hpp"

#include "SQWater_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Lake.BP_Lake_C
// 0x0058 (0x02C8 - 0x0270)
class ABP_Lake_C : public ASQLake
{
public:
	class UMaterialInstanceDynamic*               Lake_MID;                                          // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Lake_PP_MID;                                       // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Waterline_Base_Material;                           // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Surface_Base_Material;                             // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FFT_Speed;                                         // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FFT_Intensity;                                     // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Metallic;                                          // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Specular;                                          // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Roughness;                                         // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B77[0x4];                                     // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               FFT_Height_Tex;                                    // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               FFT_Normal_Tex;                                    // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              FFT_Scales_Close;                                  // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FFT_Scale_Far;                                     // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FFT_Far_Transition_Distance;                       // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void Create_Lake_MID();
	void Set_Shader_Params();
	void Set_FFTs(class UMaterialInstanceDynamic* Target, bool Setup_Normal);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Lake_C">();
	}
	static class ABP_Lake_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Lake_C>();
	}
};
static_assert(alignof(ABP_Lake_C) == 0x000008, "Wrong alignment on ABP_Lake_C");
static_assert(sizeof(ABP_Lake_C) == 0x0002C8, "Wrong size on ABP_Lake_C");
static_assert(offsetof(ABP_Lake_C, Lake_MID) == 0x000270, "Member 'ABP_Lake_C::Lake_MID' has a wrong offset!");
static_assert(offsetof(ABP_Lake_C, Lake_PP_MID) == 0x000278, "Member 'ABP_Lake_C::Lake_PP_MID' has a wrong offset!");
static_assert(offsetof(ABP_Lake_C, Waterline_Base_Material) == 0x000280, "Member 'ABP_Lake_C::Waterline_Base_Material' has a wrong offset!");
static_assert(offsetof(ABP_Lake_C, Surface_Base_Material) == 0x000288, "Member 'ABP_Lake_C::Surface_Base_Material' has a wrong offset!");
static_assert(offsetof(ABP_Lake_C, FFT_Speed) == 0x000290, "Member 'ABP_Lake_C::FFT_Speed' has a wrong offset!");
static_assert(offsetof(ABP_Lake_C, FFT_Intensity) == 0x000294, "Member 'ABP_Lake_C::FFT_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Lake_C, Metallic) == 0x000298, "Member 'ABP_Lake_C::Metallic' has a wrong offset!");
static_assert(offsetof(ABP_Lake_C, Specular) == 0x00029C, "Member 'ABP_Lake_C::Specular' has a wrong offset!");
static_assert(offsetof(ABP_Lake_C, Roughness) == 0x0002A0, "Member 'ABP_Lake_C::Roughness' has a wrong offset!");
static_assert(offsetof(ABP_Lake_C, FFT_Height_Tex) == 0x0002A8, "Member 'ABP_Lake_C::FFT_Height_Tex' has a wrong offset!");
static_assert(offsetof(ABP_Lake_C, FFT_Normal_Tex) == 0x0002B0, "Member 'ABP_Lake_C::FFT_Normal_Tex' has a wrong offset!");
static_assert(offsetof(ABP_Lake_C, FFT_Scales_Close) == 0x0002B8, "Member 'ABP_Lake_C::FFT_Scales_Close' has a wrong offset!");
static_assert(offsetof(ABP_Lake_C, FFT_Scale_Far) == 0x0002C0, "Member 'ABP_Lake_C::FFT_Scale_Far' has a wrong offset!");
static_assert(offsetof(ABP_Lake_C, FFT_Far_Transition_Distance) == 0x0002C4, "Member 'ABP_Lake_C::FFT_Far_Transition_Distance' has a wrong offset!");

}

